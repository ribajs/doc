/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/components/bind-content/bind-content.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/bind-content/bind-content.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindContentComponent": function() { return /* binding */ BindContentComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bind_content_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bind-content.component.html */ "./src/ts/components/bind-content/bind-content.component.html");



class BindContentComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "content", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", false);
  }

  bindContent() {
    this.classList.add("bound");
    this.innerHTML = this.content;
    this.removeEventListener("click", this.bindContent);
    this.bind();
  }

  connectedCallback() {
    this.addEventListener("click", this.bindContent);
    this.init([]);
  }

  template() {
    const firstElementChild = this.firstElementChild;

    if (!firstElementChild || firstElementChild.tagName !== "TEMPLATE") {
      console.error("The child element must be a template");
      return null;
    }

    this.content = firstElementChild.innerHTML;
    return _bind_content_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BindContentComponent, "tagName", "rv-bind-content");

/***/ }),

/***/ "./src/ts/components/example-tabs/example-tabs.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/example-tabs/example-tabs.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExampleBs4TabsComponent": function() { return /* binding */ ExampleBs4TabsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-tabs/bs4-tabs.component.js */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _example_tabs_component_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./example-tabs.component.html */ "./src/ts/components/example-tabs/example-tabs.component.html");






class ExampleBs4TabsComponent extends _ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4TabsComponent {
  static get observedAttributes() {
    return ["option-tabs-auto-height", "handle"];
  }

  constructor() {
    super(); // sum is used for examples

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: false
    }, {
      name: "active",
      required: false
    }, {
      name: "index",
      required: false
    }]);

    this.scope.sum = this.sum;
  }
  /**
   * Method used in examples
   * @param a
   * @param b
   */


  sum(a, b) {
    this.scope.result = Number(a) + Number(b);
    return this.scope.result;
  }

  activate(tab) {
    super.activate(tab);

    if (tab.type === "realtime-result") {
      // Get content of preview tab and insert this as the source tab content
      const previewElement = this.querySelector(".tab-content-preview");

      if (previewElement) {
        tab.content = "<pre class=\"language-html\"><code class=\"language-html\">".concat((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(previewElement.innerHTML.trim()), "</code></pre>");
        prismjs__WEBPACK_IMPORTED_MODULE_4__.highlightAll();
      }
    }
  }

  async bindIfReady() {
    return super.bindIfReady();
  }

  connectedCallback() {
    super.connectedCallback();
    this.initTabs();
    this.activateFirstTab();
    this.init(_ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4TabsComponent.observedAttributes);
  }

  async afterBind() {
    prismjs__WEBPACK_IMPORTED_MODULE_4__.highlightAll();
    await super.afterBind();
  }

  countOfFirstWhitespaces(str) {
    const match = str.match(/^([\s]+)/s);
    return match ? match[0].length : 0;
  }
  /**
   * Removes the first indents of a source string based on the first indents until the first character was found
   * @param source
   */


  removeIndentsOfSource(source) {
    const lines = source.split(/\r?\n/);
    let firstLineIndents = this.countOfFirstWhitespaces(lines[0]); // If the first lines contains only whitespaces

    while (firstLineIndents === lines[0].length) {
      lines.shift();
      firstLineIndents = this.countOfFirstWhitespaces(lines[0]);
    }

    if (firstLineIndents !== 0) {
      for (let i = 0; i < lines.length; i++) {
        const currentIndents = this.countOfFirstWhitespaces(lines[i]);

        if (currentIndents >= firstLineIndents) {
          lines[i] = lines[i].substring(firstLineIndents);
        }
      }
    }

    return lines.join("\n").trim();
  }

  addItemsByTemplate() {
    const templates = this.querySelectorAll("template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      const type = tpl.getAttribute("type");

      if (type === "single-html-file") {
        const sourceTemplate = document.createElement("template");
        const sourceCode = this.removeIndentsOfSource(tpl.innerHTML);
        sourceTemplate.setAttribute("title", "Source");
        sourceTemplate.setAttribute("type", "source");
        sourceTemplate.innerHTML = "<pre class=\"language-html\"><code class=\"language-html\">".concat((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(sourceCode), "</code></pre>");
        this.addItemByTemplate(sourceTemplate, index);
        const previewTemplate = document.createElement("template");
        previewTemplate.setAttribute("title", "Preview");
        previewTemplate.setAttribute("type", "preview");
        previewTemplate.innerHTML = sourceCode;
        this.addItemByTemplate(previewTemplate, index + 1);
        const resultTemplate = document.createElement("template");
        resultTemplate.setAttribute("title", "Rendered");
        resultTemplate.setAttribute("type", "realtime-result");
        resultTemplate.innerHTML = "";
        this.addItemByTemplate(resultTemplate, index + 2);
      } else {
        this.addItemByTemplate(tpl, index);
      }
    }

    this.templateReady = true;
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      return _example_tabs_component_html__WEBPACK_IMPORTED_MODULE_5__["default"];
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExampleBs4TabsComponent, "tagName", "rv-example-tabs");

/***/ }),

/***/ "./src/ts/components/file-tree/file-tree.component.ts":
/*!************************************************************!*\
  !*** ./src/ts/components/file-tree/file-tree.component.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileTreeComponent": function() { return /* binding */ FileTreeComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _file_tree_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file-tree.component.html */ "./src/ts/components/file-tree/file-tree.component.html");



 // interface Scope extends ScopeBase {}

class FileTreeComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.BasicComponent {
  static get observedAttributes() {
    return [];
  }

  // : Scope = {};
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(FileTreeComponent.observedAttributes);
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _file_tree_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(FileTreeComponent, "tagName", "rv-file-tree");

/***/ }),

/***/ "./src/ts/components/icon-preview/icon-preview.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/icon-preview/icon-preview.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IconPreviewComponent": function() { return /* binding */ IconPreviewComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _icon_preview_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icon-preview.component.html */ "./src/ts/components/icon-preview/icon-preview.component.html");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_5__);






class IconPreviewComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["asset-path"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      assetPath: "",
      name: "",
      src: "",
      sizes: [96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8],
      colors: ["black", "white", "primary", "success", "info", "warning", "danger", ["stroke-black", "white"], ["stroke-white", "black"], ["stroke-primary", "white"], ["stroke-success", "white"], ["stroke-info", "white"], ["stroke-warning", "white"], ["stroke-danger", "white"]],
      directions: ["left", "left-up", "up", "up-right", "right", "right-down", "down", "down-left"],
      example: "string"
    });

    const urlParams = new URLSearchParams(window.location.search);
    const name = urlParams.get("name");

    if (!name) {
      throw new Error('Query url parameter "name" is required!');
    }

    this.scope.name = name;
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(IconPreviewComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes);
  }

  async afterBind() {
    prismjs__WEBPACK_IMPORTED_MODULE_5__.highlightAll();
    await super.afterBind();
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "assetPath") {
      const urlParts = this.scope.assetPath.split("?");
      this.scope.assetPath = urlParts[0];
      const cacheQueryParam = urlParts[1];
      this.scope.src = this.scope.assetPath += "iconset_" + this.scope.name + ".svg?" + cacheQueryParam;
      this.scope.example = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)("\n        <bs4-icon color=\"danger\" src=\"/assets/".concat(this.scope.name + ".svg", "\" size=\"32\" direction=\"up\"></bs4-icon>\n      ").trim());
    }
  }

  requiredAttributes() {
    return ["assetPath", "src"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _icon_preview_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IconPreviewComponent, "tagName", "rv-icon-preview");

/***/ }),

/***/ "./src/ts/components/index.ts":
/*!************************************!*\
  !*** ./src/ts/components/index.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindContentComponent": function() { return /* reexport safe */ _bind_content_bind_content_component_js__WEBPACK_IMPORTED_MODULE_0__.BindContentComponent; },
/* harmony export */   "ExampleBs4TabsComponent": function() { return /* reexport safe */ _example_tabs_example_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.ExampleBs4TabsComponent; },
/* harmony export */   "FileTreeComponent": function() { return /* reexport safe */ _file_tree_file_tree_component_js__WEBPACK_IMPORTED_MODULE_2__.FileTreeComponent; },
/* harmony export */   "IconPreviewComponent": function() { return /* reexport safe */ _icon_preview_icon_preview_component_js__WEBPACK_IMPORTED_MODULE_3__.IconPreviewComponent; },
/* harmony export */   "LoremIpsumComponent": function() { return /* reexport safe */ _lorem_ipsum_lorem_ipsum_component_js__WEBPACK_IMPORTED_MODULE_4__.LoremIpsumComponent; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _shopify_linklist_shopify_linklist_component_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _bind_content_bind_content_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bind-content/bind-content.component.js */ "./src/ts/components/bind-content/bind-content.component.ts");
/* harmony import */ var _example_tabs_example_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./example-tabs/example-tabs.component.js */ "./src/ts/components/example-tabs/example-tabs.component.ts");
/* harmony import */ var _file_tree_file_tree_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-tree/file-tree.component.js */ "./src/ts/components/file-tree/file-tree.component.ts");
/* harmony import */ var _icon_preview_icon_preview_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icon-preview/icon-preview.component.js */ "./src/ts/components/icon-preview/icon-preview.component.ts");
/* harmony import */ var _lorem_ipsum_lorem_ipsum_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lorem-ipsum/lorem-ipsum.component.js */ "./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts");
/* harmony import */ var _shopify_linklist_shopify_linklist_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify-linklist/shopify-linklist.component.js */ "./src/ts/components/shopify-linklist/shopify-linklist.component.ts");







/***/ }),

/***/ "./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts":
/*!****************************************************************!*\
  !*** ./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoremIpsumComponent": function() { return /* binding */ LoremIpsumComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var lorem_ipsum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lorem-ipsum */ "../../.yarn/cache/lorem-ipsum-npm-2.0.4-ec2e0c8da4-5f3864bfae.zip/node_modules/lorem-ipsum/dist/index.js");



class LoremIpsumComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["sentences-per-paragraph-max", "sentences-per-paragraph-min", "words-per-sentence-max", "words-per-sentence-min", "words", "generate-words", "generate-sentences", "generate-paragraphs", "format"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "options", {
      sentencesPerParagraph: {
        max: 8,
        min: 4
      },
      wordsPerSentence: {
        max: 16,
        min: 4
      }
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      generateParagraphs: 1,
      format: "html"
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(LoremIpsumComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  async beforeBind() {
    await super.beforeBind();
  }

  async afterBind() {
    this.lorem = new lorem_ipsum__WEBPACK_IMPORTED_MODULE_2__.LoremIpsum(this.options, this.scope.format);

    if (this.scope.generateWords) {
      this.innerHTML = this.lorem.generateWords(this.scope.generateWords);
    } else if (this.scope.generateSentences) {
      this.innerHTML = this.lorem.generateSentences(this.scope.generateSentences);
    } else if (this.scope.generateParagraphs) {
      this.innerHTML = this.lorem.generateParagraphs(this.scope.generateParagraphs);
    }

    await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "sentencesPerParagraphMax":
        if (this.options.sentencesPerParagraph) {
          this.options.sentencesPerParagraph.max = newValue;
        }

        break;

      case "sentencesPerParagraphMin":
        if (this.options.sentencesPerParagraph) {
          this.options.sentencesPerParagraph.min = newValue;
        }

        break;

      case "wordsPerSentenceMax":
        if (this.options.wordsPerSentence) {
          this.options.wordsPerSentence.max = newValue;
        }

        break;

      case "wordsPerSentenceMin":
        if (this.options.wordsPerSentence) {
          this.options.wordsPerSentence.min = newValue;
        }

        break;

      case "words":
        if (this.options.words) {
          this.options.words = newValue;
        }

        break;
    }
  } // deconstructor


  disconnectedCallback() {
    super.disconnectedCallback();
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LoremIpsumComponent, "tagName", "rv-lorem-ipsum");

/***/ }),

/***/ "./src/ts/components/shopify-linklist/shopify-linklist.component.ts":
/*!**************************************************************************!*\
  !*** ./src/ts/components/shopify-linklist/shopify-linklist.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLinklistComponent": function() { return /* binding */ ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _shopify_linklist_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shopify-linklist.component.html */ "./src/ts/components/shopify-linklist/shopify-linklist.component.html");




/**
 * shopify-filter
 */

class ShopifyLinklistComponent extends _ribajs_shopify__WEBPACK_IMPORTED_MODULE_1__.ShopifyLinklistComponent {
  constructor() {
    super();
  }
  /**
   * Only set the component template if there no childs already
   */


  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _shopify_linklist_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLinklistComponent, "tagName", "shopify-linklist");

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsAttrExampleComponent": function() { return /* binding */ Bs4TabsAttrExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_attr_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-attr-example.component.html */ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html");



class Bs4TabsAttrExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  template() {
    return _bs4_tabs_attr_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsAttrExampleComponent, "tagName", "rv-bs4-tabs-attr-example");

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts":
/*!************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsTplExampleComponent": function() { return /* binding */ Bs4TabsTplExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_tpl_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-tpl-example.component.html */ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html");



class Bs4TabsTplExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  template() {
    return _bs4_tabs_tpl_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsTplExampleComponent, "tagName", "rv-bs4-tabs-tpl-example");

/***/ }),

/***/ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EachItemExampleComponent": function() { return /* binding */ EachItemExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _each_item_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./each-item-example.component.html */ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html");



class EachItemExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: this.getItems(),
      pop: this.pop,
      push: this.push,
      reset: this.reset,
      shift: this.shift,
      sort: this.sort,
      splice: this.splice,
      unshift: this.unshift
    });
  }

  push() {
    this.scope.items.push({
      name: "pushed"
    });
  }

  pop() {
    this.scope.items.pop();
  }

  shift() {
    this.scope.items.shift();
  }

  unshift() {
    this.scope.items.unshift({
      name: "shifted"
    });
  }

  splice() {
    this.scope.items.splice(1, 1, {
      name: "spliced1"
    }, {
      name: "spliced2"
    });
  }

  reset() {
    this.scope.items = this.getItems();
  }

  sort() {
    this.scope.items.sort((a, b) => {
      return (a.value || 0) - (b.value || 0);
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  getItems() {
    return [{
      name: "x",
      value: 2
    }, {
      name: "y",
      value: 1
    }, {
      name: "z",
      value: 3
    }];
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  template() {
    return _each_item_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachItemExampleComponent, "tagName", "rv-each-item-example");

/***/ }),

/***/ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts":
/*!************************************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts ***!
  \************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtrasScrollEventsExampleComponent": function() { return /* binding */ ExtrasScrollEventsExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _extras_scroll_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extras-scroll-events-example.component.html */ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html");




class ExtrasScrollEventsExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "consoleElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchZoneElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      log: this.log
    });
  }

  log(eventName, event) {
    if (this.consoleElement) {
      let html = "<p class=\"log\"><span class=\"name\">".concat(eventName, "</span>");
      const detail = event.detail;

      if (detail && detail.position) {
        html += "<span class=\"detail\">(x: ".concat(detail.position.x, " y: ").concat(detail.position.y, " maxX: ").concat(detail.position.maxX, " maxY: ").concat(detail.position.maxY, ")</span>");
      }

      html += '<span class="time">' + new Date().toLocaleTimeString() + "</span></p>";
      this.consoleElement.insertAdjacentHTML("afterbegin", html);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(".console");
    this.touchZoneElement = this.querySelector(".touch-zone");
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _extras_scroll_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExtrasScrollEventsExampleComponent, "tagName", "rv-extras-scroll-events-example");

/***/ }),

/***/ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts":
/*!*******************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsExampleComponent": function() { return /* binding */ TouchEventsExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _touch_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./touch-events-example.component.html */ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html");




class TouchEventsExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "consoleElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchZoneElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      log: this.log
    });
  }

  log(eventName, event) {
    if (this.consoleElement) {
      let html = "<p class=\"log\"><span class=\"name\">".concat(eventName, "</span>");

      if (event.detail && event.detail.offset) {
        html += "<span class=\"detail\">(X: ".concat(event.detail.offset.x, " Y: ").concat(event.detail.offset.y, ")</span>");
      }

      html += '<span class="time">' + new Date().toLocaleTimeString() + "</span></p>";
      this.consoleElement.insertAdjacentHTML("afterbegin", html);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(".console");
    this.touchZoneElement = this.querySelector(".touch-zone");
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _touch_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TouchEventsExampleComponent, "tagName", "rv-touch-events-example");

/***/ }),

/***/ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStaticExampleComponent": function() { return /* binding */ I18nStaticExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _i18n_static_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./i18n-static-example.component.html */ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html");



class I18nStaticExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(I18nStaticExampleComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  requiredAttributes() {
    return [];
  }

  template() {
    return _i18n_static_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nStaticExampleComponent, "tagName", "rv-i18n-static-example");

/***/ }),

/***/ "./src/ts/main.ts":
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Main": function() { return /* binding */ Main; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_extras__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/extras */ "../../packages/extras/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_i18n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ribajs/i18n */ "../../packages/i18n/src/index.ts");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ribajs/shopify-tda */ "../../packages/shopify-tda/src/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/index.js */ "./src/ts/components/index.ts");
/* harmony import */ var _demos_core_each_item_src_ts_components_each_item_example_each_item_example_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.js */ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts");
/* harmony import */ var _demos_bs4_tabs_attr_src_ts_components_bs4_tabs_attr_example_bs4_tabs_attr_example_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.js */ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts");
/* harmony import */ var _demos_bs4_tabs_tpl_src_ts_components_bs4_tabs_tpl_example_bs4_tabs_tpl_example_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.js */ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts");
/* harmony import */ var _demos_i18n_static_src_ts_components_i18n_static_example_i18n_static_example_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.js */ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts");
/* harmony import */ var _demos_extras_touch_events_src_ts_components_touch_events_example_touch_events_example_component_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.js */ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts");
/* harmony import */ var _demos_extras_scroll_events_src_ts_components_extras_scroll_events_example_extras_scroll_events_example_component_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.js */ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! prismjs/components/prism-javascript */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-javascript.js");
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! prismjs/components/prism-typescript */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-typescript.js");
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! prismjs/components/prism-scss */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-scss.js");
/* harmony import */ var prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20__);










 // Examples











class Main {
  onPageReady(viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset) {
    prismjs__WEBPACK_IMPORTED_MODULE_17__.highlightAll();

    if (this.view) {
      this.view.models.dataset = dataset;
    }
  }

  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "riba", new _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Riba());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "localesService", _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_9__.LocalesService.getSingleton());

    this.riba.module.regist(_ribajs_core__WEBPACK_IMPORTED_MODULE_1__.coreModule.init());
    this.riba.module.regist(_ribajs_extras__WEBPACK_IMPORTED_MODULE_4__.extrasModule.init());
    this.riba.module.regist(_ribajs_router__WEBPACK_IMPORTED_MODULE_6__.routerModule.init());
    this.riba.module.regist(_ribajs_shopify__WEBPACK_IMPORTED_MODULE_5__.shopifyModule.init());
    this.riba.module.regist(_ribajs_i18n__WEBPACK_IMPORTED_MODULE_7__.i18nModule.init({
      localesService: this.localesService
    }));
    this.riba.module.regist(_ribajs_bs4__WEBPACK_IMPORTED_MODULE_8__.bs4Module.init()); // Register custom components

    this.riba.module.component.regists(_components_index_js__WEBPACK_IMPORTED_MODULE_10__); // Regist examples‚

    this.riba.module.component.regists({
      EachItemExampleComponent: _demos_core_each_item_src_ts_components_each_item_example_each_item_example_component_js__WEBPACK_IMPORTED_MODULE_11__.EachItemExampleComponent,
      Bs4TabsAttrExampleComponent: _demos_bs4_tabs_attr_src_ts_components_bs4_tabs_attr_example_bs4_tabs_attr_example_component_js__WEBPACK_IMPORTED_MODULE_12__.Bs4TabsAttrExampleComponent,
      Bs4TabsTplExampleComponent: _demos_bs4_tabs_tpl_src_ts_components_bs4_tabs_tpl_example_bs4_tabs_tpl_example_component_js__WEBPACK_IMPORTED_MODULE_13__.Bs4TabsTplExampleComponent,
      I18nStaticExampleComponent: _demos_i18n_static_src_ts_components_i18n_static_example_i18n_static_example_component_js__WEBPACK_IMPORTED_MODULE_14__.I18nStaticExampleComponent,
      TouchEventsExampleComponent: _demos_extras_touch_events_src_ts_components_touch_events_example_touch_events_example_component_js__WEBPACK_IMPORTED_MODULE_15__.TouchEventsExampleComponent,
      ExtrasScrollEventsExampleComponent: _demos_extras_scroll_events_src_ts_components_extras_scroll_events_example_extras_scroll_events_example_component_js__WEBPACK_IMPORTED_MODULE_16__.ExtrasScrollEventsExampleComponent
    });
    this.dispatcher.on("newPageReady", this.onPageReady, this);
    window.model = window.model || {};
    window.model.dataset = window.model.dataset || {};
    this.view = this.riba.bind(document.body, window.model); // view.registComponents();
  }

}
(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.ready)(() => {
  new Main();
});

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseOnUrlBinder": function() { return /* binding */ CollapseOnUrlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");





/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

class CollapseOnUrlBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "checkURL", this._checkURL.bind(this));
  }

  _checkURL() {
    if (this.url && (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(this.url)) {
      var _this$collapseService;

      (_this$collapseService = this.collapseService) === null || _this$collapseService === void 0 ? void 0 : _this$collapseService.hide();
      return true;
    } // collapseService.show();


    return false;
  }

  bind(el) {
    this.collapseService = new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(el, [], {
      toggle: false
    });
  }

  unbind() {
    if (this.checkURL) {
      this.dispatcher.off("newPageReady", this.checkURL);
    }
  }

  routine(el, url) {
    this.url = url;

    if (this.checkURL) {
      this.dispatcher.off("newPageReady", this.checkURL);
    }

    this.dispatcher.on("newPageReady", this.checkURL);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CollapseOnUrlBinder, "key", "bs4-collapse-on-url");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-collapse.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-collapse.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseBinder": function() { return /* binding */ CollapseBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");



/**
 * @deprecated
 */

class CollapseBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind() {
    console.warn("bs4-collapse is deprecated, use bs4-toggle-collapse-on-click instead.");
  }

  routine(el, targetSelector) {
    const targets = document.querySelectorAll(targetSelector);
    const collapseServices = [];
    targets.forEach(target => {
      collapseServices.push(new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [el], {
        toggle: false
      }));
    });
    el.addEventListener("click", event => {
      event.preventDefault();
      collapseServices.forEach(collapseService => {
        collapseService.toggle();
      });
    });
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CollapseBinder, "key", "bs4-collapse");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-dropdown.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-dropdown.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropdownBinder": function() { return /* binding */ DropdownBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/dropdown/
 */

class DropdownBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.toggler = (el.classList.contains("dropdown-toggle") ? el : el.querySelector(".dropdown-toggle")) || el;
  }

  routine(el) {
    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!this.toggler) {
      throw new Error("No dropdown toggle element found!");
    }

    if (this.dropdownService) {
      this.dropdownService.dispose();
      this.toggler.removeEventListener("click", this.dropdownService.toggle);
    }

    this.dropdownService = new _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__.DropdownService(this.toggler, option);
    this.dropdownService.toggle = this.dropdownService.toggle.bind(this.dropdownService);
    this.toggler.addEventListener("click", this.dropdownService.toggle);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DropdownBinder, "key", "bs4-dropdown");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpanOnUrlBinder": function() { return /* binding */ ExpanOnUrlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");





/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

class ExpanOnUrlBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    const collapseService = new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(el, [], {
      toggle: false
    });
    const dispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main");

    const checkURL = urlToCheck => {
      if (urlToCheck && (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(urlToCheck)) {
        collapseService.show();
        return true;
      }

      collapseService.hide();
      return false;
    };

    dispatcher.on("newPageReady", () => checkURL(url));
    checkURL(url);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExpanOnUrlBinder, "key", "bs4-expan-on-url");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-popover.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-popover.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopoverBinder": function() { return /* binding */ PopoverBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }



/**
 *
 */

class PopoverBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "listeners", {});
  }

  routine(el, optionsOrContent) {
    let options = {};

    if (typeof optionsOrContent === "string") {
      options.content = optionsOrContent;
    } else if (typeof optionsOrContent === "object") {
      options = _objectSpread({}, optionsOrContent);
    }

    options.placement = options.placement || "auto";
    const popover = new _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__.PopoverService(el, _objectSpread(_objectSpread({}, _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__.PopoverService.Default), options)); // destroy previous popover if it already exists

    if (this.popover) {
      this.popover.dispose();
    }

    this.popover = popover;
    /*
     * Methods "show", "hide", etc. of the PopoverService can be called by dispatching an
     * event `trigger-${methodName}` on the bound element.
     * All these methods have no arguments.
     */

    const methodNames = ["show", "hide", "toggle", "dispose", "enable", "disable", "toggleEnabled", "update" // render update
    ]; // remove listeners of previous Popover if there already was one

    if (this.listeners) {
      for (const [trigger, listener] of Object.entries(this.listeners)) {
        this.el.removeEventListener(trigger, listener);
      }
    }

    this.listeners = Object.create(null);

    for (const methodName of methodNames) {
      const trigger = "trigger-".concat(methodName);
      const listener = popover[methodName].bind(popover);
      this.el.addEventListener(trigger, listener);
      this.listeners[trigger] = listener;
    }
  }

  bind(el) {
    // inform ancestors that this popover was bound
    // Event name in same style as the other popover CustomEvents from Bootstrap
    el.dispatchEvent(new CustomEvent("bound.bs.popover", {
      bubbles: true,
      cancelable: true
    }));
  }

  unbind() {
    // destroy Popover if it already exists
    if (this.popover) {
      this.popover.dispose();
    } // remove listeners if there are any


    if (this.listeners) {
      for (const [trigger, listener] of Object.entries(this.listeners)) {
        this.el.removeEventListener(trigger, listener);
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(PopoverBinder, "key", "bs4-popover");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollspyClassBinder": function() { return /* binding */ ScrollspyClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");




/**
 * scrollspy-class
 * @see https://getbootstrap.com/docs/4.1/components/scrollspy/
 */

class ScrollspyClassBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._onScroll.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isInViewport", this._isInViewport.bind(this));
  }

  _onScroll() {
    if (!this.target) {
      throw new Error("No target element found!");
    }

    if (!this.className) {
      throw new Error("className not set!");
    }

    if (this.isInViewport(this.target)) {
      this.el.classList.add(this.className);

      if (this.el.type === "radio") {
        this.el.checked = true;
      }
    } else {
      this.el.classList.remove(this.className);

      if (this.el.type === "radio") {
        this.el.checked = false;
      }
    }
  }

  /**
   * Determine if an element is in the viewport
   * @param elem The element
   * @return Returns true if element is in the viewport
   */
  _isInViewport(elem) {
    if (!elem) {
      return false;
    }

    const offsetTop = Number(this.el.dataset.offset || 0);
    const offsetBottom = Number(this.el.dataset.offsetBottom || 0);
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.isInViewport)(elem, offsetTop, offsetBottom);
  }

  bind() {
    window.addEventListener("scroll", this.onScroll, {
      passive: true
    });
    this.onScroll();
  }

  routine(el, targetSelector) {
    const nativeIDTargetSelector = targetSelector.replace("#", "");
    this.target = document.getElementById(nativeIDTargetSelector) || undefined;
    this.className = this.args[0];
  }

  unbind() {
    window.removeEventListener("scroll", this.onScroll);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollspyClassBinder, "key", "bs4-scrollspy-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts":
/*!******************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShowToastOnEventBinder": function() { return /* binding */ ShowToastOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_bs4_src_interfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/bs4/src/interfaces */ "../../packages/bs4/src/interfaces/index.ts");




class ShowToastOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    if (!this.toastData) {
      throw new Error("Toast data not set!");
    }

    this.toastData.$event = event;
    this.toastData.$context = this.view.models;
    const toastData = new _ribajs_bs4_src_interfaces__WEBPACK_IMPORTED_MODULE_3__.Toast(this.toastData);
    const notificationDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(toastData.channel || "toast");
    notificationDispatcher.trigger("show-notification", toastData);
  }

  bind(el) {
    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  routine(el, toastData) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.toastData = toastData;
  }

  unbind(el) {
    const eventName = this.args[0];
    el.removeEventListener(eventName, this.onEvent);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShowToastOnEventBinder, "key", "show-toast-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts":
/*!*****************************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* binding */ ToggleCollapseOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");



/**
 *
 */

class ToggleCollapseOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "targets", new Map());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    event.preventDefault();

    for (const collapseService of this.targets.values()) {
      collapseService.toggle();
    }
  }

  bind(el) {
    this.onEvent = this.onEvent.bind(this);

    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  unbind() {
    const eventName = this.args[0];
    this.el.removeEventListener(eventName, this.onEvent);
  }

  routine(el, targetSelector) {
    const newTargets = Array.from(document.querySelectorAll(targetSelector));

    if (newTargets.length <= 0) {
      console.warn("[toggleCollapseOnEventBinder] No element with selector \"".concat(targetSelector, "\" found."));
    }

    for (const target of this.targets.keys()) {
      if (!newTargets.find(x => x === target)) {
        var _this$targets$get;

        (_this$targets$get = this.targets.get(target)) === null || _this$targets$get === void 0 ? void 0 : _this$targets$get.dispose();
        this.targets.delete(target);
      }
    }

    for (const target of newTargets) {
      if (!this.targets.has(target)) {
        this.targets.set(target, new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [el], {
          toggle: false
        }));
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleCollapseOnEventBinder, "key", "bs4-toggle-collapse-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-tooltip.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-tooltip.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipBinder": function() { return /* binding */ TooltipBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/tooltips/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/tooltip.js
 */

const template = document.createElement("div");
template.classList.add("tooltip");
template.setAttribute("role", "tooltip");
const arrow = document.createElement("div");
arrow.classList.add("arrow");
template.appendChild(arrow);
const inner = document.createElement("div");
inner.classList.add("tooltip-inner");
template.appendChild(inner);
/**
 *
 */

class TooltipBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tip", template.cloneNode(true));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "show", this._show.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "hide", this._hide.bind(this));
  }

  _show() {
    const placement = this.el.dataset.placement || "top";
    const offset = 0;
    this.popper = new popper_js__WEBPACK_IMPORTED_MODULE_2__["default"](this.el, this.tip, {
      placement,
      modifiers: {
        offset: {
          offset
        },
        flip: {
          behavior: "flip"
        },
        arrow: {
          element: ".arrow"
        },
        preventOverflow: {
          boundariesElement: "scrollParent"
        }
      }
    });
    document.body.appendChild(this.tip);
    this.tip.classList.add("show");
    this.tip.classList.add("bs-tooltip-" + placement);
  }

  _hide() {
    this.tip.classList.remove("show");

    if (this.popper) {
      this.popper.destroy();
    }
  }

  bind(el) {
    el.addEventListener("mouseenter", this.show);
    el.addEventListener("mouseleave", this.hide);
  }

  routine(el, text) {
    const innerEl = this.tip.querySelector(".tooltip-inner");
    innerEl.innerHTML = text;
  }

  unbind() {
    this.hide();
    this.el.removeEventListener("mouseenter", this.show);
    this.el.removeEventListener("mouseleave", this.hide);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TooltipBinder, "key", "bs4-tooltip");

/***/ }),

/***/ "../../packages/bs4/src/binders/index.ts":
/*!***********************************************!*\
  !*** ../../packages/bs4/src/binders/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseBinder": function() { return /* reexport safe */ _bs4_collapse_binder_js__WEBPACK_IMPORTED_MODULE_1__.CollapseBinder; },
/* harmony export */   "CollapseOnUrlBinder": function() { return /* reexport safe */ _bs4_collapse_on_url_binder_js__WEBPACK_IMPORTED_MODULE_0__.CollapseOnUrlBinder; },
/* harmony export */   "DropdownBinder": function() { return /* reexport safe */ _bs4_dropdown_binder_js__WEBPACK_IMPORTED_MODULE_3__.DropdownBinder; },
/* harmony export */   "ExpanOnUrlBinder": function() { return /* reexport safe */ _bs4_expan_on_url_binder_js__WEBPACK_IMPORTED_MODULE_4__.ExpanOnUrlBinder; },
/* harmony export */   "PopoverBinder": function() { return /* reexport safe */ _bs4_popover_binder_js__WEBPACK_IMPORTED_MODULE_5__.PopoverBinder; },
/* harmony export */   "ScrollToOnEventBinder": function() { return /* reexport safe */ _scroll_to_on_event_binder_js__WEBPACK_IMPORTED_MODULE_9__.ScrollToOnEventBinder; },
/* harmony export */   "ScrollspyClassBinder": function() { return /* reexport safe */ _bs4_scrollspy_class_binder_js__WEBPACK_IMPORTED_MODULE_7__.ScrollspyClassBinder; },
/* harmony export */   "ShowToastOnEventBinder": function() { return /* reexport safe */ _bs4_show_toast_on_binder_js__WEBPACK_IMPORTED_MODULE_6__.ShowToastOnEventBinder; },
/* harmony export */   "ToggleAttributeBinder": function() { return /* reexport safe */ _toggle_attribute_binder_js__WEBPACK_IMPORTED_MODULE_10__.ToggleAttributeBinder; },
/* harmony export */   "ToggleClassBinder": function() { return /* reexport safe */ _toggle_class_binder_js__WEBPACK_IMPORTED_MODULE_11__.ToggleClassBinder; },
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* reexport safe */ _bs4_toggle_collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_2__.ToggleCollapseOnEventBinder; },
/* harmony export */   "TooltipBinder": function() { return /* reexport safe */ _bs4_tooltip_binder_js__WEBPACK_IMPORTED_MODULE_8__.TooltipBinder; }
/* harmony export */ });
/* harmony import */ var _bs4_collapse_on_url_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4-collapse-on-url.binder.js */ "../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts");
/* harmony import */ var _bs4_collapse_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bs4-collapse.binder.js */ "../../packages/bs4/src/binders/bs4-collapse.binder.ts");
/* harmony import */ var _bs4_toggle_collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-toggle-collapse-on-event.binder.js */ "../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts");
/* harmony import */ var _bs4_dropdown_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-dropdown.binder.js */ "../../packages/bs4/src/binders/bs4-dropdown.binder.ts");
/* harmony import */ var _bs4_expan_on_url_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-expan-on-url.binder.js */ "../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts");
/* harmony import */ var _bs4_popover_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4-popover.binder.js */ "../../packages/bs4/src/binders/bs4-popover.binder.ts");
/* harmony import */ var _bs4_show_toast_on_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bs4-show-toast-on.binder.js */ "../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts");
/* harmony import */ var _bs4_scrollspy_class_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-scrollspy-class.binder.js */ "../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts");
/* harmony import */ var _bs4_tooltip_binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-tooltip.binder.js */ "../../packages/bs4/src/binders/bs4-tooltip.binder.ts");
/* harmony import */ var _scroll_to_on_event_binder_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scroll-to-on-event.binder.js */ "../../packages/bs4/src/binders/scroll-to-on-event.binder.ts");
/* harmony import */ var _toggle_attribute_binder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toggle-attribute.binder.js */ "../../packages/bs4/src/binders/toggle-attribute.binder.ts");
/* harmony import */ var _toggle_class_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toggle-class.binder.js */ "../../packages/bs4/src/binders/toggle-class.binder.ts");













/***/ }),

/***/ "../../packages/bs4/src/binders/scroll-to-on-event.binder.ts":
/*!*******************************************************************!*\
  !*** ../../packages/bs4/src/binders/scroll-to-on-event.binder.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollToOnEventBinder": function() { return /* binding */ ScrollToOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



class ScrollToOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    const offset = Number(this.el.dataset.offset || 0);
    const scrollElement = this.el.dataset.scrollElement ? document.querySelector(this.el.dataset.scrollElement) : window;

    if (this.target) {
      (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollTo)(this.target, offset, scrollElement);
      event.preventDefault();
    }
  }

  bind(el) {
    this.onEvent = this.onEvent.bind(this);
    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  routine(el, targetSelector) {
    this.target = document.querySelector(targetSelector) || undefined;
  }

  unbind(el) {
    const eventName = this.args[0];
    el.removeEventListener(eventName, this.onEvent);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollToOnEventBinder, "key", "scroll-to-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/toggle-attribute.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/binders/toggle-attribute.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleAttributeBinder": function() { return /* binding */ ToggleAttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");




/**
 * Adds / removes the attribute on click on the bs4-toggle-button with the same id
 * E.g. with this binder you can toggle a hidden attribute to show / hide the element
 * Events
 * * `off`
 * * `on`
 */

class ToggleAttributeBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "state", "off");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "triggerState", this._triggerState.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onToggle", this._onToggle.bind(this));
  }

  _triggerState() {
    var _this$toggleButtonEve;

    (_this$toggleButtonEve = this.toggleButtonEvents) === null || _this$toggleButtonEve === void 0 ? void 0 : _this$toggleButtonEve.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.state, this.state);
  }

  _onToggle() {
    this.toggle.bind(this)(this.el);
  }

  toggle(el) {
    if (this.state === "removed") {
      this.add.bind(this)(el);
    } else {
      this.remove.bind(this)(el);
    }
  }

  remove(el) {
    const attributeName = this.args[0];
    el.removeAttribute(attributeName);
    this.state = "removed";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_ATTRIBUTE.elEventNames.removed, {
      detail: {
        attributeName
      }
    }));
    this.triggerState();
  }

  add(el) {
    const attributeName = this.args[0];
    el.setAttribute(attributeName, attributeName);
    this.state = "added";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_ATTRIBUTE.elEventNames.added, {
      detail: {
        attributeName
      }
    }));
    this.triggerState();
  }

  bind(el) {
    const attributeName = this.args[0];
    this.state = el.hasAttribute(attributeName) ? "added" : "removed";
  }

  unbind() {
    var _this$toggleButtonEve2, _this$toggleButtonEve3;

    (_this$toggleButtonEve2 = this.toggleButtonEvents) === null || _this$toggleButtonEve2 === void 0 ? void 0 : _this$toggleButtonEve2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
    (_this$toggleButtonEve3 = this.toggleButtonEvents) === null || _this$toggleButtonEve3 === void 0 ? void 0 : _this$toggleButtonEve3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  routine(el, newId) {
    const oldId = this._getValue(el);

    if (oldId && this.toggleButtonEvents) {
      this.toggleButtonEvents.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      this.toggleButtonEvents.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    if (!this.toggleButtonEvents) {
      this.toggleButtonEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.nsPrefix + newId);
      this.toggleButtonEvents.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      this.toggleButtonEvents.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleAttributeBinder, "key", "bs4-toggle-attribute-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/toggle-class.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/toggle-class.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleClassBinder": function() { return /* binding */ ToggleClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");




/**
 * Adds / removes the class on click on the bs4-toggle-button with the same id
 *
 * Events
 * * `off`
 * * `on`
 */

class ToggleClassBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "state", "off");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "triggerState", this._triggerState.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onToggle", this._onToggle.bind(this));
  }

  _triggerState() {
    var _this$toggleButtonEve;

    (_this$toggleButtonEve = this.toggleButtonEvents) === null || _this$toggleButtonEve === void 0 ? void 0 : _this$toggleButtonEve.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.state, this.state);
  }

  _onToggle() {
    this.toggle.bind(this)(this.el);
  }

  toggle(el) {
    if (this.state === "removed") {
      this.add.bind(this)(el);
    } else {
      this.remove.bind(this)(el);
    }
  }

  remove(el) {
    const className = this.args[0];
    el.classList.remove(className);
    this.state = "removed";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_CLASS.elEventNames.removed, {
      detail: {
        className
      }
    }));
    this.triggerState();
  }

  add(el) {
    const className = this.args[0];
    el.classList.add(className, className);
    this.state = "added";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_CLASS.elEventNames.added, {
      detail: {
        className
      }
    }));
    this.triggerState();
  }

  bind(el) {
    const className = this.args[0];
    this.state = el.classList.contains(className) ? "added" : "removed";
  }

  unbind() {
    var _this$toggleButtonEve2, _this$toggleButtonEve3;

    (_this$toggleButtonEve2 = this.toggleButtonEvents) === null || _this$toggleButtonEve2 === void 0 ? void 0 : _this$toggleButtonEve2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
    (_this$toggleButtonEve3 = this.toggleButtonEvents) === null || _this$toggleButtonEve3 === void 0 ? void 0 : _this$toggleButtonEve3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  routine(el, newId) {
    const oldId = this._getValue(el);

    let toggleButton = this.toggleButtonEvents;

    if (oldId && toggleButton) {
      toggleButton.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      toggleButton.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    if (!this.toggleButtonEvents) {
      this.toggleButtonEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.nsPrefix + newId);
      toggleButton = this.toggleButtonEvents;
      toggleButton.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      toggleButton.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleClassBinder, "key", "bs4-toggle-class-*");

/***/ }),

/***/ "../../packages/bs4/src/bs4.module.ts":
/*!********************************************!*\
  !*** ../../packages/bs4/src/bs4.module.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bs4Module": function() { return /* binding */ bs4Module; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/bs4/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/bs4/src/components/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/bs4/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/index.js */ "../../packages/bs4/src/services/index.ts");
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/bs4/src/helper/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants/index.js */ "../../packages/bs4/src/constants/index.ts");






const bs4Module = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_3__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_1__,
  helper: _helper_index_js__WEBPACK_IMPORTED_MODULE_4__,
  constants: _constants_index_js__WEBPACK_IMPORTED_MODULE_5__,

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.Bs4Service.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4AccordionComponent": function() { return /* binding */ Bs4AccordionComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_accordion_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-accordion.component.html */ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html");





const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
class Bs4AccordionComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.TemplatesComponent {
  // protected collapseServices: CollapseService[] = [];
  static get observedAttributes() {
    return ["collapse-icon-src", "collapse-icon-size", "show-only-one"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "show",
      required: false
    }, {
      name: "icon-direction",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: [],
      toggle: this.toggle,
      show: this.show,
      hide: this.hide,
      collapseIconSize: 16,
      showOnlyOne: true
    });
  }

  hide(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [this], {
        toggle: false
      }).hide();
    }
  }

  show(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));
    const others = Array.from(this.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

    if (others && this.scope.showOnlyOne) {
      for (const other of others) {
        new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(other, [], {
          toggle: false
        }).hide();
      }
    }

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [], {
        toggle: false
      }).show();
    }
  }

  toggle(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));
    const others = Array.from(this.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

    if (others && this.scope.showOnlyOne) {
      for (const other of others) {
        new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(other, [], {
          toggle: false
        }).hide();
      }
    }

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [], {
        toggle: false
      }).toggle();
    }
  }

  initItemEventListeners(item, element) {
    element.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_HIDE, this.onHide.bind(this, element, item));
    element.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_SHOW, this.onShow.bind(this, element, item));
    element.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_HIDE, this.onHide.bind(this, element, item), {
      once: true
    });
    element.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_SHOW, this.onShow.bind(this, element, item), {
      once: true
    });
  }

  getContentChildByIndex() {
    return this.querySelector(".card-body > *") || undefined;
  }

  onShow(element, item) {
    item.show = true;
    item.iconDirection = "up";
    const firstContentChild = this.getContentChildByIndex();

    if (firstContentChild) {
      this.triggerVisibilityChangedForElement(firstContentChild, item.show);
    }
  }

  onHide(element, item) {
    item.show = false;
    item.iconDirection = "down";
    const firstContentChild = this.getContentChildByIndex();

    if (firstContentChild) {
      this.triggerVisibilityChangedForElement(firstContentChild, item.show);
    }
  }

  transformTemplateAttributes(attributes) {
    attributes.handle = attributes.handle || handleize(attributes.title);
    attributes.show = !!attributes.show;
    attributes.iconDirection = attributes.iconDirection || attributes.show ? "up" : "down";
    return attributes;
  }
  /**
   * Trigger `visibility-changed` for components that need to update if visibility changes.
   * Se also bsf-tabs
   * @param element
   * @param visible
   */


  triggerVisibilityChangedForElement(element, visible) {
    setTimeout(() => {
      // Use this event to update any custom element when it becomes visible
      element.dispatchEvent(new CustomEvent("visibility-changed", {
        detail: {
          visible
        }
      }));
    }, 200);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4AccordionComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  async beforeBind() {
    return await super.beforeBind();
  }

  async afterBind() {
    return await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      return _bs4_accordion_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4AccordionComponent, "tagName", "bs4-accordion");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-button/bs4-button.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-button/bs4-button.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ButtonComponent": function() { return /* binding */ Bs4ButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class Bs4ButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["animation-class"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      animationClass: "btn-animation-start",
      onClick: this.onClick.bind(this)
    });
  }

  onClick() {
    this.startAnimation();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ButtonComponent.observedAttributes);
  }

  startAnimation() {
    this.classList.add(this.scope.animationClass);
  }

  onStartAnimation() {//
  }

  onEndAnimation() {
    setTimeout(() => {
      this.classList.remove(this.scope.animationClass);
    });
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      this.onStartAnimation = this.onStartAnimation.bind(this);
      this.addEventListener("webkitAnimationStart", this.onStartAnimation);
      this.addEventListener("animationstart", this.onStartAnimation);
      this.onEndAnimation = this.onEndAnimation.bind(this);
      this.addEventListener("webkitAnimationEnd", this.onEndAnimation);
      this.addEventListener("animationend", this.onEndAnimation);
      this.addEventListener("click", this.scope.onClick);
      return view;
    });
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("webkitAnimationStart", this.onStartAnimation);
    this.removeEventListener("animationstart", this.onStartAnimation);
    this.removeEventListener("webkitAnimationEnd", this.onEndAnimation);
    this.removeEventListener("animationend", this.onEndAnimation);
    this.removeEventListener("click", this.scope.onClick);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ButtonComponent, "tagName", "bs4-button");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4CarouselComponent": function() { return /* binding */ Bs4CarouselComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/carousel.service.js */ "../../packages/bs4/src/services/carousel.service.ts");



class Bs4CarouselComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["interval", "keyboard", "slide", "pauseOn", "wrap", "touch", "ride", "fade"];
  }

  requiredAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // Properties
      interval: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.interval,
      keyboard: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.keyboard,
      slide: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.slide,
      pauseOn: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.pause || false,
      // changed from pause to pauseOn
      wrap: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.wrap,
      touch: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.touch,
      ride: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.touch || false,
      fade: false,
      // Methods
      next: this.next,
      nextWhenVisible: this.nextWhenVisible,
      prev: this.prev,
      pause: this.pause,
      cycle: this.cycle,
      to: this.to,
      dispose: this.dispose
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);
  }

  async beforeBind() {
    await super.beforeBind();
    this.classList.add("carousel", "slide");
  }

  async afterBind() {
    this.carouselService = new _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"](this, {
      interval: this.scope.interval,
      keyboard: this.scope.keyboard,
      slide: this.scope.slide,
      pause: this.scope.pauseOn,
      wrap: this.scope.wrap,
      touch: this.scope.touch
    });

    if (this.scope.fade) {
      this.classList.add("carousel-fade");
    } // TODO make this configurable?


    this.carouselService.cycle();
    await super.afterBind();
  }

  next() {
    if (this.carouselService) {
      this.carouselService.next();
    }
  }

  nextWhenVisible() {
    if (this.carouselService) {
      this.carouselService.nextWhenVisible();
    }
  }

  prev() {
    if (this.carouselService) {
      this.carouselService.prev();
    }
  }

  pause() {
    if (this.carouselService) {
      this.carouselService.pause();
    }
  }

  cycle(event) {
    if (this.carouselService) {
      this.carouselService.cycle(event);
    }
  }

  to(index) {
    if (this.carouselService) {
      this.carouselService.to(index);
    }
  }

  dispose() {
    if (this.carouselService) {
      this.carouselService.dispose();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(Bs4CarouselComponent.observedAttributes);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4CarouselComponent, "tagName", "bs4-carousel");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* binding */ Bs4ColorPickerComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _sphinxxxx_color_conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sphinxxxx/color-conversion */ "../../.yarn/cache/@sphinxxxx-color-conversion-npm-2.2.2-26d4f4f80f-73d07e5b0d.zip/node_modules/@sphinxxxx/color-conversion/src/color.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _bs4_colorpicker_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-colorpicker.component.html */ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");


/**
 * Based on https://vanilla-picker.js.org/
 */







class EventBucket {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", []);
  }

  add(target, type, handler) {
    target.addEventListener(type, handler, false);
    this.events.push({
      target,
      type,
      handler
    });
  }

  remove(target, type, handler) {
    this.events = this.events.filter(e => {
      let isMatch = true;

      if (target && target !== e.target) {
        isMatch = false;
      }

      if (type && type !== e.type) {
        isMatch = false;
      }

      if (handler && handler !== e.handler) {
        isMatch = false;
      }

      if (isMatch) {
        EventBucket._doRemove(e.target, e.type, e.handler);
      }

      return !isMatch;
    });
  }

  static _doRemove(target, type, handler) {
    target.removeEventListener(type, handler, false);
  }

  destroy() {
    this.events.forEach(e => EventBucket._doRemove(e.target, e.type, e.handler));
    this.events = [];
  }

}

const dragTrack = (eventBucket, area, callback) => {
  let dragging = false;

  const clamp = (val, min, max) => {
    return Math.max(min, Math.min(val, max));
  };

  const onMove = (e, info, starting) => {
    if (starting) {
      dragging = true;
    }

    if (!dragging) {
      return;
    }

    e.preventDefault();
    const bounds = area.getBoundingClientRect(),
          w = bounds.width,
          h = bounds.height,
          x = info.clientX,
          y = info.clientY;
    const relX = clamp(x - bounds.left, 0, w),
          relY = clamp(y - bounds.top, 0, h);
    callback(relX / w, relY / h);
  };

  const onMouse = (e, starting) => {
    const button = e.buttons === undefined ? e.which : e.buttons;

    if (button === 1) {
      onMove(e, e, starting);
    } // `mouseup` outside of window:
    else {
      dragging = false;
    }
  };

  function onTouch(e, starting) {
    if (e.touches.length === 1) {
      onMove(e, e.touches[0], starting);
    } //Don't interfere with pinch-to-zoom etc:
    else {
      dragging = false;
    }
  } // Notice how we must listen on the whole window to really keep track of mouse movements,
  // while touch movements "stick" to the original target from `touchstart` (which works well for our purposes here):
  //
  //  https://stackoverflow.com/a/51750458/1869660
  //  "Mouse moves = *hover* like behavior. Touch moves = *drags* like behavior"
  //


  eventBucket.add(area, "mousedown", e => {
    onMouse(e, true);
  });
  eventBucket.add(area, "touchstart", e => {
    onTouch(e, true);
  });
  eventBucket.add(window, "mousemove", onMouse);
  eventBucket.add(area, "touchmove", onTouch);
  eventBucket.add(window, "mouseup", () => {
    dragging = false;
  });
  eventBucket.add(area, "touchend", () => {
    dragging = false;
  });
  eventBucket.add(area, "touchcancel", () => {
    dragging = false;
  });
};

const BG_TRANSP = "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='2' height='2'%3E%3Cpath d='M1,0H0V1H2V2H1' fill='lightgrey'/%3E%3C/svg%3E\")";
const HUES = 360; // We need to use keydown instead of keypress to handle Esc from the editor textbox:

const EVENT_KEY = "keydown"; //'keypress'

function stopEvent(e) {
  // Stop an event from bubbling up to the parent:
  e.preventDefault();
  e.stopPropagation();
}

function onKey(bucket, target, keys, handler) {
  let stop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  bucket.add(target, EVENT_KEY, function (e) {
    if (keys.indexOf(e.key) >= 0) {
      if (stop) {
        stopEvent(e);
      }

      handler(e);
    }
  });
}

class Bs4ColorPickerComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Component {
  static get observedAttributes() {
    return ["namespace", "alpha", "editor", "editor-format", "cancel-button", "okay-button", "color"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      namespace: "main",
      hsl: [],
      cssHue: "",
      cssHsl: "",
      cssHsla: "",
      alphaBg: "",
      color: "#0cf",
      alpha: true,
      editor: true,
      editorFormat: "hex",
      cancelButton: false,
      okayButton: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", new EventBucket());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domH", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domSL", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domA", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domEdit", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domSample", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domOkay", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domCancel", null);
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(Bs4ColorPickerComponent.observedAttributes);
  }

  requiredAttributes() {
    return [];
  }

  async beforeBind() {
    await super.beforeBind();
    this.eventDispatcher = _ribajs_events__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher.getInstance("bs4-colorpicker:" + this.scope.namespace);
    this.setColor(this.scope.color);
    this.updateUI();
    this.bindEvents();
  }

  async afterTemplate(template) {
    await super.afterTemplate(template);
    this.setElements();
  }
  /**
   * Callback whenever the color changes.
   */


  onChange(color) {
    var _this$eventDispatcher;

    this.debug("onChange", color);
    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger("change", color);
  }
  /**
   * Callback when the user clicks "Ok".
   */


  onDone(color) {
    var _this$eventDispatcher2;

    this.debug("onDone", color);
    (_this$eventDispatcher2 = this.eventDispatcher) === null || _this$eventDispatcher2 === void 0 ? void 0 : _this$eventDispatcher2.trigger("done", color);
  }

  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_colorpicker_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "color") {
      this.setColor(this.scope.color);
    }
  }
  /**
   * Set/initialize the picker's color.
   *
   * @param color Color name, RGBA/HSLA/HEX string, or RGBA array.
   * @param flags If { silent: true }, won't trigger onChange.
   */


  setColor(color) {
    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      silent: false
    };
    return (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__.debounce)(this._setColor.bind(this))(color, flags);
  }

  _setColor(color) {
    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      silent: false
    };

    if (typeof color === "string") {
      color = color.trim();
    }

    if (!color) {
      return;
    }

    flags = flags || {};
    let c;

    try {
      // Will throw on unknown colors:
      c = new _sphinxxxx_color_conversion__WEBPACK_IMPORTED_MODULE_1__["default"](color);
    } catch (ex) {
      if (flags.failSilently) {
        return;
      }

      throw ex;
    }

    if (!this.scope.alpha) {
      const hsla = c.hsla;
      hsla[3] = 1;
      c.hsla = hsla;
    }

    this.color = c;
    this.setHSLA(null, null, null, null, flags);
  }

  setElements() {
    this._domH = this.querySelector(".picker_hue");
    this._domSL = this.querySelector(".picker_sl");
    this._domA = this.querySelector(".picker_alpha");
    this._domEdit = this.querySelector(".picker_editor") || null;
    this._domSample = this.querySelector(".picker_sample");
    this._domOkay = this.querySelector(".picker_done");
    this._domCancel = this.querySelector(".picker_cancel");
  }
  /**
   * Release all resources used by this picker instance.
   */


  disconnectedCallback() {
    this.events.destroy();
  }
  /**
   * Handle user input.
   */


  bindEvents() {
    const events = this.events;

    const addEvent = (target, type, handler) => {
      events.add(target, type, handler);
    }; // Prevent clicks while dragging from bubbling up to the parent:


    addEvent(this, "click", e => e.preventDefault()); // Draggable color selection

    const _dragTrack = dragTrack.bind(this); // Select hue


    if (!this._domH || !this._domSL || !this._domA || !this._domEdit || !this._domOkay) {
      throw new Error("Not ready!");
    }

    _dragTrack(events, this._domH, x => this.setHSLA(x)); // Select saturation/lightness


    _dragTrack(events, this._domSL, (x, y) => this.setHSLA(null, x, 1 - y)); // Select alpha


    if (this.scope.alpha) {
      _dragTrack(events, this._domA, (x, y) => this.setHSLA(null, null, null, 1 - y));
    } //Always init the editor, for accessibility and screen readers (we'll hide it with CSS if `!settings.editor`)


    addEvent(this._domEdit, "input", e => {
      const input = e.target;
      this.setColor(input.value, {
        fromEditor: true,
        failSilently: true
      });
    }); // Select all text on focus:

    addEvent(this._domEdit, "focus", e => {
      const input = e.target; //If no current selection:

      if (input.selectionStart === input.selectionEnd) {
        input.select();
      }
    });

    const onDoneProxy = () => {
      this.onDone(this.color);
    };

    addEvent(this._domOkay, "click", onDoneProxy);
    onKey(events, this, ["Enter"], onDoneProxy);
  }
  /*
   * "Hub" for all color changes
   *
   * @private
   */


  setHSLA() {
    let h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    let flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    if (!this.color) {
      throw new Error("Not ready!");
    }

    const hsla = this.color.hsla;
    [h, s, l, a].forEach((x, i) => {
      if (x || x === 0) {
        hsla[i] = x;
      }
    });
    this.color.hsla = hsla;
    this.updateUI(flags);

    if (this.onChange && !flags.silent) {
      this.onChange(this.color);
    }
  }

  updateUI() {
    let flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__.debounce)(this._updateUI.bind(this))(flags);
  }

  _updateUI() {
    let flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!this || !this.color) {
      return;
    }

    this.scope.hsl = this.color.hsla;
    this.scope.cssHue = "hsl(".concat(this.scope.hsl[0] * HUES, ", 100%, 50%)");
    this.scope.cssHsl = this.color.hslString;
    this.scope.cssHsla = this.color.hslaString;

    if (!this._domH || !this._domSL || !this._domA) {
      throw new Error("Color ui elements not found!");
    }

    const thumbH = this._domH.querySelector(".picker_selector");

    const thumbSL = this._domSL.querySelector(".picker_selector");

    const thumbA = this._domA.querySelector(".picker_selector");

    if (!thumbH || !thumbSL || !thumbA || !this._domEdit || !this._domSample) {
      console.error(thumbH, thumbSL, thumbA, this._domA, this._domSL, this._domH, this._domEdit, this._domSample);
      throw new Error("Not ready!");
    }

    const posX = (parent, child, relX) => {
      child.style.left = relX * 100 + "%";
    };

    const posY = (parent, child, relY) => {
      child.style.top = relY * 100 + "%";
    };

    posX(this._domH, thumbH, this.scope.hsl[0]); // S/L

    posX(this._domSL, thumbSL, this.scope.hsl[1]);
    posY(this._domSL, thumbSL, 1 - this.scope.hsl[2]); // Alpha

    posY(this._domA, thumbA, 1 - this.scope.hsl[3]);
    const opaque = this.scope.cssHsl;
    const transp = opaque.replace("hsl", "hsla").replace(")", ", 0)");
    const bg = "linear-gradient(".concat([opaque, transp], ")"); // Let the Alpha slider fade from opaque to transparent:

    this.scope.alphaBg = bg + ", " + BG_TRANSP; // Don't update the editor if the user is typing.
    // That creates too much noise because of our auto-expansion of 3/4/6 -> 8 digit hex codes.

    if (!flags.fromEditor) {
      const format = this.scope.editorFormat,
            alpha = this.scope.alpha;
      let color;

      switch (format) {
        case "rgb":
          color = this.color.printRGB(alpha);
          break;

        case "hsl":
          color = this.color.printHSL(alpha);
          break;

        default:
          color = this.color.printHex(alpha);
      }

      this.scope.color = color;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ColorPickerComponent, "tagName", "bs4-colorpicker");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ContentsComponent": function() { return /* binding */ Bs4ContentsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_contents_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-contents.component.html */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html");




class Bs4ContentsComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "scroll-offset", "scroll-element"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      scrollOffset: 0,
      anchors: []
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ContentsComponent.observedAttributes);
  }

  getIdFromElementOrParent(element) {
    let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    if (element.id) {
      return element.id;
    }

    if (depth <= this.scope.findHeaderIdDepth) {
      if (element.parentElement) {
        return this.getIdFromElementOrParent(element.parentElement, ++depth);
      }
    }

    return null;
  }

  pushHeaders(wrapperElement, headersStart, headersDepth, pushTo) {
    const headerElements = wrapperElement.querySelectorAll("h" + headersStart);
    headerElements.forEach(headerElement => {
      const id = this.getIdFromElementOrParent(headerElement);

      if (!id) {
        return;
      }

      pushTo.push({
        element: headerElement,
        href: "#" + id,
        title: headerElement.innerHTML,
        childs: []
      });

      if (headerElement.parentElement && headersDepth >= headersStart + 1) {
        this.pushHeaders(headerElement.parentElement, headersStart + 1, headersDepth, pushTo[pushTo.length - 1].childs);
      }
    });
  }

  async afterBind() {
    if (this.scope.headerParentSelector && this.scope.headersStart && this.scope.headersDepth) {
      this.wrapperElement = document.querySelector(this.scope.headerParentSelector) || undefined;
      this.scope.anchors = [];

      if (!this.wrapperElement) {
        console.error("No wrapper element found!");
        return;
      }

      this.pushHeaders(this.wrapperElement, this.scope.headersStart, this.scope.headersDepth, this.scope.anchors);
    }

    await super.afterBind();
  }

  requiredAttributes() {
    return ["headersStart", "headersDepth", "headerParentSelector"];
  }

  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
    this.scope.anchors = [];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_contents_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ContentsComponent, "tagName", "bs4-contents");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4DropdownComponent": function() { return /* binding */ Bs4DropdownComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");



class Bs4DropdownComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      toggle: this.toggle
    });
  }

  toggle(event) {
    event.preventDefault();
    event.stopPropagation();

    if (!this.dropdownService) {
      throw new Error("DropdownService not ready!");
    }

    return this.dropdownService.toggle();
  }

  connectedCallback() {
    super.connectedCallback();
    this.dropdownService = new _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__.DropdownService(this.querySelector(".dropdown-toggle"));
    this.init(Bs4DropdownComponent.observedAttributes);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4DropdownComponent, "tagName", "bs4-dropdown");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-form/bs4-form.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-form/bs4-form.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4FormComponent": function() { return /* binding */ Bs4FormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-form.component.html */ "../../packages/bs4/src/components/bs4-form/bs4-form.component.html");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");




class Bs4FormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "disable-submit-until-change", "use-ajax", "ajax-request-type", "auto-set-form-data", "strip-html", "scroll-invalid-element", "animate-invalid-element"];
  }

  getDefaultScope() {
    const scope = {
      id: (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getUID)("form"),
      form: {
        fields: {},
        valid: false,
        error: undefined
      },
      disableSubmitUntilChange: false,
      submitDisabled: false,
      onSubmit: this.onSubmit,
      useAjax: true,
      ajaxRequestType: "form",
      autoSetFormData: true,
      stripHtml: true,
      scrollToInvalidElement: true,
      animateInvalidElement: true
    };
    return scope;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formEl", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getDefaultScope());

    this.enableSubmit = this.enableSubmit.bind(this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4FormComponent.observedAttributes);
    this.addEventListeners();
  }

  addEventListeners() {
    if (this.scope.disableSubmitUntilChange) {
      this.addEventListener("input", this.enableSubmit);
    }
  }

  removeEventListeners() {
    this.removeEventListener("input", this.enableSubmit);
  }

  enableSubmit() {
    this.scope.submitDisabled = false;
  }

  requiredAttributes() {
    return [];
  }

  async beforeBind() {
    await super.beforeBind();
    this.id = this.scope.id;
  }

  async afterBind() {
    await super.afterBind();
  }

  stripHtml() {
    for (const key in this.scope.form.fields) {
      if (this.scope.form.fields[key] && typeof this.scope.form.fields[key] === "string") {
        this.scope.form.fields[key] = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.stripHtml)(this.scope.form.fields[key]);
      }
    }
  }

  onSubmit(event, el) {
    this.debug("onSubmit", event, el);

    if (!this.formEl) {
      console.warn("No form found");
      return false;
    }

    if (this.scope.autoSetFormData) {
      this.getFormValues();
    }

    if (this.scope.stripHtml) {
      this.stripHtml();
    }

    this.validate(this.formEl, this.scope.form);

    if (!this.scope.form.valid) {
      this.onInvalidForm(event);
      return;
    }

    const submitSettings = this.getSubmitSettings(event);

    if ((submitSettings === null || submitSettings === void 0 ? void 0 : submitSettings.target) === "_blank") {
      return true;
    }

    if (this.scope.useAjax) {
      // stop native submit because we submit the data using javascript
      event.preventDefault();
      event.stopPropagation();
      this.ajaxSubmit(event, el);
    }
  }
  /**
   * TODO Not tested in the wild, may need to be adjusted. Also the error handling is untested
   */


  async ajaxSubmit(event, el) {
    this.debug("onSubmit", event, el, this.scope);
    const submitSettings = this.getSubmitSettings(event);

    if (!submitSettings) {
      console.warn("Can't get submit settings");
      return;
    }

    if (this.scope.autoSetFormData) {
      this.getFormValues();
    }

    try {
      // This method is untested in the wild
      const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.fetch(submitSettings.action, submitSettings.method, this.scope.form.fields, submitSettings.type);

      if (!res || !res.body) {
        return this.onErrorSubmit("500", "Error", "Empty body!");
      }

      const message = res.body && res.body.message ? res.body.message : "";

      if (Number(res.status) >= 400) {
        // TODO generate message by status
        this.onErrorSubmit(res.status.toString(), message, res.body);
      }

      return this.onSuccessSubmit(res.status.toString(), message, res.body);
    } catch (err) {
      this.onErrorSubmit(err.status, err.body.message, err.body);
    }
  }

  getSubmitSettings(event) {
    var _originalEvent;

    if (!this.formEl) {
      console.warn("No form found");
      return null;
    }

    let action = this.formEl.action;
    let method = this.formEl.method;
    let target = this.formEl.method; // Overwrite action by formaction attribute: <button type="submit" formaction="/foobar">
    // TODO submitter from vanilla event
    // If this is a jquery event

    if (event !== null && event !== void 0 && (_originalEvent = event.originalEvent) !== null && _originalEvent !== void 0 && _originalEvent.submitter) {
      var _originalEvent2;

      const submitter = event === null || event === void 0 ? void 0 : (_originalEvent2 = event.originalEvent) === null || _originalEvent2 === void 0 ? void 0 : _originalEvent2.submitter;
      action = (submitter === null || submitter === void 0 ? void 0 : submitter.formAction) || action;
      method = (submitter === null || submitter === void 0 ? void 0 : submitter.formMethod) || method;
      target = (submitter === null || submitter === void 0 ? void 0 : submitter.formTarget) || target;
    }

    const settings = {
      action,
      method: method.toUpperCase(),
      target,
      type: this.scope.ajaxRequestType
    };
    return settings;
  }

  onInvalidForm(event) {
    this.debug("Form not valid", this.scope); // stop native submit

    event.preventDefault();
    event.stopPropagation();

    if (!this.formEl) {
      console.warn("No form found");
      return;
    }

    const invalidElements = this.formEl.querySelectorAll(":invalid");

    if (invalidElements && invalidElements.length) {
      const invalidElement = invalidElements[0];

      if (this.scope.scrollToInvalidElement) {
        this.scrollToElement(invalidElement);
      }

      if (this.scope.animateInvalidElement) {
        this.scrollToElement(invalidElement);
      }
    }

    this.dispatchEvent(new CustomEvent("invalid", {
      detail: {
        elements: invalidElements
      }
    }));
  }

  scrollToElement(invalidElement) {
    const vp = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)();
    const offset = vp.h / 2;
    (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.scrollTo)(invalidElement, offset, window);
    this.animateInvalidElement(invalidElement);
  }

  animateInvalidElement(invalidElement) {
    let endsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;
    invalidElement.classList.add("invalid-flashing-animation");
    setTimeout(() => {
      invalidElement.classList.remove("invalid-flashing-animation");
    }, endsOn);
  }

  onErrorSubmit(status, message, response) {
    this.debug("onErrorSubmit");
    this.dispatchEvent(new CustomEvent("submit-error", {
      detail: {
        status,
        message: message,
        response
      }
    }));
  }

  onSuccessSubmit(status, message, response) {
    this.debug("onSuccessSubmit");

    if (this.scope.disableSubmitUntilChange) {
      this.scope.submitDisabled = true;
    }

    this.dispatchEvent(new CustomEvent("submit-success", {
      detail: {
        status,
        message: message,
        response
      }
    }));
  }

  validate(form, validationScope) {
    let errorEventName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "validation-error";
    validationScope.valid = form.checkValidity();
    validationScope.error = form.validationMessage; // only show validation if we want to give a hint to the user that something is wrong

    if (!validationScope.valid) {
      this.dispatchEvent(new CustomEvent(errorEventName));
      form.classList.add("was-validated");
    }
  }

  getFormValues() {
    if (!this.formEl) {
      console.warn("No form found");
      return null;
    } // this.formEl.querySelectorAll("input").forEach((element) => {
    //   this.scope.form.fields[camelCase(element.name)] = getInputValue(element);
    // });


    this.scope.form.fields = new FormData(this.formEl);
    return this.scope.form.fields;
  }

  initForm() {
    const formEl = this.querySelector("form");

    if (formEl && formEl.length > 0) {
      this.formEl = formEl;
      this.formEl.classList.add("needs-validation");
      this.formEl.setAttribute("novalidate", "");
    } else {
      console.warn("bs4 form without children found");
    }
  }

  template() {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      this.initForm();
      return null;
    } else {
      return _bs4_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4FormComponent, "tagName", "bs4-form");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4IconComponent": function() { return /* binding */ Bs4IconComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class Bs4IconComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.BasicComponent {
  static get observedAttributes() {
    return ["size", "width", "height", "src", "color", "direction"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    // injects the changed attributes to scope
    super.attributeChangedCallback(name, oldValue, newValue, namespace);

    if (name === "src") {
      if (!newValue) {
        console.warn("The src attribute must have a value!", this.scope);
        return;
      }

      if (fetch) {
        fetch(newValue).then(response => {
          var _response$headers$get;

          if (response.status !== 200) {
            console.error(response.statusText);
            return "";
          }

          if (((_response$headers$get = response.headers.get("content-type")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.indexOf("image/svg+xml")) !== -1) {
            return response.text();
          } else {
            console.error("[bs4-icon] Only svg's are supported! But content-type is " + response.headers.get("content-type"));
          }

          return "";
        }).then(response => {
          this.innerHTML = response;
        }).catch(error => {
          console.error(error);
        });
      }
    }

    if (name === "title") {
      const title = document.createElementNS("http://www.w3.org/2000/svg", "title");
      title.textContent = newValue;
      const svg = this.firstElementChild;

      if (svg) {
        svg.appendChild(title);
      }
    }

    if (name === "color") {
      if (newValue.indexOf(",") !== -1) {
        newValue = newValue.split(",");

        if (newValue.length > 0) {
          this.className = this.className.replace(/(^|\s)color-\S+/g, "");

          for (let i = 0; i < newValue.length; i++) {
            const newColor = newValue[i];

            if (newColor.startsWith("#") || newColor.startsWith("rgb")) {
              this.style.color = newColor;
            }

            this.classList.add("color-".concat(newColor));
          }
        }
      } else {
        this.style.color = newValue;
        this.className = this.className.replace(/(^|\s)color-\S+/g, "");
        this.classList.add("color-".concat(newValue));
      }
    }

    if (name === "size") {
      const size = newValue;
      this.style.height = size + "px";
      this.style.width = size + "px";
      this.className = this.className.replace(/(^|\s)size-\S+/g, "");
      this.classList.add("size-".concat(size));
    }

    if (name === "width") {
      const width = newValue;
      this.style.width = width + "px";
      this.className = this.className.replace(/(^|\s)width-\S+/g, "");
      this.classList.add("width-".concat(width));
    }

    if (name === "height") {
      const height = newValue;
      this.style.height = height + "px";
      this.className = this.className.replace(/(^|\s)height-\S+/g, "");
      this.classList.add("height-".concat(height));
    }

    if (name === "direction") {
      const direction = newValue;
      let classString = "direction-".concat(direction);

      if (direction === "left") {
        classString += " rotate-270";
      } else if (direction === "left-top" || direction === "left-up" || direction === "top-left" || direction === "up-left") {
        classString += " rotate-315";
      } else if (direction === "top" || direction === "up") {
        classString += " rotate-0";
      } else if (direction === "top-right" || direction === "up-right" || direction === "right-top" || direction === "right-up") {
        classString += " rotate-45";
      } else if (direction === "right") {
        classString += " rotate-90";
      } else if (direction === "right-bottom" || direction === "right-down" || direction === "bottom-right" || direction === "down-right") {
        classString += " rotate-135";
      } else if (direction === "bottom" || direction === "down") {
        classString += " rotate-180";
      } else if (direction === "left-bottom" || direction === "left-down" || direction === "bottom-left" || direction === "down-left") {
        classString += " rotate-225";
      }

      this.className = this.className.replace(/(^|\s)direction-\S+/g, "");
      this.className = this.className.replace(/(^|\s)rotate-\S+/g, "");
      this.className += " " + classString;
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("aria-hidden", "true");
    this.setAttribute("role", "img");
    this.classList.add("iconset");
    this.init(Bs4IconComponent.observedAttributes); // set default values

    if (!this.scope.direction) {
      this.scope.direction = "up";
      this.attributeChangedCallback("direction", null, this.scope.direction, null);
    }
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4IconComponent, "tagName", "bs4-icon");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ModalItemComponent": function() { return /* binding */ Bs4ModalItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_modal_item_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-modal-item.component.html */ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/modal.service.js */ "../../packages/bs4/src/services/modal.service.ts");





class Bs4ModalItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["modal", "index"];
  }

  requiredAttributes() {
    return ["modal"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onHidden: this.onHidden.bind(this),
      index: -1,
      dismiss: this.dismiss.bind(this)
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ModalItemComponent.observedAttributes);
  }

  async afterBind() {
    this.initModalService();
    await super.afterBind();
  }

  initModalService() {
    const modal = this.scope.modal;
    const modalEl = this.firstElementChild;

    if (modal && modalEl) {
      this.modalService = new _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService(modalEl, {
        focus: modal.focus !== undefined ? modal.focus : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.focus,
        keyboard: modal.keyboard !== undefined ? modal.keyboard : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.keyboard,
        backdrop: modal.backdrop !== undefined ? modal.backdrop : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.backdrop,
        show: modal.show !== undefined ? modal.show : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.show
      }); // Call onHidden on hidden event once

      modalEl.addEventListener(_services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.EVENT_HIDDEN, this.scope.onHidden, {
        once: true
      }); // show modal using the modalservice

      this.modalService.show(this);
    }
  } // Can be called if modal should be removed


  dismiss(event) {
    var _this$modalService;

    (_this$modalService = this.modalService) === null || _this$modalService === void 0 ? void 0 : _this$modalService.hide(event);
  } // Remove modal from dom once shown


  onHidden(event, el) {
    var _this$scope$$parent;

    if (!el) {
      el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
    }

    const notificationContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

    if (typeof (notificationContainer === null || notificationContainer === void 0 ? void 0 : notificationContainer.onItemHide) === "function" && this.scope.modal && el) {
      notificationContainer.onItemHide(event, el, this.scope.index, this.scope.modal);
    }
  }

  template() {
    return _bs4_modal_item_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ModalItemComponent, "tagName", "bs4-modal-item");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4NavbarComponent": function() { return /* binding */ Bs4NavbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");




class Bs4NavbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["collapse-selector"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      toggle: this.toggle,
      show: this.show,
      hide: this.hide,
      isCollapsed: true,
      collapseSelector: ".navbar-collapse"
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "collapseTargets", new Map());

    this.onStateChange = this.onStateChange.bind(this);
  }

  async afterBind() {
    this.hide();
    await super.afterBind();
  }

  toggle(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.toggle();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  show(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.show();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  hide(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.hide();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.routerEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main");
    this.routerEvents.on("newPageReady", this.onNewPageReady, this);
    this.setCollapseElement();
    this.onStateChange();
    this.init(Bs4NavbarComponent.observedAttributes);
  }

  setCollapseElement() {
    const collapseElements = Array.from(this.querySelectorAll(this.scope.collapseSelector) || []); // remove old collapse targets

    for (const collapseElement of this.collapseTargets.keys()) {
      if (!collapseElements.find(ce => ce === collapseElement)) {
        this.disposeCollapseTarget(collapseElement);
      }
    } // add new collapse targets


    for (const collapseElement of collapseElements) {
      if (!this.collapseTargets.has(collapseElement)) {
        this.collapseTargets.set(collapseElement, new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(collapseElement, [this], {
          toggle: false
        }));
        collapseElement.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_SHOWN, this.onStateChange);
        collapseElement.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.onStateChange);
      }
    }

    this.hide();
  }

  disposeCollapseTargets() {
    for (const collapseElement of this.collapseTargets.keys()) {
      this.disposeCollapseTarget(collapseElement);
    }
  }

  disposeCollapseTarget(collapseElement) {
    const collapseService = this.collapseTargets.get(collapseElement);

    if (collapseService) {
      collapseService.dispose();
    }

    this.collapseTargets.delete(collapseElement);
    collapseElement.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_SHOWN, this.onStateChange);
    collapseElement.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.onStateChange);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.disposeCollapseTargets();

    if (this.routerEvents) {
      this.routerEvents.off("newPageReady", this.onNewPageReady, this);
    }
  }

  onStateChange() {
    var _this$collapseTargets;

    this.scope.isCollapsed = (_this$collapseTargets = this.collapseTargets.values().next().value) === null || _this$collapseTargets === void 0 ? void 0 : _this$collapseTargets.isCollapsed();

    if (this.scope.isCollapsed) {
      this.classList.add(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CLASS_NAME_COLLAPSED);
      this.setAttribute("aria-expanded", "false");
    } else {
      this.classList.remove(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CLASS_NAME_COLLAPSED);
      this.setAttribute("aria-expanded", "true");
    }
  }

  onNewPageReady() {
    this.hide();
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "collapseSelector") {
      this.setCollapseElement();
    }
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4NavbarComponent, "tagName", "bs4-navbar");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts":
/*!************************************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* binding */ Bs4NotificationContainerComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_notification_container_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-notification-container.component.html */ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html");





class Bs4NotificationContainerComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["icon-url", "position-class", "channel-name"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      notifications: [],
      positionClass: "absolute-bottom absolute-center",
      channelName: "toast",
      onItemHide: this.onItemHide
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4NotificationContainerComponent.observedAttributes);
  } // Called by child if notification item wants to be removed


  onItemHide(event, el, index, notification) {
    if (index > -1) {
      this.notifications.splice(index, 1);
    } else {
      console.warn("Notification not found", notification);
    }
  }

  onShowNotification(notification) {
    this.debug("Received notification container on " + this.scope.channelName, this.scope, notification);
    this.scope.notifications.push(notification);
  }

  async afterBind() {
    // Add event dispatcher to listen for toast notifications
    this.notificationDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(this.scope.channelName);
    this.notificationDispatcher.on("show-notification", this.onShowNotification, this);
    await super.afterBind();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.notificationDispatcher.off("show-notification", this.onShowNotification, this);
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return _bs4_notification_container_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4NotificationContainerComponent, "tagName", "bs4-notification-container");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* binding */ Bs4ScrollspyComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bs4-contents/bs4-contents.component.js */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_scrollspy_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-scrollspy.component.html */ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html");




class Bs4ScrollspyComponent extends _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4ContentsComponent {
  static get observedAttributes() {
    return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "offset", "offset-bottom", "scroll-offset"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      offset: 0,
      offsetBottom: 0,
      scrollOffset: 0,
      anchors: []
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ScrollspyComponent.observedAttributes);
  }

  requiredAttributes() {
    return ["headersStart", "headersDepth", "headerParentSelector"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_scrollspy_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ScrollspyComponent, "tagName", "bs4-scrollspy");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts":
/*!**************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ShareComponent": function() { return /* binding */ Bs4ShareComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-share.component.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html");
/* harmony import */ var _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-share.label.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.label.html");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");








/**
 * Component to share the a link
 * Similar projects which are can share stuff:
 *  * https://github.com/nimiq/web-share-shim
 *  * http://webintents.org/
 *  * http://chriswren.github.io/native-social-interactions/
 *  * https://www.sharethis.com/platform/share-buttons/
 *  * https://github.com/dimsemenov/PhotoSwipe/blob/master/src/js/ui/photoswipe-ui-default.js
 *
 */
class Bs4ShareComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["type", "title", "text", "url", "media-url", "label", "dropdown-direction"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    this.scope = this.getScopeDefaults();
    this.debug("constructor", this.scope);
    Bs4ShareComponent.count++;
    this.onExternalOpenEvent = this.onExternalOpenEvent.bind(this);
    this.onExternalCloseEvent = this.onExternalCloseEvent.bind(this);
  }

  getDefaultShareServices() {
    const newLine = "%0A";
    const shareItems = [{
      id: "facebook",
      label: "Facebook",
      // It is not possible to add a message on facebook sharer.php but with the Dialog API, see https://developers.facebook.com/docs/javascript/reference/FB.ui
      urlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{url}}",
      mediaUrlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{media_url}}",
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "twitter",
      label: "Twitter",
      urlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{url}}",
      mediaUrlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{media_url}}".concat(newLine, "({{url}})"),
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "pinterest",
      label: "Pinterest",
      urlTemplate: "http://www.pinterest.com/pin/create/button/" + "?url={{url}}&media={{media_url}}&description={{text}}",
      type: "popup",
      url: "",
      availableFor: ["image", "video"]
    }, {
      id: "whatsapp",
      label: "WhatsApp",
      urlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{url}}"),
      mediaUrlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "telegram",
      label: "Telegram",
      urlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}",
      mediaUrlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}".concat(newLine, "({{url}})"),
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "email",
      label: "Email",
      urlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{url}}"),
      mediaUrlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
      type: "href",
      url: "",
      availableFor: ["page", "image", "video"]
    }, // {
    //   id: "sms",
    //   label: "SMS",
    //   urlTemplate: "sms:?body={{text}}",
    //   type: 'href',
    //   url: "",
    //   canPassUrl: false,
    //   availableFor: ['page', 'image', 'video'],
    // },
    {
      id: "download",
      label: "Download image",
      urlTemplate: "{{raw_media_url}}",
      type: "download",
      url: "",
      availableFor: ["image", "video"]
    }];
    return shareItems;
  }

  isIos() {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i) !== null;
  }

  isAndroid() {
    return navigator.userAgent.match(/Android/i) !== null;
  }

  browserSupportsNativeShare() {
    return typeof navigator.share === "function";
  }

  getScopeDefaults() {
    const scope = {
      type: "page",
      title: document.title,
      text: "Look at this! 👀🤩",
      url: window.location.href,
      label: "Share",
      labelTemplate: _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_4__["default"],
      isAndroid: this.isAndroid(),
      isIos: this.isIos(),
      isDesktop: false,
      isNative: this.browserSupportsNativeShare(),
      dropdownId: "dropdownShare" + Bs4ShareComponent.count,
      shareItems: this.getDefaultShareServices(),
      dropdownDirection: "down",
      // Methods
      share: this.share,
      shareOnService: this.shareOnService
    }; // on those two support "mobile deep links", so HTTP based fallback for all others.

    scope.isDesktop = !scope.isIos && !scope.isAndroid;
    return scope;
  }

  onExternalOpenEvent() {
    var _this$dropdown;

    (_this$dropdown = this.dropdown) === null || _this$dropdown === void 0 ? void 0 : _this$dropdown.show();
  }

  onExternalCloseEvent() {
    var _this$dropdown2;

    (_this$dropdown2 = this.dropdown) === null || _this$dropdown2 === void 0 ? void 0 : _this$dropdown2.close();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ShareComponent.observedAttributes);
    this.addEventListeners();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListeners();
  }

  addEventListeners() {
    this.addEventListener("open", this.onExternalOpenEvent);
    this.addEventListener("close", this.onExternalCloseEvent);
  }

  removeEventListeners() {
    this.removeEventListener("open", this.onExternalOpenEvent);
    this.removeEventListener("close", this.onExternalOpenEvent);
  }

  getURLForShare() {
    if (this.scope.type === "page" && this.scope.url) {
      return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__.getUrl)(this.scope.url);
    }

    return window.location.href;
  }

  getMediaUrlForShare() {
    if (this.scope.type !== "page" && this.scope.url) {
      return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__.getUrl)(this.scope.url);
    }

    return "";
  }

  getTextForShare() {
    return this.scope.text;
  }
  /**
   * Currently only used for email
   * @param appendUrl
   */


  getTitleForShare() {
    return this.scope.title;
  }

  updateShareURLs() {
    for (const shareItem of this.scope.shareItems) {
      const url = this.getURLForShare();
      const mediaUrl = this.getMediaUrlForShare();
      const shareText = this.getTextForShare();
      const shareTitle = this.getTitleForShare();
      let urlTemplate = shareItem.urlTemplate;

      if (this.scope.type !== "page" && shareItem.mediaUrlTemplate) {
        urlTemplate = shareItem.mediaUrlTemplate;
      }

      const shareURL = urlTemplate.replace("{{url}}", encodeURIComponent(url)).replace("{{url}}", encodeURIComponent(url)).replace("{{media_url}}", encodeURIComponent(mediaUrl)).replace("{{raw_media_url}}", mediaUrl).replace("{{text}}", encodeURIComponent(shareText)).replace("{{title}}", encodeURIComponent(shareTitle));
      shareItem.available = shareItem.availableFor.indexOf(this.scope.type) !== -1;
      shareItem.url = shareURL;
    }
  }

  initDropdown() {
    const dropDownButtonElement = this.querySelector(".dropdown-toggle-share");

    if (!dropDownButtonElement) {
      console.warn('Element with selector ".dropdown-toggle-share" not found!', this);
      return;
    }

    this.dropdown = new _ribajs_bs4__WEBPACK_IMPORTED_MODULE_5__.DropdownService(dropDownButtonElement);
  }
  /**
   * New browser popup with the external site (e.g. Facebook) on you want to share your url
   * @param binding
   * @param event
   * @param controller
   * @param el
   */


  shareOnService(event, controller, el) {
    var _this$dropdown3;

    this.debug("Open popup");
    (_this$dropdown3 = this.dropdown) === null || _this$dropdown3 === void 0 ? void 0 : _this$dropdown3.close();

    if (!el || !el.href) {
      console.error("No href attribute found");
      return false;
    } // We use the default browser anchor href logic for download and href


    if (el.hasAttribute("type") && el.getAttribute("type") === "download" || el.getAttribute("type") === "href") {
      return true;
    }

    event.preventDefault();
    event.stopPropagation(); // this.debug('Open popup');

    window.open(el.href, "Share", "scrollbars=yes,resizable=yes,toolbar=no," + "location=yes,width=550,height=420,top=100,left=" + (window.screen ? Math.round(screen.width / 2 - 275) : 100));
    return false;
  }

  async share(event) {
    this.debug("share", this.scope);
    event.preventDefault();
    event.stopPropagation();

    if (this.scope.isNative && !this.scope.isDesktop) {
      return navigator.share({
        title: this.scope.title,
        text: "".concat(this.scope.text, "\r\n\r\n"),
        url: this.scope.url || window.location.href
      }).catch(error => {
        if (error.name === "AbortError") {
          // TODO show flash message
          // this.debug(error.message);
          return;
        }

        console.error("Error ".concat(error.name, ": ").concat(error.message), error);
      });
    } else {
      var _this$dropdown4;

      this.updateShareURLs();
      return (_this$dropdown4 = this.dropdown) === null || _this$dropdown4 === void 0 ? void 0 : _this$dropdown4.toggle();
    }
  }

  async beforeBind() {
    await super.beforeBind(); // this.debug('beforeBind');
  }

  async afterBind() {
    this.initDropdown(); // this.debug('afterBind', this.scope);

    await super.afterBind();
  }

  requiredAttributes() {
    return ["url"];
  }

  template() {
    this.debug("template", this, (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__.hasChildNodesTrim)(this));

    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__.hasChildNodesTrim)(this)) {
      // If a child is set, this is a custom label template
      this.scope.labelTemplate = this.innerHTML;
      this.debug("Custom label template: ", this.scope.labelTemplate);
    }

    return _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ShareComponent, "tagName", "bs4-share");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ShareComponent, "count", 0);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4SidebarComponent": function() { return /* binding */ Bs4SidebarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");






class Bs4SidebarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "container-selector", "position", "width", "auto-show-on-wider-than", "auto-hide-on-slimmer-than", "force-hide-on-location-pathnames", "force-show-on-location-pathnames", "overlay-on-slimmer-than", "watch-new-page-ready-event"];
  }

  constructor() {
    super(); // assign this to bound version, so we can remove window EventListener later without problem

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // template properties
      containerSelector: undefined,
      state: "hidden",
      oldState: "hidden",
      id: undefined,
      width: "250px",
      // Options
      position: "left",
      autoShowOnWiderThan: 1199,
      autoHideOnSlimmerThan: 1200,
      watchNewPageReadyEvent: true,
      forceHideOnLocationPathnames: [],
      forceShowOnLocationPathnames: [],
      overlayOnSlimmerThan: 1200,
      // template methods
      hide: this.hide,
      show: this.show,
      toggle: this.toggle
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEnvironmentChanges", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__.debounce)(this._onEnvironmentChanges.bind(this)));

    this.onEnvironmentChanges = this.onEnvironmentChanges.bind(this);
  }

  setState(state) {
    this.scope.oldState = "".concat(this.scope.state);
    this.scope.state = state;
    this.onStateChange();
  }

  getState() {
    return this.scope.state;
  }

  getShowMode() {
    let mode;
    const vw = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w;

    if (vw < this.scope.overlayOnSlimmerThan) {
      mode = "overlay-" + this.scope.position;
    } else {
      mode = "side-" + this.scope.position;
    }

    return mode;
  }

  hide() {
    this.setState("hidden");
  }

  show() {
    const state = this.getShowMode();
    this.setState(state);
  }

  toggle() {
    if (this.scope.state === "hidden") {
      this.show();
    } else {
      this.hide();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4SidebarComponent.observedAttributes);
    this.computedStyle = window.getComputedStyle(this);
    window.addEventListener("resize", this.onEnvironmentChanges, {
      passive: true
    }); // initial

    this.onEnvironmentChanges();
  }

  initToggleButtonEventDispatcher() {
    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    this.eventDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.nsPrefix + this.scope.id);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  initRouterEventDispatcher() {
    if (this.scope.watchNewPageReadyEvent) {
      this.routerEvents.on("newPageReady", this.onEnvironmentChanges, this);
    }
  }

  onHidden() {
    this.setContainersStyle(this.scope.state);
    const translateX = this.scope.position === "left" ? "-100%" : "100%";
    this.setAttribute("style", "transform:translateX(".concat(translateX, ");width:").concat(this.scope.width, ";"));
  }

  onSide(state) {
    this.setContainersStyle(state);
    this.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
  }

  onOverlay(state) {
    this.setContainersStyle(state);
    this.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
  }

  triggerState() {
    var _this$eventDispatcher;

    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger("state", this.scope.state);
  }

  onStateChange() {
    switch (this.scope.state) {
      case "side-left":
      case "side-right":
        this.onSide(this.scope.state);
        break;

      case "overlay-left":
      case "overlay-right":
        this.onOverlay(this.scope.state);
        break;

      default:
        this.onHidden();
        break;
    }

    if (this.eventDispatcher) {
      this.eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.scope.state);
    }
  }

  get width() {
    return this.offsetWidth ? this.offsetWidth + "px" : this.scope.width;
  }

  setStateByEnvironment() {
    if (this.scope.forceHideOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
      return this.hide();
    }

    if (this.scope.forceShowOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
      return this.show();
    }

    const vw = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w;

    if (this.scope.autoHideOnSlimmerThan > -1 && vw < this.scope.autoHideOnSlimmerThan) {
      return this.hide();
    }

    if (this.scope.autoShowOnWiderThan > -1 && vw > this.scope.autoShowOnWiderThan) {
      return this.show();
    }
  }
  /**
   * Internal "undebounced" version of `onEnvironmentChanges`.
   */


  _onEnvironmentChanges() {
    this.setStateByEnvironment();
  }
  /**
   * If viewport size changes, location url changes or something else.
   */


  getContainers() {
    return this.scope.containerSelector ? document.querySelectorAll(this.scope.containerSelector) : undefined;
  }

  initContainers(state) {
    this.setContainersStyle(state);
  }

  setContainersStyle(state) {
    const containers = this.getContainers() || [];

    if (containers) {
      for (let i = 0; i < containers.length; i++) {
        const container = containers[i];
        this.setContainerStyle(container, state);
      }
    }
  }
  /**
   * Sets the container style, takes overs always the transition style of this sidebar
   * @param container
   * @param style
   * @param state
   */


  setContainerStyle(container, state) {
    const currStyle = container.style;

    if (state) {
      const width = this.width;
      const conStyle = window.getComputedStyle(container);

      switch (state) {
        case "side-left":
          switch (conStyle.position) {
            case "fixed":
              currStyle.left = width;
              break;

            default:
              currStyle.marginLeft = width;
              break;
          }

          break;

        case "side-right":
          switch (conStyle.position) {
            case "fixed":
              currStyle.right = width;
              break;

            default:
              currStyle.marginRight = width;
              break;
          }

          break;

        case "hidden":
          switch (this.scope.oldState) {
            case "side-left":
              switch (conStyle.position) {
                case "fixed":
                  currStyle.left = "0";
                  break;

                default:
                  currStyle.marginLeft = "0";
                  break;
              }

              break;

            case "side-right":
              switch (conStyle.position) {
                case "fixed":
                  currStyle.right = "0";
                  break;

                default:
                  currStyle.marginRight = "0";
                  break;
              }

              break;

            default:
              break;
          }

        default:
          break;
      }
    }

    container.style.transition = this.computedStyle ? this.computedStyle.transition : ""; // let styleStr = container.getAttribute("style") || "";
    // styleStr += style;
    // return container.setAttribute("style", styleStr);
  }

  async beforeBind() {
    await super.beforeBind();
    this.scope.oldState = this.getShowMode();
    this.initRouterEventDispatcher();
    return this.onEnvironmentChanges();
  }

  async afterBind() {
    this.onEnvironmentChanges();
    await super.afterBind();
  }

  requiredAttributes() {
    return ["id"];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "containerSelector") {
      this.initContainers(this.scope.state);
    }

    if (attributeName === "id") {
      this.initToggleButtonEventDispatcher();
    }
  } // deconstruction


  disconnectedCallback() {
    var _this$eventDispatcher2, _this$eventDispatcher3;

    super.disconnectedCallback();
    (_this$eventDispatcher2 = this.eventDispatcher) === null || _this$eventDispatcher2 === void 0 ? void 0 : _this$eventDispatcher2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    (_this$eventDispatcher3 = this.eventDispatcher) === null || _this$eventDispatcher3 === void 0 ? void 0 : _this$eventDispatcher3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
    this.routerEvents.off("newPageReady", this.onEnvironmentChanges, this);
    window.removeEventListener("resize", this.onEnvironmentChanges, false);
  }

  template() {
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4SidebarComponent, "tagName", "bs4-sidebar");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4SlideshowComponent": function() { return /* binding */ Bs4SlideshowComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/extras */ "../../packages/extras/src/index.ts");
/* harmony import */ var _bs4_slideshow_slides_component_html__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-slideshow-slides.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html");
/* harmony import */ var _bs4_slideshow_controls_component_html__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-slideshow-controls.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html");
/* harmony import */ var _bs4_slideshow_indicators_component_html__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bs4-slideshow-indicators.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }










const SLIDESHOW_INNER_SELECTOR = ".slideshow-inner";
const SLIDES_SELECTOR = "".concat(SLIDESHOW_INNER_SELECTOR, " > .slide");
class Bs4SlideshowComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_5__.TemplatesComponent {
  // TODO type ResizeObserver;
  get slideshowInner() {
    if (!this._slideshowInner) {
      this._slideshowInner = this.querySelector(SLIDESHOW_INNER_SELECTOR);
    }

    if (!this._slideshowInner) {
      throw new Error("Child element with selector ".concat(SLIDESHOW_INNER_SELECTOR, " not found!"));
    }

    return this._slideshowInner;
  }

  get slideElements() {
    if (!this._slideElements) {
      this._slideElements = this.querySelectorAll(SLIDES_SELECTOR);
    }

    if (!this._slideElements) {
      throw new Error("Child element with selector ".concat(SLIDES_SELECTOR, " not found!"));
    }

    return this._slideElements;
  }

  get controlsElements() {
    if (!this._controlsElements) {
      this._controlsElements = this.querySelectorAll(".slideshow-control-prev, .slideshow-control-next");
    }

    return this._controlsElements;
  }

  get indicatorsElement() {
    if (!this._indicatorsElement) {
      this._indicatorsElement = this.querySelector(".slideshow-indicators");
    }

    return this._indicatorsElement;
  }

  static get observedAttributes() {
    return ["min-width", "slides-to-show", "slides-to-scroll", "controls", "controls-position", "drag", "autoplay", "autoplay-interval", "autoplay-velocity", "control-prev-icon-src", "control-next-icon-src", "indicator-inactive-icon-src", "indicator-active-icon-src", "angle", "set-active-slide", "pause-on-hover", "sticky", "indicators", "indicators-position", "pause", "sm-min-width", "sm-slides-to-show", "sm-slides-to-scroll", "sm-controls", "sm-controls-position", "sm-drag", "sm-autoplay", "sm-autoplay-interval", "sm-autoplay-velocity", "sm-control-prev-icon-src", "sm-control-next-icon-src", "sm-indicator-inactive-icon-src", "sm-indicator-active-icon-src", "sm-angle", "sm-set-active-slide", "sm-pause-on-hover", "sm-sticky", "sm-indicators", "sm-indicators-position", "sm-pause", "md-min-width", "md-slides-to-show", "md-slides-to-scroll", "md-controls", "md-controls-position", "md-drag", "md-autoplay", "md-autoplay-interval", "md-autoplay-velocity", "md-control-prev-icon-src", "md-control-next-icon-src", "md-indicator-inactive-icon-src", "md-indicator-active-icon-src", "md-angle", "md-set-active-slide", "md-pause-on-hover", "md-sticky", "md-indicators", "sm-indicators-position", "md-pause", "lg-min-width", "lg-slides-to-show", "lg-slides-to-scroll", "lg-controls", "lg-controls-position", "lg-drag", "lg-autoplay", "lg-autoplay-interval", "lg-autoplay-velocity", "lg-control-prev-icon-src", "lg-control-next-icon-src", "lg-indicator-inactive-icon-src", "lg-indicator-active-icon-src", "lg-angle", "lg-set-active-slide", "lg-pause-on-hover", "lg-sticky", "lg-indicators", "lg-indicators-position", "lg-pause", "xl-min-width", "xl-slides-to-show", "xl-slides-to-scroll", "xl-controls", "xl-controls-position", "xl-drag", "xl-autoplay", "xl-autoplay-interval", "xl-autoplay-velocity", "xl-control-prev-icon-src", "xl-control-next-icon-src", "xl-indicator-inactive-icon-src", "xl-indicator-active-icon-src", "xl-angle", "xl-set-active-slide", "xl-pause-on-hover", "xl-sticky", "xl-indicators", "xl-indicators-position", "xl-pause"];
  }

  constructor() {
    super(); // set event listeners to the this-bound version once, so we can easily pass them to DOM event handlers and remove them again later

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "class",
      required: false
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: true
    }, {
      name: "active",
      type: "boolean",
      required: false
    }, {
      name: "index",
      type: "number",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_slideshowInner", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_slideElements", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_controlsElements", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_indicatorsElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateControls", _bs4_slideshow_controls_component_html__WEBPACK_IMPORTED_MODULE_8__["default"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateIndicators", _bs4_slideshow_indicators_component_html__WEBPACK_IMPORTED_MODULE_9__["default"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autoplayIntervalIndex", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "continuousAutoplayIntervalIndex", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "resumeTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "breakpoint", "xs");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // Template methods
      next: this.next.bind(this),
      prev: this.prev.bind(this),
      goTo: this.goTo.bind(this),
      // Template properties
      items: new Array(),
      // Options
      slidesToScroll: 1,
      controls: true,
      controlsPosition: "inside-middle",
      pauseOnHover: true,
      sticky: false,
      indicators: true,
      indicatorsPosition: "inside-bottom",
      pause: false,
      drag: true,
      autoplay: false,
      autoplayInterval: 0,
      autoplayVelocity: 0.8,
      controlPrevIconSrc: "",
      controlNextIconSrc: "",
      indicatorActiveIconSrc: "",
      indicatorInactiveIconSrc: "",
      angle: "horizontal",
      // Responsive options
      xs: {
        minWidth: 0
      },
      sm: {
        minWidth: 576
      },
      md: {
        minWidth: 768
      },
      lg: {
        minWidth: 992
      },
      xl: {
        minWidth: 1200
      },
      // Classes
      controlsPositionClass: "",
      indicatorsPositionClass: ""
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onViewChanges", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.debounce)(this._onViewChanges.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.debounce)(this._onScroll.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onMouseUp", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.throttle)(this._onMouseUp.bind(this)));

    this.onViewChanges = this.onViewChanges.bind(this);
    this.onVisibilityChanged = this.onVisibilityChanged.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.onScrollend = this.onScrollend.bind(this);
    this.onMouseIn = this.onMouseIn.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
  }
  /**
   * Go to next slide
   */


  next() {
    this.scrollToNextSlide();
  }
  /**
   * Go to prev slide
   */


  prev() {
    this.scrollToPrevSlide();
  }
  /**
   * Go to slide by index
   * @param index
   */


  goTo(index) {
    this.setSlidePositions();
    let top = 0;
    let left = 0;

    if (!this.scope.items[index]) {
      console.error("Slide with index \"".concat(index, "\" not found!"), this.scope.items[index]);
      return;
    }

    if (this.scope.angle === "vertical") {
      // Check if we do not need to slide
      if (this.scope.items[index].position.centerY === 0) {
        // We do not need to scroll
        return;
      }

      top = this.slideshowInner.scrollTop + this.scope.items[index].position.centerY;
    } else {
      // Check if we do not need to slide
      if (this.scope.items[index].position.centerX === 0) {
        // We do not need to scroll
        return;
      }

      left = this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
    } // TODO new scroll service based on https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/


    if (this.slideElements[index]) {
      // if is is window to scroll
      if (typeof this.slideshowInner.scroll === "function") {
        this.slideshowInner.scroll({
          behavior: "smooth",
          left,
          top
        });
      } else {
        if (this.scope.angle === "vertical") {
          this.slideshowInner.scrollTop = top;
        } else {
          this.slideshowInner.scrollLeft = left;
        }
      }
    }
  }

  setOptions(dest, source) {
    dest.slidesToScroll = typeof source.slidesToScroll !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.slidesToScroll) : dest.slidesToScroll;
    dest.controls = typeof source.controls !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controls) : dest.controls;
    dest.controlsPosition = typeof source.controlsPosition !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlsPosition) : dest.controlsPosition;
    dest.drag = typeof source.drag !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.drag) : dest.drag;
    dest.autoplay = typeof source.autoplay !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplay) : dest.autoplay;
    dest.autoplayInterval = typeof source.autoplayInterval !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplayInterval) : dest.autoplayInterval;
    dest.autoplayVelocity = typeof source.autoplayVelocity !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplayVelocity) : dest.autoplayVelocity;
    dest.controlPrevIconSrc = typeof source.controlPrevIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlPrevIconSrc) : dest.controlPrevIconSrc;
    dest.controlNextIconSrc = typeof source.controlNextIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlNextIconSrc) : dest.controlNextIconSrc;
    dest.indicatorActiveIconSrc = typeof source.indicatorActiveIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorActiveIconSrc) : dest.indicatorActiveIconSrc;
    dest.indicatorInactiveIconSrc = typeof source.indicatorInactiveIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorInactiveIconSrc) : dest.indicatorInactiveIconSrc;
    dest.angle = typeof source.angle !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.angle) : dest.angle;
    dest.pauseOnHover = typeof source.pauseOnHover !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.pauseOnHover) : dest.pauseOnHover;
    dest.sticky = typeof source.sticky !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.sticky) : dest.sticky;
    dest.indicators = typeof source.indicators !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicators) : dest.indicators;
    dest.indicatorsPosition = typeof source.indicatorsPosition !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorsPosition) : dest.indicatorsPosition;
    dest.pause = typeof source.pause !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.pause) : dest.pause;
  }

  setOptionsIfUndefined(dest, source) {
    dest.slidesToScroll = typeof dest.slidesToScroll === "undefined" ? source.slidesToScroll : dest.slidesToScroll;
    dest.controls = typeof dest.controls === "undefined" ? source.controls : dest.controls;
    dest.controlsPosition = typeof dest.controlsPosition === "undefined" ? source.controlsPosition : dest.controlsPosition;
    dest.drag = typeof dest.drag === "undefined" ? source.drag : dest.drag;
    dest.autoplay = typeof dest.autoplay === "undefined" ? source.autoplay : dest.autoplay;
    dest.autoplayInterval = typeof dest.autoplayInterval === "undefined" ? source.autoplayInterval : dest.autoplayInterval;
    dest.autoplayVelocity = typeof dest.autoplayVelocity === "undefined" ? source.autoplayVelocity : dest.autoplayVelocity;
    dest.controlPrevIconSrc = typeof dest.controlPrevIconSrc === "undefined" ? source.controlPrevIconSrc : dest.controlPrevIconSrc;
    dest.controlNextIconSrc = typeof dest.controlNextIconSrc === "undefined" ? source.controlNextIconSrc : dest.controlNextIconSrc;
    dest.indicatorActiveIconSrc = typeof dest.indicatorActiveIconSrc === "undefined" ? source.indicatorActiveIconSrc : dest.indicatorActiveIconSrc;
    dest.indicatorInactiveIconSrc = typeof dest.indicatorInactiveIconSrc === "undefined" ? source.indicatorInactiveIconSrc : dest.indicatorInactiveIconSrc;
    dest.angle = typeof dest.angle === "undefined" ? source.angle : dest.angle;
    dest.pauseOnHover = typeof dest.pauseOnHover === "undefined" ? source.pauseOnHover : dest.pauseOnHover;
    dest.sticky = typeof dest.sticky === "undefined" ? source.sticky : dest.sticky;
    dest.indicators = typeof dest.indicators === "undefined" ? source.indicators : dest.indicators;
    dest.indicatorsPosition = typeof dest.indicatorsPosition === "undefined" ? source.indicatorsPosition : dest.indicatorsPosition;
    dest.pause = typeof dest.pause === "undefined" ? source.pause : dest.pause;
  }

  initResponsiveOptions() {
    this.setOptions(this.scope.xs, this.scope);
    this.setOptionsIfUndefined(this.scope.sm, this.scope.xs);
    this.setOptionsIfUndefined(this.scope.md, this.scope.sm);
    this.setOptionsIfUndefined(this.scope.lg, this.scope.md);
    this.setOptionsIfUndefined(this.scope.xl, this.scope.lg);
    this.breakpoint = this.getBreakpoint();
    this.setOptionsByBreakpoint(this.breakpoint);
  }

  setControlsOptions() {
    var _this$scope$xs$contro, _this$scope$sm$contro, _this$scope$md$contro, _this$scope$lg$contro, _this$scope$xl$contro;

    const xsControlsPosition = (_this$scope$xs$contro = this.scope.xs.controlsPosition) === null || _this$scope$xs$contro === void 0 ? void 0 : _this$scope$xs$contro.split("-");
    const smControlsPosition = (_this$scope$sm$contro = this.scope.sm.controlsPosition) === null || _this$scope$sm$contro === void 0 ? void 0 : _this$scope$sm$contro.split("-");
    const mdControlsPosition = (_this$scope$md$contro = this.scope.md.controlsPosition) === null || _this$scope$md$contro === void 0 ? void 0 : _this$scope$md$contro.split("-");
    const lgControlsPosition = (_this$scope$lg$contro = this.scope.lg.controlsPosition) === null || _this$scope$lg$contro === void 0 ? void 0 : _this$scope$lg$contro.split("-");
    const xlControlsPosition = (_this$scope$xl$contro = this.scope.xl.controlsPosition) === null || _this$scope$xl$contro === void 0 ? void 0 : _this$scope$xl$contro.split("-");
    this.scope.controlsPositionClass = "control-".concat(xsControlsPosition[0], " control-").concat(xsControlsPosition[1], " control-sm-").concat(smControlsPosition[0], " control-sm-").concat(smControlsPosition[1], " control-md-").concat(mdControlsPosition[0], " control-md-").concat(mdControlsPosition[1], " control-lg-").concat(lgControlsPosition[0], " control-lg-").concat(lgControlsPosition[1], " control-xl-").concat(xlControlsPosition[0], " control-xl-").concat(xlControlsPosition[1]);
  }

  setIndicatorsOptions() {
    var _this$scope$xs$indica, _this$scope$sm$indica, _this$scope$md$indica, _this$scope$lg$indica, _this$scope$xl$indica;

    const xsIndicatorsPosition = (_this$scope$xs$indica = this.scope.xs.indicatorsPosition) === null || _this$scope$xs$indica === void 0 ? void 0 : _this$scope$xs$indica.split("-");
    const smIndicatorsPosition = (_this$scope$sm$indica = this.scope.sm.indicatorsPosition) === null || _this$scope$sm$indica === void 0 ? void 0 : _this$scope$sm$indica.split("-");
    const mdIndicatorsPosition = (_this$scope$md$indica = this.scope.md.indicatorsPosition) === null || _this$scope$md$indica === void 0 ? void 0 : _this$scope$md$indica.split("-");
    const lgIndicatorsPosition = (_this$scope$lg$indica = this.scope.lg.indicatorsPosition) === null || _this$scope$lg$indica === void 0 ? void 0 : _this$scope$lg$indica.split("-");
    const xlIndicatorsPosition = (_this$scope$xl$indica = this.scope.xl.indicatorsPosition) === null || _this$scope$xl$indica === void 0 ? void 0 : _this$scope$xl$indica.split("-");
    this.scope.indicatorsPositionClass = "indicators-".concat(xsIndicatorsPosition[0], " indicators-").concat(xsIndicatorsPosition[1], " indicators-sm-").concat(smIndicatorsPosition[0], " indicators-sm-").concat(smIndicatorsPosition[1], " indicators-md-").concat(mdIndicatorsPosition[0], " indicators-md-").concat(mdIndicatorsPosition[1], " indicators-lg-").concat(lgIndicatorsPosition[0], " indicators-lg-").concat(lgIndicatorsPosition[1], " indicators-xl-").concat(xlIndicatorsPosition[0], " indicators-xl-").concat(xlIndicatorsPosition[1]);
  } // TODO create independent bs4 breakpoint service


  getBreakpoint() {
    const size = window.innerWidth; // XS

    if (size >= this.scope.xs.minWidth && size < this.scope.sm.minWidth) {
      return "xs";
    } // SM


    if (size >= this.scope.sm.minWidth && size < this.scope.md.minWidth) {
      return "sm";
    } // MD


    if (size >= this.scope.md.minWidth && size < this.scope.lg.minWidth) {
      return "md";
    } // LG


    if (size >= this.scope.lg.minWidth && size < this.scope.xl.minWidth) {
      return "lg";
    } // XL


    return "xl";
  }

  setOptionsByBreakpoint(breakpoint) {
    this.setOptions(this.scope, this.scope[breakpoint]);

    if (this.scope.autoplay) {
      this.enableAutoplay();
    } else {
      this.disableAutoplay();
    }

    if (this.scope.drag) {
      this.enableDesktopDragscroll();
    } else {
      this.disableDesktopDragscroll();
    }

    this.setControlsOptions();
    this.setIndicatorsOptions();
  }

  onBreakpointChanges() {
    this.setOptionsByBreakpoint(this.breakpoint);
  }

  _onViewChanges() {
    this.debug("onViewChanges");
    const newBreakpoint = this.getBreakpoint();

    if (newBreakpoint !== this.breakpoint) {
      this.breakpoint = newBreakpoint;
      this.onBreakpointChanges();
    }

    this.setSlidePositions();
    const index = this.setCenteredSlideActive();

    if (this.scope.sticky) {
      this.goTo(index);
    }
  }

  onVisibilityChanged(event) {
    if (event.detail.visible) {
      var _this$dragscrollServi, _this$continuousAutop;

      (_this$dragscrollServi = this.dragscrollService) === null || _this$dragscrollServi === void 0 ? void 0 : _this$dragscrollServi.checkDraggable();
      (_this$continuousAutop = this.continuousAutoplayService) === null || _this$continuousAutop === void 0 ? void 0 : _this$continuousAutop.update();
    }
  }

  _onScroll() {
    // this.setSlidePositions();
    // this.setCenteredSlideActive();
    this.resume(1000);
  }

  onScrollend() {
    this.setSlidePositions();
    this.setCenteredSlideActive();

    if (this.scope.sticky) {
      this.scrollToNearestSlide();
    }

    this.resume(1000);
  }

  onMouseIn() {
    if (this.scope.pauseOnHover) {
      this.scope.pause = true;
    }
  }

  onMouseOut() {
    this.resume(200);
  }

  _onMouseUp() {
    this.resume(1000);
  }

  /** Resume if this method was not called up for [delay] milliseconds */
  resume() {
    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;

    if (!this.scope.pause) {
      return;
    }

    if (this.resumeTimer !== null) {
      clearTimeout(this.resumeTimer);
      this.resumeTimer = null;
    }

    this.resumeTimer = window.setTimeout(() => {
      this.setSlidePositions();
      this.scope.pause = false;
    }, delay);
  }

  connectedCallback() {
    super.connectedCallback();
    return this.init(Bs4SlideshowComponent.observedAttributes);
  }

  addEventListeners() {
    this.routerEvents.on("newPageReady", this.onBreakpointChanges, this); // TODO types
    // What element resize

    if (window.ResizeObserver) {
      var _this$resizeObserver;

      this.resizeObserver = new window.ResizeObserver(this.onViewChanges);
      (_this$resizeObserver = this.resizeObserver) === null || _this$resizeObserver === void 0 ? void 0 : _this$resizeObserver.observe(this);
    } else {
      // Fallback watch window resize
      window.addEventListener("resize", this.onViewChanges, {
        passive: true
      });
    } // Custom event triggered by some parent components when this component changes his visibility, e.g. triggered in the bs4-tabs component


    this.addEventListener("visibility-changed", this.onVisibilityChanged);
    this.slideshowInner.addEventListener("scroll", this.onScroll, {
      passive: true
    });
    this.slideshowInner.addEventListener("scrollended", this.onScrollend, {
      passive: true
    });
    this.addEventListener("mouseenter", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("mouseover", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("focusin", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("touchstart", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("mouseout", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("mouseleave", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("focusout", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("mouseup", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("touchend", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("scroll", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("scrollend", this.onMouseUp, {
      passive: true
    }); // See ScrollEventsService for this event

    this.addEventListener("scrollended", this.onMouseUp, {
      passive: true
    }); // initial

    this.onViewChanges(); // this.onScroll();

    this.onScrollend();
  }

  removeEventListeners() {
    var _this$resizeObserver2;

    this.routerEvents.off("newPageReady", this.onBreakpointChanges, this);
    window.removeEventListener("resize", this.onViewChanges);
    (_this$resizeObserver2 = this.resizeObserver) === null || _this$resizeObserver2 === void 0 ? void 0 : _this$resizeObserver2.unobserve(this);
    this.removeEventListener("visibility-changed", this.onVisibilityChanged);
    this.slideshowInner.removeEventListener("scroll", this.onScroll);
    this.slideshowInner.removeEventListener("scrollended", this.onScrollend);
    this.removeEventListener("mouseenter", this.onMouseIn);
    this.removeEventListener("mouseover", this.onMouseIn);
    this.removeEventListener("focusin", this.onMouseIn);
    this.removeEventListener("touchstart", this.onMouseIn);
    this.removeEventListener("mouseout", this.onMouseOut);
    this.removeEventListener("mouseleave", this.onMouseOut);
    this.removeEventListener("focusout", this.onMouseOut);
    this.removeEventListener("mouseup", this.onMouseUp);
    this.removeEventListener("touchend", this.onMouseUp);
    this.removeEventListener("scroll", this.onMouseUp);
    this.removeEventListener("scrollend", this.onMouseUp); // See ScrollEventsService for this event

    this.removeEventListener("scrollended", this.onMouseUp);
  }

  async beforeBind() {
    return await super.beforeBind();
  }

  async afterBind() {
    this.initSlideshowInner();
    this.initResponsiveOptions(); // this.removeEventListeners();

    this.addEventListeners();
    await super.afterBind();
  }

  initSlideshowInner() {
    this.initSlideshowInnerSlides();
    this.scrollEventsService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.ScrollEventsService(this.slideshowInner);
  }

  enableDesktopDragscroll() {
    if (!this.dragscrollService) {
      const dragscrollOptions = {
        detectGlobalMove: true
      };
      this.dragscrollService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.Dragscroll(this.slideshowInner, dragscrollOptions);
    }
  }

  disableDesktopDragscroll() {
    if (this.dragscrollService) {
      this.dragscrollService.destroy();
      this.dragscrollService = undefined;
    }
  }

  enableContinuousAutoplay() {
    if (!this.continuousAutoplayService) {
      const autoscrollOptions = {
        velocity: this.scope.autoplayVelocity,
        angle: this.scope.angle,
        pauseOnHover: this.scope.pauseOnHover
      };
      this.continuousAutoplayService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.Autoscroll(this.slideshowInner, autoscrollOptions);
    } // on continuous autoplay the scrollended event is never triggered, so call this method all `intervalsTimeMs` milliseconds as a WORKAROUND


    if (!this.continuousAutoplayIntervalIndex) {
      // intervals are depending on the autoscrolling speed (autoplayVelocity)
      const intervalsTimeMs = this.scope.autoplayVelocity * 10000; // this.debug('intervalsTimeMs', intervalsTimeMs);

      this.continuousAutoplayIntervalIndex = window.setInterval(this.onScrollend.bind(this), intervalsTimeMs);
    }
  }

  disableContinuousAutoplay() {
    if (this.continuousAutoplayService) {
      this.continuousAutoplayService.destroy();
      this.continuousAutoplayService = undefined;
    }

    if (this.continuousAutoplayIntervalIndex) {
      window.clearInterval(this.continuousAutoplayIntervalIndex);
      this.continuousAutoplayIntervalIndex = null;
    }
  }

  enableIntervalAutoplay() {
    if (this.autoplayIntervalIndex === null) {
      this.autoplayIntervalIndex = window.setInterval(() => {
        if (!this.scope.pause) {
          this.next();
        }
      }, this.scope.autoplayInterval);
    }
  }

  disableIntervalAutoplay() {
    if (this.autoplayIntervalIndex) {
      window.clearInterval(this.autoplayIntervalIndex);
      this.autoplayIntervalIndex = null;
    }
  }

  disableAutoplay() {
    this.disableIntervalAutoplay();
    this.disableContinuousAutoplay();
  }

  enableAutoplay() {
    // continuous scrolling
    if (this.scope.autoplayInterval <= 0) {
      this.enableContinuousAutoplay();
    } else {
      this.enableIntervalAutoplay();
    }
  }

  initSlideshowInnerSlides() {
    if (!this.slideElements) {
      throw new Error("No slides found!");
    } // If slides not added by template


    if (this.scope.items.length === 0) {
      this.addItemsByChilds();
    }
  }

  transformTemplateAttributes(attributes, index) {
    attributes = super.transformTemplateAttributes(attributes, index);
    attributes.handle = attributes.handle || index.toString();
    attributes.index = index;
    attributes.class = attributes.class || "";
    attributes.class += " slide";
    return attributes;
  }
  /**
   * Add slide by template element
   * @param tpl template element
   */


  addItemByTemplate(tpl, index) {
    const attributes = this.getTemplateAttributes(tpl, index);
    const content = tpl.innerHTML;

    if (attributes.type) {
      if (attributes.type === "slide") {
        this.scope.items.push(_objectSpread(_objectSpread({}, attributes), {}, {
          content
        }));
      }

      if (attributes.type === "controls") {
        this.templateControls = content;
      }

      if (attributes.type === "indicators") {
        this.templateIndicators = content;
      }
    }
  }
  /**
   * Add slides by child elements (not as template elements)
   * @param tpl template element
   */


  addItemsByChilds() {
    if (!this.slideElements) {
      return;
    }

    this.slideElements.forEach((slideElement, index) => {
      const handle = slideElement.getAttribute("handle") || slideElement.getAttribute("id") || index.toString();
      slideElement.setAttribute("index", index.toString());
      const attributes = {
        handle,
        active: false,
        content: slideElement.innerHTML,
        index,
        position: _objectSpread(_objectSpread({}, slideElement.getBoundingClientRect()), {}, {
          centerY: 0,
          centerX: 0
        })
      };
      this.scope.items.push(attributes);
    });
  }

  getScrollPosition() {
    const scrollPosition = (0,_ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.getScrollPosition)(this.slideshowInner);
    return scrollPosition;
  }
  /**
   * get closest number
   * @see https://stackoverflow.com/a/35000557
   * @param goal the number which this number should be closest to
   * @param curr current number in loop
   * @param prev previous number or closest value found so far
   */


  getCurrentClosestNumber(goal, curr, prev) {
    return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;
  }

  getMostCenteredSlideIndex() {
    if (this.scope.items.length <= 0) {
      return -1;
    }

    let nearZero = Math.abs(this.scope.angle === "vertical" ? this.scope.items[0].position.centerY : this.scope.items[0].position.centerX);
    let minIndex = 0;

    for (let i = 1; i < this.scope.items.length; i++) {
      const position = Math.abs(this.scope.angle === "vertical" ? this.scope.items[i].position.centerY : this.scope.items[i].position.centerX);
      nearZero = this.getCurrentClosestNumber(0, position, nearZero);

      if (nearZero === position) {
        minIndex = i;
      }
    }

    return minIndex;
  }

  setAllSlidesInactive() {
    let excludeIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

    if (!this.slideElements) {
      return;
    }

    for (let index = 0; index < this.scope.items.length; index++) {
      if (index !== excludeIndex) {
        if (this.scope.items[index]) {
          this.scope.items[index].active = false;
        }

        if (this.slideElements[index] && this.slideElements[index].classList) {
          this.slideElements[index].classList.remove("active");
        }
      }
    }
  }

  setCenteredSlideActive() {
    const index = this.getMostCenteredSlideIndex();
    this.setAllSlidesInactive(index);

    if (!this.scope.items[index]) {
      return -1;
    }

    this.scope.items[index].active = true;

    if (this.slideElements && this.slideElements[index].classList) {
      this.slideElements[index].classList.add("active");
    }

    return index;
  }

  isScrollableToIndex(index) {
    if (!this.scope.items[index]) {
      return false;
    }

    const maxScrollTo = this.scope.angle === "vertical" ? this.getScrollPosition().maxY : this.getScrollPosition().maxX;
    const scrollTo = this.scope.angle === "vertical" ? this.slideshowInner.scrollTop + this.scope.items[index].position.centerY : this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
    return scrollTo <= maxScrollTo && scrollTo >= 0;
  }

  scrollToNextSlide() {
    this.setSlidePositions();
    const currentIndex = this.getMostCenteredSlideIndex();
    let nextIndex = currentIndex + this.scope.slidesToScroll;

    if (nextIndex >= this.slideElements.length) {
      nextIndex = nextIndex - this.slideElements.length;
    } // if (!this.isScrollableToIndex(nextIndex)) {
    //   nextIndex++;
    // }
    // if (nextIndex >= this.slideElements.length) {
    //   nextIndex = nextIndex - this.slideElements.length;
    // }


    return this.goTo(nextIndex);
  }

  scrollToPrevSlide() {
    this.setSlidePositions();
    const currentIndex = this.getMostCenteredSlideIndex();
    let prevIndex = currentIndex - this.scope.slidesToScroll;

    if (prevIndex < 0) {
      prevIndex = this.slideElements.length - 1 + (prevIndex + 1);
    }

    return this.goTo(prevIndex);
  }

  scrollToNearestSlide() {
    this.setSlidePositions();
    const nearestIndex = this.getMostCenteredSlideIndex();
    return this.goTo(nearestIndex);
  }

  setSlidePositions() {
    var _this$slideElements;

    if (this.scope.items.length !== ((_this$slideElements = this.slideElements) === null || _this$slideElements === void 0 ? void 0 : _this$slideElements.length)) {
      var _this$slideElements2;

      console.warn("The slide objects must be the same size as the slide elements! ".concat(this.scope.items.length, " !== ").concat((_this$slideElements2 = this.slideElements) === null || _this$slideElements2 === void 0 ? void 0 : _this$slideElements2.length));
      return;
    }

    const mainBoundingClient = this.slideshowInner.getBoundingClientRect();

    for (let i = 0; i < this.scope.items.length; i++) {
      const slideElement = this.slideElements[i];
      const slideObject = this.scope.items[i];
      const rect = slideElement.getBoundingClientRect();
      rect.x -= mainBoundingClient.x;
      rect.y -= mainBoundingClient.y;
      slideObject.position = {
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height,
        bottom: rect.bottom,
        left: rect.left,
        right: rect.right,
        top: rect.top,
        toJSON: rect.toJSON,
        // 0 if element is in the middle / center
        centerY: rect.y + rect.height / 2 - mainBoundingClient.height / 2,
        // 0 if element is in the middle / center
        centerX: rect.x + rect.width / 2 - mainBoundingClient.width / 2
      };
    }
  }

  requiredAttributes() {
    return [];
  }
  /**
   * Default custom Element method
   * Invoked when an attribute on the custom element changes.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    let optionForSize = "xs";
    let responsiveScope = this.scope;

    if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
      this.observedAttributesToCheck[attributeName].initialized = true;
    }

    newValue = this.parseAttribute(newValue);

    if (attributeName.startsWith("sm-")) {
      optionForSize = "sm";
      responsiveScope = this.scope.sm;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("md-")) {
      optionForSize = "md";
      responsiveScope = this.scope.md;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("lg-")) {
      optionForSize = "lg";
      responsiveScope = this.scope.lg;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("xl-")) {
      optionForSize = "xl";
      responsiveScope = this.scope.xl;
      attributeName = attributeName.slice(3);
    }

    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.camelCase)(attributeName);

    if (responsiveScope && responsiveScope[parsedAttributeName]) {
      oldValue = responsiveScope[parsedAttributeName];
    } // automatically inject observed attributes to view responsiveScope


    responsiveScope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

    this.parsedAttributeChangedCallback(optionForSize + parsedAttributeName, oldValue, newValue, namespace);
    this.bindIfReady();
  }
  /**
   * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    return super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    var _this$scrollEventsSer;

    this.removeEventListeners();
    (_this$scrollEventsSer = this.scrollEventsService) === null || _this$scrollEventsSer === void 0 ? void 0 : _this$scrollEventsSer.destroy();
    this.disableAutoplay();
    this.disableDesktopDragscroll();
    return super.disconnectedCallback();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      // ('Full template!', this.templateIndicators);
      return _bs4_slideshow_slides_component_html__WEBPACK_IMPORTED_MODULE_7__["default"] + this.templateControls + this.templateIndicators;
    } else {
      // this.debug('Append to template!');
      // Prepend control elements if no custom control elements in template are found
      if (this.controlsElements.length <= 0) {
        this.innerHTML += this.templateControls;
      }

      if (!this.indicatorsElement) {
        this.innerHTML += this.templateIndicators;
      }

      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4SlideshowComponent, "tagName", "bs4-slideshow");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsComponent": function() { return /* binding */ Bs4TabsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_horizontal_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-horizontal.component.html */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html");
/* harmony import */ var _bs4_tabs_vertical_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-tabs-vertical.component.html */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");






const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
class Bs4TabsComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.TemplatesComponent {
  static get observedAttributes() {
    return ["option-tabs-auto-height", "option-tabs-angle", "tab-0-title", "tab-0-content", "tab-0-handle", "tab-1-title", "tab-1-content", "tab-1-handle", "tab-2-title", "tab-2-content", "tab-2-handle", "tab-3-title", "tab-3-content", "tab-3-handle", "tab-4-title", "tab-4-content", "tab-4-handle", "tab-5-title", "tab-5-content", "tab-5-handle", "tab-6-title", "tab-6-content", "tab-6-handle", "tab-7-title", "tab-7-content", "tab-7-handle", "tab-8-title", "tab-8-content", "tab-8-handle", "tab-9-title", "tab-9-content", "tab-9-handle", "tab-10-title", "tab-10-content", "tab-10-handle", "tab-11-title", "tab-11-content", "tab-11-handle", "tab-12-title", "tab-12-content", "tab-12-handle", "tab-13-title", "tab-13-content", "tab-13-handle", "tab-14-title", "tab-14-content", "tab-14-handle", "tab-15-title", "tab-15-content", "tab-15-handle", "tab-16-title", "tab-16-content", "tab-16-handle", "tab-17-title", "tab-17-content", "tab-17-handle", "tab-18-title", "tab-18-content", "tab-18-handle", "tab-19-title", "tab-19-content", "tab-19-handle"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: false
    }, {
      name: "active",
      required: false
    }, {
      name: "index",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: new Array(),
      activate: this.activate,
      deactivate: this.deactivate,
      deactivateAll: this.deactivateAll,
      optionTabsAutoHeight: false,
      optionTabsAngle: "horizontal"
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__.debounce)(this._onResize.bind(this)));
  }

  _onResize() {
    this.setHeight();
  }

  /**
   * Make all tabs panes as height as the highest tab pane
   */
  setHeight() {
    if (this.scope.optionTabsAutoHeight) {
      return;
    } // Bind static template


    this.setElements();
    let highest = 0;

    if (!this.tabPanes) {
      return;
    }

    this.tabPanes.forEach(tabPane => {
      if (!tabPane.style) {
        return;
      }

      tabPane.style.height = "auto";
      tabPane.style.display = "block";
      const height = tabPane.offsetHeight || 0;

      if (height > highest) {
        highest = height;
      }
    });
    this.tabPanes.forEach(tabPane => {
      if (!tabPane.style) {
        return;
      } // Reset display style property


      tabPane.style.display = "";

      if (highest > 0) {
        tabPane.style.height = highest + "px";
      }
    });
  }

  deactivateAll() {
    for (let index = 0; index < this.scope.items.length; index++) {
      const tab = this.scope.items[index];
      this.deactivate(tab);
    }
  }

  deactivate(tab) {
    tab.active = false;
    const firstTabContentChild = this.getTabContentChildByIndex(tab.index);

    if (firstTabContentChild) {
      this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
    }
  }

  activate(tab) {
    this.deactivateAll();
    tab.active = true;
    const firstTabContentChild = this.getTabContentChildByIndex(tab.index);

    if (firstTabContentChild) {
      this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
    }
  }

  activateFirstTab() {
    if (this.scope.items.length > 0) {
      this.activate(this.scope.items[0]);
    }
  }

  getTabContentChildByIndex(index) {
    return this.querySelector(".tab-content .tab-pane:nth-child(".concat(index + 1, ") > *")) || undefined;
  }
  /**
   * Trigger `visibility-changed` for components that need to update if visibility changes.
   * E.g. this event is used the bs4-slideshow component
   * @param element
   * @param visible
   */


  triggerVisibilityChangedForElement(element, visible) {
    setTimeout(() => {
      // Use this event to update any custom element when it becomes visible
      element.dispatchEvent(new CustomEvent("visibility-changed", {
        detail: {
          visible
        }
      }));
    }, 200);
  }

  connectedCallback() {
    super.connectedCallback();
    this.initTabs();
    this.activateFirstTab();
    this.init(Bs4TabsComponent.observedAttributes);
  }

  disconnectedCallback() {
    if (this.tabs) {
      this.tabs.forEach(tab => {
        tab.removeEventListener("shown.bs.tab", this.onTabShownEventHandler);
      });
    }

    window.removeEventListener("resize", this.onResize);
  }

  setElements() {
    this.tabs = this.querySelectorAll('[role="tab"]');
    this.tabPanes = this.querySelectorAll('[role="tabpanel"]');
    this.scrollable = this.querySelector("[scrollable]");
  }

  resizeTabsArray(newSize) {
    while (newSize > this.scope.items.length) {
      this.scope.items.push({
        handle: "",
        title: "",
        content: "",
        active: false,
        index: this.scope.items.length - 1
      });
    }
  }

  onTabShownEventHandler(event) {
    const curTab = event.target || event.srcElement;

    if (!curTab) {
      return;
    }

    if (this.scrollable) {
      const tabScrollPosition = curTab.getBoundingClientRect();
      const scrollLeftTo = this.scrollable.scrollLeft || 0 + tabScrollPosition.left; // TODO animate
      // this.scrollable.animate({ scrollLeft: scrollLeftTo}, 'slow');

      this.scrollable.scrollLeft = scrollLeftTo;
    }
  }

  initTabs() {
    // Bind static template
    this.setElements();

    if (this.tabs) {
      this.tabs.forEach(tab => {
        tab.removeEventListener("shown.bs.tab", this.onTabShownEventHandler);
        tab.addEventListener("shown.bs.tab", this.onTabShownEventHandler);
      });
    }

    if (this.scope.optionTabsAutoHeight) {
      window.removeEventListener("resize", this.onResize);
      window.addEventListener("resize", this.onResize, {
        passive: true
      });
      this.setHeight();
    }
  }

  addTabByAttribute(attributeName, newValue) {
    const index = Number(attributeName.replace(/[^0-9]/g, ""));

    if (index >= this.scope.items.length) {
      this.resizeTabsArray(index + 1);
    }

    this.scope.items[index].index = index;

    if (attributeName.endsWith("Content")) {
      this.scope.items[index].content = newValue;
    }

    if (attributeName.endsWith("Title")) {
      this.scope.items[index].title = newValue;
      this.scope.items[index].handle = this.scope.items[index].handle || handleize(this.scope.items[index].title);
    }

    if (attributeName.endsWith("Handle")) {
      this.scope.items[index].handle = newValue;
    } // if is first tab


    if (this.scope.items.length > 0 && this.scope.items[0] && this.scope.items[0].content.length > 0 && this.scope.items[0].title.length > 0 && this.scope.items[0].handle.length > 0) {
      this.activateFirstTab();
    }
  }
  /**
   * Extends TemplatesComponent.transformTemplateAttributes to set the handle by the title if no handle is set
   */


  transformTemplateAttributes(attributes, index) {
    attributes = super.transformTemplateAttributes(attributes, index);

    if (!attributes.handle && attributes.title) {
      attributes.handle = handleize(attributes.title);
    }

    attributes.active = attributes.active || false;
    return attributes;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName.startsWith("tab")) {
      this.addTabByAttribute(attributeName, newValue);
      this.initTabs();
    }
  }

  async afterBind() {
    // Workaround
    setTimeout(() => {
      if (this.scope.optionTabsAutoHeight) {
        this.setHeight();
      }
    }, 500);
    await super.afterBind();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      if (this.scope.optionTabsAngle === "horizontal") {
        return _bs4_tabs_horizontal_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
      } else {
        return _bs4_tabs_vertical_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
      }
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsComponent, "tagName", "bs4-tabs");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts":
/*!****************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* binding */ Bs4TaggedImageComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_tagged_image_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-tagged-image.component.html */ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html");
/* harmony import */ var _ribajs_utils_src_control_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control.js */ "../../packages/utils/src/control.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






class Bs4TaggedImageComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Component {
  /**
   * ATTRIBUTES AND SCOPE
   */
  static get observedAttributes() {
    return ["tags", "options", "debug"];
  }

  /**
   * CONSTRUCTOR AND LIFECYCLE HANDLERS
   */
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      debug: false,
      tags: [],
      options: {
        popoverOptions: {},
        // set container = this in constructor
        multiPopover: false,
        tagOptions: {}
      },
      fillPopoverOptions: options => {
        return _objectSpread(_objectSpread(_objectSpread({}, this.scope.options.popoverOptions), this.scope.options.tagOptions.popoverOptions), options);
      },
      triggerOnFocus: options => {
        return this.scope.fillPopoverOptions(options).trigger ? 0 : null;
      },
      onClick: this.onClick.bind(this),
      onPopoverBound: this.onPopoverBound.bind(this),
      onPopoverShown: this.onPopoverShown.bind(this),
      onPopoverHidden: this.onPopoverHidden.bind(this),
      updateTagPositions: (0,_ribajs_utils_src_control_js__WEBPACK_IMPORTED_MODULE_5__.debounce)(this.updateTagPositions.bind(this))
    });

    this.scope.options.popoverOptions.container = this;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue) {
    if (attributeName === "options") {
      // before the component is bound, we just want to extend the default options
      if (this.bound) {
        this.scope.options = newValue;
      } else {
        this.scope.options = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.extend)({
          deep: true
        }, oldValue, newValue);
      }

      const po = this.scope.options.popoverOptions;

      if (po && typeof po.container === "string") {
        po.container = document.querySelector(po.container) || undefined;
      }
    }
  }

  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      this.parseChildTags();
    }

    return _bs4_tagged_image_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
  }

  async beforeBind() {
    await super.beforeBind(); // Template has been loaded. So the <img> tag should be there now.

    this.image = this.querySelector("img");
    this.addEventListeners();
    this.initTags();
  }

  addEventListeners() {
    const img = this.image;
    img.addEventListener("load", this.scope.updateTagPositions);
    img.addEventListener("click", this.scope.onClick);
    window.addEventListener("resize", this.scope.updateTagPositions, {
      passive: true
    });
  }

  removeEventListeners() {
    const img = this.image;
    img.removeEventListener("load", this.scope.updateTagPositions);
    img.removeEventListener("click", this.scope.onClick);
    window.removeEventListener("resize", this.scope.updateTagPositions);
  }

  async afterBind() {
    this.passImageAttributes();
    await super.afterBind();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4TaggedImageComponent.observedAttributes);
  }

  disconnectedCallback() {
    this.removeEventListener("click", this.scope.onClick);
    window.removeEventListener("resize", this.scope.updateTagPositions);
  }
  /**
   * LIFECYCLE HELPERS
   */


  parseChildTags() {
    this.debug("parseChildTags()");

    for (const tagEl of Array.from(this.querySelectorAll("tag"))) {
      const title = tagEl.getAttribute("title") || "";
      const content = tagEl.innerHTML;

      const x = (v => isNaN(v) ? Math.random() : v)(parseFloat(tagEl.getAttribute("x") || ""));

      const y = (v => isNaN(v) ? Math.random() : v)(parseFloat(tagEl.getAttribute("y") || ""));

      const shape = tagEl.getAttribute("shape") || undefined;
      const color = tagEl.getAttribute("color") || undefined;
      const borderRadius = tagEl.getAttribute("border-radius") || undefined;
      const fullSize = tagEl.getAttribute("full-size") || undefined;
      const smallSize = tagEl.getAttribute("small-size") || undefined;

      const tagData = _objectSpread(_objectSpread({}, this.scope.options.tagOptions), {}, {
        popoverOptions: this.scope.fillPopoverOptions({
          title,
          content,
          html: true
        }),
        x,
        y,
        shape,
        color,
        borderRadius,
        fullSize,
        smallSize
      });

      this.scope.tags.push(tagData);
    }
  }

  initTags() {
    const scopeTagOptions = this.scope.options.tagOptions;

    for (const [index, tag] of this.scope.tags.entries()) {
      tag.index = index;
      tag.shape = tag.shape || scopeTagOptions.shape;
      tag.borderRadius = tag.borderRadius || scopeTagOptions.borderRadius;
      tag.smallSize = tag.smallSize || scopeTagOptions.smallSize;
      tag.fullSize = tag.fullSize || scopeTagOptions.fullSize;
      tag.color = tag.color || scopeTagOptions.color;
    }
  }
  /**
   * Pass all attributes starting with "img-" down to the <img> Tag, without the prefix.
   */


  passImageAttributes() {
    const img = this.image;
    const attrs = this.attributes;

    for (let i = attrs.length - 1; i >= 0; i--) {
      if (attrs[i].name.startsWith("img-")) {
        img.setAttribute(attrs[i].name.substr(4), attrs[i].value);
      }
    }
  }
  /**
   * EVENT LISTENERS
   */


  onClick(e) {
    if (this.scope.debug) {
      // adapted from here: https://stackoverflow.com/a/42111623/7048200
      // TODO: avoid using "as any"
      const img = this.image;
      const {
        clientTop,
        clientLeft,
        width,
        height,
        naturalWidth,
        naturalHeight
      } = img;
      const {
        clientX,
        clientY
      } = e;
      let x = clientX - clientLeft;
      let y = clientY - clientTop;
      const wRatio = width / naturalWidth;
      const hRatio = height / naturalHeight;
      let actualWidth = width;
      let actualHeight = height;

      if (wRatio < hRatio) {
        // left, right cut off
        actualWidth = width * hRatio / wRatio;
        x += (actualWidth - width) / 2;
      } else if (hRatio < wRatio) {
        // left, right cut off
        actualHeight = height * wRatio / hRatio;
        y += (actualHeight - height) / 2;
      }

      x *= 100 / actualWidth;
      y *= 100 / actualHeight;
      console.log({
        x,
        y
      });
    }
  }

  onPopoverBound(event) {
    /*
     *  We get the anchor `el` for each tag here, after they have been bound in the rv-each,
     *  so we can trigger events on them later.
     */
    const boundIndexAttr = event.target.getAttribute("index");

    if (boundIndexAttr === null) {
      throw new Error("popup bound on no index");
    }

    const boundIndex = parseInt(boundIndexAttr);

    if (isNaN(boundIndex)) {
      throw new Error("boundIndex \"".concat(boundIndexAttr, "\" is not a number!"));
    }

    const foundTag = this.scope.tags.find(tag => tag.index === boundIndex);

    if (foundTag) {
      foundTag.el = event.target;
    } else {
      throw new Error("Tag with index (".concat(boundIndex, ", \"").concat(boundIndexAttr, "\") not found"));
    }
  }

  onPopoverShown(event) {
    for (const tag of this.scope.tags) {
      if (tag.el === event.target) {
        // Set shown popover's anchor as active.
        tag.el.classList.add("active");
      } else {
        // Hide all other popovers and remove active class from other tags if multiPopover option is false.
        if (!this.scope.options.multiPopover) {
          var _tag$el, _tag$el2;

          (_tag$el = tag.el) === null || _tag$el === void 0 ? void 0 : _tag$el.classList.remove("active");
          (_tag$el2 = tag.el) === null || _tag$el2 === void 0 ? void 0 : _tag$el2.dispatchEvent(new CustomEvent("trigger-hide"));
        }
      }
    }
  }

  onPopoverHidden(event) {
    const found = this.scope.tags.find(tag => tag.el === event.target);

    if (found) {
      var _found$el;

      (_found$el = found.el) === null || _found$el === void 0 ? void 0 : _found$el.classList.remove("active");
    }
  }

  updateTagPositions() {
    /*
     * Currently working for object-fit: cover, contain or fill, and object-position: 50% 50% (default)
     * TODO: make this work for all CSS values of "object-position" and "object-fit"!
     */
    const img = this.image;
    const {
      width,
      height,
      naturalWidth,
      naturalHeight
    } = img;
    const wRatio = naturalWidth / width;
    const hRatio = naturalHeight / height;
    const fit = window.getComputedStyle(img).getPropertyValue("object-fit");

    if (fit === "cover" && wRatio > hRatio || fit === "contain" && hRatio > wRatio) {
      for (const tag of this.scope.tags) {
        tag.top = tag.y * 100 + "%";
        tag.left = (wRatio / hRatio * (tag.x - 0.5) + 0.5) * 100 + "%";
      }
    } else if (fit === "cover" || fit === "contain") {
      for (const tag of this.scope.tags) {
        tag.left = tag.x * 100 + "%";
        tag.top = (hRatio / wRatio * (tag.y - 0.5) + 0.5) * 100 + "%";
      }
    } else {
      for (const tag of this.scope.tags) {
        tag.left = tag.x * 100 + "%";
        tag.top = tag.y * 100 + "%";
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TaggedImageComponent, "tagName", "bs4-tagged-image");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ToastItemComponent": function() { return /* binding */ Bs4ToastItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_toast_item_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-toast-item.component.html */ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html");
/* harmony import */ var _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/toast.service.js */ "../../packages/bs4/src/services/toast.service.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");





class Bs4ToastItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["toast", "icon-url", "index"];
  }

  requiredAttributes() {
    return ["toast"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onHidden: this.onHidden.bind(this),
      index: -1,
      dismiss: this.dismiss.bind(this),
      toast: undefined
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ToastItemComponent.observedAttributes);
  }

  async afterBind() {
    this.initToastService();
    await super.afterBind();
  }

  initToastService() {
    const toast = this.scope.toast;
    const toastEl = this.firstElementChild;

    if (toast && toastEl) {
      this.toastService = new _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService(toastEl, {
        delay: toast.delay !== undefined ? toast.delay : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.delay,
        autohide: toast.autoHide !== undefined ? toast.autoHide : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.autohide,
        animation: toast.animation !== undefined ? toast.animation : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.animation
      }); // Call onHidden on hidden event once

      toastEl.addEventListener(_services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.scope.onHidden, {
        once: true
      }); // show toast using the toastservice

      this.toastService.show();
    }
  } // can be called if toast should be removed


  dismiss() {
    var _this$toastService;

    (_this$toastService = this.toastService) === null || _this$toastService === void 0 ? void 0 : _this$toastService.hide();
  } // remove toast from dom once shown


  onHidden(event, el) {
    var _this$scope$$parent;

    if (!el) {
      el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementFromEvent)(event);
    }

    const toastContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

    if (typeof (toastContainer === null || toastContainer === void 0 ? void 0 : toastContainer.onItemHide) === "function" && this.scope.toast && el) {
      toastContainer.onItemHide(event, el, this.scope.index, this.scope.toast);
    }
  }

  template() {
    return _bs4_toast_item_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ToastItemComponent, "tagName", "bs4-toast-item");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts":
/*!******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* binding */ Bs4ToggleButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");


/**
 * This components is used to trigger a toggle event used in other components or parts of your project. This site itself uses the bs4-toggle-button to open or close the sidebar.
 * @attribute "target-id" (Required) The id with which the toggle event is triggered
 * @method toggle	 Triggers the toggle event
 * @property state Can be 'hidden' or something else
 * @property isClosed Is true if the state is 'hidden'
 * @property targetId Passed attribute value, see `target-id` attribute
 */




// TODO extend from Bs4ButtonComponent
class Bs4ToggleButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["target-id"];
  }

  requiredAttributes() {
    return ["targetId"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      targetId: undefined,
      toggle: this.toggle,
      state: "undefined",
      isActive: true,
      isClosed: false
    });
  }

  toggle() {
    if (this.eventDispatcher) {
      this.eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.scope.targetId);
    }
  }

  async afterBind() {
    var _this$eventDispatcher;

    // Trigger init to trigger there current state of all the components that are connected to this component
    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.scope.targetId);
    await super.afterBind();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ToggleButtonComponent.observedAttributes);
  }

  onToggledEvent(state) {
    this.scope.state = state;
    this.scope.isActive = state !== "hidden" && state !== "removed";
    this.scope.isClosed = !this.scope.isActive;
  }

  initEventDispatcher(id) {
    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this);
    }

    this.eventDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.nsPrefix + id);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this); // Triggered state triggered by `..trigger('init', ...`

    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.state, this.onToggledEvent, this);
  }

  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "targetId" && newValue) {
      this.initEventDispatcher(newValue);
    }
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();

    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this);
    }
  }

  template() {
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ToggleButtonComponent, "tagName", "bs4-toggle-button");

/***/ }),

/***/ "../../packages/bs4/src/components/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/components/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4AccordionComponent": function() { return /* reexport safe */ _bs4_accordion_bs4_accordion_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4AccordionComponent; },
/* harmony export */   "Bs4ButtonComponent": function() { return /* reexport safe */ _bs4_button_bs4_button_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ButtonComponent; },
/* harmony export */   "Bs4CarouselComponent": function() { return /* reexport safe */ _bs4_carousel_bs4_carousel_component_js__WEBPACK_IMPORTED_MODULE_3__.Bs4CarouselComponent; },
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* reexport safe */ _bs4_colorpicker_bs4_colorpicker_component_js__WEBPACK_IMPORTED_MODULE_4__.Bs4ColorPickerComponent; },
/* harmony export */   "Bs4ContentsComponent": function() { return /* reexport safe */ _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_5__.Bs4ContentsComponent; },
/* harmony export */   "Bs4DropdownComponent": function() { return /* reexport safe */ _bs4_dropdown_bs4_dropdown_component_js__WEBPACK_IMPORTED_MODULE_0__.Bs4DropdownComponent; },
/* harmony export */   "Bs4FormComponent": function() { return /* reexport safe */ _bs4_form_bs4_form_component_js__WEBPACK_IMPORTED_MODULE_14__.Bs4FormComponent; },
/* harmony export */   "Bs4IconComponent": function() { return /* reexport safe */ _bs4_icon_bs4_icon_component_js__WEBPACK_IMPORTED_MODULE_6__.Bs4IconComponent; },
/* harmony export */   "Bs4ModalItemComponent": function() { return /* reexport safe */ _bs4_modal_item_bs4_modal_item_component_js__WEBPACK_IMPORTED_MODULE_17__.Bs4ModalItemComponent; },
/* harmony export */   "Bs4NavbarComponent": function() { return /* reexport safe */ _bs4_navbar_bs4_navbar_component_js__WEBPACK_IMPORTED_MODULE_12__.Bs4NavbarComponent; },
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* reexport safe */ _bs4_notification_container_bs4_notification_container_component_js__WEBPACK_IMPORTED_MODULE_15__.Bs4NotificationContainerComponent; },
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* reexport safe */ _bs4_scrollspy_bs4_scrollspy_component_js__WEBPACK_IMPORTED_MODULE_7__.Bs4ScrollspyComponent; },
/* harmony export */   "Bs4ShareComponent": function() { return /* reexport safe */ _bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_8__.Bs4ShareComponent; },
/* harmony export */   "Bs4SidebarComponent": function() { return /* reexport safe */ _bs4_sidebar_bs4_sidebar_component_js__WEBPACK_IMPORTED_MODULE_9__.Bs4SidebarComponent; },
/* harmony export */   "Bs4SlideshowComponent": function() { return /* reexport safe */ _bs4_slideshow_bs4_slideshow_component_js__WEBPACK_IMPORTED_MODULE_10__.Bs4SlideshowComponent; },
/* harmony export */   "Bs4TabsComponent": function() { return /* reexport safe */ _bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_13__.Bs4TabsComponent; },
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* reexport safe */ _bs4_tagged_image_bs4_tagged_image_component_js__WEBPACK_IMPORTED_MODULE_18__.Bs4TaggedImageComponent; },
/* harmony export */   "Bs4ToastItemComponent": function() { return /* reexport safe */ _bs4_toast_item_bs4_toast_item_component_js__WEBPACK_IMPORTED_MODULE_16__.Bs4ToastItemComponent; },
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* reexport safe */ _bs4_toggle_button_bs4_toggle_button_component_js__WEBPACK_IMPORTED_MODULE_11__.Bs4ToggleButtonComponent; }
/* harmony export */ });
/* harmony import */ var _bs4_dropdown_bs4_dropdown_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4-dropdown/bs4-dropdown.component.js */ "../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts");
/* harmony import */ var _bs4_accordion_bs4_accordion_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bs4-accordion/bs4-accordion.component.js */ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts");
/* harmony import */ var _bs4_button_bs4_button_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-button/bs4-button.component.js */ "../../packages/bs4/src/components/bs4-button/bs4-button.component.ts");
/* harmony import */ var _bs4_carousel_bs4_carousel_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-carousel/bs4-carousel.component.js */ "../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts");
/* harmony import */ var _bs4_colorpicker_bs4_colorpicker_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-colorpicker/bs4-colorpicker.component.js */ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts");
/* harmony import */ var _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4-contents/bs4-contents.component.js */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts");
/* harmony import */ var _bs4_icon_bs4_icon_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bs4-icon/bs4-icon.component.js */ "../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts");
/* harmony import */ var _bs4_scrollspy_bs4_scrollspy_component_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-scrollspy/bs4-scrollspy.component.js */ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts");
/* harmony import */ var _bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-share/bs4-share.component.js */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts");
/* harmony import */ var _bs4_sidebar_bs4_sidebar_component_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bs4-sidebar/bs4-sidebar.component.js */ "../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts");
/* harmony import */ var _bs4_slideshow_bs4_slideshow_component_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bs4-slideshow/bs4-slideshow.component.js */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts");
/* harmony import */ var _bs4_toggle_button_bs4_toggle_button_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./bs4-toggle-button/bs4-toggle-button.component.js */ "../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts");
/* harmony import */ var _bs4_navbar_bs4_navbar_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bs4-navbar/bs4-navbar.component.js */ "../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts");
/* harmony import */ var _bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./bs4-tabs/bs4-tabs.component.js */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts");
/* harmony import */ var _bs4_form_bs4_form_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./bs4-form/bs4-form.component.js */ "../../packages/bs4/src/components/bs4-form/bs4-form.component.ts");
/* harmony import */ var _bs4_notification_container_bs4_notification_container_component_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./bs4-notification-container/bs4-notification-container.component.js */ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts");
/* harmony import */ var _bs4_toast_item_bs4_toast_item_component_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./bs4-toast-item/bs4-toast-item.component.js */ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts");
/* harmony import */ var _bs4_modal_item_bs4_modal_item_component_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./bs4-modal-item/bs4-modal-item.component.js */ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts");
/* harmony import */ var _bs4_tagged_image_bs4_tagged_image_component_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./bs4-tagged-image/bs4-tagged-image.component.js */ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts");




















/***/ }),

/***/ "../../packages/bs4/src/constants/index.ts":
/*!*************************************************!*\
  !*** ../../packages/bs4/src/constants/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARIA_ATTRIBUTE_PATTERN": function() { return /* binding */ ARIA_ATTRIBUTE_PATTERN; },
/* harmony export */   "DATA_URL_PATTERN": function() { return /* binding */ DATA_URL_PATTERN; },
/* harmony export */   "DEFAULT_ALLOWLIST": function() { return /* binding */ DEFAULT_ALLOWLIST; },
/* harmony export */   "MILLISECONDS_MULTIPLIER": function() { return /* binding */ MILLISECONDS_MULTIPLIER; },
/* harmony export */   "NODE_TEXT": function() { return /* binding */ NODE_TEXT; },
/* harmony export */   "SAFE_URL_PATTERN": function() { return /* binding */ SAFE_URL_PATTERN; },
/* harmony export */   "TOGGLE_ATTRIBUTE": function() { return /* binding */ TOGGLE_ATTRIBUTE; },
/* harmony export */   "TOGGLE_BUTTON": function() { return /* binding */ TOGGLE_BUTTON; },
/* harmony export */   "TOGGLE_CLASS": function() { return /* binding */ TOGGLE_CLASS; },
/* harmony export */   "TRANSITION_END": function() { return /* binding */ TRANSITION_END; },
/* harmony export */   "URI_ATTRS": function() { return /* binding */ URI_ATTRS; }
/* harmony export */ });
const NODE_TEXT = 3; // EventDispatcher events

const TOGGLE_BUTTON = {
  nsPrefix: "bs4-toggle-button:",
  eventNames: {
    toggle: "toggle",
    toggled: "toggled",
    init: "init",
    state: "state"
  }
};
const TOGGLE_ATTRIBUTE = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
const TOGGLE_CLASS = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
const URI_ATTRS = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
const DEFAULT_ALLOWLIST = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = "transitionend";

/***/ }),

/***/ "../../packages/bs4/src/formatters/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/formatters/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/helper/dom/data.ts":
/*!*************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/data.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getData": function() { return /* binding */ getData; },
/* harmony export */   "removeData": function() { return /* binding */ removeData; },
/* harmony export */   "setData": function() { return /* binding */ setData; }
/* harmony export */ });
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const mapData = (() => {
  const storeData = {};
  let id = 1;
  return {
    set(element, key, data) {
      if (typeof element.dataset.key === "undefined") {
        element.dataset.key = key;
        element.dataset.id = id.toString();
        id++;
      }

      if (element.dataset.id) {
        storeData[element.dataset.id] = data;
      }
    },

    get(element, key) {
      if (!element || typeof element.dataset.key === "undefined") {
        return null;
      }

      const keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        return storeData[keyProperties.id];
      }

      return null;
    },

    delete(element, key) {
      if (typeof element.dataset.key === "undefined") {
        return;
      }

      const keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        delete storeData[keyProperties.id];
        delete element.dataset.key;
      }
    }

  };
})();

const setData = (instance, key, data) => {
  mapData.set(instance, key, data);
};
const getData = (instance, key) => {
  return mapData.get(instance, key);
};
const removeData = (instance, key) => {
  mapData.delete(instance, key);
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/event-handler.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/event-handler.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "off": function() { return /* binding */ off; },
/* harmony export */   "on": function() { return /* binding */ on; },
/* harmony export */   "one": function() { return /* binding */ one; },
/* harmony export */   "trigger": function() { return /* binding */ trigger; }
/* harmony export */ });
/**
 * see see https://github.com/twbs/bootstrap/blob/master/js/src/dom/event-handler.js
 */
const on = (element, eventName, handler) => {
  return element.addEventListener(eventName, handler, {});
};
const one = (element, eventName, handler) => {
  return element.addEventListener(eventName, handler, {
    once: true
  });
};
const off = (element, originalTypeEvent, handler) => {
  return element.removeEventListener(originalTypeEvent, handler);
};
const trigger = function (element, eventName) {
  let extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const event = new CustomEvent(eventName, {
    detail: extraParameters,
    bubbles: true,
    cancelable: true
  });
  element.dispatchEvent(event);
  return event;
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "children": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.children; },
/* harmony export */   "closest": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.closest; },
/* harmony export */   "find": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.find; },
/* harmony export */   "findOne": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.findOne; },
/* harmony export */   "getData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.getData; },
/* harmony export */   "getDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.getDataAttributes; },
/* harmony export */   "matches": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.matches; },
/* harmony export */   "off": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.off; },
/* harmony export */   "offset": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.offset; },
/* harmony export */   "on": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.on; },
/* harmony export */   "one": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.one; },
/* harmony export */   "parents": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.parents; },
/* harmony export */   "position": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.position; },
/* harmony export */   "prev": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.prev; },
/* harmony export */   "removeData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.removeData; },
/* harmony export */   "removeDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.removeDataAttribute; },
/* harmony export */   "setData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.setData; },
/* harmony export */   "setDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.toggleClass; },
/* harmony export */   "trigger": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.trigger; }
/* harmony export */ });
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _event_handler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _manipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manipulator.js */ "../../packages/bs4/src/helper/dom/manipulator.ts");
/* harmony import */ var _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");





/***/ }),

/***/ "../../packages/bs4/src/helper/dom/manipulator.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/manipulator.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDataAttribute": function() { return /* binding */ getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* binding */ getDataAttributes; },
/* harmony export */   "offset": function() { return /* binding */ offset; },
/* harmony export */   "position": function() { return /* binding */ position; },
/* harmony export */   "removeDataAttribute": function() { return /* binding */ removeDataAttribute; },
/* harmony export */   "setDataAttribute": function() { return /* binding */ setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* binding */ toggleClass; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dom/manipulator.js
 * --------------------------------------------------------------------------
 */
function normalizeData(val) {
  if (val === "true") {
    return true;
  }

  if (val === "false") {
    return false;
  }

  if (val === Number(val).toString()) {
    return Number(val);
  }

  if (val === "" || val === "null") {
    return null;
  }

  return val;
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, chr => "-".concat(chr.toLowerCase()));
}

const setDataAttribute = (element, key, value) => {
  element.setAttribute("data-".concat(normalizeDataKey(key)), value);
};
const removeDataAttribute = (element, key) => {
  element.removeAttribute("data-".concat(normalizeDataKey(key)));
};
const getDataAttributes = element => {
  if (!element) {
    return {};
  }

  const attributes = _objectSpread({}, element.dataset);

  Object.keys(attributes).forEach(key => {
    attributes[key] = normalizeData(attributes[key]);
  });
  return attributes;
};
const getDataAttribute = (element, key) => {
  return normalizeData(element.getAttribute("data-".concat(normalizeDataKey(key))));
};
const offset = element => {
  const rect = element.getBoundingClientRect();
  return {
    top: rect.top + document.body.scrollTop,
    left: rect.left + document.body.scrollLeft
  };
};
const position = element => {
  return {
    top: element.offsetTop,
    left: element.offsetLeft
  };
};
const toggleClass = (element, className) => {
  if (!element) {
    return;
  }

  if (element.classList.contains(className)) {
    element.classList.remove(className);
  } else {
    element.classList.add(className);
  }
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/selector-engine.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/selector-engine.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "children": function() { return /* binding */ children; },
/* harmony export */   "closest": function() { return /* binding */ closest; },
/* harmony export */   "find": function() { return /* binding */ find; },
/* harmony export */   "findOne": function() { return /* binding */ findOne; },
/* harmony export */   "matches": function() { return /* binding */ matches; },
/* harmony export */   "parents": function() { return /* binding */ parents; },
/* harmony export */   "prev": function() { return /* binding */ prev; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "../../packages/bs4/src/helper/utils.ts");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * see https://github.com/twbs/bootstrap/blob/master/js/src/dom/selector-engine.js
 * --------------------------------------------------------------------------
 */


const matches = (element, selector) => {
  return Element.prototype.matches.call(element, selector);
};
const find = function (selector) {
  let element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelectorAll.call(element, selector);
};
const findOne = function (selector) {
  let element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelector.call(element, selector);
};
const children = (element, selector) => {
  const children = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.makeArray)(element.children);
  return children.filter(child => matches(child, selector));
};
const parents = (element, selector) => {
  const parents = [];
  let ancestor = element.parentNode;

  while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.NODE_TEXT) {
    if (matches(ancestor, selector)) {
      parents.push(ancestor);
    }

    ancestor = ancestor.parentNode;
  }

  return parents;
};
const closest = (element, selector) => {
  return Element.prototype.closest.call(element, selector);
};
const prev = (element, selector) => {
  const siblings = [];
  let previous = element.previousSibling;

  while (previous && previous.nodeType === Node.ELEMENT_NODE && previous.nodeType !== _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.NODE_TEXT) {
    if (matches(previous, selector)) {
      siblings.push(previous);
    }

    previous = previous.previousSibling;
  }

  return siblings;
};

/***/ }),

/***/ "../../packages/bs4/src/helper/index.ts":
/*!**********************************************!*\
  !*** ../../packages/bs4/src/helper/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allowedAttribute": function() { return /* reexport safe */ _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.allowedAttribute; },
/* harmony export */   "children": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.children; },
/* harmony export */   "closest": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.closest; },
/* harmony export */   "emulateTransitionEnd": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd; },
/* harmony export */   "find": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.find; },
/* harmony export */   "findOne": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.findOne; },
/* harmony export */   "findShadowRoot": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.findShadowRoot; },
/* harmony export */   "getData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getData; },
/* harmony export */   "getDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getDataAttributes; },
/* harmony export */   "getElementFromSelector": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector; },
/* harmony export */   "getSelector": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getSelector; },
/* harmony export */   "getSelectorFromElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getSelectorFromElement; },
/* harmony export */   "getTransitionDurationFromElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement; },
/* harmony export */   "getjQuery": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getjQuery; },
/* harmony export */   "isElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement; },
/* harmony export */   "isVisible": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.isVisible; },
/* harmony export */   "makeArray": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray; },
/* harmony export */   "matches": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.matches; },
/* harmony export */   "noop": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.noop; },
/* harmony export */   "off": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.off; },
/* harmony export */   "offset": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.offset; },
/* harmony export */   "on": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.on; },
/* harmony export */   "one": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.one; },
/* harmony export */   "parents": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.parents; },
/* harmony export */   "position": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.position; },
/* harmony export */   "prev": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.prev; },
/* harmony export */   "reflow": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow; },
/* harmony export */   "removeData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.removeData; },
/* harmony export */   "removeDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.removeDataAttribute; },
/* harmony export */   "sanitizeHtml": function() { return /* reexport safe */ _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.sanitizeHtml; },
/* harmony export */   "setData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.setData; },
/* harmony export */   "setDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.toggleClass; },
/* harmony export */   "trigger": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.trigger; },
/* harmony export */   "triggerTransitionEnd": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.triggerTransitionEnd; },
/* harmony export */   "typeCheckConfig": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig; }
/* harmony export */ });
/* harmony import */ var _dom_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom/index.js */ "../../packages/bs4/src/helper/dom/index.ts");
/* harmony import */ var _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sanitizer.js */ "../../packages/bs4/src/helper/sanitizer.ts");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../../packages/bs4/src/helper/utils.ts");




/***/ }),

/***/ "../../packages/bs4/src/helper/sanitizer.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/helper/sanitizer.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allowedAttribute": function() { return /* binding */ allowedAttribute; },
/* harmony export */   "sanitizeHtml": function() { return /* binding */ sanitizeHtml; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/util/sanitizer.js
 * --------------------------------------------------------------------------
 */
 // TODO check type

const allowedAttribute = (attr, allowedAttributeList) => {
  const attrName = attr.nodeName.toLowerCase();

  if (allowedAttributeList.indexOf(attrName) !== -1) {
    if (_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.URI_ATTRS.indexOf(attrName) !== -1) {
      var _attr$nodeValue, _attr$nodeValue2;

      return Boolean(((_attr$nodeValue = attr.nodeValue) === null || _attr$nodeValue === void 0 ? void 0 : _attr$nodeValue.match(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.SAFE_URL_PATTERN)) || ((_attr$nodeValue2 = attr.nodeValue) === null || _attr$nodeValue2 === void 0 ? void 0 : _attr$nodeValue2.match(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.DATA_URL_PATTERN)));
    }

    return true;
  }

  const regExp = allowedAttributeList.filter(attrRegex => attrRegex instanceof RegExp); // Check if a regular expression validates the attribute.

  for (let i = 0, len = regExp.length; i < len; i++) {
    if (attrName.match(regExp[i])) {
      return true;
    }
  }

  return false;
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFn && typeof sanitizeFn === "function") {
    return sanitizeFn(unsafeHtml);
  }

  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
  const allowlistKeys = Object.keys(allowList); // const elements = [].concat(...createdDocument.body.querySelectorAll("*"));

  const elements = Array.from(createdDocument.body.querySelectorAll("*"));

  for (let i = 0, len = elements.length; i < len; i++) {
    const el = elements[i];
    const elName = el.nodeName.toLowerCase();

    if (allowlistKeys.indexOf(elName) === -1) {
      var _el$parentNode;

      el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.removeChild(el);
      continue;
    } // const attributeList = [].concat(...el.attributes);


    const attributeList = Array.from(el.attributes); // const allowedAttributes = [].concat(
    //   allowList["*"] || [],
    //   allowList[elName] || []
    // );

    const allowedAttributes = allowList["*"] || allowList[elName] || [];
    attributeList.forEach(attr => {
      if (!allowedAttribute(attr, allowedAttributes)) {
        el.removeAttribute(attr.nodeName);
      }
    });
  }

  return createdDocument.body.innerHTML;
}

/***/ }),

/***/ "../../packages/bs4/src/helper/utils.ts":
/*!**********************************************!*\
  !*** ../../packages/bs4/src/helper/utils.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emulateTransitionEnd": function() { return /* binding */ emulateTransitionEnd; },
/* harmony export */   "findShadowRoot": function() { return /* binding */ findShadowRoot; },
/* harmony export */   "getElementFromSelector": function() { return /* binding */ getElementFromSelector; },
/* harmony export */   "getSelector": function() { return /* binding */ getSelector; },
/* harmony export */   "getSelectorFromElement": function() { return /* binding */ getSelectorFromElement; },
/* harmony export */   "getTransitionDurationFromElement": function() { return /* binding */ getTransitionDurationFromElement; },
/* harmony export */   "getjQuery": function() { return /* binding */ getjQuery; },
/* harmony export */   "isElement": function() { return /* binding */ isElement; },
/* harmony export */   "isVisible": function() { return /* binding */ isVisible; },
/* harmony export */   "makeArray": function() { return /* binding */ makeArray; },
/* harmony export */   "noop": function() { return /* binding */ noop; },
/* harmony export */   "reflow": function() { return /* binding */ reflow; },
/* harmony export */   "triggerTransitionEnd": function() { return /* binding */ triggerTransitionEnd; },
/* harmony export */   "typeCheckConfig": function() { return /* binding */ typeCheckConfig; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
// @see https://github.com/twbs/bootstrap/blob/master/js/src/util/index.js


const getSelector = element => {
  let selector = element.getAttribute("data-target");

  if (!selector || selector === "#") {
    const hrefAttr = element.getAttribute("href");
    selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : null;
  }

  return selector;
};
const getSelectorFromElement = element => {
  const selector = getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};
const getElementFromSelector = element => {
  const selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};
const getTransitionDurationFromElement = element => {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = parseFloat(transitionDuration);
  const floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.MILLISECONDS_MULTIPLIER;
};
const triggerTransitionEnd = element => {
  const evt = document.createEvent("HTMLEvents");
  evt.initEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, true, true);
  element.dispatchEvent(evt);
};
const isElement = obj => {
  return (obj[0] || obj).nodeType;
};
const emulateTransitionEnd = (element, duration) => {
  let called = false;
  const durationPadding = 5;
  const emulatedDuration = duration + durationPadding;

  function listener() {
    called = true;
    element.removeEventListener(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, listener);
  }

  element.addEventListener(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, listener);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(element);
    }
  }, emulatedDuration);
};
/**
 *
 * @param componentName
 * @param config
 * @param configTypes
 */

const typeCheckConfig = (componentName, config, configTypes) => {
  for (const property in configTypes) {
    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = value && isElement(value) ? "element" : (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.toType)(value);

      if (!valueType || !new RegExp(expectedTypes).test(valueType)) {
        throw new Error("".concat(componentName.toUpperCase(), ": ") + "Option \"".concat(property, "\" provided type \"").concat(valueType, "\" ") + "but expected type \"".concat(expectedTypes, "\"."));
      }
    }
  }
};
const makeArray = nodeList => {
  if (!nodeList) {
    return [];
  }

  return [].slice.call(nodeList);
};
const isVisible = element => {
  if (!element) {
    return false;
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    const elementStyle = getComputedStyle(element);
    const parentNodeStyle = getComputedStyle(element.parentNode);
    return elementStyle.display !== "none" && parentNodeStyle.display !== "none" && elementStyle.visibility !== "hidden";
  }

  return false;
};
const findShadowRoot = element => {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === "function") {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return findShadowRoot(element.parentNode);
};
const noop = () => {
  return function () {
    /** nothing */
  };
};
const reflow = element => {
  return element.offsetHeight;
};
const getjQuery = () => {
  const {
    jQuery
  } = window;

  if (jQuery && !document.body.hasAttribute("data-no-jquery")) {
    return jQuery;
  }

  return null;
};

/***/ }),

/***/ "../../packages/bs4/src/index.ts":
/*!***************************************!*\
  !*** ../../packages/bs4/src/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARIA_ATTRIBUTE_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.ARIA_ATTRIBUTE_PATTERN; },
/* harmony export */   "Bs4AccordionComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4AccordionComponent; },
/* harmony export */   "Bs4ButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ButtonComponent; },
/* harmony export */   "Bs4CarouselComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4CarouselComponent; },
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ColorPickerComponent; },
/* harmony export */   "Bs4ContentsComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ContentsComponent; },
/* harmony export */   "Bs4DropdownComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4DropdownComponent; },
/* harmony export */   "Bs4FormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4FormComponent; },
/* harmony export */   "Bs4IconComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4IconComponent; },
/* harmony export */   "Bs4ModalItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ModalItemComponent; },
/* harmony export */   "Bs4NavbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4NavbarComponent; },
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4NotificationContainerComponent; },
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ScrollspyComponent; },
/* harmony export */   "Bs4Service": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.Bs4Service; },
/* harmony export */   "Bs4ShareComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent; },
/* harmony export */   "Bs4SidebarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4SidebarComponent; },
/* harmony export */   "Bs4SlideshowComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4SlideshowComponent; },
/* harmony export */   "Bs4TabsComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4TabsComponent; },
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4TaggedImageComponent; },
/* harmony export */   "Bs4ToastItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ToastItemComponent; },
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ToggleButtonComponent; },
/* harmony export */   "CollapseBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.CollapseBinder; },
/* harmony export */   "CollapseOnUrlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.CollapseOnUrlBinder; },
/* harmony export */   "CollapseService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.CollapseService; },
/* harmony export */   "DATA_URL_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.DATA_URL_PATTERN; },
/* harmony export */   "DEFAULT_ALLOWLIST": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_ALLOWLIST; },
/* harmony export */   "DropdownBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.DropdownBinder; },
/* harmony export */   "DropdownService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.DropdownService; },
/* harmony export */   "ExpanOnUrlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ExpanOnUrlBinder; },
/* harmony export */   "MILLISECONDS_MULTIPLIER": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.MILLISECONDS_MULTIPLIER; },
/* harmony export */   "Modal": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Modal; },
/* harmony export */   "ModalService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalService; },
/* harmony export */   "NODE_TEXT": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.NODE_TEXT; },
/* harmony export */   "Notification": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Notification; },
/* harmony export */   "PopoverBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.PopoverBinder; },
/* harmony export */   "PopoverService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PopoverService; },
/* harmony export */   "SAFE_URL_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.SAFE_URL_PATTERN; },
/* harmony export */   "ScrollToOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollToOnEventBinder; },
/* harmony export */   "ScrollspyClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollspyClassBinder; },
/* harmony export */   "ShowToastOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShowToastOnEventBinder; },
/* harmony export */   "TOGGLE_ATTRIBUTE": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_ATTRIBUTE; },
/* harmony export */   "TOGGLE_BUTTON": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON; },
/* harmony export */   "TOGGLE_CLASS": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_CLASS; },
/* harmony export */   "TRANSITION_END": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TRANSITION_END; },
/* harmony export */   "Toast": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Toast; },
/* harmony export */   "ToastService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ToastService; },
/* harmony export */   "ToggleAttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleAttributeBinder; },
/* harmony export */   "ToggleClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleClassBinder; },
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleCollapseOnEventBinder; },
/* harmony export */   "TooltipBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.TooltipBinder; },
/* harmony export */   "TooltipService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.TooltipService; },
/* harmony export */   "URI_ATTRS": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.URI_ATTRS; },
/* harmony export */   "bs4Module": function() { return /* reexport safe */ _bs4_module_js__WEBPACK_IMPORTED_MODULE_5__.bs4Module; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/bs4/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/bs4/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/index.js */ "../../packages/bs4/src/components/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/bs4/src/interfaces/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _bs4_module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4.module.js */ "../../packages/bs4/src/bs4.module.ts");


 // export * as formatters from './formatters/bs4.formatters';

 // export * from './interfaces/interfaces';




/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-class-name.ts":
/*!****************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-class-name.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-direction.ts":
/*!***************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-direction.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-option.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-option.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/collapse-on-event-binder.ts":
/*!*********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/collapse-on-event-binder.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/color-picker-options.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/color-picker-options.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Modal": function() { return /* reexport safe */ _modal_js__WEBPACK_IMPORTED_MODULE_5__.Modal; },
/* harmony export */   "Notification": function() { return /* reexport safe */ _notification_js__WEBPACK_IMPORTED_MODULE_7__.Notification; },
/* harmony export */   "Toast": function() { return /* reexport safe */ _toast_js__WEBPACK_IMPORTED_MODULE_14__.Toast; }
/* harmony export */ });
/* harmony import */ var _carousel_class_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carousel-class-name.js */ "../../packages/bs4/src/interfaces/carousel-class-name.ts");
/* harmony import */ var _carousel_direction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel-direction.js */ "../../packages/bs4/src/interfaces/carousel-direction.ts");
/* harmony import */ var _carousel_option_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./carousel-option.js */ "../../packages/bs4/src/interfaces/carousel-option.ts");
/* harmony import */ var _collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collapse-on-event-binder.js */ "../../packages/bs4/src/interfaces/collapse-on-event-binder.ts");
/* harmony import */ var _color_picker_options_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./color-picker-options.js */ "../../packages/bs4/src/interfaces/color-picker-options.ts");
/* harmony import */ var _modal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modal.js */ "../../packages/bs4/src/interfaces/modal.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./module-options.js */ "../../packages/bs4/src/interfaces/module-options.ts");
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");
/* harmony import */ var _placement_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./placement.js */ "../../packages/bs4/src/interfaces/placement.ts");
/* harmony import */ var _popover_options_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./popover-options.js */ "../../packages/bs4/src/interfaces/popover-options.ts");
/* harmony import */ var _share_item_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./share-item.js */ "../../packages/bs4/src/interfaces/share-item.ts");
/* harmony import */ var _sidebar_component_scope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sidebar-component-scope.js */ "../../packages/bs4/src/interfaces/sidebar-component-scope.ts");
/* harmony import */ var _sidebar_component_state_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sidebar-component-state.js */ "../../packages/bs4/src/interfaces/sidebar-component-state.ts");
/* harmony import */ var _tagged_image_tag_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tagged-image-tag.js */ "../../packages/bs4/src/interfaces/tagged-image-tag.ts");
/* harmony import */ var _toast_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./toast.js */ "../../packages/bs4/src/interfaces/toast.ts");
/* harmony import */ var _toggle_attribute_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./toggle-attribute.js */ "../../packages/bs4/src/interfaces/toggle-attribute.ts");
/* harmony import */ var _toggle_class_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./toggle-class.js */ "../../packages/bs4/src/interfaces/toggle-class.ts");
/* harmony import */ var _tooltip_options_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tooltip-options.js */ "../../packages/bs4/src/interfaces/tooltip-options.ts");



















/***/ }),

/***/ "../../packages/bs4/src/interfaces/modal.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/modal.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Modal": function() { return /* binding */ Modal; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");


class Modal extends _notification_js__WEBPACK_IMPORTED_MODULE_1__.Notification {
  constructor(_ref) {
    let {
      title,
      message,
      iconUrl,
      focus,
      keyboard,
      backdrop,
      show,
      buttons,
      modalService,
      contextualClass,
      channel,
      $event,
      $context
    } = _ref;
    super("modal", title);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "buttons", []);

    this.message = message;
    this.iconUrl = iconUrl;
    this.focus = focus;
    this.keyboard = keyboard;
    this.backdrop = backdrop;
    this.show = show;
    this.buttons = buttons || [];
    this.modalService = modalService;
    this.contextualClass = contextualClass;
    this.channel = channel;
    this.$event = $event;
    this.$context = $context;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/module-options.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/module-options.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/notification.ts":
/*!*********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/notification.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Notification": function() { return /* binding */ Notification; }
/* harmony export */ });
class Notification {
  constructor(type, title) {
    this.type = type;
    this.title = title;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/placement.ts":
/*!******************************************************!*\
  !*** ../../packages/bs4/src/interfaces/placement.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/popover-options.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/popover-options.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/share-item.ts":
/*!*******************************************************!*\
  !*** ../../packages/bs4/src/interfaces/share-item.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/sidebar-component-scope.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/sidebar-component-scope.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/sidebar-component-state.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/sidebar-component-state.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/tagged-image-tag.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/tagged-image-tag.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/toast.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toast.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Toast": function() { return /* binding */ Toast; }
/* harmony export */ });
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");

class Toast extends _notification_js__WEBPACK_IMPORTED_MODULE_0__.Notification {
  constructor(_ref) {
    let {
      title,
      message,
      iconUrl,
      delay,
      autoHide,
      animation,
      toastService,
      contextualClass,
      channel,
      $event,
      $context
    } = _ref;
    super("toast", title);
    this.message = message;
    this.iconUrl = iconUrl;
    this.delay = delay;
    this.autoHide = autoHide;
    this.animation = animation;
    this.toastService = toastService;
    this.contextualClass = contextualClass;
    this.channel = channel;
    this.$event = $event;
    this.$context = $context;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/toggle-attribute.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toggle-attribute.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/toggle-class.ts":
/*!*********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toggle-class.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/interfaces/tooltip-options.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/tooltip-options.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/services/bs4.service.ts":
/*!******************************************************!*\
  !*** ../../packages/bs4/src/services/bs4.service.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4Service": function() { return /* binding */ Bs4Service; }
/* harmony export */ });
class Bs4Service {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of Bs4Service not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of Bs4Service already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/carousel.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/carousel.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "carousel";
const DATA_KEY = "bs.carousel";
const EVENT_KEY = ".".concat(DATA_KEY);
const DATA_API_KEY = ".data-api";
const ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

const ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

const SWIPE_THRESHOLD = 40;
const Default = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: "hover",
  wrap: true,
  touch: true
};
const DefaultType = {
  interval: "(number|boolean)",
  keyboard: "boolean",
  slide: "(boolean|string)",
  pause: "(string|boolean)",
  wrap: "boolean",
  touch: "boolean"
};
const Direction = {
  NEXT: "next",
  PREV: "prev",
  LEFT: "left",
  RIGHT: "right"
};
const Event = {
  SLIDE: "slide".concat(EVENT_KEY),
  SLID: "slid".concat(EVENT_KEY),
  KEYDOWN: "keydown".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY),
  TOUCHSTART: "touchstart".concat(EVENT_KEY),
  TOUCHMOVE: "touchmove".concat(EVENT_KEY),
  TOUCHEND: "touchend".concat(EVENT_KEY),
  POINTERDOWN: "pointerdown".concat(EVENT_KEY),
  POINTERUP: "pointerup".concat(EVENT_KEY),
  DRAG_START: "dragstart".concat(EVENT_KEY),
  LOAD_DATA_API: "load".concat(EVENT_KEY).concat(DATA_API_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
const ClassName = {
  CAROUSEL: "carousel",
  ACTIVE: "active",
  SLIDE: "slide",
  RIGHT: "carousel-item-right",
  LEFT: "carousel-item-left",
  NEXT: "carousel-item-next",
  PREV: "carousel-item-prev",
  ITEM: "carousel-item",
  POINTER_EVENT: "pointer-event"
};
const Selector = {
  ACTIVE: ".active",
  ACTIVE_ITEM: ".active.carousel-item",
  ITEM: ".carousel-item",
  ITEM_IMG: ".carousel-item img",
  NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
  INDICATORS: ".carousel-indicators"
};
const PointerType = {
  TOUCH: "touch",
  PEN: "pen"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class CarouselService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "items", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "interval", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "activeElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isPaused", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isSliding", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchTimeout", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchStartX", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchDeltaX", 0);

    this.config = this.getConfig(config);
    this.element = element;
    this.indicatorsElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.INDICATORS, this.element) || null;
    this.touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    this.pointerEvent = !!(window.PointerEvent || window.MSPointerEvent);
    this.addEventListeners();
  } // Getters


  static get Default() {
    return Default;
  } // Public


  next() {
    if (!this.isSliding) {
      this.slide(Direction.NEXT);
    }
  }

  nextWhenVisible() {
    // Don't call next when the page isn't visible
    // or the carousel or its parent isn't visible
    if (!document.hidden && (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isVisible)(this.element)) {
      this.next();
    }
  }

  prev() {
    if (!this.isSliding) {
      this.slide(Direction.PREV);
    }
  }

  pause(event) {
    if (!event) {
      this.isPaused = true;
    }

    if ((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.NEXT_PREV, this.element)) {
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.triggerTransitionEnd)(this.element);
      this.cycle(true);
    }

    clearInterval(this.interval || undefined);
    this.interval = null;
  }

  cycle(event) {
    if (!event) {
      this.isPaused = false;
    }

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }

    if (this.config && this.config.interval && !this.isPaused) {
      this.interval = window.setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this.config.interval);
    }
  }

  to(index) {
    if (this.items === null) {
      throw new Error("No items found!");
    }

    this.activeElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element) || null;

    if (this.activeElement === null) {
      throw new Error("Active element not found!");
    }

    const activeIndex = this.getItemIndex(this.activeElement);

    if (index > this.items.length - 1 || index < 0) {
      return;
    }

    if (this.isSliding) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this.element, Event.SLID, () => this.to(index));
      return;
    }

    if (activeIndex === index) {
      this.pause();
      this.cycle();
      return;
    }

    const direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
    this.slide(direction, this.items[index]);
  }

  dispose() {
    this.removeEventListeners();
    clearTimeout(this.touchTimeout || undefined);
    clearInterval(this.interval || undefined);
  } // Private


  getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  handleSwipe() {
    const absDeltax = Math.abs(this.touchDeltaX);

    if (absDeltax <= SWIPE_THRESHOLD) {
      return;
    }

    const direction = absDeltax / this.touchDeltaX;
    this.touchDeltaX = 0; // swipe left

    if (direction > 0) {
      this.prev();
    } // swipe right


    if (direction < 0) {
      this.next();
    }
  }

  addEventListeners() {
    this.keydown = this.keydown.bind(this);
    this.pause = this.pause.bind(this);
    this.cycle = this.cycle.bind(this);

    if (this.config.keyboard) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.KEYDOWN, this.keydown);
    }

    if (this.config.pause === "hover") {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.MOUSEENTER, this.pause);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.MOUSELEAVE, this.cycle);
    }

    if (this.config.touch && this.touchSupported) {
      this.addTouchEventListeners();
    }
  }

  addTouchEventListeners() {
    this.onTouchStart = this.onTouchStart.bind(this);
    this.onTouchMove = this.onTouchMove.bind(this);
    this.onTouchEnd = this.onTouchEnd.bind(this);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM_IMG, this.element)).forEach(itemImg => {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(itemImg, Event.DRAG_START, this.preventDrag);
    });

    if (this.pointerEvent) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.POINTERDOWN, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.POINTERUP, this.onTouchEnd);
      this.element.classList.add(ClassName.POINTER_EVENT);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHSTART, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHMOVE, this.onTouchMove);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHEND, this.onTouchEnd);
    }
  }

  removeEventListeners() {
    if (this.config.keyboard) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.KEYDOWN, this.keydown);
    }

    if (this.config.pause === "hover") {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.MOUSEENTER, this.pause);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.MOUSELEAVE, this.cycle);
    }

    this.removeTouchEventListeners();
  }

  removeTouchEventListeners() {
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM_IMG, this.element)).forEach(itemImg => {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(itemImg, Event.DRAG_START, this.preventDrag);
    });

    if (this.pointerEvent) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.POINTERDOWN, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.POINTERUP, this.onTouchEnd);
      this.element.classList.add(ClassName.POINTER_EVENT);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHSTART, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHMOVE, this.onTouchMove);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHEND, this.onTouchEnd);
    }
  }

  onTouchStart(e) {
    const event = e;

    if (this.pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
      this.touchStartX = event.clientX;
    } else if (!this.pointerEvent) {
      this.touchStartX = event.touches[0].clientX;
    }
  }

  onTouchMove(e) {
    const event = e; // ensure swiping with one touch and not pinching

    if (event.touches && event.touches.length > 1) {
      this.touchDeltaX = 0;
    } else {
      this.touchDeltaX = event.touches[0].clientX - this.touchStartX;
    }
  }

  onTouchEnd(e) {
    const event = e;

    if (this.pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
      this.touchDeltaX = event.clientX - this.touchStartX;
    }

    this.handleSwipe();

    if (this.config.pause === "hover") {
      // If it's a touch-enabled device, mouseenter/leave are fired as
      // part of the mouse compatibility events on first tap - the carousel
      // would stop cycling until user tapped out of it;
      // here, we listen for touchend, explicitly pause the carousel
      // (as if it's the second time we tap on it, mouseenter compat event
      // is NOT fired) and after a timeout (to allow for mouse compatibility
      // events to fire) we explicitly restart cycling
      this.pause();

      if (this.touchTimeout) {
        clearTimeout(this.touchTimeout);
      }

      this.touchTimeout = Number(setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + (this.config.interval || 0)));
    }
  }

  preventDrag(event) {
    event.preventDefault();
  }

  keydown(e) {
    var _event$target;

    const event = e;

    if ((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.tagName && /input|textarea/i.test(event.target.tagName)) {
      return;
    }

    switch (event.which) {
      case ARROW_LEFT_KEYCODE:
        event.preventDefault();
        this.prev();
        break;

      case ARROW_RIGHT_KEYCODE:
        event.preventDefault();
        this.next();
        break;

      default:
    }
  }

  getItemIndex(element) {
    if (!element) {
      return -1;
    }

    this.items = element && element.parentNode ? (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM, element.parentNode)) : [];
    return this.items.indexOf(element);
  }

  getItemByDirection(direction, activeElement) {
    if (this.items === null) {
      throw new Error("No items found!");
    }

    const isNextDirection = direction === Direction.NEXT;
    const isPrevDirection = direction === Direction.PREV;
    const activeIndex = this.getItemIndex(activeElement);
    const lastItemIndex = this.items.length - 1;
    const isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

    if (isGoingToWrap && !this.config.wrap) {
      return activeElement;
    }

    const delta = direction === Direction.PREV ? -1 : 1;
    const itemIndex = (activeIndex + delta) % this.items.length;
    return itemIndex === -1 ? this.items[this.items.length - 1] : this.items[itemIndex];
  }

  triggerSlideEvent(relatedTarget, eventDirectionName) {
    const targetIndex = this.getItemIndex(relatedTarget);
    const fromIndex = this.getItemIndex((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element) || null);
    return (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLIDE, {
      relatedTarget,
      direction: eventDirectionName,
      from: fromIndex,
      to: targetIndex
    });
  }

  setActiveIndicatorElement(element) {
    if (this.indicatorsElement) {
      const indicators = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ACTIVE, this.indicatorsElement);

      for (let i = 0; i < indicators.length; i++) {
        indicators[i].classList.remove(ClassName.ACTIVE);
      }

      const nextIndicator = this.indicatorsElement.children[this.getItemIndex(element)];

      if (nextIndicator) {
        nextIndicator.classList.add(ClassName.ACTIVE);
      }
    }
  }

  slide(direction, element) {
    const activeElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element);
    const activeElementIndex = this.getItemIndex(activeElement);
    const nextElement = element || activeElement && this.getItemByDirection(direction, activeElement);

    if (!nextElement) {
      throw new Error("Next element not found!");
    }

    const nextElementIndex = this.getItemIndex(nextElement);
    const isCycling = Boolean(this.interval);
    let directionalClassName;
    let orderClassName;
    let eventDirectionName;

    if (direction === Direction.NEXT) {
      directionalClassName = ClassName.LEFT;
      orderClassName = ClassName.NEXT;
      eventDirectionName = Direction.LEFT;
    } else {
      directionalClassName = ClassName.RIGHT;
      orderClassName = ClassName.PREV;
      eventDirectionName = Direction.RIGHT;
    }

    if (nextElement && nextElement.classList.contains(ClassName.ACTIVE)) {
      this.isSliding = false;
      return;
    }

    const slideEvent = this.triggerSlideEvent(nextElement, eventDirectionName);

    if (slideEvent.defaultPrevented) {
      return;
    }

    if (!activeElement || !nextElement) {
      // Some weirdness is happening, so we bail
      return;
    }

    this.isSliding = true;

    if (isCycling) {
      this.pause();
    }

    this.setActiveIndicatorElement(nextElement);

    if (this.element.classList.contains(ClassName.SLIDE)) {
      nextElement.classList.add(orderClassName);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const nextElementInterval = parseInt(nextElement.getAttribute("data-interval") || "0", 10);

      if (nextElementInterval) {
        this.config.defaultInterval = this.config.defaultInterval || this.config.interval;
        this.config.interval = nextElementInterval;
      } else {
        this.config.interval = this.config.defaultInterval || this.config.interval;
      }

      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(activeElement);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(activeElement, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => {
        nextElement.classList.remove(directionalClassName);
        nextElement.classList.remove(orderClassName);
        nextElement.classList.add(ClassName.ACTIVE);
        activeElement.classList.remove(ClassName.ACTIVE);
        activeElement.classList.remove(orderClassName);
        activeElement.classList.remove(directionalClassName);
        this.isSliding = false;
        setTimeout(() => {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLID, {
            relatedTarget: nextElement,
            direction: eventDirectionName,
            from: activeElementIndex,
            to: nextElementIndex
          });
        }, 0);
      });
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(activeElement, transitionDuration);
    } else {
      activeElement.classList.remove(ClassName.ACTIVE);
      nextElement.classList.add(ClassName.ACTIVE);
      this.isSliding = false;
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });
    }

    if (isCycling) {
      this.cycle();
    }
  }

}

/* harmony default export */ __webpack_exports__["default"] = (CarouselService);

/***/ }),

/***/ "../../packages/bs4/src/services/collapse.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/collapse.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_COLLAPSE": function() { return /* binding */ CLASS_NAME_COLLAPSE; },
/* harmony export */   "CLASS_NAME_COLLAPSED": function() { return /* binding */ CLASS_NAME_COLLAPSED; },
/* harmony export */   "CLASS_NAME_COLLAPSING": function() { return /* binding */ CLASS_NAME_COLLAPSING; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CollapseService": function() { return /* binding */ CollapseService; },
/* harmony export */   "DATA_KEY": function() { return /* binding */ DATA_KEY; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_KEY": function() { return /* binding */ EVENT_KEY; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "HEIGHT": function() { return /* binding */ HEIGHT; },
/* harmony export */   "NAME": function() { return /* binding */ NAME; },
/* harmony export */   "SELECTOR_ACTIVES": function() { return /* binding */ SELECTOR_ACTIVES; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "WIDTH": function() { return /* binding */ WIDTH; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */






/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "collapse";
const VERSION = "4.3.1";
const DATA_KEY = "bs.collapse";
const EVENT_KEY = ".".concat(DATA_KEY);
const Default = {
  toggle: true,
  parent: ""
};
const DefaultType = {
  toggle: "boolean",
  parent: "(string|element)"
};
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_COLLAPSE = "collapse";
const CLASS_NAME_COLLAPSING = "collapsing";
const CLASS_NAME_COLLAPSED = "collapsed";
const WIDTH = "width";
const HEIGHT = "height";
const SELECTOR_ACTIVES = ".show, .collapsing"; // export const SELECTOR_DATA_TOGGLE = '[data-toggle="collapse"]'

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class CollapseService {
  constructor(element, triggerList) {
    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_element", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_triggerArray", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_selector", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_parent", null);

    this._isTransitioning = false;
    this._element = element;
    this._config = this._getConfig(config);
    this._triggerArray = Array.from(triggerList); // this._triggerArray = Array.from(SelectorEngine.find(
    //   `${SELECTOR_DATA_TOGGLE}[href="#${element.id}"],` +
    //   `${SELECTOR_DATA_TOGGLE}[data-target="#${element.id}"]`
    // )) as HTMLElement[];
    // const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE) as NodeListOf<HTMLElement>;
    // for (let i = 0, len = toggleList.length; i < len; i++) {
    //   const elem = toggleList[i]
    //   const selector = getSelectorFromElement(elem)
    //   const filterElement = !selector ? [] : Array.from(SelectorEngine.find(selector))
    //     .filter(foundElem => foundElem === element)
    //   if (selector !== null && filterElement.length) {
    //     this._selector = selector
    //     // this._triggerArray.push(elem)
    //   }
    // }

    this._parent = this._config.parent ? this._getParent() : null;

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray); // this._addAriaAndCollapsedClass(this._element, [])

    }

    if (this._config.toggle) {
      this.toggle();
    }

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  } // Public


  isExpanded() {
    var _this$_element;

    return !!((_this$_element = this._element) !== null && _this$_element !== void 0 && _this$_element.classList.contains(CLASS_NAME_SHOW));
  }

  isCollapsed() {
    return !this.isExpanded();
  }

  toggle() {
    if (this.isExpanded()) {
      this.hide();
    } else {
      this.show();
    }
  }

  show() {
    var _this$_triggerArray;

    if (!this._element) {
      console.warn("this._element not set!");
      return;
    }

    if (this._isTransitioning || this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    let actives = null;
    let activesData;

    if (this._parent) {
      actives = Array.from(_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find(SELECTOR_ACTIVES, this._parent)).filter(elem => {
        if (typeof this._config.parent === "string") {
          return elem.getAttribute("data-parent") === this._config.parent;
        }

        return elem.classList.contains(CLASS_NAME_COLLAPSE);
      });

      if (actives.length === 0) {
        actives = null;
      }
    }

    const container = this._selector ? _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne(this._selector) : null;

    if (actives) {
      const tempActiveData = actives.filter(elem => container !== elem);
      activesData = tempActiveData[0] ? (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(tempActiveData[0], DATA_KEY) : null;

      if (activesData && activesData._isTransitioning) {
        return;
      }
    }

    const startEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_SHOW);

    if (startEvent.defaultPrevented) {
      return;
    }

    if (actives) {
      actives.forEach(elemActive => {
        if (container !== elemActive) {
          CollapseService.collapseInterface(elemActive, "hide");
        }

        if (!activesData) {
          (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(elemActive, DATA_KEY, null);
        }
      });
    }

    const dimension = this._getDimension();

    this._element.classList.remove(CLASS_NAME_COLLAPSE);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.style[dimension] = "0";

    if ((_this$_triggerArray = this._triggerArray) !== null && _this$_triggerArray !== void 0 && _this$_triggerArray.length) {
      this._triggerArray.forEach(element => {
        element.classList.remove(CLASS_NAME_COLLAPSED);
        element.setAttribute("aria-expanded", "true");
      });
    }

    this.setTransitioning(true);

    const complete = () => {
      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

      this._element.style[dimension] = "";
      this.setTransitioning(false);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_SHOWN);
    };

    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = "scroll".concat(capitalizedDimension);
    const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    this._element.style[dimension] = "".concat(this._element[scrollSize], "px");

    if (!this._config.parent && this._triggerArray) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray, true); // this._addAriaAndCollapsedClass(this._element, [])

    }
  }

  hide() {
    var _this$_triggerArray2;

    if (!this._element) {
      console.warn("this._element not set!");
      return;
    }

    if (this._isTransitioning || !this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    const startEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_HIDE);

    if (startEvent.defaultPrevented) {
      return;
    }

    const dimension = this._getDimension();

    this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

    const triggerArrayLength = (_this$_triggerArray2 = this._triggerArray) === null || _this$_triggerArray2 === void 0 ? void 0 : _this$_triggerArray2.length;

    if (triggerArrayLength && this._triggerArray && triggerArrayLength > 0) {
      for (let i = 0; i < triggerArrayLength; i++) {
        const trigger = this._triggerArray[i];
        const elem = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector)(trigger);

        if (elem && !elem.classList.contains(CLASS_NAME_SHOW)) {
          trigger.classList.add(CLASS_NAME_COLLAPSED);
          trigger.setAttribute("aria-expanded", "false");
        }
      }
    }

    this.setTransitioning(true);

    const complete = () => {
      this.setTransitioning(false);

      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_HIDDEN);
    };

    this._element.style[dimension] = "";
    const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);

    if (!this._config.parent && this._triggerArray) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray, false); // this._addAriaAndCollapsedClass(this._element, [])

    }
  }

  setTransitioning(isTransitioning) {
    this._isTransitioning = isTransitioning;
  }

  dispose() {
    if (this._element) {
      (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.removeData)(this._element, DATA_KEY);
    }

    this._config = null;
    this._parent = null;
    this._element = null; // this._triggerArray = null

    this._isTransitioning = false;
  } // Private


  _getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    config.toggle = Boolean(config.toggle); // Coerce string values

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  _getDimension() {
    const hasWidth = this._element ? this._element.classList.contains(WIDTH) : false;
    return hasWidth ? WIDTH : HEIGHT;
  }

  _getParent() {
    let {
      parent
    } = this._config;

    if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(parent)) {
      // it's a jQuery object
      if (typeof parent.jquery !== "undefined" || typeof parent[0] !== "undefined") {
        parent = parent[0];
      }
    } else {
      parent = _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne(parent);
    } // const selector = `${SELECTOR_DATA_TOGGLE}[data-parent="${parent}"]`


    const selector = "[data-parent=\"".concat(parent, "\"]");
    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find(selector, parent).forEach(element => {
      const selected = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector)(element);

      if (selected) {
        this._addAriaAndCollapsedClass(selected, [element]);
      } else {
        console.warn();
      }
    });
    return parent;
  }

  _addAriaAndCollapsedClass(element, triggerArray, isOpen) {
    if (element) {
      if (typeof isOpen !== "boolean") {
        isOpen = element.classList.contains(CLASS_NAME_SHOW);
      }

      if (triggerArray.length) {
        triggerArray.forEach(elem => {
          if (isOpen) {
            elem.classList.remove(CLASS_NAME_COLLAPSED);
          } else {
            elem.classList.add(CLASS_NAME_COLLAPSED);
          }

          elem.setAttribute("aria-expanded", (!!isOpen).toString());
        });
      }
    }
  } // Static


  static collapseInterface(element, config) {
    let data = (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);

    const _config = _objectSpread(_objectSpread(_objectSpread({}, Default), element.dataset), typeof config === "object" && config ? config : {});

    if (!data && _config.toggle && /show|hide/.test(config)) {
      _config.toggle = false;
    }

    if (!data) {
      data = new CollapseService(element, [], _config);
    }

    if (typeof config === "string") {
      if (typeof data[config] === "undefined") {
        throw new TypeError("No method named \"".concat(config, "\""));
      }

      data[config]();
    }
  }

  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/dropdown.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/dropdown.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARROW_DOWN_KEYCODE": function() { return /* binding */ ARROW_DOWN_KEYCODE; },
/* harmony export */   "ARROW_UP_KEYCODE": function() { return /* binding */ ARROW_UP_KEYCODE; },
/* harmony export */   "ATTACHMENTMAP": function() { return /* binding */ ATTACHMENTMAP; },
/* harmony export */   "CLASSNAME": function() { return /* binding */ CLASSNAME; },
/* harmony export */   "DATA_API_KEY": function() { return /* binding */ DATA_API_KEY; },
/* harmony export */   "DATA_KEY": function() { return /* binding */ DATA_KEY; },
/* harmony export */   "DEFAULT": function() { return /* binding */ DEFAULT; },
/* harmony export */   "DEFAULTTYPE": function() { return /* binding */ DEFAULTTYPE; },
/* harmony export */   "DropdownService": function() { return /* binding */ DropdownService; },
/* harmony export */   "ESCAPE_KEYCODE": function() { return /* binding */ ESCAPE_KEYCODE; },
/* harmony export */   "EVENT": function() { return /* binding */ EVENT; },
/* harmony export */   "EVENT_KEY": function() { return /* binding */ EVENT_KEY; },
/* harmony export */   "NAME": function() { return /* binding */ NAME; },
/* harmony export */   "REGEXP_KEYDOWN": function() { return /* binding */ REGEXP_KEYDOWN; },
/* harmony export */   "RIGHT_MOUSE_BUTTON_WHICH": function() { return /* binding */ RIGHT_MOUSE_BUTTON_WHICH; },
/* harmony export */   "SELECTOR": function() { return /* binding */ SELECTOR; },
/* harmony export */   "SPACE_KEYCODE": function() { return /* binding */ SPACE_KEYCODE; },
/* harmony export */   "TAB_KEYCODE": function() { return /* binding */ TAB_KEYCODE; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

 // /dist/umd/popper


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.1.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dropdown.js
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "dropdown";
const VERSION = "4.1.3";
const DATA_KEY = "bs.dropdown";
const EVENT_KEY = ".".concat(DATA_KEY);
const DATA_API_KEY = ".data-api";
const ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

const SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

const TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

const ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

const ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

const RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

const REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEYCODE, "|").concat(ARROW_DOWN_KEYCODE, "|").concat(ESCAPE_KEYCODE));
const EVENT = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY),
  KEYDOWN_DATA_API: "keydown".concat(EVENT_KEY).concat(DATA_API_KEY),
  KEYUP_DATA_API: "keyup".concat(EVENT_KEY).concat(DATA_API_KEY)
};
const CLASSNAME = {
  DISABLED: "disabled",
  SHOW: "show",
  DROPUP: "dropup",
  DROPRIGHT: "dropright",
  DROPLEFT: "dropleft",
  MENURIGHT: "dropdown-menu-right",
  MENULEFT: "dropdown-menu-left",
  POSITION_STATIC: "position-static"
};
const SELECTOR = {
  DATA_TOGGLE: ".dropdown-toggle",
  FORM_CHILD: ".dropdown form",
  MENU: ".dropdown-menu",
  NAVBAR_NAV: ".navbar-nav",
  VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
};
const ATTACHMENTMAP = {
  TOP: "top-start",
  TOPEND: "top-end",
  BOTTOM: "bottom-start",
  BOTTOMEND: "bottom-end",
  RIGHT: "right-start",
  RIGHTEND: "right-end",
  LEFT: "left-start",
  LEFTEND: "left-end"
};
const DEFAULT = {
  offset: 0,
  flip: true,
  boundary: "scrollParent",
  reference: "toggle",
  display: "dynamic"
};
const DEFAULTTYPE = {
  offset: "(number|string|function)",
  flip: "boolean",
  boundary: "(string|element)",
  reference: "(string|element)",
  display: "string"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class DropdownService {
  // Getters
  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return DEFAULT;
  }

  static get DefaultType() {
    return DEFAULTTYPE;
  } // Static


  static closeAll() {
    const buttons = document.querySelectorAll(SELECTOR.DATA_TOGGLE);
    buttons.forEach(button => {
      if (button.parentElement) {
        const menu = button.parentElement.querySelector(SELECTOR.MENU + "." + CLASSNAME.SHOW) || undefined;

        if (menu) {
          return this.close(button, menu, button);
        }
      }

      this.close(button, button);
    });
  }

  static close(triggerCloseElement, menu, dropdown) {
    const relatedTarget = {
      relatedTarget: triggerCloseElement
    };

    if (menu && menu.classList.contains(CLASSNAME.SHOW)) {
      menu.classList.remove(CLASSNAME.SHOW);
    }

    if (dropdown && dropdown.classList.contains(CLASSNAME.SHOW)) {
      dropdown.classList.remove(CLASSNAME.SHOW);
      dropdown.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
        detail: relatedTarget
      }));
    }

    const parent = triggerCloseElement.parentElement;

    if (parent && parent.classList.contains(CLASSNAME.SHOW)) {
      parent.classList.remove(CLASSNAME.SHOW);
      parent.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
        detail: relatedTarget
      }));
    }
  }

  static _clearMenus() {
    return this.closeAll();
  }

  constructor(elements, config) {
    this._element = elements;
    this._popper = null;
    this._config = this._getConfig(config);
    this._menu = this._getMenuElement();
    this._inNavbar = this._detectNavbar();
    this.outsideClickListener = this.outsideClickListener.bind(this);
    this.closeOnClickOutside();
  } // Public


  close() {
    return DropdownService.close(this._element, this._menu);
  }

  show() {
    const relatedTarget = {
      relatedTarget: this._element
    };
    const parent = this._element.parentElement;

    if (!this._menu.classList.contains(CLASSNAME.SHOW)) {
      this._menu.classList.add(CLASSNAME.SHOW);
    }

    if (parent && !parent.classList.contains(CLASSNAME.SHOW)) {
      parent.classList.add(CLASSNAME.SHOW);
      parent.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
        detail: relatedTarget
      }));
    }
  }

  toggle() {
    if (this._element.disabled || this._element.classList.contains(CLASSNAME.DISABLED)) {
      return;
    }

    const parent = this._element.parentElement;

    const isActive = this._menu.classList.contains(CLASSNAME.SHOW);

    DropdownService._clearMenus();

    if (isActive) {
      this.close();
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = new CustomEvent(EVENT.SHOW, {
      detail: relatedTarget
    });

    if (parent) {
      parent.dispatchEvent(showEvent);

      if (showEvent.defaultPrevented) {
        return;
      }
    } // Disable totally Popper.js for Dropdown in Navbar


    if (!this._inNavbar) {
      /**
       * Check for Popper dependency
       * Popper - https://popper.js.org
       */
      if (typeof popper_js__WEBPACK_IMPORTED_MODULE_2__["default"] === "undefined") {
        throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
      }

      let referenceElement = this._element;

      if (this._config.reference === "parent") {
        referenceElement = parent;
      } else if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_1__.isElement)(this._config.reference)) {
        referenceElement = this._config.reference; // Check if it's jQuery element

        if (typeof this._config.reference.jquery !== "undefined") {
          referenceElement = this._config.reference[0];
        }
      } // If boundary is not `scrollParent`, then set position to `static`
      // to allow the menu to "escape" the scroll parent's boundaries
      // https://github.com/twbs/bootstrap/issues/24251


      if (parent && this._config.boundary !== "scrollParent") {
        parent.classList.add(CLASSNAME.POSITION_STATIC);
      }

      this._popper = new popper_js__WEBPACK_IMPORTED_MODULE_2__["default"](referenceElement, this._menu, this._getPopperConfig());
    }

    this._element.focus();

    this._element.setAttribute("aria-expanded", "true");

    if (this._menu.classList.contains(CLASSNAME.SHOW)) {
      this._menu.classList.remove(CLASSNAME.SHOW);
    } else {
      this._menu.classList.add(CLASSNAME.SHOW);
    }

    this._menu.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
      detail: relatedTarget
    }));
  }

  dispose() {
    this._element.removeAttribute("data-" + DATA_KEY); // delete this._element;
    // delete this._menu;


    if (this._popper !== null) {
      this._popper.destroy();

      this._popper = null;
    }

    document.removeEventListener("click", this.outsideClickListener);
  }

  update() {
    this._inNavbar = this._detectNavbar();

    if (this._popper !== null) {
      this._popper.scheduleUpdate();
    }
  } // Private


  outsideClickListener(event) {
    const target = event.target || event.srcElement || event.currentTarget;
    const parent = this._element.parentElement;

    if (target && !parent.contains(target)) {
      this.close();
      document.removeEventListener("click", this.outsideClickListener);
    }
  }
  /**
   * @see https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element
   * @param selector
   */


  closeOnClickOutside() {
    if (this._element.parentElement) {
      document.addEventListener("click", this.outsideClickListener);
    }
  }

  _getConfig(config) {
    config = _objectSpread(_objectSpread(_objectSpread({}, DropdownService.Default), this._element.dataset), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_1__.typeCheckConfig)(NAME, config, DropdownService.DefaultType);
    return config;
  }

  _getMenuElement() {
    if (!this._menu) {
      const parent = this._element.parentElement;

      if (parent) {
        const menu = parent.querySelector(SELECTOR.MENU);

        if (!menu) {
          throw new Error("Menu not found!");
        }

        this._menu = menu;
      }
    }

    return this._menu;
  }

  _getPlacement() {
    const parentDropdown = this._element.parentElement;
    let placement = ATTACHMENTMAP.BOTTOM;

    if (!parentDropdown) {
      throw new Error("Parent of element not found!");
    } // Handle dropup


    if (parentDropdown.classList.contains(CLASSNAME.DROPUP)) {
      placement = ATTACHMENTMAP.TOP;

      if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
        placement = ATTACHMENTMAP.TOPEND;
      }
    } else if (parentDropdown.classList.contains(CLASSNAME.DROPRIGHT)) {
      placement = ATTACHMENTMAP.RIGHT;
    } else if (parentDropdown.classList.contains(CLASSNAME.DROPLEFT)) {
      placement = ATTACHMENTMAP.LEFT;
    } else if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
      placement = ATTACHMENTMAP.BOTTOMEND;
    }

    return placement;
  }

  _detectNavbar() {
    return this._element.closest && this._element.closest(".navbar") !== null;
  }

  _getPopperConfig() {
    const offsetConf = {};

    if (typeof this._config.offset === "function") {
      offsetConf.fn = data => {
        data.offsets = _objectSpread(_objectSpread({}, data.offsets), this._config.offset(data.offsets) || {});
        return data;
      };
    } else {
      offsetConf.offset = this._config.offset;
    }

    const popperConfig = {
      placement: this._getPlacement(),
      modifiers: {
        offset: offsetConf,
        flip: {
          enabled: this._config.flip
        },
        preventOverflow: {
          boundariesElement: this._config.boundary
        }
      }
    }; // Disable Popper.js if we have a static display

    if (this._config.display === "static") {
      popperConfig.modifiers.applyStyle = {
        enabled: false
      };
    }

    return popperConfig;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/index.ts":
/*!************************************************!*\
  !*** ../../packages/bs4/src/services/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4Service": function() { return /* reexport safe */ _bs4_service_js__WEBPACK_IMPORTED_MODULE_0__.Bs4Service; },
/* harmony export */   "CollapseService": function() { return /* reexport safe */ _collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService; },
/* harmony export */   "DropdownService": function() { return /* reexport safe */ _dropdown_service_js__WEBPACK_IMPORTED_MODULE_3__.DropdownService; },
/* harmony export */   "ModalService": function() { return /* reexport safe */ _modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService; },
/* harmony export */   "PopoverService": function() { return /* reexport safe */ _popover_service_js__WEBPACK_IMPORTED_MODULE_6__.PopoverService; },
/* harmony export */   "ToastService": function() { return /* reexport safe */ _toast_service_js__WEBPACK_IMPORTED_MODULE_7__.ToastService; },
/* harmony export */   "TooltipService": function() { return /* reexport safe */ _tooltip_service_js__WEBPACK_IMPORTED_MODULE_5__.TooltipService; }
/* harmony export */ });
/* harmony import */ var _bs4_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4.service.js */ "../../packages/bs4/src/services/bs4.service.ts");
/* harmony import */ var _carousel_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel.service.js */ "../../packages/bs4/src/services/carousel.service.ts");
/* harmony import */ var _collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _dropdown_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");
/* harmony import */ var _modal_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal.service.js */ "../../packages/bs4/src/services/modal.service.ts");
/* harmony import */ var _tooltip_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tooltip.service.js */ "../../packages/bs4/src/services/tooltip.service.ts");
/* harmony import */ var _popover_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./popover.service.js */ "../../packages/bs4/src/services/popover.service.ts");
/* harmony import */ var _toast_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toast.service.js */ "../../packages/bs4/src/services/toast.service.ts");










/***/ }),

/***/ "../../packages/bs4/src/services/modal.service.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/services/modal.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_BACKDROP": function() { return /* binding */ CLASS_NAME_BACKDROP; },
/* harmony export */   "CLASS_NAME_FADE": function() { return /* binding */ CLASS_NAME_FADE; },
/* harmony export */   "CLASS_NAME_OPEN": function() { return /* binding */ CLASS_NAME_OPEN; },
/* harmony export */   "CLASS_NAME_SCROLLBAR_MEASURER": function() { return /* binding */ CLASS_NAME_SCROLLBAR_MEASURER; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CLASS_NAME_STATIC": function() { return /* binding */ CLASS_NAME_STATIC; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_CLICK_DISMISS": function() { return /* binding */ EVENT_CLICK_DISMISS; },
/* harmony export */   "EVENT_FOCUSIN": function() { return /* binding */ EVENT_FOCUSIN; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_HIDE_PREVENTED": function() { return /* binding */ EVENT_HIDE_PREVENTED; },
/* harmony export */   "EVENT_KEYDOWN_DISMISS": function() { return /* binding */ EVENT_KEYDOWN_DISMISS; },
/* harmony export */   "EVENT_MOUSEDOWN_DISMISS": function() { return /* binding */ EVENT_MOUSEDOWN_DISMISS; },
/* harmony export */   "EVENT_MOUSEUP_DISMISS": function() { return /* binding */ EVENT_MOUSEUP_DISMISS; },
/* harmony export */   "EVENT_RESIZE": function() { return /* binding */ EVENT_RESIZE; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "ModalService": function() { return /* binding */ ModalService; },
/* harmony export */   "SELECTOR_DIALOG": function() { return /* binding */ SELECTOR_DIALOG; },
/* harmony export */   "SELECTOR_FIXED_CONTENT": function() { return /* binding */ SELECTOR_FIXED_CONTENT; },
/* harmony export */   "SELECTOR_MODAL_BODY": function() { return /* binding */ SELECTOR_MODAL_BODY; },
/* harmony export */   "SELECTOR_STICKY_CONTENT": function() { return /* binding */ SELECTOR_STICKY_CONTENT; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/modal.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */



 // import Manipulator from "./dom/manipulator";



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "modal";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.modal";
const EVENT_KEY = ".".concat(DATA_KEY);
const ESCAPE_KEY = "Escape";
const Default = {
  backdrop: true,
  keyboard: true,
  focus: true,
  show: true
};
const DefaultType = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  focus: "boolean",
  show: "boolean"
};
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
const EVENT_RESIZE = "resize".concat(EVENT_KEY);
const EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY);
const EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY);
const EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(EVENT_KEY);
const EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY);
const CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
const CLASS_NAME_BACKDROP = "modal-backdrop";
const CLASS_NAME_OPEN = "modal-open";
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_STATIC = "modal-static";
const SELECTOR_DIALOG = ".modal-dialog";
const SELECTOR_MODAL_BODY = ".modal-body";
const SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
const SELECTOR_STICKY_CONTENT = ".sticky-top";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class ModalService {
  constructor(element, config) {
    this._config = this._getConfig(config);
    this._element = element;
    this._dialog = _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.findOne(SELECTOR_DIALOG, element);
    this._backdrop = null;
    this._isShown = false;
    this._isBodyOverflowing = false;
    this._ignoreBackdropClick = false;
    this._isTransitioning = false;
    this._scrollbarWidth = 0;
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }

    if (this._element.classList.contains(CLASS_NAME_FADE)) {
      this._isTransitioning = true;
    }

    const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOW, {
      relatedTarget
    });

    if (this._isShown || showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;

    this._checkScrollbar();

    this._setScrollbar();

    this._adjustDialog();

    this._setEscapeEvent();

    this._setResizeEvent();

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
    event => this.hide(event));

    if (this._dialog) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, EVENT_MOUSEUP_DISMISS, event => {
          if (event.target === this._element) {
            this._ignoreBackdropClick = true;
          }
        });
      });
    }

    this._showBackdrop(() => this._showElement(relatedTarget));
  }

  hide(event) {
    if (event) {
      event.preventDefault();
    }

    if (!this._isShown || this._isTransitioning) {
      return;
    }

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._isShown = false;

    const transition = this._element.classList.contains(CLASS_NAME_FADE);

    if (transition) {
      this._isTransitioning = true;
    }

    this._setEscapeEvent();

    this._setResizeEvent(); // off(document, EVENT_FOCUSIN); TODO


    this._element.classList.remove(CLASS_NAME_SHOW); // off(this._element, EVENT_CLICK_DISMISS); TODO
    // off(this._dialog, EVENT_MOUSEDOWN_DISMISS); TODO


    if (transition) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => this._hideModal());
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      this._hideModal();
    }
  }

  dispose() {
    // TODO
    // [window, this._element, this._dialog].forEach((htmlElement) =>
    //   off(htmlElement, EVENT_KEY)
    // );

    /**
     * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
     * Do not move `document` in `htmlElements` array
     * It will remove `EVENT_CLICK_DATA_API` event that should remain
     */
    // off(document, EVENT_FOCUSIN); TODO
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.removeData)(this._element, DATA_KEY); // this._config = null;
    // this._element = null;
    // this._dialog = null;
    // this._backdrop = null;
    // this._isShown = null;
    // this._isBodyOverflowing = null;
    // this._ignoreBackdropClick = null;
    // this._isTransitioning = null;
    // this._scrollbarWidth = null;
  }

  handleUpdate() {
    this._adjustDialog();
  } // Private


  _getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  _showElement(relatedTarget) {
    const transition = this._element.classList.contains(CLASS_NAME_FADE);

    const modalBody = this._dialog ? _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.findOne(SELECTOR_MODAL_BODY, this._dialog) : null;

    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
      // Don't move modal's DOM position
      document.body.appendChild(this._element);
    }

    this._element.style.display = "block";

    this._element.removeAttribute("aria-hidden");

    this._element.setAttribute("aria-modal", "true");

    this._element.setAttribute("role", "dialog");

    this._element.scrollTop = 0;

    if (modalBody) {
      modalBody.scrollTop = 0;
    }

    if (transition) {
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);
    }

    this._element.classList.add(CLASS_NAME_SHOW);

    if (this._config.focus) {
      this._enforceFocus();
    }

    const transitionComplete = () => {
      if (this._config.focus) {
        this._element.focus();
      }

      this._isTransitioning = false;
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOWN, {
        relatedTarget
      });
    };

    if (transition) {
      if (!this._dialog) {
        console.warn("Dialog element not found!");
        return;
      }

      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._dialog);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._dialog, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, transitionComplete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._dialog, transitionDuration);
    } else {
      transitionComplete();
    }
  }

  _enforceFocus() {
    const onFocusIn = event => {
      if (event.target && document !== event.target && this._element !== event.target && !this._element.contains(event.target)) {
        this._element.focus();
      }
    };

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(document, EVENT_FOCUSIN, onFocusIn); // guard against infinite focus loou

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(document, EVENT_FOCUSIN, onFocusIn);
  }

  _setEscapeEvent() {
    const onEscapeEvent = event => {
      if (this._config.keyboard && event.key === ESCAPE_KEY) {
        event.preventDefault();
        this.hide();
      } else if (!this._config.keyboard && event.key === ESCAPE_KEY) {
        this._triggerBackdropTransition();
      }
    };

    if (this._isShown) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
    }
  }

  _setResizeEvent() {
    const onResizeEvent = () => this._adjustDialog();

    if (this._isShown) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(window, EVENT_RESIZE, onResizeEvent);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(window, EVENT_RESIZE, onResizeEvent);
    }
  }

  _hideModal() {
    this._element.style.display = "none";

    this._element.setAttribute("aria-hidden", "true");

    this._element.removeAttribute("aria-modal");

    this._element.removeAttribute("role");

    this._isTransitioning = false;

    this._showBackdrop(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);

      this._resetAdjustments();

      this._resetScrollbar();

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDDEN);
    });
  }

  _removeBackdrop() {
    var _this$_backdrop, _this$_backdrop$paren;

    (_this$_backdrop = this._backdrop) === null || _this$_backdrop === void 0 ? void 0 : (_this$_backdrop$paren = _this$_backdrop.parentNode) === null || _this$_backdrop$paren === void 0 ? void 0 : _this$_backdrop$paren.removeChild(this._backdrop);
    this._backdrop = null;
  }

  _showBackdrop(callback) {
    const animate = this._element.classList.contains(CLASS_NAME_FADE) ? CLASS_NAME_FADE : "";

    if (this._isShown && this._config.backdrop) {
      this._backdrop = document.createElement("div");
      this._backdrop.className = CLASS_NAME_BACKDROP;

      if (animate) {
        this._backdrop.classList.add(animate);
      }

      document.body.appendChild(this._backdrop);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, event => {
        if (this._ignoreBackdropClick) {
          this._ignoreBackdropClick = false;
          return;
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        this._triggerBackdropTransition();
      });

      if (animate) {
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._backdrop);
      }

      this._backdrop.classList.add(CLASS_NAME_SHOW);

      if (!animate) {
        callback();
        return;
      }

      const backdropTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._backdrop);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._backdrop, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, callback);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._backdrop, backdropTransitionDuration);
    } else if (!this._isShown && this._backdrop) {
      this._backdrop.classList.remove(CLASS_NAME_SHOW);

      const callbackRemove = () => {
        this._removeBackdrop();

        callback();
      };

      if (this._element.classList.contains(CLASS_NAME_FADE)) {
        const backdropTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._backdrop);
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._backdrop, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, callbackRemove);
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._backdrop, backdropTransitionDuration);
      } else {
        callbackRemove();
      }
    } else {
      callback();
    }
  }

  _triggerBackdropTransition() {
    if (this._config.backdrop === "static") {
      if (!this._dialog) {
        console.error("Dialog element not found!");
        return;
      }

      const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE_PREVENTED);

      if (hideEvent.defaultPrevented) {
        return;
      }

      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!isModalOverflowing) {
        this._element.style.overflowY = "hidden";
      }

      this._element.classList.add(CLASS_NAME_STATIC);

      const modalTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._dialog);

      const onTransitionEnd = () => {
        this._element.classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => {
            this._element.style.overflowY = "";
          });
          (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, modalTransitionDuration);
        }
      };

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, onTransitionEnd);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, onTransitionEnd);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, modalTransitionDuration);

      this._element.focus();
    } else {
      this.hide();
    }
  } // ----------------------------------------------------------------------
  // the following methods are used to handle overflowing modals
  // ----------------------------------------------------------------------


  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

    if (!this._isBodyOverflowing && isModalOverflowing) {
      this._element.style.paddingLeft = "".concat(this._scrollbarWidth, "px");
    }

    if (this._isBodyOverflowing && !isModalOverflowing) {
      this._element.style.paddingRight = "".concat(this._scrollbarWidth, "px");
    }
  }

  _resetAdjustments() {
    this._element.style.paddingLeft = "";
    this._element.style.paddingRight = "";
  }

  _checkScrollbar() {
    const rect = document.body.getBoundingClientRect();
    this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
    this._scrollbarWidth = this._getScrollbarWidth();
  }

  _setScrollbar() {
    if (this._isBodyOverflowing) {
      // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
      //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
      // Adjust fixed content padding
      _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_FIXED_CONTENT).forEach(element => {
        const actualPadding = element.style.paddingRight;
        const calculatedPadding = window.getComputedStyle(element)["padding-right"]; // Manipulator.setDataAttribute(element, "padding-right", actualPadding);

        element.dataset.paddingRight = actualPadding;
        element.style.paddingRight = "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px");
      }); // Adjust sticky content margin

      _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_STICKY_CONTENT).forEach(element => {
        const actualMargin = element.style.marginRight;
        const calculatedMargin = window.getComputedStyle(element)["margin-right"]; // Manipulator.setDataAttribute(element, "margin-right", actualMargin);

        element.dataset.marginRight = actualMargin;
        element.style.marginRight = "".concat(parseFloat(calculatedMargin) - this._scrollbarWidth, "px");
      }); // Adjust body padding

      const actualPadding = document.body.style.paddingRight;
      const calculatedPadding = window.getComputedStyle(document.body)["padding-right"]; // Manipulator.setDataAttribute(
      //   document.body,
      //   "padding-right",
      //   actualPadding
      // );

      document.body.dataset.paddingRight = actualPadding;
      document.body.style.paddingRight = "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px");
    }

    document.body.classList.add(CLASS_NAME_OPEN);
  }

  _resetScrollbar() {
    // Restore fixed content padding
    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_FIXED_CONTENT).forEach(element => {
      // const padding = Manipulator.getDataAttribute(element, "padding-right");
      const padding = element.dataset.paddingRight;

      if (typeof padding !== "undefined") {
        // Manipulator.removeDataAttribute(element, "padding-right");
        delete element.dataset.paddingRight;
        element.style.paddingRight = padding;
      }
    }); // Restore sticky content and navbar-toggler margin

    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find("".concat(SELECTOR_STICKY_CONTENT)).forEach(element => {
      // const margin = Manipulator.getDataAttribute(element, "margin-right");
      const margin = element.dataset.marginRight;

      if (typeof margin !== "undefined") {
        // Manipulator.removeDataAttribute(element, "margin-right");
        delete element.dataset.marginRight;
        element.style.marginRight = margin;
      }
    }); // Restore body padding
    // const padding = Manipulator.getDataAttribute(
    //   document.body,
    //   "padding-right"
    // );

    const padding = document.body.dataset.paddingRight;

    if (typeof padding === "undefined") {
      document.body.style.paddingRight = "";
    } else {
      // Manipulator.removeDataAttribute(document.body, "padding-right");
      delete document.body.dataset.paddingRight;
      document.body.style.paddingRight = padding;
    }
  }

  _getScrollbarWidth() {
    // thx d.walsh
    const scrollDiv = document.createElement("div");
    scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
    document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.getData)(element, DATA_KEY);
  }

}
/* harmony default export */ __webpack_exports__["default"] = (ModalService);

/***/ }),

/***/ "../../packages/bs4/src/services/popover.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/services/popover.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopoverService": function() { return /* binding */ PopoverService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");
/* harmony import */ var _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tooltip.service.js */ "../../packages/bs4/src/services/tooltip.service.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/popover.js
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "popover";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.popover";
const EVENT_KEY = ".".concat(DATA_KEY);
const CLASS_PREFIX = "bs-popover";
const BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), "g");

const Default = _objectSpread(_objectSpread({}, _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService.Default), {}, {
  placement: "right",
  trigger: "click",
  content: "",
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
});

const DefaultType = _objectSpread(_objectSpread({}, _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService.DefaultType), {}, {
  content: "(string|element|function)"
});

const Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  INSERTED: "inserted".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  FOCUSIN: "focusin".concat(EVENT_KEY),
  FOCUSOUT: "focusout".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY)
};
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_SHOW = "show";
const SELECTOR_TITLE = ".popover-header";
const SELECTOR_CONTENT = ".popover-body";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class PopoverService extends _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService {
  // Export constants defined above as static members of the service class, to avoid name collisions in the global namespace.
  // Getters
  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  }

  static get NAME() {
    return NAME;
  }

  static get DATA_KEY() {
    return DATA_KEY;
  }

  static get Event() {
    return Event;
  }

  static get EVENT_KEY() {
    return EVENT_KEY;
  }

  static get DefaultType() {
    return DefaultType;
  } // Overrides


  constructor(element, config) {
    super(element, config);
    element.style.backgroundColor = "#ffff00";
  }

  isWithContent() {
    return Boolean(this.getTitle() || this._getContent());
  }

  setContent(content) {
    const tip = this.getTipElement(); // we use append for html objects to maintain js events

    this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__.findOne)(SELECTOR_TITLE, tip), this.getTitle());

    if (!content) {
      content = this._getContent();
    }

    if (typeof content === "function") {
      content = content(this.element);
    }

    if (content) {
      this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__.findOne)(SELECTOR_CONTENT, tip), content);
    }

    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW);
  } // Private


  _addAttachmentClass(attachment) {
    this.getTipElement().classList.add("".concat(CLASS_PREFIX, "-").concat(attachment));
  }

  _getContent() {
    return this.element.getAttribute("data-content") || this.config.content;
  }

  _cleanTipClass() {
    var _tip$getAttribute;

    const tip = this.getTipElement();
    const tabClass = tip === null || tip === void 0 ? void 0 : (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(BSCLS_PREFIX_REGEX);

    if (tabClass && tabClass.length > 0) {
      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
    }
  }

  _getPopperConfig(attachment) {
    const config = super._getPopperConfig(attachment);

    config.modifiers.arrow.element = ".".concat(PopoverService.NAME, "-arrow");
    return config;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_1__.getData)(element, DATA_KEY);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(PopoverService, "CONSTANTS", {
  NAME,
  VERSION,
  DATA_KEY,
  EVENT_KEY,
  CLASS_PREFIX,
  BSCLS_PREFIX_REGEX,
  Default,
  DefaultType,
  Event,
  CLASS_NAME_FADE,
  CLASS_NAME_SHOW,
  SELECTOR_TITLE,
  SELECTOR_CONTENT
});

/* harmony default export */ __webpack_exports__["default"] = (PopoverService);

/***/ }),

/***/ "../../packages/bs4/src/services/toast.service.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/services/toast.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_FADE": function() { return /* binding */ CLASS_NAME_FADE; },
/* harmony export */   "CLASS_NAME_HIDE": function() { return /* binding */ CLASS_NAME_HIDE; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CLASS_NAME_SHOWING": function() { return /* binding */ CLASS_NAME_SHOWING; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_CLICK_DISMISS": function() { return /* binding */ EVENT_CLICK_DISMISS; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "ToastService": function() { return /* binding */ ToastService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/toast.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "toast";
const VERSION = "5.0.0-alpha1-riba";
const DATA_KEY = "bs.toast";
const EVENT_KEY = ".".concat(DATA_KEY);
const EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY);
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_HIDE = "hide";
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_SHOWING = "showing";
const DefaultType = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
};
const Default = {
  animation: true,
  autohide: true,
  delay: 2000
}; // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class ToastService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_config", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_timeout", null);

    this._element = element;
    this._config = this._getConfig(config);
    this._timeout = null;

    this._setListeners();

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get DefaultType() {
    return DefaultType;
  }

  static get Default() {
    return Default;
  } // Public


  show() {
    const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOW);

    if (showEvent.defaultPrevented) {
      return;
    }

    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }

    const complete = () => {
      if (!this._element) {
        return;
      }

      this._element.classList.remove(CLASS_NAME_SHOWING);

      this._element.classList.add(CLASS_NAME_SHOW);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOWN);

      if (this._config.autohide) {
        this._timeout = Number(setTimeout(() => {
          this.hide();
        }, this._config.delay));
      }
    };

    this._element.classList.remove(CLASS_NAME_HIDE);

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);

    this._element.classList.add(CLASS_NAME_SHOWING);

    if (this._config.animation) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      complete();
    }
  }

  hide() {
    if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const complete = () => {
      if (!this._element) {
        return;
      }

      this._element.classList.add(CLASS_NAME_HIDE);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDDEN);
    };

    this._element.classList.remove(CLASS_NAME_SHOW);

    if (this._config.animation) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      complete();
    }
  }

  dispose() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }

    this._timeout = null;

    if (this._element.classList.contains(CLASS_NAME_SHOW)) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    } // off(this._element, EVENT_CLICK_DISMISS);


    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.removeData)(this._element, DATA_KEY); // this._element = null;
    // this._config = null;
  } // Private


  _getConfig(config) {
    var _this$_element;

    config = _objectSpread(_objectSpread(_objectSpread({}, Default), ((_this$_element = this._element) === null || _this$_element === void 0 ? void 0 : _this$_element.dataset) || {}), typeof config === "object" && config ? config : {});
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, ToastService.DefaultType);
    return config;
  }

  _setListeners() {
    if (!this._element) {
      return;
    }

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
    () => {
      var _this$_element2;

      // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
      if (((_this$_element2 = this._element) === null || _this$_element2 === void 0 ? void 0 : _this$_element2.dataset.dismiss) === "toast") {
        this.hide();
      }
    });
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.getData)(element, DATA_KEY);
  }

}
/* harmony default export */ __webpack_exports__["default"] = (ToastService);

/***/ }),

/***/ "../../packages/bs4/src/services/tooltip.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/services/tooltip.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipService": function() { return /* binding */ TooltipService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/sanitizer.js */ "../../packages/bs4/src/helper/sanitizer.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_manipulator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helper/dom/manipulator.js */ "../../packages/bs4/src/helper/dom/manipulator.ts");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/tooltip.js
 * --------------------------------------------------------------------------
 */










/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "tooltip";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.tooltip";
const EVENT_KEY = ".".concat(DATA_KEY);
const CLASS_PREFIX = "bs-tooltip";
const BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), "g");
const DISALLOWED_ATTRIBUTES = ["sanitize", "allowList", "sanitizeFn"];
const DefaultType = {
  animation: "boolean",
  template: "string",
  title: "(string|element|function)",
  trigger: "string",
  delay: "(number|object)",
  html: "boolean",
  selector: "(string|boolean|undefined)",
  placement: "(string|function)",
  offset: "(number|string|function)",
  container: "(string|element|boolean|undefined)",
  fallbackPlacement: "(string|array)",
  boundary: "(string|element)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  allowList: "object",
  popperConfig: "(null|object)"
};
const AttachmentMap = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: "right",
  BOTTOM: "bottom",
  LEFT: "left"
};
const Default = {
  animation: true,
  container: undefined,
  delay: 0,
  html: false,
  placement: "top",
  selector: undefined,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow arrow"></div>' + '<div class="tooltip-inner"></div></div>',
  title: "",
  trigger: "hover focus",
  offset: 0,
  fallbackPlacement: "flip",
  boundary: "scrollParent",
  sanitize: true,
  sanitizeFn: null,
  allowList: _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ALLOWLIST,
  popperConfig: null
};
const Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  INSERTED: "inserted".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  FOCUSIN: "focusin".concat(EVENT_KEY),
  FOCUSOUT: "focusout".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY)
};
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_MODAL = "modal";
const CLASS_NAME_SHOW = "show";
const HOVER_STATE_SHOW = "show";
const HOVER_STATE_OUT = "out";
const SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
const TRIGGER_HOVER = "hover";
const TRIGGER_FOCUS = "focus";
const TRIGGER_CLICK = "click";
const TRIGGER_MANUAL = "manual";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class TooltipService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_isEnabled", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_timeout", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_hoverState", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_activeTrigger", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_popper", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tip", null);

    if (typeof popper_js__WEBPACK_IMPORTED_MODULE_9__["default"] === "undefined") {
      throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org)");
    }

    this.element = element;
    this.config = this._getConfig(config);

    this._setListeners();

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, TooltipService.DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  }

  static get NAME() {
    return NAME;
  }

  static get DATA_KEY() {
    return DATA_KEY;
  }

  static get Event() {
    return Event;
  }

  static get EVENT_KEY() {
    return EVENT_KEY;
  }

  static get DefaultType() {
    return DefaultType;
  } // Public


  enable() {
    this._isEnabled = true;
  }

  disable() {
    this._isEnabled = false;
  }

  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }

  toggle(event) {
    if (!this._isEnabled) {
      return;
    }

    if (event) {
      const dataKey = TooltipService.DATA_KEY;
      const element = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      let context = (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, dataKey);

      if (!context) {
        context = new TooltipService(element, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, dataKey, context);
      }

      context._activeTrigger.click = !context._activeTrigger.click;

      if (context._isWithActiveTrigger()) {
        context._enter(null, context);
      } else {
        context._leave(null, context);
      }
    } else {
      if (this.getTipElement().classList.contains(CLASS_NAME_SHOW)) {
        this._leave(undefined, this);

        return;
      }

      this._enter(undefined, this);
    }
  }

  dispose() {
    clearTimeout(this._timeout);
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.removeData)(this.element, TooltipService.DATA_KEY); // off(this.element, TooltipService.EVENT_KEY);

    const modalElement = this.element.closest(".".concat(CLASS_NAME_MODAL));

    if (modalElement) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.off)(modalElement, "hide.bs.modal", this._hideModalHandler);
    }

    if (this.tip) {
      var _this$tip$parentNode;

      (_this$tip$parentNode = this.tip.parentNode) === null || _this$tip$parentNode === void 0 ? void 0 : _this$tip$parentNode.removeChild(this.tip);
    } // this._isEnabled = null;
    // this._timeout = null;
    // this._hoverState = null;
    // this._activeTrigger = null;


    if (this._popper) {
      this._popper.destroy();
    } // this._popper = null;
    // this.element = null;
    // this.config = null;
    // this.tip = null;

  }

  show() {
    if (this.element.style.display === "none") {
      throw new Error("Please use show on visible elements");
    }

    if (this.isWithContent() && this._isEnabled) {
      var _this$tip;

      const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.SHOW);
      const shadowRoot = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.findShadowRoot)(this.element);
      const isInTheDom = shadowRoot === null ? this.element.ownerDocument.documentElement.contains(this.element) : shadowRoot.contains(this.element);

      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }

      const tip = this.getTipElement();
      const tipId = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getUID)(TooltipService.NAME);
      tip.setAttribute("id", tipId);
      this.element.setAttribute("aria-describedby", tipId);
      this.setContent();

      if (this.config.animation) {
        tip.classList.add(CLASS_NAME_FADE);
      }

      const placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;

      const attachment = this._getAttachment(placement || undefined);

      this._addAttachmentClass(attachment);

      const container = this._getContainer();

      (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(tip, TooltipService.DATA_KEY, this);

      if (!this.element.ownerDocument.documentElement.contains(this.tip)) {
        container === null || container === void 0 ? void 0 : container.appendChild(tip);
      }

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.INSERTED);
      this._popper = new popper_js__WEBPACK_IMPORTED_MODULE_9__["default"](this.element, tip, this._getPopperConfig(attachment));
      tip.classList.add(CLASS_NAME_SHOW); // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

      if ("ontouchstart" in document.documentElement) {
        Array.from(document.body.children).forEach(element => {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(element, "mouseover", (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop)());
        });
      }

      const complete = () => {
        if (this.config.animation) {
          this._fixTransition();
        }

        const prevHoverState = this._hoverState;
        this._hoverState = "";
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.SHOWN);

        if (prevHoverState === HOVER_STATE_OUT) {
          this._leave(undefined, this);
        }
      };

      if ((_this$tip = this.tip) !== null && _this$tip !== void 0 && _this$tip.classList.contains(CLASS_NAME_FADE)) {
        const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this.tip);
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.one)(this.tip, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this.tip, transitionDuration);
      } else {
        complete();
      }
    }
  }

  hide() {
    var _this$tip2;

    const tip = this.getTipElement();

    const complete = () => {
      var _this$_popper;

      if (this._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
        tip.parentNode.removeChild(tip);
      }

      this._cleanTipClass();

      this.element.removeAttribute("aria-describedby");
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.HIDDEN);
      (_this$_popper = this._popper) === null || _this$_popper === void 0 ? void 0 : _this$_popper.destroy();
    };

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    tip.classList.remove(CLASS_NAME_SHOW); // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support

    if ("ontouchstart" in document.documentElement) {
      Array.from(document.body.children).forEach(element => (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.off)(element, "mouseover", _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop));
    }

    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;

    if ((_this$tip2 = this.tip) !== null && _this$tip2 !== void 0 && _this$tip2.classList.contains(CLASS_NAME_FADE)) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(tip);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.one)(tip, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(tip, transitionDuration);
    } else {
      complete();
    }

    this._hoverState = "";
  }

  update() {
    if (this._popper !== null) {
      this._popper.scheduleUpdate();
    }
  } // Protected


  isWithContent() {
    return Boolean(this.getTitle());
  }

  getTipElement() {
    if (this.tip) {
      return this.tip;
    }

    const element = document.createElement("div");
    element.innerHTML = this.config.template;
    this.tip = element.children[0];

    if (!this.tip) {
      throw new Error("Tooltip not found!");
    }

    return this.tip;
  }

  setContent() {
    const tip = this.getTipElement();
    this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__.findOne)(SELECTOR_TOOLTIP_INNER, tip), this.getTitle());
    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW);
  }

  setElementContent(element, content) {
    if (element === null) {
      return;
    }

    if (typeof content === "object" && content !== null && (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(content)) {
      if (content.jquery) {
        content = content[0];
      }

      content = content; // content is a DOM node or a jQuery

      if (this.config.html) {
        if (content.parentNode !== element) {
          element.innerHTML = "";
          element.appendChild(content);
        }
      } else {
        element.textContent = content.textContent;
      }

      return;
    }

    content = content;

    if (this.config.html && this.config.sanitize) {
      content = (0,_helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeHtml)(content, this.config.allowList, this.config.sanitizeFn || undefined);
    }

    element.innerHTML = content;
  }

  getTitle() {
    let title = this.element.getAttribute("data-original-title");

    if (!title) {
      title = typeof this.config.title === "function" ? this.config.title(this.element) : this.config.title;
    }

    return title;
  } // Private


  _getPopperConfig(attachment) {
    const defaultBsConfig = {
      placement: attachment,
      modifiers: {
        offset: this._getOffset(),
        flip: {
          behavior: this.config.fallbackPlacement
        },
        arrow: {
          element: ".".concat(TooltipService.NAME, "-arrow")
        },
        preventOverflow: {
          boundariesElement: this.config.boundary
        }
      },
      onCreate: data => {
        if (data.originalPlacement !== data.placement) {
          this._handlePopperPlacementChange(data);
        }
      },
      onUpdate: data => this._handlePopperPlacementChange(data)
    };
    return _objectSpread(_objectSpread({}, defaultBsConfig), this.config.popperConfig);
  }

  _addAttachmentClass(attachment) {
    this.getTipElement().classList.add("".concat(CLASS_PREFIX, "-").concat(attachment));
  }

  _getOffset() {
    const offset = {};

    if (this.config.offset && typeof this.config.offset === "function") {
      offset.fn = data => {
        data.offsets = _objectSpread(_objectSpread({}, data.offsets), this.config.offset(data.offsets, this.element) || {});
        return data;
      };
    } else {
      offset.offset = this.config.offset;
    }

    return offset;
  }

  _getContainer() {
    if (!this.config.container) {
      return document.body;
    }

    if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(this.config.container)) {
      return this.config.container;
    }

    if (typeof this.config.container === "string") {
      return (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__.findOne)(this.config.container);
    }

    return null;
  }

  _getAttachment() {
    let placement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "AUTO";
    return AttachmentMap[placement.toUpperCase() || "BOTTOM" || 0];
  }

  _setListeners() {
    const triggers = this.config.trigger.split(" ");
    /*
      TODO: TooltipService.Event.[...] constants replaced here with standard events.
      How are the TooltipService.Events made to work as event names in Bootstrap, and should we use the same way?
    */

    triggers.forEach(trigger => {
      if (trigger === "click") {
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, "click", // TooltipService.Event.CLICK,
        // this.config.selector,
        event => this.toggle(event));
      } else if (trigger !== TRIGGER_MANUAL) {
        const eventIn = trigger === TRIGGER_HOVER ? "mouseover" // TooltipService.Event.MOUSEENTER
        : "focus"; // TooltipService.Event.FOCUSIN;

        const eventOut = trigger === TRIGGER_HOVER ? "mouseout" // TooltipService.Event.MOUSELEAVE
        : "blur"; // TooltipService.Event.FOCUSOUT;

        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, eventIn
        /*, this.config.selector*/
        , event => this._enter(event));
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, eventOut
        /*, this.config.selector*/
        , event => this._leave(event));
      }
    }); // this._hideModalHandler = () => {
    //   if (this.element) {
    //     this.hide();
    //   }
    // };

    const closestModalEl = this.element.closest(".".concat(CLASS_NAME_MODAL));

    if (closestModalEl) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(closestModalEl, "hide.bs.modal", this._hideModalHandler);
    }

    if (this.config.selector) {
      this.config = _objectSpread(_objectSpread({}, this.config), {}, {
        trigger: "manual",
        selector: ""
      });
    } else {
      this._fixTitle();
    }
  }

  _hideModalHandler() {
    if (this.element) {
      this.hide();
    }
  }

  _fixTitle() {
    const titleType = typeof this.element.getAttribute("data-original-title");

    if (this.element.getAttribute("title") || titleType !== "string") {
      this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
      this.element.setAttribute("title", "");
    }
  }

  _enter(event, context) {
    const dataKey = TooltipService.DATA_KEY;

    if (event) {
      const el = event.delegateTarget || (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      context = context || (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(el, dataKey);

      if (!context) {
        context = new TooltipService(el, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(el, dataKey, context);
      }

      context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
    }

    if (context.getTipElement().classList.contains(CLASS_NAME_SHOW) || context._hoverState === HOVER_STATE_SHOW) {
      context._hoverState = HOVER_STATE_SHOW;
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_SHOW;

    if (!context.config.delay || !context.config.delay.show) {
      context.show();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_SHOW) {
        context.show();
      }
    }, context.config.delay.show);
  }

  _leave(event, context) {
    const dataKey = TooltipService.DATA_KEY;

    if (event) {
      const el = event.delegateTarget || (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      context = context || (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(el, dataKey);

      if (!context) {
        context = new TooltipService(el, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(el, dataKey, context);
      }
    }

    if (event) {
      context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
    }

    if (context._isWithActiveTrigger()) {
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_OUT;

    if (!context.config.delay || !context.config.delay.hide) {
      context.hide();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_OUT) {
        context.hide();
      }
    }, context.config.delay.hide);
  }

  _isWithActiveTrigger() {
    for (const trigger in this._activeTrigger) {
      if (this._activeTrigger[trigger]) {
        return true;
      }
    }

    return false;
  }

  _getConfig(config) {
    const dataAttributes = _helper_dom_manipulator_js__WEBPACK_IMPORTED_MODULE_7__.getDataAttributes(this.element);
    Object.keys(dataAttributes).forEach(dataAttr => {
      if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
        delete dataAttributes[dataAttr];
      }
    });

    if (config && typeof config.container === "object" && config.container.jquery // TODO?
    ) {
      config.container = config.container[0]; // TODO?
    }

    config = _objectSpread(_objectSpread(_objectSpread({}, TooltipService.Default), dataAttributes), typeof config === "object" && config ? config : {});

    if (typeof config.delay === "number") {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }

    if (config.title && typeof config.title === "number") {
      config.title = config.title.toString();
    }

    if (config.content && typeof config.content === "number") {
      config.content = config.content.toString();
    }

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, TooltipService.DefaultType);

    if (config.sanitize) {
      config.template = (0,_helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeHtml)(config.template, config.allowList, config.sanitizeFn || undefined) || "";
    }

    return config;
  }

  _getDelegateConfig() {
    const config = {};

    if (this.config) {
      for (const key in this.config) {
        // TODO fix types
        if (this.config[key] !== TooltipService.Default[key]) {
          config[key] = this.config[key]; // TODO fix types
        }
      }
    }

    return config;
  }

  _cleanTipClass() {
    var _tip$getAttribute;

    const tip = this.getTipElement();
    const tabClass = (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(BSCLS_PREFIX_REGEX);

    if (tabClass && tabClass.length > 0) {
      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
    }
  }

  _handlePopperPlacementChange(popperData) {
    this.tip = popperData.instance.popper;

    this._cleanTipClass();

    this._addAttachmentClass(this._getAttachment(popperData.placement));
  }

  _fixTransition() {
    const tip = this.getTipElement();
    const initConfigAnimation = this.config.animation;

    if (tip.getAttribute("x-placement") !== null) {
      return;
    }

    tip.classList.remove(CLASS_NAME_FADE);
    this.config.animation = false;
    this.hide();
    this.show();
    this.config.animation = initConfigAnimation;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TooltipService, "CONSTANTS", {
  NAME,
  VERSION,
  DATA_KEY,
  EVENT_KEY,
  CLASS_PREFIX,
  BSCLS_PREFIX_REGEX,
  DISALLOWED_ATTRIBUTES,
  DefaultType,
  AttachmentMap,
  Default,
  Event,
  CLASS_NAME_FADE,
  CLASS_NAME_MODAL,
  CLASS_NAME_SHOW,
  HOVER_STATE_SHOW,
  HOVER_STATE_OUT,
  SELECTOR_TOOLTIP_INNER,
  TRIGGER_HOVER,
  TRIGGER_FOCUS,
  TRIGGER_CLICK,
  TRIGGER_MANUAL
});

/* harmony default export */ __webpack_exports__["default"] = (TooltipService);

/***/ }),

/***/ "../../packages/cache/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/cache/src/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCache; },
/* harmony export */   "createCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.createCache; },
/* harmony export */   "idbCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.idbCache; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/cache/src/services/index.ts");


/***/ }),

/***/ "../../packages/cache/src/services/base-cache.service.ts":
/*!***************************************************************!*\
  !*** ../../packages/cache/src/services/base-cache.service.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* binding */ BaseCache; }
/* harmony export */ });
/**
 * BaseCache it's a simple static cache
 */
class BaseCache {
  /**
   * The Object that keeps all the key value information
   */
  constructor() {
    this.data = {};
  }
  /**
   * Set a key and value data, mainly Barba is going to save promises
   *
   */


  set(key, val) {
    this.data[key] = val;
    return this.data[key];
  }
  /**
   * Retrieve the data using the key
   */


  get(key) {
    return this.data[key];
  }
  /**
   * Flush the cache
   */


  reset() {
    this.data = {};
  }

}



/***/ }),

/***/ "../../packages/cache/src/services/idb-cache.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/cache/src/services/idb-cache.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "idbCache": function() { return /* binding */ idbCache; }
/* harmony export */ });
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! keshi */ "../../.yarn/cache/keshi-npm-2.0.7-6176689b72-04800290a8.zip/node_modules/keshi/src/index.js");
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(keshi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ "../../.yarn/cache/idb-keyval-npm-6.1.0-ef1e338e42-431a746773.zip/node_modules/idb-keyval/dist/index.js");


const idbStorage = {
  get: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get,
  set: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set,
  keys: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys,
  del: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del,
  clear: () => {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)();
  }
};
const idbCache = keshi__WEBPACK_IMPORTED_MODULE_0___default()({
  // Use default memory storage on ssr
  customStorage: window.ssr ? undefined : idbStorage
});


/***/ }),

/***/ "../../packages/cache/src/services/index.ts":
/*!**************************************************!*\
  !*** ../../packages/cache/src/services/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* reexport safe */ _base_cache_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseCache; },
/* harmony export */   "createCache": function() { return /* reexport default from dynamic */ keshi__WEBPACK_IMPORTED_MODULE_0___default.a; },
/* harmony export */   "idbCache": function() { return /* reexport safe */ _idb_cache_service_js__WEBPACK_IMPORTED_MODULE_2__.idbCache; }
/* harmony export */ });
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! keshi */ "../../.yarn/cache/keshi-npm-2.0.7-6176689b72-04800290a8.zip/node_modules/keshi/src/index.js");
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(keshi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _base_cache_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-cache.service.js */ "../../packages/cache/src/services/base-cache.service.ts");
/* harmony import */ var _idb_cache_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idb-cache.service.js */ "../../packages/cache/src/services/idb-cache.service.ts");





/***/ }),

/***/ "../../packages/core/src/adapters/dot.adapter.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/adapters/dot.adapter.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DotAdapter": function() { return /* binding */ DotAdapter; },
/* harmony export */   "dotAdapter": function() { return /* binding */ dotAdapter; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class DotAdapter {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "name", ".");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "counter", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "weakmap", {});
  }

  weakReference(obj) {
    if (!Object.hasOwnProperty.bind(obj)("__rv")) {
      const id = this.counter++;
      Object.defineProperty(obj, "__rv", {
        value: id
      });
    }

    if (!this.weakmap[obj.__rv]) {
      this.weakmap[obj.__rv] = {
        callbacks: {}
      };
    }

    return this.weakmap[obj.__rv];
  }

  cleanupWeakReference(ref, id) {
    if (!Object.keys(ref.callbacks).length) {
      if (!(ref.pointers && Object.keys(ref.pointers).length)) {
        delete this.weakmap[id];
      }
    }
  }

  stubFunction(obj, fn) {
    const original = obj[fn];
    const map = this.weakReference(obj);
    const weakmap = this.weakmap;

    obj[fn] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      const response = original.apply(obj, args);
      Object.keys(map.pointers).forEach(r => {
        const k = map.pointers[r];

        if (weakmap[r]) {
          if (Array.isArray(weakmap[r].callbacks[k])) {
            weakmap[r].callbacks[k].forEach(callback => {
              callback.sync();
            });
          }
        }
      });
      return response;
    };
  }

  observeMutations(obj, ref, keypath) {
    if (Array.isArray(obj)) {
      const map = this.weakReference(obj);

      if (!map.pointers) {
        map.pointers = {};
        DotAdapter.ARRAY_METHODS.forEach(fn => {
          this.stubFunction(obj, fn);
        });
      }

      if (!map.pointers[ref]) {
        map.pointers[ref] = [];
      }

      if (map.pointers[ref].indexOf(keypath) === -1) {
        map.pointers[ref].push(keypath);
      }
    }
  }

  unobserveMutations(obj, ref, keypath) {
    if (Array.isArray(obj) && obj.__rv != null) {
      const map = this.weakmap[obj.__rv];

      if (map) {
        const pointers = map.pointers[ref];

        if (pointers) {
          const idx = pointers.indexOf(keypath);

          if (idx > -1) {
            pointers.splice(idx, 1);
          }

          if (!pointers.length) {
            delete map.pointers[ref];
          }

          this.cleanupWeakReference(map, obj.__rv);
        }
      }
    }
  }

  observe(obj, keypath, callback) {
    let value;
    const callbacks = this.weakReference(obj).callbacks;

    if (!callbacks[keypath]) {
      callbacks[keypath] = [];
      const desc = Object.getOwnPropertyDescriptor(obj, keypath);

      if (!desc || !(desc.get || desc.set || !desc.configurable)) {
        value = obj[keypath];
        Object.defineProperty(obj, keypath, {
          enumerable: true,
          get: () => {
            return value;
          },
          set: newValue => {
            if (newValue !== value) {
              this.unobserveMutations(value, obj.__rv, keypath);
              value = newValue;
              const map = this.weakmap[obj.__rv];

              if (map) {
                const _callbacks = map.callbacks[keypath];

                if (_callbacks) {
                  _callbacks.forEach(cb => {
                    cb.sync();
                  });
                }

                this.observeMutations(newValue, obj.__rv, keypath);
              }
            }
          }
        });
      }
    }

    if (callbacks[keypath].indexOf(callback) === -1) {
      callbacks[keypath].push(callback);
    }

    this.observeMutations(obj[keypath], obj.__rv, keypath);
  }

  unobserve(obj, keypath, callback) {
    const map = this.weakmap[obj.__rv];

    if (map) {
      const callbacks = map.callbacks[keypath];

      if (callbacks) {
        const idx = callbacks.indexOf(callback);

        if (idx > -1) {
          callbacks.splice(idx, 1);

          if (!callbacks.length) {
            delete map.callbacks[keypath];
            this.unobserveMutations(obj[keypath], obj.__rv, keypath);
          }
        }

        this.cleanupWeakReference(map, obj.__rv);
      }
    }
  }

  get(obj, keypath) {
    return obj[keypath];
  }

  set(obj, keypath, value) {
    obj[keypath] = value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DotAdapter, "ARRAY_METHODS", ["push", "pop", "shift", "unshift", "sort", "reverse", "splice"]);

const dotAdapter = new DotAdapter();


/***/ }),

/***/ "../../packages/core/src/adapters/index.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/adapters/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotAdapter": function() { return /* reexport safe */ _dot_adapter_js__WEBPACK_IMPORTED_MODULE_0__.dotAdapter; }
/* harmony export */ });
/* harmony import */ var _dot_adapter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot.adapter.js */ "../../packages/core/src/adapters/dot.adapter.ts");


/***/ }),

/***/ "../../packages/core/src/binder.ts":
/*!*****************************************!*\
  !*** ../../packages/core/src/binder.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Binder": function() { return /* binding */ Binder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants/formatter.js */ "../../packages/core/src/constants/formatter.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");





/**
 * A single binding between a model attribute and a DOM element.
 */

class Binder {
  /**
   * The name of the binder to access the binder by
   */

  /**
   * Blocks the current node and child nodes from being parsed (used for iteration binding as well as the if/unless binders).
   */

  /**
   * Set this to true if you want view.publish() to call publish on these bindings.
   */

  /**
   * Priority of the binder, binders with higher priority are applied first
   */

  /**
   * The routine function is called when an observed attribute on the model changes and is used to update the DOM. When defining a one-way binder as a single function, it is actually the routine function that you're defining.
   */

  /**
   * This function will get called for this binding on the initial `view.bind()`. Use it to store some initial state on the binding, or to set up any event listeners on the element.
   */

  /**
   * This function will get called for this binding on `view.unbind()`. Use it to reset any state on the element that would have been changed from the routine getting called, or to unbind any event listeners on the element that you've set up in the `binder.bind` function.
   */

  /**
   * Updates the binding's model from what is currently set on the view.
   * Unbinds the old model first and then re-binds with the new model.
   */

  /**
   * The getValue function is called when the binder wants to set the value on the model. This function takes the HTML element as only parameter
   */

  /**
   * All information about the binding is passed into the constructor; the
   * containing view, the DOM node, the type of binding, the model object and the
   * keypath at which to listen for changes.
   * @param {*} view
   * @param {*} el
   * @param {*} type
   * @param {*} keypath
   * @param {*} binder
   * @param {*} args The start binders, on `class-*` args[0] wil be the classname.
   * @param {*} formatters
   */
  constructor(view, el, type, name, keypath, formatters, identifier) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formatterObservers", {});

    this.view = view;
    this.el = el;
    this.type = type;
    this.name = name;
    this.keypath = keypath;
    this.formatters = formatters;
    this.model = undefined;

    if (identifier && type) {
      this.args = this.getStarArguments(identifier, type);
    } else {
      this.args = new Array();
    }
  }
  /**
   * Observes the object keypath
   * @param obj
   * @param keypath
   */


  observe(obj, keypath, callback) {
    return new _observer_js__WEBPACK_IMPORTED_MODULE_2__.Observer(obj, keypath, callback);
  }

  parseTarget() {
    if (this.keypath) {
      const token = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.parseType)(this.keypath, true);

      if (token.type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.PRIMITIVE) {
        this.value = token.value;
      } else if (token.type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.KEYPATH) {
        this.observer = this.observe(this.view.models, this.keypath, this);
        this.model = this.observer.target;
      } else {
        throw new Error("[".concat(this.name, "] Unknown type in token"));
      }
    } else {
      this.value = undefined;
    }
  }
  /**
   * Get the iteration alias, used in the interaction binders like `each-*`
   * @param {*} modelName
   * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L26
   * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L1175
   */


  getIterationAlias(modelName) {
    return "%" + modelName + "%";
  }

  parseFormatterArguments(args, formatterIndex) {
    return args.map(arg => (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.parseType)(arg, true)).map((_ref, ai) => {
      let {
        type,
        value
      } = _ref;

      if (type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.PRIMITIVE) {
        const primitiveValue = value;
        return primitiveValue;
      } else if (type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.KEYPATH) {
        // keypath is string
        const keypath = value;

        if (!this.formatterObservers[formatterIndex]) {
          this.formatterObservers[formatterIndex] = {};
        }

        let observer = this.formatterObservers[formatterIndex][ai];

        if (!observer) {
          observer = this.observe(this.view.models, keypath, this);
          this.formatterObservers[formatterIndex][ai] = observer;
        }

        return observer.value();
      } else {
        throw new Error("[".concat(this.name, "] Unknown argument type"));
      }
    });
  }
  /**
   * Applies all the current formatters to the supplied value and returns the
   * formatted value.
   */


  formattedValue(value) {
    let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (this.formatters === null) {
      throw new Error("[".concat(this.name, " formatters is null"));
    } // If any intermediate result is a promise continue the chain (with startIndex set) after it is resolved.


    let promised = false;
    const formatters = startIndex ? this.formatters.slice(startIndex) : this.formatters;
    return formatters.reduce((result, declaration, index) => {
      if (promised) {
        return result;
      }

      const args = declaration.match(_constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__.FORMATTER_ARGS);

      if (args === null) {
        console.warn(new Error("[".concat(this.name, "] No args matched with regex \"FORMATTER_ARGS\"!\nvalue: ").concat(JSON.stringify(value), "\nresult: ").concat(JSON.stringify(result), "\ndeclaration: ").concat(JSON.stringify(declaration), "\nindex: ").concat(index, "\n")));
        return result;
      }

      const id = args.shift();

      if (!id) {
        throw new Error("[".concat(this.name, "] No formatter id found in args!"));
      }

      if (!this.view.options.formatters) {
        throw new Error("[".concat(this.name, "] No formatters are defined!"));
      }

      const formatter = this.view.options.formatters[id];

      if (!formatter) {
        throw new Error("[".concat(this.name, "] No formatters with id \"").concat(id, "\" found!"));
      }

      const processedArgs = this.parseFormatterArguments(args, index); // get formatter read funcion

      if (formatter && typeof formatter.read === "function") {
        result = formatter.read.apply(this.model, [result, ...processedArgs]);
      } // If result is a promise, and this is not the last formatter in the chain


      if (index < formatters.length - 1 && result && typeof result.then === "function" && typeof result.catch === "function") {
        promised = true;
        return result.then(value => this.formattedValue(value, index + 1));
      }

      return result;
    }, value);
  }
  /**
   * Returns an event handler for the binding around the supplied function.
   * This event Handler is mainly used by the on-* binder
   * @param fn The function to call by the handler
   * @param el The element the event was triggered from
   */


  eventHandler(fn, el) {
    const handler = this.view.options.handler;
    return ev => {
      if (!handler) {
        throw new Error("No handler defined in binding.view.options.handler");
      }

      handler.call(fn, this, ev, this, el);
    };
  }
  /**
   * Sets the value for the binding. This Basically just runs the binding routine
   * with the supplied value formatted.
   */


  set(value) {
    try {
      value = this.formattedValue(value);
    } catch (error) {
      console.error(error);
      return value;
    }

    if (typeof this.routine === "function") {
      // If value is a promise
      if (value && typeof value.then === "function" && typeof value.catch === "function") {
        value.then(realValue => {
          this.routine(this.el, realValue);
        }).catch(error => {
          console.error(error);
        });
      } else {
        this.routine(this.el, value);
      }
    }
  }
  /**
   * Syncs up the view binding with the model.
   */


  sync() {
    if (this.observer) {
      this.model = this.observer.target;
      this.set(this.observer.value());
    } else {
      this.set(this.value);
    }
  }
  /**
   * Publishes the value currently set on the input element (or any other which implements getValue) back to the model.
   * An example of the use of this method are the following binders:
   * - ElementBinder
   * - ValueBinder
   * - (Un)CheckedBinder
   */


  publish() {
    if (this.observer) {
      if (this.formatters === null) {
        throw new Error("formatters is null");
      }

      const value = this.formatters.reduceRight((result, declaration, index) => {
        const args = declaration.split(_constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__.FORMATTER_SPLIT);
        const id = args.shift();

        if (!id) {
          throw new Error("id not defined");
        }

        if (!this.view.options.formatters) {
          return undefined;
        }

        const formatter = this.view.options.formatters[id];
        const processedArgs = this.parseFormatterArguments(args, index);

        if (formatter && typeof formatter.publish === "function") {
          result = formatter.publish(result, ...processedArgs);
        }

        return result;
      }, this._getValue(this.el));
      this.observer.setValue(value);
    }
  }
  /**
   * Subscribes to the model for changes at the specified keypath. Bi-directional
   * routines will also listen for changes on the element to propagate them back
   * to the model.
   */


  _bind() {
    this.parseTarget();

    if (this.bind) {
      if (typeof this.bind !== "function") {
        throw new Error("the method bind is not a function");
      }

      this.bind(this.el);
    }

    if (this.view.options.preloadData) {
      this.sync();
    }
  }
  /**
   * Unsubscribes from the model and the element.
   */


  _unbind() {
    if (this.unbind) {
      this.unbind(this.el);
    }

    if (this.observer) {
      this.observer.unobserve();
    }

    Object.keys(this.formatterObservers).forEach(fi => {
      const args = this.formatterObservers[fi];
      Object.keys(args).forEach(ai => {
        args[ai].unobserve();
      });
    });
    this.formatterObservers = {};
  }
  /**
   * Updates the binding's model from what is currently set on the view. Unbinds
   * the old model first and then re-binds with the new model.
   * @param {any} models
   */


  _update() {
    let models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.observer) {
      this.model = this.observer.target;
    }

    if (typeof this.update === "function") {
      this.update(models);
    }
  }
  /**
   * Returns elements value
   * @param el
   */


  _getValue(el) {
    if (typeof this.getValue === "function") {
      return this.getValue(el);
    } else {
      return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.getInputValue)(el);
    }
  }

  getStarArguments(identifier, type) {
    var _type$match;

    const regexp = this.view.binderRegex(identifier);
    const match = ((_type$match = type.match(regexp)) === null || _type$match === void 0 ? void 0 : _type$match.slice(1)) || [];
    return match;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Binder, "key", "");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Binder, "block", false);

/***/ }),

/***/ "../../packages/core/src/binders/add-class.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/add-class.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddClassBinder": function() { return /* binding */ AddClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * add-class
 * Adds the value of the attribute to the class.
 * Instead of `class-[classname]` the classname is defined by the
 * attribute value and not by the star value.
 * @example
 * <ul>
 *   <li rv-each-todo="todos">
 *     <div rv-add-class="todo.state"></div>
 *   </li>
 * <ul>
 */

class AddClassBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  bind(el) {
    // Note: We use el.getAttribute("class") instead of el.className here to also support svg elements
    const className = el.getAttribute("class") || "";
    this.staticClasses = className.split(" ");
  }

  unbind() {
    delete this.staticClasses;
  }

  routine(el, newValue) {
    if (newValue) {
      var _this$staticClasses;

      if (((_this$staticClasses = this.staticClasses) === null || _this$staticClasses === void 0 ? void 0 : _this$staticClasses.indexOf(newValue)) === -1) {
        el.setAttribute("class", this.staticClasses.join(" ") + " " + newValue);
      }
    } else {
      if (this.staticClasses) {
        el.setAttribute("class", this.staticClasses.join(" "));
      }
    }

    const className = el.getAttribute("class");

    if (className) {
      el.setAttribute("class", className.trim());
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AddClassBinder, "key", "add-class");

/***/ }),

/***/ "../../packages/core/src/binders/animate-classname.binder.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/binders/animate-classname.binder.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimateStarBinder": function() { return /* binding */ AnimateStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * animate-{class}
 * Add / remove animation class with start and done affix
 */

class AnimateStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  bind(el) {
    const animateClassName = this.args[0];
    el.classList.add(animateClassName);
  }

  routine(el, start) {
    const animateClassName = this.args[0];

    if (start) {
      el.classList.add(animateClassName + "-start");
      el.classList.remove(animateClassName + "-done");
    } else {
      el.classList.remove(animateClassName + "-start");
      el.classList.add(animateClassName + "-done");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AnimateStarBinder, "key", "animate-*");

/***/ }),

/***/ "../../packages/core/src/binders/assign-property.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/binders/assign-property.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssignPropertyBinder": function() { return /* binding */ AssignPropertyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * assign-*
 * Assign a value in your model.
 * Sets or overwrites a value by his property name (named whatever value is in place of [property]) in your model.
 * @example
 * <div rv-assign-new='"hello"'>{new}</div>
 */

class AssignPropertyBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const propertyName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(this.args[0].trim());
    const obj = {};
    obj[propertyName] = value;
    this.view.models[propertyName] = value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AssignPropertyBinder, "key", "assign-*");

/***/ }),

/***/ "../../packages/core/src/binders/assign.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/assign.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssignBinder": function() { return /* binding */ AssignBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * assign
 * Assign a value in your model.
 * The value you want to assign must be an object and will be concatenate with your model.
 * @example
 * <div rv-assign='{"newValue": "hello", "anotherNewValue": "world"}'>{newValue} {anotherNewValue}!</div>
 */

class AssignBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value === "object") {
      return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
        deep: false
      }, this.view.models, value);
    }

    console.warn("Value must be an object or propertyName is required");
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AssignBinder, "key", "assign");

/***/ }),

/***/ "../../packages/core/src/binders/attribute.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/attribute.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeBinder": function() { return /* binding */ AttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * Sets the attribute on the element. If no binder above is matched it will fall
 * back to using this binder.
 */

class AttributeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, newValue) {
    if (!this.type) {
      throw new Error("Can't set attribute of " + this.type);
    }

    const {
      newValue: newValueFormatted,
      oldValue,
      changed
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.setAttribute)(el, this.type, newValue);

    if (changed) {
      el.dispatchEvent(new CustomEvent("binder-changed", {
        detail: {
          name: this.type,
          newValue: newValueFormatted,
          oldValue
        }
      }));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AttributeBinder, "key", "attr-*");

/***/ }),

/***/ "../../packages/core/src/binders/block.binder.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/binders/block.binder.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlockBinder": function() { return /* binding */ BlockBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * block
 * Blocks the binding for the current element and his childs.
 * @note Please note that `<script></script>`, `<style type="text/css"></style>`, `<template></template>` and `<code></code>` tags are blocked by default.
 * You can change this by setting the `blockNodeNames` option.
 * @example
 * <div rv-block="">
 *  <!-- After binding you should see `{ value }` because the binding is blocked here -->
 *  { value }
 * </div>
 */

class BlockBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine() {
    /**/
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BlockBinder, "key", "block");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BlockBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/checked.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/checked.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CheckedBinder": function() { return /* binding */ CheckedBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




/**
 * checked
 * Checks a checkbox or radio input when the value is true. Also sets the model
 * property when the input is checked or unchecked (two-way binder).
 */

class CheckedBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 2000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  bind(el) {
    el.addEventListener("change", this.onChange);
  }

  unbind(el) {
    el.removeEventListener("change", this.onChange);
  }

  routine(el, newValue) {
    let oldValue;

    if (!this._getValue) {
      console.warn("this._getValue is not a function, this: ", this);
      oldValue = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
    } else {
      oldValue = this._getValue(el);
    }

    if (el.type === "radio") {
      el.checked = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(oldValue) === (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(newValue);
    } else {
      if (oldValue !== newValue) {
        el.checked = !!newValue;
      }
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CheckedBinder, "key", "checked");

/***/ }),

/***/ "../../packages/core/src/binders/class-name.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/binders/class-name.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClassStarBinder": function() { return /* binding */ ClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * class-*
 * class-[classname]
 *
 * Adds a class (whatever value is in place of [classname]) on the element
 * when the value evaluates to true and removes that class if the value
 * evaluates to false.
 * @example
 * <li rv-class-completed="todo.done">{ todo.name }</li>
 */

class ClassStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    } // Note: We use el.getAttribute("class") instead of el.className here to also support svg elements


    const className = el.getAttribute("class") || "";
    const classList = className.split(" ").filter(ele => ele !== "");
    const arg = this.args[0].trim();
    const idx = classList.indexOf(arg);

    if (idx === -1) {
      if (value) {
        el.setAttribute("class", "".concat(className, " ").concat(arg));
      }
    } else if (!value) {
      el.setAttribute("class", classList.filter((_, i) => i !== idx).join(" "));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ClassStarBinder, "key", "class-*");

/***/ }),

/***/ "../../packages/core/src/binders/co-attribute.binder.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/binders/co-attribute.binder.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentAttributeBinder": function() { return /* binding */ ComponentAttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



const NO_RIBA_COMPONENT_ERROR_MESSAGE = '[componentAttributeBinder] You can only use the "rv-co-*" binder on Riba components, but "{tagName}" is not registered.';
/**
 * co-*
 * Pass a riba model / scope value to your component without first converting it as an attribute
 */

class ComponentAttributeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);
  }

  __routine(el, value) {
    const attrName = this.args[0].trim();

    if (el.setBinderAttribute) {
      el.setBinderAttribute(attrName, value);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  async routine(el, value) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.__routine(el, value);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);

      this.__routine(el, value);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  __bind(el) {
    this.attributeName = this.args[0].toString().trim();

    if (typeof el.observeAttribute !== "function") {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
      return;
    }

    this.componentAttributeObserver = el.observeAttribute(this.attributeName, {
      sync: () => {
        this.publish();
      }
    });
  }

  async bind(el) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.__bind(el);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);

      this.__bind(el);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  unbind() {
    var _this$componentAttrib;

    (_this$componentAttrib = this.componentAttributeObserver) === null || _this$componentAttrib === void 0 ? void 0 : _this$componentAttrib.unobserve();
  }

  getValue(el) {
    const attrName = this.args[0].trim();
    const val = el.getBinderAttribute(attrName);
    return val;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ComponentAttributeBinder, "key", "co-*");

/***/ }),

/***/ "../../packages/core/src/binders/disabled.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/disabled.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DisabledBinder": function() { return /* binding */ DisabledBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Disables the element when value is true (negated version of `enabled` binder).
 */

class DisabledBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.disabled = !!value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DisabledBinder, "key", "disabled");

/***/ }),

/***/ "../../packages/core/src/binders/draggable.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/draggable.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoDragBinder": function() { return /* binding */ NoDragBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * This binder can be used to disable (or enable) dragging ghost image for browser which have no support for the css feature `user-select: none;` like firefox.
 * This binder is useful in combination with the `scrollbar-draggable` binder.
 */

class NoDragBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "enable", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onDrag", this._onDrag.bind(this));
  }

  _onDrag(event) {
    if (!this.enable) {
      // Ignore event is draggable is disabled
      event.preventDefault();
    }
  }

  /** This method is called every time the attribute values changes */
  routine(el, enable) {
    this.enable = enable;
    el.setAttribute("draggable", enable ? "true" : "false");
  }
  /** This method is called as soon as Riba bounds this binder */


  bind(el) {
    el.addEventListener("dragstart", this.onDrag, true);
  }
  /** This method is called as soon as Riba unbound this binder */


  unbind(el) {
    el.removeAttribute("draggable");
    el.removeEventListener("dragstart", this.onDrag, true);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(NoDragBinder, "key", "draggable");

/***/ }),

/***/ "../../packages/core/src/binders/each-item.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/each-item.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EachStarBinder": function() { return /* binding */ EachStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");




/**
 * each-*
 * Appends bound instances of the element in place for each item in the array.
 */

class EachStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 4000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "iterated", []);
  }

  bind(el) {
    if (!this.marker) {
      var _window, _window$document, _el$parentNode;

      this.marker = (_window = window) === null || _window === void 0 ? void 0 : (_window$document = _window.document) === null || _window$document === void 0 ? void 0 : _window$document.createComment(" riba: ".concat(this.type, " "));

      if (!((_el$parentNode = el.parentNode) !== null && _el$parentNode !== void 0 && _el$parentNode.insertBefore) || !this.marker) {// console.warn('No parent node!');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else {
      this.iterated.forEach(view => {
        view.bind();
      });
    }
  }

  unbind() {
    if (this.iterated) {
      this.iterated.forEach(view => {
        view.unbind();
      });
    }
  }

  routine(el, collection) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    let isObject = false;
    const modelName = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.camelCase)(this.args[0].toString());
    collection = collection || []; // Transform object to array to iterate over

    if (!Array.isArray(collection) && typeof collection === "object" && collection !== null) {
      collection = Object.entries(collection).map(_ref => {
        let [key, value] = _ref;
        return {
          key,
          value
        };
      });
      isObject = true;
    }

    if (!Array.isArray(collection)) {
      throw new Error("each-".concat(this.args[0], " needs an array or object to iterate over, but it is ").concat(typeof collection));
    } // if index name is set by `index-property` use this name, otherwise `%[modelName]%`


    const indexProp = el.getAttribute("index-property") || this.getIterationAlias(modelName);
    collection.forEach((model, index) => {
      const scope = {
        $parent: this.view.models
      }; // Is object transformed to array

      if (isObject) {
        scope[indexProp] = model.key;
        scope[modelName] = model.value;
      } // Is Array
      else {
        scope[indexProp] = index;
        scope[modelName] = model;
      }

      let view = this.iterated[index];

      if (!view) {
        let previous;

        if (this.iterated.length) {
          previous = this.iterated[this.iterated.length - 1].els[0];
        } else if (this.marker) {
          previous = this.marker;
        }

        if (!previous) {
          return;
        }

        view = _view_js__WEBPACK_IMPORTED_MODULE_1__.View.create(this, scope, previous.nextSibling);
        this.iterated.push(view);
      } else {
        if (view.models[modelName] !== model) {
          // search for a view that matches the model
          let matchIndex;
          let nextView = this.iterated[index];

          for (let nextIndex = index + 1; nextIndex < this.iterated.length; nextIndex++) {
            nextView = this.iterated[nextIndex];

            if (nextView.models[modelName] === model) {
              matchIndex = nextIndex;
              break;
            }
          }

          if (matchIndex !== undefined) {
            var _this$marker$parentNo;

            // model is in other position
            // TODO: consider avoiding the splice here by setting a flag
            // profile performance before implementing such change
            this.iterated.splice(matchIndex, 1);

            if (!this.marker || !((_this$marker$parentNo = this.marker.parentNode) !== null && _this$marker$parentNo !== void 0 && _this$marker$parentNo.insertBefore)) {
              throw new Error("Marker has no parent node");
            }

            if (nextView && nextView.els[0] && view.els[0]) {
              this.marker.parentNode.insertBefore(nextView.els[0], view.els[0]);
            }

            nextView.models[indexProp] = index;
          } else {
            // new model
            nextView = _view_js__WEBPACK_IMPORTED_MODULE_1__.View.create(this, scope, view.els[0]);
          }

          this.iterated.splice(index, 0, nextView);
        } else {
          view.models[indexProp] = index;
        }
      }
    });

    if (this.iterated.length > collection.length) {
      (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.times)(this.iterated.length - collection.length, () => {
        const view = this.iterated.pop();

        if (!view) {
          throw new Error("view is undefined!");
        }

        view.unbind();

        if (!this.marker || !this.marker.parentNode) {
          throw new Error("Marker has no parent node");
        }

        this.marker.parentNode.removeChild(view.els[0]);
      });
    }

    if (el.nodeName === "OPTION" && this.view.bindings) {
      this.view.bindings.forEach(binding => {
        if (this.marker && binding.el === this.marker.parentNode && binding.type === "value" && binding.sync) {
          binding.sync();
        }
      });
    }
  }

  update(models) {
    const data = {}; // TODO: add test and fix if necessary

    Object.keys(models).forEach(key => {
      if (this.args === null) {
        throw new Error("args is null");
      }

      if (key !== this.args[0]) {
        data[key] = models[key];
      }
    });
    this.iterated.forEach(view => {
      view.update(data);
    });
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachStarBinder, "key", "each-*");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachStarBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/element.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/element.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementBinder": function() { return /* binding */ ElementBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets a reference to the HTML element into the scope
 */

class ElementBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);
  }

  bind() {
    this.publish();
  }

  routine() {//
  }

  getValue(el) {
    return el;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ElementBinder, "key", "element");

/***/ }),

/***/ "../../packages/core/src/binders/enabled.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/enabled.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnabledBinder": function() { return /* binding */ EnabledBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Enables the element when value is true.
 */

class EnabledBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.disabled = !value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EnabledBinder, "key", "enabled");

/***/ }),

/***/ "../../packages/core/src/binders/flex-sort-childs.binder.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/binders/flex-sort-childs.binder.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FlexSortChildsBinder": function() { return /* binding */ FlexSortChildsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * sort-childs using flex order
 */

class FlexSortChildsBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 90000);
  }

  routine(el, descending) {
    const childrens = Array.from(el.children);
    childrens.sort((a, b) => {
      if (!a.dataset.sortBy || !b.dataset.sortBy) {
        return 0;
      }

      if (a.dataset.sortBy < b.dataset.sortBy) {
        return descending ? 1 : -1;
      }

      if (a.dataset.sortBy > b.dataset.sortBy) {
        return descending ? -1 : 1;
      }

      return 0;
    });

    for (let i = 0; i < childrens.length; i++) {
      const child = childrens[i];
      child.style.order = i.toString();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(FlexSortChildsBinder, "key", "flex-sort-childs");

/***/ }),

/***/ "../../packages/core/src/binders/hide.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/hide.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HideBinder": function() { return /* binding */ HideBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Hides the element when value is true (negated version of `show` binder).
 */

class HideBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.style.display = value ? "none" : "";

    if (value) {
      el.setAttribute("hidden", "true");
    } else {
      el.removeAttribute("hidden");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HideBinder, "key", "hide");

/***/ }),

/***/ "../../packages/core/src/binders/html.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/html.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HtmlBinder": function() { return /* binding */ HtmlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets the element's text value.
 */

class HtmlBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value !== "string") {
      var _value;

      if (typeof ((_value = value) === null || _value === void 0 ? void 0 : _value.toString) === "function") {
        value = value.toString();
      } else {
        console.warn("[HtmlBinder] Value is not a string", value);
        value = JSON.stringify(value);
      }
    }

    el.innerHTML = value || "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HtmlBinder, "key", "html");

/***/ }),

/***/ "../../packages/core/src/binders/if.binder.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/binders/if.binder.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IfBinder": function() { return /* binding */ IfBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");



/**
 * if
 * Inserts and binds the element and it's child nodes into the DOM when true.
 */

class IfBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 4000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "attached", false);
  }

  bind(el) {
    if (!this.marker) {
      var _window, _window$document, _el$parentNode;

      this.marker = (_window = window) === null || _window === void 0 ? void 0 : (_window$document = _window.document) === null || _window$document === void 0 ? void 0 : _window$document.createComment(" riba: " + this.type + " " + this.keypath + " ");
      this.attached = false;

      if (!((_el$parentNode = el.parentNode) !== null && _el$parentNode !== void 0 && _el$parentNode.insertBefore)) {// console.warn('Element has no parent node');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else if (this.nested) {
      this.nested.bind();
    }
  }

  unbind() {
    if (this.nested) {
      this.nested.unbind();
    }
  }

  routine(el, value) {
    value = !!value;

    if (value !== this.attached) {
      if (value) {
        if (!this.nested) {
          this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
          this.nested.bind();
        }

        if (!this.marker || !this.marker.parentNode) {// console.warn('Marker has no parent node');
        } else {
          this.marker.parentNode.insertBefore(el, this.marker.nextSibling);
        }

        this.attached = true;
      } else {
        if (!el.parentNode) {// console.warn('Element has no parent node');
        } else {
          el.parentNode.removeChild(el);
        }

        this.attached = false;
      }
    }
  }

  update(models) {
    if (this.nested) {
      this.nested.update(models);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IfBinder, "key", "if");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IfBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/index.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/binders/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddClassBinder": function() { return /* reexport safe */ _add_class_binder_js__WEBPACK_IMPORTED_MODULE_1__.AddClassBinder; },
/* harmony export */   "AnimateStarBinder": function() { return /* reexport safe */ _animate_classname_binder_js__WEBPACK_IMPORTED_MODULE_0__.AnimateStarBinder; },
/* harmony export */   "AssignBinder": function() { return /* reexport safe */ _assign_binder_js__WEBPACK_IMPORTED_MODULE_3__.AssignBinder; },
/* harmony export */   "AssignPropertyBinder": function() { return /* reexport safe */ _assign_property_binder_js__WEBPACK_IMPORTED_MODULE_2__.AssignPropertyBinder; },
/* harmony export */   "AttributeBinder": function() { return /* reexport safe */ _attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBinder; },
/* harmony export */   "BlockBinder": function() { return /* reexport safe */ _block_binder_js__WEBPACK_IMPORTED_MODULE_5__.BlockBinder; },
/* harmony export */   "CheckedBinder": function() { return /* reexport safe */ _checked_binder_js__WEBPACK_IMPORTED_MODULE_6__.CheckedBinder; },
/* harmony export */   "ClassStarBinder": function() { return /* reexport safe */ _class_name_binder_js__WEBPACK_IMPORTED_MODULE_7__.ClassStarBinder; },
/* harmony export */   "ComponentAttributeBinder": function() { return /* reexport safe */ _co_attribute_binder_js__WEBPACK_IMPORTED_MODULE_8__.ComponentAttributeBinder; },
/* harmony export */   "DisabledBinder": function() { return /* reexport safe */ _disabled_binder_js__WEBPACK_IMPORTED_MODULE_9__.DisabledBinder; },
/* harmony export */   "EachStarBinder": function() { return /* reexport safe */ _each_item_binder_js__WEBPACK_IMPORTED_MODULE_11__.EachStarBinder; },
/* harmony export */   "ElementBinder": function() { return /* reexport safe */ _element_binder_js__WEBPACK_IMPORTED_MODULE_12__.ElementBinder; },
/* harmony export */   "EnabledBinder": function() { return /* reexport safe */ _enabled_binder_js__WEBPACK_IMPORTED_MODULE_13__.EnabledBinder; },
/* harmony export */   "FlexSortChildsBinder": function() { return /* reexport safe */ _flex_sort_childs_binder_js__WEBPACK_IMPORTED_MODULE_14__.FlexSortChildsBinder; },
/* harmony export */   "HideBinder": function() { return /* reexport safe */ _hide_binder_js__WEBPACK_IMPORTED_MODULE_15__.HideBinder; },
/* harmony export */   "HtmlBinder": function() { return /* reexport safe */ _html_binder_js__WEBPACK_IMPORTED_MODULE_16__.HtmlBinder; },
/* harmony export */   "IfBinder": function() { return /* reexport safe */ _if_binder_js__WEBPACK_IMPORTED_MODULE_17__.IfBinder; },
/* harmony export */   "MaxlengthBinder": function() { return /* reexport safe */ _maxlength_binder_js__WEBPACK_IMPORTED_MODULE_18__.MaxlengthBinder; },
/* harmony export */   "NoDragBinder": function() { return /* reexport safe */ _draggable_binder_js__WEBPACK_IMPORTED_MODULE_10__.NoDragBinder; },
/* harmony export */   "OnEventBinder": function() { return /* reexport safe */ _on_event_binder_js__WEBPACK_IMPORTED_MODULE_19__.OnEventBinder; },
/* harmony export */   "ParentBinder": function() { return /* reexport safe */ _parent_binder_js__WEBPACK_IMPORTED_MODULE_20__.ParentBinder; },
/* harmony export */   "ReadonlyBinder": function() { return /* reexport safe */ _readonly_binder_js__WEBPACK_IMPORTED_MODULE_21__.ReadonlyBinder; },
/* harmony export */   "RemoveClassBinder": function() { return /* reexport safe */ _remove_class_binder_js__WEBPACK_IMPORTED_MODULE_22__.RemoveClassBinder; },
/* harmony export */   "ShowBinder": function() { return /* reexport safe */ _show_binder_js__WEBPACK_IMPORTED_MODULE_23__.ShowBinder; },
/* harmony export */   "SrcsetSizeBinder": function() { return /* reexport safe */ _srcset_size_binder_js__WEBPACK_IMPORTED_MODULE_24__.SrcsetSizeBinder; },
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* reexport safe */ _style_background_image_binder_js__WEBPACK_IMPORTED_MODULE_25__.StyleBackgroundImageBinder; },
/* harmony export */   "StyleBinder": function() { return /* reexport safe */ _style_property_binder_js__WEBPACK_IMPORTED_MODULE_27__.StyleBinder; },
/* harmony export */   "StyleStarBinder": function() { return /* reexport safe */ _style_css_property_binder_js__WEBPACK_IMPORTED_MODULE_26__.StyleStarBinder; },
/* harmony export */   "TagStarBinder": function() { return /* reexport safe */ _tag_name_binder_js__WEBPACK_IMPORTED_MODULE_28__.TagStarBinder; },
/* harmony export */   "TemplateBinder": function() { return /* reexport safe */ _template_binder_js__WEBPACK_IMPORTED_MODULE_29__.TemplateBinder; },
/* harmony export */   "TextBinder": function() { return /* reexport safe */ _text_binder_js__WEBPACK_IMPORTED_MODULE_30__.TextBinder; },
/* harmony export */   "ToggleOnEventBinder": function() { return /* reexport safe */ _toggle_on_event_binder_js__WEBPACK_IMPORTED_MODULE_31__.ToggleOnEventBinder; },
/* harmony export */   "UncheckedBinder": function() { return /* reexport safe */ _unchecked_binder_js__WEBPACK_IMPORTED_MODULE_32__.UncheckedBinder; },
/* harmony export */   "UnlessBinder": function() { return /* reexport safe */ _unless_binder_js__WEBPACK_IMPORTED_MODULE_33__.UnlessBinder; },
/* harmony export */   "ValueBinder": function() { return /* reexport safe */ _value_binder_js__WEBPACK_IMPORTED_MODULE_34__.ValueBinder; }
/* harmony export */ });
/* harmony import */ var _animate_classname_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animate-classname.binder.js */ "../../packages/core/src/binders/animate-classname.binder.ts");
/* harmony import */ var _add_class_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-class.binder.js */ "../../packages/core/src/binders/add-class.binder.ts");
/* harmony import */ var _assign_property_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assign-property.binder.js */ "../../packages/core/src/binders/assign-property.binder.ts");
/* harmony import */ var _assign_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assign.binder.js */ "../../packages/core/src/binders/assign.binder.ts");
/* harmony import */ var _attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./attribute.binder.js */ "../../packages/core/src/binders/attribute.binder.ts");
/* harmony import */ var _block_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block.binder.js */ "../../packages/core/src/binders/block.binder.ts");
/* harmony import */ var _checked_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./checked.binder.js */ "../../packages/core/src/binders/checked.binder.ts");
/* harmony import */ var _class_name_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./class-name.binder.js */ "../../packages/core/src/binders/class-name.binder.ts");
/* harmony import */ var _co_attribute_binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./co-attribute.binder.js */ "../../packages/core/src/binders/co-attribute.binder.ts");
/* harmony import */ var _disabled_binder_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./disabled.binder.js */ "../../packages/core/src/binders/disabled.binder.ts");
/* harmony import */ var _draggable_binder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./draggable.binder.js */ "../../packages/core/src/binders/draggable.binder.ts");
/* harmony import */ var _each_item_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./each-item.binder.js */ "../../packages/core/src/binders/each-item.binder.ts");
/* harmony import */ var _element_binder_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./element.binder.js */ "../../packages/core/src/binders/element.binder.ts");
/* harmony import */ var _enabled_binder_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./enabled.binder.js */ "../../packages/core/src/binders/enabled.binder.ts");
/* harmony import */ var _flex_sort_childs_binder_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./flex-sort-childs.binder.js */ "../../packages/core/src/binders/flex-sort-childs.binder.ts");
/* harmony import */ var _hide_binder_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hide.binder.js */ "../../packages/core/src/binders/hide.binder.ts");
/* harmony import */ var _html_binder_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./html.binder.js */ "../../packages/core/src/binders/html.binder.ts");
/* harmony import */ var _if_binder_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./if.binder.js */ "../../packages/core/src/binders/if.binder.ts");
/* harmony import */ var _maxlength_binder_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./maxlength.binder.js */ "../../packages/core/src/binders/maxlength.binder.ts");
/* harmony import */ var _on_event_binder_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./on-event.binder.js */ "../../packages/core/src/binders/on-event.binder.ts");
/* harmony import */ var _parent_binder_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parent.binder.js */ "../../packages/core/src/binders/parent.binder.ts");
/* harmony import */ var _readonly_binder_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./readonly.binder.js */ "../../packages/core/src/binders/readonly.binder.ts");
/* harmony import */ var _remove_class_binder_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./remove-class.binder.js */ "../../packages/core/src/binders/remove-class.binder.ts");
/* harmony import */ var _show_binder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./show.binder.js */ "../../packages/core/src/binders/show.binder.ts");
/* harmony import */ var _srcset_size_binder_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./srcset-size.binder.js */ "../../packages/core/src/binders/srcset-size.binder.ts");
/* harmony import */ var _style_background_image_binder_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./style-background-image.binder.js */ "../../packages/core/src/binders/style-background-image.binder.ts");
/* harmony import */ var _style_css_property_binder_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./style-css-property.binder.js */ "../../packages/core/src/binders/style-css-property.binder.ts");
/* harmony import */ var _style_property_binder_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./style-property.binder.js */ "../../packages/core/src/binders/style-property.binder.ts");
/* harmony import */ var _tag_name_binder_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./tag-name.binder.js */ "../../packages/core/src/binders/tag-name.binder.ts");
/* harmony import */ var _template_binder_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./template.binder.js */ "../../packages/core/src/binders/template.binder.ts");
/* harmony import */ var _text_binder_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./text.binder.js */ "../../packages/core/src/binders/text.binder.ts");
/* harmony import */ var _toggle_on_event_binder_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./toggle-on-event.binder.js */ "../../packages/core/src/binders/toggle-on-event.binder.ts");
/* harmony import */ var _unchecked_binder_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./unchecked.binder.js */ "../../packages/core/src/binders/unchecked.binder.ts");
/* harmony import */ var _unless_binder_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./unless.binder.js */ "../../packages/core/src/binders/unless.binder.ts");
/* harmony import */ var _value_binder_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./value.binder.js */ "../../packages/core/src/binders/value.binder.ts");


















 // export * from "./mustache-text.binder.js";


















/***/ }),

/***/ "../../packages/core/src/binders/maxlength.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/maxlength.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MaxlengthBinder": function() { return /* binding */ MaxlengthBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * maxlength
 */

class MaxlengthBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, maxLength) {
    if (typeof maxLength === "number") {
      el.setAttribute("maxlength", maxLength.toString());
      el.maxLength = maxLength;
    } else {
      el.removeAttribute("maxlength");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(MaxlengthBinder, "key", "maxlength");

/***/ }),

/***/ "../../packages/core/src/binders/mustache-text.binder.ts":
/*!***************************************************************!*\
  !*** ../../packages/core/src/binders/mustache-text.binder.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MustacheTextBinder": function() { return /* binding */ MustacheTextBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


class MustacheTextBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(node, value) {
    node.data = value != null ? value : "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(MustacheTextBinder, "key", "mustache-text");

/***/ }),

/***/ "../../packages/core/src/binders/on-event.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/on-event.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OnEventBinder": function() { return /* binding */ OnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Binds an event handler on the element.
 */

class OnEventBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  unbind(el) {
    if (this.handler) {
      if (this.args === null) {
        throw new Error("args is null");
      }

      const eventName = this.args[0];
      el.removeEventListener(eventName, this.handler);
    }
  }

  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0]; // see https://github.com/microsoft/TypeScript/issues/32912

    const options = {
      passive: this.el.dataset.passive === "true" // data-passive="true"

    };

    if (this.handler) {
      el.removeEventListener(eventName, this.handler, options);
    }

    this.handler = this.eventHandler(value, el).bind(this);
    el.addEventListener(eventName, this.handler, options);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(OnEventBinder, "key", "on-*");

/***/ }),

/***/ "../../packages/core/src/binders/parent.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/parent.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentBinder": function() { return /* binding */ ParentBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * parent
 * Binds the parent scope to your component
 */

class ParentBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine() {
    /**/
  }

  bindIntern(el) {
    if (el.setBinderAttribute) {
      el.setBinderAttribute("$parent", this.view.models);
    } else {
      console.warn("[parentBinder] You can only use this binder on Riba components", el.localName, customElements.get(el.localName));
    }
  }

  async bind(el) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.bindIntern(el);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      console.info("[parentBinder] CustomElement ".concat(el.localName, " has been defined, but is not yet upgraded. Waiting for upgrade.."), el);
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);
      this.bindIntern(el);
    } else {
      console.warn("[parentBinder] You can only use this binder on Riba components", el.localName);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ParentBinder, "key", "parent");

/***/ }),

/***/ "../../packages/core/src/binders/readonly.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/readonly.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReadonlyBinder": function() { return /* binding */ ReadonlyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * readonly
 */

class ReadonlyBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, readOnly) {
    readOnly = !!readOnly;
    el.readOnly = readOnly;

    if (readOnly) {
      el.setAttribute("readonly", "");
    } else {
      el.removeAttribute("readonly");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ReadonlyBinder, "key", "readonly");

/***/ }),

/***/ "../../packages/core/src/binders/remove-class.binder.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/binders/remove-class.binder.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoveClassBinder": function() { return /* binding */ RemoveClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * remove-class
 * Removes the given class string the class attibute.
 * Instead of `class-[classname]` the classname is removed by the
 * given attribute and not by the star value,
 * @example
 * <img class="loading" rv-src="img.src" rv-remove-class="loadingClass">
 */

class RemoveClassBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.staticClassesString = el.className;
  }

  routine(el, value) {
    const regex = new RegExp("\\b".concat(value, "\\b"), "g");

    if (!this.staticClassesString) {
      throw new Error("staticClassesString is undefined!");
    }

    el.className = this.staticClassesString.replace(regex, "").trim();
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RemoveClassBinder, "key", "remove-class");

/***/ }),

/***/ "../../packages/core/src/binders/show.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/show.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShowBinder": function() { return /* binding */ ShowBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Shows the element when value is true (negated version of `hide` binder).
 */

class ShowBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.style.display = value ? "" : "none";

    if (value) {
      el.removeAttribute("hidden");
    } else {
      el.setAttribute("hidden", "true");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShowBinder, "key", "show");

/***/ }),

/***/ "../../packages/core/src/binders/srcset-size.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/binders/srcset-size.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SrcsetSizeBinder": function() { return /* binding */ SrcsetSizeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * srcset-size
 * Sets an url with size to the `srcset` attribute
 */

class SrcsetSizeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    const size = this.args[0];
    let srcset = el.getAttribute("srcset");

    if (typeof srcset !== "string") {
      srcset = "";
    }

    if (typeof url === "string" && url.length > 0) {
      const seperator = srcset.length > 0 ? ", " : ""; // Add size to srcset attribute

      srcset += "".concat(seperator).concat(url, " ").concat(size);
    } else {
      // Remove size from srcset attribute
      let sizes = srcset.split(",");
      sizes = sizes.map(iterSize => iterSize.trim());
      sizes = sizes.filter(iterSize => !(iterSize.indexOf(size) !== -1));
      srcset = sizes.join(", ") || "";
    }

    el.setAttribute("srcset", srcset);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(SrcsetSizeBinder, "key", "srcset-*");

/***/ }),

/***/ "../../packages/core/src/binders/style-background-image.binder.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/binders/style-background-image.binder.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* binding */ StyleBackgroundImageBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * style-*
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style-background-image="'/image.png'"></div>
 * ```
 */

class StyleBackgroundImageBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const prop = "background-image";

    if (value === null || value === undefined || value === "") {
      el.style.removeProperty(prop);
    } else {
      el.style.setProperty(prop, "url(".concat(value, ")"));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleBackgroundImageBinder, "key", "style-background-image");

/***/ }),

/***/ "../../packages/core/src/binders/style-css-property.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/binders/style-css-property.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleStarBinder": function() { return /* binding */ StyleStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * style-*
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style-background-color="'blue'"></div>
 * ```
 */

class StyleStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const propertyName = this.args[0];

    if (value === null || value === undefined || value === "") {
      el.style.removeProperty(propertyName.toString());
    } else {
      el.style.setProperty(propertyName.toString(), value);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleStarBinder, "key", "style-*");

/***/ }),

/***/ "../../packages/core/src/binders/style-property.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/core/src/binders/style-property.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleBinder": function() { return /* binding */ StyleBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * style
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style="{'backgroundColor':'blue'}"></div>
 * ```
 */

class StyleBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (value) {
      if (typeof value === "string") {
        el.setAttribute("style", value);
      } else {
        for (const key of Object.keys(value)) {
          el.style.setProperty((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.kebabCase)(key), value[key] || null);
        }
      }
    } else {
      for (const key of Object.keys(el.style)) {
        el.style.removeProperty(key);
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleBinder, "key", "style");

/***/ }),

/***/ "../../packages/core/src/binders/tag-name.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/tag-name.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagStarBinder": function() { return /* binding */ TagStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * tag-*
 * tag-[tagname]
 *
 * Changes the html tag (whatever value is in place of [tagname]) of the element
 * when the value evaluates to true and reverts to the original tag name if the value evaluates to false.
 *
 * TODO test me on value change
 *
 * @example
 * <div rv-tag-a="item.hasHref">{ item.label }</div>
 */

class TagStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", -1000);
  }

  bind(el) {
    this.originalTag = el.tagName.toLowerCase();
  }

  routine(oldEl, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const curTagName = this.el.tagName.toLowerCase();
    let tagName;

    if (value) {
      tagName = this.args[0].trim().toLowerCase();
    } else if (this.originalTag) {
      tagName = this.originalTag.toLowerCase();
    } else {
      throw new Error("Tag name not found!");
    }

    if (curTagName !== tagName) {
      const newEl = document.createElement(tagName); // Move childs to new element we use this instead if innerHTML to keep the binders alive on this childs

      while (oldEl.childNodes.length > 0) {
        if (oldEl.firstChild) {
          newEl.appendChild(oldEl.firstChild);
        }
      } // Copy attributes to new element


      const attributes = Array.prototype.slice.call(oldEl.attributes);

      for (const attribute of attributes) {
        newEl.setAttribute(attribute.name, attribute.value);
      } // Replace the old element with the new element


      if (oldEl.parentNode) {
        oldEl.parentNode.replaceChild(newEl, oldEl);
      } else {
        console.warn("No parent");
      }

      this.el = newEl;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TagStarBinder, "key", "tag-*");

/***/ }),

/***/ "../../packages/core/src/binders/template.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/template.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplateBinder": function() { return /* binding */ TemplateBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");



/**
 * template
 * Similar to rv-html but also binds the html with riba, so you can also use binders and components in this templates.
 */

class TemplateBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
  }

  routine(el, value) {
    var _this$nested, _this$nested2;

    (_this$nested = this.nested) === null || _this$nested === void 0 ? void 0 : _this$nested.unbind();
    el.innerHTML = value ? value : "";
    this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
    (_this$nested2 = this.nested) === null || _this$nested2 === void 0 ? void 0 : _this$nested2.bind();
  }

  unbind() {
    var _this$nested3;

    (_this$nested3 = this.nested) === null || _this$nested3 === void 0 ? void 0 : _this$nested3.unbind();
  }

  update(models) {
    var _this$nested4;

    (_this$nested4 = this.nested) === null || _this$nested4 === void 0 ? void 0 : _this$nested4.update(models);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TemplateBinder, "key", "template");

/***/ }),

/***/ "../../packages/core/src/binders/text.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/text.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextBinder": function() { return /* binding */ TextBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets the element's text value.
 */

class TextBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value !== "string") {
      var _value;

      if (typeof ((_value = value) === null || _value === void 0 ? void 0 : _value.toString) === "function") {
        value = value.toString();
      } else {
        console.warn("[TextBinder] Can't convert value \"".concat(value, "\" to string! Element: "), el);
      }
    }

    el.textContent = value || "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TextBinder, "key", "text");

/***/ }),

/***/ "../../packages/core/src/binders/toggle-on-event.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/binders/toggle-on-event.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleOnEventBinder": function() { return /* binding */ ToggleOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Toggles a boolean variable to true/false if the event is triggered.
 */

class ToggleOnEventBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  toggle() {
    if (this.propertyKey) {
      this.view.models[this.propertyKey] = !this.view.models[this.propertyKey];
    }
  }

  bind(el) {
    const eventName = this.args[0];
    const passive = this.el.dataset.passive === "true"; // data-passive="true"

    el.addEventListener(eventName, this.toggle, {
      passive
    });
  }

  unbind(el) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0];
    el.removeEventListener(eventName, this.toggle);
  }

  routine(el, propertyKey) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.propertyKey = propertyKey;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleOnEventBinder, "key", "toggle-on-*");

/***/ }),

/***/ "../../packages/core/src/binders/unchecked.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/unchecked.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UncheckedBinder": function() { return /* binding */ UncheckedBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




/**
 * unchecked
 * Unchecks a checkbox or radio input when the value is true (negated version of
 * `checked` binder). Also sets the model property when the input is checked or
 * unchecked (two-way binder).
 */

class UncheckedBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 2000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  bind(el) {
    el.addEventListener("change", this.onChange);
  }

  unbind(el) {
    el.removeEventListener("change", this.onChange);
  }

  routine(el, value) {
    if (el.type === "radio") {
      el.checked = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(el.value) !== (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(value);
    } else {
      el.checked = !value;
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(UncheckedBinder, "key", "unchecked");

/***/ }),

/***/ "../../packages/core/src/binders/unless.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/unless.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnlessBinder": function() { return /* binding */ UnlessBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _if_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./if.binder.js */ "../../packages/core/src/binders/if.binder.ts");


/**
 * unless
 * Removes and unbinds the element and it's child nodes into the DOM when true
 * (negated version of `if` binder).
 */

class UnlessBinder extends _if_binder_js__WEBPACK_IMPORTED_MODULE_1__.IfBinder {
  routine(el, value) {
    return super.routine(el, !value);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(UnlessBinder, "key", "unless");

/***/ }),

/***/ "../../packages/core/src/binders/value.binder.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/binders/value.binder.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueBinder": function() { return /* binding */ ValueBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



const DEFAULT_EVENTS = "change input paste blur focus";
/**
 * Sets the element's value. Also sets the model property when the input changes
 * (two-way binder).
 */

class ValueBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 3000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  getData(el) {
    const data = {
      type: el.type,
      tagName: el.tagName,
      contenteditable: el.getAttribute("contenteditable") ? true : false,
      isRadio: false,
      isOption: false
    };
    data.isRadio = data.tagName === "INPUT" && data.type === "radio";
    data.isOption = data.tagName === "OPTION";
    return data;
  }

  bind(el) {
    if (el.tagName === "OPTION") {
      return;
    }

    const data = this.getData(el);

    if (!data.isRadio) {
      this.event = el.getAttribute("event-name") || DEFAULT_EVENTS;
      const events = this.event.split(" ");

      for (const event of events) {
        el.addEventListener(event.trim(), this.onChange, false);
      }
    }
  }

  unbind(el) {
    if (this.event) {
      const events = this.event.split(" ");

      for (const event in events) {
        el.removeEventListener(event.trim(), this.onChange);
      }
    }
  }

  routine(el, newValue) {
    let oldValue = this.getValue(el);

    if (!Array.isArray(newValue)) {
      if (newValue != null) {
        newValue = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getString)(newValue);
      } else {
        newValue = "";
      }
    }

    if (!Array.isArray(oldValue)) {
      if (oldValue != null) {
        oldValue = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getString)(oldValue);
      } else {
        oldValue = "";
      }
    }

    if (oldValue === newValue) {
      // nothing changed
      return;
    }

    const data = this.getData(el);

    if (data.isRadio || data.isOption) {
      return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.setAttribute)(el, "value", newValue);
    }

    if (el.type === "select-multiple") {
      if (Array.isArray(newValue)) {
        for (let i = 0; i < el.options.length; i++) {
          const option = el.options[i];
          option.selected = newValue.indexOf(option.value) > -1;
        }
      }
    } else if (el.getAttribute("contenteditable")) {
      el.innerHTML = newValue; // TODO write test for contenteditable
    } else {
      el.value = newValue;
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ValueBinder, "key", "value");

/***/ }),

/***/ "../../packages/core/src/component/basic-component.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/component/basic-component.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasicComponent": function() { return /* binding */ BasicComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/types */ "../types/index.js");
/* harmony import */ var _ribajs_jsx_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/jsx/src/index.js */ "../../packages/jsx/src/index.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/color.js */ "../../packages/utils/src/color.ts");


/**
 * Auto parse custom element attributes
 *
 * @see https://developer.mozilla.org/de/docs/Web/Web_Components/Using_custom_elements
 */





class BasicComponent extends HTMLElement {
  /**
   * Used to check if all passed observedAttributes are initialized
   */
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateLoaded", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "observedAttributesToCheck", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "observedAttributes", []);

    if (this._debug) {
      this._color = (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.getRandomColor)();
    }
  }
  /**
   * Remove this custom element
   */


  remove() {
    if (this && this.parentElement) {
      this.parentElement.removeChild(this);
    }
  }

  _log(mode) {
    const namespace = this.constructor.name || this.tagName;

    if (!this._color) {
      this._color = (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.getRandomColor)();
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.consoleColoured)({
      namespace,
      color: this._color,
      mode
    }, ...args);
  }

  info() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return this._log("info", ...args);
  }

  debug() {
    if (!this._debug) {
      return;
    }

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return this._log("debug", ...args);
  }

  error() {
    console.error(...arguments);
  }
  /**
   * returns a list of attributes which are required until the riba binding starts
   */


  requiredAttributes() {
    return [];
  }

  async init(observedAttributes) {
    this.loadAttributes(observedAttributes);
    this.getPassedObservedAttributes(observedAttributes);
    return;
  }

  ready() {
    return this.allPassedObservedAttributesAreInitialized() && this.checkRequiredAttributes();
  }
  /**
   * Check if the attribute (e.g. `src`) is passed to this custom element
   * @param observedAttribute
   */


  attributeIsPassed(observedAttribute) {
    return this.hasAttribute(observedAttribute);
  }
  /**
   * Get passed observed attributes, used to check if all passed attributes are initialized
   * @param observedAttributes
   */


  getPassedObservedAttributes(observedAttributes) {
    const oa2c = this.observedAttributesToCheck;

    for (const observedAttribute of observedAttributes) {
      if (!oa2c[observedAttribute]) {
        oa2c[observedAttribute] = {
          passed: false,
          initialized: false
        };
      } else {
        if (!oa2c[observedAttribute].passed) {
          oa2c[observedAttribute].passed = this.attributeIsPassed(observedAttribute);
        }
      }
    }
  }
  /**
   * Checks if all passed observed attributes are initialized
   */


  allPassedObservedAttributesAreInitialized() {
    return Object.keys(this.observedAttributesToCheck).every(key => {
      var _this$observedAttribu, _this$observedAttribu2;

      return !((_this$observedAttribu = this.observedAttributesToCheck[key]) !== null && _this$observedAttribu !== void 0 && _this$observedAttribu.passed) || ((_this$observedAttribu2 = this.observedAttributesToCheck[key]) === null || _this$observedAttribu2 === void 0 ? void 0 : _this$observedAttribu2.initialized);
    });
  }
  /**
   * Required attributes before the view is bound
   *
   * The attributeChangedCallback is called for each attribute which updates the riba view each time
   * which can have a big impact on performance or required attributes are not yet available which can lead to errors.
   * So define required attributes and the view is ony bind the first time after all this attributes are transmitted.
   */


  checkRequiredAttributes() {
    return this.requiredAttributes().every(requiredAttribute => {
      requiredAttribute = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(requiredAttribute);
      return this.scope.hasOwnProperty(requiredAttribute) && typeof this.scope[requiredAttribute] !== "undefined";
    });
  }

  parseAttribute(attr) {
    let value = attr;

    if (typeof attr !== "string") {
      return attr;
    }

    if (attr === "true") {
      value = true;
    } else if (attr === "false") {
      value = false;
    } else if (attr === "null") {
      value = null;
    } else if (attr === "undefined") {
      value = undefined;
    } else if (attr === "") {
      value = undefined;
    } else if (!isNaN(Number(attr))) {
      value = Number(attr); // If number is too large store the value as string

      if (value >= Number.MAX_SAFE_INTEGER) {
        value = attr;
      }
    } else {
      const jsonString = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.parseJsonString)(value);
      value = jsonString ? jsonString : value;
    }

    return value;
  }
  /**
   * Returns an event handler for the bindings (most on-*) inside this component.
   */


  eventHandler(self) {
    // IMPORTANT this must be a function and not a Arrow Functions
    return function (context, event, binding, el) {
      if (!this || !this.call) {
        const error = new Error("[rv-".concat(binding.type, "=\"").concat(binding.keypath, "\"] Event handler \"").concat(binding.keypath, "\" not found!\""));
        console.error(binding, el);
        throw error;
      }

      this.call(self, event, binding.view.models, el);
    };
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {// console.warn('connectedCallback called');
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is disconnected from the document's DOM.
   */


  disconnectedCallback() {// if (this.bound && this.view) {
    //   // IMPORTANT ROUTE FIXME, if we unbind the component then it will no longer work if it is retrieved from the cache and the connectedCallback is called
    //   // because the riba attributes are removed. We need a solution for that, maybe we do not remove the attributes or we recreate the attributes
    //   // See view bind / unbind methods for that.
    //   // only unbind if cache is not enabled?
    //   this.unbind();
    // }
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    // this.debug("attributeChangedCallback", attributeName, newValue);
    if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
      this.observedAttributesToCheck[attributeName].initialized = true;
    }

    newValue = this.parseAttribute(newValue);
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);

    if (this.scope && this.scope[parsedAttributeName]) {
      oldValue = this.scope[parsedAttributeName];
    } // automatically inject observed attributes to view scope


    this.scope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

    this.parsedAttributeChangedCallback(parsedAttributeName, oldValue, newValue, namespace);
  }
  /**
   * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    this.debug("parsedAttributeChangedCallback called", attributeName, oldValue, newValue, namespace);
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * Note: Not supported on polyfill: https://github.com/webcomponents/custom-elements#known-bugs-and-limitations
   * @param oldDocument
   * @param newDocument
   */


  adoptedCallback(oldDocument, newDocument) {
    this.debug("adoptedCallback called", oldDocument, newDocument);
  }

  async loadTemplate() {
    if (this.templateLoaded === true) {
      // this.debug("template already loaded");
      return null;
    }

    if (!this.checkRequiredAttributes()) {
      this.debug("Not all required attributes are set to load the template");
      return null;
    }

    this.templateLoaded = true;
    const template = await this.template(); // if innerHTML is null this component uses the innerHTML which he already has!

    try {
      if (template) {
        if (template instanceof HTMLElement) {
          this.innerHTML = "";
          this.appendChild(template);
        } else if (typeof template === "string") {
          this.innerHTML = template;
        } else if (template.tag) {
          this.innerHTML = (0,_ribajs_jsx_src_index_js__WEBPACK_IMPORTED_MODULE_2__.renderElement)(template);
        }
      }

      return template;
    } catch (error) {
      this.templateLoaded = false;
      throw error;
    }
  }

  async beforeTemplate() {// this.debug('beforeTemplate');
  }

  async afterTemplate(template) {
    this.debug("afterTemplate", template);
  }

  async onReady() {// this.debug('onReady', this.bound);
  }
  /**
   * Observes a object keypath in the scope
   * @param keypath
   * @param callback
   */


  observe(keypath, callback) {
    return new _observer_js__WEBPACK_IMPORTED_MODULE_3__.Observer(this.scope, keypath, callback);
  }
  /**
   * Observes a attributeName
   * @param attributeName
   * @param callback
   */


  observeAttribute(attributeName, callback) {
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    return this.observe(parsedAttributeName, callback);
  }
  /**
   * Directly set a attribute value in the scope.
   * This method is meant to be called from the outside, e.g. from a binder or another component.
   * @note This method is used in the componentAttributeBinder
   * @param attributeName
   * @param newValue
   * @param namespace
   */


  setBinderAttribute(attributeName, newValue) {
    let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    const oldValue = this.scope[parsedAttributeName];
    this.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  }
  /**
   * Directly get a attribute value from the scope.
   * This method is meant to be called from the outside, e.g. from a binder or another component.
   * @note This method is used in the componentAttributeBinder
   * @param attributeName
   * @returns
   */


  getBinderAttribute(attributeName) {
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    const value = this.scope[parsedAttributeName];
    return value;
  }
  /**
   * Load all attributes and calls the attributeChangedCallback for each attribute.
   * Please note: Normally the browser calls the attributeChangedCallback for you
   */


  loadAttributes(observedAttributes) {
    const attributes = this.attributes;

    for (const i in attributes) {
      const attribute = attributes[i];
      const name = attribute.nodeName;

      if (observedAttributes.indexOf(name) !== -1) {
        const newValue = attribute.nodeValue;
        this.attributeChangedCallback(name, undefined, newValue, null);
      }
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/component/component.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/component/component.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Component": function() { return /* binding */ Component; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _riba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../riba.js */ "../../packages/core/src/riba.ts");
/* harmony import */ var _basic_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basic-component.js */ "../../packages/core/src/component/basic-component.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");


/**
 * This implementation of components replaces the old components of rivets following the Web Components v1 specs
 *
 * @see https://developer.mozilla.org/de/docs/Web/Web_Components/Using_custom_elements
 */




class Component extends _basic_component_js__WEBPACK_IMPORTED_MODULE_3__.BasicComponent {
  /** true when binding is in progress */

  /** true when binding is done */

  /** true when component is connected to the dom */

  /** true when component is disconnected from the dom */

  /** true when binding is in progress */
  get binds() {
    return this._binds;
  }
  /** true when binding is done */


  get bound() {
    return this._bound;
  }
  /** true when component is connected to the dom */


  get connected() {
    return this._connected;
  }
  /** true when component is disconnected from the dom */


  get disconnected() {
    return this._disconnected;
  }
  /**
   * If true the component will automatically bind the component to riba if all required attributes are set.
   */


  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "view", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_binds", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_bound", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_connected", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_disconnected", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lifecycleEvents", _ribajs_events__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher.getInstance("lifecycle"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    this.lifecycleEvents.trigger("Component:constructor", this.getLifecycleEventData());
    this.lifecycleEvents.on("ComponentLifecycle:allBound", this.afterAllBind, this);
  }

  async init(observedAttributes) {
    try {
      await super.init(observedAttributes);
      this.lifecycleEvents.trigger("Component:init", this.getLifecycleEventData());
      return this.bindIfReady();
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Use this to throw critical errors within the component
   *
   * @protected
   * @param {Error} error
   * @memberof Component
   */


  throw(error) {
    if (error.message) {
      console.error("[".concat(this.tagName, "] ").concat(error.message));
    }

    this.lifecycleEvents.trigger("Component:error", error, this.getLifecycleEventData());
    this.error(error);
  }
  /**
   * If `autobind` is true this component will bind riba automatically in this component if all all passed observed and required attributes are initialized
   */


  async bindIfReady() {
    /**
     * After all required and passed attributes are set we load the template and bind the component
     */
    if (this.ready()) {
      await this.beforeTemplate();
      const template = await this.loadTemplate();
      await this.afterTemplate(template);

      if (this.autobind) {
        await this.bind();
      }

      await this.onReady();
      return;
    }

    this.debug("Not all required or passed attributes are set to load and bind the template", this.observedAttributesToCheck, this.scope);
    return;
  }
  /** Only internal used */


  async _beforeBind() {
    this._binds = true;
    this.debug("Start to bind Riba");
    this.lifecycleEvents.trigger("Component:beforeBind", this.getLifecycleEventData());
  }
  /** Used to handle stuff before binding starts */


  async beforeBind() {// this.debug("beforeBind", this.scope);
  }
  /** Only internal used */


  async _afterBind() {
    this._binds = false;
    this._bound = true;
    this.lifecycleEvents.trigger("Component:afterBind", this.getLifecycleEventData());
  }
  /** Used to handle stuff after binding is done */


  async afterBind() {// this.debug("afterBind", this.scope);
  }
  /**
   * Called after component binding is done for all current components.
   * Please note: this method is called every time a route changes, so be careful with this method.
   */


  async afterAllBind() {// this.debug("afterBind", this.scope);
  }

  getLifecycleEventData() {
    const data = {
      tagName: this.tagName.toLowerCase(),
      // scope: this.scope,
      component: this // id: this.id,

    };
    return data;
  }
  /**
   * Event handler to listen for publish binder event for two-way-binding in web components
   */
  // protected publish(name: string, newValue: any, namespace: string | null) {
  //   this.dispatchEvent(
  //     new CustomEvent("publish-binder-change:" + name, {
  //       detail: {
  //         name,
  //         newValue,
  //         namespace: null, // TODO
  //       },
  //     })
  //   );
  // }

  /**
   * Default custom Element method
   * Invoked when the custom element is disconnected from the document's DOM.
   */


  disconnectedCallback() {
    try {
      this._disconnected = true;
      this._connected = false;
      super.disconnectedCallback(); // IMPORTANT ROUTE FIXME, if we unbind the component then it will no longer work if it is retrieved from the cache and the connectedCallback is called
      // because the riba attributes are removed. We need a solution for that, maybe we do not remove the attributes or we recreate the attributes
      // See view bind / unbind methods for that.
      // only unbind if cache is not enabled?
      // if (this._binds && this.view) {
      //   this.unbind();
      // }

      this.lifecycleEvents.trigger("Component:disconnected", this.getLifecycleEventData());
      this.lifecycleEvents.off("ComponentLifecycle:allBound", this.afterAllBind, this);
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {
    try {
      this._disconnected = false;
      this._connected = true;
      super.connectedCallback();
      this.lifecycleEvents.trigger("Component:connected", this.getLifecycleEventData());
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    try {
      super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
      await this.bindIfReady();
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Extra call formatter to avoid the "this" context problem
   */


  callFormatterHandler(self) {
    return {
      name: "call",
      read: function (fn) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (!fn) {
          throw new Error("[".concat(self.tagName, "] Can not use \"call\" formatter: fn is undefined!"));
        }

        return fn.apply(self, args);
      }
    };
  }
  /**
   * Extra args formatter to avoid the "this" context problem
   *
   * Sets arguments to a function without directly call them
   * @param fn The function you wish to call
   * @param args the parameters you wish to call the function with
   */


  argsFormatterHandler(self) {
    return {
      name: "args",
      read: function (fn) {
        for (var _len2 = arguments.length, fnArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          fnArgs[_key2 - 1] = arguments[_key2];
        }

        return (event, scope, el, binding) => {
          if (!fn) {
            throw new Error("[".concat(self.tagName, "] Can not use \"args\" formatter: fn is undefined!"));
          } // append the event handler args to passed args


          fnArgs.push(event);
          fnArgs.push(scope);
          fnArgs.push(el);
          fnArgs.push(binding);
          return fn.apply(self, fnArgs);
        };
      }
    };
  }

  async bind() {
    if (this.binds || this.bound) {
      // this.debug("component already bound");
      return this.view;
    }

    if (!this.checkRequiredAttributes()) {
      this.debug("Not all required attributes are set for bind");
      return;
    }

    try {
      await this._beforeBind();
      await this.beforeBind();
      this.riba = new _riba_js__WEBPACK_IMPORTED_MODULE_2__.Riba();
      this.view = this.getView();

      if (this.view) {
        this.scope = this.view.models;
        this.view.bind();
      }

      await this._afterBind();
      await this.afterBind();
    } catch (error) {
      this._binds = false;
      this._bound = false;
      this.throw(error);
    }

    return this.view;
  }

  getView() {
    try {
      var _this$riba;

      const viewOptions = (_this$riba = this.riba) === null || _this$riba === void 0 ? void 0 : _this$riba.getViewOptions({
        handler: this.eventHandler(this),
        formatters: {
          call: this.callFormatterHandler(this),
          args: this.argsFormatterHandler(this)
        }
      });

      if (viewOptions) {
        const view = new _view_js__WEBPACK_IMPORTED_MODULE_1__.View(Array.prototype.slice.call(this.childNodes), this.scope, viewOptions);
        return view;
      }

      return null;
    } catch (error) {
      this.throw(error);
    }
  }

  async unbind() {
    try {
      if (this.view) {
        this._binds = false;
        this._bound = false;
        this.view.unbind();
        this.view = null;
      }
    } catch (error) {
      this.throw(error);
    }
  }

  async build() {
    try {
      if (this.view) {
        this.view.build();
      }
    } catch (error) {
      this.throw(error);
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/component/index.ts":
/*!**************************************************!*\
  !*** ../../packages/core/src/component/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasicComponent": function() { return /* reexport safe */ _basic_component_js__WEBPACK_IMPORTED_MODULE_1__.BasicComponent; },
/* harmony export */   "Component": function() { return /* reexport safe */ _component_js__WEBPACK_IMPORTED_MODULE_0__.Component; }
/* harmony export */ });
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component.js */ "../../packages/core/src/component/component.ts");
/* harmony import */ var _basic_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic-component.js */ "../../packages/core/src/component/basic-component.ts");



/***/ }),

/***/ "../../packages/core/src/components/index.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/components/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Do not export abstract components: export { TemplatesComponent } from "./templates/templates.component.js";


/***/ }),

/***/ "../../packages/core/src/components/templates/templates.component.ts":
/*!***************************************************************************!*\
  !*** ../../packages/core/src/components/templates/templates.component.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplatesComponent": function() { return /* binding */ TemplatesComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }



class TemplatesComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateReady", false);
  }

  connectedCallback() {
    this.addItemsByTemplate();
    super.connectedCallback();
    this.removeTemplates();
    this.bindIfReady();
  }

  ready() {
    return super.ready() && this.templateReady;
  }
  /**
   * Called before getting attribute value, use this method to transform the attribute value if you wish
   * @param name Attribute name
   * @param value Attribute value
   */


  transformTemplateAttribute(name, value, type) {
    switch (type) {
      case "number":
        return Number(value);

      case "boolean":
        return value === "true";

      case "string":
        if (typeof value === "string") {
          return value;
        }

        if (typeof (value === null || value === void 0 ? void 0 : value.toString) === "function") {
          return value.toString();
        }

      case "object":
        return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonString)(value);
    }

    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseType)(value).value;
  }
  /**
   * Called before getting all attribute values, use this method to transform the attribute values if you wish
   * @param attributes
   */


  transformTemplateAttributes(attributes, index) {
    attributes.index = attributes.index || index;
    return attributes;
  }

  getTemplateAttributes(tpl, index) {
    const attributes = {};

    for (const attribute of this.templateAttributes) {
      const attrValue = tpl.getAttribute(attribute.name);

      if (typeof attrValue !== "string" && attribute.required) {
        console.error(new Error("template \"".concat(attribute.name, "\" attribute is required!")));
      } else {
        attributes[(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(attribute.name)] = this.transformTemplateAttribute(attribute.name, tpl.getAttribute(attribute.name));
      }
    }

    return this.transformTemplateAttributes(attributes, index);
  }

  addItemByTemplate(tpl, index) {
    const attributes = this.getTemplateAttributes(tpl, index);
    const content = tpl.innerHTML;

    if (!this.scope.items) {
      this.scope.items = [];
    }

    this.scope.items.push(_objectSpread(_objectSpread({}, attributes), {}, {
      content
    }));
  }

  addItemsByTemplate() {
    const templates = this.querySelectorAll("template, .template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      this.addItemByTemplate(tpl, index);
    }

    this.templateReady = true;
  }

  removeTemplates() {
    const templates = this.querySelectorAll("template, .template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      this.removeChild(tpl);
    }
  }

  hasOnlyTemplateChilds() {
    return !Array.from(this.children).some(child => {
      var _child$classList;

      return child.nodeName !== "TEMPLATE" && !((_child$classList = child.classList) !== null && _child$classList !== void 0 && _child$classList.contains("template")) && child.nodeName !== "#text";
    });
  }

}

/***/ }),

/***/ "../../packages/core/src/constants/formatter.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/constants/formatter.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FORMATTER_ARGS": function() { return /* binding */ FORMATTER_ARGS; },
/* harmony export */   "FORMATTER_SPLIT": function() { return /* binding */ FORMATTER_SPLIT; }
/* harmony export */ });
const FORMATTER_ARGS = /[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g;
const FORMATTER_SPLIT = /\s+/;

/***/ }),

/***/ "../../packages/core/src/constants/parser.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/constants/parser.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BINDING": function() { return /* binding */ BINDING; },
/* harmony export */   "DECLARATION_SPLIT": function() { return /* binding */ DECLARATION_SPLIT; },
/* harmony export */   "TEXT": function() { return /* binding */ TEXT; }
/* harmony export */ });
const TEXT = 0;
const BINDING = 1;
const DECLARATION_SPLIT = /((?:'[^']*')*(?:(?:[^|']*(?:'[^']*')+[^|']*)+|[^|]+))|^$/g;

/***/ }),

/***/ "../../packages/core/src/core.module.ts":
/*!**********************************************!*\
  !*** ../../packages/core/src/core.module.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "coreModule": function() { return /* binding */ coreModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/core/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/core/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/core/src/services/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/core/src/components/index.ts");
/* harmony import */ var _adapters_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adapters/index.js */ "../../packages/core/src/adapters/index.ts");





const coreModule = {
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_3__,
  adapters: _adapters_index_js__WEBPACK_IMPORTED_MODULE_4__,

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.CoreService.setSingleton(options);

    window.onerror = (msg, url, line, col, error) => {
      console.error(msg, url, line, col, error);
    };

    window.addEventListener("error", event => {
      console.error(event);
    });
    return this;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/contains.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/contains.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "containsFormatter": function() { return /* binding */ containsFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Returns true if an object, array or string contains an index, object, property or substring.
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const containsFormatter = {
  name: "contains",

  read(value, attr, search) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
      return value.indexOf(attr) > -1;
    } else if (Array.isArray(value)) {
      if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(attr)) {
        console.warn("[containsFormatter] The second parameter must be of type number for arrays but is " + typeof attr);
      }

      attr = Number(attr);

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(attr)) {
        if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(search)) {
          return value[attr] === search;
        } else {
          return value.indexOf(attr) !== -1;
        }
      }
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(attr)) {
        if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(search)) {
          return value[attr] === search;
        } else {
          if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(attr)) {
            console.warn("[containsFormatter] The second parameter must be of type string for objects" + typeof attr);
          }

          return Object.keys(value).indexOf(String(attr)) !== -1;
        }
      }
    }

    return false;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/empty.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/empty.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emptyFormatter": function() { return /* binding */ emptyFormatter; }
/* harmony export */ });
/* harmony import */ var _size_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./size.formatter.js */ "../../packages/core/src/formatters/array/size.formatter.ts");

const emptyFormatter = {
  name: "empty",

  read(a) {
    return _size_formatter_js__WEBPACK_IMPORTED_MODULE_0__.sizeFormatter.read(a) <= 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/first.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/first.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "firstFormatter": function() { return /* binding */ firstFormatter; }
/* harmony export */ });
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");

/**
 * Array formatter to get the first element of an array
 */

const firstFormatter = {
  name: "first",

  read(value) {
    return _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter.read(value, 0);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/get.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/array/get.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFormatter": function() { return /* binding */ getFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Get property of object or get item by index of array
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const getFormatter = {
  name: "get",

  read(value, key) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || Array.isArray(value)) {
      return value[key];
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(key)) {
        return value.charAt(key);
      }
    }

    return null;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/index.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/formatters/array/index.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _contains_formatter_js__WEBPACK_IMPORTED_MODULE_0__.containsFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _empty_formatter_js__WEBPACK_IMPORTED_MODULE_1__.emptyFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _first_formatter_js__WEBPACK_IMPORTED_MODULE_2__.firstFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _get_formatter_js__WEBPACK_IMPORTED_MODULE_3__.getFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _is_last_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isLastFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _join_formatter_js__WEBPACK_IMPORTED_MODULE_11__.joinFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _last_formatter_js__WEBPACK_IMPORTED_MODULE_5__.lastFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _overlaps_formatter_js__WEBPACK_IMPORTED_MODULE_10__.overlapsFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _random_formatter_js__WEBPACK_IMPORTED_MODULE_6__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _range_formatter_js__WEBPACK_IMPORTED_MODULE_7__.rangeFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _set_formatter_js__WEBPACK_IMPORTED_MODULE_8__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _size_formatter_js__WEBPACK_IMPORTED_MODULE_9__.sizeFormatter; }
/* harmony export */ });
/* harmony import */ var _contains_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contains.formatter.js */ "../../packages/core/src/formatters/array/contains.formatter.ts");
/* harmony import */ var _empty_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty.formatter.js */ "../../packages/core/src/formatters/array/empty.formatter.ts");
/* harmony import */ var _first_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./first.formatter.js */ "../../packages/core/src/formatters/array/first.formatter.ts");
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");
/* harmony import */ var _is_last_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-last.formatter.js */ "../../packages/core/src/formatters/array/is-last.formatter.ts");
/* harmony import */ var _last_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./last.formatter.js */ "../../packages/core/src/formatters/array/last.formatter.ts");
/* harmony import */ var _random_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./random.formatter.js */ "../../packages/core/src/formatters/array/random.formatter.ts");
/* harmony import */ var _range_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./range.formatter.js */ "../../packages/core/src/formatters/array/range.formatter.ts");
/* harmony import */ var _set_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./set.formatter.js */ "../../packages/core/src/formatters/array/set.formatter.ts");
/* harmony import */ var _size_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./size.formatter.js */ "../../packages/core/src/formatters/array/size.formatter.ts");
/* harmony import */ var _overlaps_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./overlaps.formatter.js */ "../../packages/core/src/formatters/array/overlaps.formatter.ts");
/* harmony import */ var _join_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./join.formatter.js */ "../../packages/core/src/formatters/array/join.formatter.ts");
// property / object / array formatters













/***/ }),

/***/ "../../packages/core/src/formatters/array/is-last.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/is-last.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isLastFormatter": function() { return /* binding */ isLastFormatter; }
/* harmony export */ });
/**
 * Returns true if value index is the last index of the array. Returns false if it is not the last index.
 * ```
 *  <div rv-each-image="product.images" rv-hide="product.images | last %image%"></div>
 * ```
 * @see https://help.shopify.com/themes/liquid/objects/for-loops#forloop-last
 */
const isLastFormatter = {
  name: "isLast",

  read(array, i) {
    return array.length === i + 1;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/join.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/join.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "joinFormatter": function() { return /* binding */ joinFormatter; }
/* harmony export */ });
/**
 * Joins value with a given delimeter
 */
const joinFormatter = {
  name: "join",

  read(value, delimeter) {
    return value.join(delimeter);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/last.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/last.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lastFormatter": function() { return /* binding */ lastFormatter; }
/* harmony export */ });
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");

/**
 * Array formatter to get the last element of an array
 */

const lastFormatter = {
  name: "last",

  read(array) {
    return _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter.read(array, array.length - 1);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/overlaps.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/overlaps.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "overlapsFormatter": function() { return /* binding */ overlapsFormatter; }
/* harmony export */ });
/**
 * Returns true if an array overlaps with another array.
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */
const overlapsFormatter = {
  name: "overlaps",

  read(value, search) {
    for (const a of value) {
      for (const b of search) {
        if (a.equals && a.equals(b)) {
          return true;
        }

        if (a === b) {
          return true;
        }
      }
    }

    return false;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/random.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/random.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomFormatter": function() { return /* binding */ randomFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Gets back random value of array
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 *
 * Or gets back a randon number
 * Random number between 0 and 6:
 * @example <div rv-add-class='6 | random'>
 * Random number between 1 and 6:
 * @example <div rv-add-class='6 | random 1'>
 */

const randomFormatter = {
  name: "random",

  read(arrayOrMaxNumber) {
    let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    // If is array
    if (Array.isArray(arrayOrMaxNumber)) {
      return arrayOrMaxNumber[Math.floor(Math.random() * arrayOrMaxNumber.length)];
    } // If is number


    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(arrayOrMaxNumber)) {
      const max = arrayOrMaxNumber;
      return Math.floor(Math.random() * (max - min + 1) + min);
    }

    return null;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/range.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/range.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rangeFormatter": function() { return /* binding */ rangeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Array formatter to get a subarray from array
 */

const rangeFormatter = {
  name: "range",

  read(arr, start, end) {
    start = Number((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(start) ? start : 0);
    end = Number((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(end) ? end : arr.length - 1);

    if (end > arr.length - 1) {
      end = arr.length - 1;
    }

    if (start > end) {
      return [];
    }

    return arr.slice(Number(start || 0), 1 + end);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/set.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/array/set.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setFormatter": function() { return /* binding */ setFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Sets property of object, array or value
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const setFormatter = {
  name: "set",

  read(obj, key, value) {
    // the key is the value if value is not set
    if (!value) {
      value = key;
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj) || Array.isArray(obj)) {
      obj[key] = value;
    } else {
      obj = value;
    }

    return obj;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/size.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/size.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sizeFormatter": function() { return /* binding */ sizeFormatter; }
/* harmony export */ });
/**
 * Returns the size of a string (the number of characters) or an array (the number of elements).
 * @see https://help.shopify.com/themes/liquid/filters/array-filters#size
 */
const sizeFormatter = {
  name: "size",

  read(value) {
    return value && value.length ? value.length : 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/and.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/and.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* binding */ andFormatter; }
/* harmony export */ });
/**
 * a && b
 */
const andFormatter = {
  name: "and",

  read(a, b) {
    return a && b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/between.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/between.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "betweenFormatter": function() { return /* binding */ betweenFormatter; }
/* harmony export */ });
/**
 * a >= b && a <= c
 */
const betweenFormatter = {
  name: "between",

  read(num) {
    return num >= (arguments.length <= 1 ? undefined : arguments[1]) && num <= (arguments.length <= 2 ? undefined : arguments[2]);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/egt.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/egt.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "egtFormatter": function() { return /* binding */ egtFormatter; }
/* harmony export */ });
/**
 * equal or greater than
 * a >= b
 */
const egtFormatter = {
  name: "egt",

  read(a, b) {
    return a >= b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/elt.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/elt.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eltFormatter": function() { return /* binding */ eltFormatter; }
/* harmony export */ });
/**
 * euqal or lower than
 * a <= b
 */
const eltFormatter = {
  name: "elt",

  read(a, b) {
    return a <= b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/eq.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/eq.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eqFormatter": function() { return /* binding */ eqFormatter; }
/* harmony export */ });
/**
 * a === b
 */
const eqFormatter = {
  name: "eq",

  read(a, b) {
    return a === b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/gt.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/gt.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gtFormatter": function() { return /* binding */ gtFormatter; }
/* harmony export */ });
/**
 * greater than
 * a > b
 */
const gtFormatter = {
  name: "gt",

  read(a, b) {
    return a > b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/index.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/formatters/compare/index.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _and_formatter_js__WEBPACK_IMPORTED_MODULE_0__.andFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _between_formatter_js__WEBPACK_IMPORTED_MODULE_1__.betweenFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _egt_formatter_js__WEBPACK_IMPORTED_MODULE_2__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _elt_formatter_js__WEBPACK_IMPORTED_MODULE_7__.eltFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _eq_formatter_js__WEBPACK_IMPORTED_MODULE_3__.eqFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _gt_formatter_js__WEBPACK_IMPORTED_MODULE_4__.gtFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _lt_formatter_js__WEBPACK_IMPORTED_MODULE_6__.ltFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _ne_formatter_js__WEBPACK_IMPORTED_MODULE_5__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _not_formatter_js__WEBPACK_IMPORTED_MODULE_9__.notFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _or_formatter_js__WEBPACK_IMPORTED_MODULE_8__.orFormatter; }
/* harmony export */ });
/* harmony import */ var _and_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./and.formatter.js */ "../../packages/core/src/formatters/compare/and.formatter.ts");
/* harmony import */ var _between_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./between.formatter.js */ "../../packages/core/src/formatters/compare/between.formatter.ts");
/* harmony import */ var _egt_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./egt.formatter.js */ "../../packages/core/src/formatters/compare/egt.formatter.ts");
/* harmony import */ var _eq_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eq.formatter.js */ "../../packages/core/src/formatters/compare/eq.formatter.ts");
/* harmony import */ var _gt_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gt.formatter.js */ "../../packages/core/src/formatters/compare/gt.formatter.ts");
/* harmony import */ var _ne_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ne.formatter.js */ "../../packages/core/src/formatters/compare/ne.formatter.ts");
/* harmony import */ var _lt_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lt.formatter.js */ "../../packages/core/src/formatters/compare/lt.formatter.ts");
/* harmony import */ var _elt_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./elt.formatter.js */ "../../packages/core/src/formatters/compare/elt.formatter.ts");
/* harmony import */ var _or_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./or.formatter.js */ "../../packages/core/src/formatters/compare/or.formatter.ts");
/* harmony import */ var _not_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./not.formatter.js */ "../../packages/core/src/formatters/compare/not.formatter.ts");
/**
 * compare functions
 * Add useful general-purpose formatters for Rivets.js
 * Some formatters from cart.js and rivetsjs-stdlib
 * @see https://github.com/discolabs/cartjs/
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib
 * @see https://github.com/JumpLinkNetwork/shopify-productjs
 */











/***/ }),

/***/ "../../packages/core/src/formatters/compare/lt.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/lt.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ltFormatter": function() { return /* binding */ ltFormatter; }
/* harmony export */ });
/**
 * lower than
 * a < b
 */
const ltFormatter = {
  name: "lt",

  read(a, b) {
    return a < b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/ne.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/ne.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neFormatter": function() { return /* binding */ neFormatter; }
/* harmony export */ });
/**
 * a !== b
 */
const neFormatter = {
  name: "ne",

  read(a, b) {
    return a !== b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/not.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/not.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notFormatter": function() { return /* binding */ notFormatter; }
/* harmony export */ });
/**
 * !a
 */
const notFormatter = {
  name: "not",

  read(a) {
    return !a;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/or.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/or.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "orFormatter": function() { return /* binding */ orFormatter; }
/* harmony export */ });
/**
 * a || b
 */
const orFormatter = {
  name: "or",

  read(a, b) {
    return a || b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/index.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/formatters/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.andFormatter; },
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.appendFormatter; },
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.argsFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.betweenFormatter; },
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.booleanFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.callNameFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.capitalizeFormatter; },
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.containsFormatter; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.cutFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultFormatter; },
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.dividedByFormatter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.downcaseFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.eltFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.emptyFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.endsWithFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.eqFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.evenFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.filledFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.firstFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.gcdFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.gtFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.handleizeFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isDefinedFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.isDesktopFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isIntegerFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.isLastFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.isMobileFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isUndefinedFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.joinFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.jsonFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.lastFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.ltFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.mapFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.matchFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.moduloFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.notFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.numberFormatFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.orFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.osFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.overlapsFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.padStartFormatter; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.parseFormatter; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.pluralizeFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.plusFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.preferFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.prependFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.rangeFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.replaceFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.sizeFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.stripHtmlFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.ternaryFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.timesFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toStringFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.unevenFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _array_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array/index.js */ "../../packages/core/src/formatters/array/index.ts");
/* harmony import */ var _compare_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compare/index.js */ "../../packages/core/src/formatters/compare/index.ts");
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math/index.js */ "../../packages/core/src/formatters/math/index.ts");
/* harmony import */ var _special_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./special/index.js */ "../../packages/core/src/formatters/special/index.ts");
/* harmony import */ var _string_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string/index.js */ "../../packages/core/src/formatters/string/index.ts");
/* harmony import */ var _type_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./type/index.js */ "../../packages/core/src/formatters/type/index.ts");







/***/ }),

/***/ "../../packages/core/src/formatters/math/digits.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/digits.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "digitsFormatter": function() { return /* binding */ digitsFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Just get the digits of a string, useful to remove px from css value
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const digitsFormatter = {
  name: "digits",

  read(str) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(str)) {
      return str;
    }

    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/divided-by.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/math/divided-by.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dividedByFormatter": function() { return /* binding */ dividedByFormatter; }
/* harmony export */ });
/**
 * Divides an output by a number. The output is rounded down to the nearest integer.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#divided_by
 */
const dividedByFormatter = {
  name: "dividedBy",

  read(a, b) {
    return Number(a) / Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/even.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/even.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evenFormatter": function() { return /* binding */ evenFormatter; }
/* harmony export */ });
/**
 * Check if a number is even or not
 */
const evenFormatter = {
  name: "even",

  read(num) {
    return num % 2 === 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/gcd.formatter.ts":
/*!****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/gcd.formatter.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gcdFormatter": function() { return /* binding */ gcdFormatter; }
/* harmony export */ });
/**
 * Greatest common divisor (GCD) useful to calculate a ratio
 * @see https://stackoverflow.com/a/1186465/1465919
 */
const _gcd = (a, b) => {
  return b === 0 ? a : _gcd(b, a % b);
};

const gcdFormatter = {
  name: "gcd",
  read: _gcd
};

/***/ }),

/***/ "../../packages/core/src/formatters/math/index.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/formatters/math/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _digits_formatter_js__WEBPACK_IMPORTED_MODULE_8__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _divided_by_formatter_js__WEBPACK_IMPORTED_MODULE_3__.dividedByFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _even_formatter_js__WEBPACK_IMPORTED_MODULE_6__.evenFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _gcd_formatter_js__WEBPACK_IMPORTED_MODULE_5__.gcdFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _minus_formatter_js__WEBPACK_IMPORTED_MODULE_1__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _modulo_formatter_js__WEBPACK_IMPORTED_MODULE_4__.moduloFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _plus_formatter_js__WEBPACK_IMPORTED_MODULE_0__.plusFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _times_formatter_js__WEBPACK_IMPORTED_MODULE_2__.timesFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _uneven_formatter_js__WEBPACK_IMPORTED_MODULE_7__.unevenFormatter; }
/* harmony export */ });
/* harmony import */ var _plus_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plus.formatter.js */ "../../packages/core/src/formatters/math/plus.formatter.ts");
/* harmony import */ var _minus_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./minus.formatter.js */ "../../packages/core/src/formatters/math/minus.formatter.ts");
/* harmony import */ var _times_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./times.formatter.js */ "../../packages/core/src/formatters/math/times.formatter.ts");
/* harmony import */ var _divided_by_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./divided-by.formatter.js */ "../../packages/core/src/formatters/math/divided-by.formatter.ts");
/* harmony import */ var _modulo_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modulo.formatter.js */ "../../packages/core/src/formatters/math/modulo.formatter.ts");
/* harmony import */ var _gcd_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gcd.formatter.js */ "../../packages/core/src/formatters/math/gcd.formatter.ts");
/* harmony import */ var _even_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./even.formatter.js */ "../../packages/core/src/formatters/math/even.formatter.ts");
/* harmony import */ var _uneven_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./uneven.formatter.js */ "../../packages/core/src/formatters/math/uneven.formatter.ts");
/* harmony import */ var _digits_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./digits.formatter.js */ "../../packages/core/src/formatters/math/digits.formatter.ts");
// math formatters










/***/ }),

/***/ "../../packages/core/src/formatters/math/minus.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/minus.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minusFormatter": function() { return /* binding */ minusFormatter; }
/* harmony export */ });
/**
 * Subtracts a number from an output.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#minus
 */
const minusFormatter = {
  name: "minus",

  read(a, b) {
    return Number(a) - Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/modulo.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/modulo.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moduloFormatter": function() { return /* binding */ moduloFormatter; }
/* harmony export */ });
/**
 * Divides an value by a number and returns the remainder.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#modulo
 */
const moduloFormatter = {
  name: "modulo",

  read(a, b) {
    return Number(a) % Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/plus.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/plus.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "plusFormatter": function() { return /* binding */ plusFormatter; }
/* harmony export */ });
/**
 * Adds a number to an value.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#plus
 */
const plusFormatter = {
  name: "plus",

  read(a, b) {
    return Number(a) + Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/times.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/times.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "timesFormatter": function() { return /* binding */ timesFormatter; }
/* harmony export */ });
/**
 * Multiplies an value by a number.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#times
 */
const timesFormatter = {
  name: "times",

  read(a, b) {
    return Number(a) * Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/uneven.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/uneven.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unevenFormatter": function() { return /* binding */ unevenFormatter; }
/* harmony export */ });
const unevenFormatter = {
  name: "uneven",

  read(num) {
    return num % 2 !== 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/args.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/args.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argsFormatter": function() { return /* binding */ argsFormatter; }
/* harmony export */ });
/**
 * Sets arguments to a function without directly call them
 * ```html
 * <button rv-on-click="sum | args 1 2"></button>
 * ```
 * @param fn The function the event handler should call
 * @param fnArgs the parameters you wish to get called the function with
 */
const argsFormatter = {
  name: "args",

  read(fn) {
    for (var _len = arguments.length, fnArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fnArgs[_key - 1] = arguments[_key];
    }

    return (event, scope, el, binder) => {
      // append the event handler args to passed args
      fnArgs.push(event);
      fnArgs.push(scope);
      fnArgs.push(el);
      fnArgs.push(binder);
      return fn.apply(this, fnArgs);
    };
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/call-name.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/call-name.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callNameFormatter": function() { return /* binding */ callNameFormatter; }
/* harmony export */ });
/**
 * Calls a function by name with arguments
 * @param object The object that contains the function you wish to call
 * @param name The name of the function you wish to call
 * @param args the parameters you wish to call the function with
 */
const callNameFormatter = {
  name: "call-name",
  read: function (object, name) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return object[name](...args);
  }
};

/***/ }),

/***/ "../../packages/core/src/formatters/special/call.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/call.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callFormatter": function() { return /* binding */ callFormatter; }
/* harmony export */ });
// babel misinterprets the "this" fake parameter, so we define it in this interfaces

/**
 * Calls a function with arguments
 * @param fn The function you wish to call
 * @param args the parameters you wish to call the function with
 */
const callFormatter = {
  name: "call",

  read(fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(this, args);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/debug.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/debug.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debugFormatter": function() { return /* binding */ debugFormatter; }
/* harmony export */ });
const debugFormatter = {
  name: "debug",

  read(toPrint) {
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "debug";
    console[level](toPrint);
    return toPrint;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/default.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/default.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultFormatter": function() { return /* binding */ defaultFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Sets a default value if the first value is not set
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const defaultFormatter = {
  name: "default",

  read(value, defaultValue) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
        if (value.length > 0) {
          return value;
        } else {
          return defaultValue;
        }
      }

      if (value === null) {
        return defaultValue;
      }

      return value;
    }

    return defaultValue;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/index.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/formatters/special/index.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _args_formatter_js__WEBPACK_IMPORTED_MODULE_0__.argsFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _call_formatter_js__WEBPACK_IMPORTED_MODULE_5__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _call_name_formatter_js__WEBPACK_IMPORTED_MODULE_6__.callNameFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _debug_formatter_js__WEBPACK_IMPORTED_MODULE_1__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _default_formatter_js__WEBPACK_IMPORTED_MODULE_2__.defaultFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _is_desktop_formatter_js__WEBPACK_IMPORTED_MODULE_3__.isDesktopFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _is_mobile_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isMobileFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _map_formatter_js__WEBPACK_IMPORTED_MODULE_7__.mapFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _os_formatter_js__WEBPACK_IMPORTED_MODULE_8__.osFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _prefer_formatter_js__WEBPACK_IMPORTED_MODULE_9__.preferFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _ternary_formatter_js__WEBPACK_IMPORTED_MODULE_10__.ternaryFormatter; }
/* harmony export */ });
/* harmony import */ var _args_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./args.formatter.js */ "../../packages/core/src/formatters/special/args.formatter.ts");
/* harmony import */ var _debug_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug.formatter.js */ "../../packages/core/src/formatters/special/debug.formatter.ts");
/* harmony import */ var _default_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./default.formatter.js */ "../../packages/core/src/formatters/special/default.formatter.ts");
/* harmony import */ var _is_desktop_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-desktop.formatter.js */ "../../packages/core/src/formatters/special/is-desktop.formatter.ts");
/* harmony import */ var _is_mobile_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-mobile.formatter.js */ "../../packages/core/src/formatters/special/is-mobile.formatter.ts");
/* harmony import */ var _call_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./call.formatter.js */ "../../packages/core/src/formatters/special/call.formatter.ts");
/* harmony import */ var _call_name_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./call-name.formatter.js */ "../../packages/core/src/formatters/special/call-name.formatter.ts");
/* harmony import */ var _map_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map.formatter.js */ "../../packages/core/src/formatters/special/map.formatter.ts");
/* harmony import */ var _os_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./os.formatter.js */ "../../packages/core/src/formatters/special/os.formatter.ts");
/* harmony import */ var _prefer_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./prefer.formatter.js */ "../../packages/core/src/formatters/special/prefer.formatter.ts");
/* harmony import */ var _ternary_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ternary.formatter.js */ "../../packages/core/src/formatters/special/ternary.formatter.ts");
// special helper formatters












/***/ }),

/***/ "../../packages/core/src/formatters/special/is-desktop.formatter.ts":
/*!**************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/is-desktop.formatter.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDesktopFormatter": function() { return /* binding */ isDesktopFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const isDesktopFormatter = {
  name: "is-desktop",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isDesktop)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/is-mobile.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/is-mobile.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isMobileFormatter": function() { return /* binding */ isMobileFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const isMobileFormatter = {
  name: "is-mobile",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isMobile)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/map.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/special/map.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapFormatter": function() { return /* binding */ mapFormatter; }
/* harmony export */ });
/* eslint-disable prefer-spread */

/* eslint-disable prefer-rest-params */

/**
 * Calls a method on the given object. The first parameters defines the object and the second the methodname.
 * Target will be passed as the first argument to the method.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
 * @example
 * ```html
 * <span rv-text="10 | map 'Math' 'sin'"></span>
 * ```
 * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
 */
const mapFormatter = {
  name: "map",

  /**
   * Calls a method on the given object. The first parameters defines the object and the second the method name.
   * Target will be passed as the first argument to the method.
   * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
   * @example
   * ```html
   * <span rv-text="10 | map 'Math' 'sin'"></span>
   * ```
   * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
   * @param target
   * @param obj
   * @param prop
   */
  read(target, obj, prop) {
    const args = Array.prototype.slice.call(arguments);
    args.splice(1, 2);
    return obj[prop].apply(obj, args);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/os.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/special/os.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "osFormatter": function() { return /* binding */ osFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const osFormatter = {
  name: "os",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.getOS)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/prefer.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/prefer.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "preferFormatter": function() { return /* binding */ preferFormatter; }
/* harmony export */ });
/**
 * Prefers the first formatter parameter before left parameter
 */
const preferFormatter = {
  name: "prefer",

  read(value, preferValue) {
    return preferValue || value;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/ternary.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/ternary.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ternaryFormatter": function() { return /* binding */ ternaryFormatter; }
/* harmony export */ });
/**
 * a ? b : c
 */
const ternaryFormatter = {
  name: "ternary",

  read(condition, yes, no) {
    return condition ? yes : no;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/append.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/append.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendFormatter": function() { return /* binding */ appendFormatter; }
/* harmony export */ });
/**
 * Appends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#append
 */
const appendFormatter = {
  name: "append",

  read(a, b) {
    return a + b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/capitalize.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/capitalize.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "capitalizeFormatter": function() { return /* binding */ capitalizeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Uppercases the first letter of a string
 */

const capitalizeFormatter = {
  name: "capitalize",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.capitalize)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/cut.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/string/cut.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cutFormatter": function() { return /* binding */ cutFormatter; }
/* harmony export */ });
/**
 * Cats a string
 * If the first parameter is -1 the string will not be uncut
 * @example
 * <p rv-text="'abcdefghijklnmopqrstuvwxyzabcdefghijklnmopqrstuvwxyz' | cut 3 '...'"></p>
 * -> <p>abc...</p>
 *
 * <p rv-text="'abcdefghijklnmopqrstuvwxyzabcdefghijklnmopqrstuvwxyz' | cut 3"></p>
 * -> <p>abc</p>
 */
const cutFormatter = {
  name: "cut",

  read(str, cutAt) {
    let delimitation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

    if (!str) {
      return "";
    }

    if (typeof str !== "string") {
      console.warn("[cutFormatter] Value must be of type string");
      return str;
    }

    if (str.length > cutAt) {
      return str.substring(cutAt, cutAt === -1 ? undefined : -1) + delimitation;
    } else {
      return str;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/downcase.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/downcase.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "downcaseFormatter": function() { return /* binding */ downcaseFormatter; }
/* harmony export */ });
/**
 * Converts a string into lowercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#downcase
 */
const downcaseFormatter = {
  name: "downcase",

  read(str) {
    return str.toLowerCase();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/ends-with.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/ends-with.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endsWithFormatter": function() { return /* binding */ endsWithFormatter; }
/* harmony export */ });
/**
 * Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this).
 * Otherwise returns false.
 *
 * @example
 * <p rv-if="'abcdefg' | ends-with 'efg'">Hello World!</p>
 * -> <p>Hello World!</p>
 */
const endsWithFormatter = {
  name: "ends-with",

  read(str, checkStart) {
    if (typeof str !== "string") {
      console.warn("[endsWithFormatter] Value must be of type string");
      return str;
    }

    return str.endsWith(checkStart);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/filled.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/filled.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filledFormatter": function() { return /* binding */ filledFormatter; }
/* harmony export */ });
/* harmony import */ var _array_empty_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array/empty.formatter.js */ "../../packages/core/src/formatters/array/empty.formatter.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


/**
 * Check if value is a string and not empty
 */

const filledFormatter = {
  name: "filled",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isString)(str) && !_array_empty_formatter_js__WEBPACK_IMPORTED_MODULE_0__.emptyFormatter.read(str.replace(/\s/g, ""));
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/handleize.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/handleize.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleizeFormatter": function() { return /* binding */ handleizeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Formats a string into a handle.
 * E.g. '100% M & Ms!!!' -> 100-m-ms
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#handle-handleize
 */

const handleizeFormatter = {
  name: "handleize",

  read(str) {
    if (!str) {
      console.warn("[handleizeFormatter] str is not set");
      return "";
    }

    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.handleize)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/formatters/string/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _append_formatter_js__WEBPACK_IMPORTED_MODULE_0__.appendFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _capitalize_formatter_js__WEBPACK_IMPORTED_MODULE_1__.capitalizeFormatter; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _cut_formatter_js__WEBPACK_IMPORTED_MODULE_2__.cutFormatter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _downcase_formatter_js__WEBPACK_IMPORTED_MODULE_3__.downcaseFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _ends_with_formatter_js__WEBPACK_IMPORTED_MODULE_4__.endsWithFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _filled_formatter_js__WEBPACK_IMPORTED_MODULE_5__.filledFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _handleize_formatter_js__WEBPACK_IMPORTED_MODULE_6__.handleizeFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _match_formatter_js__WEBPACK_IMPORTED_MODULE_7__.matchFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _number_format_formatter_js__WEBPACK_IMPORTED_MODULE_10__.numberFormatFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _pad_end_formatter_js__WEBPACK_IMPORTED_MODULE_9__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _pad_start_formatter_js__WEBPACK_IMPORTED_MODULE_8__.padStartFormatter; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _pluralize_formatter_js__WEBPACK_IMPORTED_MODULE_11__.pluralizeFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _prepend_formatter_js__WEBPACK_IMPORTED_MODULE_12__.prependFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _replace_first_formatter_js__WEBPACK_IMPORTED_MODULE_15__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _replace_formatter_js__WEBPACK_IMPORTED_MODULE_14__.replaceFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _slice_formatter_js__WEBPACK_IMPORTED_MODULE_16__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _starts_with_formatter_js__WEBPACK_IMPORTED_MODULE_17__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _strip_formatter_js__WEBPACK_IMPORTED_MODULE_18__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _strip_html_formatter_js__WEBPACK_IMPORTED_MODULE_19__.stripHtmlFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _upcase_formatter_js__WEBPACK_IMPORTED_MODULE_13__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _append_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./append.formatter.js */ "../../packages/core/src/formatters/string/append.formatter.ts");
/* harmony import */ var _capitalize_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./capitalize.formatter.js */ "../../packages/core/src/formatters/string/capitalize.formatter.ts");
/* harmony import */ var _cut_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cut.formatter.js */ "../../packages/core/src/formatters/string/cut.formatter.ts");
/* harmony import */ var _downcase_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./downcase.formatter.js */ "../../packages/core/src/formatters/string/downcase.formatter.ts");
/* harmony import */ var _ends_with_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ends-with.formatter.js */ "../../packages/core/src/formatters/string/ends-with.formatter.ts");
/* harmony import */ var _filled_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./filled.formatter.js */ "../../packages/core/src/formatters/string/filled.formatter.ts");
/* harmony import */ var _handleize_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handleize.formatter.js */ "../../packages/core/src/formatters/string/handleize.formatter.ts");
/* harmony import */ var _match_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./match.formatter.js */ "../../packages/core/src/formatters/string/match.formatter.ts");
/* harmony import */ var _pad_start_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pad-start.formatter.js */ "../../packages/core/src/formatters/string/pad-start.formatter.ts");
/* harmony import */ var _pad_end_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pad-end.formatter.js */ "../../packages/core/src/formatters/string/pad-end.formatter.ts");
/* harmony import */ var _number_format_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./number-format.formatter.js */ "../../packages/core/src/formatters/string/number-format.formatter.ts");
/* harmony import */ var _pluralize_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pluralize.formatter.js */ "../../packages/core/src/formatters/string/pluralize.formatter.ts");
/* harmony import */ var _prepend_formatter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./prepend.formatter.js */ "../../packages/core/src/formatters/string/prepend.formatter.ts");
/* harmony import */ var _upcase_formatter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./upcase.formatter.js */ "../../packages/core/src/formatters/string/upcase.formatter.ts");
/* harmony import */ var _replace_formatter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./replace.formatter.js */ "../../packages/core/src/formatters/string/replace.formatter.ts");
/* harmony import */ var _replace_first_formatter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./replace-first.formatter.js */ "../../packages/core/src/formatters/string/replace-first.formatter.ts");
/* harmony import */ var _slice_formatter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./slice.formatter.js */ "../../packages/core/src/formatters/string/slice.formatter.ts");
/* harmony import */ var _starts_with_formatter_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./starts-with.formatter.js */ "../../packages/core/src/formatters/string/starts-with.formatter.ts");
/* harmony import */ var _strip_formatter_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./strip.formatter.js */ "../../packages/core/src/formatters/string/strip.formatter.ts");
/* harmony import */ var _strip_html_formatter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./strip-html.formatter.js */ "../../packages/core/src/formatters/string/strip-html.formatter.ts");
// string formatters





















/***/ }),

/***/ "../../packages/core/src/formatters/string/match.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/match.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matchFormatter": function() { return /* binding */ matchFormatter; }
/* harmony export */ });
const matchFormatter = {
  name: "match",

  read(a, regexp, flags) {
    if (!a || !regexp) {
      return false;
    }

    return a.match(new RegExp(regexp, flags));
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/number-format.formatter.ts":
/*!****************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/number-format.formatter.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "numberFormatFormatter": function() { return /* binding */ numberFormatFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/to-decimal.formatter.js */ "../../packages/core/src/formatters/type/to-decimal.formatter.ts");
/* harmony import */ var _type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/is-integer.formatter.js */ "../../packages/core/src/formatters/type/is-integer.formatter.ts");


 // TODO set by current locale

const DEFAULT_DECIMAL_SEPARATOR = ".";
const DEFAULT_THOUSAND_SEPARATOR = "'";
const DEFAULT_PRECISION = 2;
/**
 * Returns a formatted version of the target as string.
 * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
 */

const numberFormatFormatter = {
  name: "numberFormat",

  /**
   * Returns a formatted version of the target as string.
   * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
   * @param target
   * @param precision (default: 2)
   * @param decimalSeparator (default: ".")
   * @param thousandSeparator (default: "'")
   */
  read(target) {
    let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PRECISION;
    let decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DECIMAL_SEPARATOR;
    let thousandSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THOUSAND_SEPARATOR;

    if (!_type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toDecimalFormatter.read) {
      throw new Error("toDecimalFormatter must have a read function");
    }

    if (!_type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isIntegerFormatter.read) {
      throw new Error("isIntegerFormatter must have a read function");
    }

    target = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(target) ? target : _type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toDecimalFormatter.read(target);

    if (!_type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isIntegerFormatter.read(precision)) {
      precision = DEFAULT_PRECISION;
    }
    /*
     * Thanks to user2823670
     * http://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding
     */


    let retStr = (+(Math.round(+(Math.abs(target) + "e" + precision)) + "e" + -precision)).toFixed(precision);
    if (target < 0) retStr = "-" + retStr;
    /**
     * Thanks to Elias Zamaria
     * http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
     */

    const ret = retStr.split(".");

    if (ret.length == 2) {
      return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator) + decimalSeparator + ret[1];
    }

    return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pad-end.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pad-end.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padEndFormatter": function() { return /* binding */ padEndFormatter; }
/* harmony export */ });
/**
 * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
 * The padding is applied from the end of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
 */
const padEndFormatter = {
  name: "padEnd",

  /**
   *
   * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
   * The padding is applied from the end of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
   *
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is lower than `str.length`, the current string will be returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within `targetLength`, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is " " (`U+0020`).
   */
  read(target) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padEnd(length, padString);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pad-start.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pad-start.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padStartFormatter": function() { return /* binding */ padStartFormatter; }
/* harmony export */ });
/**
 * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
 * The padding is applied from the start of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
 */
const padStartFormatter = {
  name: "padStart",

  /**
   * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
   * The padding is applied from the start of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is less than `str.length`, then `str` is returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within the `targetLength`, it will be truncated from the end. The default value is `" "` (`U+0020 'SPACE'`).
   */
  read(target) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padStart(length, padString);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pluralize.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pluralize.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pluralizeFormatter": function() { return /* binding */ pluralizeFormatter; }
/* harmony export */ });
const pluralizeFormatter = {
  name: "pluralize",

  read(input, singular, plural) {
    if (plural === null) {
      plural = singular + "s";
    }

    if (Array.isArray(input)) {
      input = input.length;
    }

    if (input === 1) {
      return singular;
    } else {
      return plural;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/prepend.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/prepend.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prependFormatter": function() { return /* binding */ prependFormatter; }
/* harmony export */ });
/**
 * Prepends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#prepend
 */
const prependFormatter = {
  name: "prepend",

  read(a, b) {
    return b + a;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/replace-first.formatter.ts":
/*!****************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/replace-first.formatter.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceFirstFormatter": function() { return /* binding */ replaceFirstFormatter; }
/* harmony export */ });
/* tslint:disable:variable-name */

/**
 * Replaces the first occurrence of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace_first
 */
const replaceFirstFormatter = {
  name: "replaceFirst",

  read(str, value, replaceValue) {
    return str.replace(value, replaceValue);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/replace.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/replace.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceFormatter": function() { return /* binding */ replaceFormatter; }
/* harmony export */ });
/**
 * Replaces all occurrences of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace
 */
const replaceFormatter = {
  name: "replace",

  read(str, value, replaceValue) {
    return str.replace(new RegExp(value, "g"), replaceValue);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/slice.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/slice.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sliceFormatter": function() { return /* binding */ sliceFormatter; }
/* harmony export */ });
/**
 * The `slice` formatter returns a substring, starting at the specified index.
 * An optional second parameter can be passed to specify the length of the substring.
 * If no second parameter is given, the substring continues to the end of string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#slice
 */
const sliceFormatter = {
  name: "slice",

  read(value, start, end) {
    return value.slice(start, end);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/starts-with.formatter.ts":
/*!**************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/starts-with.formatter.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "startsWithFormatter": function() { return /* binding */ startsWithFormatter; }
/* harmony export */ });
/**
 * Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position.
 * Otherwise returns false.
 *
 * @example
 * <p rv-if="'abcdefg' | starts-with 'abc'">Hello World!</p>
 * -> <p>Hello World!</p>
 */
const startsWithFormatter = {
  name: "starts-with",

  read(str, checkStart) {
    if (typeof str !== "string") {
      console.warn("[startsWithFormatter] Value must be of type string");
      return str;
    }

    return str.startsWith(checkStart);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/strip-html.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/strip-html.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripHtmlFormatter": function() { return /* binding */ stripHtmlFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Strips all HTML tags from a string.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#strip_html
 */

const stripHtmlFormatter = {
  name: "strip-html",

  read(html) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.stripHtml)(html);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/strip.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/strip.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripFormatter": function() { return /* binding */ stripFormatter; }
/* harmony export */ });
/**
 * Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#strip
 */
const stripFormatter = {
  name: "strip",

  read(str) {
    return str.trim();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/upcase.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/upcase.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "upcaseFormatter": function() { return /* binding */ upcaseFormatter; }
/* harmony export */ });
/**
 * Converts a string into uppercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#upcase
 */
const upcaseFormatter = {
  name: "upcase",

  read(str) {
    return str.toUpperCase();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/boolean.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/boolean.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanFormatter": function() { return /* binding */ booleanFormatter; }
/* harmony export */ });
/**
 * Converts a variable to boolean
 */
const booleanFormatter = {
  name: "boolean",

  read(value) {
    if (value === "true") {
      return true;
    } else if (value === "false") {
      return false;
    } else {
      return !!value;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/index.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/formatters/type/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _boolean_formatter_js__WEBPACK_IMPORTED_MODULE_0__.booleanFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _is_array_formatter_js__WEBPACK_IMPORTED_MODULE_1__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _is_boolean_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _is_defined_formatter_js__WEBPACK_IMPORTED_MODULE_3__.isDefinedFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isIntegerFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _is_number_formatter_js__WEBPACK_IMPORTED_MODULE_5__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _is_object_formatter_js__WEBPACK_IMPORTED_MODULE_6__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _is_string_formatter_js__WEBPACK_IMPORTED_MODULE_7__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _is_undefined_formatter_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _json_formatter_js__WEBPACK_IMPORTED_MODULE_9__.jsonFormatter; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _parse_formatter_js__WEBPACK_IMPORTED_MODULE_10__.parseFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _to_base64_formatter_js__WEBPACK_IMPORTED_MODULE_11__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_13__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_14__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_15__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _type_to_number_formatter_js__WEBPACK_IMPORTED_MODULE_16__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _to_string_formatter_js__WEBPACK_IMPORTED_MODULE_12__.toStringFormatter; }
/* harmony export */ });
/* harmony import */ var _boolean_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boolean.formatter.js */ "../../packages/core/src/formatters/type/boolean.formatter.ts");
/* harmony import */ var _is_array_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-array.formatter.js */ "../../packages/core/src/formatters/type/is-array.formatter.ts");
/* harmony import */ var _is_boolean_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is-boolean.formatter.js */ "../../packages/core/src/formatters/type/is-boolean.formatter.ts");
/* harmony import */ var _is_defined_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-defined.formatter.js */ "../../packages/core/src/formatters/type/is-defined.formatter.ts");
/* harmony import */ var _is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-integer.formatter.js */ "../../packages/core/src/formatters/type/is-integer.formatter.ts");
/* harmony import */ var _is_number_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is-number.formatter.js */ "../../packages/core/src/formatters/type/is-number.formatter.ts");
/* harmony import */ var _is_object_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./is-object.formatter.js */ "../../packages/core/src/formatters/type/is-object.formatter.ts");
/* harmony import */ var _is_string_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./is-string.formatter.js */ "../../packages/core/src/formatters/type/is-string.formatter.ts");
/* harmony import */ var _is_undefined_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./is-undefined.formatter.js */ "../../packages/core/src/formatters/type/is-undefined.formatter.ts");
/* harmony import */ var _json_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./json.formatter.js */ "../../packages/core/src/formatters/type/json.formatter.ts");
/* harmony import */ var _parse_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parse.formatter.js */ "../../packages/core/src/formatters/type/parse.formatter.ts");
/* harmony import */ var _to_base64_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./to-base64.formatter.js */ "../../packages/core/src/formatters/type/to-base64.formatter.ts");
/* harmony import */ var _to_string_formatter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./to-string.formatter.js */ "../../packages/core/src/formatters/type/to-string.formatter.ts");
/* harmony import */ var _to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./to-decimal.formatter.js */ "../../packages/core/src/formatters/type/to-decimal.formatter.ts");
/* harmony import */ var _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./to-float.formatter.js */ "../../packages/core/src/formatters/type/to-float.formatter.ts");
/* harmony import */ var _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./to-integer.formatter.js */ "../../packages/core/src/formatters/type/to-integer.formatter.ts");
/* harmony import */ var _type_to_number_formatter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../type/to-number.formatter.js */ "../../packages/core/src/formatters/type/to-number.formatter.ts");
// property / object formatters


















/***/ }),

/***/ "../../packages/core/src/formatters/type/is-array.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-array.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayFormatter": function() { return /* binding */ isArrayFormatter; }
/* harmony export */ });
/**
 * Checks if value is an array
 */
const isArrayFormatter = {
  name: "is-array",
  read: Array.isArray
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-boolean.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-boolean.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBooleanFormatter": function() { return /* binding */ isBooleanFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is an boolean
 */

const isBooleanFormatter = {
  name: "is-boolean",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isBoolean
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-defined.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-defined.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDefinedFormatter": function() { return /* binding */ isDefinedFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is defined
 */

const isDefinedFormatter = {
  name: "is-defined",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-integer.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-integer.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIntegerFormatter": function() { return /* binding */ isIntegerFormatter; }
/* harmony export */ });
/**
 * Checks if value is a number
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L82
 */
const isIntegerFormatter = {
  name: "is-integer",

  read(n) {
    /**
     * Thanks a lot to Dagg Nabbit
     * http://stackoverflow.com/questions/3885817/how-to-check-if-a-number-is-float-or-integer
     */
    return n === +n && n === (n | 0);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-number.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-number.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumberFormatter": function() { return /* binding */ isNumberFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is a number
 */

const isNumberFormatter = {
  name: "is-number",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-object.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-object.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObjectFormatter": function() { return /* binding */ isObjectFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is a object
 */

const isObjectFormatter = {
  name: "is-object",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-string.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-string.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isStringFormatter": function() { return /* binding */ isStringFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Check if value is a string
 */

const isStringFormatter = {
  name: "is-string",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-undefined.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-undefined.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUndefinedFormatter": function() { return /* binding */ isUndefinedFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Check if value is undefined
 */

const isUndefinedFormatter = {
  name: "is-undefined",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/json.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/type/json.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jsonFormatter": function() { return /* binding */ jsonFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

/**
 * Converts a string into a JSON string.
 */

const jsonFormatter = {
  name: "json",

  read(object) {
    let space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let replaceSingleQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(object, space, replaceSingleQuote);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/parse.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/type/parse.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseFormatter": function() { return /* binding */ parseFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * parse json, base64 or any other value string to to its real value
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 */

const parseFormatter = {
  name: "parse",

  read(str) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(str) || Array.isArray(str) || typeof str === "boolean" || typeof str === "number") {
      console.warn("[parseFormatter] You do not need to parse the value because since it already been parsed");
      return str;
    }

    if (typeof str === "string") {
      return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.parseType)(str, true).value;
    } else {
      return null;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-base64.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-base64.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toBase64Formatter": function() { return /* binding */ toBase64Formatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

/**
 * Decodes a string into a base64 string.
 */

const toBase64Formatter = {
  name: "toBase64",

  read(object) {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.toBase64)(object);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-decimal.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-decimal.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toDecimalFormatter": function() { return /* binding */ toDecimalFormatter; }
/* harmony export */ });
/* harmony import */ var _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-integer.formatter.js */ "../../packages/core/src/formatters/type/to-integer.formatter.ts");
/* harmony import */ var _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-float.formatter.js */ "../../packages/core/src/formatters/type/to-float.formatter.ts");


const toDecimalFormatter = {
  name: "to-decimal",

  read(target) {
    if (!_to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__.toIntegerFormatter.read) {
      throw new Error("toIntegerFormatter must have a read function");
    }

    if (!_to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toFloatFormatter.read) {
      throw new Error("toFloatFormatter must have a read function");
    }

    const retI = _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__.toIntegerFormatter.read(target * 1);
    const retF = _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toFloatFormatter.read(target);
    return retI == retF ? retI : retF;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-float.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-float.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toFloatFormatter": function() { return /* binding */ toFloatFormatter; }
/* harmony export */ });
/**
 * Returns the float representation of the given target
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L133
 */
const toFloatFormatter = {
  name: "to-float",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read(target) {
    const ret = parseFloat(target * 1.0);
    return isNaN(ret) ? 0.0 : ret;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-integer.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-integer.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toIntegerFormatter": function() { return /* binding */ toIntegerFormatter; }
/* harmony export */ });
/**
 * Returns the integer representation of the given target.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L128
 */
const toIntegerFormatter = {
  name: "to-integer",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read(target) {
    const ret = parseInt(target * 1, 10);
    return isNaN(ret) ? 0 : ret;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-number.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-number.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toNumberFormatter": function() { return /* binding */ toNumberFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Parse a string to number / float
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const toNumberFormatter = {
  name: "to-number",

  read(str, def) {
    const num = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(str); // If default value is set return the default value if num is 0, null or undefined

    if (def) {
      return num ? num : def;
    }

    return num;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-string.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-string.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toStringFormatter": function() { return /* binding */ toStringFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Parses a value to string
 * @param value The value you want to parse to string
 * @param def Default value if value is undefined
 */

const toStringFormatter = {
  name: "to-string",

  read(value, def) {
    // If value is an array convert each value in array to string
    if (Array.isArray(value)) {
      for (const i in value) {
        if (value[i]) {
          value[i] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value[i]);
        }
      }
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
      for (const key in value) {
        value[key] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value[key]);
      }
    } else {
      value = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value);
    } // If default value is set return the default value if num is 0, null or undefined


    if (def) {
      return value ? value : def;
    }

    return value;
  }

};

/***/ }),

/***/ "../../packages/core/src/index.ts":
/*!****************************************!*\
  !*** ../../packages/core/src/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_0__.Adapter; },
/* harmony export */   "AdapterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.AdapterService; },
/* harmony export */   "AddClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AddClassBinder; },
/* harmony export */   "AnimateStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AnimateStarBinder; },
/* harmony export */   "AssignBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AssignBinder; },
/* harmony export */   "AssignPropertyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AssignPropertyBinder; },
/* harmony export */   "AttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AttributeBinder; },
/* harmony export */   "BasicComponent": function() { return /* reexport safe */ _component_index_js__WEBPACK_IMPORTED_MODULE_4__.BasicComponent; },
/* harmony export */   "Binder": function() { return /* reexport safe */ _binder_js__WEBPACK_IMPORTED_MODULE_8__.Binder; },
/* harmony export */   "BindersService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.BindersService; },
/* harmony export */   "BlockBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.BlockBinder; },
/* harmony export */   "CheckedBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.CheckedBinder; },
/* harmony export */   "ClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ClassStarBinder; },
/* harmony export */   "Component": function() { return /* reexport safe */ _component_index_js__WEBPACK_IMPORTED_MODULE_4__.Component; },
/* harmony export */   "ComponentAttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ComponentAttributeBinder; },
/* harmony export */   "ComponentService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ComponentService; },
/* harmony export */   "CoreService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.CoreService; },
/* harmony export */   "DisabledBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.DisabledBinder; },
/* harmony export */   "EachStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.EachStarBinder; },
/* harmony export */   "ElementBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ElementBinder; },
/* harmony export */   "EnabledBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.EnabledBinder; },
/* harmony export */   "FlexSortChildsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.FlexSortChildsBinder; },
/* harmony export */   "FormatterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.FormatterService; },
/* harmony export */   "HideBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.HideBinder; },
/* harmony export */   "HtmlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.HtmlBinder; },
/* harmony export */   "HttpService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.HttpService; },
/* harmony export */   "IfBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.IfBinder; },
/* harmony export */   "LifecycleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.LifecycleService; },
/* harmony export */   "MaxlengthBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.MaxlengthBinder; },
/* harmony export */   "NoDragBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.NoDragBinder; },
/* harmony export */   "OnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.OnEventBinder; },
/* harmony export */   "ParentBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ParentBinder; },
/* harmony export */   "ReadonlyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ReadonlyBinder; },
/* harmony export */   "RemoveClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.RemoveClassBinder; },
/* harmony export */   "Riba": function() { return /* reexport safe */ _riba_js__WEBPACK_IMPORTED_MODULE_12__.Riba; },
/* harmony export */   "ShowBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ShowBinder; },
/* harmony export */   "SrcsetSizeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.SrcsetSizeBinder; },
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleBackgroundImageBinder; },
/* harmony export */   "StyleBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleBinder; },
/* harmony export */   "StyleStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleStarBinder; },
/* harmony export */   "TagStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TagStarBinder; },
/* harmony export */   "TemplateBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TemplateBinder; },
/* harmony export */   "TemplatesComponent": function() { return /* reexport safe */ _components_templates_templates_component_js__WEBPACK_IMPORTED_MODULE_6__.TemplatesComponent; },
/* harmony export */   "TextBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TextBinder; },
/* harmony export */   "ToggleOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ToggleOnEventBinder; },
/* harmony export */   "UncheckedBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.UncheckedBinder; },
/* harmony export */   "UnlessBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.UnlessBinder; },
/* harmony export */   "ValueBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ValueBinder; },
/* harmony export */   "View": function() { return /* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_13__.View; },
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.andFormatter; },
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.appendFormatter; },
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.argsFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.betweenFormatter; },
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.booleanFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.callNameFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.capitalizeFormatter; },
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.containsFormatter; },
/* harmony export */   "coreModule": function() { return /* reexport safe */ _core_module_js__WEBPACK_IMPORTED_MODULE_14__.coreModule; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.cutFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.defaultFormatter; },
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.dividedByFormatter; },
/* harmony export */   "dotAdapter": function() { return /* reexport safe */ _adapters_index_js__WEBPACK_IMPORTED_MODULE_2__.dotAdapter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.downcaseFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.eltFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.emptyFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.endsWithFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.eqFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.evenFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.filledFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.firstFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.gcdFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.getFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.gtFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.handleizeFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isDefinedFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isDesktopFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isIntegerFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isLastFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isMobileFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isUndefinedFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.joinFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.jsonFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.lastFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.ltFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.mapFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.matchFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.moduloFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.notFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.numberFormatFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.orFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.osFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.overlapsFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.padStartFormatter; },
/* harmony export */   "parseDeclaration": function() { return /* reexport safe */ _parse_declaration_js__WEBPACK_IMPORTED_MODULE_9__.parseDeclaration; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.parseFormatter; },
/* harmony export */   "parseNode": function() { return /* reexport safe */ _parse_node_js__WEBPACK_IMPORTED_MODULE_10__.parseNode; },
/* harmony export */   "parseTemplate": function() { return /* reexport safe */ _parse_template_js__WEBPACK_IMPORTED_MODULE_11__.parseTemplate; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.pluralizeFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.plusFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.preferFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.prependFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.rangeFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.replaceFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.sizeFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.stripHtmlFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.ternaryFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.timesFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toStringFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.unevenFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/core/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/core/src/services/index.ts");
/* harmony import */ var _adapters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapters/index.js */ "../../packages/core/src/adapters/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/core/src/binders/index.ts");
/* harmony import */ var _component_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component/index.js */ "../../packages/core/src/component/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/index.js */ "../../packages/core/src/components/index.ts");
/* harmony import */ var _components_templates_templates_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/templates/templates.component.js */ "../../packages/core/src/components/templates/templates.component.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/core/src/formatters/index.ts");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _parse_declaration_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse-declaration.js */ "../../packages/core/src/parse-declaration.ts");
/* harmony import */ var _parse_node_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parse-node.js */ "../../packages/core/src/parse-node.ts");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");
/* harmony import */ var _riba_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./riba.js */ "../../packages/core/src/riba.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _core_module_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core.module.js */ "../../packages/core/src/core.module.ts");
















/***/ }),

/***/ "../../packages/core/src/observer.ts":
/*!*******************************************!*\
  !*** ../../packages/core/src/observer.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": function() { return /* binding */ Observer; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

class Observer {
  static updateOptions(options) {
    if (!options.adapters) {
      throw new Error("adapters are required!");
    }

    if (options.adapters) {
      Observer.adapters = _objectSpread(_objectSpread({}, Observer.adapters), options.adapters);
      Observer.interfaces = Object.keys(Observer.adapters);
    }

    Observer.rootInterface = options.rootInterface || Observer.interfaces[0];

    if (!Observer.rootInterface) {
      throw new Error("rootInterface is required!");
    }
  }
  /**
   * Tokenizes the provided keypath string into interface + path tokens for the
   * observer to work with.
   */


  static tokenize(keypath, root) {
    const tokens = [];
    let current = {
      i: root,
      path: ""
    };
    let index;
    let chr;

    for (index = 0; index < keypath.length; index++) {
      chr = keypath.charAt(index);

      if (~Observer.interfaces.indexOf(chr)) {
        tokens.push(current);
        current = {
          i: chr,
          path: ""
        };
      } else {
        current.path += chr;
      }
    }

    tokens.push(current);
    return tokens;
  }
  /**
   * Gets the provided key on an object.
   * @param key
   * @param obj
   */


  static get(key, obj) {
    return Observer.adapters[key.i].get(obj, key.path);
  }
  /**
   * Observes or unobserves a callback on the object using the provided key.
   * @param active
   * @param key
   * @param obj
   * @param callback
   */


  static set(active, key, obj, callback) {
    if (active) {
      Observer.adapters[key.i].observe(obj, key.path, callback);
    } else {
      Observer.adapters[key.i].unobserve(obj, key.path, callback);
    }
  }

  /**
   * Constructs a new keypath observer and kicks things off.
   * @param obj
   * @param keypath
   * @param callback
   */
  constructor(obj, keypath, callback) {
    this.keypath = keypath;
    this.callback = callback;
    this.objectPath = [];
    const parseResult = this.parse();
    this.key = parseResult.key;
    this.tokens = parseResult.tokens;
    this.obj = this.getRootObject(obj);
    this.target = this.realize();

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.set(true, this.key, this.target, this.callback);
    }
  }
  /**
   * Parses the keypath using the interfaces defined on the view. Sets variables
   * for the tokenized keypath as well as the end key.
   */


  parse() {
    let path;
    let root;

    if (!Observer.interfaces || !Observer.interfaces.length) {
      throw new Error("[Observer] Must define at least one adapter interface. interfaces: \"".concat(JSON.stringify(Observer.interfaces), "\" adapters: \"").concat(JSON.stringify(Observer.adapters), "\""));
    }

    if (~Observer.interfaces.indexOf(this.keypath[0])) {
      root = this.keypath[0];
      path = this.keypath.substr(1);
    } else {
      root = Observer.rootInterface;
      path = this.keypath;
    }

    this.tokens = Observer.tokenize(path, root);

    if (!this.tokens.length) {
      throw new Error("[Observer] No tokens");
    }

    this.key = this.tokens.pop();
    return {
      key: this.key,
      tokens: this.tokens
    };
  }
  /**
   * Realizes the full keypath, attaching observers for every key and correcting
   * old observers to any changed objects in the keypath.
   */


  realize() {
    let current = this.obj;
    let unreached = -1;
    let prev;
    let token;

    for (let index = 0; index < this.tokens.length; index++) {
      token = this.tokens[index];

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(current)) {
        if (typeof this.objectPath[index] !== "undefined") {
          prev = this.objectPath[index];

          if (current !== prev) {
            Observer.set(false, token, prev, this);
            Observer.set(true, token, current, this);
            this.objectPath[index] = current;
          }
        } else {
          Observer.set(true, token, current, this);
          this.objectPath[index] = current;
        }

        current = Observer.get(token, current);
      } else {
        if (unreached === -1) {
          unreached = index;
        }

        prev = this.objectPath[index];

        if (prev) {
          Observer.set(false, token, prev, this);
        }
      }
    }

    if (unreached !== -1) {
      this.objectPath.splice(unreached);
    }

    return current;
  }
  /**
   * Updates the keypath. This is called when any intermediary key is changed.
   */


  sync() {
    let oldValue;
    let newValue;
    const next = this.realize();

    if (next !== this.target) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
        Observer.set(false, this.key, this.target, this.callback);
      }

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(next)) {
        Observer.set(true, this.key, next, this.callback);
      }

      oldValue = this.value();
      this.target = next;
      newValue = this.value();

      if (newValue !== oldValue || Array.isArray(newValue)) {
        this.callback.sync();
      }
    } else if (Array.isArray(next)) {
      this.callback.sync();
    }
  }
  /**
   * Reads the current end value of the observed keypath. Returns undefined if
   * the full keypath is unreachable.
   */


  value() {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      return Observer.get(this.key, this.target);
    }
  }
  /**
   * Sets the current end value of the observed keypath. Calling setValue when
   *  the full keypath is unreachable is a no-op.
   * @param value
   */


  setValue(value) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.adapters[this.key.i].set(this.target, this.key.path, value);
    }
  }
  /**
   * Unobserves the entire keypath.
   */


  unobserve() {
    let obj;
    let token;

    for (let index = 0; index < this.tokens.length; index++) {
      token = this.tokens[index];
      obj = this.objectPath[index];

      if (obj) {
        Observer.set(false, token, obj, this);
      }
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.set(false, this.key, this.target, this.callback);
    }
  }
  /**
   * traverse the scope chain to find the scope which has the root property
   * if the property is not found in chain, returns the root scope
   * @param obj
   */


  getRootObject(obj) {
    let rootProp;
    let current;

    if (!obj.$parent) {
      return obj;
    }

    if (this.tokens.length) {
      rootProp = this.tokens[0].path;
    } else {
      rootProp = this.key.path;
    }

    current = obj;

    while (current.$parent && current[rootProp] === undefined) {
      current = current.$parent;
    }

    return current;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Observer, "interfaces", []);

/***/ }),

/***/ "../../packages/core/src/parse-declaration.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/parse-declaration.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseDeclaration": function() { return /* binding */ parseDeclaration; }
/* harmony export */ });
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");

/**
 * Parses an attribute argument to his keypath and splits the formatter names into a pipes array.
 * @param declaration e.g. `object.data | validate | json`
 *
 * if declaration is
 * ```
 * object.data | validate | json`
 * ``
 *
 * the result is
 * ```
 * {
 *    keypath: "object.data",
 *    pipes: ["validate", "json"]
 * }
 * ```
 */

function parseDeclaration(declaration) {
  const matches = declaration.match(_constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.DECLARATION_SPLIT);

  if (matches === null) {
    throw new Error("[View] No matches");
  }

  const pipes = matches.map(str => {
    return str.trim();
  });
  const keypath = pipes.shift() || undefined;
  return {
    keypath,
    pipes
  };
}

/***/ }),

/***/ "../../packages/core/src/parse-node.ts":
/*!*********************************************!*\
  !*** ../../packages/core/src/parse-node.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseNode": function() { return /* binding */ parseNode; }
/* harmony export */ });
/* harmony import */ var _binders_mustache_text_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/mustache-text.binder.js */ "../../packages/core/src/binders/mustache-text.binder.ts");
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");



function parseNode(view, node, templateDelimiters) {
  /** If true stop / block the parseNode  recursion */
  let blockRecursion = false;
  node = node;

  if (node.nodeType === Node.TEXT_NODE) {
    let tokens = null;

    if (node.data) {
      tokens = (0,_parse_template_js__WEBPACK_IMPORTED_MODULE_2__.parseTemplate)(node.data, templateDelimiters);
    }

    if (tokens && tokens.length) {
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const text = document.createTextNode(token.value);

        if (node.parentNode && text && node) {
          node.parentNode.insertBefore(text, node);
        }

        if (token.type === _constants_parser_js__WEBPACK_IMPORTED_MODULE_1__.BINDING) {
          // TODO fix circular dependency
          view.buildBinding(text, null, token.value, _binders_mustache_text_binder_js__WEBPACK_IMPORTED_MODULE_0__.MustacheTextBinder, null);
        }
      }

      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }

    blockRecursion = true;
  } else if (node.nodeType === Node.ELEMENT_NODE) {
    // traverse binds attributes and components
    blockRecursion = view.traverse(node);
  }

  if (!blockRecursion) {
    if (node.childNodes && node.childNodes.length > 0) {
      for (let i = 0; i < node.childNodes.length; i++) {
        const childNode = node.childNodes[i];

        if (childNode) {
          parseNode(view, childNode, templateDelimiters);
        }
      }
    }
  }
}

/***/ }),

/***/ "../../packages/core/src/parse-template.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/parse-template.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseTemplate": function() { return /* binding */ parseTemplate; }
/* harmony export */ });
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");

/**
 * Template parser and tokenizer for {{ mustache-style }} text content bindings.
 * Parses the template and returns a set of tokens, separating static portions
 * of text from binding declarations.
 * @param template
 * @param delimiters
 */

function parseTemplate(template, delimiters) {
  let tokens = null;
  const length = template.length;
  let index = 0;
  let lastIndex = 0;
  const open = delimiters[0];
  const close = delimiters[1];

  while (lastIndex < length) {
    index = template.indexOf(open, lastIndex);

    if (index < 0) {
      if (tokens) {
        tokens.push({
          type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
          value: template.slice(lastIndex)
        });
      }

      break;
    } else {
      tokens = tokens || [];

      if (index > 0 && lastIndex < index) {
        tokens.push({
          type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
          value: template.slice(lastIndex, index)
        });
      }

      lastIndex = index + open.length;
      index = template.indexOf(close, lastIndex);

      if (index < 0) {
        const substring = template.slice(lastIndex - open.length);
        const lastToken = tokens[tokens.length - 1];

        if (lastToken && lastToken.type === _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT) {
          lastToken.value += substring;
        } else {
          tokens.push({
            type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
            value: substring
          });
        }

        break;
      }

      const value = template.slice(lastIndex, index).trim();
      tokens.push({
        type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.BINDING,
        value
      });
      lastIndex = index + close.length;
    }
  }

  return tokens;
}

/***/ }),

/***/ "../../packages/core/src/riba.ts":
/*!***************************************!*\
  !*** ../../packages/core/src/riba.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Riba": function() { return /* binding */ Riba; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _services_module_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/module.service.js */ "../../packages/core/src/services/module.service.ts");
/* harmony import */ var _services_lifecycle_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/lifecycle.service.js */ "../../packages/core/src/services/lifecycle.service.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }







class Riba {
  /**
   * Default event handler, calls the function defined in his binder
   * @see Binding.eventHandler
   * @param el The element the event was triggered from
   */
  static handler(context, ev, binder, el) {
    if (!this || !this.call) {
      const error = new Error("[rv-".concat(binder.type, "=\"").concat(binder.keypath, "\"] Event handler \"").concat(binder.keypath, "\" not found!\""));
      console.error(error, binder, el, binder.view.models);
      throw error;
    }

    this.call(context, ev, binder.view.models, el);
  }
  /** singleton instance */


  set prefix(value) {
    if (Array.isArray(value)) {
      this._prefix = [];
      this._fullPrefix = [];

      for (const val of value) {
        this._prefix.push(val);

        this._fullPrefix.push(val + "-");
      }
    }
  }

  get prefix() {
    return this._prefix;
  }

  get fullPrefix() {
    return this._fullPrefix;
  }
  /**
   * Creates an singleton instance of Riba.
   */


  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lifecycle", _services_lifecycle_service_js__WEBPACK_IMPORTED_MODULE_6__.LifecycleService.getInstance());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "binders", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "components", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formatters", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapters", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "parseTemplate", _parse_template_js__WEBPACK_IMPORTED_MODULE_1__.parseTemplate);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "parseType", _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseType);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateDelimiters", ["{", "}"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "rootInterface", ".");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "preloadData", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "removeBinderAttributes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "blockNodeNames", ["SCRIPT", "STYLE", "TEMPLATE", "CODE"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "blockUnknownCustomElements", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_prefix", ["rv"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_fullPrefix", ["rv-"]);

    this.module = new _services_module_service_js__WEBPACK_IMPORTED_MODULE_5__.ModulesService(this.binders, this.components, this.formatters, this.adapters);

    if (Riba.instance) {
      return Riba.instance;
    }

    Riba.instance = this;
  }
  /**
   * Merges an object literal into the corresponding global options.
   * @param options
   */


  configure(options) {
    if (!options) {
      return;
    }

    for (const [option, value] of Object.entries(options)) {
      switch (option) {
        case "binders":
          this.binders = _objectSpread(_objectSpread({}, this.binders), value);
          break;

        case "formatters":
          this.formatters = _objectSpread(_objectSpread({}, this.formatters), value);
          break;

        case "components":
          this.components = _objectSpread(_objectSpread({}, this.components), value);
          break;

        case "adapters":
          this.adapters = _objectSpread(_objectSpread({}, this.adapters), value);
          break;

        case "prefix":
          this.prefix = value;
          break;

        case "parseTemplate":
          this.parseTemplate = value;
          break;

        case "parseType":
          this.parseType = value;
          break;

        case "templateDelimiters":
          this.templateDelimiters = value;
          break;

        case "rootInterface":
          this.rootInterface = value;
          break;

        case "preloadData":
          this.preloadData = value;
          break;

        case "blockNodeNames":
          this.blockNodeNames = value;
          break;

        case "blockUnknownCustomElements":
          this.blockUnknownCustomElements = Boolean(value);
          break;

        default:
          console.warn("Option not supported", option, value);
          break;
      }
    }
  }

  getViewOptions(options) {
    const viewOptions = {
      // EXTENSIONS
      adapters: {},
      binders: {},
      components: {},
      formatters: {},
      // other
      attributeBinders: [],
      // sightglass
      rootInterface: {}
    };

    if (options) {
      viewOptions.binders = _objectSpread(_objectSpread({}, viewOptions.binders), options.binders);
      viewOptions.formatters = _objectSpread(_objectSpread({}, viewOptions.formatters), options.formatters);
      viewOptions.components = _objectSpread(_objectSpread({}, viewOptions.components), options.components);
      viewOptions.adapters = _objectSpread(_objectSpread({}, viewOptions.adapters), options.adapters);
    } // Prefix


    if (options !== null && options !== void 0 && options.prefix && Array.isArray(options === null || options === void 0 ? void 0 : options.prefix)) {
      viewOptions.prefix = [];
      viewOptions.fullPrefix = [];

      for (const prefix of options.prefix) {
        viewOptions.prefix.push(prefix);
        viewOptions.fullPrefix.push(prefix + "-");
      }
    } else {
      viewOptions.prefix = this.prefix;
      viewOptions.fullPrefix = this.fullPrefix;
    }

    viewOptions.templateDelimiters = (options === null || options === void 0 ? void 0 : options.templateDelimiters) || this.templateDelimiters;
    viewOptions.rootInterface = (options === null || options === void 0 ? void 0 : options.rootInterface) || this.rootInterface;
    viewOptions.removeBinderAttributes = typeof (options === null || options === void 0 ? void 0 : options.removeBinderAttributes) === "boolean" ? options.removeBinderAttributes : this.removeBinderAttributes;
    viewOptions.blockNodeNames = (options === null || options === void 0 ? void 0 : options.blockNodeNames) || this.blockNodeNames;
    viewOptions.preloadData = typeof (options === null || options === void 0 ? void 0 : options.preloadData) === "boolean" ? options.preloadData : this.preloadData;
    viewOptions.handler = (options === null || options === void 0 ? void 0 : options.handler) || Riba.handler; // merge extensions

    viewOptions.binders = _objectSpread(_objectSpread({}, this.binders), viewOptions.binders);
    viewOptions.formatters = _objectSpread(_objectSpread({}, this.formatters), viewOptions.formatters);
    viewOptions.components = _objectSpread(_objectSpread({}, this.components), viewOptions.components);
    viewOptions.adapters = _objectSpread(_objectSpread({}, this.adapters), viewOptions.adapters);

    if (!viewOptions.attributeBinders) {
      viewOptions.attributeBinders = [];
    } // get all attributeBinders from available binders


    if (viewOptions.binders) {
      const attributeBinders = Object.keys(viewOptions.binders).filter(key => key.indexOf("*") >= 1 // Should contain, but not start with, *
      );
      viewOptions.attributeBinders.push(...attributeBinders);
    }

    return viewOptions;
  }
  /**
   * Binds some data to a template / element. Returns a riba.View instance.
   * @param el
   * @param models The root
   * @param options
   * @returns
   */


  bind(el) {
    let models = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let options = arguments.length > 2 ? arguments[2] : undefined;
    const viewOptions = this.getViewOptions(options);
    _observer_js__WEBPACK_IMPORTED_MODULE_4__.Observer.updateOptions(viewOptions);
    const view = new _view_js__WEBPACK_IMPORTED_MODULE_3__.View(el, models, viewOptions);
    view.bind();
    return view;
  }

}
window.Riba = Riba;

/***/ }),

/***/ "../../packages/core/src/services/adapter.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/services/adapter.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterService": function() { return /* binding */ AdapterService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observer.js */ "../../packages/core/src/observer.ts");



class AdapterService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   */
  constructor(adapters) {
    super(adapters);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "adapter");
  }
  /**
   * Regist a adapter with his name
   * @param adapter
   * @param name
   */


  regist(adapter, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || adapter.name : adapter.name || fallbackName;

    if (!name) {
      throw new Error("Adapter name not found!");
    }

    this.elements[name] = adapter;
    const options = {
      adapters: this.elements
    };
    _observer_js__WEBPACK_IMPORTED_MODULE_2__.Observer.updateOptions(options);
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/binder.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/services/binder.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindersService": function() { return /* binding */ BindersService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


/**
 *
 */

class BindersService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   * @param binders;
   */
  constructor(binders) {
    super(binders);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "binder");
  }
  /**
   * Regist a binder
   * @param binder
   * @param name  Overwrites the name to access the binder over
   */


  regist(Binder, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!Binder) {
      throw new Error("No Binder passed to register!");
    }

    const name = forceFallback ? fallbackName || Binder.key : Binder.key || fallbackName;

    if (!name) {
      throw new Error("Binder name not found!");
    }

    this.elements[name] = Binder;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/component.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/component.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentService": function() { return /* binding */ ComponentService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


class ComponentService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   * @param components
   */
  constructor(components) {
    super(components);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "components");
  }
  /**
   * Regist a component with his name
   * @param component
   * @param name
   */


  regist(component, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || component.tagName : component.tagName || fallbackName;

    if (!name) {
      console.warn(new Error("Component name not found!"), component);
      return this.elements;
    }

    this.elements[name] = component;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/core.service.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/services/core.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreService": function() { return /* binding */ CoreService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class CoreService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of CoreService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of CoreService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CoreService, "_options", {});

/***/ }),

/***/ "../../packages/core/src/services/formatter.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/formatter.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatterService": function() { return /* binding */ FormatterService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


class FormatterService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   */
  constructor(formatters) {
    super(formatters);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "formatter");
  }
  /**
   * Regist a formatter with his name
   * @param formatter
   * @param name
   */


  regist(formatter, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || formatter.name : formatter.name || fallbackName;

    if (!name) {
      throw new Error("Formatter name not found!");
    }

    this.elements[name] = formatter;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/http.service.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/services/http.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpService": function() { return /* binding */ HttpService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


class HttpService {
  /**
   * Set header for each request
   * @param name Header name
   * @param value Header value
   */
  static setRequestHeaderEachRequest(name, value) {
    this._requestHeadersEachRequest.push({
      name,
      value
    });
  }
  /**
   * Load JSON-encoded data from the server using a GET HTTP request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @see https://api.jquery.com/jquery.getjson/
   */


  static async getJSON(url, data) {
    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return this.fetch(url, "GET", data, "json", headers, options);
  }
  /**
   * Load data from the server using a HTTP POST request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see https://api.jquery.com/jquery.post/
   */


  static async post(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "POST", data, dataType, headers, options);
  }

  static async delete(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "DELETE", data, dataType, headers, options);
  }

  static async put(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "PUT", data, dataType, headers, options);
  }
  /**
   * Load data from the server using a HTTP GET request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see https://api.jquery.com/jquery.get/
   */


  static async get(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "GET", data, dataType, headers, options);
  }
  /**
   *
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   */


  static parseDataType(dataType) {
    const headers = {};
    let contentType = "application/x-www-form-urlencoded";
    let accept = "*/*";

    switch (dataType) {
      case "script":
        contentType = "application/javascript";
        break;

      case "json":
        contentType = "application/json";
        accept = "application/json, text/javascript";
        break;

      case "xml":
        contentType = "application/xml";
        accept = "application/xml, text/xml";
        break;

      case "text":
        contentType = "text/plain";
        accept = "text/plain";
        break;

      case "html":
        contentType = "text/html";
        accept = "text/html";
        break;

      case "form":
        contentType = "application/x-www-form-urlencoded";
        break;
      // case "multi-form":
      //   contentType = "multipart/form-data";
      //   break;
    }

    if (contentType) {
      headers["Content-Type"] = contentType; // tslint:disable-next-line:no-string-literal

      headers["Accept"] = accept;
    }

    return headers;
  }

  static async fetch(url) {
    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";
    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let dataType = arguments.length > 3 ? arguments[3] : undefined;
    let headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

    if (!fetch) {
      throw new Error("Your browser does not support the fetch API, use xhr instead or install a polyfill.");
    }

    let body; // headers

    for (const header of this._requestHeadersEachRequest) {
      headers[header.name] = header.value;
    }

    if (dataType) {
      headers = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.extend)({
        deep: false
      }, headers, this.parseDataType(dataType));
    }

    if (!options.crossDomain && !headers["X-Requested-With"]) {
      headers["X-Requested-With"] = "XMLHttpRequest";
    }

    const cache = options.cache ? options.cache : "default";

    if (method === "GET" && data) {
      const queryStr = new URLSearchParams(data).toString();

      if (queryStr) {
        const separator = url.indexOf("?") !== -1 ? "&" : "?";
        url = url + separator + new URLSearchParams(data).toString();
      }
    } else if (data) {
      if (dataType === "form") {
        body = new URLSearchParams(data);
      } else {
        body = JSON.stringify(data);
      }
    }

    const response = await fetch(url, {
      credentials: "same-origin",
      cache,
      method,
      body,
      headers,
      mode: options.mode || "cors"
    });
    let bodyResult = await response.text();

    if (typeof bodyResult === "string" && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isJson)(bodyResult)) {
      bodyResult = JSON.parse(bodyResult);
    }

    if (typeof bodyResult === "string") {
      switch (bodyResult) {
        case "null":
          bodyResult = null;
          break;

        case "true":
          bodyResult = true;
          break;

        case "false":
          bodyResult = false;
          break;

        case "undefined":
          bodyResult = undefined;
          break;
      }
    }

    const result = {
      status: response.status,
      headers: response.headers,
      ok: response.ok,
      redirected: response.redirected,
      statusText: response.statusText,
      // trailer: response.trailer,
      type: response.type,
      url: response.url,
      arrayBuffer: response.arrayBuffer,
      blob: response.blob,
      bodyUsed: response.bodyUsed,
      clone: response.clone,
      formData: response.formData,
      text: response.text,
      body: bodyResult
    };
    return result;
  }
  /**
   * Header name value pair to send on each request
   */


}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HttpService, "_requestHeadersEachRequest", []);

/***/ }),

/***/ "../../packages/core/src/services/index.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/services/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterService": function() { return /* reexport safe */ _adapter_service_js__WEBPACK_IMPORTED_MODULE_0__.AdapterService; },
/* harmony export */   "BindersService": function() { return /* reexport safe */ _binder_service_js__WEBPACK_IMPORTED_MODULE_1__.BindersService; },
/* harmony export */   "ComponentService": function() { return /* reexport safe */ _component_service_js__WEBPACK_IMPORTED_MODULE_3__.ComponentService; },
/* harmony export */   "CoreService": function() { return /* reexport safe */ _core_service_js__WEBPACK_IMPORTED_MODULE_4__.CoreService; },
/* harmony export */   "FormatterService": function() { return /* reexport safe */ _formatter_service_js__WEBPACK_IMPORTED_MODULE_5__.FormatterService; },
/* harmony export */   "HttpService": function() { return /* reexport safe */ _http_service_js__WEBPACK_IMPORTED_MODULE_6__.HttpService; },
/* harmony export */   "LifecycleService": function() { return /* reexport safe */ _lifecycle_service_js__WEBPACK_IMPORTED_MODULE_2__.LifecycleService; }
/* harmony export */ });
/* harmony import */ var _adapter_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter.service.js */ "../../packages/core/src/services/adapter.service.ts");
/* harmony import */ var _binder_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binder.service.js */ "../../packages/core/src/services/binder.service.ts");
/* harmony import */ var _lifecycle_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.service.js */ "../../packages/core/src/services/lifecycle.service.ts");
/* harmony import */ var _component_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component.service.js */ "../../packages/core/src/services/component.service.ts");
/* harmony import */ var _core_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core.service.js */ "../../packages/core/src/services/core.service.ts");
/* harmony import */ var _formatter_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter.service.js */ "../../packages/core/src/services/formatter.service.ts");
/* harmony import */ var _http_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./http.service.js */ "../../packages/core/src/services/http.service.ts");








/***/ }),

/***/ "../../packages/core/src/services/lifecycle.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/lifecycle.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LifecycleService": function() { return /* binding */ LifecycleService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _core_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.service.js */ "../../packages/core/src/services/core.service.ts");




/**
 * Component lifecycle control service.
 * Useful to check if all current components are bound and ready.
 */
class LifecycleService {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance("lifecycle"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "timeout", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "components", {});

    this.addEventListeners();
    this.reset();
    LifecycleService.instance = this;
  }

  static getInstance() {
    if (LifecycleService.instance) {
      return LifecycleService.instance;
    }

    LifecycleService.instance = new LifecycleService();
    return LifecycleService.instance;
  }

  getEmpty() {
    return {
      components: []
    };
  }

  addEventListeners() {
    this.events.on("Component:connected", data => {
      this.resetTimeout();
      this.components[data.tagName] = this.components[data.tagName] || this.getEmpty();
      this.components[data.tagName].components.push(data.component);
    });
    this.events.on("Component:disconnected", () => {
      this.resetTimeout();
      this.checkStates();
    });
    this.events.on("Component:afterBind", () => {
      this.resetTimeout();
      this.checkStates();
    });
    this.events.on("Component:error", (error, data) => {
      this.onError(error, data);
    }); // Router

    this.routerEvents.on("newPageReady", (viewId, newStatus, oldStatus, container, containerHtml, dataset, firstPageLoad) => {
      if (this.debug) console.debug("newPageReady", viewId, newStatus, oldStatus, "firstPageLoad", firstPageLoad);

      if (!firstPageLoad) {
        this.reset();
      }
    });
  }

  getState(tagName) {
    let connected = 0;
    let bound = 0;

    for (const component of this.components[tagName].components) {
      if (component.connected) {
        connected++;

        if (component.bound) {
          bound++;
        }
      }
    }

    return {
      connected,
      bound
    };
  }

  getStates() {
    const states = {};

    for (const tagName in this.components) {
      const state = this.getState(tagName);
      states[tagName] = {
        state,
        components: this.components[tagName].components
      };
    }

    return states;
  }

  checkStates() {
    let allBound = true;
    const states = this.getStates();

    for (const tagName in states) {
      const state = states[tagName].state;

      if (state.connected !== state.bound) {
        allBound = false;
        break;
      }
    }

    if (allBound) {
      this.onAllBound();
    }

    return {
      states,
      allBound
    };
  }

  onAllBound() {
    this.clearTimeout();
    this.events.trigger("ComponentLifecycle:allBound", this.components);
    if (this.debug) console.debug("[ComponentLifecycle] All components bound!");
  }

  onError(error, data) {
    this.clearTimeout();
    console.error("The component \"".concat(data.tagName, "\" has caused an error:"), error);
    this.events.trigger("ComponentLifecycle:error", error, data);
  }

  onTimeout() {
    this.clearTimeout();
    const states = this.getStates();

    if (Object.keys(states).length <= 0) {
      console.warn("No component found");
      this.events.trigger("ComponentLifecycle:noComponents");
      return;
    }

    let errorMessage = "[ComponentLifecycle] Timeout! {count} component(s) takes too long!\nUnfinished components:\n";
    let count = 0;

    for (const tagName in states) {
      const state = states[tagName].state;

      if (state.connected !== state.bound) {
        count++;
        errorMessage += "".concat(tagName, ": ").concat(JSON.stringify(states[tagName].state, null, 2), " + \n");
      }
    }

    errorMessage = errorMessage.replace("{count}", count.toString());
    this.events.trigger("ComponentLifecycle:error", new Error(errorMessage), {});
  }

  clearTimeout() {
    if (this.timeout) {
      window.clearTimeout(this.timeout);
    }
  }

  resetTimeout() {
    var _CoreService$options$;

    if (this.debug) console.debug("[ComponentLifecycle] reset timeout..");
    this.clearTimeout();
    this.timeout = window.setTimeout(this.onTimeout.bind(this), ((_CoreService$options$ = _core_service_js__WEBPACK_IMPORTED_MODULE_2__.CoreService.options.lifecycle) === null || _CoreService$options$ === void 0 ? void 0 : _CoreService$options$.timeout) || 5000);
    return this.timeout;
  }

  reset() {
    if (this.debug) console.debug("[ComponentLifecycle] reset!");
    this.components = {};
    this.resetTimeout();
  }

}

/***/ }),

/***/ "../../packages/core/src/services/module-element.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/services/module-element.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleElementService": function() { return /* binding */ ModuleElementService; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

class ModuleElementService {
  /**
   *
   * @param elements;
   */
  constructor(elements) {
    this.elements = elements;
  }
  /**
   * Regist a element
   * @param element
   * @param name  Overwrites the name to access the element over
   */


  /**
   * Regist a set / array of elements
   * @param elements
   */
  regists(elements) {
    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(elements)) {
      throw new Error("Elements to register must be an object of elements");
    }

    for (const key in elements) {
      if (elements[key] && key !== "__esModule") {
        const element = elements[key];
        this.regist(element, key);
      }
    }

    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/module.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/services/module.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModulesService": function() { return /* binding */ ModulesService; }
/* harmony export */ });
/* harmony import */ var _binder_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binder.service.js */ "../../packages/core/src/services/binder.service.ts");
/* harmony import */ var _component_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component.service.js */ "../../packages/core/src/services/component.service.ts");
/* harmony import */ var _formatter_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatter.service.js */ "../../packages/core/src/services/formatter.service.ts");
/* harmony import */ var _adapter_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adapter.service.js */ "../../packages/core/src/services/adapter.service.ts");




class ModulesService {
  /**
   *
   * @param binders;
   * @param components;
   * @param formatters;
   * @param adapters;
   */
  constructor(binders, components, formatters, adapters) {
    this.binder = new _binder_service_js__WEBPACK_IMPORTED_MODULE_0__.BindersService(binders);
    this.component = new _component_service_js__WEBPACK_IMPORTED_MODULE_1__.ComponentService(components);
    this.formatter = new _formatter_service_js__WEBPACK_IMPORTED_MODULE_2__.FormatterService(formatters);
    this.adapter = new _adapter_service_js__WEBPACK_IMPORTED_MODULE_3__.AdapterService(adapters);
  }

  regist(module) {
    if (!module) {
      console.error(module);
      throw new Error("The Riba module is falsy!");
    }

    if (module.binders) {
      this.binder.regists(module.binders);
    }

    if (module.components) {
      this.component.regists(module.components);
    }

    if (module.formatters) {
      this.formatter.regists(module.formatters);
    }

    if (module.adapters) {
      this.adapter.regists(module.adapters);
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/types/adapter.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/adapter.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* binding */ Adapter; }
/* harmony export */ });
/**
 * The default `.` adapter that comes with riba.js. Allows subscribing to
 * properties on plain objects, implemented in ES5 natives using
 * `Object.defineProperty`.
 */

/**
 * TODO For what is this?
 */
class Adapter {}

/***/ }),

/***/ "../../packages/core/src/types/adapters.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/adapters.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/any-component.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/any-component.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/any-constructor.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/any-constructor.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/any-service.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/types/any-service.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/any-singleton.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/any-singleton.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/assign.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/assign.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/bindable-element.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/types/bindable-element.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/binder-attribute-changed-event.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/types/binder-attribute-changed-event.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/binders.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/binders.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/binding.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/binding.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/class-of-binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/class-of-binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/class-of-component.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/types/class-of-component.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/class-of.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/class-of.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-event-data.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-event-data.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-object.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-object.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-state.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-state.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-states.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-states.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/components.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/components.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/data-element.ts":
/*!*****************************************************!*\
  !*** ../../packages/core/src/types/data-element.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/elements.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/elements.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/event-handler-function.ts":
/*!***************************************************************!*\
  !*** ../../packages/core/src/types/event-handler-function.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/event-handler.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/event-handler.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/extensions.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/extensions.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/formatter-observers.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/formatter-observers.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/formatter.ts":
/*!**************************************************!*\
  !*** ../../packages/core/src/types/formatter.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/formatters.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/formatters.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/http-data-type.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/types/http-data-type.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/http-method.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/types/http-method.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/http-service-options.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/types/http-service-options.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/http-service-response.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/types/http-service-response.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/index.ts":
/*!**********************************************!*\
  !*** ../../packages/core/src/types/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* reexport safe */ _adapter_js__WEBPACK_IMPORTED_MODULE_0__.Adapter; }
/* harmony export */ });
/* harmony import */ var _adapter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter.js */ "../../packages/core/src/types/adapter.ts");
/* harmony import */ var _adapters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapters.js */ "../../packages/core/src/types/adapters.ts");
/* harmony import */ var _any_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./any-component.js */ "../../packages/core/src/types/any-component.ts");
/* harmony import */ var _any_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./any-constructor.js */ "../../packages/core/src/types/any-constructor.ts");
/* harmony import */ var _any_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./any-service.js */ "../../packages/core/src/types/any-service.ts");
/* harmony import */ var _any_singleton_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./any-singleton.js */ "../../packages/core/src/types/any-singleton.ts");
/* harmony import */ var _assign_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./assign.js */ "../../packages/core/src/types/assign.ts");
/* harmony import */ var _bindable_element_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bindable-element.js */ "../../packages/core/src/types/bindable-element.ts");
/* harmony import */ var _binder_attribute_changed_event_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binder-attribute-changed-event.js */ "../../packages/core/src/types/binder-attribute-changed-event.ts");
/* harmony import */ var _binders_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./binders.js */ "../../packages/core/src/types/binders.ts");
/* harmony import */ var _binding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./binding.js */ "../../packages/core/src/types/binding.ts");
/* harmony import */ var _class_of_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./class-of-binder.js */ "../../packages/core/src/types/class-of-binder.ts");
/* harmony import */ var _class_of_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./class-of-component.js */ "../../packages/core/src/types/class-of-component.ts");
/* harmony import */ var _class_of_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./class-of.js */ "../../packages/core/src/types/class-of.ts");
/* harmony import */ var _component_lifecycle_event_data_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./component-lifecycle-event-data.js */ "../../packages/core/src/types/component-lifecycle-event-data.ts");
/* harmony import */ var _component_lifecycle_object_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./component-lifecycle-object.js */ "../../packages/core/src/types/component-lifecycle-object.ts");
/* harmony import */ var _component_lifecycle_state_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./component-lifecycle-state.js */ "../../packages/core/src/types/component-lifecycle-state.ts");
/* harmony import */ var _component_lifecycle_states_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./component-lifecycle-states.js */ "../../packages/core/src/types/component-lifecycle-states.ts");
/* harmony import */ var _components_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components.js */ "../../packages/core/src/types/components.ts");
/* harmony import */ var _data_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./data-element.js */ "../../packages/core/src/types/data-element.ts");
/* harmony import */ var _elements_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./elements.js */ "../../packages/core/src/types/elements.ts");
/* harmony import */ var _event_handler_function_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./event-handler-function.js */ "../../packages/core/src/types/event-handler-function.ts");
/* harmony import */ var _event_handler_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./event-handler.js */ "../../packages/core/src/types/event-handler.ts");
/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./extensions.js */ "../../packages/core/src/types/extensions.ts");
/* harmony import */ var _formatter_observers_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./formatter-observers.js */ "../../packages/core/src/types/formatter-observers.ts");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./formatter.js */ "../../packages/core/src/types/formatter.ts");
/* harmony import */ var _formatters_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./formatters.js */ "../../packages/core/src/types/formatters.ts");
/* harmony import */ var _http_data_type_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./http-data-type.js */ "../../packages/core/src/types/http-data-type.ts");
/* harmony import */ var _http_method_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./http-method.js */ "../../packages/core/src/types/http-method.ts");
/* harmony import */ var _http_service_options_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./http-service-options.js */ "../../packages/core/src/types/http-service-options.ts");
/* harmony import */ var _http_service_response_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./http-service-response.js */ "../../packages/core/src/types/http-service-response.ts");
/* harmony import */ var _module_element_type_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./module-element-type.js */ "../../packages/core/src/types/module-element-type.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./module-options.js */ "../../packages/core/src/types/module-options.ts");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./module.js */ "../../packages/core/src/types/module.ts");
/* harmony import */ var _observed_attribute_to_check_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./observed-attribute-to-check.js */ "../../packages/core/src/types/observed-attribute-to-check.ts");
/* harmony import */ var _observed_attributes_to_check_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./observed-attributes-to-check.js */ "../../packages/core/src/types/observed-attributes-to-check.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/types/observer.ts");
/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./options.js */ "../../packages/core/src/types/options.ts");
/* harmony import */ var _parsed_declarations_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./parsed-declarations.js */ "../../packages/core/src/types/parsed-declarations.ts");
/* harmony import */ var _scope_base_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./scope-base.js */ "../../packages/core/src/types/scope-base.ts");
/* harmony import */ var _scope_root_base_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./scope-root-base.js */ "../../packages/core/src/types/scope-root-base.ts");
/* harmony import */ var _services_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./services.js */ "../../packages/core/src/types/services.ts");
/* harmony import */ var _template_function_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./template-function.js */ "../../packages/core/src/types/template-function.ts");
/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./tokens.js */ "../../packages/core/src/types/tokens.ts");













































/***/ }),

/***/ "../../packages/core/src/types/module-element-type.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/module-element-type.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/module-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/types/module-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/module.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/module.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/observed-attribute-to-check.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/types/observed-attribute-to-check.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/observed-attributes-to-check.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/types/observed-attributes-to-check.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/observer.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/observer.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/options.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/options.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/parsed-declarations.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/parsed-declarations.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/scope-base.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/scope-base.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/scope-root-base.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/scope-root-base.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/services.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/services.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/template-function.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/types/template-function.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/types/tokens.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/tokens.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/core/src/view.ts":
/*!***************************************!*\
  !*** ../../packages/core/src/view.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "View": function() { return /* binding */ View; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _parse_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-node.js */ "../../packages/core/src/parse-node.ts");
/* harmony import */ var _parse_declaration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-declaration.js */ "../../packages/core/src/parse-declaration.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _binders_attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binders/attribute.binder.js */ "../../packages/core/src/binders/attribute.binder.ts");





/**
 * Sets the attribute on the element. If no binder is matched it will fall
 * back to using this binder.
 */

/**
 * A collection of bindings built from a set of parent nodes.
 */

class View {
  /** Global root scope */

  /**
   * Helper function to create a new view inside of a binding
   * @param binding
   * @param models
   * @param anchorEl
   */
  static create(binder, models, anchorEl) {
    var _binder$marker;

    const template = binder.el.cloneNode(true);
    const view = new View(template, models, binder.view.options);
    view.bind();

    if (!(binder !== null && binder !== void 0 && (_binder$marker = binder.marker) !== null && _binder$marker !== void 0 && _binder$marker.parentNode)) {
      console.warn("[View]: No parent node for binding!");
    } else {
      binder.marker.parentNode.insertBefore(template, anchorEl);
    }

    return view;
  }

  // public componentView: View | null = null;

  /**
   * The DOM elements and the model objects for binding are passed into the
   * constructor along with any local options that should be used throughout the
   * context of the view and it's bindings.
   * @param els
   * @param models
   * @param options
   */
  constructor(els, models, options) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "bindings", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "webComponents", []);

    if (Array.isArray(els)) {
      this.els = els;
    } else {
      this.els = [els];
    }

    this.models = models; // If $root property exists in model merge this with the global root scope / model

    if (this.models.$root) {
      for (const key of Object.keys(this.models.$root)) {
        View.$rootScope[key] = this.models.$root[key];
      }
    }

    this.models.$root = View.$rootScope;
    this.options = options;
    this.build();
  }
  /**
   * Regist all components
   * This can sometimes be useful so that the browser automatically recognizes whether a component is inserted into the dom.
   * However, the components are already registered when they are found by riba in the DOM.
   *
   * Please note, this method does not support the browser fallback for browsers that cannot use custom elements.
   */


  registComponents() {
    for (const nodeName in this.options.components) {
      if (this.options.components[nodeName]) {
        // Not already registered?
        if (!customElements.get(nodeName)) {
          const COMPONENT = this.options.components[nodeName];
          this.registComponent(COMPONENT, nodeName);
        }
      }
    }
  }
  /**
   * Binds all of the current bindings for this view.
   */


  bind() {
    this.bindings.forEach(binding => {
      binding._bind();
    });
  }
  /**
   * Unbinds all of the current bindings for this view.
   */


  unbind() {
    if (Array.isArray(this.bindings)) {
      this.bindings.forEach(binding => {
        binding._unbind();

        if (typeof binding.el && this.options.removeBinderAttributes) {// TODO reset attribute ?
          // binding.el.setAttribute(attribute.name);
        }
      });
    } // TODO fallback to unbind web components


    if (Array.isArray(this.webComponents)) {
      this.webComponents.forEach(webComponent => {
        if (typeof webComponent.unbind === "function") {
          webComponent.unbind();
        }
      });
    }
  }
  /**
   * Syncs up the view with the model by running the routines on all bindings.
   */


  sync() {
    this.bindings.forEach(binding => {
      if (binding.sync) {
        binding.sync();
      }
    });
  }
  /**
   * Publishes the input values from the view back to the model (reverse sync).
   */


  publish() {
    this.bindings.forEach(binder => {
      if (binder.publishes && binder.publish) {
        binder.publish();
      }
    });
  }
  /**
   * Updates the view's models along with any affected bindings.
   * @param models
   */


  update() {
    let models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Object.keys(models).forEach(key => {
      this.models[key] = models[key];
    });

    for (const binding of this.bindings) {
      if (binding._update) {
        binding._update(models);
      }
    }
  }
  /**
   * Parses the DOM tree and builds `Binding` instances for every matched
   * binding declaration.
   */


  build() {
    this.bindings = []; // this.bindings || [];

    if (!this.options.templateDelimiters) {
      throw new Error("templateDelimiters required");
    }

    const elements = this.els;

    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];

      if (element) {
        (0,_parse_node_js__WEBPACK_IMPORTED_MODULE_1__.parseNode)(this, element, this.options.templateDelimiters);
      }
    }

    this.bindings.sort(View.bindingComparator);
  }

  startsWithPrefix(name) {
    const bindingFullPrefixes = this.options.fullPrefix;

    if (!bindingFullPrefixes) {
      throw new Error("prefix is required");
    }

    for (const fullPrefix of bindingFullPrefixes) {
      if (name.startsWith(fullPrefix)) {
        return fullPrefix;
      }
    }

    return undefined;
  }

  binderRegex(identifier) {
    var _identifier$match;

    const wildcards = ((_identifier$match = identifier.match(/\*/g)) === null || _identifier$match === void 0 ? void 0 : _identifier$match.length) || 0;
    let regexp;

    if (wildcards > 1) {
      regexp = new RegExp("^".concat(identifier.replace("*", "([^-]*)").replaceAll("-*", "-(.+)"), "$"));
    } else {
      regexp = new RegExp("^".concat(identifier.replaceAll("*", "(.+)"), "$"));
    }

    return regexp;
  }
  /**
   *
   */


  bindBinders(attributes, node) {
    let attributeBinders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.attributeBinders;
    let block = false;

    if (!this.options.binders) {
      return block;
    }

    const bindInfos = [];

    for (let i = 0, len = attributes.length; i < len; i++) {
      let nodeName = "";
      let Binder = null;
      const attribute = attributes[i]; // if attribute starts with the binding prefix. E.g. rv-

      const startingPrefix = this.startsWithPrefix(attribute.name);

      if (startingPrefix) {
        let identifier = "";
        nodeName = attribute.name.slice(startingPrefix.length); // if binder is not a attributeBinder binder should be set

        if (this.options.binders[nodeName]) {
          Binder = this.options.binders[nodeName];
        }

        if (Binder === null) {
          // seems to be a star binder
          // Check if any attributeBinder match's
          for (let k = 0; k < attributeBinders.length; k++) {
            identifier = attributeBinders[k];
            const regexp = this.binderRegex(identifier);

            if (regexp.test(nodeName)) {
              Binder = this.options.binders[identifier];
              break;
            }
          }
        }

        if (Binder === null) {
          if (this.options.binders["*"]) {
            Binder = this.options.binders["*"];
            identifier = "*";
          } else {
            Binder = _binders_attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBinder;
          }
        } // if block is set, do not bind its child's (this means the binder bound it by itself)
        // and build binding directly (do not push it to bindInfos array)


        if (Binder.block) {
          this.buildBinding(node, nodeName, attribute.value, Binder, identifier);

          if (node.removeAttribute && this.options.removeBinderAttributes) {
            node.removeAttribute(attribute.name);
          }

          block = true;
          return block;
        }

        bindInfos.push({
          attr: attribute,
          Binder,
          nodeName,
          identifier
        });
      }
    }

    for (let i = 0; i < bindInfos.length; i++) {
      const bindInfo = bindInfos[i];
      this.buildBinding(node, bindInfo.nodeName, bindInfo.attr.value, bindInfo.Binder, bindInfo.identifier);

      if (node.removeAttribute && this.options.removeBinderAttributes) {
        node.removeAttribute(bindInfo.attr.name);
      }
    }

    return block;
  }

  bindComponent(node) {
    let block = false;

    if (!this.options.components) {
      return block;
    }

    const nodeName = node.nodeName.toLowerCase();
    const COMPONENT = this.options.components[nodeName];

    if (COMPONENT) {
      // this.registComponentWithFallback(node, COMPONENT, nodeName);
      this.registComponent(COMPONENT, nodeName);
      block = true;
    } // Also block unknown custom elements except page components
    else if (this.options.blockUnknownCustomElements && (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.isCustomElement)(node) && !nodeName.endsWith("-page")) {
      block = true;
    }

    return block;
  }

  traverse(node) {
    /** If true stop / block the parseNode recursion */
    let block = this.options.blockNodeNames.indexOf(node.nodeName) !== -1;

    if (block) {
      return block;
    }

    const attributes = node.attributes; // bind attribute binders if available

    if (attributes && this.options.binders) {
      block = this.bindBinders(attributes, node);

      if (block) {
        return block;
      }
    } // bind components


    if (!block && !node._bound && this.options.components) {
      block = this.bindComponent(node);
    }

    return block;
  }

  buildBinding(node, type, declaration, Binder, identifier) {
    const parsedDeclaration = (0,_parse_declaration_js__WEBPACK_IMPORTED_MODULE_2__.parseDeclaration)(declaration);
    const keypath = parsedDeclaration.keypath;
    const pipes = parsedDeclaration.pipes;
    this.bindings.push(new Binder(this, node, type, Binder.key, keypath, pipes, identifier));
  }
  /**
   * Register a custom element using the native customElements feature.
   * @param COMPONENT
   * @param nodeName
   */


  registComponent(COMPONENT, nodeName) {
    if (!customElements) {
      console.error("customElements not supported by your browser!");
      throw new Error("customElements not supported by your browser!");
    }

    const resolveNodeName = nodeName || COMPONENT.tagName;

    if (!customElements.get(resolveNodeName)) {
      customElements.define(COMPONENT.tagName, COMPONENT);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(View, "$rootScope", {});

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(View, "bindingComparator", (a, b) => {
  const aPriority = a.priority || 0;
  const bPriority = b.priority || 0;
  return bPriority - aPriority;
});

/***/ }),

/***/ "../../packages/extras/src/binders/data-scroll-position-y.binder.ts":
/*!**************************************************************************!*\
  !*** ../../packages/extras/src/binders/data-scroll-position-y.binder.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataScrollPositionYBinder": function() { return /* binding */ DataScrollPositionYBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");



const DEFAULT_OFFSET = 10;
/**
 * rv-data-scroll-position
 * Sets the scroll position to the element as a data attribute,
 * useful if you want to define styles depending on the scroll position.
 * ```
 * html:not([[data-scroll-position-y='top']) {
 *    padding-top: 3em;
 * }
 * ```
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 */

class DataScrollPositionYBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "offsetTop", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "offsetBottom", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "elementSelector", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._onScroll.bind(this)));
  }

  _onScroll() {
    if (this.elementSelector === "window") {
      const element = this.watchScrollOnElement;

      if (element.scrollY <= 0 + this.offsetTop) {
        this.el.dataset.scrollPositionY = "top";
      } else if (element.innerHeight + element.pageYOffset + this.offsetBottom >= document.body.offsetHeight) {
        this.el.dataset.scrollPositionY = "bottom";
      } else {
        this.el.dataset.scrollPositionY = "scrolled";
      }
    } else {
      const element = this.watchScrollOnElement;

      if (element.scrollTop <= 0 + this.offsetTop) {
        this.el.dataset.scrollPositionY = "top";
      } else if (element.scrollTop + this.offsetBottom >= element.scrollHeight - element.clientHeight) {
        this.el.dataset.scrollPositionY = "bottom";
      } else {
        this.el.dataset.scrollPositionY = "scrolled";
      }
    }
  }

  routine(el) {
    let elementSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "window";

    // Remove old scroll event
    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.removeEventListener("scroll", this.onScroll);
    } // Set new element to watch for the scroll event


    if (elementSelector === "window") {
      this.watchScrollOnElement = window;
    } else if (elementSelector === "this") {
      this.watchScrollOnElement = this.el;
    } else {
      this.watchScrollOnElement = document.querySelector(elementSelector) || undefined;
    } // Watch new element for scroll event


    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.addEventListener("scroll", this.onScroll, {
        passive: true
      });
    }

    this.offsetTop = Number(this.el.dataset.offsetTop) || DEFAULT_OFFSET;
    this.offsetBottom = Number(this.el.dataset.offsetBottom) || DEFAULT_OFFSET;
    this.elementSelector = elementSelector; // inital scroll position

    this.onScroll();
  }

  unbind() {
    // Remove old scroll event
    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.removeEventListener("scroll", this.onScroll);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DataScrollPositionYBinder, "key", "data-scroll-position-y");

/***/ }),

/***/ "../../packages/extras/src/binders/image-events.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/binders/image-events.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageEventsBinder": function() { return /* binding */ ImageEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! imagesloaded */ "../../.yarn/cache/imagesloaded-npm-5.0.0-5fe7f70cdb-aec1826e86.zip/node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_2__);



/**
 * rv-image-events
 * Additional image events:
 * * load-always - Triggered after all images have been either loaded or confirmed broken.
 * * load-done - Triggered after all images have successfully loaded without any broken images.
 * * load-fail - Triggered after all images have been loaded with at least one broken image.
 * * load-progress - Triggered after each image has been loaded.
 */

class ImageEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onAlways", this._onEvent.bind(this, "load-always"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onDone", this._onEvent.bind(this, "load-done"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onFail", this._onEvent.bind(this, "load-fail"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onProgress", this._onEvent.bind(this, "load-progress"));
  }

  _onEvent(customEventName, load, image) {
    this.el.dispatchEvent(new CustomEvent(customEventName, {
      detail: {
        load,
        image
      }
    }));
  }

  bind(el) {
    var _this$events, _this$events2, _this$events3, _this$events4;

    this.events = imagesloaded__WEBPACK_IMPORTED_MODULE_2___default()(el); // Forward the events as native events

    (_this$events = this.events) === null || _this$events === void 0 ? void 0 : _this$events.on("always", this.onAlways);
    (_this$events2 = this.events) === null || _this$events2 === void 0 ? void 0 : _this$events2.on("done", this.onDone);
    (_this$events3 = this.events) === null || _this$events3 === void 0 ? void 0 : _this$events3.on("fail", this.onFail);
    (_this$events4 = this.events) === null || _this$events4 === void 0 ? void 0 : _this$events4.on("progress", this.onProgress);
  }

  unbind() {
    if (this.events) {
      var _this$events5, _this$events6, _this$events7, _this$events8;

      (_this$events5 = this.events) === null || _this$events5 === void 0 ? void 0 : _this$events5.off("always", this.onAlways);
      (_this$events6 = this.events) === null || _this$events6 === void 0 ? void 0 : _this$events6.off("done", this.onDone);
      (_this$events7 = this.events) === null || _this$events7 === void 0 ? void 0 : _this$events7.off("fail", this.onFail);
      (_this$events8 = this.events) === null || _this$events8 === void 0 ? void 0 : _this$events8.off("progress", this.onProgress);
    }
  }

  routine() {// nothing yet
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ImageEventsBinder, "key", "image-events");

/***/ }),

/***/ "../../packages/extras/src/binders/index.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/binders/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoscrollBinder": function() { return /* reexport safe */ _scrollbar_autoscroll_binder_js__WEBPACK_IMPORTED_MODULE_5__.AutoscrollBinder; },
/* harmony export */   "DataScrollPositionYBinder": function() { return /* reexport safe */ _data_scroll_position_y_binder_js__WEBPACK_IMPORTED_MODULE_0__.DataScrollPositionYBinder; },
/* harmony export */   "ImageEventsBinder": function() { return /* reexport safe */ _image_events_binder_js__WEBPACK_IMPORTED_MODULE_1__.ImageEventsBinder; },
/* harmony export */   "ScrollEventsBinder": function() { return /* reexport safe */ _scroll_events_binder_js__WEBPACK_IMPORTED_MODULE_3__.ScrollEventsBinder; },
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* reexport safe */ _scroll_position_angle_binder_js__WEBPACK_IMPORTED_MODULE_4__.ScrollPositionAngleBinder; },
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* reexport safe */ _scrollbar_draggable_binder_js__WEBPACK_IMPORTED_MODULE_6__.ScrollbarDraggableBinder; },
/* harmony export */   "SyncElementPropertyBinder": function() { return /* reexport safe */ _sync_element_property_binder_js__WEBPACK_IMPORTED_MODULE_7__.SyncElementPropertyBinder; },
/* harmony export */   "TouchEventsBinder": function() { return /* reexport safe */ _touch_events_binder_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsBinder; }
/* harmony export */ });
/* harmony import */ var _data_scroll_position_y_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-scroll-position-y.binder.js */ "../../packages/extras/src/binders/data-scroll-position-y.binder.ts");
/* harmony import */ var _image_events_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-events.binder.js */ "../../packages/extras/src/binders/image-events.binder.ts");
/* harmony import */ var _touch_events_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./touch-events.binder.js */ "../../packages/extras/src/binders/touch-events.binder.ts");
/* harmony import */ var _scroll_events_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroll-events.binder.js */ "../../packages/extras/src/binders/scroll-events.binder.ts");
/* harmony import */ var _scroll_position_angle_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll-position-angle.binder.js */ "../../packages/extras/src/binders/scroll-position-angle.binder.ts");
/* harmony import */ var _scrollbar_autoscroll_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar-autoscroll.binder.js */ "../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts");
/* harmony import */ var _scrollbar_draggable_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scrollbar-draggable.binder.js */ "../../packages/extras/src/binders/scrollbar-draggable.binder.ts");
/* harmony import */ var _sync_element_property_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sync-element-property.binder.js */ "../../packages/extras/src/binders/sync-element-property.binder.ts");









/***/ }),

/***/ "../../packages/extras/src/binders/scroll-events.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/extras/src/binders/scroll-events.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollEventsBinder": function() { return /* binding */ ScrollEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/touch-events/scroll-events.service.js */ "../../packages/extras/src/services/touch-events/scroll-events.service.ts");



class ScrollEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.touchEventService = new _services_touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_2__.ScrollEventsService(el);
  }

  unbind() {
    if (this.touchEventService) {
      this.touchEventService.destroy();
    }
  }

  routine() {// nothing
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollEventsBinder, "key", "scroll-events");

/***/ }),

/***/ "../../packages/extras/src/binders/scroll-position-angle.binder.ts":
/*!*************************************************************************!*\
  !*** ../../packages/extras/src/binders/scroll-position-angle.binder.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* binding */ ScrollPositionAngleBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



/**
 * rv-scroll-position-*
 *
 * Scroll to a position
 *
 * @example
 * ```
 * <div rv-scroll-position-y="'end'"></div>
 * ```
 *
 * ```
 * <div rv-scroll-position-x="'start'"></div>
 * ```
 */

class ScrollPositionAngleBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", this._onResize.bind(this));
  }

  _onResize() {
    if (!this.position) {
      throw new Error("postion not defined!");
    }

    if (!this.angle) {
      throw new Error("angle not defined!");
    }

    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(this.el, this.position, this.angle);
  }

  routine(el, position) {
    this.position = position;
    this.angle = this.args[0];

    if (this.angle === "x") {
      this.angle = "horizontal";
    }

    if (this.angle === "y") {
      this.angle = "vertical";
    }

    window.addEventListener("resize", this.onResize, {
      passive: true
    });
    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(el, this.position, this.angle);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollPositionAngleBinder, "key", "scroll-position-*");

/***/ }),

/***/ "../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts":
/*!************************************************************************!*\
  !*** ../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoscrollBinder": function() { return /* binding */ AutoscrollBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_autoscroll_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/autoscroll.service.js */ "../../packages/extras/src/services/autoscroll.service.ts");




/**
 * Slideout click event to toggle the slideout
 */

class AutoscrollBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, options) {
    if (options && options.width && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.isString)(options.width)) {
      if (options.width === "100vw") {
        el.style.width = options.width;
      } else {
        el.style.width = options.width;
      }
    }

    el.classList.add("rv-autoscroll-".concat(options.angle));
    setTimeout(() => {
      if (this.autoscroll) {
        this.autoscroll.destroy();
      }

      this.autoscroll = new _services_autoscroll_service_js__WEBPACK_IMPORTED_MODULE_3__.Autoscroll(el, options);
    }, 1000);
  }

  unbind() {
    if (this.autoscroll) {
      this.autoscroll.destroy();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AutoscrollBinder, "key", "autoscroll");

/***/ }),

/***/ "../../packages/extras/src/binders/scrollbar-draggable.binder.ts":
/*!***********************************************************************!*\
  !*** ../../packages/extras/src/binders/scrollbar-draggable.binder.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* binding */ ScrollbarDraggableBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dragscroll_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/dragscroll.service.js */ "../../packages/extras/src/services/dragscroll.service.ts");



/**
 * dragscroll
 */

class ScrollbarDraggableBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, options) {
    if (this.dragscroll) {
      this.dragscroll.destroy();
    }

    this.dragscroll = new _services_dragscroll_service_js__WEBPACK_IMPORTED_MODULE_2__.Dragscroll(el, options);
  }

  unbind() {
    if (this.dragscroll) {
      this.dragscroll.destroy();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollbarDraggableBinder, "key", "scrollbar-draggable");

/***/ }),

/***/ "../../packages/extras/src/binders/sync-element-property.binder.ts":
/*!*************************************************************************!*\
  !*** ../../packages/extras/src/binders/sync-element-property.binder.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SyncElementPropertyBinder": function() { return /* binding */ SyncElementPropertyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");



/**
 * Binds an event handler on the element.
 * either `sync-element-width` or `sync-element-height`
 */

class SyncElementPropertyBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "syncWidth", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
      var _this$elToSync;

      this.el.style.width = (((_this$elToSync = this.elToSync) === null || _this$elToSync === void 0 ? void 0 : _this$elToSync.clientWidth) || 0) + "px";
    }));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "syncHeight", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
      var _this$elToSync2;

      this.el.style.height = (((_this$elToSync2 = this.elToSync) === null || _this$elToSync2 === void 0 ? void 0 : _this$elToSync2.clientHeight) || 0) + "px";
    }));
  }

  unbind() {
    const propertyName = this.args[0];

    if (this.elToSync) {
      this.elToSync.removeEventListener("resize", propertyName === "width" ? this.syncWidth : this.syncHeight);
    }
  }

  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const propertyName = this.args[0];

    if (this.elToSync) {
      this.elToSync.removeEventListener("resize", propertyName === "width" ? this.syncWidth : this.syncHeight);
    }

    const elementToSync = document.getElementById(value);

    if (elementToSync) {
      this.elToSync = elementToSync;

      switch (propertyName) {
        case "height":
          el.style.height = elementToSync.clientHeight + "px";
          window.addEventListener("resize", this.syncHeight);
          break;

        case "width":
          el.style.width = elementToSync.clientWidth + "px";
          window.addEventListener("resize", this.syncWidth);
          break;

        default:
          console.warn("[syncElementPropertyBinder] Unknown property: " + propertyName);
      }
    } else {
      console.warn("[syncElementPropertyBinder] Could not find element with id: " + value);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(SyncElementPropertyBinder, "key", "sync-element-*");

/***/ }),

/***/ "../../packages/extras/src/binders/touch-events.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/binders/touch-events.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsBinder": function() { return /* binding */ TouchEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/touch-events/touch-events.service.js */ "../../packages/extras/src/services/touch-events/touch-events.service.ts");



class TouchEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.touchEventService = new _services_touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsService(el);
  }

  unbind() {
    if (this.touchEventService) {
      this.touchEventService.destroy();
    }
  }

  routine() {// nothing
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TouchEventsBinder, "key", "touch-events");

/***/ }),

/***/ "../../packages/extras/src/extras.module.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/extras.module.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extrasModule": function() { return /* binding */ extrasModule; }
/* harmony export */ });
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/extras/src/helper/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/extras/src/binders/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/extras/src/services/index.ts");

 // import * as formatters from "./formatters/index.js";

 // import * as components from './components';

const extrasModule = {
  helper: _helper_index_js__WEBPACK_IMPORTED_MODULE_0__,
  formatters: {},
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: {},

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ExtrasService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/extras/src/helper/ease.ts":
/*!************************************************!*\
  !*** ../../packages/extras/src/helper/ease.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easeInCubic": function() { return /* binding */ easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* binding */ easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* binding */ easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* binding */ easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* binding */ easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* binding */ easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* binding */ easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* binding */ easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* binding */ easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* binding */ easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* binding */ easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* binding */ easeOutQuint; },
/* harmony export */   "linear": function() { return /* binding */ linear; }
/* harmony export */ });
// easing methods, see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/
const linear = t => {
  return t;
};
const easeInQuad = t => {
  return t * t;
};
const easeOutQuad = t => {
  return t * (2 - t);
};
const easeInOutQuad = t => {
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
};
const easeInCubic = t => {
  return t * t * t;
};
const easeOutCubic = t => {
  return --t * t * t + 1;
};
const easeInOutCubic = t => {
  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
};
const easeInQuart = t => {
  return t * t * t * t;
};
const easeOutQuart = t => {
  return 1 - --t * t * t * t;
};
const easeInOutQuart = t => {
  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
};
const easeInQuint = t => {
  return t * t * t * t * t;
};
const easeOutQuint = t => {
  return 1 + --t * t * t * t * t;
};
const easeInOutQuint = t => {
  return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
};

/***/ }),

/***/ "../../packages/extras/src/helper/index.ts":
/*!*************************************************!*\
  !*** ../../packages/extras/src/helper/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easeInCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuint; },
/* harmony export */   "getScrollPosition": function() { return /* reexport safe */ _scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* reexport safe */ _scroll_js__WEBPACK_IMPORTED_MODULE_1__.isScrollable; },
/* harmony export */   "linear": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.linear; }
/* harmony export */ });
/* harmony import */ var _ease_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ease.js */ "../../packages/extras/src/helper/ease.ts");
/* harmony import */ var _scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll.js */ "../../packages/extras/src/helper/scroll.ts");



/***/ }),

/***/ "../../packages/extras/src/helper/scroll.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/helper/scroll.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getScrollPosition": function() { return /* binding */ getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* binding */ isScrollable; }
/* harmony export */ });
const getScrollPosition = element => {
  const window = element;
  const el = element; // If element is window

  if (window.document && window.location) {
    const scrollPosition = {
      /** horizontal: left / right / width */
      x: window.pageXOffset,

      /** vertical: top / bottom / height */
      y: window.pageYOffset,

      /** horizontal: left / right / width */
      maxX: document.documentElement.scrollWidth - document.documentElement.clientWidth,

      /** vertical: top / bottom / height */
      maxY: document.documentElement.scrollHeight - document.documentElement.clientHeight
    };
    return scrollPosition;
  }

  const scrollPosition = {
    /** horizontal: left / right / width */
    x: el.scrollLeft,

    /** vertical: top / bottom / height */
    y: el.scrollTop,

    /** horizontal: left / right / width */
    maxX: el.scrollWidth - el.clientWidth,

    /** vertical: top / bottom / height */
    maxY: el.scrollHeight - el.clientHeight
  };
  return scrollPosition;
};
const isScrollable = element => {
  const scrollPosition = getScrollPosition(element);
  return scrollPosition.maxX > 0 || scrollPosition.maxY > 0;
};

/***/ }),

/***/ "../../packages/extras/src/index.ts":
/*!******************************************!*\
  !*** ../../packages/extras/src/index.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Autoscroll; },
/* harmony export */   "AutoscrollBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.AutoscrollBinder; },
/* harmony export */   "DataScrollPositionYBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.DataScrollPositionYBinder; },
/* harmony export */   "Dragscroll": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Dragscroll; },
/* harmony export */   "ExtrasService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ExtrasService; },
/* harmony export */   "FullscreenService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.FullscreenService; },
/* harmony export */   "Gameloop": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Gameloop; },
/* harmony export */   "ImageEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ImageEventsBinder; },
/* harmony export */   "MediaReadyState": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.MediaReadyState; },
/* harmony export */   "ScrollEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollEventsBinder; },
/* harmony export */   "ScrollEventsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollEventsService; },
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollPositionAngleBinder; },
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollbarDraggableBinder; },
/* harmony export */   "SyncElementPropertyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.SyncElementPropertyBinder; },
/* harmony export */   "TouchEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsBinder; },
/* harmony export */   "TouchEventsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.TouchEventsService; },
/* harmony export */   "TouchType": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.TouchType; },
/* harmony export */   "easeInCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuint; },
/* harmony export */   "extrasModule": function() { return /* reexport safe */ _extras_module_js__WEBPACK_IMPORTED_MODULE_4__.extrasModule; },
/* harmony export */   "getScrollPosition": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.isScrollable; },
/* harmony export */   "linear": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.linear; }
/* harmony export */ });
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/extras/src/helper/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/extras/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/extras/src/binders/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/index.js */ "../../packages/extras/src/types/index.ts");
/* harmony import */ var _extras_module_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extras.module.js */ "../../packages/extras/src/extras.module.ts");






/***/ }),

/***/ "../../packages/extras/src/services/autoscroll.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/autoscroll.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* binding */ Autoscroll; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameloop.service.js */ "../../packages/extras/src/services/gameloop.service.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");




class Autoscroll {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "direction", 1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_pause", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "velocity", 0.008);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "move", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastMove", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "angle", "horizontal");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pauseOnHover", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "resumeTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__.throttle)(this._onResize.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__.throttle)(this._onScroll.bind(this)));

    this.el = el;
    this.options = options;
    this.direction = this.options.direction || this.direction;
    this.velocity = this.options.velocity || this.velocity;
    this.angle = this.options.angle || this.angle;
    this.pauseOnHover = typeof this.options.pauseOnHover === "boolean" ? this.options.pauseOnHover : this.pauseOnHover;
    this.limit = this.getLimit(this.el);
    this.move = this.getPosition();

    if (this.direction === -1) {
      // start right
      this.el.scrollLeft = this.limit;
    } else {
      // start left
      this.el.scrollLeft = 0;
    }

    this.addEventListeners();
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.startLoop({
      maxFPS: 60
    });
  }
  /**
   * @note this is not the gameloop update method!
   */


  update() {
    this.limit = this.getLimit(this.el);
    this.setPosition();
  }

  destroy() {
    this.removeEventListeners();
  }

  pause() {
    this.el.style.scrollBehavior = "";
    this._pause = true;
  }
  /** Resume autoscrolling if this method was not called up for [delay] milliseconds */


  resume() {
    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (!this._pause) {
      return;
    }

    this.stopResumeTimeout();
    this.resumeTimer = window.setTimeout(() => {
      this.setPosition();
      this._pause = false; // Disable smooth scrolling on autoscroll if set

      this.el.style.scrollBehavior = "auto";
    }, delay);
  }

  addEventListeners() {
    this.removeEventListeners();
    this.onResize = this.onResize.bind(this);
    this.onMouseIn = this.onMouseIn.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.render = this.render.bind(this);
    this.updateMove = this.updateMove.bind(this);
    window.addEventListener("resize", this.onResize, {
      passive: true
    });
    this.el.addEventListener("mouseenter", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("mouseover", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("focusin", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("touchstart", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("mouseleave", this.onMouseOut, {
      passive: true
    });
    this.el.addEventListener("focusout", this.onMouseOut, {
      passive: true
    });
    this.el.addEventListener("mouseup", this.onMouseUp, {
      passive: true
    });
    this.el.addEventListener("touchend", this.onMouseUp, {
      passive: true
    });

    if (this.touchCapable) {
      this.el.addEventListener("scroll", this.onMouseUp, {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onMouseUp, {
        passive: true
      }); // See ScrollEventsService for "scrollended" event

      this.el.addEventListener("scrollended", this.onMouseUp, {
        passive: true
      });
    } else {
      this.el.addEventListener("scroll", this.onScroll, {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onScroll, {
        passive: true
      });
      this.el.addEventListener("scrollended", this.onScroll, {
        passive: true
      });
    }

    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.on("render", this.render);
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.on("update", this.updateMove);
  }

  removeEventListeners() {
    window.removeEventListener("resize", this.onResize);
    this.el.removeEventListener("mouseenter", this.onMouseIn);
    this.el.removeEventListener("mouseover", this.onMouseIn);
    this.el.removeEventListener("focusin", this.onMouseIn);
    this.el.removeEventListener("touchstart", this.onMouseIn);
    this.el.removeEventListener("mouseleave", this.onMouseOut);
    this.el.removeEventListener("focusout", this.onMouseOut);
    this.el.removeEventListener("mouseup", this.onMouseUp);
    this.el.removeEventListener("touchend", this.onMouseUp);

    if (this.touchCapable) {
      this.el.removeEventListener("scroll", this.onMouseUp);
      this.el.removeEventListener("scrollend", this.onMouseUp);
      this.el.removeEventListener("scrollended", this.onMouseUp);
    } else {
      this.el.removeEventListener("scroll", this.onScroll);
      this.el.removeEventListener("scrollend", this.onScroll);
      this.el.removeEventListener("scrollended", this.onScroll);
    }

    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.off("render", this.render);
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.off("update", this.updateMove);
  }

  onMouseIn() {
    if (this.pauseOnHover) {
      this.pause();
    }
  }

  onMouseOut() {
    this.resume(200);
  }

  onMouseUp() {
    this.resume(1000);
  }

  _onResize() {
    this.limit = this.getLimit(this.el);
    this.resume(200);
  }

  _onScroll() {
    this.stopResumeTimeout();
  }

  stopResumeTimeout() {
    if (this.resumeTimer !== null) {
      clearTimeout(this.resumeTimer);
      this.resumeTimer = null;
    }
  }

  getPosition() {
    return (this.angle === "vertical" ? this.el.scrollTop : this.el.scrollLeft) || 0;
  }

  setPosition() {
    this.move = this.getPosition();
  }

  getLimit(el) {
    return this.angle === "vertical" ? (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(el).maxY : (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(el).maxX;
  }
  /**
   * This Interpolation:
   * ```
   * protected render(Interpolation: number) {
   * ...
   * this.move = (this.lastMove + (this.move - this.lastMove) * Interpolation);
   * ```
   * is not working here for some reason
   * like it works in the demos/extras-game-loop demo or here:
   * https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing
   *
   * Without this the scrollbar scrolls smooth, need to find out why.
   */


  render() {
    if (this._pause) {
      return;
    }

    this.scroll(this.move);
  }

  updateMove(delta) {
    if (this._pause) {
      return;
    }

    this.lastMove = this.move;
    const append = this.velocity * this.direction * delta;
    this.move += append; // Switch directions if we go too far

    if (this.move <= 0 && this.direction !== 1) {
      this.direction = 1;
    }

    if (this.move >= this.limit && this.direction !== -1) {
      this.direction = -1;
    }
  }

  scroll(move) {
    if (this.angle === "vertical") {
      this.el.scrollTop = move;
    } else {
      this.el.scrollLeft = move;
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/dragscroll.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/dragscroll.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dragscroll": function() { return /* binding */ Dragscroll; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");




/**
 * Scroll an scrollable element by dragging and moving your mouse.
 * inspired by https://github.com/asvd/dragscroll
 */
class Dragscroll {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      detectGlobalMove: true
    };

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastClientX", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastClientY", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pushed", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "checkDraggable", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._checkDraggable.bind(this)));

    this.el = el;
    this.options = options;

    if (this.touchCapable) {
      // Do noting on touch devices
      return this;
    }

    this.onMouseDown = this.onMouseDown.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    this.onMouseMove = this.onMouseMove.bind(this);
    this.checkDraggable = this.checkDraggable.bind(this);
    el.removeEventListener("mousedown", this.onMouseDown);
    el.addEventListener("mousedown", this.onMouseDown, {
      passive: true
    });
    window.addEventListener("resize", this.checkDraggable); // Use global move if your element does not use the full width / height

    if (this.options.detectGlobalMove) {
      window.removeEventListener("mouseup", this.onMouseUp);
      window.removeEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mouseup", this.onMouseUp, {
        passive: true
      });
      window.addEventListener("mousemove", this.onMouseMove, {
        passive: true
      });
    } else {
      el.removeEventListener("mouseup", this.onMouseUp);
      el.removeEventListener("mousemove", this.onMouseMove);
      el.addEventListener("mouseup", this.onMouseUp, {
        passive: true
      });
      el.addEventListener("mousemove", this.onMouseMove, {
        passive: true
      });
    } // initial


    this.checkDraggable();
  }

  destroy() {
    this.removeEventListeners();
    this.el.classList.remove("draggable");
  }

  _checkDraggable() {
    if ((0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.isScrollable)(this.el)) {
      this.el.classList.add("draggable");
    } else {
      this.el.classList.remove("draggable");
    }
  }

  onMouseDown(e) {
    this.pushed = true;
    this.lastClientX = e.clientX;
    this.lastClientY = e.clientY;
  }

  onMouseUp() {
    this.pushed = false;
  }

  onMouseMove(e) {
    let newScrollX = 0;
    let newScrollY = 0;

    if (this.pushed) {
      this.el.scrollLeft -= newScrollX = -this.lastClientX + (this.lastClientX = e.clientX);
      this.el.scrollTop -= newScrollY = -this.lastClientY + (this.lastClientY = e.clientY);

      if (this.el === document.body) {
        if (document.documentElement) {
          this.el = document.documentElement;
        }

        this.el.scrollLeft -= newScrollX;
        this.el.scrollTop -= newScrollY;
      }
    }
  }

  removeEventListeners() {
    window.removeEventListener("resize", this.checkDraggable);
    this.el.removeEventListener("mousedown", this.onMouseDown);
    this.el.removeEventListener("mouseup", this.onMouseUp);
    this.el.removeEventListener("mousemove", this.onMouseMove);
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/extras.service.ts":
/*!************************************************************!*\
  !*** ../../packages/extras/src/services/extras.service.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtrasService": function() { return /* binding */ ExtrasService; }
/* harmony export */ });
class ExtrasService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ExtrasService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ExtrasService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/fullscreen.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/fullscreen.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FullscreenService": function() { return /* binding */ FullscreenService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class FullscreenService {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "enterK", "requestFullscreen");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "exitK", "exitFullscreen");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "elementK", "fullscreenElement");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "eventK", "fullscreenchange");

    const dE = document.documentElement;
    const tF = "fullscreenchange";

    if (dE.requestFullscreen) {
      this.enterK = "requestFullscreen";
      this.exitK = "exitFullscreen";
      this.elementK = "fullscreenElement";
      this.eventK = tF;
    } else if (dE.mozRequestFullScreen) {
      this.enterK = "mozRequestFullScreen";
      this.exitK = "mozCancelFullScreen";
      this.elementK = "mozFullScreenElement";
      this.eventK = "moz" + tF;
    } else if (dE.webkitRequestFullscreen) {
      this.enterK = "webkitRequestFullscreen";
      this.exitK = "webkitExitFullscreen";
      this.elementK = "webkitFullscreenElement";
      this.eventK = "webkit" + tF;
    } else if (dE.msRequestFullscreen) {
      this.enterK = "msRequestFullscreen";
      this.exitK = "msExitFullscreen";
      this.elementK = "msFullscreenElement";
      this.eventK = "MSFullscreenChange";
    }
  }

  static getSingleton() {
    if (FullscreenService.instance) {
      return FullscreenService.instance;
    }

    FullscreenService.instance = new FullscreenService();
    return FullscreenService.instance;
  }

  static supported() {
    const d = document;
    return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
  }

  enter(el) {
    if (!el) {
      el = document.body;
    }

    if (this.isFullscreen()) {
      return;
    }

    if (this.enterK === "webkitRequestFullscreen") {
      el[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
    } else {
      el[this.enterK]();
    }
  }

  exit() {
    if (this.isFullscreen()) {
      document[this.exitK]();
    }
  }

  isFullscreen() {
    return document[this.elementK];
  }

  toggle(el) {
    if (this.isFullscreen()) {
      this.exit();
      return;
    } else {
      this.enter(el);
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/gameloop.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/extras/src/services/gameloop.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gameloop": function() { return /* binding */ Gameloop; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");



/**
 * @see https://www.sitepoint.com/quick-tip-game-loop-in-javascript/
 * @see https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing#fps-control
 */
class Gameloop {
  static getFps() {
    return this.fps;
  }

  static startLoop() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.setOptions(options);

    if (!this.loopStarted) {
      this.loopStarted = true;
      window.requestAnimationFrame(this.loop.bind(this));
    }
  }

  static setOptions(options) {
    this.maxFPS = typeof options.maxFPS === "number" ? options.maxFPS : this.maxFPS;
  }
  /**
   * The main / game loop
   * @param timestamp
   */


  static loop(timestamp) {
    // Throttle the frame rate.
    if (timestamp < this.lastFrameTimeMs + 1000 / this.maxFPS) {
      this.frameID = window.requestAnimationFrame(this.loop.bind(this));
      return;
    }

    const progress = timestamp - this.lastFrameTimeMs;
    this.delta += progress;
    this.lastFrameTimeMs = timestamp;
    this.begin(timestamp, this.delta);

    if (timestamp > this.lastFpsUpdate + 1000) {
      this.fps = 0.25 * this.framesThisSecond + 0.75 * this.fps;
      this.lastFpsUpdate = timestamp;
      this.framesThisSecond = 0;
    }

    this.framesThisSecond++;
    let numUpdateSteps = 0;

    while (this.delta >= this.timestep) {
      this.update(this.timestep);
      this.delta -= this.timestep;

      if (++numUpdateSteps >= 240) {
        this.panic();
        break;
      }
    }

    this.render(this.delta / this.timestep);
    this.end(this.fps);
    this.frameID = window.requestAnimationFrame(this.loop.bind(this));
  }

  static begin(timestamp, delta) {
    this.events.trigger("begin", timestamp, delta);
  }

  static render(interp) {
    this.events.trigger("render", interp);
  }

  static update(delta) {
    this.events.trigger("update", delta);
  }

  static end(delta) {
    this.events.trigger("end", delta);
  }

  static panic() {
    this.delta = 0; // discard the unsimulated time
  }

  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Gameloop.setOptions(options);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "events", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("gameloop"));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "maxFPS", 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "fps", 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "timestep", 1000 / 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "loopStarted", false);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "lastFrameTimeMs", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "delta", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "framesThisSecond", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "lastFpsUpdate", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "frameID", 0);

/***/ }),

/***/ "../../packages/extras/src/services/index.ts":
/*!***************************************************!*\
  !*** ../../packages/extras/src/services/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* reexport safe */ _autoscroll_service_js__WEBPACK_IMPORTED_MODULE_0__.Autoscroll; },
/* harmony export */   "Dragscroll": function() { return /* reexport safe */ _dragscroll_service_js__WEBPACK_IMPORTED_MODULE_1__.Dragscroll; },
/* harmony export */   "ExtrasService": function() { return /* reexport safe */ _extras_service_js__WEBPACK_IMPORTED_MODULE_2__.ExtrasService; },
/* harmony export */   "FullscreenService": function() { return /* reexport safe */ _fullscreen_service_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenService; },
/* harmony export */   "Gameloop": function() { return /* reexport safe */ _gameloop_service_js__WEBPACK_IMPORTED_MODULE_4__.Gameloop; },
/* harmony export */   "ScrollEventsService": function() { return /* reexport safe */ _touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_5__.ScrollEventsService; },
/* harmony export */   "TouchEventsService": function() { return /* reexport safe */ _touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_6__.TouchEventsService; }
/* harmony export */ });
/* harmony import */ var _autoscroll_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autoscroll.service.js */ "../../packages/extras/src/services/autoscroll.service.ts");
/* harmony import */ var _dragscroll_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragscroll.service.js */ "../../packages/extras/src/services/dragscroll.service.ts");
/* harmony import */ var _extras_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extras.service.js */ "../../packages/extras/src/services/extras.service.ts");
/* harmony import */ var _fullscreen_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fullscreen.service.js */ "../../packages/extras/src/services/fullscreen.service.ts");
/* harmony import */ var _gameloop_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameloop.service.js */ "../../packages/extras/src/services/gameloop.service.ts");
/* harmony import */ var _touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touch-events/scroll-events.service.js */ "../../packages/extras/src/services/touch-events/scroll-events.service.ts");
/* harmony import */ var _touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./touch-events/touch-events.service.js */ "../../packages/extras/src/services/touch-events/touch-events.service.ts");








/***/ }),

/***/ "../../packages/extras/src/services/touch-events/base-events.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/base-events.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseEventsService": function() { return /* binding */ BaseEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class BaseEventsService {
  get isTouchCapable() {
    return this.touchCapable;
  }

  constructor(el) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    this.el = el;
  }

  triggerCustomEvent(eventName, originalEvent) {
    let extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    extraParameters.originalEvent = originalEvent;
    extraParameters.target = originalEvent.target; // create and dispatch the event

    const event = new CustomEvent(eventName, {
      detail: extraParameters
    });
    this.el.dispatchEvent(event);
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/touch-events/scroll-events.service.ts":
/*!********************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/scroll-events.service.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollEventsService": function() { return /* binding */ ScrollEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _base_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-events.service.js */ "../../packages/extras/src/services/touch-events/base-events.service.ts");



class ScrollEventsService extends _base_events_service_js__WEBPACK_IMPORTED_MODULE_2__.BaseEventsService {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(el);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isScrolling", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "delay", 300);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startPosition", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "endPosition", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scrollTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScrollEvent", this._onScrollEvent.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scroll", this._scroll.bind(this));

    this.el = el;
    this.delay = options.delay || this.delay;
    this.startPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el); // Watch also native scrollend to not trigger scrollended before scrollend was triggered

    this._scrollEvent = this.touchCapable ? ["touchmove", "scrollend", "scroll"] : ["scroll", "scrollend"];
    this.removeEventListeners();
    this.addEventListeners();
  }

  destroy() {
    this.removeEventListeners();
  }

  get scrollEvent() {
    return this._scrollEvent;
  }

  getScrollDir(start, end) {
    if (!start || !end) {
      return "unknown";
    }

    if (start.x > end.x) {
      return "right";
    }

    if (start.x < end.x) {
      return "left";
    }

    if (start.y > end.y) {
      return "down";
    }

    if (start.y < end.y) {
      return "up";
    }

    return "none";
  }

  removeEventListeners() {
    for (const eventName of this._scrollEvent) {
      this.el.removeEventListener(eventName, this.onScrollEvent);
    }
  }

  addEventListeners() {
    for (const eventName of this._scrollEvent) {
      this.el.addEventListener(eventName, this.onScrollEvent, {
        passive: true
      });
    }
  }

  _onScrollEvent(event) {
    if (!event.target) {
      return false;
    }

    if (this.scrollTimer !== null) {
      clearTimeout(this.scrollTimer);
      this.scrollTimer = null;
    }

    if (!this.isScrolling) {
      this.scrollstart(event);
    }

    if (this.isScrolling) {
      this.scroll(event);
    }

    this.scrollTimer = window.setTimeout(() => {
      this.scrollended(event);
    }, this.delay);
    return true;
  }

  /**
   * scrollended Event
   */
  scrollended(event) {
    this.isScrolling = false;
    this.endPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    const direction = this.getScrollDir(this.startPosition, this.endPosition);
    this.triggerCustomEvent("scrollended", event, {
      startPosition: this.startPosition,
      endPosition: this.endPosition,
      direction
    });
  }
  /**
   * scrollstart Event
   */


  scrollstart(event) {
    this.isScrolling = true;
    this.startPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    this.triggerCustomEvent("scrollstart", event, {
      startPosition: this.startPosition
    });
  }
  /**
   * scrolling, scrollup, scrolldown, scrollleft and scrollright Events
   */


  _scroll(event) {
    const currentPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    const direction = this.getScrollDir(this.startPosition, currentPosition);
    this.triggerCustomEvent("scroll" + direction, event, {
      startPosition: this.startPosition,
      currentPosition,
      direction
    });
    this.triggerCustomEvent("scrolling", event, {
      startPosition: this.startPosition,
      currentPosition,
      direction
    });
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/touch-events/touch-events.service.ts":
/*!*******************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/touch-events.service.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsService": function() { return /* binding */ TouchEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/index.js */ "../../packages/extras/src/types/index.ts");
/* harmony import */ var _base_events_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base-events.service.js */ "../../packages/extras/src/services/touch-events/base-events.service.ts");




/**
 * Vanilla version of jQuery Mobile Events
 * @see https://github.com/benmajor/jQuery-Touch-Events
 *
 * Copyright 2011-2019, Ben Major
 * Copyright 2019-2021, Pascal Garber
 * Licensed under the MIT License:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class TouchEventsService extends _base_events_service_js__WEBPACK_IMPORTED_MODULE_3__.BaseEventsService {
  // GETTERS:
  get isTouchCapable() {
    return this.settings.touchCapable;
  }

  get startEvent() {
    return this.settings.startevent;
  }

  get endEvent() {
    return this.settings.endevent;
  }

  get moveEvent() {
    return this.settings.moveevent;
  }

  get tapEvent() {
    return this.settings.tapevent;
  } // public get scrollEvent() {
  //   return this.scrollEvents.scrollEvent;
  // }
  // SETTERS:

  /** Set the X threshold of swipe events */


  set swipeThresholdX(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.swipeHThreshold = threshold;
  }
  /** Set the Y threshold of swipe events */


  set swipeThresholdY(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.swipeVThreshold = threshold;
  }
  /** Set the double tap interval */


  set doubleTapInt(interval) {
    if (typeof interval !== "number") {
      throw new Error("Interval parameter must be a type of number");
    }

    this.settings.doubletapInterval = interval;
  }
  /** Set the taphold threshold */


  set tapHoldThreshold(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.tapholdThreshold = threshold;
  }
  /** Set the pixel range for tapas */


  set tapRange(range) {
    if (typeof range !== "number") {
      throw new Error("Ranger parameter must be a type of number");
    }

    this.settings.tapPixelRange = range;
  } // PROPERTIES:

  /** Used internally for `taphold` */


  // protected scrollEvents: ScrollEventsService;
  constructor(el) {
    let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      tapPixelRange: 5,
      swipeHThreshold: 50,
      swipeVThreshold: 50,
      tapholdThreshold: 750,
      doubletapInterval: 500,
      shakeThreshold: 15,
      touchCapable: "ontouchstart" in window,
      startevent: ["touchstart"],
      endevent: ["touchend"],
      moveevent: ["touchmove"],
      tapevent: ["tap"]
    };
    super(el);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startPosition", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "endPosition", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "originalCoord", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "finalCoord", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startEvnt", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapheld", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "firstTap", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "cooling", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "doubletapped", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastTouch", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "hasSwiped", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapStarted", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "swipeStarted", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startTime", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "holdTimer", -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapTimer", -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "actionTimer", -1);

    this.el = el; // Set settings by device type (if device is touch capable)

    settings.startevent = settings.touchCapable ? ["touchstart"] : ["mousedown"];
    settings.endevent = settings.touchCapable ? ["touchend"] : ["mouseup"];
    settings.moveevent = settings.touchCapable ? ["touchmove"] : ["mousemove"];
    settings.tapevent = settings.touchCapable ? ["tap"] : ["click"];
    this.settings = settings; // this.scrollEvents = new ScrollEventsService(this.el);

    this.onStartEvent = this.onStartEvent.bind(this);
    this.onMoveEvent = this.onMoveEvent.bind(this);
    this.onEndEvent = this.onEndEvent.bind(this);
    this.addEventListeners();
  }

  destroy() {
    this.removeEventListeners(); // this.scrollEvents.destroy();
  }

  removeEventListeners() {
    for (const eventName of this.settings.startevent) {
      this.el.removeEventListener(eventName, this.onStartEvent);
    }

    for (const eventName of this.settings.moveevent) {
      this.el.removeEventListener(eventName, this.onMoveEvent);
    }

    for (const eventName of this.settings.endevent) {
      this.el.removeEventListener(eventName, this.onEndEvent);
    } // this.scrollEvents.destroy();

  } // HELPER METHODS:


  getSwipeDir(startPosition, endPosition) {
    let hThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.settings.swipeHThreshold;
    let vThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.settings.swipeVThreshold;
    let swipeDir = "";

    if (startPosition.y > endPosition.y && startPosition.y - endPosition.y > vThreshold) {
      swipeDir = "swipeup";
    }

    if (startPosition.x < endPosition.x && endPosition.x - startPosition.x > hThreshold) {
      swipeDir = "swiperight";
    }

    if (startPosition.y < endPosition.y && endPosition.y - startPosition.y > vThreshold) {
      swipeDir = "swipedown";
    }

    if (startPosition.x > endPosition.x && startPosition.x - endPosition.x > hThreshold) {
      swipeDir = "swipeleft";
    }

    return swipeDir;
  }

  getPosition(event) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let touchesTypes;

    switch (type) {
      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED:
        touchesTypes = event.changedTouches;
        break;

      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET:
        touchesTypes = event.targetTouches;
        break;

      default:
        touchesTypes = event.touches;
        break;
    }

    const position = {
      x: this.settings.touchCapable ? touchesTypes[index].pageX : event.pageX,
      y: this.settings.touchCapable ? touchesTypes[index].pageY : event.pageY
    };
    return position;
  }

  getOffset(event) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    const boundingClientRect = this.el.getBoundingClientRect();
    let touchesTypes;

    switch (type) {
      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED:
        touchesTypes = event.changedTouches;
        break;

      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET:
        touchesTypes = event.targetTouches;
        break;

      default:
        touchesTypes = event.touches;
        break;
    }

    const offset = {
      x: this.settings.touchCapable ? Math.round(touchesTypes[index].pageX - (boundingClientRect ? boundingClientRect.left : 0)) : Math.round(event.pageX - (boundingClientRect ? boundingClientRect.left : 0)),
      y: this.settings.touchCapable ? Math.round(touchesTypes[index].pageY - (boundingClientRect ? boundingClientRect.top : 0)) : Math.round(event.pageY - (boundingClientRect ? boundingClientRect.top : 0))
    };
    return offset;
  }

  getTouchData(event) {
    let withIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let positionType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let offsetType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED;
    const touchData = {
      position: this.getPosition(event, positionType),
      offset: this.getOffset(event, offsetType),
      time: Date.now()
    };

    if (withIndex) {
      touchData.index = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.getElementIndex)(event.target);
    }

    return touchData;
  }

  addEventListeners() {
    for (const eventName of this.settings.startevent) {
      this.el.addEventListener(eventName, this.onStartEvent, {
        passive: true
      });
    }

    for (const eventName of this.settings.moveevent) {
      this.el.addEventListener(eventName, this.onMoveEvent, {
        passive: true
      });
    }

    for (const eventName of this.settings.endevent) {
      this.el.addEventListener(eventName, this.onEndEvent, {
        passive: true
      });
    }
  } // EVENT HANDLERS:


  onStartEvent(event) {
    if (event.which && event.which !== 1) {
      return false;
    }

    this.startPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.endPosition = {
      x: this.startPosition.x,
      y: this.startPosition.y
    };
    this.startTime = Date.now(); // For `doubletap`

    this.doubletapped = false;

    if (!this.firstTap) {
      this.firstTap = this.getTouchData(event, true, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    } // For `tap`, `swipe`


    this.tapStarted = true;
    this.swipeStarted = true; // For `swipe`

    this.originalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.finalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.startEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    this.tapstart(event);
    this.taphold(event);
    return true;
  }

  onEndEvent(event) {
    this.endPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    this.tapheld = false;
    window.clearTimeout(this.holdTimer);
    this.tapend(event);
    this.swipeend(event);
    this.tap(event);
    this.doubletap(event);
    this.singletap(event);
    this.tapStarted = false;
    this.swipeStarted = false;
    this.hasSwiped = false;
    return true;
  }

  onMoveEvent(event) {
    this.endPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.finalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.tapmove(event);
    this.swipe(event);
    return true;
  } // CUSTOM EVENT METHODS:

  /** tapstart Event */


  tapstart(event) {
    this.triggerCustomEvent("tapstart", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** tapmove Event */


  tapmove(event) {
    this.triggerCustomEvent("tapmove", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** tapend Event */


  tapend(event) {
    this.triggerCustomEvent("tapend", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** taphold Event */


  taphold(event) {
    this.holdTimer = window.setTimeout(() => {
      const diffPosition = {
        x: this.startPosition.x - this.endPosition.x,
        y: this.startPosition.y - this.endPosition.y
      }; // helded?

      if (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange) {
        this.tapheld = true;
        const endTime = Date.now();
        const duration = endTime - this.startTime;
        const touchesLength = event.targetTouches ? event.targetTouches.length : 1;
        const touches = new Array();

        for (let i = 0; i < touchesLength; i++) {
          const elOffset = this.el.getBoundingClientRect();
          const touch = {
            position: {
              x: this.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
              y: this.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
            },
            offset: {
              x: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
              y: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
            }
          };
          touches.push(touch);
        }

        const eventName = touchesLength > 1 ? "taphold" + touchesLength : "taphold";
        const touchData = {
          touches,
          time: Date.now(),
          duration
        };
        this.triggerCustomEvent(eventName, event, touchData);
      }
    }, this.settings.tapholdThreshold);
    return true;
  }
  /** doubletap Event */


  doubletap(event) {
    const now = Date.now();
    const lastTouch = Number(this.lastTouch) || now + 1;
    const delta = now - lastTouch;

    if (this.actionTimer !== -1) {
      window.clearTimeout(this.actionTimer);
    }

    if (delta < this.settings.doubletapInterval && delta > 100 && this.firstTap && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.getElementIndex)(event.target) === this.firstTap.index) {
      this.doubletapped = true;
      window.clearTimeout(this.tapTimer);
      const lastTap = this.getTouchData(event, true, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
      const touchData = {
        firstTap: this.firstTap,
        secondTap: lastTap,
        interval: lastTap.time - this.firstTap.time
      };

      if (!this.cooling) {
        this.triggerCustomEvent("doubletap", event, touchData);
        this.firstTap = null;
      }

      this.cooling = true;
      window.setTimeout(() => {
        this.cooling = false;
      }, this.settings.doubletapInterval);
    } else {
      this.actionTimer = window.setTimeout(() => {
        this.firstTap = null;
        window.clearTimeout(this.actionTimer);
      }, this.settings.doubletapInterval, [event]);
    }

    this.lastTouch = now;
  }
  /**
   * singletap Event
   * This is used in conjuction with doubletap when both events are needed on the same element
   */


  singletap(event) {
    this.tapTimer = window.setTimeout(() => {
      const diffPosition = {
        x: this.startPosition.x - this.endPosition.x,
        y: this.startPosition.y - this.endPosition.y
      };

      if (!this.doubletapped && !this.tapheld && (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange)) {
        const touchData = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED); // Was it a taphold?

        if (touchData.time - this.startTime < this.settings.tapholdThreshold) {
          this.triggerCustomEvent("singletap", event, touchData);
        }
      }
    }, this.settings.doubletapInterval);
  }
  /** tap Event */


  tap(event) {
    const diffPosition = {
      x: this.startPosition.x - this.endPosition.x,
      y: this.startPosition.y - this.endPosition.y
    };

    if (this.tapStarted && Date.now() - this.startTime < this.settings.tapholdThreshold && (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange)) {
      const touchesLength = event.targetTouches ? event.targetTouches.length : 1;
      const touches = new Array();

      for (let i = 0; i < touchesLength; i++) {
        const elOffset = this.el.getBoundingClientRect();
        const touch = {
          position: {
            x: this.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
            y: this.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
          },
          offset: {
            x: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
            y: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
          }
        };
        touches.push(touch);
      }

      const touchData = {
        touches,
        time: Date.now()
      };
      const eventName = touchesLength > 1 ? "tap" + touchesLength : "tap";
      this.triggerCustomEvent(eventName, event, touchData);
    }
  }
  /**
   * swipe Event
   * (also handles swipeup, swiperight, swipedown and swipeleft)
   *
   * (similar to `touchMove` method in jquery touch events)
   */


  swipe(event) {
    const swipeDir = this.getSwipeDir(this.originalCoord, this.finalCoord);

    if (swipeDir && this.swipeStarted && this.startEvnt) {
      this.originalCoord.x = 0;
      this.originalCoord.y = 0;
      this.finalCoord.x = 0;
      this.finalCoord.y = 0;
      this.swipeStarted = false;
      const endEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED); // Calculate the swipe amount (normalized):

      const xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
      const yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
      const touchData = {
        startEvnt: this.startEvnt,
        endEvnt,
        direction: swipeDir.replace("swipe", ""),
        xAmount,
        yAmount,
        duration: endEvnt.time - this.startEvnt.time
      };
      this.hasSwiped = true;
      this.triggerCustomEvent("swipe", event, touchData);
      this.triggerCustomEvent(swipeDir, event, touchData);
    }
  }
  /**
   * swipeend Event
   * (similar `touchEnd` method in jquery touch events)
   */


  swipeend(event) {
    const endEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);

    if (this.hasSwiped && this.startEvnt) {
      const swipeDir = this.getSwipeDir(this.startEvnt.position, endEvnt.position); // Calculate the swipe amount (normalized):

      const xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
      const yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
      const touchData = {
        startEvnt: this.startEvnt,
        endEvnt,
        direction: swipeDir.replace("swipe", ""),
        xAmount,
        yAmount,
        duration: endEvnt.time - this.startEvnt.time
      };
      this.triggerCustomEvent("swipeend", event, touchData);
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/types/index.ts":
/*!************************************************!*\
  !*** ../../packages/extras/src/types/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MediaReadyState": function() { return /* reexport safe */ _media_ready_state_js__WEBPACK_IMPORTED_MODULE_0__.MediaReadyState; },
/* harmony export */   "TouchType": function() { return /* reexport safe */ _touch_type_js__WEBPACK_IMPORTED_MODULE_10__.TouchType; }
/* harmony export */ });
/* harmony import */ var _media_ready_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./media-ready-state.js */ "../../packages/extras/src/types/media-ready-state.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-options.js */ "../../packages/extras/src/types/module-options.ts");
/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position.js */ "../../packages/extras/src/types/position.ts");
/* harmony import */ var _scroll_events_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroll-events-options.js */ "../../packages/extras/src/types/scroll-events-options.ts");
/* harmony import */ var _scroll_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll-position.js */ "../../packages/extras/src/types/scroll-position.ts");
/* harmony import */ var _touch_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touch-data.js */ "../../packages/extras/src/types/touch-data.ts");
/* harmony import */ var _touch_direction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./touch-direction.js */ "../../packages/extras/src/types/touch-direction.ts");
/* harmony import */ var _touch_offset_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./touch-offset.js */ "../../packages/extras/src/types/touch-offset.ts");
/* harmony import */ var _touch_settings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./touch-settings.js */ "../../packages/extras/src/types/touch-settings.ts");
/* harmony import */ var _touch_swipe_data_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./touch-swipe-data.js */ "../../packages/extras/src/types/touch-swipe-data.ts");
/* harmony import */ var _touch_type_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./touch-type.js */ "../../packages/extras/src/types/touch-type.ts");
/* harmony import */ var _video_component_scope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./video-component-scope.js */ "../../packages/extras/src/types/video-component-scope.ts");













/***/ }),

/***/ "../../packages/extras/src/types/media-ready-state.ts":
/*!************************************************************!*\
  !*** ../../packages/extras/src/types/media-ready-state.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MediaReadyState": function() { return /* binding */ MediaReadyState; }
/* harmony export */ });
/**
 * Represents the ready state of the audio/video element
 * @see https://www.w3schools.com/TAgs/av_prop_readystate.asp
 */
let MediaReadyState;

(function (MediaReadyState) {
  MediaReadyState[MediaReadyState["HAVE_NOTHING"] = 0] = "HAVE_NOTHING";
  MediaReadyState[MediaReadyState["HAVE_METADATA"] = 1] = "HAVE_METADATA";
  MediaReadyState[MediaReadyState["HAVE_CURRENT_DATA"] = 2] = "HAVE_CURRENT_DATA";
  MediaReadyState[MediaReadyState["HAVE_FUTURE_DATA"] = 3] = "HAVE_FUTURE_DATA";
  MediaReadyState[MediaReadyState["HAVE_ENOUGH_DATA"] = 4] = "HAVE_ENOUGH_DATA";
})(MediaReadyState || (MediaReadyState = {}));

/***/ }),

/***/ "../../packages/extras/src/types/module-options.ts":
/*!*********************************************************!*\
  !*** ../../packages/extras/src/types/module-options.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/position.ts":
/*!***************************************************!*\
  !*** ../../packages/extras/src/types/position.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/scroll-events-options.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/types/scroll-events-options.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/scroll-position.ts":
/*!**********************************************************!*\
  !*** ../../packages/extras/src/types/scroll-position.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-data.ts":
/*!*****************************************************!*\
  !*** ../../packages/extras/src/types/touch-data.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-direction.ts":
/*!**********************************************************!*\
  !*** ../../packages/extras/src/types/touch-direction.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-offset.ts":
/*!*******************************************************!*\
  !*** ../../packages/extras/src/types/touch-offset.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-settings.ts":
/*!*********************************************************!*\
  !*** ../../packages/extras/src/types/touch-settings.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-swipe-data.ts":
/*!***********************************************************!*\
  !*** ../../packages/extras/src/types/touch-swipe-data.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/extras/src/types/touch-type.ts":
/*!*****************************************************!*\
  !*** ../../packages/extras/src/types/touch-type.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchType": function() { return /* binding */ TouchType; }
/* harmony export */ });
let TouchType;

(function (TouchType) {
  TouchType[TouchType["DEFAULT"] = 0] = "DEFAULT";
  TouchType[TouchType["TARGET"] = 1] = "TARGET";
  TouchType[TouchType["CHANGED"] = 2] = "CHANGED";
})(TouchType || (TouchType = {}));

/***/ }),

/***/ "../../packages/extras/src/types/video-component-scope.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/types/video-component-scope.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/history/src/index.ts":
/*!*******************************************!*\
  !*** ../../packages/history/src/index.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/history/src/services/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/index.js */ "../../packages/history/src/types/index.ts");



/***/ }),

/***/ "../../packages/history/src/services/history-manager.service.ts":
/*!**********************************************************************!*\
  !*** ../../packages/history/src/services/history-manager.service.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* binding */ HistoryManager; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");


/**
 * HistoryManager helps to keep track of the navigation
 */
class HistoryManager {
  /**
   * Keep track of the status in historic order
   */
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "history", []);

    if (HistoryManager.instance) {
      return HistoryManager.instance;
    }

    HistoryManager.instance = this;
    return HistoryManager.instance;
  }
  /**
   * Return information about the current status
   */


  currentStatus() {
    return this.history[this.history.length - 1];
  }
  /**
   * Return information about the previous status
   */


  prevStatus() {
    const history = this.history;

    if (history.length < 2) {
      return null;
    }

    return history[history.length - 2];
  }
  /**
   * Add a new set of url and namespace
   */


  add(url) {
    let namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.history.push({
      namespace,
      url
    });
  }

}

/***/ }),

/***/ "../../packages/history/src/services/index.ts":
/*!****************************************************!*\
  !*** ../../packages/history/src/services/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _history_manager_service_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; }
/* harmony export */ });
/* harmony import */ var _history_manager_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./history-manager.service.js */ "../../packages/history/src/services/history-manager.service.ts");


/***/ }),

/***/ "../../packages/history/src/types/index.ts":
/*!*************************************************!*\
  !*** ../../packages/history/src/types/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ "../../packages/history/src/types/state.ts");


/***/ }),

/***/ "../../packages/history/src/types/state.ts":
/*!*************************************************!*\
  !*** ../../packages/history/src/types/state.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/i18n/src/binders/i18n-star.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/i18n/src/binders/i18n-star.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStarBinder": function() { return /* binding */ I18nStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");





/**
 *
 */
class I18nStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "contenteditable", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "vars", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "langVars", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "properties", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "attributeName", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "translateMePathString", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onAttributeChanged", this._onAttributeChanged.bind(this));
  }

  applyTranslation(locale) {
    if (!locale) {
      if (this.i18n.showMissingTranslation) {
        locale = "translation missing: \"".concat(this.properties.join("."), "\"");
      } else {
        return;
      }
    }

    if (typeof locale !== "string") {
      console.warn("TODO", locale);
      return;
    }

    if (this.attributeName === "html") {
      this.el.innerHTML = locale;
    } else if (this.attributeName === "text") {
      this.el.innerText = locale;
    } else if (this.attributeName === "value") {
      // TODO support also: https://github.com/JumpLinkNetwork/tinybind/blob/master/src/binders/basic/value.binder.ts#L51
      if (this.contenteditable) {
        this.el.innerHTML = locale;
      } else {
        this.el.value = locale;
      }
    } else {
      this.el.setAttribute(this.attributeName, locale);
    }
  }

  parseVars(_el) {
    // parse templates to : LocalVar
    if (!this.i18n) {
      throw new Error("LocalesService is not defined!");
    }

    const newVars = this.i18n.parseTemplateVars(_el);
    this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: true
    }, this.vars, newVars); // parse data attributes to vars

    this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: false
    }, this.vars, _el.dataset); // Parse templates which have his own translations

    this.langVars = this.i18n.parseLocalVars(_el);
  }

  translate(langcode) {
    // If language service is not ready do nothing
    if (!this.i18n.ready) {
      return;
    }

    if (!langcode) {
      langcode = this.i18n.getLangcode();

      if (!langcode) {
        console.error("Langcode is required", langcode);
        return;
      }
    } // translate by using the already translated language variable


    if (this.langVars && this.langVars[langcode]) {
      return this.applyTranslation(this.langVars[langcode]);
    }

    if (!this.properties || this.properties.length === 0) {
      // get the default translation if available
      if (this.langVars && this.langVars.default) {
        // console.warn('Translate by default', this.langVars.default);
        return this.applyTranslation(this.langVars.default);
      }
    } // translate by properties, e.g. de.cart.add


    return this.i18n.get([langcode, ...this.properties], this.vars).then(local => {
      if (local && typeof local === "string") {
        // console.warn('Translate by properties', [langcode, ...this.properties], local);
        return this.applyTranslation(local);
      } // get the default translation if available


      if (this.langVars && this.langVars.default) {
        // console.warn('Translate by default as fallback', this.langVars.default);
        return this.applyTranslation(this.langVars.default);
      }

      return this.applyTranslation(null);
    }).catch(error => {
      console.error(error);
    });
  }

  _onAttributeChanged(data) {
    if (data.detail.name.startsWith("data-")) {
      const varName = data.detail.name.slice(5);
      const newVar = {};
      newVar[varName] = data.detail.newValue;
      this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
        deep: true
      }, this.vars, newVar);
      this.translate();
    }
  }

  onLanguageChanged(langcode, initial) {
    // Do not translate on initial language change, we use the ready event for this
    if (!initial) {
      this.translate(langcode);
    }
  }
  /**
   * Initial stuff wee need to do after the language service is ready
   */


  initOnReady(langcode, translationNeeded) {
    // Translate on translation service ready if needed
    if (translationNeeded) {
      this.translate(langcode);
    } // Translate if language changes


    this.i18n.event.on("changed", this.onLanguageChanged); // Translate if binder attribute event is changed

    this.el.addEventListener("binder-changed", this.onAttributeChanged);
  }

  bind(el) {
    this.contenteditable = !!el.getAttribute("contenteditable");
    const options = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.options;
    this.i18n = options.localesService;
    this.attributeName = this.args[0].toString();
  }

  routine(el, translateMePathString) {
    const options = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.options;

    if (this.translateMePathString === null) {
      var _this$i18n;

      // if this is the first call of this function
      this.translateMePathString = translateMePathString;

      if (this.translateMePathString) {
        this.properties = this.translateMePathString.split(".");
      }

      this.parseVars(el); // Translate if language is ready

      if ((_this$i18n = this.i18n) !== null && _this$i18n !== void 0 && _this$i18n.ready) {
        const currentLangcode = this.i18n.getLangcode();
        const initialLangcode = this.i18n.getInitialLangcode();

        if (!currentLangcode) {
          throw new Error("No language code found!");
        }

        this.initOnReady(currentLangcode, currentLangcode !== initialLangcode || !options.localesService.doNotTranslateDefaultLanguage);
      } else {
        this.i18n.event.on("ready", this.initOnReady);
      }
    } else if (this.translateMePathString !== translateMePathString) {
      // If translate string was changed
      this.translateMePathString = translateMePathString;

      if (this.translateMePathString) {
        this.properties = this.translateMePathString.split(".");
      }

      this.parseVars(el);
      this.translate();
    }
  }

  unbind() {
    var _this$i18n2;

    this.el.removeEventListener("binder-changed", this.onAttributeChanged);
    (_this$i18n2 = this.i18n) === null || _this$i18n2 === void 0 ? void 0 : _this$i18n2.event.off("changed", this.onLanguageChanged);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nStarBinder, "key", "i18n-*");

/***/ }),

/***/ "../../packages/i18n/src/binders/index.ts":
/*!************************************************!*\
  !*** ../../packages/i18n/src/binders/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStarBinder": function() { return /* reexport safe */ _i18n_star_binder_js__WEBPACK_IMPORTED_MODULE_0__.I18nStarBinder; }
/* harmony export */ });
/* harmony import */ var _i18n_star_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./i18n-star.binder.js */ "../../packages/i18n/src/binders/i18n-star.binder.ts");


/***/ }),

/***/ "../../packages/i18n/src/components/index.ts":
/*!***************************************************!*\
  !*** ../../packages/i18n/src/components/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nShareComponent": function() { return /* reexport safe */ _share_share_component_js__WEBPACK_IMPORTED_MODULE_1__.I18nShareComponent; },
/* harmony export */   "I18nSwitcherComponent": function() { return /* reexport safe */ _switcher_switcher_component_js__WEBPACK_IMPORTED_MODULE_0__.I18nSwitcherComponent; }
/* harmony export */ });
/* harmony import */ var _switcher_switcher_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./switcher/switcher.component.js */ "../../packages/i18n/src/components/switcher/switcher.component.ts");
/* harmony import */ var _share_share_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./share/share.component.js */ "../../packages/i18n/src/components/share/share.component.ts");



/***/ }),

/***/ "../../packages/i18n/src/components/share/share.component.ts":
/*!*******************************************************************!*\
  !*** ../../packages/i18n/src/components/share/share.component.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nShareComponent": function() { return /* binding */ I18nShareComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-share/bs4-share.component.js */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts");
/* harmony import */ var _ribajs_bs4_src_components_bs4_share_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-share/bs4-share.component.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html");
/* harmony import */ var _share_label_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./share.label.html */ "../../packages/i18n/src/components/share/share.label.html");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/i18n/src/services/index.ts");







/**
 * Component to share the a link (i18n version)
 */
class I18nShareComponent extends _ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent {
  static get observedAttributes() {
    return [..._ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent.observedAttributes, "text-i18n", "label-i18n", "service-label-i18n"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", super.scope);

    this.scope = this.getScopeDefaults();
    this.scope.labelTemplate = _share_label_html__WEBPACK_IMPORTED_MODULE_4__["default"];
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(_ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent.observedAttributes);
    this.addEventListeners();
  }

  async initI18n() {
    return new Promise(resolve => {
      var _this$localesService, _this$localesService2;

      (_this$localesService = this.localesService) === null || _this$localesService === void 0 ? void 0 : _this$localesService.event.on("changed", async langcode => {
        return resolve(langcode);
      });

      if ((_this$localesService2 = this.localesService) !== null && _this$localesService2 !== void 0 && _this$localesService2.ready) {
        var _this$localesService3;

        const langcode = (_this$localesService3 = this.localesService) === null || _this$localesService3 === void 0 ? void 0 : _this$localesService3.getLangcode();
        return resolve(langcode);
      } else {
        var _this$localesService4;

        (_this$localesService4 = this.localesService) === null || _this$localesService4 === void 0 ? void 0 : _this$localesService4.event.on("ready", async langcode => {
          return resolve(langcode);
        });
      }
    });
  }

  async i18n(langcode, value) {
    var _this$localesService5;

    if (!value) {
      return;
    }

    return (_this$localesService5 = this.localesService) === null || _this$localesService5 === void 0 ? void 0 : _this$localesService5.get([langcode, ...value.split(".")]).then(locale => {
      // this.debug('changed local', local);
      return locale;
    }).catch(error => {
      console.error(error);
    });
  }

  async beforeBind() {
    await super.beforeBind();
    this.localesService = _services_index_js__WEBPACK_IMPORTED_MODULE_5__.I18nService.options.localesService;
    const langcode = await this.initI18n();

    if (this.scope.textI18n && langcode) {
      this.scope.text = (await this.i18n(langcode, this.scope.textI18n)) || this.scope.text;
    }

    if (this.scope.serviceLabelI18n && langcode) {
      for (const shareItem of this.scope.shareItems) {
        shareItem.label = (await this.i18n(langcode, this.scope.serviceLabelI18n + "." + shareItem.id)) || shareItem.label;
      }
    }
  }

  async afterBind() {
    await super.afterBind();
  }

  template() {
    this.debug("template", this, (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.hasChildNodesTrim)(this));

    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.hasChildNodesTrim)(this)) {
      // If a child is set, this is a custom label template
      this.scope.labelTemplate = this.innerHTML;
      this.debug("Custom label template: ", this.scope.labelTemplate);
    }

    return _ribajs_bs4_src_components_bs4_share_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nShareComponent, "tagName", "i18n-share");

/***/ }),

/***/ "../../packages/i18n/src/components/switcher/switcher.component.ts":
/*!*************************************************************************!*\
  !*** ../../packages/i18n/src/components/switcher/switcher.component.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nSwitcherComponent": function() { return /* binding */ I18nSwitcherComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/i18n/src/services/index.ts");



class I18nSwitcherComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      langcodes: [],
      switch: this.switch,
      toggle: this.toggle,
      ready: false
    });
  }

  static get observedAttributes() {
    return [];
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(I18nSwitcherComponent.observedAttributes);
  }

  setLangcode(langcode) {
    var _this$localesService;

    (_this$localesService = this.localesService) === null || _this$localesService === void 0 ? void 0 : _this$localesService.setLangcode(langcode);
  }

  requiredAttributes() {
    return [];
  }

  disconnectedCallback() {
    super.disconnectedCallback();
  }

  async beforeBind() {
    await super.beforeBind();
    this.localesService = _services_index_js__WEBPACK_IMPORTED_MODULE_2__.I18nService.options.localesService;

    if (!this.localesService) {
      throw new Error("LocalesService not defined!");
    }

    if (this.localesService.ready) {
      const langcode = this.localesService.getLangcode();

      if (langcode) {
        return await this.initLocales(langcode);
      }
    } else {
      var _this$localesService2;

      (_this$localesService2 = this.localesService) === null || _this$localesService2 === void 0 ? void 0 : _this$localesService2.event.on("ready", async langcode => {
        await this.initLocales(langcode);
      });
    }
  }

  template() {
    return null;
  }
  /**
   * Switch to language by langcode
   * @param langcode
   * @param event
   */


  switch(langcode, event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    if (!langcode.active) {
      this.setLangcode(langcode.code);
    }
  }
  /**
   * Toggle language, makes only sense if you have only two languages
   * @param langcode
   * @param event
   */


  toggle(event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    for (const i in this.scope.langcodes) {
      if (Object.prototype.hasOwnProperty.call(this.scope.langcodes, i)) {
        if (this.scope.langcodes[i].active !== true) {
          this.setLangcode(this.scope.langcodes[i].code);
          return;
        }
      }
    }
  }

  async initLocales(langcode) {
    var _this$localesService3, _this$localesService4;

    // set available langcodes
    const langcodes = await ((_this$localesService3 = this.localesService) === null || _this$localesService3 === void 0 ? void 0 : _this$localesService3.getAvailableLangcodes());

    if (!langcodes) {
      throw new Error("No lancodes found!");
    }

    this.scope.langcodes = langcodes; // set active langcodes

    this.scope.langcodes.forEach(langCode => {
      langCode.active = langCode.code === langcode;
    });
    (_this$localesService4 = this.localesService) === null || _this$localesService4 === void 0 ? void 0 : _this$localesService4.event.on("changed", changedLangcode => {
      // Activate localcode and disable the other
      this.scope.langcodes.forEach(langCode => {
        langCode.active = langCode.code === changedLangcode;
      });
    });
    this.scope.ready = true;
    return this.scope.langcodes;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nSwitcherComponent, "tagName", "i18n-switcher");

/***/ }),

/***/ "../../packages/i18n/src/formatters/index.ts":
/*!***************************************************!*\
  !*** ../../packages/i18n/src/formatters/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tFormatter": function() { return /* reexport safe */ _t_formatter_js__WEBPACK_IMPORTED_MODULE_0__.tFormatter; }
/* harmony export */ });
/* harmony import */ var _t_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./t.formatter.js */ "../../packages/i18n/src/formatters/t.formatter.ts");


/***/ }),

/***/ "../../packages/i18n/src/formatters/t.formatter.ts":
/*!*********************************************************!*\
  !*** ../../packages/i18n/src/formatters/t.formatter.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tFormatter": function() { return /* binding */ tFormatter; }
/* harmony export */ });
/* harmony import */ var _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");


const translate = async (translateMePathString, localesService, langcode) => {
  const properties = translateMePathString.split(".");

  if (!langcode) {
    langcode = localesService.getLangcode();

    if (!langcode) {
      return null;
    }
  }

  return localesService.get([langcode, ...properties]
  /*, vars */
  ).then(locale => {
    return locale;
  }).catch(error => {
    console.error(error);
  });
};

const tFormatter = {
  name: "t",

  read(translateMePathString, langcode) {
    const localesService = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_0__.I18nService.options.localesService;
    return new Promise((resolve, reject) => {
      localesService.event.on("changed", () => {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        }).catch(error => {
          reject(error);
        });
      });
      localesService.event.on("ready", () => {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        }).catch(error => {
          reject(error);
        });
      });

      if (localesService.ready) {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        });
      }
    });
  }

};

/***/ }),

/***/ "../../packages/i18n/src/i18n.module.ts":
/*!**********************************************!*\
  !*** ../../packages/i18n/src/i18n.module.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i18nModule": function() { return /* binding */ i18nModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/i18n/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/i18n/src/formatters/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/index.js */ "../../packages/i18n/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/index.js */ "../../packages/i18n/src/services/index.ts");




const i18nModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_3__,

  init(options) {
    if (!options) {
      throw new Error("[i18nModule] Module options required!");
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/i18n/src/index.ts":
/*!****************************************!*\
  !*** ../../packages/i18n/src/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.I18nService; },
/* harmony export */   "I18nShareComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_1__.I18nShareComponent; },
/* harmony export */   "I18nStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_0__.I18nStarBinder; },
/* harmony export */   "I18nSwitcherComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_1__.I18nSwitcherComponent; },
/* harmony export */   "LocalesRestService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.LocalesRestService; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.LocalesService; },
/* harmony export */   "LocalesStaticService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.LocalesStaticService; },
/* harmony export */   "i18nModule": function() { return /* reexport safe */ _i18n_module_js__WEBPACK_IMPORTED_MODULE_5__.i18nModule; },
/* harmony export */   "tFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.tFormatter; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/i18n/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/i18n/src/components/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/i18n/src/formatters/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/index.js */ "../../packages/i18n/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/index.js */ "../../packages/i18n/src/services/index.ts");
/* harmony import */ var _i18n_module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./i18n.module.js */ "../../packages/i18n/src/i18n.module.ts");







/***/ }),

/***/ "../../packages/i18n/src/services/i18n.service.ts":
/*!********************************************************!*\
  !*** ../../packages/i18n/src/services/i18n.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* binding */ I18nService; }
/* harmony export */ });
class I18nService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of I18nService not defined, please call setSingleton first!");
  }

  static setSingleton(options) {
    if (this.instance) {
      throw new Error("Singleton of I18nService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/i18n/src/services/index.ts":
/*!*************************************************!*\
  !*** ../../packages/i18n/src/services/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* reexport safe */ _i18n_service_js__WEBPACK_IMPORTED_MODULE_0__.I18nService; },
/* harmony export */   "LocalesRestService": function() { return /* reexport safe */ _locales_rest_service_js__WEBPACK_IMPORTED_MODULE_1__.LocalesRestService; },
/* harmony export */   "LocalesStaticService": function() { return /* reexport safe */ _locales_static_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesStaticService; }
/* harmony export */ });
/* harmony import */ var _i18n_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");
/* harmony import */ var _locales_rest_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locales-rest.service.js */ "../../packages/i18n/src/services/locales-rest.service.ts");
/* harmony import */ var _locales_static_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locales-static.service.js */ "../../packages/i18n/src/services/locales-static.service.ts");




/***/ }),

/***/ "../../packages/i18n/src/services/locales-rest.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/i18n/src/services/locales-rest.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesRestService": function() { return /* binding */ LocalesRestService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _types_locales_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");



/**
 * LocalesRestService get locales object from url
 */

class LocalesRestService extends _types_locales_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesService {
  static getInstance(url) {
    return LocalesRestService.instances[url];
  }

  constructor(url) {
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    super(doNotTranslateDefaultLanguage, showMissingTranslation);
    this.url = url;

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "locales", {});

    this.url = url;
    this.url = url;

    if (!this.url) {
      throw new Error("Url is required!");
    }

    if (LocalesRestService.instances[this.url]) {
      return LocalesRestService.instances[this.url];
    }

    this.init();
    LocalesRestService.instances[this.url] = this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  async getAll(url) {
    if (!url) {
      url = this.url;
    }

    if (!url) {
      throw new Error("Url is required!");
    }

    if (window.Shopify.shop) {
      url = url + "?shop=".concat(window.Shopify.shop);
    }

    if (this.locales[url]) {
      return this.locales[url];
    }

    const resp = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON(url);
    this.locales[url] = resp.body;
    return this.locales[url];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LocalesRestService, "instances", {});

/***/ }),

/***/ "../../packages/i18n/src/services/locales-static.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/i18n/src/services/locales-static.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesStaticService": function() { return /* binding */ LocalesStaticService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _types_locales_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");


class LocalesStaticService extends _types_locales_service_js__WEBPACK_IMPORTED_MODULE_1__.LocalesService {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    return LocalesStaticService.instances[id];
  }
  /**
   * The current defined langcode
   */


  constructor(locales, id) {
    let doNotTranslateDefaultLanguage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let showMissingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    super(doNotTranslateDefaultLanguage, showMissingTranslation);
    this.locales = locales;
    this.id = id;
    this.locales = locales;
    this.id = id;

    if (!id) {
      id = "main";
    }

    this.locales = locales;

    if (LocalesStaticService.instances[id]) {
      return LocalesStaticService.instances[id];
    }

    this.init();
    LocalesStaticService.instances[id] = this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  async getAll() {
    return this.locales;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LocalesStaticService, "instances", {});

/***/ }),

/***/ "../../packages/i18n/src/types/index.ts":
/*!**********************************************!*\
  !*** ../../packages/i18n/src/types/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _locales_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesService; }
/* harmony export */ });
/* harmony import */ var _langcode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langcode.js */ "../../packages/i18n/src/types/langcode.ts");
/* harmony import */ var _local_var_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-var.js */ "../../packages/i18n/src/types/local-var.ts");
/* harmony import */ var _locales_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module-options.js */ "../../packages/i18n/src/types/module-options.ts");





/***/ }),

/***/ "../../packages/i18n/src/types/langcode.ts":
/*!*************************************************!*\
  !*** ../../packages/i18n/src/types/langcode.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/i18n/src/types/local-var.ts":
/*!**************************************************!*\
  !*** ../../packages/i18n/src/types/local-var.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/i18n/src/types/locales-service.ts":
/*!********************************************************!*\
  !*** ../../packages/i18n/src/types/locales-service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* binding */ LocalesService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



class LocalesService {
  get ready() {
    return this._ready;
  }

  constructor(doNotTranslateDefaultLanguage, showMissingTranslation) {
    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "event", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("i18n"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "showMissingTranslation", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_ready", false);

    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;
    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;
    this.showMissingTranslation = showMissingTranslation;
  }
  /**
   * Get translation by properties, e.g. `de.form.newsletter_label`
   * Properties object must include the language code, e.g. `de`.
   * @param properties properties, e.g. `['de', 'form', 'newsletter', 'label']`
   * @param force Set this to true if you want to force the request also if the service is not ready, you should use this only one the time
   */


  async get(properties, vars) {
    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!this.ready && !force) {
      throw new Error("not ready");
    }

    return this.getAll() // extract properties
    .then(locals => {
      if (properties && properties.length) {
        let local = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.clone)(true, locals);

        for (const property of properties) {
          if (!property) {
            return null;
          }

          if (local[property]) {
            local = local[property];
          } else {
            return null;
          }
        }

        return local;
      }

      return locals;
    }).then(local => {
      if (local === null && properties) {
        console.warn("WARNING translation missing: \"".concat(properties.join("."), "\""), local, properties);
      }

      return local;
    }) // Replace variables in local string if vars are set
    .then(local => {
      if (vars) {
        local = this.setTranslateStringPluralization(local, vars);
        local = this.setTranslateStringVars(local, vars);
      }

      return local;
    }).catch(error => {
      console.error(error);
      this._ready = false;
      return error;
    });
  }
  /**
   * Get translation by properties, e.g. `form.newsletter_label`
   * Properties object must not include the language code.
   * @param properties properties, e.g. `[form', 'newsletter', 'label']`
   */


  async getByCurrentLang() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let vars = arguments.length > 1 ? arguments[1] : undefined;
    const langcode = this.getLangcode();

    if (!langcode) {
      throw new Error("Langcode not found in html tag");
    }

    return this.get([langcode, ...properties], vars);
  }

  getBrowserLangcode() {
    const lang = navigator.language || navigator.userLanguage;
    const simplified = lang.split("-")[0].toLowerCase();
    return simplified;
  }

  getHTMLLangcode() {
    const langcode = document.documentElement ? document.documentElement.lang : "en";
    return langcode;
  }
  /**
   * Get the current langcode,
   * if lang was not chosen this is the langcode of the lang attribute of the html element.
   * If the language was changed this returns the changed language
   */


  getLangcode() {
    return this.currentLangcode;
  }

  getInitialLangcode() {
    return this.initialLangcode;
  }

  setLangcode(langcode) {
    let initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (this.currentLangcode !== langcode) {
      this.currentLangcode = langcode; // $('html').attr('lang', langcode);

      if (document.documentElement) {
        document.documentElement.lang = langcode;
      }

      this.event.trigger("changed", langcode, initial);
    }
  }

  async getAvailableLangcodes() {
    const activeCode = this.getLangcode();
    const locals = await this.get(undefined, undefined, true);
    const langcodes = [];

    for (const langcode of Object.keys(locals)) {
      langcodes.push({
        code: langcode,
        active: langcode === activeCode
      });
    }

    return langcodes;
  }
  /**
   * Parse templates which can be used to set variables on language strings
   */


  parseTemplateVars(el) {
    const templates = el.querySelectorAll("template");
    const vars = {};
    templates.forEach(template => {
      const name = template.getAttribute("name");

      if (name !== null) {
        vars[name] = template.innerHTML.trim();
      }
    });
    return vars;
  }
  /**
   * Parse templates which have his own translations
   */


  parseLocalVars(el) {
    const templates = el.querySelectorAll("template");
    const vars = {};
    templates.forEach(template => {
      const lang = template.getAttribute("lang");

      if (lang !== null) {
        vars[lang] = template.innerHTML.trim();
      }
    });
    return vars;
  }
  /**
   * Replace variables on translated string
   * @param translateString
   * @param vars
   */


  setTranslateStringVars(translateString, vars) {
    if (!translateString || Object.keys(vars).length === 0 || typeof translateString.match !== "function") {
      return translateString;
    }

    const matches = translateString.match(/{{\s*?[A-Za-z0-9_-]+\s*?}}/gm);

    if (matches) {
      for (const match of matches) {
        if (match) {
          const varName = match.replace(/{{\s*|\s*}}/gm, "");

          if (typeof vars[varName] === "string" || typeof vars[varName] === "number") {
            translateString = translateString.replace(match, vars[varName]);
          }
        }
      }
    }

    return translateString;
  }
  /**
   * Get file with all languages
   */


  async init() {
    this.initialLangcode = this.getHTMLLangcode();
    this.currentLangcode = this.initialLangcode;

    if (!this.initialLangcode) {
      throw new Error("The lang attribute on the html element is required to detect the default theme language: ".concat(this.initialLangcode));
    } // Detect browser language and switch to this language when available


    const browserLangcode = this.getBrowserLangcode();
    return this.getAvailableLangcodes().then(availableLangcodes => {
      let browserLangFound = false;

      for (const availableLangcodeObj of availableLangcodes) {
        if (availableLangcodeObj.code === browserLangcode) {
          browserLangFound = true;
        }
      } // only switch language if the browser language is not the default language (if doNotTranslateDefaultLanguage is true)


      if (!this.doNotTranslateDefaultLanguage || browserLangFound && browserLangcode !== this.currentLangcode) {
        this.setLangcode(browserLangcode, true);
      }

      return availableLangcodes;
    }).then(() => {
      this._ready = true; // If the current langcode is not the initial langcode then translation is needed

      const translationNeeded = this.currentLangcode !== this.initialLangcode || !this.doNotTranslateDefaultLanguage;
      this.event.trigger("ready", this.currentLangcode, translationNeeded);
    }).catch(error => {
      console.error(error);
      this._ready = false;
      return error;
    });
  }
  /**
   * see https://help.shopify.com/en/themes/development/theme-store-requirements/internationalizing/translation-filter#pluralization-in-translation-keys
   * @param translateString
   * @param vars
   */


  setTranslateStringPluralization(translateObj, vars) {
    if (vars.count && typeof translateObj === "object" && translateObj !== null) {
      const count = Number(vars.count);

      if (count === 0) {
        if (translateObj.zero) {
          return translateObj.zero;
        }
      } else if (count === 1) {
        if (translateObj.one) {
          return translateObj.one;
        }
      } else if (count === 2) {
        if (translateObj.two) {
          return translateObj.two;
        }
      }
    }

    if (typeof translateObj === "object" && translateObj !== null && translateObj.other) {
      return translateObj.other;
    }

    return translateObj;
  }

}

/***/ }),

/***/ "../../packages/i18n/src/types/module-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/i18n/src/types/module-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/index.ts":
/*!***************************************!*\
  !*** ../../packages/jsx/src/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsxFragment": function() { return /* reexport safe */ _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_3__.JsxFragment; },
/* harmony export */   "Raw": function() { return /* reexport safe */ _jsx_raw_js__WEBPACK_IMPORTED_MODULE_4__.Raw; },
/* harmony export */   "createElement": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.createElement; },
/* harmony export */   "htmlVoidElements": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.htmlVoidElements; },
/* harmony export */   "jsxModule": function() { return /* reexport safe */ _module_js__WEBPACK_IMPORTED_MODULE_1__.jsxModule; },
/* harmony export */   "renderElement": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.renderElement; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/jsx/src/types/index.ts");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module.js */ "../../packages/jsx/src/module.ts");
/* harmony import */ var _jsx_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx.js */ "../../packages/jsx/src/jsx.ts");
/* harmony import */ var _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsx-fragment.js */ "../../packages/jsx/src/jsx-fragment.ts");
/* harmony import */ var _jsx_raw_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsx-raw.js */ "../../packages/jsx/src/jsx-raw.ts");






/***/ }),

/***/ "../../packages/jsx/src/jsx-fragment.ts":
/*!**********************************************!*\
  !*** ../../packages/jsx/src/jsx-fragment.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsxFragment": function() { return /* binding */ JsxFragment; }
/* harmony export */ });
const JsxFragment = Symbol();

/***/ }),

/***/ "../../packages/jsx/src/jsx-raw.ts":
/*!*****************************************!*\
  !*** ../../packages/jsx/src/jsx-raw.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Raw": function() { return /* binding */ Raw; }
/* harmony export */ });
/**
 * Used to inject HTML directly into the document.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function Raw(_props) {
  // This is handled specially by the renderElement function. Instead of being
  // called, the tag is compared to this function and the `html` prop will be
  // returned directly.
  return null;
}

/***/ }),

/***/ "../../packages/jsx/src/jsx.ts":
/*!*************************************!*\
  !*** ../../packages/jsx/src/jsx.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createElement": function() { return /* binding */ createElement; },
/* harmony export */   "htmlVoidElements": function() { return /* binding */ htmlVoidElements; },
/* harmony export */   "renderElement": function() { return /* binding */ renderElement; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-fragment.js */ "../../packages/jsx/src/jsx-fragment.ts");
/* harmony import */ var _jsx_raw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-raw.js */ "../../packages/jsx/src/jsx-raw.ts");
/* eslint-disable no-var */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/**
 * Custom JSX module designed specifically for Ribajs's needs.
 * When overriding a default TypeDoc theme output, your implementation must create valid {@link Element}
 * instances, which can be most easily done by using TypeDoc's JSX implementation. To use it, set up
 * your tsconfig with the following compiler options:
 * ```json
 * {
 *     "jsx": "react",
 *     "jsxFactory": "JSX.createElement",
 *     "jsxFragmentFactory": "JSX.Fragment"
 * }
 * ```
 * @see https://github.com/TypeStrong/typedoc/blob/master/src/lib/utils/jsx.ts
 * @module
 */



const htmlVoidElements = new Set(["area", "base", "br", "col", "embed", "hr", "img", "input", "link", "meta", "param", "source", "track", "wbr"]);
/**
 * JSX factory function to create an "element" that can later be rendered with {@link renderElement}
 * @param tag
 * @param props
 * @param children
 */

function createElement(tag, props) {
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  return {
    tag,
    props,
    children
  };
}
function renderElement(element) {
  if (!element) {
    return "";
  }

  const {
    tag,
    props,
    children
  } = element;

  if (typeof tag === "function") {
    if (tag === _jsx_raw_js__WEBPACK_IMPORTED_MODULE_2__.Raw) {
      return String(props.html);
    }

    return renderElement(tag(Object.assign({
      children
    }, props)));
  }

  const html = [];

  if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) {
    html.push("<", tag);

    for (const [key, val] of Object.entries(props !== null && props !== void 0 ? props : {})) {
      if (val == null) continue;

      if (typeof val == "boolean" && !(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isCustomElement)(tag)) {
        if (val) {
          html.push(" ", key);
        }
      } else {
        html.push(" ", key, "=", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(val));
      }
    }
  }

  let hasChildren = false;

  if (children.length) {
    hasChildren = true;
    if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) html.push(">");
    renderChildren(children);
  }

  if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) {
    if (!hasChildren) {
      if (htmlVoidElements.has(tag)) {
        html.push("/>");
      } else {
        html.push("></", tag, ">");
      }
    } else {
      html.push("</", tag, ">");
    }
  }

  return html.join("");

  function renderChildren(children) {
    for (const child of children) {
      if (!child) continue;

      if (Array.isArray(child)) {
        renderChildren(child);
      } else if (typeof child === "string" || typeof child === "number") {
        html.push((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.escapeHtml)(child.toString()));
      } else {
        html.push(renderElement(child));
      }
    }
  }
}
// Set as global variable in Browser, Deno or Node
(__webpack_require__.g || window).jsxCreateElement = createElement;
(__webpack_require__.g || window).jsxFragment = _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment;

/***/ }),

/***/ "../../packages/jsx/src/module.ts":
/*!****************************************!*\
  !*** ../../packages/jsx/src/module.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jsxModule": function() { return /* binding */ jsxModule; }
/* harmony export */ });
const jsxModule = {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this;
  }

};

/***/ }),

/***/ "../../packages/jsx/src/types/index.ts":
/*!*********************************************!*\
  !*** ../../packages/jsx/src/types/index.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jsx_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsx/index.js */ "../../packages/jsx/src/types/jsx/index.ts");
/* harmony import */ var _jsx_module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-module-options.js */ "../../packages/jsx/src/types/jsx-module-options.ts");



/***/ }),

/***/ "../../packages/jsx/src/types/jsx-module-options.ts":
/*!**********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx-module-options.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/index.ts":
/*!*************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intrinsic_elements_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intrinsic-elements.js */ "../../packages/jsx/src/types/jsx/intrinsic-elements.ts");
/* harmony import */ var _jsx_a_element_props_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-a-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-a-element-props.ts");
/* harmony import */ var _jsx_area_element_props_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-area-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-area-element-props.ts");
/* harmony import */ var _jsx_audio_element_props_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsx-audio-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts");
/* harmony import */ var _jsx_base_element_props_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsx-base-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-base-element-props.ts");
/* harmony import */ var _jsx_blockquote_element_props_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./jsx-blockquote-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts");
/* harmony import */ var _jsx_br_element_props_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./jsx-br-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-br-element-props.ts");
/* harmony import */ var _jsx_button_element_props_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./jsx-button-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-button-element-props.ts");
/* harmony import */ var _jsx_canvas_element_props_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jsx-canvas-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts");
/* harmony import */ var _jsx_children_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./jsx-children.js */ "../../packages/jsx/src/types/jsx/jsx-children.ts");
/* harmony import */ var _jsx_col_element_props_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./jsx-col-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-col-element-props.ts");
/* harmony import */ var _jsx_colgroup_element_props_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./jsx-colgroup-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts");
/* harmony import */ var _jsx_component_boolean_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./jsx-component-boolean.js */ "../../packages/jsx/src/types/jsx/jsx-component-boolean.ts");
/* harmony import */ var _jsx_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./jsx-component.js */ "../../packages/jsx/src/types/jsx/jsx-component.ts");
/* harmony import */ var _jsx_data_element_props_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./jsx-data-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-data-element-props.ts");
/* harmony import */ var _jsx_del_element_props_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./jsx-del-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-del-element-props.ts");
/* harmony import */ var _jsx_details_element_props_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./jsx-details-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-details-element-props.ts");
/* harmony import */ var _jsx_dialog_element_props_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./jsx-dialog-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts");
/* harmony import */ var _jsx_div_element_props_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./jsx-div-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-div-element-props.ts");
/* harmony import */ var _jsx_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./jsx-element.js */ "../../packages/jsx/src/types/jsx/jsx-element.ts");
/* harmony import */ var _jsx_embed_element_props_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./jsx-embed-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts");
/* harmony import */ var _jsx_fieldset_element_props_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./jsx-fieldset-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts");
/* harmony import */ var _jsx_form_element_props_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./jsx-form-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-form-element-props.ts");
/* harmony import */ var _jsx_html_custom_global_props_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./jsx-html-custom-global-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts");
/* harmony import */ var _jsx_html_element_props_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./jsx-html-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-element-props.ts");
/* harmony import */ var _jsx_html_global_props_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./jsx-html-global-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-global-props.ts");
/* harmony import */ var _jsx_iframe_element_props_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./jsx-iframe-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts");
/* harmony import */ var _jsx_img_element_props_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./jsx-img-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-img-element-props.ts");
/* harmony import */ var _jsx_input_element_props_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./jsx-input-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-input-element-props.ts");
/* harmony import */ var _jsx_ins_element_props_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./jsx-ins-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts");
/* harmony import */ var _jsx_label_element_props_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./jsx-label-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-label-element-props.ts");
/* harmony import */ var _jsx_li_element_props_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./jsx-li-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-li-element-props.ts");
/* harmony import */ var _jsx_link_element_props_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./jsx-link-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-link-element-props.ts");
/* harmony import */ var _jsx_map_element_props_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./jsx-map-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-map-element-props.ts");
/* harmony import */ var _jsx_meta_element_props_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./jsx-meta-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts");
/* harmony import */ var _jsx_meter_element_props_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./jsx-meter-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts");
/* harmony import */ var _jsx_object_element_props_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./jsx-object-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-object-element-props.ts");
/* harmony import */ var _jsx_ol_element_props_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./jsx-ol-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts");
/* harmony import */ var _jsx_optgroup_element_props_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./jsx-optgroup-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts");
/* harmony import */ var _jsx_option_element_props_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./jsx-option-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-option-element-props.ts");
/* harmony import */ var _jsx_output_element_props_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./jsx-output-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-output-element-props.ts");
/* harmony import */ var _jsx_param_element_props_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./jsx-param-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-param-element-props.ts");
/* harmony import */ var _jsx_portal_element_props_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./jsx-portal-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts");
/* harmony import */ var _jsx_progress_element_props_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./jsx-progress-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts");
/* harmony import */ var _jsx_q_element_props_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./jsx-q-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-q-element-props.ts");
/* harmony import */ var _jsx_script_element_props_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./jsx-script-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-script-element-props.ts");
/* harmony import */ var _jsx_select_element_props_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./jsx-select-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-select-element-props.ts");
/* harmony import */ var _jsx_slot_element_props_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./jsx-slot-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts");
/* harmony import */ var _jsx_source_element_props_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./jsx-source-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-source-element-props.ts");
/* harmony import */ var _jsx_style_element_props_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./jsx-style-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-style-element-props.ts");
/* harmony import */ var _jsx_svg_props_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./jsx-svg-props.js */ "../../packages/jsx/src/types/jsx/jsx-svg-props.ts");
/* harmony import */ var _jsx_td_element_props_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./jsx-td-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-td-element-props.ts");
/* harmony import */ var _jsx_textarea_element_props_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./jsx-textarea-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts");
/* harmony import */ var _jsx_th_element_props_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./jsx-th-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-th-element-props.ts");
/* harmony import */ var _jsx_time_element_props_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./jsx-time-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-time-element-props.ts");
/* harmony import */ var _jsx_track_element_props_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./jsx-track-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-track-element-props.ts");
/* harmony import */ var _jsx_video_element_props_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./jsx-video-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-video-element-props.ts");


























































/***/ }),

/***/ "../../packages/jsx/src/types/jsx/intrinsic-elements.ts":
/*!**************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/intrinsic-elements.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-a-element-props.ts":
/*!***************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-a-element-props.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-area-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-area-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-base-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-base-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts":
/*!************************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-br-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-br-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-button-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-button-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-children.ts":
/*!********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-children.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-col-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-col-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-component-boolean.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-component-boolean.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-component.ts":
/*!*********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-component.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-data-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-data-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-del-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-del-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-details-element-props.ts":
/*!*********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-details-element-props.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-div-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-div-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-element.ts":
/*!*******************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-element.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-form-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-form-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts":
/*!************************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-global-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-global-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-img-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-img-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-input-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-input-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-label-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-label-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-li-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-li-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-link-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-link-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-map-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-map-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-object-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-object-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-option-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-option-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-output-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-output-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-param-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-param-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-q-element-props.ts":
/*!***************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-q-element-props.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-script-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-script-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-select-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-select-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-source-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-source-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-style-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-style-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-svg-props.ts":
/*!*********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-svg-props.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-td-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-td-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-th-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-th-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-time-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-time-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-track-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-track-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-video-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-video-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/binders/index.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/binders/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* reexport safe */ _parent_route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_4__.ParentRouteClassStarBinder; },
/* harmony export */   "RouteBackOnStarBinder": function() { return /* reexport safe */ _route_back_on_star_binder_js__WEBPACK_IMPORTED_MODULE_5__.RouteBackOnStarBinder; },
/* harmony export */   "RouteBinder": function() { return /* reexport safe */ _route_binder_js__WEBPACK_IMPORTED_MODULE_1__.RouteBinder; },
/* harmony export */   "RouteClassStarBinder": function() { return /* reexport safe */ _route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_2__.RouteClassStarBinder; },
/* harmony export */   "RoutePreloadBinder": function() { return /* reexport safe */ _route_preload_binder_js__WEBPACK_IMPORTED_MODULE_3__.RoutePreloadBinder; },
/* harmony export */   "ViewStaticBinder": function() { return /* reexport safe */ _view_static_binder_js__WEBPACK_IMPORTED_MODULE_0__.ViewStaticBinder; }
/* harmony export */ });
/* harmony import */ var _view_static_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view-static.binder.js */ "../../packages/router/src/binders/view-static.binder.ts");
/* harmony import */ var _route_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./route.binder.js */ "../../packages/router/src/binders/route.binder.ts");
/* harmony import */ var _route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./route-class-star.binder.js */ "../../packages/router/src/binders/route-class-star.binder.ts");
/* harmony import */ var _route_preload_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./route-preload.binder.js */ "../../packages/router/src/binders/route-preload.binder.ts");
/* harmony import */ var _parent_route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parent-route-class-star.binder.js */ "../../packages/router/src/binders/parent-route-class-star.binder.ts");
/* harmony import */ var _route_back_on_star_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./route-back-on-star.binder.js */ "../../packages/router/src/binders/route-back-on-star.binder.ts");







/***/ }),

/***/ "../../packages/router/src/binders/parent-route-class-star.binder.ts":
/*!***************************************************************************!*\
  !*** ../../packages/router/src/binders/parent-route-class-star.binder.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* binding */ ParentRouteClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");




class ParentRouteClassStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onUrlChange", this._onUrlChange.bind(this));
  }

  _onUrlChange() {
    if (!this.url) {
      throw new Error("url is not defined!");
    }

    if (!this.className) {
      throw new Error("className is not defined!");
    }

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.onParentRoute)(this.url)) {
      this.el.classList.add(this.className); // check if element is radio input

      if (this.el.getAttribute("type") === "radio") {
        this.el.checked = true;
      }

      return true;
    } else {
      this.el.classList.remove(this.className); // uncheck if element is radio input

      if (this.el.getAttribute("type") === "radio") {
        this.el.checked = false;
      }
    }

    return false;
  }

  /**
   * Tests the url with the current location, if the current location starts with the url this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */
  routine(el, url) {
    this.url = url;
    this.className = this.args[0].toString() || "active";
    const isAnkerHTMLElement = el.tagName === "A";

    if (!this.url && isAnkerHTMLElement) {
      const href = el.getAttribute("href");

      if (href) {
        this.url = href;
      }
    }

    this.onUrlChange();
  }

  bind() {
    this.dispatcher.on("newPageReady", this.onUrlChange);
  }

  unbind() {
    this.dispatcher.off("newPageReady", this.onUrlChange);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ParentRouteClassStarBinder, "class", "parent-route-class-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-back-on-star.binder.ts":
/*!**********************************************************************!*\
  !*** ../../packages/router/src/binders/route-back-on-star.binder.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteBackOnStarBinder": function() { return /* binding */ RouteBackOnStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");



const goBack = () => {
  window.history.back();
};
/**
 * Calls `window.history.back()` on event.
 */


class RouteBackOnStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 3000);
  }

  unbind(el) {
    if (this.eventName) {
      el.removeEventListener(this.eventName, goBack);
    }
  }

  routine(el) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    if (this.eventName) {
      el.removeEventListener(this.eventName, goBack);
    }

    this.eventName = this.args[0];
    el.addEventListener(this.args[0], goBack);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteBackOnStarBinder, "key", "route-back-on-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-class-star.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/router/src/binders/route-class-star.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteClassStarBinder": function() { return /* binding */ RouteClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");




class RouteClassStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "className", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onUrlChange", this._onUrlChange.bind(this));
  }

  _onUrlChange() {
    if (this.url) {
      if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.onRoute)(this.url)) {
        this.el.classList.add(this.className); // check if element is radio input

        if (this.el.getAttribute("type") === "radio") {
          this.el.checked = true;
        }

        return true;
      } else {
        this.el.classList.remove(this.className); // uncheck if element is radio input

        if (this.el.getAttribute("type") === "radio") {
          this.el.checked = false;
        }
      }
    }

    return false;
  }

  bind() {
    this.dispatcher.on("newPageReady", this.onUrlChange);
  }
  /**
   * Tests the url with the current location, if the url is equal to the current location this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */


  routine(el, url) {
    this.url = url;
    this.className = this.args[0].toString() || "active";
    const isAnchorElement = el.tagName === "A";

    if (!this.url && isAnchorElement) {
      const href = el.getAttribute("href");

      if (href) {
        this.url = href;
      }
    }

    this.onUrlChange();
  }

  unbind() {
    this.dispatcher.off("newPageReady", this.onUrlChange);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteClassStarBinder, "key", "route-class-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-preload.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/router/src/binders/route-preload.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RoutePreloadBinder": function() { return /* binding */ RoutePreloadBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");



class RoutePreloadBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    if (window.ssr) {
      return;
    }

    const isAnchorElement = el.tagName === "A";

    if (!url && isAnchorElement) {
      const href = el.getAttribute("href");

      if (href) {
        url = href;
      }
    }

    if (url) {
      var _Pjax$getInstance;

      (_Pjax$getInstance = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance()) === null || _Pjax$getInstance === void 0 ? void 0 : _Pjax$getInstance.prefetchLink(url);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RoutePreloadBinder, "key", "route-preload");

/***/ }),

/***/ "../../packages/router/src/binders/route.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/router/src/binders/route.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteBinder": function() { return /* binding */ RouteBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/index.js */ "../../packages/router/src/services/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");






/**
 * Open link with pajax if the route is not the active route
 */
class RouteBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "options", {
      url: "",
      viewId: "main",
      removeAfterActivation: false,
      newTab: false,
      newTabOnExtern: true
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onClick", this._onClick.bind(this));
  }

  _onClick(event) {
    // console.log(this.options.url);
    const pjax = _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.options.viewId);

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(this.options.url, true)) {
      console.info("already on this site, do nothing");
      event.stopPropagation();
      event.preventDefault();
    } else if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.isExternalUrl)(this.options.url)) {
      if (!pjax) {
        return;
      }

      event.stopPropagation();
      event.preventDefault(); // Is extern

      const newTab = this.options.newTab || this.options.newTabOnExtern;
      pjax.goTo(this.options.url, newTab);
    } else {
      if (this.options.url) {
        if (!pjax) {
          return;
        }

        pjax.onLinkClick(event, this.el, this.options.url, this.options.newTab);
      }
    }

    if (this.options.removeAfterActivation && this.el && this.el.parentNode) {
      // this.unbind(); TODO?
      this.el.parentNode.removeChild(this.el);
    }
  }

  bind(el) {
    el.classList.add("route");

    if (window.ssr) {
      return;
    }

    this.onClick = this.onClick.bind(this);
    el.addEventListener("click", this.onClick);
  }

  routine(el, optionsOrUrl) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isString)(optionsOrUrl)) {
      this.options.url = optionsOrUrl;
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(optionsOrUrl)) {
      this.options = optionsOrUrl;
    }

    this.options.viewId = this.options.viewId || "main";
    this.prefetch = new _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Prefetch(this.options.viewId);
    this.options.newTab = false;
    const isAnchorHTMLElement = el.tagName === "A";

    if (!this.options.url && isAnchorHTMLElement) {
      const url = el.getAttribute("href");

      if (url) {
        this.options.url = url;
      }
    }

    if (el.getAttribute("target") === "_blank") {
      this.options.newTab = true;
    } // normalize url


    this.options.url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.normalizeUrl)(this.options.url).url; // set href if not set

    if (isAnchorHTMLElement && (!el.href || !el.getAttribute("href")) && this.options.url) {
      el.setAttribute("href", this.options.url);
      el.href = this.options.url;
    }

    if (!this.options.newTab) {
      this.prefetch.initBinder(el, this.options.url);
    } // this.checkURL.call(this, this.options.url);

  }

  unbind(el) {
    var _this$prefetch;

    (_this$prefetch = this.prefetch) === null || _this$prefetch === void 0 ? void 0 : _this$prefetch.deInitBinder(el, this.options.url);
    el.removeEventListener("click", this.onClick);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteBinder, "key", "route");

/***/ }),

/***/ "../../packages/router/src/binders/view-static.binder.ts":
/*!***************************************************************!*\
  !*** ../../packages/router/src/binders/view-static.binder.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewStaticBinder": function() { return /* binding */ ViewStaticBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/index.js */ "../../packages/router/src/services/index.ts");




const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
/**
 * Loads a url with pjax and show them inside the element this binder is used on
 */

class ViewStaticBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "nested", null);
  }

  async routine(el, options) {
    const wrapper = el; // Set default options

    options = options || {};
    options.listenAllLinks = false;
    options.listenPopstate = false;
    options.parseTitle = false;
    options.transition = options.transition || new _services_index_js__WEBPACK_IMPORTED_MODULE_3__.HideShowTransition();
    options.viewId = options.viewId || el.getAttribute("id") || handleize(options.url);
    options.containerSelector = options.containerSelector || "[data-namespace]";
    options.changeBrowserUrl = false;
    const pjax = new _services_index_js__WEBPACK_IMPORTED_MODULE_3__.Pjax(options);
    const {
      responsePromise
    } = await pjax.loadResponseCached(options.url, false, false);
    const response = await responsePromise;
    wrapper.replaceWith(response.container);
    response.container.style.visibility = "visible"; // add the dataset to the model

    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(this.view.models)) {
      this.view.models = {};
    }

    if (this.nested) {
      this.nested.unbind();
    }

    this.nested = new _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.View(response.container, this.view.models, this.view.options);
    this.nested.bind();
  }

  unbind() {
    if (this.nested) {
      this.nested.unbind();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ViewStaticBinder, "key", "view-static");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ViewStaticBinder, "block", true);

/***/ }),

/***/ "../../packages/router/src/components/index.ts":
/*!*****************************************************!*\
  !*** ../../packages/router/src/components/index.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterLoadScriptComponent": function() { return /* reexport safe */ _load_script_load_script_component_js__WEBPACK_IMPORTED_MODULE_0__.RouterLoadScriptComponent; },
/* harmony export */   "RouterViewComponent": function() { return /* reexport safe */ _view_view_component_js__WEBPACK_IMPORTED_MODULE_1__.RouterViewComponent; }
/* harmony export */ });
/* harmony import */ var _load_script_load_script_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load-script/load-script.component.js */ "../../packages/router/src/components/load-script/load-script.component.ts");
/* harmony import */ var _view_view_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/view.component.js */ "../../packages/router/src/components/view/view.component.ts");



/***/ }),

/***/ "../../packages/router/src/components/load-script/load-script.component.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/router/src/components/load-script/load-script.component.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterLoadScriptComponent": function() { return /* binding */ RouterLoadScriptComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



class RouterLoadScriptComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["src", "id", "async", "defer"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      src: "",
      id: "",
      async: true,
      defer: true
    });
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(RouterLoadScriptComponent.observedAttributes);
  }

  async onReady() {
    await super.onReady();

    if (!this.scope.id) {
      this.scope.id = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getUID)("script-");
    }

    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.loadScript)(this.scope.src, this.scope.id, this.scope.async);
  }

  requiredAttributes() {
    return ["src"];
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouterLoadScriptComponent, "tagName", "router-load-script");

/***/ }),

/***/ "../../packages/router/src/components/view/view.component.ts":
/*!*******************************************************************!*\
  !*** ../../packages/router/src/components/view/view.component.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterViewComponent": function() { return /* binding */ RouterViewComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/router/src/services/index.ts");





class RouterViewComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "action", "container-selector", "scroll-to-top", "listen-all-links", "listen-popstate", "scroll-to-anchor-hash", "scroll-to-anchor-offset", "dataset-to-root-scope", "parse-title", "change-browser-url", "prefetch-links"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "nested", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "wrapper", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pjax", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "prefetch", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      id: "main",
      action: "replace",
      scrollToTop: true,
      listenAllLinks: true,
      listenPopstate: true,
      scrollToAnchorHash: true,
      scrollToAnchorOffset: _services_index_js__WEBPACK_IMPORTED_MODULE_4__.RouterService.options.scrollToAnchorOffset,
      datasetToRootScope: true,
      parseTitle: true,
      changeBrowserUrl: true,
      prefetchLinks: true,
      transition: _services_index_js__WEBPACK_IMPORTED_MODULE_4__.RouterService.options.defaultTransition
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(RouterViewComponent.observedAttributes);
  }

  addEventListeners() {
    this.events.on("newPageReady", this.onPageReady, this);
    this.events.on("initStateChange", this.onTransitionInit, this);
    this.events.on("transitionCompleted", this.onTransitionCompleted, this);
  }

  removeEventListeners() {
    this.events.off("newPageReady", this.onPageReady, this);
    this.events.off("initStateChange", this.onTransitionInit, this);
    this.events.off("transitionCompleted", this.onTransitionCompleted, this);
  }

  getContainerSelector() {
    if (this.scope.id === "main") {
      return "".concat(RouterViewComponent.tagName, " > *:first-child");
    } else {
      return "".concat(RouterViewComponent.tagName, "#").concat(this.scope.id, " > *:first-child");
    }
  }

  initAndStartPjax() {
    if (!this.scope.id) {
      console.error("Id attribute is required!");
      return;
    }

    const pjaxOptions = {
      id: this.scope.id,
      action: this.scope.action,
      wrapper: this,
      containerSelector: this.getContainerSelector(),
      listenAllLinks: !!this.scope.listenAllLinks,
      listenPopstate: !!this.scope.listenPopstate,
      transition: this.scope.transition,
      parseTitle: !!this.scope.parseTitle,
      changeBrowserUrl: !!this.scope.changeBrowserUrl,
      prefetchLinks: !!this.scope.prefetchLinks,
      scrollToTop: !!this.scope.scrollToTop
    };
    this.pjax = new _services_index_js__WEBPACK_IMPORTED_MODULE_4__.Pjax(pjaxOptions);
    this.pjax.setActiveWrapper(this);
    this.prefetch = new _services_index_js__WEBPACK_IMPORTED_MODULE_4__.Prefetch(this.scope.id);
    this.prefetch.init(pjaxOptions.prefetchLinks);
    this.pjax.start();
  }

  onPageReady(viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset, isInit) {
    // Only continue if the viewID is equal (in this way it is possible to have multiple views)
    if (viewId !== this.scope.id) {
      console.warn("not the right view", this.scope.id, viewId, dataset);
      return;
    }

    this.debug("New page ready!", this.innerHTML);

    if (this.scope.datasetToRootScope) {
      if (!this.scope.$root) {
        this.scope.$root = {};
      }

      this.scope.$root.dataset = dataset;
    } // Ignore rest on first page requests


    if (isInit) {
      return;
    }

    this.view = this.getView();

    if (!this.view) {
      console.warn("View ist not ready!");
      return;
    }

    this.view.bind();
  }

  async onTransitionInit(viewId) {
    if (viewId !== this.scope.id) {
      return;
    }

    this.setTransitionClass("init");
  }

  async onTransitionCompleted(viewId) {
    // Only to anything if the viewID is equal (in this way it is possible to have multiple views)
    if (viewId !== this.scope.id) {
      return;
    }

    this.setTransitionClass("complete");

    if (this.scope.scrollToAnchorHash) {
      let scrollToElement = null;
      const hash = window.location.hash.substr(1);

      if (hash) {
        scrollToElement = document.getElementById(window.location.hash.substr(1)); // Scroll to Anchor of hash

        if (scrollToElement) {
          return await (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.scrollTo)(scrollToElement, this.scope.scrollToAnchorOffset, window);
        }
      }
    }

    if (this.scope.scrollToTop) {
      return await (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.scrollToPosition)(window, "start", "vertical", "smooth");
    }
  }

  setTransitionClass(state) {
    this.classList.remove("transition-init");
    this.classList.remove("transition-complete");
    this.classList.add("transition-".concat(state));
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "id":
        this.events = _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance(this.scope.id);
        break;

      default:
        break;
    }
  }

  async beforeBind() {
    await super.beforeBind();
    this.addEventListeners();
    this.initAndStartPjax();
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouterViewComponent, "tagName", "router-view");

/***/ }),

/***/ "../../packages/router/src/constants.ts":
/*!**********************************************!*\
  !*** ../../packages/router/src/constants.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IGNORE_CLASS_LINK": function() { return /* binding */ IGNORE_CLASS_LINK; },
/* harmony export */   "IGNORE_CLASS_PREFETCH": function() { return /* binding */ IGNORE_CLASS_PREFETCH; },
/* harmony export */   "ROUTE_ERROR_CLASS": function() { return /* binding */ ROUTE_ERROR_CLASS; }
/* harmony export */ });
/**
 * Class append to links which have caused an error
 */
const ROUTE_ERROR_CLASS = "router-error";
/**
 * Class name used to ignore links
 */

const IGNORE_CLASS_LINK = "no-barba";
/**
 * Class name used to ignore prefetch on links
 */

const IGNORE_CLASS_PREFETCH = "no-barba-prefetch";

/***/ }),

/***/ "../../packages/router/src/index.ts":
/*!******************************************!*\
  !*** ../../packages/router/src/index.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransition; },
/* harmony export */   "BaseView": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseView; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.CustomTransition; },
/* harmony export */   "Dom": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Dom; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.HideShowTransition; },
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; },
/* harmony export */   "IGNORE_CLASS_LINK": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.IGNORE_CLASS_LINK; },
/* harmony export */   "IGNORE_CLASS_PREFETCH": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.IGNORE_CLASS_PREFETCH; },
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ParentRouteClassStarBinder; },
/* harmony export */   "Pjax": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Prefetch; },
/* harmony export */   "ROUTE_ERROR_CLASS": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.ROUTE_ERROR_CLASS; },
/* harmony export */   "RouteBackOnStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteBackOnStarBinder; },
/* harmony export */   "RouteBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteBinder; },
/* harmony export */   "RouteClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteClassStarBinder; },
/* harmony export */   "RoutePreloadBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RoutePreloadBinder; },
/* harmony export */   "RouterLoadScriptComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.RouterLoadScriptComponent; },
/* harmony export */   "RouterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.RouterService; },
/* harmony export */   "RouterViewComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.RouterViewComponent; },
/* harmony export */   "ViewStaticBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ViewStaticBinder; },
/* harmony export */   "routerModule": function() { return /* reexport safe */ _router_module_js__WEBPACK_IMPORTED_MODULE_6__.routerModule; }
/* harmony export */ });
/* harmony import */ var _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/history/src/index.js */ "../../packages/history/src/index.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "../../packages/router/src/constants.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/router/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/router/src/components/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types/index.js */ "../../packages/router/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/index.js */ "../../packages/router/src/services/index.ts");
/* harmony import */ var _router_module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.module.js */ "../../packages/router/src/router.module.ts");








/***/ }),

/***/ "../../packages/router/src/router.module.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/router.module.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "routerModule": function() { return /* binding */ routerModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/router/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/router/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/router/src/services/index.ts");



const routerModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: {},

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.RouterService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/router/src/services/Pjax/Dom.ts":
/*!******************************************************!*\
  !*** ../../packages/router/src/services/Pjax/Dom.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dom": function() { return /* binding */ Dom; }
/* harmony export */ });
/**
 * Object that is going to deal with DOM parsing/manipulation
 * TODO move to @ribajs/core dom utils
 */
class Dom {
  static getPrefetchLinkElements(content) {
    // router-preload is a custom preloader
    return content.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]');
  }

  static parseTitle(content) {
    let title = ""; // title = Dom.findHTMLTagContent('title', template.innerHTML) || '';

    const titleElement = content.querySelector("title");

    if (titleElement && titleElement.innerText) {
      title = titleElement.innerText;
    }

    return title;
  }
  /**
   * Parse the responseText obtained from the fetch call
   * @see https://stackoverflow.com/a/41038197/1465919
   */


  static parseResponse(responseText, parseTitle, containerSelector) {
    let prefetchLinks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    let title = "";
    let prefetchLinkElements = [];
    const template = document.createElement("template");
    template.innerHTML = responseText;

    if (parseTitle) {
      title = this.parseTitle(template.content);
    }

    if (prefetchLinks) {
      prefetchLinkElements = this.getPrefetchLinkElements(template.content);
    }

    const container = this.getContainer(template, containerSelector);
    return {
      container,
      title,
      prefetchLinks: prefetchLinkElements
    };
  }
  /**
   * Use this method only on the first page load
   */


  static parseInitial(parseTitle, containerSelector) {
    let prefetchLinks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    let title = "";
    let prefetchLinkElements = []; // const template = document.createElement("template") as HTMLTemplateElement;
    // template.innerHTML = document.body.innerHTML;

    const container = this.getContainer(document, containerSelector);

    if (parseTitle) {
      title = this.parseTitle(document);
    }

    if (prefetchLinks) {
      prefetchLinkElements = this.getPrefetchLinkElements(document);
    }

    return {
      container: container,
      title,
      prefetchLinks: prefetchLinkElements
    };
  }
  /**
   * Get the container on the current DOM,
   * or from an Element passed via argument
   */


  static getContainer(element, containerSelector) {
    if (!element) {
      throw new Error("Barba.js: [getContainer] No element to get container from, maybe the DOM is not ready!");
    }

    const container = this.parseContainer(element, containerSelector);

    if (!container) {
      throw new Error("[DOM] No container found");
    }

    return container;
  }
  /**
   * Get the namespace of the container
   */


  static getNamespace(element) {
    if (element && element.dataset && element.dataset.namespace) {
      return element.dataset.namespace;
    } else {
      return null;
    }
  }
  /**
   * Put the container on the page
   */


  static putContainer(element, wrapper) {
    element = element;
    element.style.visibility = "hidden";
    wrapper.appendChild(element);
  }
  /**
   * Get container selector
   */


  static parseContainer(newPage, containerSelector) {
    if (!newPage) {
      const error = new Error("New page not loaded!");
      console.error(error, newPage);
      throw error;
    }

    let result;

    if (newPage.content) {
      result = newPage.content.querySelector(containerSelector);
    } else {
      result = newPage.querySelector(containerSelector);
    }

    if (!result) {
      const error = new Error("No container with selector \"".concat(containerSelector, "\" found!"));
      console.error(error, newPage);
      throw error;
    }

    return result;
  }

}



/***/ }),

/***/ "../../packages/router/src/services/Pjax/Prefetch.ts":
/*!***********************************************************!*\
  !*** ../../packages/router/src/services/Pjax/Prefetch.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Prefetch": function() { return /* binding */ Prefetch; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "../../packages/router/src/services/Pjax/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants.js */ "../../packages/router/src/constants.ts");






/**
 * Prefetch
 */
class Prefetch {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = Prefetch.instances[id];

    if (!result) {
      return new this(id);
    }

    return result;
  }
  /** singleton instance */


  /**
   * Creates an singleton instance of Prefetch.
   */
  constructor(viewId) {
    this.viewId = viewId;
    this.viewId = viewId;
    this.viewId = viewId;

    if (Prefetch.instances[this.viewId]) {
      return Prefetch.instances[this.viewId];
    }

    Prefetch.instances[this.viewId] = this;
    this.onLinkEnterIntern = this.onLinkEnterIntern.bind(this);
  }
  /**
   * Init the event listener on mouseover and touchstart for all links on the document
   * for the prefetch
   *
   */


  init() {
    let autobindLinks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (!window.history.pushState) {
      return false;
    }

    if (autobindLinks) {
      this.deInit();
      document.body.addEventListener("mouseover", this.onLinkEnterIntern, {
        passive: true
      });
      document.body.addEventListener("touchstart", this.onLinkEnterIntern, {
        passive: true
      });
    }
  }

  deInit() {
    document.body.removeEventListener("mouseover", this.onLinkEnterIntern);
    document.body.removeEventListener("touchstart", this.onLinkEnterIntern);
  }
  /**
   * This method is used from the rv-route binder
   * @param el
   */


  initBinder(el, url) {
    if (!window.history.pushState) {
      return false;
    }

    this.deInitBinder(el, url);
    el.addEventListener("mouseover", this.onLinkEnter.bind(this, url, el), {
      passive: true
    });
    el.addEventListener("touchstart", this.onLinkEnter.bind(this, url, el), {
      passive: true
    });
  }

  deInitBinder(el, url) {
    el.removeEventListener("mouseover", this.onLinkEnter.bind(this, url, el));
    el.removeEventListener("touchstart", this.onLinkEnter.bind(this, url, el));
  }

  onLinkEnter(url, el, evt) {
    if (el.classList && (el.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_4__.IGNORE_CLASS_PREFETCH) || el.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS))) {
      return;
    }

    url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.normalizeUrl)(url).url;
    const preventCheck = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.preventCheck(url, el, evt); // Check if the link is eligible for Pjax

    if (url && preventCheck) {
      const pjax = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.viewId);

      if (pjax) {
        pjax.loadResponseCached(url, false, false).catch(error => {
          el.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS);
          console.error(url);
          console.error(error);
        });
      } else {
        console.warn("[Prefetch.onLinkEnter] No pjax instance for viewId \"".concat(this.viewId, "\" found!"));
        el.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS);
      }
    }
  }

  url(url) {
    url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.normalizeUrl)(url).url;
    const preventCheck = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.preventCheck(url); // Check if the link is eligible for Pjax

    if (url && preventCheck) {
      const pjax = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.viewId);

      if (pjax) {
        pjax.loadResponseCached(url, false, false).catch(error => {
          console.error(error);
        });
      } else {
        console.warn("[Prefetch.url] No pjax instance for viewId \"".concat(this.viewId, "\" found!"));
      }
    }
  }
  /**
   * Callback for the mouseover/touchstart, please use the rv-route binder instead
   *
   */


  onLinkEnterIntern(evt) {
    let el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromEvent)(evt);

    if (!el) {
      throw new Error("HTML Element not set");
    }

    while (el && !_index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getHref(el)) {
      el = el.parentNode;
    }

    if (!el) {
      return;
    }

    if (el.nodeName !== "A") {
      return;
    }

    const href = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getHref(el); // Already managed by the rv-route binder

    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return;
    }

    if (!href) {
      console.warn("Url is not defined, you can't cache the link without the url. Please make sure your element has the href attribute or pass the url directly to this function.", el);
      return;
    }

    return this.onLinkEnter(href, el, evt);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Prefetch, "instances", {});



/***/ }),

/***/ "../../packages/router/src/services/Pjax/index.ts":
/*!********************************************************!*\
  !*** ../../packages/router/src/services/Pjax/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dom": function() { return /* reexport safe */ _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom; },
/* harmony export */   "Pjax": function() { return /* binding */ Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _Prefetch_js__WEBPACK_IMPORTED_MODULE_2__.Prefetch; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dom.js */ "../../packages/router/src/services/Pjax/Dom.ts");
/* harmony import */ var _Prefetch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Prefetch.js */ "../../packages/router/src/services/Pjax/Prefetch.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_cache__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/cache */ "../../packages/cache/src/index.ts");
/* harmony import */ var _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Transition/index.js */ "../../packages/router/src/services/Transition/index.ts");
/* harmony import */ var _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ribajs/history/src/index.js */ "../../packages/history/src/index.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../constants.js */ "../../packages/router/src/constants.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/router/src/services/index.ts");













/**
 * Pjax is a static object with main function
 *
 * @borrows Dom as Dom
 */
class Pjax {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = Pjax.instances[id];

    if (!result) {
      console.warn("[Pjax.getInstance] No pjax instance for viewId \"".concat(id, "\" found!"));
    }

    return result;
  }
  /**
   * Determine if the link should be followed
   */


  static preventCheckUrl(href) {
    /**
     * Create fake html element
     */
    const element = document.createElement("a");
    element.setAttribute("href", href);

    if (!element) {
      return false;
    }

    if (!href) {
      return false;
    } // In case you're trying to load the same page


    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)(href) === (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)(location.href)) {
      return false;
    } // Check if it's the same domain


    if (window.location.protocol !== element.protocol || window.location.hostname !== element.hostname) {
      return false;
    } // Check if the port is the same


    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getPort)() !== (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getPort)(element.port)) {
      return false;
    }

    return true;
  }
  /**
   * Determine if the link should be followed
   */


  static preventCheck(url, element, evt) {
    if (!window.history.pushState) {
      return false;
    }

    if (!this.preventCheckUrl(url)) {
      return false;
    }

    if (evt) {
      // Middle click, cmd click, ctrl click or prefetch load event
      if (evt && evt.which && evt.which > 1 || evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey) {
        return false;
      }
    }

    if (element) {
      // Ignore target with _blank target
      if (element.target && element.target === "_blank") {
        return false;
      } // Ignore case where there is download attribute


      if (element.getAttribute && typeof element.getAttribute("download") === "string") {
        return false;
      }

      if (element.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_9__.IGNORE_CLASS_LINK)) {
        return false;
      }
    }

    return true;
  }
  /**
   * Get the .href parameter out of an element
   * and handle special cases (like xlink:href)
   */


  static getHref(el) {
    if (!el) {
      return undefined;
    }

    if (el.getAttribute && typeof el.getAttribute("xlink:href") === "string") {
      return el.getAttribute("xlink:href") || undefined;
    }

    if (typeof el.href === "string" || el.hasAttribute && el.hasAttribute("href")) {
      const href = el.href || el.getAttribute("href");

      if (!href) {
        console.error("href attribute not found for element: ", el);
        throw new Error("href attribute not found!");
      }

      return href;
    }

    return undefined;
  }

  /**
   * Creates an singleton instance of Pjax.
   */
  constructor(_ref) {
    let {
      id,
      action = "replace",
      wrapper,
      containerSelector = "[data-namespace]",
      listenAllLinks = false,
      listenPopstate = true,
      parseTitle = true,
      changeBrowserUrl = true,
      prefetchLinks = true,
      scrollToTop = true,
      scrollToAnchorOffset = _services_index_js__WEBPACK_IMPORTED_MODULE_10__.RouterService.options.scrollToAnchorOffset
    } = _ref;

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "history", new _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_8__.HistoryManager());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "cacheEnabled", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "transitionProgress", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "viewId", "main");

    if (id) {
      this.viewId = id;
    }

    let instance = this;
    this.scrollToAnchorOffset = scrollToAnchorOffset || 0;
    this.dispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher(this.viewId);
    this.listenAllLinks = listenAllLinks;
    this.listenPopstate = listenPopstate;
    this.parseTitle = parseTitle;
    this.changeBrowserUrl = changeBrowserUrl;
    this.containerSelector = containerSelector;
    this.prefetchLinks = prefetchLinks;

    if (Pjax.instances[this.viewId]) {
      instance = Pjax.instances[this.viewId];
    }

    instance.transition = instance.transition || new _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__.HideShowTransition(action, scrollToTop);
    instance.wrapper = instance.wrapper || wrapper;
    instance.containerSelector = instance.containerSelector || containerSelector;
    instance.listenAllLinks = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.listenAllLinks) ? instance.listenAllLinks : listenAllLinks;
    instance.listenPopstate = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.listenPopstate) ? instance.listenPopstate : listenPopstate;
    instance.parseTitle = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.parseTitle) ? instance.parseTitle : parseTitle;
    instance.changeBrowserUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.changeBrowserUrl) ? instance.changeBrowserUrl : changeBrowserUrl;
    instance.prefetchLinks = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.prefetchLinks) ? instance.prefetchLinks : prefetchLinks;

    if (instance.wrapper) {
      instance.wrapper.setAttribute("aria-live", "polite");
    }

    Pjax.instances[this.viewId] = instance;
    return Pjax.instances[this.viewId];
  }
  /**
   * USe this if you have a view component
   */


  setActiveWrapper(wrapper) {
    this.wrapper = wrapper;
  }
  /**
   * Function to be called to start Pjax
   */


  start() {
    if (this.wrapper) {
      try {
        this.init(this.wrapper, this.listenAllLinks, this.listenPopstate);
      } catch (error) {
        console.error(error);
      }
    } else {
      console.error("Can't init pjax without wrapper");
    }
  }
  /**
   * Return the currentURL cleaned
   */


  getCurrentUrl() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getUrl)());
  }
  /**
   * Change the URL with push state and trigger the state change
   */


  goTo(url) {
    let newTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (newTab) {
      const win = window.open(url, "_blank");

      if (win) {
        return win.focus();
      }

      return false;
    }

    if (url.startsWith("http")) {
      url = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(url).url;
    }

    if (!url.startsWith("http")) {
      if (this.changeBrowserUrl) {
        window.history.pushState(null, "", url);
      }

      return this.onStateChange(undefined, url);
    } else {
      // fallback
      this.forceGoTo(url);
    }
  }
  /**
   * Return a transition object
   */


  getTransition() {
    // User customizable
    return this.transition || new _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__.HideShowTransition();
  }

  prefetchLink(href) {
    href = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(href).url;
    const follow = Pjax.preventCheckUrl(href);

    if (follow) {
      return this.loadResponseCached(href, true, false);
    }
  }
  /**
   * Appends a prefetch link to the head and caches the result
   */


  prefetchLinkElement(linkElement, head) {
    const rel = linkElement.getAttribute("rel");
    const href = Pjax.getHref(linkElement);

    if (rel === "router-preload" && href && this.cacheEnabled && !linkElement.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_9__.ROUTE_ERROR_CLASS)) {
      try {
        this.prefetchLink(href);
      } catch (error) {
        linkElement.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_9__.ROUTE_ERROR_CLASS);
        console.error(error);
      }
    } // Append The link elements to the head for native prefetch by the browser


    head.appendChild(linkElement);
  }

  removePrefetchLinks(head) {
    const removePrefetchLinkElements = head.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]'); // Remove the old prefetch link elements

    removePrefetchLinkElements.forEach(linkElement => {
      if (linkElement && linkElement.parentNode) {
        linkElement.parentNode.removeChild(linkElement);
      }
    });
  }
  /**
   * Replaces the prefetch links in the head with the new one.
   * The custom link[href][rel="router-preload"] elements will be not readd to the head
   * because we preload them with javascript, the others are preloaded by the browser
   * because it has native support for them and for that they must exist in the head
   * @param prefetchLinks
   */


  replacePrefetchLinkElements(prefetchLinks) {
    const head = document.head || document.getElementsByTagName("head")[0];
    this.removePrefetchLinks(head);
    prefetchLinks.forEach(linkElement => {
      this.prefetchLinkElement(linkElement, head);
    });
  }
  /**
   * Load an url, will start an fetch request or load the response from the cache and returns the container
   * Also puts the container to the DOM and sets the title (if this option is active)
   */


  async loadCached(url) {
    try {
      const {
        responsePromise
      } = await this.loadResponseCached(url, false, true);

      if (!this.wrapper) {
        throw new Error("[Pjax] you need a wrapper!");
      }

      const response = await responsePromise;
      _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.putContainer(response.container, this.wrapper);

      if (this.parseTitle === true && response.title) {
        document.title = response.title;
      }

      if (this.prefetchLinks === true && response.prefetchLinks) {
        this.replacePrefetchLinkElements(response.prefetchLinks);
      }

      return response.container;
    } catch (error) {
      console.error(error); // Something went wrong (timeout, 404, 505...)

      this.forceGoTo(url);
      throw error;
    }
  }
  /**
   * Load an url, will start an fetch request or load from the cache (and set it to the cache) and will return a `Response` object
   * @param url Url to get from cache or to make the request for
   * @param forceCache Force to use the browser build in cache, for more information see `force-cache` on https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
   * @param fallback If there is an error, make a normal browser request and reload the page you should not use this on prefetch urls
   */


  async loadResponseCached(url) {
    let forceCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    let responsePromise;

    try {
      if (this.cacheEnabled) {
        responsePromise = Pjax.cache.get(url);

        if (responsePromise) {
          return {
            fromCache: true,
            responsePromise
          };
        }
      }

      responsePromise = this.loadResponse(url, forceCache);

      if (this.cacheEnabled && responsePromise) {
        Pjax.cache.set(url, responsePromise);
      } else {// Pjax.cache.reset();
      }
    } catch (error) {
      console.error(error);

      if (fallback) {
        this.forceGoTo(url);
      }

      throw error;
    }

    return {
      fromCache: false,
      responsePromise
    };
  }
  /**
   * Load an url, will start an fetch request and will return a `Response` object
   * @param url Url to get from cache or to make the request for
   * @param forceCache Force to use the browser build in cache, for more information see `force-cache` on https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
   */


  async loadResponse(url) {
    let forceCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const options = forceCache ? {
      cache: "force-cache"
    } : {};
    const data = await _ribajs_core__WEBPACK_IMPORTED_MODULE_4__.HttpService.get(url, undefined, "html", {}, options);

    if (!data || !data.body) {
      throw new Error("No body!");
    }

    const response = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.parseResponse(data.body, this.parseTitle, this.containerSelector, this.prefetchLinks);
    return response;
  }
  /**
   * Attach the event listeners
   */


  bindEvents(listenAllLinks, listenPopstate) {
    // you can also use the rv-router for this
    if (listenAllLinks) {
      document.addEventListener("click", this.onLinkClickIntern.bind(this));
    }

    if (listenPopstate) {
      window.addEventListener("popstate", this.onStateChange.bind(this));
    }
  }
  /**
   * Force the browser to go to a certain url
   */


  forceGoTo(url) {
    console.warn("forceGoTo", url);

    if (url && url.href) {
      window.location = url;
    }

    if (typeof url === "string") {
      window.location.href = url;
    }
  }

  onLinkClickIntern(evt) {
    let el = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getElementFromEvent)(evt);

    while (el && !Pjax.getHref(el)) {
      el = el.parentNode; // TODO test me
    }

    if (!el || el.nodeName !== "A") {
      return;
    }

    const href = Pjax.getHref(el); // Already managed by the rv-route binder

    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return;
    }

    if (!href) {
      throw new Error("Url is not defined, you can't cache the link without the url. Please make sure your element has the href attribute or pass the url directly to this function.");
    } // Already managed by the rv-route binder


    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return false;
    }

    return this.onLinkClick(evt, el, href);
  }
  /**
   * Callback called from click event
   */


  onLinkClick(evt, el, href) {
    let newTab = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // normalize url, returns the relative url for internal urls and the full url for external urls
    const {
      url,
      location
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(href);
    const {
      location: currLocation
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(); // Is this a local scroll link to an title anchor?

    if (location.hash && currLocation.pathname === location.pathname) {
      let id = location.hash.slice(1);
      id = decodeURI(id); // Workaround for markdown generated ids with umlauts

      const scrollToElement = document.getElementById(id);

      if (scrollToElement) {
        evt.stopPropagation();
        evt.preventDefault();

        if (this.changeBrowserUrl) {
          window.history.pushState(null, "", url);
        }

        return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.scrollTo)(scrollToElement, this.scrollToAnchorOffset);
      }
    }

    if (!url) {
      throw new Error("url is falsy");
    }

    const follow = Pjax.preventCheck(url, el, evt);

    if (follow) {
      evt.stopPropagation();
      evt.preventDefault();
      this.dispatcher.trigger("linkClicked", el, evt);
      this.goTo(url, newTab);
    }
  }
  /**
   * Method called after a 'popstate' or from .goTo()
   */


  async onStateChange(event) {
    let newUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCurrentUrl();
    // normalize url, returns the relative url for internal urls and the full url for external urls
    newUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(newUrl).url;
    const oldUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(this.history.currentStatus().url).url;

    if (this.changeBrowserUrl && oldUrl === newUrl) {
      return false;
    }

    this.history.add(newUrl);
    this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus(), this.history.prevStatus());
    const oldContainer = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getContainer(document, this.containerSelector);
    const newContainerPromise = this.loadCached(newUrl);
    const transition = this.getTransition();
    this.transitionProgress = true;
    const transitionResult = transition.init(oldContainer, newContainerPromise);
    this.onNewContainerLoaded(await newContainerPromise);
    await transitionResult;
    this.onTransitionEnd();
  }
  /**
   * Function called as soon the new container is ready
   */


  onNewContainerLoaded(container) {
    const currentStatus = this.history.currentStatus();
    currentStatus.namespace = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getNamespace(container);
    const dataset = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getDataset)(container);
    this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), this.history.prevStatus(), container, container.innerHTML, dataset, false // true if this is the first time newPageReady is triggered / true on initialization
    );
  }
  /**
   * Function called as soon the transition is finished
   */


  onTransitionEnd() {
    this.transitionProgress = false;
    this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus(), this.history.prevStatus());
  }
  /**
   * Init the events
   */


  init(wrapper, listenAllLinks, listenPopstate) {
    const initialResponse = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.parseInitial(this.parseTitle, this.containerSelector, this.prefetchLinks);
    const url = window.location.pathname; // Reload the current site with pjax to cache the initial page

    if (this.cacheEnabled) {
      const currentUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(window.location.href).url;

      if (!Pjax.cache.get(url)) {
        this.loadResponseCached(currentUrl, false, false);
      }
    }

    this.replacePrefetchLinkElements(initialResponse.prefetchLinks);
    this.wrapper = wrapper;
    this.history.add(this.getCurrentUrl(), _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getNamespace(initialResponse.container)); // Fire for the current view.

    this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus());
    const dataset = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getDataset)(initialResponse.container);
    this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), {}, initialResponse.container, initialResponse.container.innerHTML, dataset, true // true if this is the first time newPageReady is triggered / true on initialization
    );
    this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus());
    this.bindEvents(listenAllLinks, listenPopstate);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Pjax, "cache", new _ribajs_cache__WEBPACK_IMPORTED_MODULE_6__.BaseCache());

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Pjax, "instances", {});



/***/ }),

/***/ "../../packages/router/src/services/Transition/BaseTransition.ts":
/*!***********************************************************************!*\
  !*** ../../packages/router/src/services/Transition/BaseTransition.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* binding */ BaseTransition; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * BaseTransition to extend
 */
class BaseTransition {
  constructor() {
    let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "deferred", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)());

    this.action = action;
  }
  /**
   * This function is called from Pjax module to initialize
   * the transition.
   *
   */


  async init(oldContainer, newContainer) {
    this.oldContainer = oldContainer;
    this.deferred = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)();
    const newContainerLoading = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)();
    this.newContainerLoading = newContainerLoading.promise;
    this.start();
    this.newContainer = await newContainer;
    newContainerLoading.resolve(this.newContainer);
    return this.deferred.promise;
  }
  /**
   * This function needs to be called as soon the Transition is finished
   */


  async done() {
    if (!this.oldContainer) {
      throw new Error("Can't remove old container");
    }

    if (this.action === "replace") {
      this.oldContainer.remove();
    }

    if (!this.newContainer) {
      throw new Error("Can't show new container");
    }

    this.newContainer.style.visibility = "visible";
    return this.deferred.resolve(undefined);
  }
  /**
   * Constructor for your Transition
   */


}

/***/ }),

/***/ "../../packages/router/src/services/Transition/CustomTransition.ts":
/*!*************************************************************************!*\
  !*** ../../packages/router/src/services/Transition/CustomTransition.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomTransition": function() { return /* binding */ CustomTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");


/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */
class CustomTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition {
  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    await this.newContainerLoading;
    this.finish();
    return;
  }

  async finish() {
    document.body.scrollTop = 0;
    return this.done();
  }

}



/***/ }),

/***/ "../../packages/router/src/services/Transition/FadeTransition.ts":
/*!***********************************************************************!*\
  !*** ../../packages/router/src/services/Transition/FadeTransition.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FadeTransition": function() { return /* binding */ FadeTransition; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */

class FadeTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_1__.BaseTransition {
  constructor() {
    let scrollToTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    super("replace");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "durationMs", 200);

    this.scrollToTop = scrollToTop;
  }

  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    if (this.oldContainer) {
      this.oldContainer.style.transition = "opacity ".concat(this.durationMs, "ms");
      this.oldContainer.style.opacity = "0";
    }

    if (this.scrollToTop) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(window, "start", "vertical", "smooth");
    }

    const newContainer = await this.newContainerLoading;
    newContainer.style.opacity = "0";
    newContainer.style.transition = "opacity ".concat(this.durationMs, "ms");
    setTimeout(() => {
      this.finish(newContainer);
    }, this.durationMs);
    return;
  }

  async finish(newContainer) {
    newContainer.style.opacity = "1";
    return this.done();
  }

}

/***/ }),

/***/ "../../packages/router/src/services/Transition/HideShowTransition.ts":
/*!***************************************************************************!*\
  !*** ../../packages/router/src/services/Transition/HideShowTransition.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HideShowTransition": function() { return /* binding */ HideShowTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");


/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */

class HideShowTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition {
  constructor() {
    let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";
    let scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    super(action);
    this.action = action;
    this.scrollToTop = scrollToTop;
  }

  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    if (this.oldContainer) {
      this.oldContainer.style.display = "none";
    }

    if (this.scrollToTop) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.scrollToPosition)(window, "start", "vertical", "smooth");
    }

    await this.newContainerLoading;
    await this.finish();

    if (this.oldContainer) {
      this.oldContainer.style.display = "";
    }

    return;
  }

  async finish() {
    return this.done();
  }

}

/***/ }),

/***/ "../../packages/router/src/services/Transition/index.ts":
/*!**************************************************************!*\
  !*** ../../packages/router/src/services/Transition/index.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _CustomTransition_js__WEBPACK_IMPORTED_MODULE_1__.CustomTransition; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _FadeTransition_js__WEBPACK_IMPORTED_MODULE_2__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _HideShowTransition_js__WEBPACK_IMPORTED_MODULE_3__.HideShowTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _CustomTransition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomTransition.js */ "../../packages/router/src/services/Transition/CustomTransition.ts");
/* harmony import */ var _FadeTransition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FadeTransition.js */ "../../packages/router/src/services/Transition/FadeTransition.ts");
/* harmony import */ var _HideShowTransition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HideShowTransition.js */ "../../packages/router/src/services/Transition/HideShowTransition.ts");





/***/ }),

/***/ "../../packages/router/src/services/View.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/services/View.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseView": function() { return /* binding */ BaseView; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * BaseView to be extended
 */

class BaseView {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance());
  }

  /**
   * Helper to extend the object
   */
  extend(obj) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: false
    }, this, obj);
  }
  /**
   * Init the view.
   * P.S. Is suggested to init the view before starting Barba.Pjax.start(),
   * in this way .onEnter() and .onEnterCompleted() will be fired for the current
   * container when the page is loaded.
   */


  init() {
    this.dispatcher.on("initStateChange", (viewId, newStatus, oldStatus) => {
      if (oldStatus && oldStatus.namespace === this.namespace) {
        this.onLeave();
      }
    });
    this.dispatcher.on("newPageReady", (viewId, newStatus, oldStatus, container) => {
      this.container = container;

      if (newStatus.namespace === this.namespace) {
        this.onEnter();
      }
    });
    this.dispatcher.on("transitionCompleted", (viewId, newStatus, oldStatus) => {
      if (newStatus.namespace === this.namespace) {
        this.onEnterCompleted();
      }

      if (oldStatus && oldStatus.namespace === this.namespace) {
        this.onLeaveCompleted();
      }
    });
  }
  /**
   * This function will be fired when the container
   * is ready and attached to the DOM.
   */


}



/***/ }),

/***/ "../../packages/router/src/services/index.ts":
/*!***************************************************!*\
  !*** ../../packages/router/src/services/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition; },
/* harmony export */   "BaseView": function() { return /* reexport safe */ _View_js__WEBPACK_IMPORTED_MODULE_1__.BaseView; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomTransition; },
/* harmony export */   "Dom": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Dom; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.HideShowTransition; },
/* harmony export */   "Pjax": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Prefetch; },
/* harmony export */   "RouterService": function() { return /* reexport safe */ _router_service_js__WEBPACK_IMPORTED_MODULE_3__.RouterService; }
/* harmony export */ });
/* harmony import */ var _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition/index.js */ "../../packages/router/src/services/Transition/index.ts");
/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./View.js */ "../../packages/router/src/services/View.ts");
/* harmony import */ var _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pjax/index.js */ "../../packages/router/src/services/Pjax/index.ts");
/* harmony import */ var _router_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router.service.js */ "../../packages/router/src/services/router.service.ts");





/***/ }),

/***/ "../../packages/router/src/services/router.service.ts":
/*!************************************************************!*\
  !*** ../../packages/router/src/services/router.service.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterService": function() { return /* binding */ RouterService; }
/* harmony export */ });
/* harmony import */ var _Transition_HideShowTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition/HideShowTransition.js */ "../../packages/router/src/services/Transition/HideShowTransition.ts");

class RouterService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of RouterService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    var _options$defaultTrans, _options$scrollToAnch;

    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      console.warn("Singleton of RouterService already defined!");
      return this.instance;
    }

    options.defaultTransition = (_options$defaultTrans = options.defaultTransition) !== null && _options$defaultTrans !== void 0 ? _options$defaultTrans : new _Transition_HideShowTransition_js__WEBPACK_IMPORTED_MODULE_0__.HideShowTransition();
    options.scrollToAnchorOffset = (_options$scrollToAnch = options.scrollToAnchorOffset) !== null && _options$scrollToAnch !== void 0 ? _options$scrollToAnch : 0;
    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/router/src/types/index.ts":
/*!************************************************!*\
  !*** ../../packages/router/src/types/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jsx_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsx/index.js */ "../../packages/router/src/types/jsx/index.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-options.js */ "../../packages/router/src/types/module-options.ts");
/* harmony import */ var _pjax_options_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pjax-options.js */ "../../packages/router/src/types/pjax-options.ts");
/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.js */ "../../packages/router/src/types/response.ts");
/* harmony import */ var _route_options_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./route-options.js */ "../../packages/router/src/types/route-options.ts");
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transition.js */ "../../packages/router/src/types/transition.ts");
/* harmony import */ var _view_options_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./view-options.js */ "../../packages/router/src/types/view-options.ts");








/***/ }),

/***/ "../../packages/router/src/types/jsx/index.ts":
/*!****************************************************!*\
  !*** ../../packages/router/src/types/jsx/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intrinsic_elements_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intrinsic-elements.js */ "../../packages/router/src/types/jsx/intrinsic-elements.ts");
/* harmony import */ var _jsx_router_view_props_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-router-view-props.js */ "../../packages/router/src/types/jsx/jsx-router-view-props.ts");



/***/ }),

/***/ "../../packages/router/src/types/jsx/intrinsic-elements.ts":
/*!*****************************************************************!*\
  !*** ../../packages/router/src/types/jsx/intrinsic-elements.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/jsx/jsx-router-view-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/router/src/types/jsx/jsx-router-view-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/module-options.ts":
/*!*********************************************************!*\
  !*** ../../packages/router/src/types/module-options.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/pjax-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/router/src/types/pjax-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/response.ts":
/*!***************************************************!*\
  !*** ../../packages/router/src/types/response.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/route-options.ts":
/*!********************************************************!*\
  !*** ../../packages/router/src/types/route-options.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/transition.ts":
/*!*****************************************************!*\
  !*** ../../packages/router/src/types/transition.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/router/src/types/view-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/router/src/types/view-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/binders/index.ts":
/*!*******************************************************!*\
  !*** ../../packages/shopify-tda/src/binders/index.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/components/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/components/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* reexport safe */ _instagram_instagram_component_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyTdaInstagramComponent; },
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* reexport safe */ _instagram_scrollbar_instagram_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyTdaInstagramScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _instagram_instagram_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instagram/instagram.component.js */ "../../packages/shopify-tda/src/components/instagram/instagram.component.ts");
/* harmony import */ var _instagram_scrollbar_instagram_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instagram-scrollbar/instagram-scrollbar.component.js */ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts");



/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts":
/*!******************************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* binding */ ShopifyTdaInstagramScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_instagram_api_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/instagram-api.service.js */ "../../packages/shopify-tda/src/services/instagram-api.service.ts");
/* harmony import */ var _instagram_scrollbar_component_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./instagram-scrollbar.component.html */ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html");






class ShopifyTdaInstagramScrollbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["instagram-id", "open-links", "limit", "open-url"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      instagramId: undefined,
      openLinks: false,
      openUrl: undefined,
      limit: 0,
      onScroll: this.onScroll,
      onTap: this.onTap,
      media: undefined
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scollWith", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "instagram", _services_instagram_api_service_js__WEBPACK_IMPORTED_MODULE_4__.InstagramApiService.getSingleton());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyTdaInstagramScrollbarComponent.observedAttributes);
  }
  /**
   * Just open the instagram url
   */


  onTap(event, scope, eventEl) {
    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    if (this.scope.openUrl && this.scope.openUrl.length > 0) {
      pjax.goTo(this.scope.openUrl);
    }

    if (this.scope.openLinks) {
      var _eventEl$firstChild;

      const url = (_eventEl$firstChild = eventEl.firstChild) === null || _eventEl$firstChild === void 0 ? void 0 : _eventEl$firstChild.dataset.url;

      if (url) {
        pjax.goTo(url, true);
      }
    }
  }
  /**
   * get instagram in the middle of the scrollbar elementinnerWidth
   * TODO not used
   */


  onScroll(event, scope, eventEl) {
    if (this.scollWith) {
      const factor = 3;
      this.scollWith.scrollLeft = eventEl.scrollLeft / factor;
    }
  }
  /**
   * Get width insite the scrollbar of the autoscolling title
   * TODO not used
   */


  getTitleWidth() {
    var _this$scollWith$query;

    if (!this.scollWith) {
      return 0;
    }

    return ((_this$scollWith$query = this.scollWith.querySelector(".title-col")) === null || _this$scollWith$query === void 0 ? void 0 : _this$scollWith$query.clientWidth) || 0;
  }
  /**
   * Get width insite the scrollbar of the dragablle / scrollable area
   */


  getInstagramWidth() {
    if (!this.scope.media) {
      return;
    }

    const width = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w / 3 * this.scope.media.data.length;
    return width;
  }

  async loadMedia() {
    if (!this.scope.instagramId) {
      throw new Error("instagram id is required!");
    }

    try {
      const response = await this.instagram.media(this.scope.instagramId, this.scope.limit);

      if (response) {
        this.scope.media = response.media;
        console.debug("response", response);
      }
    } catch (error) {
      console.debug("Error: Can't load instagram media", error);
    }
  }

  async beforeBind() {
    await super.beforeBind();
    this.scollWith = this.querySelector(".title-row");
    return this.loadMedia();
  }

  requiredAttributes() {
    return ["instagramId", "limit"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _instagram_scrollbar_component_html__WEBPACK_IMPORTED_MODULE_5__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyTdaInstagramScrollbarComponent, "tagName", "shopify-tda-instagram-scrollbar");

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram/instagram.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram/instagram.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* binding */ ShopifyTdaInstagramComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _instagram_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instagram.component.html */ "../../packages/shopify-tda/src/components/instagram/instagram.component.html");
/* harmony import */ var _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/shopify-tda */ "../../packages/shopify-tda/src/index.ts");





class ShopifyTdaInstagramComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["instagram-id", "open-links", "limit"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      media: undefined,
      openLinks: false,
      limit: 0,
      instagramId: undefined,
      onTap: this.onTap
    });

    this.instagram = _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_4__.InstagramApiService.getSingleton();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyTdaInstagramComponent.observedAttributes);
  }
  /**
   * Just open the instagram url
   */


  onTap(event, scope, eventEl) {
    if (!this.scope.openLinks) {
      return;
    }

    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    const url = eventEl.dataset.url;

    if (url) {
      pjax.goTo(url, true);
    }
  }

  loadMedia() {
    if (!this.scope.instagramId) {
      return Promise.reject();
    }

    this.instagram.media(this.scope.instagramId, this.scope.limit).then(response => {
      if (response) {
        this.scope.media = response.media || [];
      }
    }).catch(error => {
      console.debug("Error: Can't load instagram media", error);
    });
  }

  async beforeBind() {
    return this.loadMedia();
  }

  requiredAttributes() {
    return ["instagramId", "limit"];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && this.hasChildNodes()) {
      return null;
    } else {
      return _instagram_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyTdaInstagramComponent, "tagName", "shopify-tda-instagram");

/***/ }),

/***/ "../../packages/shopify-tda/src/constants/index.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify-tda/src/constants/index.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE_HOST_DEV_URL": function() { return /* binding */ BASE_HOST_DEV_URL; },
/* harmony export */   "BASE_HOST_URL": function() { return /* binding */ BASE_HOST_URL; }
/* harmony export */ });
const BASE_HOST_URL = "https://the-developer-app.artandcode.studio";
const BASE_HOST_DEV_URL = "https://tda-dev.artandcode.studio";

/***/ }),

/***/ "../../packages/shopify-tda/src/dependencies/index.ts":
/*!************************************************************!*\
  !*** ../../packages/shopify-tda/src/dependencies/index.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Io": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.Io; },
/* harmony export */   "Socket": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.io; }
/* harmony export */ });
/* harmony import */ var _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socket-io-client.js */ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts");


/***/ }),

/***/ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/dependencies/socket-io-client.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Io": function() { return /* reexport module object */ socket_io_client__WEBPACK_IMPORTED_MODULE_0__; },
/* harmony export */   "Socket": function() { return /* reexport safe */ socket_io_client__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* binding */ io; }
/* harmony export */ });
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ "../../.yarn/cache/socket.io-client-npm-4.4.1-da36bb26d9-4c7f77f439.zip/node_modules/socket.io-client/build/esm/index.js");


const io = socket_io_client__WEBPACK_IMPORTED_MODULE_0__.io;


/***/ }),

/***/ "../../packages/shopify-tda/src/formatters/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/formatters/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/index.ts":
/*!***********************************************!*\
  !*** ../../packages/shopify-tda/src/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseApiService; },
/* harmony export */   "FacebookApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.FacebookApiService; },
/* harmony export */   "InstagramApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.InstagramApiService; },
/* harmony export */   "Io": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.Io; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.LocalesService; },
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ModuleService; },
/* harmony export */   "ShopifyApiArticleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiArticleService; },
/* harmony export */   "ShopifyApiBlogsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiBlogsService; },
/* harmony export */   "ShopifyApiProductService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiProductService; },
/* harmony export */   "ShopifyApiThemesService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiThemesService; },
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyTdaInstagramComponent; },
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyTdaInstagramScrollbarComponent; },
/* harmony export */   "Socket": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.io; },
/* harmony export */   "shopifyTDAModule": function() { return /* reexport safe */ _shopify_tda_module_js__WEBPACK_IMPORTED_MODULE_6__.shopifyTDAModule; }
/* harmony export */ });
/* harmony import */ var _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dependencies/index.js */ "../../packages/shopify-tda/src/dependencies/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify-tda/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify-tda/src/formatters/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/shopify-tda/src/interfaces/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify-tda/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify-tda/src/services/index.ts");
/* harmony import */ var _shopify_tda_module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shopify-tda.module.js */ "../../packages/shopify-tda/src/shopify-tda.module.ts");








/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/base.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/base.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/index.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/index.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/base.ts");
/* harmony import */ var _pages_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts");
/* harmony import */ var _post_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./post.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/post.ts");
/* harmony import */ var _user_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./user.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/user.ts");





/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/post.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/post.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/user.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/user.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _facebook_api_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./facebook-api/index.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/index.ts");
/* harmony import */ var _instagram_api_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instagram-api/index.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/index.ts");
/* harmony import */ var _shopify_api_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shopify-api/index.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/index.ts");




/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/data.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/data.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/index.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/index.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/data.ts");
/* harmony import */ var _media_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./media.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/media.ts");
/* harmony import */ var _paging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paging.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts");
/* harmony import */ var _media_response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./media-response.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts");





/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/media.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/media.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts":
/*!*************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/article.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/article.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts":
/*!*****************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/base.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/base.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/index.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/index.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _article_image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./article-image.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts");
/* harmony import */ var _article_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./article.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/article.ts");
/* harmony import */ var _asset_locale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./asset-locale.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts");
/* harmony import */ var _asset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./asset.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/base.ts");
/* harmony import */ var _blog_commentable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blog-commentable.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts");
/* harmony import */ var _blog_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blog.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts");
/* harmony import */ var _metafield_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metafield.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts");
/* harmony import */ var _product_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product.ts");
/* harmony import */ var _product_image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./product_image.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts");
/* harmony import */ var _product_option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./product_option.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts");
/* harmony import */ var _product_variant_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./product_variant.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts");
/* harmony import */ var _theme_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./theme.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts");














/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts":
/*!**************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts":
/*!*******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts":
/*!********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/services/base.service.ts":
/*!***************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/base.service.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* binding */ BaseApiService; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/shopify-tda/src/constants/index.ts");

class BaseApiService {
  constructor() {
    var _host;

    let host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.BASE_HOST_URL;

    if ((_host = host) !== null && _host !== void 0 && _host.endsWith("/")) {
      host = host.substring(0, host.length - 1);
    }

    this.host = host;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/facebook-api.service.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/facebook-api.service.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FacebookApiService": function() { return /* binding */ FacebookApiService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class FacebookApiService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/facebook/api";
  }

  static getSingleton(host) {
    if (FacebookApiService.instance) {
      return FacebookApiService.instance;
    }

    FacebookApiService.instance = new FacebookApiService(host);
    return FacebookApiService.instance;
  }
  /**
   * Retrieves your facebook user pages your user has access to
   */


  async pages() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/user/pages"));
    const pages = res.body;
    console.debug("[services:FacebookApiService] pages", pages);
    return pages;
  }

  async posts() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/posts/user"));
    const posts = res.body;
    console.debug("[services:FacebookApiService] posts", posts);
    return posts;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/index.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify-tda/src/services/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* reexport safe */ _base_service_js__WEBPACK_IMPORTED_MODULE_0__.BaseApiService; },
/* harmony export */   "FacebookApiService": function() { return /* reexport safe */ _facebook_api_service_js__WEBPACK_IMPORTED_MODULE_1__.FacebookApiService; },
/* harmony export */   "InstagramApiService": function() { return /* reexport safe */ _instagram_api_service_js__WEBPACK_IMPORTED_MODULE_2__.InstagramApiService; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _locales_service_js__WEBPACK_IMPORTED_MODULE_3__.LocalesService; },
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _module_service_js__WEBPACK_IMPORTED_MODULE_4__.ModuleService; },
/* harmony export */   "ShopifyApiArticleService": function() { return /* reexport safe */ _shopify_api_article_service_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiArticleService; },
/* harmony export */   "ShopifyApiBlogsService": function() { return /* reexport safe */ _shopify_api_blog_service_js__WEBPACK_IMPORTED_MODULE_6__.ShopifyApiBlogsService; },
/* harmony export */   "ShopifyApiProductService": function() { return /* reexport safe */ _shopify_api_product_service_js__WEBPACK_IMPORTED_MODULE_7__.ShopifyApiProductService; },
/* harmony export */   "ShopifyApiThemesService": function() { return /* reexport safe */ _shopify_api_theme_service_js__WEBPACK_IMPORTED_MODULE_8__.ShopifyApiThemesService; }
/* harmony export */ });
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");
/* harmony import */ var _facebook_api_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./facebook-api.service.js */ "../../packages/shopify-tda/src/services/facebook-api.service.ts");
/* harmony import */ var _instagram_api_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instagram-api.service.js */ "../../packages/shopify-tda/src/services/instagram-api.service.ts");
/* harmony import */ var _locales_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales.service.js */ "../../packages/shopify-tda/src/services/locales.service.ts");
/* harmony import */ var _module_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./module.service.js */ "../../packages/shopify-tda/src/services/module.service.ts");
/* harmony import */ var _shopify_api_article_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify-api-article.service.js */ "../../packages/shopify-tda/src/services/shopify-api-article.service.ts");
/* harmony import */ var _shopify_api_blog_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shopify-api-blog.service.js */ "../../packages/shopify-tda/src/services/shopify-api-blog.service.ts");
/* harmony import */ var _shopify_api_product_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shopify-api-product.service.js */ "../../packages/shopify-tda/src/services/shopify-api-product.service.ts");
/* harmony import */ var _shopify_api_theme_service_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shopify-api-theme.service.js */ "../../packages/shopify-tda/src/services/shopify-api-theme.service.ts");










/***/ }),

/***/ "../../packages/shopify-tda/src/services/instagram-api.service.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/instagram-api.service.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstagramApiService": function() { return /* binding */ InstagramApiService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class InstagramApiService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/instagram/api";
  }

  static getSingleton(host) {
    if (InstagramApiService.instance) {
      return InstagramApiService.instance;
    }

    InstagramApiService.instance = new InstagramApiService(host);
    return InstagramApiService.instance;
  }

  async media(instagramBusinessAccountID) {
    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "caption,comments_count,is_comment_enabled,like_count,media_type,media_url,permalink,timestamp,children{media_type,media_url}";
    const url = "".concat(this.baseUrl, "/media/").concat(instagramBusinessAccountID);
    const data = {
      fields,
      limit
    };

    if (window.Shopify.shop) {
      data.shop = window.Shopify.shop;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url, data);
    return res.body;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/locales.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/locales.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* binding */ LocalesService; }
/* harmony export */ });
/* harmony import */ var _ribajs_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/i18n */ "../../packages/i18n/src/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/shopify-tda/src/constants/index.ts");


class LocalesService extends _ribajs_i18n__WEBPACK_IMPORTED_MODULE_0__.LocalesRestService {
  static getInstance() {
    return this.instance;
  }

  constructor() {
    let baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.BASE_HOST_URL;
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let url = "".concat(baseUrl, "/shopify/api/themes/").concat(window.Shopify.theme.id, "/locales");

    if (window.Shopify.shop) {
      url += "?shop=".concat(window.Shopify.shop);
    }

    super(url, doNotTranslateDefaultLanguage, showMissingTranslation);

    if (LocalesService.instance) {
      return LocalesService.instance;
    }

    LocalesService.instance = this;
  }

  static getSingleton() {
    let baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.BASE_HOST_URL;
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (LocalesService.instance) {
      return LocalesService.instance;
    }

    LocalesService.instance = new LocalesService(baseUrl, doNotTranslateDefaultLanguage, showMissingTranslation);
    return LocalesService.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/module.service.ts":
/*!*****************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/module.service.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* binding */ ModuleService; }
/* harmony export */ });
class ModuleService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ModuleService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ModuleService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-article.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-article.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiArticleService": function() { return /* binding */ ShopifyApiArticleService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiArticleService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiArticleService.instance) {
      return ShopifyApiArticleService.instance;
    }

    ShopifyApiArticleService.instance = new ShopifyApiArticleService(host);
    return ShopifyApiArticleService.instance;
  }
  /**
   * List articles
   * @param blogId
   */


  async list(blogId) {
    return _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/").concat(blogId, "/articles")).then(res => {
      console.debug("[ShopifyApiArticleService] articles", res.body);
      return res.body;
    });
  }
  /**
   * Get article
   * @param blogId
   * @param articleId
   */


  async get(blogId, articleId) {
    return _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/").concat(blogId, "/articles/").concat(articleId)).then(res => {
      console.debug("[ShopifyApiArticleService] get article", res);
      return res.body;
    });
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-blog.service.ts":
/*!***************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-blog.service.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiBlogsService": function() { return /* binding */ ShopifyApiBlogsService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiBlogsService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiBlogsService.instance) {
      return ShopifyApiBlogsService.instance;
    }

    ShopifyApiBlogsService.instance = new ShopifyApiBlogsService(host);
    return ShopifyApiBlogsService.instance;
  }
  /**
   * List blogs
   */


  async list() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl));
    const blogs = res.body;
    console.debug("[ShopifyApiBlogsService] blogs", blogs);
    return blogs;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-product.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-product.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiProductService": function() { return /* binding */ ShopifyApiProductService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _dependencies_socket_io_client_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dependencies/socket-io-client.js */ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");





class ShopifyApiProductService extends _base_service_js__WEBPACK_IMPORTED_MODULE_4__.BaseApiService {
  constructor(host) {
    var _this$socket, _this$socket2, _this$socket3;

    super(host);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("shopify-api-product-service"));

    this.on = this.events.on.bind(this.events);
    this.once = this.events.once.bind(this.events);
    this.baseUrl = "".concat(this.host, "/shopify/api/products");
    console.debug("[ShopifyApiProductService] constructor");
    this.socket = (0,_dependencies_socket_io_client_js__WEBPACK_IMPORTED_MODULE_3__.io)({
      path: "/socket.io/shopify/api/products",
      transports: ["websocket", "polling"]
    });
    (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.on("connect", () => {
      console.debug("[ShopifyApiProductService] connect");
      this.events.trigger("connect");
    });
    (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.on("exception", data => {
      console.error("exception", data);
      this.events.trigger("exception", data);
    });
    (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.on("all", product => {
      console.debug("[ShopifyApiProductService] all", product);
      this.events.trigger("all", product);
    });
  }

  static getSingleton(host) {
    if (ShopifyApiProductService.instance) {
      return ShopifyApiProductService.instance;
    }

    ShopifyApiProductService.instance = new ShopifyApiProductService(host);
    return ShopifyApiProductService.instance;
  }
  /**
   * Retrieves a list of products directly from shopify.
   * @param limit
   */


  async list(limit) {
    let url = "".concat(this.baseUrl);

    if (limit) {
      url += "?limit=" + limit;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON(url);
    console.debug("[ShopifyApiProductService] products", res.body);
    return res.body;
  }

  async all() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.socket) {
      this.socket.emit("all", options);
    }
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-theme.service.ts":
/*!****************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-theme.service.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiThemesService": function() { return /* binding */ ShopifyApiThemesService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiThemesService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiThemesService.instance) {
      return ShopifyApiThemesService.instance;
    }

    ShopifyApiThemesService.instance = new ShopifyApiThemesService(host);
    return ShopifyApiThemesService.instance;
  }
  /**
   * List themes
   */


  async list() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("/shopify/api/themes");
    const themes = res.body;
    console.debug("[ShopifyApiThemesService] themes", themes);
    return themes;
  }

  async locales(id, propertyPath) {
    let url = "/shopify/api/themes/".concat(id, "/locales");

    if (propertyPath) {
      url += "/" + propertyPath;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url);
    const locales = res.body;
    console.debug("[ShopifyApiThemesService] locales", locales);
    return locales;
  }

  async assets(id, key) {
    let url = "/shopify/api/themes/".concat(id, "/assets");

    if (key) {
      url += "/" + key;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url);
    const assets = res.body;
    console.debug("[ShopifyApiThemesService] assets", assets);
    return assets;
  }

  async assetLocalesList(id) {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("/shopify/api/themes/".concat(id, "/locales/list"));
    const assets = res.body;
    console.debug("[ShopifyApiThemesService] assets", assets);
    return assets;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/shopify-tda.module.ts":
/*!************************************************************!*\
  !*** ../../packages/shopify-tda/src/shopify-tda.module.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shopifyTDAModule": function() { return /* binding */ shopifyTDAModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify-tda/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify-tda/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify-tda/src/services/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify-tda/src/components/index.ts");




const shopifyTDAModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_3__,

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ModuleService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/shopify/src/binders/index.ts":
/*!***************************************************!*\
  !*** ../../packages/shopify/src/binders/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartCountBinder": function() { return /* reexport safe */ _shopify_cart_count_binder_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyCartCountBinder; },
/* harmony export */   "ShopifyImgBinder": function() { return /* reexport safe */ _shopify_img_binder_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyImgBinder; }
/* harmony export */ });
/* harmony import */ var _shopify_cart_count_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shopify-cart-count.binder.js */ "../../packages/shopify/src/binders/shopify-cart-count.binder.ts");
/* harmony import */ var _shopify_img_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shopify-img.binder.js */ "../../packages/shopify/src/binders/shopify-img.binder.ts");



/***/ }),

/***/ "../../packages/shopify/src/binders/shopify-cart-count.binder.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify/src/binders/shopify-cart-count.binder.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartCountBinder": function() { return /* binding */ ShopifyCartCountBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/index.js */ "../../packages/shopify/src/services/index.ts");




/**
 * Sets the shopify items count
 */
class ShopifyCartCountBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onCartRequestComplete", this._onCartRequestComplete.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onCartRequestChanged", this._onCartRequestChanged.bind(this));
  }

  _onCartRequestComplete(cart) {
    this.el.textContent = String(cart.item_count);
  }

  _onCartRequestChanged(cart) {
    this.el.textContent = String(cart.item_count);
  }

  routine() {//
  }

  bind() {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:changed", this.onCartRequestChanged);
  }

  unbind() {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:changed", this.onCartRequestChanged);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartCountBinder, "key", "shopify-cart-count");

/***/ }),

/***/ "../../packages/shopify/src/binders/shopify-img.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/shopify/src/binders/shopify-img.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyImgBinder": function() { return /* binding */ ShopifyImgBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../formatters/img-url.formatter.js */ "../../packages/shopify/src/formatters/img-url.formatter.ts");




const PX_OFFSET = 10;
const OVERWRITE_ORIGINAL_SRC = true;
/**
 * shopify-img
 * Loads an shopify image with the exact size for the current `img` element
 * without the need to get the right size manually over the `img_url` filter / formatter.
 * The image source path is set by the `srcset` and `sizes` attributes to make them responsive.
 */

class ShopifyImgBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "oldImageWidth", (PX_OFFSET + 1) * -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._onResize.bind(this)));
  }

  setSrcset(width) {
    // Max width
    if (width > 5760) {
      width = 5760;
    }

    let currentSrcset = this.el.srcset;
    let currentSizes = this.el.sizes;

    if (!_formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read) {
      throw new Error("Shopify imgUrlFormatter read method is missing!");
    }

    const vw = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getViewportDimensions)().w;
    const filterScale = Math.round(window.devicePixelRatio || 1);
    const filterSize = width + "x";
    const newSrc = _formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read(this.initialSrc, filterSize, filterScale, undefined, undefined, this.el);

    if (typeof currentSrcset === "string" && currentSrcset.length > 0) {
      currentSrcset = currentSrcset + ", ";
    } else {
      currentSrcset = "";
    }

    if (typeof currentSizes === "string" && currentSizes.length > 0) {
      currentSizes = currentSizes + ", ";
    } else {
      currentSizes = "";
    }

    const newSrcset = "".concat(currentSrcset).concat(newSrc, " ").concat(width, "w");
    const newSizes = "".concat(currentSizes, " (width: ").concat(vw, "px) ").concat(width, "px");
    this.el.srcset = newSrcset;
    this.el.sizes = newSizes;

    if (OVERWRITE_ORIGINAL_SRC) {
      this.el.src = newSrc;
    }
  }

  _onResize() {
    const currentImageWidth = this.el.offsetWidth;
    const currentSrcset = this.el.srcset;

    if (this.oldImageWidth + PX_OFFSET < currentImageWidth && currentImageWidth > 0 && !(currentSrcset.indexOf("".concat(currentImageWidth, "w")) !== -1)) {
      this.setSrcset(currentImageWidth);
      this.oldImageWidth = currentImageWidth;
    }
  }

  bind(el) {
    this.initialSrc = el.src;

    if (window.ResizeObserver) {
      this.resizeObserver = new ResizeObserver(entries => {
        entries.forEach(() => {
          this.onResize();
        });
      });
      this.resizeObserver.observe(el);
    } else {
      window.addEventListener("resize", this.onResize);
    }
  }

  unbind(el) {
    window.removeEventListener("resize", this.onResize);

    if (this.resizeObserver && this.resizeObserver.unobserve) {
      this.resizeObserver.unobserve(el);
    }
  }

  routine(el, src) {
    this.el = el;

    if (!_formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read) {
      throw new Error("Shopify imgUrlFormatter read method is missing!");
    }

    if (src) {
      this._onResize();

      setTimeout(this.onResize, 200); // Set src attribute if it is not set statically

      if (!this.initialSrc || typeof this.initialSrc !== "string" || this.initialSrc.length <= 0) {
        this.initialSrc = src;
        el.src = src;
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyImgBinder, "key", "shopify-img");

/***/ }),

/***/ "../../packages/shopify/src/components/addresses-form/addresses-form.component.ts":
/*!****************************************************************************************!*\
  !*** ../../packages/shopify/src/components/addresses-form/addresses-form.component.ts ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyAddressesComponent": function() { return /* binding */ ShopifyAddressesComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _addresses_form_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addresses-form.component.html */ "../../packages/shopify/src/components/addresses-form/addresses-form.component.html");



 // TODO move to general validation component class we can extend from

class ShopifyAddressesComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "editAddressForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "createAddressForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      createAddress: {
        validation: {
          valid: false
        }
      },
      showFormId: "",
      editAddress: {},
      edit: this.edit,
      create: this.create,
      delete: this.delete
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyAddressesComponent.observedAttributes);
  }

  edit(id, event) {
    const form = this.querySelector("form[action=\"/account/addresses/".concat(id, "]"));

    if (!form) {
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(form, this.scope.editAddress[id].validation);

    if (this.scope.editAddress[id].validation.valid) {
      form.submit();
    }
  }
  /**
   * Submit an new address
   */


  create(event) {
    if (!this.createAddressForm) {
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.createAddressForm, this.scope.createAddress.validation);

    if (this.scope.createAddress.validation.valid) {
      this.createAddressForm.submit();
    }
  } // https://help.shopify.com/en/api/reference/customers/customer_address
  // /account/addresses/{id}


  async delete(id) {
    try {
      await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService["delete"]("/account/addresses/".concat(id), {}, "json");
      location.reload();
    } catch (error) {
      console.error("delete error", error);
      location.reload();
    }
  }

  initValidation() {
    this.editAddressForm = this.querySelector('form[action^="/account/addresses/"]');
    this.editAddressForm.attr("novalidate", "");
    this.editAddressForm.addClass("needs-validation");
    this.createAddressForm = this.querySelector('form[action="/account/addresses"]');
    this.createAddressForm.attr("novalidate", "");
    this.createAddressForm.addClass("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    this.initValidation();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _addresses_form_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyAddressesComponent, "tagName", "shopify-addresses-form");

/***/ }),

/***/ "../../packages/shopify/src/components/cart-button/cart-button.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-button/cart-button.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* binding */ ShopifyCartButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _cart_button_component_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cart-button.component.html */ "../../packages/shopify/src/components/cart-button/cart-button.component.html");







class ShopifyCartButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  set cart(cart) {
    this.scope.cartItemCount = cart.item_count;
    this.scope.startAddAnimation = true;
    setTimeout(() => {
      this.scope.startAddAnimation = false;
    }, 3000);
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      cartItemCount: 0,
      toggle: this.toggle,
      pending: false,
      startAddAnimation: false
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartButtonComponent.observedAttributes);
  }

  toggle(event) {
    event.preventDefault();
    event.stopPropagation();

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(ShopifyCartButtonComponent.cartUrl)) {
      window.history.back();
    } else {
      if (ShopifyCartButtonComponent.cartUrl) {
        const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

        if (!pjax) {
          window.location.href = ShopifyCartButtonComponent.cartUrl;
        } else {
          pjax.goTo(ShopifyCartButtonComponent.cartUrl, false);
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();
    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", () => {
      this.scope.pending = true;
    });
    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", cart => {
      if (cart) {
        this.cart = cart;
      }

      this.scope.pending = false;
    });
  }

  async afterBind() {
    await super.afterBind();
    return _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.get().catch(error => {
      console.error("[ShopifyCartButtonComponent]", error);
    });
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_button_component_html__WEBPACK_IMPORTED_MODULE_6__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartButtonComponent, "tagName", "shopify-cart-button");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartButtonComponent, "cartUrl", "/cart");

/***/ }),

/***/ "../../packages/shopify/src/components/cart-item/cart-item.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-item/cart-item.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartItemComponent": function() { return /* binding */ ShopifyCartItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _cart_item_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cart-item.component.html */ "../../packages/shopify/src/components/cart-item/cart-item.component.html");





class ShopifyCartItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "title", "price", "line-price", "line-number", "quantity", "sku", "grams", "vendor", "properties", "gift-card", "url", "image", "handle", "requires-shipping", "product-title", "product-description", "product-type", "product-id", "variant-title", "variant-options", "variant-id", "key"];
  }

  requiredAttributes() {
    return ["id", "variantId", "quantity"];
  }

  getScopeDefaults() {
    return {
      id: 0,
      productId: 0,
      variantId: 0,
      properties: [],
      quantity: 0,
      remove: this.remove,
      increase: this.increase,
      decrease: this.decrease,
      onInputQuantityChanged: this.onInputQuantityChanged,
      pending: false
    };
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getScopeDefaults());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartItemComponent.observedAttributes);
  }

  remove() {
    this.debug("decrease", this.scope.variantId);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, 0).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a quantity increase + button in the template
   */


  increase() {
    this.debug("increase", this.scope.quantity);
    this.scope.quantity++;
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a quantity decrease - button in the template
   */


  decrease() {
    this.debug("decrease", this.scope.quantity);
    this.scope.quantity--;

    if (this.scope.quantity < 0) {
      this.scope.quantity = 0;
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a changeable quantity input field
   * @example
   * ```html
   *  <input type="number" rv-on-change="onInputQuantityChanged" rv-value="quantity" />
   * ```
   */


  onInputQuantityChanged() {
    this.debug("onInputQuantityChanged");
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  onCartUpdate(cart) {
    const item = this.getItemFromCart(cart);

    if (!item) {
      this.debug("Item not found, probably item was removed.");
      super.remove(); // Remove element

      return;
    }

    this.debug("update item from cart"); // this.scope.id = item.id;

    this.scope.title = item.title;
    this.scope.price = item.price;
    this.scope.linePrice = item.line_price;
    this.scope.lineNumber = item.line_number;
    this.scope.quantity = item.quantity;
    this.scope.sku = item.sku;
    this.scope.grams = item.grams;
    this.scope.vendor = item.vendor;
    this.scope.properties = item.properties;
    this.scope.giftCard = item.gift_card;
    this.scope.url = item.url;
    this.scope.image = item.image;
    this.scope.handle = item.handle;
    this.scope.requiresShipping = item.requires_shipping;
    this.scope.productTitle = item.product_title;
    this.scope.productDescription = item.product_description;
    this.scope.productType = item.product_type;
    this.scope.productId = item.product_id;
    this.scope.variantTitle = item.variant_title;
    this.scope.variantOptions = item.variant_options; // this.scope.variantId = item.variant_id;

    this.scope.key = item.key;

    if (this.scope.quantity === 0) {
      super.remove(); // Remove element

      return;
    }
  }

  getItemFromCart(cart) {
    for (const item of cart.items) {
      // Compare key
      if (item.key && this.scope.key) {
        if (item.key === this.scope.key) {
          return item;
        }
      } else {
        // Compare id and variantId
        if (item.id === this.scope.id && item.variant_id === this.scope.variantId) {
          return item;
        }
      }
    }

    return null;
  }

  async beforeBind() {
    await super.beforeBind(); // const cart = await ShopifyCartService.get();
  }

  onCartRequestStart() {
    this.scope.pending = true;
  }

  onCartRequestComplete(cart) {
    this.debug("ShopifyCart:request:complete", cart);
    this.onCartUpdate(cart);
    this.scope.pending = false;
    return cart;
  }

  async afterBind() {
    this.debug("afterBind", this.scope);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete, this);
    const cart = await _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.get();
    this.onCartUpdate(cart);
    await super.afterBind();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_item_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartItemComponent, "tagName", "shopify-cart-item");

/***/ }),

/***/ "../../packages/shopify/src/components/cart/cart.component.ts":
/*!********************************************************************!*\
  !*** ../../packages/shopify/src/components/cart/cart.component.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartComponent": function() { return /* binding */ ShopifyCartComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _cart_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cart.component.html */ "../../packages/shopify/src/components/cart/cart.component.html");





class ShopifyCartComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["shipping-address", "estimate-shipping-rate"];
  }

  requiredAttributes() {
    return [];
  }

  getScopeDefaults() {
    return {
      cart: _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.cart,
      shippingAddress: null,
      estimateShippingRate: false,
      shippingRates: [],
      removeItem: this.removeItem,
      increaseItem: this.increaseItem,
      decreaseItem: this.decreaseItem,
      getItem: this.getItem,
      onItemQuantityChanged: this.onItemQuantityChanged,
      pending: false
    };
  }

  set cart(cart) {
    // TODO check if cart values are changed
    this.scope.cart = cart;

    if (this.scope.shippingAddress && this.scope.estimateShippingRate) {
      _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.getShippingRates(this.scope.shippingAddress, true, {
        triggerOnChange: false,
        triggerOnComplete: false,
        triggerOnStart: false
      }).then(shippingRates => {
        this.scope.shippingRates = shippingRates;
      });
    }
  }

  get cart() {
    return this.scope.cart || null;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getScopeDefaults());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartComponent.observedAttributes);
  }

  removeItem(lineItem) {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, 0).then(cart => {
      // this.cart = cart;
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  increaseItem(lineItem) {
    lineItem.quantity++;
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      // this.cart = cart;
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  decreaseItem(lineItem) {
    lineItem.quantity--;

    if (lineItem.quantity < 0) {
      lineItem.quantity = 0;
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a changeable quantity input field
   * @example
   * ```html
   *  <input type="number" rv-on-change="onItemQuantityChanged" rv-value="quantity" />
   * ```
   */


  onItemQuantityChanged(lineItem, event, scope, htmlEl) {
    if (!htmlEl) {
      console.warn("Input element not found");
      return;
    }

    const newValue = Number((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getInputValue)(htmlEl));

    if (newValue === lineItem.quantity) {
      return;
    }

    lineItem.quantity = newValue;
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Get line item by id
   * @param id
   */


  getItem(id) {
    var _this$scope$cart, _this$scope$cart2;

    id = Number(id);
    const item = ((_this$scope$cart = this.scope.cart) === null || _this$scope$cart === void 0 ? void 0 : _this$scope$cart.items.find(item => Number(item.id) === id)) || null;
    this.debug("getItem", id, item, (_this$scope$cart2 = this.scope.cart) === null || _this$scope$cart2 === void 0 ? void 0 : _this$scope$cart2.items);
    return item;
  }

  onCartRequestStart() {
    this.scope.pending = true;
  }

  onCartRequestComplete(cart) {
    if (cart) {
      this.cart = cart;
    }

    this.scope.pending = false;
  }

  async beforeBind() {
    await super.beforeBind();
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  async afterBind() {
    this.debug("afterBind", this.scope);

    if (!this.cart) {
      this.cart = await _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.get();
    }

    await super.afterBind();
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartComponent, "tagName", "shopify-cart");

/***/ }),

/***/ "../../packages/shopify/src/components/comments-form/comments-form.component.ts":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/comments-form/comments-form.component.ts ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* binding */ ShopifyCommentsFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _comments_form_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comments-form.component.html */ "../../packages/shopify/src/components/comments-form/comments-form.component.html");




class ShopifyCommentsFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "newCommentForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        customer: {
          email: "",
          password: ""
        }
      },
      loginCustomer: {
        validation: {
          valid: false
        }
      },
      createCustomer: {
        validation: {
          valid: false
        }
      },
      recoverCustomer: {
        validation: {
          valid: false
        }
      },
      post: this.post
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCommentsFormComponent.observedAttributes);
  }
  /**
   * Post comment
   */


  post(event) {
    if (!this.newCommentForm) {
      console.error("No comment form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.newCommentForm, this.scope.loginCustomer.validation);

    if (this.scope.loginCustomer.validation.valid) {
      this.newCommentForm.submit();
    }
  }

  initValidation() {
    this.newCommentForm = this.querySelector("#comment_form");
    this.newCommentForm.setAttribute("novalidate", "");
    this.newCommentForm.classList.add("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    this.initValidation();
    await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _comments_form_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCommentsFormComponent, "tagName", "shopify-comments-form");

/***/ }),

/***/ "../../packages/shopify/src/components/contact-form/contact-form.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/contact-form/contact-form.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyContactFormComponent": function() { return /* binding */ ShopifyContactFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _contact_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contact-form.component.html */ "../../packages/shopify/src/components/contact-form/contact-form.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




 // TODO move to general validation component class we can extend from

class ShopifyContactFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        fields: {
          firstName: "",
          lastName: "",
          fullName: "",
          company: "",
          phone: "",
          email: "",
          message: ""
        },
        valid: false,
        error: undefined
      },

      /** send form function */
      send: this.send,

      /** select all text function */
      selectAll: this.selectAll
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyContactFormComponent.observedAttributes);
  }
  /**
   * Send the contact form using a form submit request with best shopify form support
   */


  send(event) {
    for (const key in this.scope.form.fields) {
      if (this.scope.form.fields[key]) {
        this.scope.form.fields[key] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.stripHtml)(this.scope.form.fields[key]);
      }
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();

    if (!this.form) {
      return false;
    }

    this.validate(this.form, this.scope.form);

    if (this.scope.form.valid) {
      this.form.submit();
    }
  }

  selectAll(event, scope, eventEl) {
    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.selectAll)(eventEl);
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    validationScope.error = form.validationMessage;
    form.classList.add("was-validated");
  }

  async beforeBind() {
    this.form = this.getElementsByTagName("form")[0]; // For custom style form validation, see https://getbootstrap.com/docs/4.1/components/forms/#custom-styles

    this.form.classList.add("needs-validation");
    this.form.setAttribute("novalidate", "");
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _contact_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyContactFormComponent, "tagName", "shopify-contact-form");

/***/ }),

/***/ "../../packages/shopify/src/components/debug-bar/debug-bar.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/debug-bar/debug-bar.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* binding */ ShopifyDebugBarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _debug_bar_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./debug-bar.component.html */ "../../packages/shopify/src/components/debug-bar/debug-bar.component.html");




class ShopifyDebugBarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["theme-name"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      hasPreviewBar: false,
      hasAdminBar: false,
      toggleBar: this.toggleBar,
      hide: this.hide,
      hidden: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "previewBar", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adminBar", null);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyDebugBarComponent.observedAttributes);
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    this.debug("attributeChangedCallback", name, oldValue, newValue, namespace); // injects the changed attributes to scope

    super.attributeChangedCallback(name, oldValue, newValue, namespace);
  }

  hide() {
    this.scope.hidden = !this.scope.hidden;
  }

  toggleBar() {
    let forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (this.previewBar) {
      if (forceHide === true || (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.elementIsVisible)(this.previewBar)) {
        // this.debug('hide previewbar');
        this.previewBar.setAttribute("hidden", ""); // this.$previewBar.hide();
      } else {
        // this.debug('show previewbar');
        this.previewBar.removeAttribute("hidden"); // this.$previewBar.show();
      }
    }

    if (this.adminBar) {
      if (forceHide === true || (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.elementIsVisible)(this.adminBar)) {
        // this.debug('hide adminbar');
        this.adminBar.setAttribute("hidden", ""); // this.$adminBar.hide();
      } else {
        // this.debug('show adminbar');
        this.adminBar.removeAttribute("hidden"); // this.$adminBar.show();
      }
    }
  }

  async beforeBind() {
    // this.debug('beforeBind');
    this.previewBar = document.getElementById("preview-bar-iframe");
    this.adminBar = document.getElementById("admin-bar-iframe");

    if (this.previewBar) {
      this.scope.hasPreviewBar = true;
      this.toggleBar(true);
    } else {
      this.previewBar = null;
      this.scope.hasPreviewBar = false;
    }

    if (this.adminBar) {
      this.scope.hasAdminBar = true;
      this.toggleBar(true);
    } else {
      this.adminBar = null;
      this.scope.hasAdminBar = false;
    }
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _debug_bar_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyDebugBarComponent, "tagName", "shopify-debug-bar");

/***/ }),

/***/ "../../packages/shopify/src/components/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/components/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyAddressesComponent": function() { return /* reexport safe */ _addresses_form_addresses_form_component_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyAddressesComponent; },
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* reexport safe */ _cart_button_cart_button_component_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartButtonComponent; },
/* harmony export */   "ShopifyCartComponent": function() { return /* reexport safe */ _cart_cart_component_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyCartComponent; },
/* harmony export */   "ShopifyCartItemComponent": function() { return /* reexport safe */ _cart_item_cart_item_component_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartItemComponent; },
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* reexport safe */ _comments_form_comments_form_component_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyCommentsFormComponent; },
/* harmony export */   "ShopifyContactFormComponent": function() { return /* reexport safe */ _contact_form_contact_form_component_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyContactFormComponent; },
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* reexport safe */ _debug_bar_debug_bar_component_js__WEBPACK_IMPORTED_MODULE_6__.ShopifyDebugBarComponent; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _linklist_linklist_component_js__WEBPACK_IMPORTED_MODULE_7__.ShopifyLinklistComponent; },
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* reexport safe */ _login_form_login_form_component_js__WEBPACK_IMPORTED_MODULE_8__.ShopifyLoginFormComponent; },
/* harmony export */   "ShopifyProductComponent": function() { return /* reexport safe */ _product_product_component_js__WEBPACK_IMPORTED_MODULE_9__.ShopifyProductComponent; },
/* harmony export */   "ShopifyProductItemComponent": function() { return /* reexport safe */ _product_item_product_item_component_js__WEBPACK_IMPORTED_MODULE_10__.ShopifyProductItemComponent; },
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* reexport safe */ _product_scrollbar_product_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_11__.ShopifyProductScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _addresses_form_addresses_form_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addresses-form/addresses-form.component.js */ "../../packages/shopify/src/components/addresses-form/addresses-form.component.ts");
/* harmony import */ var _cart_cart_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cart/cart.component.js */ "../../packages/shopify/src/components/cart/cart.component.ts");
/* harmony import */ var _cart_button_cart_button_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cart-button/cart-button.component.js */ "../../packages/shopify/src/components/cart-button/cart-button.component.ts");
/* harmony import */ var _cart_item_cart_item_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cart-item/cart-item.component.js */ "../../packages/shopify/src/components/cart-item/cart-item.component.ts");
/* harmony import */ var _comments_form_comments_form_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comments-form/comments-form.component.js */ "../../packages/shopify/src/components/comments-form/comments-form.component.ts");
/* harmony import */ var _contact_form_contact_form_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./contact-form/contact-form.component.js */ "../../packages/shopify/src/components/contact-form/contact-form.component.ts");
/* harmony import */ var _debug_bar_debug_bar_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./debug-bar/debug-bar.component.js */ "../../packages/shopify/src/components/debug-bar/debug-bar.component.ts");
/* harmony import */ var _linklist_linklist_component_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linklist/linklist.component.js */ "../../packages/shopify/src/components/linklist/linklist.component.ts");
/* harmony import */ var _login_form_login_form_component_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./login-form/login-form.component.js */ "../../packages/shopify/src/components/login-form/login-form.component.ts");
/* harmony import */ var _product_product_component_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./product/product.component.js */ "../../packages/shopify/src/components/product/product.component.ts");
/* harmony import */ var _product_item_product_item_component_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./product-item/product-item.component.js */ "../../packages/shopify/src/components/product-item/product-item.component.ts");
/* harmony import */ var _product_scrollbar_product_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./product-scrollbar/product-scrollbar.component.js */ "../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts");
// export * from './shopify-section.component';













/***/ }),

/***/ "../../packages/shopify/src/components/linklist/linklist.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/shopify/src/components/linklist/linklist.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLinklistComponent": function() { return /* binding */ ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _linklist_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./linklist.component.html */ "../../packages/shopify/src/components/linklist/linklist.component.html");






/**
 * shopify-filter
 */
class ShopifyLinklistComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["linklist", "handle", "name", "pills", "vertical", "collapse-on-new-page", "show-on-child-url"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "mainDispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // properties
      pills: false,
      vertical: false,
      collapseOnNewPage: true,
      showOnActiveChild: true,
      // methods
      toggle: this.toggle,
      collapse: this.collapse,
      collapseAll: this.collapseAll,
      show: this.show,
      showAll: this.showAll
    });

    this.mainDispatcher.on("newPageReady", this.onNewPageReady, this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyLinklistComponent.observedAttributes);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.mainDispatcher.off("newPageReady", this.onNewPageReady, this);
  }

  toggle(link) {
    link.collapsed = !link.collapsed;
  }

  collapse(link) {
    link.collapsed = true;
  }

  show(link) {
    link.collapsed = false;
  }

  showAll() {
    if (this.scope.linklist) {
      this.showAllByLinks(this.scope.linklist.links);
    }
  }

  collapseAll() {
    if (this.scope.linklist && this.scope.linklist.links) {
      this.collapseAllByLinks(this.scope.linklist.links);
    }
  }
  /**
   * Show (uncollapse) link by child url
   */


  showByChildUrl(url) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of this.scope.linklist.links) {
        for (const sublink of link.links) {
          if (sublink.url === url) {
            this.show(link);
            break;
          }

          for (const subsublink of sublink.links) {
            if (subsublink.url === url) {
              this.show(link);
              this.show(sublink);
              break;
            }
          }
        }
      }
    }
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    // injects the changed attributes to scope
    super.attributeChangedCallback(name, oldValue, newValue, namespace); // set linklist by handle

    if (name === "handle" || name === "name") {
      if (window.model && window.model.system && window.model.system.linklists && window.model.system.linklists[newValue]) {
        this.scope.linklist = window.model.system.linklists[newValue];
      } else {
        throw new Error("Linklist not found! \nNote: The linklist must be available under \"window.model.system.linklists['".concat(newValue, "']\" to set it using his handle."));
      }
    }

    if (name === "linklist") {
      if (typeof newValue === "object") {
        // if object is in form of "main-menu": {...}
        if (Object.keys(newValue).length === 1) {
          newValue = newValue[Object.keys(newValue)[0]];
        }
      }

      this.scope.linklist = newValue;
    }
  }

  collapseAllByLinks(links) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of links) {
        if (link.collapseable) {
          link.collapsed = true;
        }

        if (link.links) {
          this.collapseAllByLinks(link.links);
        }
      }
    }
  }

  showAllByLinks(links) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of links) {
        if (link.collapseable) {
          link.collapsed = false;
        }

        if (link.links) {
          this.collapseAllByLinks(link.links);
        }
      }
    }
  }

  onNewPageReady(viewId, currentStatus) {
    const url = currentStatus.url;

    if (this.scope.collapseOnNewPage) {
      this.collapseAll();
    }

    if (this.scope.showOnActiveChild) {
      this.showByChildUrl(url);
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.linklist && this.scope.linklist.links) {
      this.transformLinks(this.scope.linklist.links);

      if (this.scope.collapseOnNewPage) {
        this.collapseAll();
      }
    }

    if (this.scope.showOnActiveChild) {
      this.showByChildUrl(window.location.pathname);
    }
  }
  /**
   * Checks if link are collapseable and set initializes corresponding attributes
   */


  transformLinks(links) {
    for (const link of links) {
      if (link.url === "#collapse") {
        link.collapseable = true;
        link.collapsed = true;
      } else {
        link.collapseable = false;
        link.collapsed = false;
      }

      if (link.links) {
        this.transformLinks(link.links);
      }
    }
  }

  requiredAttributes() {
    return ["linklist"];
  }
  /**
   * Only set the component template if there no childs already
   */


  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _linklist_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLinklistComponent, "tagName", "shopify-linklist");

/***/ }),

/***/ "../../packages/shopify/src/components/login-form/login-form.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/login-form/login-form.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* binding */ ShopifyLoginFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _login_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./login-form.component.html */ "../../packages/shopify/src/components/login-form/login-form.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");




class ShopifyLoginFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "loginCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "createCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "recoverCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        customer: {
          email: "",
          password: ""
        }
      },
      loginCustomer: {
        validation: {
          valid: false
        }
      },
      createCustomer: {
        validation: {
          valid: false
        }
      },
      recoverCustomer: {
        validation: {
          valid: false
        }
      },
      login: this.login,
      create: this.create,
      recover: this.recover,
      recoverBack: this.recoverBack
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyLoginFormComponent.observedAttributes);
  }
  /**
   * Login submit using the login form
   */


  login(event) {
    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.loginCustomerForm, this.scope.loginCustomer.validation);

    if (this.scope.loginCustomer.validation.valid) {
      this.loginCustomerForm.submit();
    }
  }
  /**
   * Create an account submit using the login form
   */


  create(event) {
    if (!this.createCustomerForm) {
      console.error("No create form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.createCustomerForm, this.scope.createCustomer.validation);

    if (this.scope.createCustomer.validation.valid) {
      this.createCustomerForm.submit();
    }
  }
  /**
   * Reset password submit using the (hidden) reset form
   * @param event
   */


  recover(event) {
    if (!this.recoverCustomerForm) {
      console.error("No recover form found");
      return false;
    }

    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.recoverCustomerForm, this.scope.recoverCustomer.validation);

    if (this.scope.recoverCustomer.validation.valid) {
      this.recoverCustomerForm.submit();
    } else {
      var _this$loginCustomerFo, _this$recoverCustomer;

      (_this$loginCustomerFo = this.loginCustomerForm.parentNode) === null || _this$loginCustomerFo === void 0 ? void 0 : _this$loginCustomerFo.setAttribute("hidden", "");
      (_this$recoverCustomer = this.recoverCustomerForm.parentNode) === null || _this$recoverCustomer === void 0 ? void 0 : _this$recoverCustomer.removeAttribute("hidden");
    }
  }

  recoverBack(event) {
    var _this$loginCustomerFo2, _this$recoverCustomer2;

    if (!this.recoverCustomerForm) {
      console.error("No recover form found");
      return false;
    }

    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    (_this$loginCustomerFo2 = this.loginCustomerForm.parentNode) === null || _this$loginCustomerFo2 === void 0 ? void 0 : _this$loginCustomerFo2.removeAttribute("hidden");
    (_this$recoverCustomer2 = this.recoverCustomerForm.parentNode) === null || _this$recoverCustomer2 === void 0 ? void 0 : _this$recoverCustomer2.setAttribute("hidden", "");
  }

  initValidation() {
    this.createCustomerForm = this.querySelector('form[action="/account"]');
    this.createCustomerForm.setAttribute("novalidate", "");
    this.createCustomerForm.classList.add("needs-validation");
    this.loginCustomerForm = this.querySelector('form[action="/account/login"]');
    this.loginCustomerForm.setAttribute("novalidate", "");
    this.loginCustomerForm.classList.add("needs-validation");
    this.recoverCustomerForm = this.querySelector('form[action="/account/recover"]');
    this.recoverCustomerForm.setAttribute("novalidate", "");
    this.recoverCustomerForm.classList.add("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    await super.afterBind();
    this.initValidation();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _login_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLoginFormComponent, "tagName", "shopify-login-form");

/***/ }),

/***/ "../../packages/shopify/src/components/product-item/product-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-item/product-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductItemComponent": function() { return /* binding */ ShopifyProductItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _product_item_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./product-item.component.html */ "../../packages/shopify/src/components/product-item/product-item.component.html");






/**
 * TODO minify this, create a general product service instead of extend from ShopifyProductItemComponent
 * or create a product list for all products
 * or just get the attributes we need like the options
 * or render the most with liquid
 */
class ShopifyProductItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  /**
   * handle is the product handle to get the product json object
   * extras are product data which is only available over liquid and not over the product json object
   * product is the product object itself if you want to pass it directly
   */
  static get observedAttributes() {
    return ["handle", "extras", "product"];
  }

  requiredAttributes() {
    return ["handle"];
  }

  set menuPadding(padding) {
    this._menuPadding = padding;
    this.scope.detailMenuPadding = this._menuPadding + "px";
  }
  /**
   * available is only true if the variant is available and the user has clicked on an option
   */


  set available(available) {
    this.scope.available = available && this.optionChosen;
  }

  set showMenu(show) {
    if (show) {
      this.menuPadding = 215;
    } else {
      this.menuPadding = 60;
    }

    this.scope.showDetailMenu = show;
  }

  get showMenu() {
    return this.scope.showDetailMenu;
  }

  set product(product) {
    if (product) {
      this.scope.product = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.prepare(product);
      this.scope.handle = this.scope.product.handle;
      this.scope.colorOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "color") || null;
      this.scope.sizeOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "size") || null; // set the first variant to the selected one

      this.variant = this.scope.product.variants[0];
    }
  }

  get product() {
    return this.scope.product;
  }

  set variant(variant) {
    if (variant === null) {
      return;
    }

    this.scope.variant = variant;

    if (this.scope.variant) {
      this.selectedOptions = this.scope.variant.options.slice();
      this.available = this.scope.variant.available;
      this.activateOptions();
    }
  }

  get variant() {
    return this.scope.variant;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      handle: null,
      product: null,
      variant: null,
      quantity: 1,
      showDetailMenu: false,
      detailMenuPadding: "60px",
      // showAddToCartButton: false,
      chooseOption: this.chooseOption,
      addToCart: this.addToCart,
      toggleDetailMenu: this.toggleDetailMenu,
      decrease: this.decrease,
      increase: this.increase,
      colorOption: null,
      sizeOption: null,

      /**
       * If the variant is available, used to disable the add to cart button
       */
      available: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "selectedOptions", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_menuPadding", 60);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "optionChosen", false);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyProductItemComponent.observedAttributes);
  }

  chooseOption(optionValue, position1, optionName, event) {
    optionValue = optionValue.toString();

    if (!this.scope.product) {
      throw new Error("Product not set!");
    }

    this.selectedOptions[position1 - 1] = optionValue.toString();
    const variant = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getVariantOfOptions(this.scope.product, this.selectedOptions);

    if (variant) {
      // Option chosen -> so enable add to cart button
      this.optionChosen = true;
      this.variant = variant;
    }

    event.stopPropagation();
  }

  addToCart() {
    if (!this.variant) {
      return;
    }

    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.add(this.variant.id, this.scope.quantity).then(response => {
      console.debug("addToCart response", response);
    }).catch(error => {
      console.debug("addToCart error", error);
    });
  }

  toggleDetailMenu() {
    this.showMenu = !this.showMenu;
  }

  increase() {
    this.scope.quantity++;
  }

  decrease() {
    this.scope.quantity--;

    if (this.scope.quantity <= 0) {
      this.scope.quantity = 1;
    }
  }
  /**
   * Workaround because `rv-class-active="isOptionActive | call size"` is not updating if selectedOptions changes
   * @param optionValue
   * @param optionName
   */


  activateOption(optionValue, optionName) {
    var _this$querySelector, _this$querySelector2;

    optionValue = optionValue.toString().replace("#", "");
    (_this$querySelector = this.querySelector(".option-".concat(optionName.toLocaleLowerCase()))) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.classList.remove("active");
    (_this$querySelector2 = this.querySelector(".option-".concat(optionName.toLocaleLowerCase(), "-").concat(optionValue))) === null || _this$querySelector2 === void 0 ? void 0 : _this$querySelector2.classList.add("active");
  }
  /**
   * Activate option by selected options (scope.selectedOptions)
   * This method sets the active class to the options elements
   */


  activateOptions() {
    for (const position0 in this.selectedOptions) {
      if (this.selectedOptions[position0]) {
        const optionValue = this.selectedOptions[position0];

        if (this.scope.product) {
          const optionName = this.scope.product.options[position0].name; // Only activate size if it was clicked by the user

          if (optionName === "size") {
            if (this.optionChosen) {
              this.activateOption(optionValue, optionName);
            }
          } else {
            this.activateOption(optionValue, optionName);
          }
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.handle === null) {
      throw new Error("Product handle not set");
    }

    if (!this.product) {
      this.fetchProduct(this.scope.handle);
    }
  }

  async fetchProduct(handle) {
    const product = await _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.get(handle);

    if (product) {
      this.product = product;
    }

    return product;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "product":
        this.product = newValue;
        break;
    }
  }

  async afterBind() {
    await super.afterBind();
    this.activateOptions();
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _product_item_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductItemComponent, "tagName", "shopify-product-item");

/***/ }),

/***/ "../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts":
/*!**********************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* binding */ ShopifyProductScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");



class ShopifyProductScrollbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onScroll: this.onScroll,
      onProductTap: this.onProductTap,
      onProductMouseenter: this.onProductMouseenter,
      title: ""
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "products", null);
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {
    super.connectedCallback();
    this.products = this.querySelectorAll(".embed-responsive");
    this.init(ShopifyProductScrollbarComponent.observedAttributes);
  }
  /**
   * Just open the product url
   */


  onProductTap(event, scope, eventEl) {
    const url = eventEl.dataset.url;

    if (!url) {
      return;
    }

    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    pjax.goTo(url);
  }
  /**
   * Preload product on mouse over
   */


  onProductMouseenter(event, scope, eventEl) {
    const url = eventEl.dataset.url;
    const prefetch = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Prefetch.getInstance();

    if (!prefetch) {
      return;
    }

    if (!url) {
      return;
    }

    prefetch.onLinkEnter(url, eventEl, event);
  }
  /**
   * get product in the middle of the scrollbar element
   */


  onScroll(event, scope, eventEl) {
    if (this.products) {
      for (let i = 0; i < this.products.length; i++) {
        const product = this.products[i];
        const productData = product.dataset;
        const parentRect = eventEl.getBoundingClientRect();
        const elementRect = product.getBoundingClientRect();
        const elementMiddle = elementRect.width / 2;
        /** centerX is 0 if the product is in the middle */

        const centerX = elementRect.left - (parentRect.width / 2 - elementMiddle);
        const offset = elementMiddle;

        if (centerX > offset * -1 && centerX < offset) {
          this.scope.title = productData.title;
        }
      }
    }
  }

  requiredAttributes() {
    return [];
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductScrollbarComponent, "tagName", "shopify-product-scrollbar");

/***/ }),

/***/ "../../packages/shopify/src/components/product/product.component.ts":
/*!**************************************************************************!*\
  !*** ../../packages/shopify/src/components/product/product.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductComponent": function() { return /* binding */ ShopifyProductComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _product_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./product.component.html */ "../../packages/shopify/src/components/product/product.component.html");





class ShopifyProductComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  /**
   * handle is the product handle to get the product json object
   * extras are product data which is only available over liquid and not over the product json object
   */
  static get observedAttributes() {
    return ["handle", "extras"];
  }

  set product(product) {
    if (product) {
      this.scope.product = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.prepare(product);
      this.colorOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "color") || null;
      this.variant = this.scope.product.variants[0];
    }
  }

  get product() {
    return this.scope.product;
  }

  set variant(variant) {
    if (variant === null) {
      return;
    }

    this.scope.variant = this.prepareVariant(variant);

    if (this.scope.variant) {
      this.selectedOptions = this.scope.variant.options.slice();
      this.available = this.scope.variant.available;
      this.activateOptions();
    }
  }

  get variant() {
    return this.scope.variant;
  }
  /**
   * available is only true if the variant is available and the user has clicked on an option
   */


  set available(available) {
    this.scope.available = available && this.optionChosen;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      handle: null,
      product: null,
      variant: null,
      quantity: 1,
      showDetailMenu: false,
      // showAddToCartButton: false,
      chooseOption: this.chooseOption,
      addToCart: this.addToCart,
      toggleDetailMenu: this.toggleDetailMenu,
      decrease: this.decrease,
      increase: this.increase,

      /**
       * If the variant is available, used to disable the add to cart button
       */
      available: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "colorOption", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "selectedOptions", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "optionChosen", false);

    this.init(ShopifyProductComponent.observedAttributes);
  }

  chooseOption(optionValue, position1, optionName, event) {
    if (!this.scope.product) {
      throw new Error("Product not set!");
    }

    optionValue = optionValue.toString();
    this.selectedOptions[position1 - 1] = optionValue.toString();
    const variant = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getVariantOfOptions(this.scope.product, this.selectedOptions);

    if (variant) {
      // Option chosen so enable add to cart button
      this.optionChosen = true;
      this.variant = variant;
    }

    event.stopPropagation();
  }

  addToCart() {
    if (!this.variant) {
      return;
    }

    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.add(this.variant.id, this.scope.quantity).then(response => {
      console.debug("addToCart response", response);
    }).catch(error => {
      console.error("addToCart error", error);
    });
  }

  toggleDetailMenu() {
    this.scope.showDetailMenu = !this.scope.showDetailMenu;
  }

  increase() {
    this.scope.quantity++;
  }

  decrease() {
    this.scope.quantity--;

    if (this.scope.quantity <= 0) {
      this.scope.quantity = 1;
    }
  }
  /**
   * Workaround because `rv-class-active="isOptionActive | call size"` is not updating if selectedOptions changes
   * @param optionValue
   * @param optionName
   */


  activateOption(optionValue, optionName) {
    var _this$querySelector, _this$querySelector2;

    optionValue = optionValue.toString().replace("#", "");
    (_this$querySelector = this.querySelector(".option-".concat(optionName.toLocaleLowerCase()))) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.classList.remove("active");
    (_this$querySelector2 = this.querySelector(".option-".concat(optionName.toLocaleLowerCase(), "-").concat(optionValue))) === null || _this$querySelector2 === void 0 ? void 0 : _this$querySelector2.classList.add("active");
  }
  /**
   * Activate option by selected options (scope.selectedOptions)
   * This method sets the active class to the options elements
   */


  activateOptions() {
    for (const position0 in this.selectedOptions) {
      if (this.selectedOptions[position0]) {
        const optionValue = this.selectedOptions[position0];

        if (this.scope.product) {
          const optionName = this.scope.product.options[position0].name; // Only activate size if it was clicked by the user

          if (optionName === "size") {
            if (this.optionChosen) {
              this.activateOption(optionValue, optionName);
            }
          } else {
            this.activateOption(optionValue, optionName);
          }
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.handle === null) {
      throw new Error("Product handle not set");
    }

    return _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.get(this.scope.handle).then(product => {
      this.product = product;
    });
  }

  async afterBind() {
    this.activateOptions();
    await super.afterBind();
  }

  requiredAttributes() {
    return ["handle"];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _product_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }
  /**
   * custom version of images.indexOf but compares without protocol and query string in url
   * @param images
   * @param findImage
   */


  indexOfUrl(images, findImage) {
    let index = -1;
    const clearFindImage = findImage.split("?")[0] // remove query string
    .replace(/(^\w+:|^)\/\//, "//"); // remove protocol

    images.forEach((image, i) => {
      const clearImage = image.split("?")[0] // remove query string
      .replace(/(^\w+:|^)\/\//, "//"); // remove protocol

      if (clearImage === clearFindImage) {
        index = i;
      }
    });
    return index;
  }
  /**
   * Get images which are not linked to any variant
   */


  getGeneralImages() {
    let optionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "color";
    optionName = optionName.toLowerCase();
    const generalImages = [];

    if (this.scope.product) {
      // add images without optionName in filename
      this.scope.product.images.forEach(image => {
        if (!(image.toLowerCase().indexOf("".concat(optionName, "-")) !== -1)) {
          generalImages.push(image);
        }
      }); // remove variant images from copied array

      this.scope.product.variants.forEach(variant => {
        let index = -1;

        if (variant.featured_image !== null && variant.featured_image.src) {
          index = this.indexOfUrl(generalImages, variant.featured_image.src);
        }

        if (index >= 0) {
          generalImages.splice(index, 1);
        }
      });
    }

    return generalImages;
  }
  /**
   * Get options images (without featured image) filtered by filename.
   * Shopify only supports one image per variant, with this function more images for each variant are possible.
   * The image filename must include {optionName}-{optionValue} for that.
   */


  getOptionImages(option, optionValue) {
    optionValue = optionValue.toLowerCase().replace("#", "_");
    const optionName = option.name.toLowerCase();
    const optionImages = [];

    if (this.scope.product) {
      this.scope.product.images.forEach(image => {
        if (image.toLowerCase().indexOf("".concat(optionName, "-").concat(optionValue)) !== -1) {
          optionImages.push(image);
        }
      });
    }

    return optionImages;
  }
  /**
   * Get featured images of variant, use the first option image or the featured product image as fallback
   */


  getFeaturedImage(variant) {
    if (variant.featured_image !== null) {
      variant.featured_image.src = variant.featured_image.src.replace(/(^\w+:|^)\/\//, "//"); // remove protocol

      return variant.featured_image;
    }

    let fallbackImageSrc = "";

    if (variant.images && variant.images.length > 0) {
      fallbackImageSrc = variant.images[0];
    } else if (this.scope.product) {
      fallbackImageSrc = this.scope.product.featured_image;
    }

    if (!fallbackImageSrc) {
      return null;
    } // remove protocol for normalization


    fallbackImageSrc = fallbackImageSrc.replace(/(^\w+:|^)\/\//, "//"); // If variant has no image use the default product image

    if (this.scope.product) {
      const featuredImage = {
        src: fallbackImageSrc,
        position: 0,
        product_id: this.scope.product.id,
        variant_ids: [],
        alt: this.scope.product.title,
        created_at: this.scope.product.created_at,
        height: 0,
        width: 0,
        id: 0,
        updated_at: this.scope.product.created_at
      };
      return featuredImage;
    }

    throw new Error("image not found");
  }
  /**
   * prepare variant, e.g. fix missing image etc
   * @param variant
   */


  prepareVariant(variant) {
    if (variant === null) {
      console.warn("Warn: Variant is null!");
      return null;
    }

    if (this.colorOption) {
      variant.images = this.getOptionImages(this.colorOption, variant.options[this.colorOption.position - 1]);
    } else {
      console.warn("Warn: colorOption not defined");
      variant.images = [];
    }

    variant.featured_image = this.getFeaturedImage(variant);

    if (variant.images && variant.featured_image) {
      // Remove featured image so that it does not appear twice
      const i = this.indexOfUrl(variant.images, variant.featured_image.src);

      if (i >= 0) {
        variant.images.splice(i, 1);
      } // add general images


      variant.images = variant.images.concat(this.getGeneralImages());
    }

    return variant;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductComponent, "tagName", "shopify-product");

/***/ }),

/***/ "../../packages/shopify/src/formatters/img-url.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/shopify/src/formatters/img-url.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imgUrlFormatter": function() { return /* binding */ imgUrlFormatter; }
/* harmony export */ });
/**
 * Return a resized shopify image URL
 * @see https://help.shopify.com/en/themes/liquid/filters/url-filters#img_url
 *
 * @param url
 * @param size
 * @param scale TODO
 * @param crop TODO
 * @param extension
 */
const imgUrlFormatter = {
  name: "img_url",

  read(url, size, scale, crop, extension) {
    try {
      if (size === "original" || size === "master") {
        return url;
      }

      if (scale && scale !== 1) {
        size += "@" + scale + "x";
      }

      const result = url.match(/(.*\/[\w\-_.]+)\.(\w{2,4})/);

      if (!result || !result[1] || !result[2]) {
        throw new Error("Can't match url ".concat(url));
      }

      const path = result[1];
      extension = extension || result[2];
      return path + "_" + size + "." + extension;
    } catch (error) {
      console.error(error);
      return url;
    }
  }

};

/***/ }),

/***/ "../../packages/shopify/src/formatters/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/formatters/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imgUrlFormatter": function() { return /* reexport safe */ _img_url_formatter_js__WEBPACK_IMPORTED_MODULE_0__.imgUrlFormatter; },
/* harmony export */   "moneyFormatter": function() { return /* reexport safe */ _money_formatter_js__WEBPACK_IMPORTED_MODULE_1__.moneyFormatter; },
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* reexport safe */ _money_with_currency_formatter_js__WEBPACK_IMPORTED_MODULE_2__.moneyWithCurrencyFormatter; }
/* harmony export */ });
/* harmony import */ var _img_url_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./img-url.formatter.js */ "../../packages/shopify/src/formatters/img-url.formatter.ts");
/* harmony import */ var _money_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./money.formatter.js */ "../../packages/shopify/src/formatters/money.formatter.ts");
/* harmony import */ var _money_with_currency_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./money-with-currency.formatter.js */ "../../packages/shopify/src/formatters/money-with-currency.formatter.ts");


 // Add Shopify-specific formatters for Rivets.js.
// export const money = (value, currency) => {
//   return Utils.formatMoney(value, ProductJS.settings.moneyFormat, 'money_format', currency);
// };
// export const moneyWithCurrency = (value, currency) => {
//   return Utils.formatMoney(value, ProductJS.settings.moneyWithCurrencyFormat, 'money_with_currency_format', currency);
// };
// export const weight = (grams) => {
//   switch (CartJS.settings.weightUnit) {
//     case 'kg':
//       return (grams / 1000).toFixed(CartJS.settings.weightPrecision);
//     case 'oz':
//       return (grams * 0.035274).toFixed(CartJS.settings.weightPrecision);
//     case 'lb':
//       return (grams * 0.00220462).toFixed(CartJS.settings.weightPrecision);
//     default:
//       return grams.toFixed(CartJS.settings.weightPrecision);
//   }
// };

/**
 * Formats the product variant's weight. The weight unit is set in General Settings.
 * @see https://help.shopify.com/themes/liquid/filters/additional-filters#weightWithUnit
 */
// export const weightWithUnit = (grams) => {
//   return export const weight(grams) + CartJS.settings.weightUnit;
// };
// export const productImageSize = (src, size) => {
//   return CartJS.Utils.getSizedImageUrl(src, size);
// };

/***/ }),

/***/ "../../packages/shopify/src/formatters/money-with-currency.formatter.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/formatters/money-with-currency.formatter.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* binding */ moneyWithCurrencyFormatter; }
/* harmony export */ });
/* harmony import */ var _money_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./money.formatter.js */ "../../packages/shopify/src/formatters/money.formatter.ts");
/* harmony import */ var _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");


/**
 * Formats the price based on the shop's HTML with currency setting (if the format is not overwritten by passing a format parameter).
 * @see https://help.shopify.com/en/themes/liquid/filters/money-filters
 */

const moneyWithCurrencyFormatter = {
  name: "money_with_currency",

  read(cents, format) {
    const formatString = format || _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyService.moneyWithCurrencyFormat;

    if (!_money_formatter_js__WEBPACK_IMPORTED_MODULE_0__.moneyFormatter.read) {
      console.error(new Error("Can't find moneyFormatter's read method!"));
      return cents;
    }

    return _money_formatter_js__WEBPACK_IMPORTED_MODULE_0__.moneyFormatter.read(cents, formatString);
  }

};

/***/ }),

/***/ "../../packages/shopify/src/formatters/money.formatter.ts":
/*!****************************************************************!*\
  !*** ../../packages/shopify/src/formatters/money.formatter.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moneyFormatter": function() { return /* binding */ moneyFormatter; }
/* harmony export */ });
/* harmony import */ var _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");

/**
 * Formats the price based on the shop's HTML with currency setting (if the format is not overwritten by passing a format parameter).
 * @param cents
 * @param format
 *
 * @see https://github.com/NathanPJF/deploybot-shopify/blob/master/assets/ajaxify.js.liquid
 * @see https://github.com/discolabs/cartjs/blob/master/src/utils.coffee
 * @see https://github.com/JumpLinkNetwork/shopify-productjs/blob/master/src/utilities.js
 * @see https://help.shopify.com/en/themes/liquid/filters/money-filters
 */

const moneyFormatter = {
  name: "money",

  read(cents, format) {
    let value = "";
    const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    const formatString = format || this.moneyFormat;

    if (!formatString) {
      console.warn("Can't parse format: ".concat(formatString));
      return "0";
    }

    if (typeof cents === "string") {
      cents = cents.replace(".", ""); // cents to float number

      cents = parseFloat(cents.toString());
    }

    const matchedFormat = formatString.match(placeholderRegex);

    if (matchedFormat !== null && matchedFormat.length >= 1) {
      switch (matchedFormat[1]) {
        case "amount":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 2);
          break;

        case "amount_no_decimals":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 0);
          break;

        case "amount_with_comma_separator":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 2, ".", ",");
          break;

        case "amount_no_decimals_with_comma_separator":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 0, ".", ",");
          break;
      }

      return formatString.replace(placeholderRegex, value);
    }

    console.warn("Can't parse format: ".concat(formatString));
    return "0";
  }

};

/***/ }),

/***/ "../../packages/shopify/src/index.ts":
/*!*******************************************!*\
  !*** ../../packages/shopify/src/index.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ModuleService; },
/* harmony export */   "PQueue": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PQueue; },
/* harmony export */   "PriorityQueue": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PriorityQueue; },
/* harmony export */   "ShopifyAddressesComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyAddressesComponent; },
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartButtonComponent; },
/* harmony export */   "ShopifyCartComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartComponent; },
/* harmony export */   "ShopifyCartCountBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyCartCountBinder; },
/* harmony export */   "ShopifyCartItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartItemComponent; },
/* harmony export */   "ShopifyCartService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyCartService; },
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCommentsFormComponent; },
/* harmony export */   "ShopifyContactFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyContactFormComponent; },
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyDebugBarComponent; },
/* harmony export */   "ShopifyImgBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyImgBinder; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyLinklistComponent; },
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyLoginFormComponent; },
/* harmony export */   "ShopifyProductComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductComponent; },
/* harmony export */   "ShopifyProductItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductItemComponent; },
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductScrollbarComponent; },
/* harmony export */   "ShopifyProductService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyProductService; },
/* harmony export */   "ShopifyService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService; },
/* harmony export */   "imgUrlFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.imgUrlFormatter; },
/* harmony export */   "lowerBound": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.lowerBound; },
/* harmony export */   "moneyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.moneyFormatter; },
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.moneyWithCurrencyFormatter; },
/* harmony export */   "shopifyModule": function() { return /* reexport safe */ _shopify_module__WEBPACK_IMPORTED_MODULE_5__.shopifyModule; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify/src/formatters/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify/src/components/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/shopify/src/interfaces/index.ts");
/* harmony import */ var _shopify_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify.module */ "../../packages/shopify/src/shopify.module.ts");







/***/ }),

/***/ "../../packages/shopify/src/interfaces/address.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/address.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/cart.ts":
/*!*****************************************************!*\
  !*** ../../packages/shopify/src/interfaces/cart.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/customer..ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/customer..ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/discount.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/discount.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/image.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/image.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address */ "../../packages/shopify/src/interfaces/address.ts");
/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cart */ "../../packages/shopify/src/interfaces/cart.ts");
/* harmony import */ var _customer___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./customer. */ "../../packages/shopify/src/interfaces/customer..ts");
/* harmony import */ var _discount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./discount */ "../../packages/shopify/src/interfaces/discount.ts");
/* harmony import */ var _order__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./order */ "../../packages/shopify/src/interfaces/order.ts");
/* harmony import */ var _linklist_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./linklist-link */ "../../packages/shopify/src/interfaces/linklist-link.ts");
/* harmony import */ var _linklist__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./linklist */ "../../packages/shopify/src/interfaces/linklist.ts");
/* harmony import */ var _metafield__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metafield */ "../../packages/shopify/src/interfaces/metafield.ts");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product */ "../../packages/shopify/src/interfaces/product.ts");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image */ "../../packages/shopify/src/interfaces/image.ts");
/* harmony import */ var _shipping_rates__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shipping-rates */ "../../packages/shopify/src/interfaces/shipping-rates.ts");












/***/ }),

/***/ "../../packages/shopify/src/interfaces/linklist-link.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/interfaces/linklist-link.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/linklist.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/linklist.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/metafield.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/metafield.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/order.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/order.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/product.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/product.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/interfaces/shipping-rates.ts":
/*!***************************************************************!*\
  !*** ../../packages/shopify/src/interfaces/shipping-rates.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify/src/services/index.ts":
/*!****************************************************!*\
  !*** ../../packages/shopify/src/services/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _module_service_js__WEBPACK_IMPORTED_MODULE_0__.ModuleService; },
/* harmony export */   "PQueue": function() { return /* reexport safe */ _p_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PQueue; },
/* harmony export */   "PriorityQueue": function() { return /* reexport safe */ _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__.PriorityQueue; },
/* harmony export */   "ShopifyCartService": function() { return /* reexport safe */ _shopify_cart_service_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService; },
/* harmony export */   "ShopifyProductService": function() { return /* reexport safe */ _shopify_product_service_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyProductService; },
/* harmony export */   "ShopifyService": function() { return /* reexport safe */ _shopify_service_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyService; },
/* harmony export */   "lowerBound": function() { return /* reexport safe */ _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__.lowerBound; }
/* harmony export */ });
/* harmony import */ var _module_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module.service.js */ "../../packages/shopify/src/services/module.service.ts");
/* harmony import */ var _p_queue_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./p-queue.service.js */ "../../packages/shopify/src/services/p-queue.service.ts");
/* harmony import */ var _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./priority-queue.service.js */ "../../packages/shopify/src/services/priority-queue.service.ts");
/* harmony import */ var _shopify_cart_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shopify-cart.service.js */ "../../packages/shopify/src/services/shopify-cart.service.ts");
/* harmony import */ var _shopify_product_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shopify-product.service.js */ "../../packages/shopify/src/services/shopify-product.service.ts");
/* harmony import */ var _shopify_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");







/***/ }),

/***/ "../../packages/shopify/src/services/module.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/shopify/src/services/module.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* binding */ ModuleService; }
/* harmony export */ });
class ModuleService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ModuleService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ModuleService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/p-queue.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/services/p-queue.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PQueue": function() { return /* binding */ PQueue; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./priority-queue.service.js */ "../../packages/shopify/src/services/priority-queue.service.ts");

// https://github.com/sindresorhus/p-queue

class PQueue {
  constructor(options) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "queue", new _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_intervalCount", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_intervalEnd", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_pendingCount", 0);

    options = Object.assign({
      carryoverConcurrencyCount: false,
      intervalCap: Infinity,
      interval: 0,
      concurrency: Infinity,
      autoStart: true,
      queueClass: _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue
    }, options);

    if (!(typeof options.concurrency === "number" && options.concurrency >= 1)) {
      throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(options.concurrency, "` (").concat(typeof options.concurrency, ")"));
    }

    if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
      throw new TypeError("Expected `intervalCap` to be a number from 1 and up, got `".concat(options.intervalCap, "` (").concat(typeof options.intervalCap, ")"));
    }

    if (!(typeof options.interval === "number" && Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError("Expected `interval` to be a finite number >= 0, got `".concat(options.interval, "` (").concat(typeof options.interval, ")"));
    }

    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
    this._intervalCount = 0;
    this._intervalCap = options.intervalCap;
    this._interval = options.interval;
    this._intervalId = undefined;
    this._intervalEnd = 0;
    this._timeoutId = null;
    this.queue = new options.queueClass(); // eslint-disable-line new-cap

    this._pendingCount = 0;
    this._concurrency = options.concurrency;
    this._isPaused = options.autoStart === false;

    this._resolveEmpty = () => {}; // eslint-disable-line


    this._resolveIdle = () => {}; // eslint-disable-line

  }

  add(fn, options) {
    return new Promise((resolve, reject) => {
      const run = () => {
        this._pendingCount++;
        this._intervalCount++;

        try {
          Promise.resolve(fn()).then(val => {
            resolve(val);

            this._next();
          }, err => {
            reject(err);

            this._next();
          });
        } catch (err) {
          reject(err);

          this._next();
        }
      };

      this.queue.enqueue(run, options);

      this._tryToStartAnother();
    });
  }

  addAll(fns, options) {
    return Promise.all(fns.map(fn => this.add(fn, options)));
  }

  start() {
    if (!this._isPaused) {
      return;
    }

    this._isPaused = false;

    while (this._tryToStartAnother()) {} // eslint-disable-line

  }

  pause() {
    this._isPaused = true;
  }

  clear() {
    this.queue = new _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue();
  }

  onEmpty() {
    // Instantly resolve if the queue is empty
    if (this.queue.size === 0) {
      return Promise.resolve();
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveEmpty;

      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }

  onIdle() {
    // Instantly resolve if none pending and if nothing else is queued
    if (this._pendingCount === 0 && this.queue.size === 0) {
      return Promise.resolve();
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveIdle;

      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  } // private _resolveEmpty = () => { }; // eslint-disable-line
  // private _resolveIdle = () => { }; // eslint-disable-line


  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }

  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }

  _next() {
    this._pendingCount--;

    this._tryToStartAnother();
  }

  _resolvePromises() {
    this._resolveEmpty();

    this._resolveEmpty = () => {}; // eslint-disable-line


    if (this._pendingCount === 0) {
      this._resolveIdle();

      this._resolveIdle = () => {}; // eslint-disable-line

    }
  }

  _onResumeInterval() {
    this._onInterval();

    this._initializeIntervalIfNeeded();

    this._timeoutId = null;
  }

  _intervalPaused() {
    const now = Date.now();

    if (typeof this._intervalId === undefined) {
      const delay = this._intervalEnd - now;

      if (delay < 0) {
        // Act as the interval was done
        // We don't need to resume it here,
        // because it'll be resumed on line 160
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        // Act as the interval is pending
        if (this._timeoutId === null) {
          this._timeoutId = setTimeout(() => this._onResumeInterval(), delay);
        }

        return true;
      }
    }

    return false;
  }

  _tryToStartAnother() {
    if (this.queue.size === 0) {
      // We can clear the interval ("pause")
      // because we can redo it later ("resume")
      clearInterval(this._intervalId);
      this._intervalId = undefined;

      this._resolvePromises();

      return false;
    }

    if (!this._isPaused) {
      const canInitializeInterval = !this._intervalPaused();

      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        this.queue.dequeue()();

        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }

        return true;
      }
    }

    return false;
  }

  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== null) {
      return;
    }

    this._intervalId = setInterval(() => this._onInterval(), this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }

  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0) {
      clearInterval(this._intervalId);
      this._intervalId = undefined;
    }

    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

    while (this._tryToStartAnother()) {} // eslint-disable-line

  }

  get size() {
    return this.queue.size;
  }

  get pending() {
    return this._pendingCount;
  }

  get isPaused() {
    return this._isPaused;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/priority-queue.service.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify/src/services/priority-queue.service.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PriorityQueue": function() { return /* binding */ PriorityQueue; },
/* harmony export */   "lowerBound": function() { return /* binding */ lowerBound; }
/* harmony export */ });
// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comp) {
  let first = 0;
  let count = array.length;

  while (count > 0) {
    const step = count / 2 | 0;
    let it = first + step;

    if (comp(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}
class PriorityQueue {
  constructor() {
    this._queue = [];
  }

  enqueue(run, options) {
    options = Object.assign({
      priority: 0
    }, options);
    const element = {
      priority: options.priority,
      run
    };

    if (this.size && this._queue[this.size - 1].priority >= options.priority) {
      this._queue.push(element);

      return;
    }

    const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);

    this._queue.splice(index, 0, element);
  }

  dequeue() {
    return this._queue.shift().run;
  }

  get size() {
    return this._queue.length;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/shopify-cart.service.ts":
/*!*******************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify-cart.service.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartService": function() { return /* binding */ ShopifyCartService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _p_queue_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./p-queue.service.js */ "../../packages/shopify/src/services/p-queue.service.ts");




 // https://github.com/sindresorhus/p-queue

class ShopifyCartService {
  /**
   * Use this method to force an update of the shopping cart object, e.g. if the shopping cart was updated outside Riba.
   * @param options
   */
  static async updateExtern() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const newCart = await this.refresh();
    const oldCart = this.cart;
    this.cart = newCart;

    if (options.triggerOnChange) {
      if ((oldCart === null || oldCart === void 0 ? void 0 : oldCart.total_price) !== (newCart === null || newCart === void 0 ? void 0 : newCart.total_price) || (oldCart === null || oldCart === void 0 ? void 0 : oldCart.item_count) !== (oldCart === null || oldCart === void 0 ? void 0 : oldCart.item_count)) {
        this.triggerOnChange(this.cart);
      }
    }

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }
  }
  /**
   * Use this to add a variant to the cart.
   * @param id Variant id
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response if successful, the JSON of the line item associated with the added variant.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart
   */


  static async add(id) {
    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const lineItemRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_ADD_URL, body, "json");

      if (lineItemRes.status >= 400) {
        throw lineItemRes.body;
      }

      const lineItem = lineItemRes.body; // Force update cart object

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_URL, {}, "json");

      if (cartRes.status >= 400) {
        throw lineItemRes.body;
      }

      const cart = cartRes.body;

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      this.triggerAdd(id, quantity, properties);
      return lineItem; // return original response
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  static async refresh() {
    const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_URL, {}, "json");
    let cart;

    if (typeof cartRes.body === "string") {
      cart = JSON.parse(cartRes.body);
    } else {
      cart = cartRes.body;
    }

    return cart;
  }

  static _get() {
    if (ShopifyCartService.cart !== null) {
      return new Promise((resolve
      /*, reject*/
      ) => {
        setTimeout(() => {
          if (ShopifyCartService.cart !== null) {
            return resolve(ShopifyCartService.cart);
          } else {
            return this._get();
          }
        }, 0);
      });
    }

    return ShopifyCartService.refresh();
  }
  /**
   * Use this to get the cart as JSON.
   * @param data
   * @return The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart
   */


  static get() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return this._get();
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * Use this to change cart attributes, the cart note, and quantities of line items in the cart.
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#update-cart
   */


  static update(id, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_UPDATE_URL, body, "form");
    }) // because type is form we need to parse the json response by self
    .then(cart => {
      return JSON.parse(cart);
    }).then(cart => {
      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * Use this to change cart attributes, the cart note, and quantities of line items in the cart.
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#update-cart
   */


  static updates(updates) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_UPDATE_URL, {
        updates
      }, "form");
    }) // because type is form we need to parse the json response by self
    .then(cart => {
      return JSON.parse(cart);
    }).then(cart => {
      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * This call sets the quantity of an item already in the cart.
   *
   * Although /cart/update.js and /cart/change.js may seem like they accomplish the same function,
   * they truly are quite different. The /cart/update.js controller allows updates to several items
   * at once, including items that may not yet be in the cart (it will add them), and it also allows
   * updates of cart attributes and the cart note. The /cart/change.js controller is only able to
   * update the quantity of one item at a time, and that item must be in the cart already. If the
   * item is not in the cart, /cart/change.js will not add it and it will then return a 404 error.
   * Whereas the /cart/update.js controller updates no quantity when any of the requested update
   * cannot be met, the /cart/change.js controller, on the other hand, will adjust the quantity to
   * add all items in stock if what is requested is greater than what's available. Use your browser's
   * JavaScript console to test things out if you're not sure about the behavior of the different request URLs.
   *
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#change-cart
   */


  static async change(id, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CHANGE_URL, body, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * If you use Line Item Properties you may end up with several items in the cart that share the same variant ID.
   * How do you update the quantity of an item in the cart that has specific line item properties?
   * Once you have identified the 1-based index of the item in the cart, you can use the line property instead of id.
   * @param line -based index of the item in the cart
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   */


  static async changeLine(line, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        line,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CHANGE_URL, body, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * This call sets all quantities of all line items in the cart to zero.
   * @return The JSON of an empty cart. This does not remove cart attributes nor the cart note.
   * @return Response The JSON of an empty cart. This does not remove cart attributes nor the cart note.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#clear-cart
   */


  static async clear() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CLEAR_URL, {}, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  static async _getShippingRates(shippingAddress) {
    let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_SHIPPING_RATES_URL, {
      shipping_address: shippingAddress
    }, "json");
    const shippingRates = res.body;

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(shippingRates) && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(shippingRates.shipping_rates)) {
      if (normalize) {
        return this.normalizeShippingRates(shippingRates.shipping_rates);
      }

      return shippingRates.shipping_rates;
    } else {
      throw new Error("shipping_rates property not found: " + JSON.stringify(shippingRates));
    }
  }
  /**
   * Get estimated shipping rates.
   * @param shippingAddress TODO: /cart/shipping_rates.json?shipping_address[zip]=K1N 5T2&shipping_address[country]=Canada&shipping_address[province]=Ontario
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-shipping-rates
   */


  static getShippingRates(shippingAddress) {
    let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return this._getShippingRates(shippingAddress, normalize);
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  /**
   * Trigger `ShopifyCart:request:complete`, if queue is already pending no noting (in this case we already looking for onIdle)
   */
  static triggerOnComplete() {
    if (!this.waitForComplete) {
      this.waitForComplete = true;
      return this.queue.onIdle().then(() => {
        ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:complete", this.cart);
        this.waitForComplete = false;
      });
    }
  }
  /**
   * TODO check if cart values are changed
   * @param cart The cart object
   */


  static triggerOnChange(cart) {
    this.cart = cart;
    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:changed", this.cart);
  }
  /**
   * Trigger `ShopifyCart:request:start`, if not already triggered
   */


  static triggerOnStart() {
    if (this.queue.pending > 0) {
      return;
    }

    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:start");
  }
  /**
   * Trigger `ShopifyCart:add`
   */


  static triggerAdd(id, quantity, properties) {
    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:add", {
      id,
      quantity,
      properties
    });
  }

  static normalizeShippingRates(shippingRates) {
    const normalized = new Array(shippingRates.length);

    for (const i in shippingRates) {
      if (shippingRates[i]) {
        const shippingRate = shippingRates[i];
        normalized[i] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, shippingRate);

        if (normalized[i] && normalized[i].price) {
          normalized[i].price = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getNumber)(normalized[i].price);

          if (normalized[i].price) {
            normalized[i].price *= 100;
          } else {
            console.warn("Can't parse \"".concat(normalized[i].price, "\" to number"));
          }
        } else {
          console.warn("price property not defined", normalized[i]);
        }
      }
    }

    return normalized;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "queue", new _p_queue_service_js__WEBPACK_IMPORTED_MODULE_4__.PQueue({
  concurrency: 1
}));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "cart", null);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "shopifyCartEventDispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("ShopifyCart"));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_ADD_URL", "/cart/add.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_GET_URL", "/cart.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_UPDATE_URL", "/cart/update.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_CHANGE_URL", "/cart/change.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_CLEAR_URL", "/cart/clear.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_GET_SHIPPING_RATES_URL", "/cart/shipping_rates.json");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "requestOptionDefaults", {
  triggerOnStart: true,
  triggerOnComplete: true,
  triggerOnChange: true
});

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "waitForComplete", false);

/***/ }),

/***/ "../../packages/shopify/src/services/shopify-product.service.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify-product.service.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductService": function() { return /* binding */ ShopifyProductService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class ShopifyProductService {
  /**
   * Get product object by handle
   * @param handle product handle
   */
  static get(handle) {
    if (this.cache[handle]) {
      return new Promise(resolve => {
        resolve(this.cache[handle]);
      });
    } else {
      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON("/products/".concat(handle, ".js")).then(res => {
        const product = res.body;
        this.cache[handle] = product;
        return this.cache[handle];
      });
    }
  }
  /**
   * Check if the option values fits to the current variant.
   * @param variant
   * @param optionValues
   * @return Returns true if the option values fitting to the variant
   */


  static fitsVariantOptions(variant, optionValues) {
    let fit = true; // position0 is the option index starting on 0

    for (const position0 in optionValues) {
      if (optionValues[position0]) {
        const optionValue = optionValues[position0];
        fit = fit && variant.options.indexOf(optionValue.toString()) > -1;
      }
    }

    return fit;
  }
  /**
   * Get product variant of (selected) option values
   * @param optionValues (selected) option values
   */


  static getVariantOfOptions(product, optionValues) {
    let result = null;

    if (product) {
      for (const i in product.variants) {
        if (product.variants[i]) {
          result = null;
          const variant = product.variants[i];
          const fits = this.fitsVariantOptions(variant, optionValues);

          if (fits) {
            result = variant;
            break;
          }
        }
      }
    }

    return result;
  }
  /**
   * Get variant object by variant id
   * @param id Variant id
   */


  static getVariant(product, id) {
    const result = product.variants.find(variant => variant.id === id) || null;
    return result;
  }
  /**
   * Get product option by name
   * @param product product which holds the options
   * @param name option name
   */


  static getOption(product, name) {
    const result = product.options.find(option => option.name.toLowerCase() === name.toLowerCase());
    return result;
  }
  /**
   * Get product option which includes a substring
   * @param product product which holds the options
   * @param name option name
   */


  static getOptionIncludes(product, searchSubstr) {
    const result = product.options.find(option => option.name.indexOf(searchSubstr) !== -1);
    return result;
  }
  /**
   * Prepare product, remove protocol from featured_image, lowercase the option names
   * @param product product object
   */


  static prepare(product) {
    // remove protocol
    product.featured_image.replace(/(^\w+:|^)\/\//, "//"); // all option names to lower case

    for (const option of product.options) {
      option.name = option.name.toLowerCase();
    }

    return product;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductService, "cache", {});

/***/ }),

/***/ "../../packages/shopify/src/services/shopify.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyService": function() { return /* binding */ ShopifyService; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Custom version of shopify tools like api.jquery.js / option-selection.js
 * @see https://mayert-douglas4935.myshopify.com/pages/api
 */

class ShopifyService {
  static formatMoneyWithDelimiters(num) {
    let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let thousands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ",";
    let decimal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ".";

    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(num) || num === null) {
      return "0";
    }

    const numStr = (num / 100.0).toFixed(precision);
    const parts = numStr.split(".");
    const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands);
    const cents = parts[1] ? decimal + parts[1] : "";
    return dollars + cents;
  }
  /** singleton instance */


  static get moneyWithCurrencyFormat() {
    if (window.model && window.model.system && window.model.system.shopSettings) {
      return window.model.system.shopSettings.moneyWithCurrencyFormat;
    }
  }

  static get moneyFormat() {
    if (window.model && window.model.system && window.model.system.shopSettings) {
      return window.model.system.shopSettings.moneyFormat;
    }
  }

  constructor() {
    if (ShopifyService.instance) {
      return ShopifyService.instance;
    }

    ShopifyService.instance = this;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/shopify.module.ts":
/*!****************************************************!*\
  !*** ../../packages/shopify/src/shopify.module.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shopifyModule": function() { return /* binding */ shopifyModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify/src/services/index.ts");



const shopifyModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: {},
  components: {},

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ModuleService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/utils/src/color.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/color.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "consoleColoured": function() { return /* binding */ consoleColoured; },
/* harmony export */   "getRandomColor": function() { return /* binding */ getRandomColor; }
/* harmony export */ });
/**
 * Generates a random color
 * @see https://stackoverflow.com/a/1484514/1465919
 */
const getRandomColor = () => {
  const letters = "0123456789ABCDEF";
  let color = "#";

  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }

  return color;
};
const consoleColoured = function (options) {
  const printArgs = [];

  if (options.color) {
    if (options.namespace) {
      printArgs.push("%c[".concat(options.namespace, "] ").concat(options.mode.toUpperCase(), ": "));
    } else {
      printArgs.push("%c".concat(options.mode.toUpperCase(), ": "));
    }

    printArgs.push("color: ".concat(options.color));
  } else {
    if (options.namespace) {
      printArgs.push("[".concat(options.namespace, "] ").concat(options.mode.toUpperCase(), ": "));
    } else {
      printArgs.push("".concat(options.mode.toUpperCase(), ": "));
    }
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  printArgs.push(...args);
  console[options.mode](...printArgs);
};

/***/ }),

/***/ "../../packages/utils/src/constants.ts":
/*!*********************************************!*\
  !*** ../../packages/utils/src/constants.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE64_PREFIX": function() { return /* binding */ BASE64_PREFIX; },
/* harmony export */   "KEYPATH": function() { return /* binding */ KEYPATH; },
/* harmony export */   "PRIMITIVE": function() { return /* binding */ PRIMITIVE; },
/* harmony export */   "QUOTED_STR": function() { return /* binding */ QUOTED_STR; }
/* harmony export */ });
const BASE64_PREFIX = "base64:";
const PRIMITIVE = 0;
const KEYPATH = 1;
const QUOTED_STR = /^'.*'$|^".*"$/; // regex to test if string is wrapped in " or '

/***/ }),

/***/ "../../packages/utils/src/control.ts":
/*!*******************************************!*\
  !*** ../../packages/utils/src/control.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": function() { return /* binding */ debounce; },
/* harmony export */   "debounceCb": function() { return /* binding */ debounceCb; },
/* harmony export */   "debounceF": function() { return /* binding */ debounceF; },
/* harmony export */   "debounceT": function() { return /* binding */ debounceT; },
/* harmony export */   "deferred": function() { return /* binding */ deferred; },
/* harmony export */   "noop": function() { return /* binding */ noop; },
/* harmony export */   "pTimeout": function() { return /* binding */ pTimeout; },
/* harmony export */   "sleep": function() { return /* binding */ sleep; },
/* harmony export */   "throttle": function() { return /* binding */ throttle; },
/* harmony export */   "times": function() { return /* binding */ times; },
/* harmony export */   "waitForProp": function() { return /* binding */ waitForProp; }
/* harmony export */ });
const noop = () => {
  /** do nothing */
};
const times = (n, cb) => {
  for (let i = 0; i < n; i++) {
    cb();
  }
};
const sleep = time => {
  return new Promise(resolve => setTimeout(resolve, time));
};
const waitForProp = async function (propName) {
  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;

  while (!obj[propName]) {
    await sleep(delay);
  }

  return obj[propName];
};
/**
 * Return a new "Deferred" object
 * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred
 *
 * @return
 */

const deferred = () => {
  const obj = {};
  const prom = new Promise((resolve, reject) => {
    obj.resolve = resolve;
    obj.reject = reject;
  });
  obj.promise = prom;
  return obj;
};
/**
 * debounce (Timeout + Callback edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the setTimeout method
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 */

const debounceCb = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let timeout;
  return function () {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    clearTimeout(timeout);
    timeout = setTimeout(() => fn(...params), wait);
  };
};
/**
 * debounce (Timeout + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the setTimeout method
 */

const debounceT = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let resolve;
  let reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  let debounce = undefined;
  return function () {
    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }

    if (!debounce) debounce = debounceCb(() => {
      try {
        resolve(fn(...params)); // Reset

        debounce = undefined;
      } catch (error) {
        reject(error);
      }
    }, wait);
    debounce(...params);
    return promise;
  };
};
/**
 * debounce (RequestAnimationFrame + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the requestAnimationFrame method
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 */

const debounceF = fn => {
  // This holds the requestAnimationFrame reference, so we can cancel it if we wish
  let frame = null;
  let resolve;
  let reject;
  let promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  }); // The debounce function returns a new function that can receive a variable number of arguments

  return function () {
    for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      params[_key3] = arguments[_key3];
    }

    // If the frame variable has been defined, clear it now, and queue for next frame
    if (frame) {
      cancelAnimationFrame(frame);
    } // Queue our function call for the next frame


    frame = window.requestAnimationFrame(() => {
      // Call our function and pass any params we received
      try {
        resolve(fn(...params));
      } catch (error) {
        reject(error);
      } // reset frame and initialize new promise for next call


      frame = null;
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    });
    return promise;
  };
};
/**
 * debounce (RequestAnimationFrame + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses requestAnimationFrame method if no delay is passed, otherwise a timeout
 */

const debounce = (fn, wait) => {
  if (typeof wait === "number") {
    return debounceT(fn, wait);
  } else {
    return debounceF(fn);
  }
};
/**
 * The throttle function receives our function as a parameter
 * It is recommended to use this method for resize events
 * Throttling is a technique in which, no matter how many times the user fires the event,
 * the attached function will be executed only once in a given time interval.
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 * @see https://gist.github.com/peduarte/969217eac456538789e8fac8f45143b4
 */

const throttle = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let timerId = null;
  let resolve;
  let reject;
  let promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return function () {
    if (timerId === null) {
      timerId = window.setTimeout(() => {
        // reset timerId and initialize new promise for next call
        timerId = null;
        promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
      }, wait);

      try {
        resolve(fn(...arguments));
      } catch (error) {
        reject(error);
      }
    }

    return promise;
  };
};
/**
 * Cancel promise on timeout.
 */

const pTimeout = (value, ms, error) => {
  const def = deferred();
  const p = {
    _timeout: setTimeout(() => {
      def.reject(error || new Error("Timeout after ".concat(ms, "ms")));
    }, ms),
    promise: def.promise,
    cancel: () => {
      def.resolve(value);

      if (p._timeout) {
        clearTimeout(p._timeout);
      }
    }
  };
  value.then(value => {
    p.cancel();
    def.resolve(value);
  }).catch(error => {
    p.cancel();
    def.reject(error);
  });
  return p.promise;
};

/***/ }),

/***/ "../../packages/utils/src/dom.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/dom.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAX_UID": function() { return /* binding */ MAX_UID; },
/* harmony export */   "elementIsHidden": function() { return /* binding */ elementIsHidden; },
/* harmony export */   "elementIsVisible": function() { return /* binding */ elementIsVisible; },
/* harmony export */   "getDataset": function() { return /* binding */ getDataset; },
/* harmony export */   "getElementFromEvent": function() { return /* binding */ getElementFromEvent; },
/* harmony export */   "getElementIndex": function() { return /* binding */ getElementIndex; },
/* harmony export */   "getInputValue": function() { return /* binding */ getInputValue; },
/* harmony export */   "getScrollHeight": function() { return /* binding */ getScrollHeight; },
/* harmony export */   "getScrollWidth": function() { return /* binding */ getScrollWidth; },
/* harmony export */   "getUID": function() { return /* binding */ getUID; },
/* harmony export */   "getViewportDimensions": function() { return /* binding */ getViewportDimensions; },
/* harmony export */   "hasChildNodesTrim": function() { return /* binding */ hasChildNodesTrim; },
/* harmony export */   "htmlToElement": function() { return /* binding */ htmlToElement; },
/* harmony export */   "htmlToElements": function() { return /* binding */ htmlToElements; },
/* harmony export */   "isCustomElement": function() { return /* binding */ isCustomElement; },
/* harmony export */   "isInViewport": function() { return /* binding */ isInViewport; },
/* harmony export */   "isVisible": function() { return /* binding */ isVisible; },
/* harmony export */   "loadScript": function() { return /* binding */ loadScript; },
/* harmony export */   "ready": function() { return /* binding */ ready; },
/* harmony export */   "scrollTo": function() { return /* binding */ scrollTo; },
/* harmony export */   "scrollToPosition": function() { return /* binding */ scrollToPosition; },
/* harmony export */   "scrolling": function() { return /* binding */ scrolling; },
/* harmony export */   "selectAll": function() { return /* binding */ selectAll; },
/* harmony export */   "setAttribute": function() { return /* binding */ setAttribute; },
/* harmony export */   "toArray": function() { return /* binding */ toArray; },
/* harmony export */   "waitForCustomElement": function() { return /* binding */ waitForCustomElement; }
/* harmony export */ });
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type.js */ "../../packages/utils/src/type.ts");

const MAX_UID = 1000;
/**
 * Sets an attribute. The peculiarity of this custom method is that when an object is passed, it is converted to a json string.
 * This is useful if, for example, an object is to be passed to a custom element via an attribute.
 * @note This method is used by the AttributeBinder.
 * @param el
 * @param attributeName
 * @param newValue
 * @returns
 */

const setAttribute = (el, attributeName, newValue) => {
  if (!attributeName) {
    throw new Error("Can't set attribute of " + attributeName);
  }

  const oldValue = el.getAttribute(attributeName);
  let newValueFormatted;
  let changed = false;

  switch (typeof newValue) {
    case "string":
    case "number":
    case "boolean":
      newValueFormatted = String(newValue);
      break;

    case "undefined":
      newValueFormatted = undefined;

    case "object":
      if (newValue === null) {
        newValueFormatted = null;
      } else {
        newValueFormatted = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(newValue, 0);
      }

      break;

    default:
      newValueFormatted = String(newValue);
      break;
  }

  if (newValueFormatted === null || newValueFormatted === undefined) {
    el.removeAttribute(attributeName);
    changed = true;
  } else {
    if (oldValue !== newValueFormatted) {
      el.setAttribute(attributeName, newValueFormatted);
      changed = true;
    }
  }

  return {
    name: attributeName,
    newValue: newValueFormatted,
    oldValue,
    changed
  };
};
const getDataset = element => {
  const dataset = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.clone)(false, element.dataset);

  for (const attr in dataset) {
    if (dataset[attr]) {
      dataset[attr] = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.parseType)(dataset[attr], true).value;
    }
  }

  return dataset;
};
/**
 * Calls el.hasChildNodes but ignores empty strings, the default hasChildNodes would return true on `<div> </div>`.
 * Very useful to check within a component if the component has set child elements to load or overwrite the component template
 * @param el
 */

const hasChildNodesTrim = el => {
  if (!el.hasChildNodes()) {
    return false;
  }

  const childNodes = el.childNodes;

  if (childNodes.length === 1 && childNodes[0].nodeType === 3) {
    var _childNodes$0$nodeVal;

    if (!childNodes[0].nodeValue || ((_childNodes$0$nodeVal = childNodes[0].nodeValue) === null || _childNodes$0$nodeVal === void 0 ? void 0 : _childNodes$0$nodeVal.trim()) === "") {
      return false;
    }
  }

  return true;
};
/**
 *
 */

const getInputValue = el => {
  const results = [];

  if (el.type === "checkbox") {
    return el.checked;
  } else if (el.type === "select-multiple") {
    const options = el.options;

    for (const key in options) {
      if (options[key]) {
        const option = options[key];

        if (option.selected) {
          results.push(option.value);
        }
      }
    }

    return results;
  } else if (el.hasAttribute && el.hasAttribute("contenteditable")) {
    return el.innerHTML; // TODO write test for contenteditable
  } else {
    return el.value;
  }
};
const elementIsHidden = el => {
  return el.hasAttribute("hidden") || el.style.display === "none" || el.style.visibility === "hidden" || window.getComputedStyle(el).display === "none" || window.getComputedStyle(el).visibility === "hidden";
};
const elementIsVisible = el => {
  return !elementIsHidden(el);
};
/**
 * Observe scroll event
 * @param scrollElement The element or window you want to observe
 * @returns Returns a promise which resolves when an element stops scrolling
 */

const scrolling = async scrollElement => {
  return new Promise(resolve => {
    let scrollTimeout;

    const checkScroll = () => {
      if (scrollTimeout !== undefined) {
        clearTimeout(scrollTimeout);
      }

      scrollTimeout = setTimeout(() => {
        resolve();
      }, 100);
    };

    scrollElement.removeEventListener("scroll", checkScroll);
    scrollElement.addEventListener("scroll", checkScroll);
    checkScroll();
  });
};
/**
 * Scrolls to an element
 *
 * @see https://stackoverflow.com/a/31987330
 * @see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/
 * @param element
 * @param to
 * @param duration
 */

const scrollTo = async function (to) {
  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let scrollElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;
  let angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "vertical";
  let behavior = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "smooth";

  if (!scrollElement) {
    scrollElement = window;
  }

  const scrollPromise = scrolling(scrollElement);
  let top = 0;
  let left = 0; // If element is window

  if (scrollElement.document) {
    if (angle === "vertical") {
      const scrollY = scrollElement.scrollY || scrollElement.pageYOffset;
      top = Math.round(to.getBoundingClientRect().top + scrollY - offset);
    } else {
      const scrollX = scrollElement.scrollX || scrollElement.pageXOffset;
      left = Math.round(to.getBoundingClientRect().left + scrollX - offset);
    }
  } else {
    if (angle === "vertical") {
      const marginTop = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(window.getComputedStyle(scrollElement).marginTop);
      top = Math.round(to.offsetTop - offset - marginTop);
    } else {
      const marginLeft = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(window.getComputedStyle(scrollElement).marginLeft);
      left = Math.round(to.offsetLeft - offset - marginLeft);
    }
  }

  scrollElement.scroll({
    behavior,
    left,
    top
  });
  return scrollPromise;
};
const getScrollHeight = scrollElement => {
  // if element is window
  if (scrollElement.document) {
    const win = scrollElement;
    const doc = win.document;
    return win.scrollMaxY || Math.max(doc.body.scrollHeight, doc.body.offsetHeight, doc.documentElement.clientHeight, doc.documentElement.scrollHeight, doc.documentElement.offsetHeight, 0);
  }

  return scrollElement.scrollHeight;
};
const getScrollWidth = scrollElement => {
  // if element is window
  if (scrollElement.document) {
    const win = scrollElement;
    const doc = win.document;
    return win.scrollMaxX || Math.max(doc.body.scrollWidth, doc.body.offsetWidth, doc.documentElement.clientWidth, doc.documentElement.scrollWidth, doc.documentElement.offsetWidth);
  }

  return scrollElement.scrollWidth;
};
const scrollToPosition = async function (scrollElement, position) {
  let angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "vertical";
  let behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "smooth";
  let top;
  let left;

  if (!scrollElement) {
    return;
  }

  const scrollPromise = scrolling(scrollElement);

  if (angle === "vertical" || angle === "both") {
    switch (position) {
      case "start":
        top = 0;
        break;

      case "end":
        top = getScrollHeight(scrollElement);
        break;

      case "center":
        top = getScrollHeight(scrollElement);

        if (top) {
          top /= 2; // if element is window

          if (scrollElement.document) {
            top -= scrollElement.visualViewport.height / 2;
          } else {
            top -= scrollElement.clientHeight / 2;
          }
        }

        break;

      default:
        top = position;
        break;
    }
  }

  if (angle === "horizontal" || angle === "both") {
    switch (position) {
      case "start":
        left = 0;
        break;

      case "end":
        left = getScrollWidth(scrollElement);
        break;

      case "center":
        left = getScrollWidth(scrollElement);

        if (left) {
          left /= 2; // if element is window

          if (scrollElement.document) {
            left -= scrollElement.visualViewport.width / 2;
          } else {
            left -= scrollElement.clientWidth / 2;
          }
        }

        break;

      default:
        left = position;
        break;
    }
  }

  scrollElement.scroll({
    behavior,
    top,
    left
  });
  return scrollPromise;
};
const getElementFromEvent = event => {
  const el = event.target || event.currentTarget || event.relatedTarget || // JQuery event
  event.delegateTarget || event.fromElement;
  return el;
};
const getViewportDimensions = () => {
  const w = Math.max(document.documentElement ? document.documentElement.clientWidth : 0, window.innerWidth || 0);
  const h = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0);
  return {
    h,
    w
  };
};
/**
 * Determine if an element is in the viewport
 * @param elem The element
 * @param offsetTop (Default  Distance to the top of the screen, if this is 0, the element must be scrolled until the top of the screen.
 * @param offsetBottom Distance to the bottom of the screen, if this is 0, the scroll position must be over the element
 * @return Returns true if element is in the viewport
 */

const isInViewport = function (elem, offsetTop) {
  let offsetBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (!elem) {
    return false;
  }

  const distance = elem.getBoundingClientRect();

  if (!offsetTop) {
    const vp = getViewportDimensions();
    offsetTop = vp.h - distance.height;
  }

  return distance.top + distance.height >= offsetBottom && distance.bottom - distance.height <= offsetTop;
};
/**
 * Select all of an contenteditable or input element
 * @param element The element you want to select
 */

const selectAll = element => {
  // need setTimeout for safari
  setTimeout(() => {
    if (typeof element.selectionStart !== "undefined") {
      element.selectionStart = 0;
      element.selectionEnd = 999;
    }

    if (typeof element.select === "function") {
      element.select();
    }

    if (typeof element.setSelectionRange === "function") {
      element.setSelectionRange(0, 999);
    }

    if (window.getSelection) {
      const range = document.createRange();
      range.selectNodeContents(element);
      const selection = window.getSelection();

      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
        selection.selectAllChildren(element);
      }
    }

    if (document.body.createTextRange) {
      const range = document.body.createTextRange(); // Creates TextRange object

      range.moveToElementText(element); // sets Range

      range.select(); // make selection.
    }

    if (document.execCommand) {
      document.execCommand("selectAll", false, undefined);
    }
  }, 0);
};
/**
 * Cross-browser Document Ready check
 * @see https://www.competa.com/blog/cross-browser-document-ready-with-vanilla-javascript/
 * @param callback
 */

const ready = callback => {
  if (!callback || typeof callback !== "function") {
    return new Error("The callback is required!");
  }

  const checkReady = () => {
    if (document.readyState !== "loading") {
      callback();

      if (document.attachEvent) {
        document.detachEvent("onreadystatechange", checkReady);
      }

      document.removeEventListener("DOMContentLoaded", checkReady);
    }
  };

  if (document.attachEvent) {
    document.attachEvent("onreadystatechange", checkReady);
  }

  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", checkReady);
  }

  checkReady();
};
const loadScript = async function (src, id) {
  let async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  let defer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  const script = await new Promise((resolve, reject) => {
    let script = document.getElementById(id);

    if (script) {
      console.warn("script already loaded, do nothing.");

      if (script.hasAttribute("loaded")) {
        return resolve(script);
      }
    } else {
      script = document.createElement("script");
      script.type = "text/javascript";
      script.id = id;
      script.src = src;

      if (async) {
        script.async = true;
      }

      if (defer) {
        script.defer = true;
      }

      const head = document.head || document.getElementsByTagName("head")[0];
      head.appendChild(script);
    } // IE


    if (script.readyState) {
      script.onreadystatechange = function () {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          var _script;

          script.onreadystatechange = null;
          (_script = script) === null || _script === void 0 ? void 0 : _script.setAttribute("loaded", "true");
          resolve(script);
        }
      };
    } // Other browsers


    script.addEventListener("load", () => {
      var _script2;

      (_script2 = script) === null || _script2 === void 0 ? void 0 : _script2.setAttribute("loaded", "true");
      resolve(script);
    });
    script.addEventListener("error", function () {
      var _script3;

      const error = new Error("Error on load script " + ((_script3 = script) === null || _script3 === void 0 ? void 0 : _script3.src));
      console.error(error);
      console.error(...arguments);
      reject(error);
    });
  });
  return script;
};
const getUID = prefix => {
  do {
    prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
  } while (document.getElementById(prefix));

  return prefix;
};
/**
 * Detects if dom element is custom element and a registered riba component
 * @see https://stackoverflow.com/a/47737765/1465919
 * @param element The element or tag name you want to test
 * @param isRegistered If true the element must also be a registered as a custom element,
 * @param isUpgraded
 */

const isCustomElement = function (element) {
  let isRegistered = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let isUpgraded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  // A custom element's name is required to contain a -, whereas an HTML-defined element will not. So:
  const localName = typeof element === "string" ? element : element.localName;
  const isCustomElement = localName.indexOf("-") !== -1;

  if (isCustomElement && isRegistered && customElements) {
    const customConstructor = customElements.get(localName);

    if (!customConstructor) {
      return false;
    } // If the element is not yet upgraded the constructor is still equal to HTMLElement


    if (isUpgraded) {
      return customConstructor === element.constructor;
    } // If we don't need to check for upgraded status


    return true;
  }

  return isCustomElement;
};
/**
 * Waits for CustomElement to be upgraded, returns the element.
 * @param element The custom Element waiting for an upgrade.
 * @returns the element after the upgrade
 */

const waitForCustomElement = async element => {
  await customElements.whenDefined(element.localName);
  return element;
};
/**
 * Creating a new DOM element from an HTML string
 * @param html representing a single element
 * @example
 * ```js
 *   const td = htmlToElement("<td>foo</td>");
 *   const div = htmlToElement("<div><span>nested</span> <span>stuff</span></div>");
 * ```
 */

const htmlToElement = html => {
  const template = document.createElement("template");
  html = html.trim(); // Never return a text node of whitespace as the result

  template.innerHTML = html;
  return template.content.firstChild;
};
/**
 * Creating a new DOM elements from an HTML string
 * @param html representing any number of sibling elements
 * @example
 * ```js
 *   var rows = htmlToElements('<tr><td>foo</td></tr><tr><td>bar</td></tr>');
 * ```
 */

const htmlToElements = html => {
  const template = document.createElement("template");
  template.innerHTML = html;
  return template.content.childNodes;
};
/**
 * Converts a NodeList or HTMLCollection to an Array
 * @param nodeList
 * @returns
 */

const toArray = nodeList => {
  if (!nodeList) {
    return [];
  }

  return [].slice.call(nodeList);
};
/**
 * Check if any html element is visible in the dom
 * @param element
 * @returns
 */

const isVisible = element => {
  if (!element) {
    return false;
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    const elementStyle = getComputedStyle(element);
    const parentNodeStyle = getComputedStyle(element.parentNode);
    return elementStyle.display !== "none" && parentNodeStyle.display !== "none" && elementStyle.visibility !== "hidden";
  }

  return false;
};
/**
 * Similar to JQuery's `$(el).index();`
 * @param el
 */

const getElementIndex = el => {
  if (!el) {
    return -1;
  }

  let i = 0;

  do {
    i++;
    el = el.previousElementSibling;
  } while (el);

  return i;
};

/***/ }),

/***/ "../../packages/utils/src/env.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/env.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBrowser": function() { return /* binding */ isBrowser; },
/* harmony export */   "isDeno": function() { return /* binding */ isDeno; },
/* harmony export */   "isJsDom": function() { return /* binding */ isJsDom; },
/* harmony export */   "isNode": function() { return /* binding */ isNode; },
/* harmony export */   "isWebWorker": function() { return /* binding */ isWebWorker; }
/* harmony export */ });
// Credits https://github.com/flexdinesh/browser-or-node
// For real types see https://github.com/denoland/deno/blob/main/core/lib.deno_core.d.ts
const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
const isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
const isWebWorker = typeof self === "object" && self.constructor && self.constructor.name === "DedicatedWorkerGlobalScope";
/**
 * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0
 * @see https://github.com/jsdom/jsdom/issues/1537
 */

const isJsDom = typeof window !== "undefined" && window.name === "nodejs" || typeof navigator !== "undefined" && (navigator.userAgent.indexOf("Node.js") !== -1 || navigator.userAgent.indexOf("jsdom") !== -1);
const isDeno = typeof Deno !== "undefined" && typeof Deno.core !== "undefined";


/***/ }),

/***/ "../../packages/utils/src/immediate.ts":
/*!*********************************************!*\
  !*** ../../packages/utils/src/immediate.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearImmediate": function() { return /* binding */ clearImmediate; },
/* harmony export */   "setImmediate": function() { return /* binding */ setImmediate; }
/* harmony export */ });
var _window, _window2;

/**
 * Simplified version of https://github.com/YuzuJS/setImmediate
 * TODO Port tests
 */
let nextHandle = 1; // Spec says greater than zero

const tasksByHandle = {};
let currentlyRunningATask = false;
const messagePrefix = "setImmediate$" + Math.random() + "$";

const onGlobalMessage = function (event) {
  if (event.source === window && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
    runIfPresent(+event.data.slice(messagePrefix.length));
  }
};

if (window) {
  window.addEventListener("message", onGlobalMessage, false);
}

function registerImmediate(handle) {
  window.postMessage(messagePrefix + handle, "*");
}

function _setImmediate(callback) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  console.debug("Use setImmediate polyfill"); // Callback can either be a function or a string

  if (typeof callback !== "function") {
    callback = new Function("" + callback);
  } // Store and register the task


  const task = {
    callback: callback,
    args
  };
  tasksByHandle[nextHandle] = task;
  registerImmediate(nextHandle);
  return nextHandle++;
}

function _clearImmediate(handle) {
  delete tasksByHandle[handle];
}

function run(task) {
  const callback = task.callback;
  const args = task.args;
  callback(...args);
}

function runIfPresent(handle) {
  // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
  // So if we're currently running a task, we'll need to delay this invocation.
  if (currentlyRunningATask) {
    // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
    // "too much recursion" error.
    setTimeout(runIfPresent, 0, handle);
  } else {
    const task = tasksByHandle[handle];

    if (task) {
      currentlyRunningATask = true;

      try {
        run(task);
      } finally {
        _clearImmediate(handle);

        currentlyRunningATask = false;
      }
    }
  }
}

const setImmediate = ((_window = window) === null || _window === void 0 ? void 0 : _window.setImmediate) || _setImmediate;
const clearImmediate = ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.clearImmediate) || _clearImmediate;

/***/ }),

/***/ "../../packages/utils/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE64_PREFIX": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.BASE64_PREFIX; },
/* harmony export */   "KEYPATH": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.KEYPATH; },
/* harmony export */   "MAX_UID": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.MAX_UID; },
/* harmony export */   "PRIMITIVE": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.PRIMITIVE; },
/* harmony export */   "QUOTED_STR": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.QUOTED_STR; },
/* harmony export */   "camelCase": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.camelCase; },
/* harmony export */   "capitalize": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.capitalize; },
/* harmony export */   "classOf": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.classOf; },
/* harmony export */   "cleanLink": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.cleanLink; },
/* harmony export */   "clearImmediate": function() { return /* reexport safe */ _immediate_js__WEBPACK_IMPORTED_MODULE_6__.clearImmediate; },
/* harmony export */   "clearObjFromRiba": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.clearObjFromRiba; },
/* harmony export */   "clone": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.clone; },
/* harmony export */   "consoleColoured": function() { return /* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_1__.consoleColoured; },
/* harmony export */   "copyTextToClipboard": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.copyTextToClipboard; },
/* harmony export */   "couldBeJson": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.couldBeJson; },
/* harmony export */   "debounce": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounce; },
/* harmony export */   "debounceCb": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceCb; },
/* harmony export */   "debounceF": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceF; },
/* harmony export */   "debounceT": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceT; },
/* harmony export */   "deferred": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.deferred; },
/* harmony export */   "elementIsHidden": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.elementIsHidden; },
/* harmony export */   "elementIsVisible": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.elementIsVisible; },
/* harmony export */   "escapeHtml": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.escapeHtml; },
/* harmony export */   "extend": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.extend; },
/* harmony export */   "fromBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.fromBase64; },
/* harmony export */   "getDataset": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getDataset; },
/* harmony export */   "getElementFromEvent": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementFromEvent; },
/* harmony export */   "getElementIndex": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementIndex; },
/* harmony export */   "getHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getHash; },
/* harmony export */   "getInputValue": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getInputValue; },
/* harmony export */   "getLocation": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getLocation; },
/* harmony export */   "getNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.getNumber; },
/* harmony export */   "getOS": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.getOS; },
/* harmony export */   "getOSType": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.getOSType; },
/* harmony export */   "getPort": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getPort; },
/* harmony export */   "getRandomColor": function() { return /* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_1__.getRandomColor; },
/* harmony export */   "getScrollHeight": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getScrollHeight; },
/* harmony export */   "getScrollWidth": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getScrollWidth; },
/* harmony export */   "getString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.getString; },
/* harmony export */   "getUID": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getUID; },
/* harmony export */   "getUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getUrl; },
/* harmony export */   "getUrlParameter": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getUrlParameter; },
/* harmony export */   "getViewportDimensions": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getViewportDimensions; },
/* harmony export */   "handleize": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.handleize; },
/* harmony export */   "hasChildNodesTrim": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.hasChildNodesTrim; },
/* harmony export */   "hashCode": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.hashCode; },
/* harmony export */   "htmlToElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.htmlToElement; },
/* harmony export */   "htmlToElements": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.htmlToElements; },
/* harmony export */   "isAbsoluteUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isAbsoluteUrl; },
/* harmony export */   "isBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isBase64; },
/* harmony export */   "isBoolean": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isBoolean; },
/* harmony export */   "isBrowser": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isBrowser; },
/* harmony export */   "isCustomElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isCustomElement; },
/* harmony export */   "isDefined": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isDefined; },
/* harmony export */   "isDeno": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isDeno; },
/* harmony export */   "isDesktop": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isDesktop; },
/* harmony export */   "isExternalUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isExternalUrl; },
/* harmony export */   "isFunction": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isFunction; },
/* harmony export */   "isGameConsole": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isGameConsole; },
/* harmony export */   "isInViewport": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isInViewport; },
/* harmony export */   "isInternalUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isInternalUrl; },
/* harmony export */   "isJsDom": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isJsDom; },
/* harmony export */   "isJson": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isJson; },
/* harmony export */   "isMobile": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isMobile; },
/* harmony export */   "isNode": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isNode; },
/* harmony export */   "isNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isNumber; },
/* harmony export */   "isObject": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isObject; },
/* harmony export */   "isString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isString; },
/* harmony export */   "isUndefined": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isUndefined; },
/* harmony export */   "isVisible": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isVisible; },
/* harmony export */   "isWebWorker": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isWebWorker; },
/* harmony export */   "jsonStringify": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.jsonStringify; },
/* harmony export */   "justDigits": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.justDigits; },
/* harmony export */   "kebabCase": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.kebabCase; },
/* harmony export */   "loadScript": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.loadScript; },
/* harmony export */   "noop": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.noop; },
/* harmony export */   "normalizeUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.normalizeUrl; },
/* harmony export */   "onParentRoute": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.onParentRoute; },
/* harmony export */   "onRoute": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.onRoute; },
/* harmony export */   "pTimeout": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.pTimeout; },
/* harmony export */   "parseJsonString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.parseJsonString; },
/* harmony export */   "parseType": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.parseType; },
/* harmony export */   "ready": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.ready; },
/* harmony export */   "removeHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.removeHash; },
/* harmony export */   "replaceUmlautChars": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.replaceUmlautChars; },
/* harmony export */   "scrollTo": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrollTo; },
/* harmony export */   "scrollToPosition": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrollToPosition; },
/* harmony export */   "scrolling": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrolling; },
/* harmony export */   "selectAll": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.selectAll; },
/* harmony export */   "setAttribute": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.setAttribute; },
/* harmony export */   "setImmediate": function() { return /* reexport safe */ _immediate_js__WEBPACK_IMPORTED_MODULE_6__.setImmediate; },
/* harmony export */   "sleep": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.sleep; },
/* harmony export */   "stringHasNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringHasNumber; },
/* harmony export */   "stringHasOnlyNumbers": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringHasOnlyNumbers; },
/* harmony export */   "stringIsPhoneNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringIsPhoneNumber; },
/* harmony export */   "stripHtml": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stripHtml; },
/* harmony export */   "throttle": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.throttle; },
/* harmony export */   "times": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.times; },
/* harmony export */   "toArray": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.toArray; },
/* harmony export */   "toBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.toBase64; },
/* harmony export */   "toType": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.toType; },
/* harmony export */   "updateHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.updateHash; },
/* harmony export */   "waitForCustomElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.waitForCustomElement; },
/* harmony export */   "waitForProp": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.waitForProp; },
/* harmony export */   "withoutMultiWhitespace": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.withoutMultiWhitespace; },
/* harmony export */   "withoutSpecialChars": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.withoutSpecialChars; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/utils/src/types/index.ts");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ "../../packages/utils/src/color.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ "../../packages/utils/src/constants.ts");
/* harmony import */ var _control_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./control.js */ "../../packages/utils/src/control.ts");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./env.js */ "../../packages/utils/src/env.ts");
/* harmony import */ var _immediate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./immediate.js */ "../../packages/utils/src/immediate.ts");
/* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools.js */ "../../packages/utils/src/tools.ts");
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./url.js */ "../../packages/utils/src/url.ts");











/***/ }),

/***/ "../../packages/utils/src/tools.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/tools.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copyTextToClipboard": function() { return /* binding */ copyTextToClipboard; },
/* harmony export */   "getOS": function() { return /* binding */ getOS; },
/* harmony export */   "getOSType": function() { return /* binding */ getOSType; },
/* harmony export */   "isDesktop": function() { return /* binding */ isDesktop; },
/* harmony export */   "isGameConsole": function() { return /* binding */ isGameConsole; },
/* harmony export */   "isMobile": function() { return /* binding */ isMobile; }
/* harmony export */ });
const fallbackCopyTextToClipboard = text => {
  const textArea = document.createElement("textarea");
  textArea.value = text; // Avoid scrolling to bottom

  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    const successful = document.execCommand("copy");
    const msg = successful ? "successful" : "unsuccessful";
    console.log("Fallback: Copying text command was ".concat(msg, ": ").concat(text));
  } catch (err) {
    console.error("Fallback: Oops, unable to copy", err);
  }

  document.body.removeChild(textArea);
};
/**
 * Copy text to clipboard
 * @see https://stackoverflow.com/a/30810322
 */


const copyTextToClipboard = async text => {
  if (!navigator.clipboard) {
    fallbackCopyTextToClipboard(text);
    return;
  }

  try {
    await navigator.clipboard.writeText(text);
    console.log("Copying to clipboard was successful: " + text);
  } catch (error) {
    console.error("Could not copy text: ", error);
  }
};
/**
 * Get the Operating system the browser is running on
 * @see https://stackoverflow.com/questions/19877924/what-is-the-list-of-possible-values-for-navigator-platform-as-of-today
 * @see https://stackoverflow.com/questions/9038625/detect-if-device-is-ios
 * @see https://github.com/podlove/podlove-subscribe-button/blob/master/src/coffee/user_agent.coffee
 */

const getOS = () => {
  const ua = navigator.userAgent;
  const platform = window.navigator.platform;
  const uAs = {
    windows7: /Windows NT 6.1/,
    windows8: /Windows NT 6.2/,
    windows81: /Windows NT 6.3/,
    windows10: /Windows NT 10.0/,
    windows: /windows/i,
    windowsPhone: /trident/i,
    android: /android/i,
    ios: /(ipad|iphone|ipod)/i,
    linux: /(linux)/i,
    unix: /(openbsd|freebsd|netbsd)/i,
    osxCatalina: /macintosh.+10(_|\.)15/i,
    osxBigSur: /macintosh.+((10(_|\.)16)|(11(_|\.)))/i,
    osx: /macintosh/i,
    mac: /mac/i
  };
  const platforms = {
    linux: /Linux/i,
    unix: /(FreeBSD|OpenBSD|X11|SunOS)/i,
    webOS: /webOS/i,
    playstation3: /playstation 3/i,
    playstation4: /playstation 4/i,
    PlaystationPortable: /psp/i,
    newNintendo3Ds: /new nintendo 3ds/i,
    nintendoDsi: /nintendo dsi/i,
    nintendo3Ds: /nintendo 3ds/i,
    nintendoWii: /nintendo wii/i,
    nintendoWiiU: /nintendo wiiu/i,
    palmos: /palmos/i,
    symbian: /(nokia_series_40|s60|symbian)/i
  };

  for (const uAKey of Object.keys(uAs)) {
    const regex = uAs[uAKey];

    if (regex.test(ua)) {
      // iPad on iOS 13 detection
      if (uAKey === "mac" && "ontouchend" in document) {
        return "ios";
      }

      return uAKey;
    }
  }

  for (const platformKey of Object.keys(platforms)) {
    const regex = platforms[platformKey];

    if (regex.test(platform)) {
      return platformKey;
    }
  }

  return "Unknown";
}; // TODO test TV

const getOSType = () => {
  const os = getOS();
  let isMobile = false;
  let isDesktop = false;
  let isGameConsole = false;

  switch (os) {
    case "windows":
    case "windows10":
    case "windows7":
    case "windows8":
    case "windows81":
    case "osxBigSur":
    case "osxCatalina":
    case "osx":
    case "mac":
    case "linux":
    case "unix":
      isDesktop = true;
      break;

    case "ios":
    case "android":
    case "windowsPhone":
    case "symbian":
      isMobile = true;
      break;
  }

  if (os.indexOf("playstation") !== -1 || os.indexOf("nintendo") !== -1) {
    isGameConsole = true;
  }

  return {
    isMobile,
    isDesktop,
    isGameConsole
  };
};
const isMobile = () => {
  return getOSType().isMobile;
};
const isDesktop = () => {
  return getOSType().isDesktop;
};
const isGameConsole = () => {
  return getOSType().isGameConsole;
};

/***/ }),

/***/ "../../packages/utils/src/type.ts":
/*!****************************************!*\
  !*** ../../packages/utils/src/type.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "camelCase": function() { return /* binding */ camelCase; },
/* harmony export */   "capitalize": function() { return /* binding */ capitalize; },
/* harmony export */   "classOf": function() { return /* binding */ classOf; },
/* harmony export */   "clearObjFromRiba": function() { return /* binding */ clearObjFromRiba; },
/* harmony export */   "clone": function() { return /* binding */ clone; },
/* harmony export */   "couldBeJson": function() { return /* binding */ couldBeJson; },
/* harmony export */   "escapeHtml": function() { return /* binding */ escapeHtml; },
/* harmony export */   "extend": function() { return /* binding */ extend; },
/* harmony export */   "fromBase64": function() { return /* binding */ fromBase64; },
/* harmony export */   "getNumber": function() { return /* binding */ getNumber; },
/* harmony export */   "getString": function() { return /* binding */ getString; },
/* harmony export */   "handleize": function() { return /* binding */ handleize; },
/* harmony export */   "hashCode": function() { return /* binding */ hashCode; },
/* harmony export */   "isBase64": function() { return /* binding */ isBase64; },
/* harmony export */   "isBoolean": function() { return /* binding */ isBoolean; },
/* harmony export */   "isDefined": function() { return /* binding */ isDefined; },
/* harmony export */   "isFunction": function() { return /* binding */ isFunction; },
/* harmony export */   "isJson": function() { return /* binding */ isJson; },
/* harmony export */   "isNumber": function() { return /* binding */ isNumber; },
/* harmony export */   "isObject": function() { return /* binding */ isObject; },
/* harmony export */   "isString": function() { return /* binding */ isString; },
/* harmony export */   "isUndefined": function() { return /* binding */ isUndefined; },
/* harmony export */   "jsonStringify": function() { return /* binding */ jsonStringify; },
/* harmony export */   "justDigits": function() { return /* binding */ justDigits; },
/* harmony export */   "kebabCase": function() { return /* binding */ kebabCase; },
/* harmony export */   "parseJsonString": function() { return /* binding */ parseJsonString; },
/* harmony export */   "parseType": function() { return /* binding */ parseType; },
/* harmony export */   "replaceUmlautChars": function() { return /* binding */ replaceUmlautChars; },
/* harmony export */   "stringHasNumber": function() { return /* binding */ stringHasNumber; },
/* harmony export */   "stringHasOnlyNumbers": function() { return /* binding */ stringHasOnlyNumbers; },
/* harmony export */   "stringIsPhoneNumber": function() { return /* binding */ stringIsPhoneNumber; },
/* harmony export */   "stripHtml": function() { return /* binding */ stripHtml; },
/* harmony export */   "toBase64": function() { return /* binding */ toBase64; },
/* harmony export */   "toType": function() { return /* binding */ toType; },
/* harmony export */   "withoutMultiWhitespace": function() { return /* binding */ withoutMultiWhitespace; },
/* harmony export */   "withoutSpecialChars": function() { return /* binding */ withoutSpecialChars; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "../../packages/utils/src/constants.ts");

/**
 * Fixed version of typeof operator
 * @param obj
 * @see https://goo.gl/pxwQGp
 */

const toType = obj => {
  const matches = {}.toString.call(obj).match(/\s([a-z]+)/i);
  return matches ? matches[1].toLowerCase() : null;
};
/**
 * Formats an object to a json string with the special feature that single quotes are replaced.
 * This way there are no conflicts when this json string is used as attribute value afterwards.
 * @note This function is used by the JsonFormatter
 * @see parseJsonString
 * @param object
 * @param space
 * @param replaceSingleQuote
 * @returns
 */

const jsonStringify = function (object) {
  let space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  let replaceSingleQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const result = JSON.stringify(object, null, space);

  if (replaceSingleQuote && result) {
    return result.replace(/'/g, "&#39;");
  }

  return result;
};
/**
 * Parses a json string with the special feature that json strings
 * can also have single quotations for defining the properties and values
 * @see jsonStringify
 */

const parseJsonString = value => {
  let object = null;

  if (!value) {
    return object;
  }

  if (!couldBeJson(value)) {
    return object;
  }

  if (isJson(value)) {
    object = JSON.parse(value) || null;
  } else {
    try {
      // Transform an invalid json string with single quotation to a valid json string with double quotation
      object = JSON.parse(value.replace(/'/g, '"')) || null;
    } catch (error) {
      console.warn("Can't parse json string of \"".concat(value, "\" "), error);
    }
  }

  return object;
};
const couldBeJson = str => {
  if (!str || typeof str !== "string") {
    return false;
  }

  str = str.trim();
  return str.charAt(0) === "{" && str.charAt(str.length - 1) === "}" || str.charAt(0) === "[" && str.charAt(str.length - 1) === "]";
};
/**
 * Test if a string is base64 encoded
 * Note, this is not a general function and is used internally by Riba.js by prefixing a base64 string with "base64:".
 * So if you want to use this method make sure that you prefix your base64 strings with "base64:".
 */

const isBase64 = str => {
  if (!str) return false;
  if (typeof str !== "string") return false;
  return str.startsWith(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX);
};
/**
 * Decode an string or object to base64
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_2_%E2%80%93_rewriting_atob_and_btoa_using_typedarrays_and_utf-8
 * @param obj
 * @returns
 */

const toBase64 = obj => {
  if (isObject(obj)) {
    obj = JSON.stringify(obj, null, 0);
  }

  return _constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX + btoa(encodeURIComponent(obj));
};
/**
 * Encode an base64 string back
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_2_%E2%80%93_rewriting_atob_and_btoa_using_typedarrays_and_utf-8
 * @param obj
 * @returns
 */

const fromBase64 = base64 => {
  if (typeof base64 !== "string") {
    return "Not a base64 string!";
  }

  if (base64.startsWith(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX)) {
    base64 = base64.substring(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX.length);
  }

  const maybeDecodedUri = atob(base64);
  let encoded;

  try {
    encoded = decodeURIComponent(maybeDecodedUri);
  } catch (error) {
    encoded = maybeDecodedUri;
  }

  return parseType(encoded, false).value;
};
/**
 * Test if string is a json string
 * @param str
 */

const isJson = str => {
  if (!str || !couldBeJson(str)) {
    return false;
  }

  try {
    const val = JSON.parse(str);
    return Array.isArray(val) || typeof val === "object" ? true : false;
  } catch (error) {
    return false;
  }
};
/**
 * Parser and tokenizer for getting the type and value from a string.
 * @param string
 */

const parseType = function (input) {
  let isAttribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let type = _constants__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE;
  let value = input;

  if (input === undefined) {
    return {
      type,
      value: undefined
    };
  }

  if (input === null) {
    return {
      type,
      value: null
    };
  }

  if (_constants__WEBPACK_IMPORTED_MODULE_0__.QUOTED_STR.test(input)) {
    value = parseType(input.slice(1, -1), isAttribute).value;
  } else if (input === "true") {
    value = true;
  } else if (input === "false") {
    value = false;
  } else if (input === "null") {
    value = null;
  } else if (input === "undefined") {
    value = undefined;
  } else if (input === "") {
    // An empty attribute should be handled has a true value
    if (isAttribute) {
      value = true;
    } else {
      value = "";
    }
  } else if (!isNaN(Number(input))) {
    value = Number(input); // If number is too large store the value as string

    if (value >= Number.MAX_SAFE_INTEGER) {
      value = input;
    }
  } else if (isBase64(value)) {
    value = fromBase64(value);
  } else if (couldBeJson(value)) {
    const jsonString = parseJsonString(value);
    value = jsonString ? jsonString : value;
  } else {
    type = _constants__WEBPACK_IMPORTED_MODULE_0__.KEYPATH;
  }

  return {
    type,
    value
  };
};
/**
 * Check if value is undefined
 */

const isUndefined = value => {
  return typeof value === "undefined";
};
/**
 * Check if value is undefined
 */

const isDefined = value => {
  return !isUndefined(value);
};
/**
 * Check if type is Object
 * @see https://stackoverflow.com/a/4775737/1465919
 */

const isObject = obj => {
  return isDefined(obj) && typeof obj === "object" && obj !== null;
};
/**
 * Parse value to string or return undefined if value is null
 * @param value
 */

const getString = value => {
  return value !== null && value !== void 0 && value.toString ? value.toString() : undefined;
};
/**
 * Parse value to number or return 0 if value is null or undefined
 * @param value
 */

const getNumber = value => {
  return value ? parseFloat(value) : undefined;
};
/**
 * Check if value is a function
 */

const isFunction = value => {
  return typeof value === "function";
};
/**
 * Check whether variable is number or a string with numbers in JavaScript
 * @see https://stackoverflow.com/a/1421988/1465919
 */

const isNumber = value => {
  return !isNaN(parseFloat(value)) && !isNaN(value - 0);
};
/**
 * Check if type is Boolean
 * @see https://stackoverflow.com/a/28814615/1465919
 */

const isBoolean = value => {
  return typeof value === typeof true;
};
/**
 * Check if value is a string
 */

const isString = value => {
  return typeof value === "string";
};
/**
 * Check if string contains a number
 */

const stringHasNumber = value => {
  return isString(value) && /\d/.test(value);
};
/**
 * Check if string contains only numbers
 */

const stringHasOnlyNumbers = value => {
  return /^\d+$/.test(value);
};
/**
 * Check if string contains only numbers, +, - and ()
 */

const stringIsPhoneNumber = value => {
  return /^[0-9 ()+-]+$/.test(value);
};
/**
 * Just get the digits of a string, useful to remove px pixel from css value
 *
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const justDigits = str => {
  if (typeof str === "number") {
    return str;
  }

  const num = str.replace(/[^-\d.]/g, "");

  if (!isNumber(num)) {
    return 0;
  } else {
    return Number(num);
  }
};
const escapeHtml = html => {
  return html.replace(/[&<>'"]/g, c => ({
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  })[c]);
};
/**
 * Remove all special chars from a string
 * @see https://stackoverflow.com/a/11090301/1465919
 * @param str
 */

const withoutSpecialChars = str => {
  // str = str.replace(/[^\w\s]/gi, ""); // http://stackoverflow.com/a/4374890
  str = str.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, "");
  return str;
};
/**
 * Replace all umlaut chars from string like ä with ae
 * @param str
 */

const replaceUmlautChars = str => {
  str = str.replace(/ä/g, "ae").replace(/ö/g, "oe").replace(/ü/g, "ue").replace(/ß/g, "ss").replace(/Ä/g, "Ae").replace(/Ö/g, "Oe").replace(/Ü/g, "Üe");
  return str;
};
/**
 * Removes multiple tabs, newlines, etc from a string
 * @param str
 */

const withoutMultiWhitespace = str => {
  str = str.replace(/\s\s+/g, " ");
  return str;
};
/**
 * Formats a string into a handle.
 * E.g. '100% M & Ms!!!' -> 100-m-ms
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#handle-handleize
 */

const handleize = str => {
  str = str.trim();
  str = str.toLowerCase();
  str = withoutMultiWhitespace(str);
  str = withoutSpecialChars(str);
  str = replaceUmlautChars(str);
  str = str.replace(/ /g, "-");
  return str;
};
const stripHtml = html => {
  const tmp = document.createElement("DIV");
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || "";
};
/**
 * foo-bar -> fooBar
 * Returns a camel-cased version of the string. Used when translating an
 * element's attribute name into a property name for the component's scope.
 * @param str
 */

const camelCase = str => {
  return str.replace(/-([a-z0-9])/g, grouped => {
    return grouped[1].toUpperCase();
  });
};
/**
 * fooBar -> foo-bar
 */

const kebabCase = str => {
  return str.replace(/[A-Z]/g, letter => "-".concat(letter.toLowerCase()));
};
/**
 * uppercase's the first letter of a string
 * @param str
 */

const capitalize = str => {
  if (typeof str !== "string") return "";
  return str.charAt(0).toUpperCase() + str.slice(1);
};
/**
 * Merge the contents of two or more objects together into the first object.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param target An object that will receive the new properties
 * @param objects The objects containing additional properties to merge in.
 * @see http://www.damirscorner.com/blog/posts/20180216-VariableNumberOfArgumentsInTypescript.html
 * @see https://gomakethings.com/merging-objects-with-vanilla-javascript/
 */

const extend = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Merge the object into the extended object
  const merge = obj => {
    for (const prop in obj) {
      if (Object.hasOwnProperty.bind(obj)(prop)) {
        if (options.deep && Object.prototype.toString.call(obj[prop]) === "[object Object]") {
          // If we're doing a deep merge and the property is an object
          extended[prop] = extend(options, extended[prop], obj[prop]);
        } else {
          // Otherwise, do a regular merge
          if (options.keepValues) {
            // Only overwrite target value if the target value is undefined
            if (typeof extended[prop] === "undefined") {
              extended[prop] = obj[prop];
            }
          } else if (options.onlyDefined) {
            // Only overwrite target value if the source value is defined / not undefined
            if (typeof obj[prop] !== "undefined") {
              extended[prop] = obj[prop];
            }
          } else if (options.mergeArrays) {
            // Merge array if both values are array's
            if (Array.isArray(extended[prop]) && Array.isArray(obj[prop])) {
              extended[prop] = [...extended[prop], ...obj[prop]];
            } else {
              extended[prop] = obj[prop];
            }
          } else {
            extended[prop] = obj[prop];
          }
        }
      }
    }
  }; // Loop through each object and conduct a merge


  for (let i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    merge(i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2]);
  }

  return extended;
};
/**
 * Clone an object, array or any primitive type like numbers or strings.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param val The value(s) to clone
 */

const clone = (deep, val) => {
  if (Array.isArray(val)) {
    if (deep) {
      return val.map(x => clone(true, x));
    } else {
      return val.slice();
    }
  }

  if (isObject(val)) {
    return extend({
      deep
    }, {}, val);
  } // Primitive types like numbers and strings are copied by default


  return val;
};
/**
 * Get the class `"that"`
 * @param that
 */

const classOf = that => {
  return that.constructor;
};
/**
 * Removes internal riba properties from an object
 * @param obj
 * @return Cleared new object
 */

const clearObjFromRiba = obj => {
  if (Array.isArray(obj)) {
    return obj.map(x => isObject(x) ? clearObjFromRiba(x) : x);
  }

  const newObj = {};

  for (const key in obj) {
    if (key !== "__rv") {
      if (isObject(obj[key])) {
        newObj[key] = clearObjFromRiba(obj[key]);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  return newObj;
};
/**
 * Generate a Hash from string
 * @param str The string
 * @returns hash code
 * @see https://stackoverflow.com/a/7616484
 */

const hashCode = str => {
  let hash = 0;
  let i;
  let chr;
  if (str.length === 0) return hash;

  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
};

/***/ }),

/***/ "../../packages/utils/src/types/deferred.ts":
/*!**************************************************!*\
  !*** ../../packages/utils/src/types/deferred.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/utils/src/types/index.ts":
/*!***********************************************!*\
  !*** ../../packages/utils/src/types/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _deferred_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferred.js */ "../../packages/utils/src/types/deferred.ts");
/* harmony import */ var _timeout_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timeout-promise.js */ "../../packages/utils/src/types/timeout-promise.ts");



/***/ }),

/***/ "../../packages/utils/src/types/timeout-promise.ts":
/*!*********************************************************!*\
  !*** ../../packages/utils/src/types/timeout-promise.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/utils/src/url.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/url.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cleanLink": function() { return /* binding */ cleanLink; },
/* harmony export */   "getHash": function() { return /* binding */ getHash; },
/* harmony export */   "getLocation": function() { return /* binding */ getLocation; },
/* harmony export */   "getPort": function() { return /* binding */ getPort; },
/* harmony export */   "getUrl": function() { return /* binding */ getUrl; },
/* harmony export */   "getUrlParameter": function() { return /* binding */ getUrlParameter; },
/* harmony export */   "isAbsoluteUrl": function() { return /* binding */ isAbsoluteUrl; },
/* harmony export */   "isExternalUrl": function() { return /* binding */ isExternalUrl; },
/* harmony export */   "isInternalUrl": function() { return /* binding */ isInternalUrl; },
/* harmony export */   "normalizeUrl": function() { return /* binding */ normalizeUrl; },
/* harmony export */   "onParentRoute": function() { return /* binding */ onParentRoute; },
/* harmony export */   "onRoute": function() { return /* binding */ onRoute; },
/* harmony export */   "removeHash": function() { return /* binding */ removeHash; },
/* harmony export */   "updateHash": function() { return /* binding */ updateHash; }
/* harmony export */ });
/**
 * get param from hash
 */
const getUrlParameter = (name, url) => {
  if (!url) {
    url = window.location.href;
  }

  name = name.replace(/[[\]]/g, "\\$&");
  const regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
  const results = regex.exec(url);

  if (!results) {
    return null;
  }

  if (!results[2]) {
    return "";
  }

  return decodeURIComponent(results[2].replace(/\+/g, " "));
};
/**
 * get location object ofpath or address bar
 * @see http://stackoverflow.com/a/736970/1465919
 *
 * @example
 * var l = getLocation("http://example.com:3000/pathname/?search=test#hash");
 * =>
 * l.protocol; // => "http:"
 * l.host;     // => "example.com:3000"
 * l.hostname; // => "example.com"
 * l.port;     // => "3000"
 * l.pathname; // => "/pathname/"
 * l.hash;     // => "#hash"
 * l.search;   // => "?search=test"
 * l.origin;   // => "http://example.com:3000"
 */

const getLocation = url => {
  if (!url) {
    return window.location;
  }

  const l = document.createElement("a");
  l.href = url;
  return l;
};
/**
 * If the webapps url is https://mysupersite.org and the url is https://mysupersite.org/subpage?search=test
 * this method will return /subpage?search=test
 * If the url is https://anothersite.org/subpage?search=test this method will return https://anothersite.org/subpage?search=test
 * @param url
 */

const normalizeUrl = url => {
  const location = getLocation(url);
  const curHostname = getLocation().hostname;

  if (location.hostname === curHostname) {
    return {
      url: location.pathname + location.search + location.hash,
      location
    };
  } else {
    return {
      url: getUrl(url),
      location
    };
  }
};
/**
 * Return the current full url
 *
 * @return {string} currentUrl
 */

const getUrl = url => {
  const location = getLocation(url);
  return location.protocol + "//" + location.host + location.pathname + location.search + location.hash;
};
/**
 * Check if we are on the route
 */

const onRoute = function (checkUrl) {
  let compareQueryParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (checkUrl) {
    const location1 = getLocation();
    const location2 = getLocation(checkUrl);

    if (compareQueryParam) {
      // TODO ignore query parameter order
      if (location1.search !== location2.search) {
        return false;
      }
    }

    return location1.hostname === location2.hostname && location1.pathname === location2.pathname;
  }

  return false;
};
/**
 * Check if the current location url stats with a url or is equal
 */

const onParentRoute = checkUrl => {
  if (checkUrl) {
    const location = getLocation();
    const pathname = location.pathname;
    const hostname = location.hostname;
    const checkLocation = getLocation(checkUrl);
    const checkPathname = checkLocation.pathname;
    const checkHostname = checkLocation.hostname;
    return hostname === checkHostname && pathname.startsWith(checkPathname);
  }

  return false;
};
/**
 * Given an url, return it without the hash
 *
 * @param url
 * @return newCleanUrl
 */

const cleanLink = url => {
  return url.replace(/#.*/, "");
};
/**
 * Return the port number normalized, eventually you can pass a string to be normalized.
 *
 * @param p
 * @return port
 */

const getPort = (p, url) => {
  const location = getLocation(url);
  const port = typeof p !== "undefined" ? p : location.port;
  const protocol = location.protocol;

  if (port !== "") {
    return Number(port);
  }

  if (protocol === "http:") {
    return 80;
  }

  if (protocol === "https:") {
    return 443;
  }
};
/**
 * Test if url is absolute or relative
 * @see https://stackoverflow.com/a/19709846/1465919
 */

const isAbsoluteUrl = url => {
  if (!url) {
    return false;
  }

  const isProtokoll = new RegExp("^(?:[a-z]+:)?//", "i");
  const isAbsolute = isProtokoll.test(url) || url.startsWith("mailto:") || url.startsWith("tel:") || url.startsWith("fax:");
  return isAbsolute;
};
const isExternalUrl = absoluteUrl => {
  if (isAbsoluteUrl(absoluteUrl)) {
    const location = getLocation();
    const host = location.protocol + "//" + location.hostname;
    let isExternal = true;

    if (absoluteUrl.startsWith(host)) {
      isExternal = false;
    }

    return isExternal;
  }

  return false;
};
const isInternalUrl = url => {
  return !isExternalUrl(url);
};
/**
 * Get hash from address bar or url if set
 */

const getHash = url => {
  return getLocation(url).hash;
};
/**
 * Change hash from address bar
 */

const updateHash = hash => {
  return window.location.hash = hash;
};
/**
 * Remove hash from address bar
 */

const removeHash = () => {
  return history.pushState("", document.title, window.location.pathname + window.location.search);
};

/***/ }),

/***/ "./src/ts/components/bind-content/bind-content.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/bind-content/bind-content.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"wrapper\"> <div class=\"icon\"></div> <p>Click to load example</p> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/example-tabs/example-tabs.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/example-tabs/example-tabs.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"col-12 px-0\"> <div rv-scrollbar-draggable role=\"tablist\" class=\"tab-list nav nav-tabs nav-tabs-underline d-flex flex-scrollbar-x-auto scrollbar-y-hidden scrollbar-primary-on-hover\" role=\"tablist\"> <div role=\"tab\" class=\"flex-grow-1 nav-item nav-link d-inline-block text-nowrap text-center\" rv-each-tab=\"items\" rv-class-active=\"tab.active\" rv-add-class=\"'tab-title-' | append tab.handle\" rv-id=\"'tab-title-' | append handle | append '-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append handle | append '-' | append tab.handle\" rv-html=\"tab.title\" rv-title=\"tab.title\" rv-on-click=\"activate | args tab\" rv-aria-selected=\"tab.active\"></div> </div> <div class=\"tab-content mx-auto\"> <div role=\"tabpanel\" class=\"tab-pane\" rv-each-tab=\"items\" rv-class-active=\"tab.active\" rv-class-show=\"tab.active\" rv-add-class=\"'tab-content-' | append tab.handle\" rv-id=\"'tab-content-' | append handle | append '-' | append tab.handle\" rv-template=\"tab.content\" rv-aria-labelledby=\"'tab-title-' | append handle | append '-' | append tab.handle\"> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/file-tree/file-tree.component.html":
/*!**************************************************************!*\
  !*** ./src/ts/components/file-tree/file-tree.component.html ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/icon-preview/icon-preview.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/icon-preview/icon-preview.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<h2 rv-text=\"name\"></h2> <div class=\"row\"> <section #sizes class=\"col-12\"> <h3>Sizes</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-size=\"sizes\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" rv-size=\"size\" color=\"black\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"size\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #colors class=\"col-12\"> <h3>Colors</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-color=\"colors\" rv-add-class=\"color | prepend 'example-color-'\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" size=\"32\" rv-color=\"color\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"color\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #directions class=\"col-12\"> <h3>Directions</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-direction=\"directions\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" size=\"32\" rv-direction=\"direction\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"direction\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #directions class=\"col-12\"> <h3>Example</h3> <pre class=\"language-html\"><code class=\"language-html\" rv-html=\"example\"></code></pre> </section> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/shopify-linklist/shopify-linklist.component.html":
/*!****************************************************************************!*\
  !*** ./src/ts/components/shopify-linklist/shopify-linklist.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav class=\"nav\" rv-add-class=\"linklist.handle\" rv-class-nav-pills=\"pills\" rv-class-w-100=\"vertical\" rv-class-flex-column=\"vertical\" rv-class-flex-row=\"vertical | not\"> <div class=\"nav-item nav-item-level-0\" rv-each-link=\"linklist.links\"> <a rv-if=\"link.collapseable | not\" class=\"nav-link\" rv-class-active=\"link.active\" rv-route-class-active=\"link.url\" rv-route=\"link.url\" rv-href=\"link.url\"> <span>{link.title}</span> </a> <div rv-if=\"link.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args link\"> <span>{link.title}</span> </div> <div class=\"nav-item nav-item-level-1\" rv-hide=\"link.collapsed\" rv-each-sublink=\"link.links\"> <a rv-if=\"sublink.collapseable | not\" class=\"nav-link\" rv-add-class=\"sublink.level | prepend 'level-'\" rv-class-active=\"sublink.active\" rv-route-class-active=\"sublink.url\" rv-route=\"sublink.url\" rv-href=\"sublink.url\"> <span>{sublink.title}</span> </a> <div rv-if=\"sublink.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args sublink\"> <span>{sublink.title}</span> </div> <div class=\"nav-item nav-item-level-2\" rv-hide=\"sublink.collapsed\" rv-each-subsublink=\"sublink.links\"> <a class=\"nav-link\" rv-add-class=\"subsublink.level | prepend 'level-'\" rv-class-active=\"subsublink.active\" rv-route-class-active=\"subsublink.url\" rv-route=\"subsublink.url\" rv-href=\"subsublink.url\"> <span>{subsublink.title}</span> </a> </div> </div> </div> </nav> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<bs4-tabs option-tabs-angle=\"vertical\" tab-0-title=\"Tab 0\" tab-0-content=\"<p class='my-3'>Hello from <strong>tab 0</strong></p>\" tab-1-title=\"Tab 1\" tab-1-content=\"<p class='my-3'>Hello from <strong>tab 1</strong></p>\" tab-2-title=\"Tab 2\" tab-2-content=\"<p class='my-3'>Hello from <strong>tab 2</strong></p>\" tab-3-title=\"Tab 3\" tab-3-content=\"<p class='my-3'>Hello from <strong>tab 3</strong></p>\" tab-4-title=\"Tab 4\" tab-4-content=\"<p class='my-3'>Hello from <strong>tab 4</strong></p>\" tab-5-title=\"Tab 5\" tab-5-content=\"<p class='my-3'>Hello from <strong>tab 5</strong></p>\" tab-6-title=\"Tab 6\" tab-6-content=\"<p class='my-3'>Hello from <strong>tab 6</strong></p>\" tab-7-title=\"Tab 7\" tab-7-content=\"<p class='my-3'>Hello from <strong>tab 7</strong></p>\" tab-8-title=\"Tab 8\" tab-8-content=\"<p class='my-3'>Hello from <strong>tab 8</strong></p>\" tab-9-title=\"Tab 9\" tab-9-content=\"<p class='my-3'>Hello from <strong>tab 9</strong></p>\"></bs4-tabs> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html":
/*!**************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<bs4-tabs> <template title=\"Tab 0\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/7c00b5/FFFFFF?text=Tab%200\" alt=\"Tab 0\"> </template> <template title=\"Tab 1\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/00b56a/FFFFFF?text=Tab%201\" alt=\"Tab 1\"> </template> <template title=\"Tab 2\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/001f3f/FFFFFF?text=Tab%202\" alt=\"Tab 2\"> </template> <template title=\"Tab 3\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/0074D9/FFFFFF?text=Tab%203\" alt=\"Tab 3\"> </template> <template title=\"Tab 4\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/7FDBFF/FFFFFF?text=Tab%204\" alt=\"Tab 4\"> </template> <template title=\"Tab 5\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/39CCCC/FFFFFF?text=Tab%205\" alt=\"Tab 5\"> </template> <template title=\"Tab 6\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/3D9970/FFFFFF?text=Tab%206\" alt=\"Tab 6\"> </template> <template title=\"Tab 7\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/2ECC40/FFFFFF?text=Tab%207\" alt=\"Tab 7\"> </template> <template title=\"Tab 8\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/FF851B/FFFFFF?text=Tab%208\" alt=\"Tab 8\"> </template> <template title=\"Tab 9\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/85144b/FFFFFF?text=Tab%209\" alt=\"Tab 9\"> </template> </bs4-tabs> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav> <button rv-on-click=\"push\">Push</button> <button rv-on-click=\"pop\">Pop</button> <button rv-on-click=\"shift\">Shift</button> <button rv-on-click=\"unshift\">Unshift</button> <button rv-on-click=\"splice\">Splice</button> <button rv-on-click=\"sort\">Sort</button> <button rv-on-click=\"reset\">Reset</button> </nav> <section> <div rv-each-item=\"items\"> <div>Item { %item% } / { item.name }</div> </div> </section> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html":
/*!**************************************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html ***!
  \**************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row flex-column flex-md-row d-flex flex-nowrap h-100\"> <div class=\"col bg-light text-dark touch-zone\" rv-scroll-events rv-scrollbar-draggable rv-on-scrollstart=\"log | args 'scrollstart'\" rv-on-scrollended=\"log | args 'scrollended'\" rv-on-scrollleft=\"log | args 'scrollleft'\" rv-on-scrollright=\"log | args 'scrollright'\" rv-on-scrollup=\"log | args 'scrollup'\" rv-on-scrolldown=\"log | args 'scrolldown'\" rv-on-scrolling=\"log | args 'scrolling'\" rv-on-scrollend=\"log | args '(native scrollend)'\" rv-on-scroll=\"log | args '(native scroll)'\"> <div class=\"touch-zone-background d-flex justify-content-center align-items-center h-100 w-100\">Scroll here</div> <div class=\"touch-space\"></div> </div> <div class=\"col-12 col-md-6 col-lg-4 col-xl-4 bg-dark text-light py-3 h-100 console\"> <p class=\"log\"> <span class=\"no-data\">Start touching to send data to this console.</span> </p> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html":
/*!*********************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row flex-column flex-md-row d-flex flex-nowrap h-100\"> <div class=\"col-md-7 col-lg-8 col-xl-9 bg-light text-dark py-3 d-flex justify-content-center align-items-center touch-zone\" rv-touch-events rv-on-tapstart=\"log | args 'tapstart'\" rv-on-tapend=\"log | args 'tapend'\" rv-on-tap=\"log | args 'tap'\" rv-on-tap2=\"log | args 'tap2'\" rv-on-tap3=\"log | args 'tap3'\" rv-on-singletap=\"log | args 'singletap'\" rv-on-doubletap=\"log | args 'doubletap'\" rv-on-taphold=\"log | args 'taphold'\" rv-on-swipe=\"log | args 'swipe'\" rv-on-swipeup=\"log | args 'swipeup'\" rv-on-swiperight=\"log | args 'swiperight'\" rv-on-swipedown=\"log | args 'swipedown'\" rv-on-swipeleft=\"log | args 'swipeleft'\" rv-on-swipeend=\"log | args 'swipeend'\"> <span>Touch here</span> </div> <div class=\"col-md-5 col-lg-4 col-xl-3 bg-dark text-light py-3 h-100 console\"> <p class=\"log\"> <span class=\"no-data\">Start touching to send data to this console.</span> </p> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html":
/*!***********************************************************************************************************!*\
  !*** ./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<i18n-switcher> <p><strong rv-i18n-text=\"'examples.i18n.switch_language'\"></strong></p> <div class=\"btn-group\" role=\"group\"> <button type=\"button\" class=\"btn btn-secondary text-uppercase\" rv-each-langcode=\"langcodes\" rv-text=\"langcode.code\" rv-on-click=\"switch | args langcode\" rv-class-active=\"langcode.active\">Left</button> </div> </i18n-switcher> <div class=\"form-row my-5\"> <div class=\"col-12\"> <h1 rv-i18n-text=\"'examples.newsletter.title'\"></h1> <p rv-i18n-html=\"'examples.newsletter.description_html'\"></p> </div> <div class=\"col\"> <input type=\"text\" class=\"form-control\" rv-i18n-value=\"'examples.newsletter.input_value'\"/> </div> <div class=\"col\"> <input type=\"text\" class=\"form-control\" rv-i18n-placeholder=\"'examples.newsletter.placeholder_last_name'\"/> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"accordion\"> <div class=\"card\" rv-each-item=\"items\"> <button type=\"button\" class=\"btn btn-link card-header d-flex\" rv-on-click=\"toggle | args item %item%\" rv-aria-expanded=\"item.show\"> <span class=\"card-header-text mr-auto\" rv-html=\"item.title\"></span> <bs4-icon class=\"ml-auto\" rv-show=\"collapseIconSrc\" rv-src=\"collapseIconSrc\" rv-size=\"collapseIconSize\" rv-direction=\"item.iconDirection\"></bs4-icon> </button> <div class=\"collapse\" rv-data-index=\"%item%\"> <div class=\"card-body\" rv-template=\"item.content\"></div> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html":
/*!****************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"picker_arrow\"></div> <div class=\"picker_hue picker_slider\" rv-style-color=\"cssHsl\"> <div class=\"picker_selector\"></div> </div> <div class=\"picker_sl\" rv-style-background-color=\"cssHue\" rv-style-color=\"cssHsl\"> <div class=\"picker_selector\"></div> </div> <div class=\"picker_alpha picker_slider\" rv-show=\"alpha\" rv-style-background-image=\"alphaBg\"> <div class=\"picker_selector\"></div> </div> <input class=\"picker_editor form-control\" rv-show=\"editor\" aria-label=\"Type a color name or hex value\" rv-value=\"color\"/> <div class=\"picker_sample\" rv-style-color=\"cssHsla\"></div> <button class=\"btn btn-success picker_done\" rv-show=\"okayButton\">Ok</button> <button class=\"btn btn-danger picker_cancel\" rv-show=\"cancelButton\">Cancel</button> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul class=\"list-unstyled list-contents list-contents-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\"> <a class=\"nav-link p-0\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\"> <a class=\"nav-link p-0\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-form/bs4-form.component.html":
/*!**************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-form/bs4-form.component.html ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<form> </form>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" rv-add-class=\"modal.contextualClass | prepend 'modal-'\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\" rv-show=\"modal.title\"> <h5 class=\"modal-title\" rv-template=\"modal.title\"></h5> <button type=\"button\" class=\"close\" aria-label=\"Close\" rv-on-click=\"dismiss\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"modal-body\"> <p rv-template=\"modal.message\"></p> </div> <div class=\"modal-footer\" rv-show=\"modal.buttons | size | gt 0\"> <div rv-each-button=\"modal.buttons\"> <button type=\"button\" class=\"btn\" rv-add-class=\"button.class\" rv-on-click=\"button.action\" rv-template=\"modal.label\"></button> </div> </div> </div> </div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html":
/*!**************************************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"toast-container\"> <div aria-live=\"polite\" aria-atomic=\"true\" class=\"toast-item-container\" rv-add-class=\"positionClass\"> <div rv-each-toast=\"notifications\"> <div rv-if=\"toast.type | eq 'toast'\"> <bs4-toast-item rv-index=\"%toast%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-toast=\"toast\"></bs4-toast-item> </div> </div> </div> </div> <div rv-each-modal=\"notifications\"> <div rv-if=\"modal.type | eq 'modal'\"> <bs4-modal-item rv-index=\"%modal%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-modal=\"modal\"></bs4-modal-item> </div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul class=\"list-unstyled list-scrollspy list-scrollspy-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\" rv-bs4-scrollspy-active=\"anachor.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\" rv-bs4-scrollspy-active=\"child.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\" rv-bs4-scrollspy-active=\"childchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\" rv-bs4-scrollspy-active=\"childchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div rv-add-class=\"'drop' | append dropdownDirection\"> <div class=\"dropdown-toggle dropdown-toggle-share\" rv-id=\"dropdownId\" rv-template=\"labelTemplate\"></div> <div class=\"dropdown-menu\" rv-aria-labelledby=\"dropdownId\"> <a rv-each-item=\"shareItems\" rv-show=\"item.available\" rv-download=\"item.type | eq 'download'\" rv-type=\"item.type\" target=\"_blank\" rv-on-click=\"shareOnService\" class=\"dropdown-item\" rv-href=\"item.url\" rv-html=\"item.label\"></a> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.label.html":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.label.html ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-text=\"label\"></div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html":
/*!*********************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-prev\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"prev\" rv-on-click=\"prev\"> <bs4-icon rv-if=\"controlPrevIconSrc\" rv-src=\"controlPrevIconSrc\" direction=\"left\" size=\"24\"></bs4-icon> <span rv-hide=\"controlPrevIconSrc\" class=\"btn btn-link slideshow-control-fallback-prev-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Previous</span> </button> <button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-next\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"next\" rv-on-click=\"next\"> <bs4-icon rv-if=\"controlNextIconSrc\" rv-src=\"controlNextIconSrc\" direction=\"right\" size=\"24\"></bs4-icon> <span rv-hide=\"controlNextIconSrc\" class=\"slideshow-control-fallback-next-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Next</span> </button> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html":
/*!***********************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ol rv-if=\"indicators\" class=\"slideshow-indicators\" rv-add-class=\"indicatorsPositionClass\"> <li rv-each-slide=\"items\" rv-class-active=\"slide.active\" rv-on-click=\"goTo | args slide.index\"> <bs4-icon rv-hide=\"slide.active\" rv-src=\"indicatorInactiveIconSrc\" size=\"16\"></bs4-icon> <bs4-icon rv-show=\"slide.active\" rv-src=\"indicatorActiveIconSrc\" size=\"16\"></bs4-icon> </li> </ol> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html":
/*!*******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"slideshow-inner\"> <div rv-each-slide=\"items\" rv-class=\"slide.class\" rv-class-active=\"slide.active\" rv-id=\"'slide-' | append slide.handle\" rv-index=\"slide.index\" rv-html=\"slide.content\"></div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html":
/*!*************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul rv-scrollbar-draggable rv-aria-orientation=\"optionTabsAngle\" role=\"tablist\" class=\"nav nav-tabs flex-scrollbar-x-auto scrollbar-y-hidden\"> <li class=\"nav-item\" rv-each-tab=\"items\"> <button role=\"tab\" class=\"btn btn-link nav-link\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </li> </ul> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html":
/*!***********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row\"> <div class=\"col-auto\"> <div class=\"nav flex-column nav-pills\" role=\"tablist\" rv-aria-orientation=\"optionTabsAngle\"> <div class=\"nav-item\" rv-each-tab=\"items\"> <button class=\"btn btn-link nav-link\" role=\"tab\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </div> </div> </div> <div class=\"col-auto\"> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html":
/*!******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<img> <tag rv-each-tag=\"tags\" rv-index=\"tag.index\" rv-style-left=\"tag.left\" rv-style-top=\"tag.top\" rv-shape=\"tag.shape\" rv-color=\"tag.color\" rv-style---tag-color=\"tag.color\" rv-style---tag-border-radius=\"tag.borderRadius\" rv-style---tag-full-size=\"tag.fullSize\" rv-style---tag-small-size=\"tag.smallSize\" rv-bs4-popover=\"fillPopoverOptions | call tag.popoverOptions\" rv-on-bound.bs.popover=\"onPopoverBound\" rv-on-shown.bs.popover=\"onPopoverShown\" rv-on-hidden.bs.popover=\"onPopoverHidden\" rv-tabindex=\"triggerOnFocus | call tag.popoverOptions\"> </tag> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"toast my-1\" rv-add-class=\"toast.contextualClass | prepend 'toast-'\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"> <div class=\"toast-header\" rv-show=\"toast.title\"> <bs4-icon rv-if=\"iconUrl\" rv-src=\"iconUrl\" size=\"16\" rv-color=\"toast.contextualClass\" class=\"mr-2\" alt=\"toast icon\"></bs4-icon> <strong class=\"mr-auto\" rv-template=\"toast.title\"></strong> <button type=\"button\" class=\"ml-2 mb-1 close\" rv-on-click=\"dismiss\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"toast-body\" rv-template=\"toast.message\"></div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/i18n/src/components/share/share.label.html":
/*!*****************************************************************!*\
  !*** ../../packages/i18n/src/components/share/share.label.html ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-i18n-text=\"labelI18n\"></div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html":
/*!********************************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram/instagram.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram/instagram.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row\"> <div class=\"col-4 px-0 embed-responsive embed-responsive-1by1 lazy\" rv-each-image=\"media.data\" rv-add-class=\"image.media_type\"> {% comment %} IMAGE {% endcomment %} <img lazyload=\"lazy\" class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'IMAGE'\" rv-src=\"image.media_url\" rv-alt=\"image.caption\"> {% comment %} CAROUSEL_ALBUM {% endcomment %} <img lazyload=\"lazy\" class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'CAROUSEL_ALBUM'\" rv-src=\"image.media_url\" rv-src=\"image.media_url\" rv-alt=\"image.caption\"> {% comment %} VIDEO {% endcomment %} <video class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'VIDEO'\" autoplay muted loop preload> <source rv-src=\"image.media_url\" type=\"video/mp4\"> Your browser does not support the video tag. </video> {% comment %} hover info {% endcomment %} <div class=\"embed-responsive-item caption d-none d-md-flex align-items-center\" rv-text=\"image.caption\"> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/addresses-form/addresses-form.component.html":
/*!******************************************************************************************!*\
  !*** ../../packages/shopify/src/components/addresses-form/addresses-form.component.html ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart-button/cart-button.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-button/cart-button.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart-item/cart-item.component.html":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-item/cart-item.component.html ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart/cart.component.html":
/*!**********************************************************************!*\
  !*** ../../packages/shopify/src/components/cart/cart.component.html ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/comments-form/comments-form.component.html":
/*!****************************************************************************************!*\
  !*** ../../packages/shopify/src/components/comments-form/comments-form.component.html ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/contact-form/contact-form.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/contact-form/contact-form.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/debug-bar/debug-bar.component.html":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/debug-bar/debug-bar.component.html ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<small rv-hide=\"hidden\" class=\"text-right\" rv-touch-events rv-on-singletap=\"toggleBar\" rv-on-doubletap=\"hide\"> { themeName }<br/> <div> Device width: <span class=\"d-inline-block d-md-none\">XS</span> <span class=\"d-none d-md-inline-block d-lg-none\">MD</span> <span class=\"d-none d-lg-inline-block d-xl-none\">LG</span> <span class=\"d-none d-xl-inline-block d-xxl-none\">XL</span> <span class=\"d-none d-xxl-inline-block\">XXL</span> </div> </small> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/linklist/linklist.component.html":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/linklist/linklist.component.html ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav class=\"nav\" rv-add-class=\"linklist.handle\" rv-class-nav-pills=\"pills\" rv-class-w-100=\"vertical\" rv-class-flex-column=\"vertical\" rv-class-flex-row=\"vertical | not\"> <div class=\"nav-item nav-item-level-0\" rv-each-link=\"linklist.links\"> <a rv-if=\"link.collapseable | not\" class=\"nav-link\" rv-class-active=\"link.active\" rv-route-class-active=\"link.url\" rv-route=\"link.url\" rv-href=\"link.url\"> <span>{link.title}</span> </a> <div rv-if=\"link.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args link\"> <span>{link.title}</span> </div> <div class=\"nav-item nav-item-level-1\" rv-hide=\"link.collapsed\" rv-each-sublink=\"link.links\"> <a rv-if=\"sublink.collapseable | not\" class=\"nav-link\" rv-add-class=\"sublink.level | prepend 'level-'\" rv-class-active=\"sublink.active\" rv-route-class-active=\"sublink.url\" rv-route=\"sublink.url\" rv-href=\"sublink.url\"> <span>{sublink.title}</span> </a> <div rv-if=\"sublink.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args sublink\"> <span>{sublink.title}</span> </div> <div class=\"nav-item nav-item-level-2\" rv-hide=\"sublink.collapsed\" rv-each-subsublink=\"sublink.links\"> <a class=\"nav-link\" rv-add-class=\"subsublink.level | prepend 'level-'\" rv-class-active=\"subsublink.active\" rv-route-class-active=\"subsublink.url\" rv-route=\"subsublink.url\" rv-href=\"subsublink.url\"> <span>{subsublink.title}</span> </a> </div> </div> </div> </nav> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/login-form/login-form.component.html":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify/src/components/login-form/login-form.component.html ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/product-item/product-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-item/product-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/product/product.component.html":
/*!****************************************************************************!*\
  !*** ../../packages/shopify/src/components/product/product.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/scss/main.scss":
/*!****************************!*\
  !*** ./src/scss/main.scss ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "../types/index.js":
/*!*************************!*\
  !*** ../types/index.js ***!
  \*************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/events/dist/esm/index.js":
/*!***********************************************!*\
  !*** ../../packages/events/dist/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/events/dist/esm/types/index.js");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/events/dist/esm/services/index.js");



/***/ }),

/***/ "../../packages/events/dist/esm/services/event-dispatcher.service.js":
/*!***************************************************************************!*\
  !*** ../../packages/events/dist/esm/services/event-dispatcher.service.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* binding */ EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.17.9-c52a5e9d27-4d56bdb828.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class EventDispatcher {
  static getNamespaces() {
    return Object.keys(this.instances);
  }

  static getInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = EventDispatcher.instances[namespace];

    if (!result) {
      return new this(namespace);
    }

    return result;
  }

  static getAllInstances() {
    return EventDispatcher.instances;
  }

  static clearInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const instance = EventDispatcher.instances[namespace];
    instance.events = {};
    instance.eventsOnce = {};
    return instance;
  }

  static deleteInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    this.clearInstance(namespace);
    delete this.instances[namespace];
  }

  static clearAllInstances() {
    const namespaces = this.getNamespaces();

    for (const namespace of namespaces) {
      this.clearInstance(namespace);
    }
  }

  static deleteAllInstances() {
    this.clearAllInstances();
    this.instances = {};
  }

  get namespace() {
    return this._namespace;
  }

  constructor(namespace) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "eventsOnce", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_namespace", "anonymous");

    if (namespace) {
      if (EventDispatcher.instances[namespace]) {
        return EventDispatcher.instances[namespace];
      }

      this._namespace = namespace;
      EventDispatcher.instances[namespace] = this;
      return EventDispatcher.instances[namespace];
    }
  }

  once(eventName, cb, thisContext) {
    this.eventsOnce[eventName] = this.eventsOnce[eventName] || [];

    if (typeof thisContext !== "undefined") {
      this.eventsOnce[eventName].push({
        cb: cb.bind(thisContext),
        orgCb: cb,
        thisContext
      });
    } else {
      this.eventsOnce[eventName].push(cb);
    }

    return this;
  }

  on(eventName, cb, thisContext) {
    this.events[eventName] = this.events[eventName] || [];

    if (typeof thisContext !== "undefined") {
      this.events[eventName].push({
        cb: cb.bind(thisContext),
        orgCb: cb,
        thisContext
      });
    } else {
      this.events[eventName].push(cb);
    }

    return this;
  }

  off(eventName, cb, thisContext) {
    if (eventName === undefined) {
      this.events = {};
      this.eventsOnce = {};
      return this;
    }

    if (cb !== undefined) {
      if (thisContext !== undefined) {
        if (eventName in this.events) {
          for (const [i, event] of this.events[eventName].entries()) {
            const curEvent = event;

            if (curEvent.orgCb === cb && curEvent.thisContext === thisContext) {
              this.events[eventName].splice(i, 1);
            }
          }
        }

        if (eventName in this.eventsOnce) {
          for (const [i, event] of this.eventsOnce[eventName].entries()) {
            const curEvent = event;

            if (curEvent.orgCb === cb && curEvent.thisContext === thisContext) {
              this.eventsOnce[eventName].splice(i, 1);
            }
          }
        }
      } else {
        if (eventName in this.events) {
          for (const [i, event] of this.events[eventName].entries()) {
            const curEvent = event;

            if (curEvent === cb) {
              this.events[eventName].splice(i, 1);
            }
          }
        }

        if (eventName in this.eventsOnce) {
          for (const [i, event] of this.eventsOnce[eventName].entries()) {
            const curEvent = event;

            if (curEvent === cb) {
              this.eventsOnce[eventName].splice(i, 1);
            }
          }
        }
      }
    } else {
      this.events[eventName] = [];
      this.eventsOnce[eventName] = [];
    }

    return this;
  }

  trigger(eventName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (eventName in this.events) {
      for (const event of this.events[eventName]) {
        if (event !== null && event !== void 0 && event.cb) {
          event.cb(...args);
        } else {
          event(...args);
        }
      }
    }

    if (eventName in this.eventsOnce) {
      for (const [i, event] of this.eventsOnce[eventName].entries()) {
        if (event !== null && event !== void 0 && event.cb) {
          event.cb(...args);
          this.eventsOnce[eventName].splice(i, 1);
        } else {
          event(...args);
          this.eventsOnce[eventName].splice(i, 1);
        }
      }
    }

    return this;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EventDispatcher, "instances", {});

/***/ }),

/***/ "../../packages/events/dist/esm/services/index.js":
/*!********************************************************!*\
  !*** ../../packages/events/dist/esm/services/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* reexport safe */ _event_dispatcher_service_js__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _event_dispatcher_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-dispatcher.service.js */ "../../packages/events/dist/esm/services/event-dispatcher.service.js");


/***/ }),

/***/ "../../packages/events/dist/esm/types/event-dispatcher.js":
/*!****************************************************************!*\
  !*** ../../packages/events/dist/esm/types/event-dispatcher.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/events/dist/esm/types/index.js":
/*!*****************************************************!*\
  !*** ../../packages/events/dist/esm/types/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _event_dispatcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-dispatcher.js */ "../../packages/events/dist/esm/types/event-dispatcher.js");


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_ribajs_doc"] = self["webpackChunk_ribajs_doc"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendors"], function() { return __webpack_require__("./src/scss/main.scss"); })
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], function() { return __webpack_require__("./src/ts/main.ts"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlO0FBQUEsUUFBZGdHLE9BQWMsdUVBQUosRUFBSTtBQUNqQixXQUFPLElBQVA7QUFDRDs7QUFKb0QsQ0FBaEQ7Ozs7Ozs7Ozs7Ozs7QUNIUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Q0E7V0FDQSxlQUFlLDRCQUE0QjtXQUMzQyxlQUFlO1dBQ2YsaUNBQWlDLFdBQVc7V0FDNUM7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsR0FBRztXQUNIO1dBQ0E7V0FDQSxDQUFDOzs7OztXQ1BELDhDQUE4Qzs7Ozs7V0NBOUM7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7OztXQ05BOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQSw4Q0FBOEM7O1dBRTlDO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQ0FBaUMsbUNBQW1DO1dBQ3BFO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxNQUFNLHFCQUFxQjtXQUMzQjtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQTs7Ozs7VUVsREE7VUFDQTtVQUNBO1VBQ0EsMkRBQTJELHFEQUFxRDtVQUNoSCxxRkFBcUYsaURBQWlEO1VBQ3RJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvY29tcG9uZW50cy9iaW5kLWNvbnRlbnQvYmluZC1jb250ZW50LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9jb21wb25lbnRzL2V4YW1wbGUtdGFicy9leGFtcGxlLXRhYnMuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2NvbXBvbmVudHMvZmlsZS10cmVlL2ZpbGUtdHJlZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvY29tcG9uZW50cy9pY29uLXByZXZpZXcvaWNvbi1wcmV2aWV3LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2NvbXBvbmVudHMvbG9yZW0taXBzdW0vbG9yZW0taXBzdW0uY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2NvbXBvbmVudHMvc2hvcGlmeS1saW5rbGlzdC9zaG9waWZ5LWxpbmtsaXN0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9kZW1vcy9iczQtdGFicy1hdHRyL3NyYy90cy9jb21wb25lbnRzL2JzNC10YWJzLWF0dHItZXhhbXBsZS9iczQtdGFicy1hdHRyLWV4YW1wbGUuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2RlbW9zL2JzNC10YWJzLXRwbC9zcmMvdHMvY29tcG9uZW50cy9iczQtdGFicy10cGwtZXhhbXBsZS9iczQtdGFicy10cGwtZXhhbXBsZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvZGVtb3MvY29yZS1lYWNoLWl0ZW0vc3JjL3RzL2NvbXBvbmVudHMvZWFjaC1pdGVtLWV4YW1wbGUvZWFjaC1pdGVtLWV4YW1wbGUuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2RlbW9zL2V4dHJhcy1zY3JvbGwtZXZlbnRzL3NyYy90cy9jb21wb25lbnRzL2V4dHJhcy1zY3JvbGwtZXZlbnRzLWV4YW1wbGUvZXh0cmFzLXNjcm9sbC1ldmVudHMtZXhhbXBsZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvZGVtb3MvZXh0cmFzLXRvdWNoLWV2ZW50cy9zcmMvdHMvY29tcG9uZW50cy90b3VjaC1ldmVudHMtZXhhbXBsZS90b3VjaC1ldmVudHMtZXhhbXBsZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvZGVtb3MvaTE4bi1zdGF0aWMvc3JjL3RzL2NvbXBvbmVudHMvaTE4bi1zdGF0aWMtZXhhbXBsZS9pMThuLXN0YXRpYy1leGFtcGxlLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9tYWluLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvYmluZGVycy9iczQtY29sbGFwc2Utb24tdXJsLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvYnM0LWNvbGxhcHNlLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvYnM0LWRyb3Bkb3duLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvYnM0LWV4cGFuLW9uLXVybC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9iaW5kZXJzL2JzNC1wb3BvdmVyLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvYnM0LXNjcm9sbHNweS1jbGFzcy5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9iaW5kZXJzL2JzNC1zaG93LXRvYXN0LW9uLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvYnM0LXRvZ2dsZS1jb2xsYXBzZS1vbi1ldmVudC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9iaW5kZXJzL2JzNC10b29sdGlwLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9iaW5kZXJzL3Njcm9sbC10by1vbi1ldmVudC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9iaW5kZXJzL3RvZ2dsZS1hdHRyaWJ1dGUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvYmluZGVycy90b2dnbGUtY2xhc3MuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvYnM0Lm1vZHVsZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWFjY29yZGlvbi9iczQtYWNjb3JkaW9uLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWJ1dHRvbi9iczQtYnV0dG9uLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWNhcm91c2VsL2JzNC1jYXJvdXNlbC5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1jb2xvcnBpY2tlci9iczQtY29sb3JwaWNrZXIuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtY29udGVudHMvYnM0LWNvbnRlbnRzLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWRyb3Bkb3duL2JzNC1kcm9wZG93bi5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1mb3JtL2JzNC1mb3JtLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWljb24vYnM0LWljb24uY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtbW9kYWwtaXRlbS9iczQtbW9kYWwtaXRlbS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1uYXZiYXIvYnM0LW5hdmJhci5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1ub3RpZmljYXRpb24tY29udGFpbmVyL2JzNC1ub3RpZmljYXRpb24tY29udGFpbmVyLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXNjcm9sbHNweS9iczQtc2Nyb2xsc3B5LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXNoYXJlL2JzNC1zaGFyZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1zaWRlYmFyL2JzNC1zaWRlYmFyLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXNsaWRlc2hvdy9iczQtc2xpZGVzaG93LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXRhYnMvYnM0LXRhYnMuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtdGFnZ2VkLWltYWdlL2JzNC10YWdnZWQtaW1hZ2UuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtdG9hc3QtaXRlbS9iczQtdG9hc3QtaXRlbS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC10b2dnbGUtYnV0dG9uL2JzNC10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvaGVscGVyL2RvbS9kYXRhLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvaGVscGVyL2RvbS9ldmVudC1oYW5kbGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvaGVscGVyL2RvbS9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2hlbHBlci9kb20vbWFuaXB1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9oZWxwZXIvZG9tL3NlbGVjdG9yLWVuZ2luZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2hlbHBlci9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2hlbHBlci9zYW5pdGl6ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9oZWxwZXIvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2ludGVyZmFjZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9pbnRlcmZhY2VzL21vZGFsLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvaW50ZXJmYWNlcy9ub3RpZmljYXRpb24udHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9pbnRlcmZhY2VzL3RvYXN0LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvc2VydmljZXMvYnM0LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9zZXJ2aWNlcy9jYXJvdXNlbC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvc2VydmljZXMvY29sbGFwc2Uuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL3NlcnZpY2VzL2Ryb3Bkb3duLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9zZXJ2aWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL3NlcnZpY2VzL21vZGFsLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9zZXJ2aWNlcy9wb3BvdmVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9zZXJ2aWNlcy90b2FzdC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvc2VydmljZXMvdG9vbHRpcC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NhY2hlL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jYWNoZS9zcmMvc2VydmljZXMvYmFzZS1jYWNoZS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NhY2hlL3NyYy9zZXJ2aWNlcy9pZGItY2FjaGUuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jYWNoZS9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYWRhcHRlcnMvZG90LmFkYXB0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYWRhcHRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvYWRkLWNsYXNzLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2FuaW1hdGUtY2xhc3NuYW1lLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2Fzc2lnbi1wcm9wZXJ0eS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9hc3NpZ24uYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvYXR0cmlidXRlLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2Jsb2NrLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2NoZWNrZWQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvY2xhc3MtbmFtZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9jby1hdHRyaWJ1dGUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvZGlzYWJsZWQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvZHJhZ2dhYmxlLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2VhY2gtaXRlbS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9lbGVtZW50LmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2VuYWJsZWQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvZmxleC1zb3J0LWNoaWxkcy5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9oaWRlLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL2h0bWwuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvaWYuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9tYXhsZW5ndGguYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvbXVzdGFjaGUtdGV4dC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9vbi1ldmVudC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9wYXJlbnQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvcmVhZG9ubHkuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvcmVtb3ZlLWNsYXNzLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL3Nob3cuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvc3Jjc2V0LXNpemUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvc3R5bGUtYmFja2dyb3VuZC1pbWFnZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy9zdHlsZS1jc3MtcHJvcGVydHkuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvc3R5bGUtcHJvcGVydHkuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvdGFnLW5hbWUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvdGVtcGxhdGUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvdGV4dC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy90b2dnbGUtb24tZXZlbnQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2JpbmRlcnMvdW5jaGVja2VkLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9iaW5kZXJzL3VubGVzcy5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYmluZGVycy92YWx1ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY29tcG9uZW50L2Jhc2ljLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jb21wb25lbnQvY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NvbXBvbmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NvbXBvbmVudHMvdGVtcGxhdGVzL3RlbXBsYXRlcy5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY29uc3RhbnRzL2Zvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jb25zdGFudHMvcGFyc2VyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NvcmUubW9kdWxlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvY29udGFpbnMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvZW1wdHkuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvZmlyc3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvZ2V0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2FycmF5L2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvaXMtbGFzdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9hcnJheS9qb2luLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2FycmF5L2xhc3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvb3ZlcmxhcHMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvYXJyYXkvcmFuZG9tLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2FycmF5L3JhbmdlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2FycmF5L3NldC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9hcnJheS9zaXplLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2NvbXBhcmUvYW5kLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2NvbXBhcmUvYmV0d2Vlbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9jb21wYXJlL2VndC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9jb21wYXJlL2VsdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9jb21wYXJlL2VxLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2NvbXBhcmUvZ3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvY29tcGFyZS9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2NvbXBhcmUvbHQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvY29tcGFyZS9uZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9jb21wYXJlL25vdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9jb21wYXJlL29yLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvbWF0aC9kaWdpdHMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvbWF0aC9kaXZpZGVkLWJ5LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL21hdGgvZXZlbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9tYXRoL2djZC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9tYXRoL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvbWF0aC9taW51cy5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9tYXRoL21vZHVsby5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9tYXRoL3BsdXMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvbWF0aC90aW1lcy5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9tYXRoL3VuZXZlbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zcGVjaWFsL2FyZ3MuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9jYWxsLW5hbWUuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9jYWxsLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3NwZWNpYWwvZGVidWcuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9kZWZhdWx0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3NwZWNpYWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zcGVjaWFsL2lzLWRlc2t0b3AuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9pcy1tb2JpbGUuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9tYXAuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3BlY2lhbC9vcy5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zcGVjaWFsL3ByZWZlci5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zcGVjaWFsL3Rlcm5hcnkuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL2FwcGVuZC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvY2FwaXRhbGl6ZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvY3V0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9kb3duY2FzZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvZW5kcy13aXRoLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9maWxsZWQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL2hhbmRsZWl6ZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvbWF0Y2guZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL251bWJlci1mb3JtYXQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL3BhZC1lbmQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL3BhZC1zdGFydC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvcGx1cmFsaXplLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9wcmVwZW5kLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9yZXBsYWNlLWZpcnN0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9yZXBsYWNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy9zbGljZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy9zdHJpbmcvc3RhcnRzLXdpdGguZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL3N0cmlwLWh0bWwuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvc3RyaW5nL3N0cmlwLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3N0cmluZy91cGNhc2UuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvdHlwZS9ib29sZWFuLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL2lzLWFycmF5LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaXMtYm9vbGVhbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL2lzLWRlZmluZWQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Zvcm1hdHRlcnMvdHlwZS9pcy1pbnRlZ2VyLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaXMtbnVtYmVyLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaXMtb2JqZWN0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaXMtc3RyaW5nLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvaXMtdW5kZWZpbmVkLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvanNvbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL3BhcnNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvdG8tYmFzZTY0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvdG8tZGVjaW1hbC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL3RvLWZsb2F0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9mb3JtYXR0ZXJzL3R5cGUvdG8taW50ZWdlci5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL3RvLW51bWJlci5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZm9ybWF0dGVycy90eXBlL3RvLXN0cmluZy5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvb2JzZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcGFyc2UtZGVjbGFyYXRpb24udHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcGFyc2Utbm9kZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9wYXJzZS10ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yaWJhLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL2FkYXB0ZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zZXJ2aWNlcy9iaW5kZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zZXJ2aWNlcy9jb21wb25lbnQuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zZXJ2aWNlcy9jb3JlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvc2VydmljZXMvZm9ybWF0dGVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvc2VydmljZXMvaHR0cC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL2xpZmVjeWNsZS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL21vZHVsZS1lbGVtZW50LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvc2VydmljZXMvbW9kdWxlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdHlwZXMvYWRhcHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy92aWV3LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvYmluZGVycy9kYXRhLXNjcm9sbC1wb3NpdGlvbi15LmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL2JpbmRlcnMvaW1hZ2UtZXZlbnRzLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9iaW5kZXJzL3Njcm9sbC1ldmVudHMuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvYmluZGVycy9zY3JvbGwtcG9zaXRpb24tYW5nbGUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvYmluZGVycy9zY3JvbGxiYXItYXV0b3Njcm9sbC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9iaW5kZXJzL3Njcm9sbGJhci1kcmFnZ2FibGUuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvYmluZGVycy9zeW5jLWVsZW1lbnQtcHJvcGVydHkuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvYmluZGVycy90b3VjaC1ldmVudHMuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvZXh0cmFzLm1vZHVsZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL2hlbHBlci9lYXNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvaGVscGVyL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvaGVscGVyL3Njcm9sbC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvc2VydmljZXMvYXV0b3Njcm9sbC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvc2VydmljZXMvZHJhZ3Njcm9sbC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvc2VydmljZXMvZXh0cmFzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9zZXJ2aWNlcy9mdWxsc2NyZWVuLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9zZXJ2aWNlcy9nYW1lbG9vcC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9zZXJ2aWNlcy90b3VjaC1ldmVudHMvYmFzZS1ldmVudHMuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL3NlcnZpY2VzL3RvdWNoLWV2ZW50cy9zY3JvbGwtZXZlbnRzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy9zZXJ2aWNlcy90b3VjaC1ldmVudHMvdG91Y2gtZXZlbnRzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvZXh0cmFzL3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9leHRyYXMvc3JjL3R5cGVzL21lZGlhLXJlYWR5LXN0YXRlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2V4dHJhcy9zcmMvdHlwZXMvdG91Y2gtdHlwZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9oaXN0b3J5L3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9oaXN0b3J5L3NyYy9zZXJ2aWNlcy9oaXN0b3J5LW1hbmFnZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9oaXN0b3J5L3NyYy9zZXJ2aWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9oaXN0b3J5L3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy9iaW5kZXJzL2kxOG4tc3Rhci5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvaTE4bi9zcmMvYmluZGVycy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2kxOG4vc3JjL2NvbXBvbmVudHMvc2hhcmUvc2hhcmUuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2kxOG4vc3JjL2NvbXBvbmVudHMvc3dpdGNoZXIvc3dpdGNoZXIuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2kxOG4vc3JjL2Zvcm1hdHRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvaTE4bi9zcmMvZm9ybWF0dGVycy90LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy9pMThuLm1vZHVsZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy9zZXJ2aWNlcy9pMThuLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvaTE4bi9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvaTE4bi9zcmMvc2VydmljZXMvbG9jYWxlcy1yZXN0LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvaTE4bi9zcmMvc2VydmljZXMvbG9jYWxlcy1zdGF0aWMuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9pMThuL3NyYy90eXBlcy9sb2NhbGVzLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvanN4L3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9qc3gvc3JjL2pzeC1mcmFnbWVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9qc3gvc3JjL2pzeC1yYXcudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvanN4L3NyYy9qc3gudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvanN4L3NyYy9tb2R1bGUudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvanN4L3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9qc3gvc3JjL3R5cGVzL2pzeC9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9iaW5kZXJzL3BhcmVudC1yb3V0ZS1jbGFzcy1zdGFyLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2JpbmRlcnMvcm91dGUtYmFjay1vbi1zdGFyLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2JpbmRlcnMvcm91dGUtY2xhc3Mtc3Rhci5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9iaW5kZXJzL3JvdXRlLXByZWxvYWQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvYmluZGVycy9yb3V0ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9iaW5kZXJzL3ZpZXctc3RhdGljLmJpbmRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9jb21wb25lbnRzL2xvYWQtc2NyaXB0L2xvYWQtc2NyaXB0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2NvbXBvbmVudHMvdmlldy92aWV3LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvcm91dGVyLm1vZHVsZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3NlcnZpY2VzL1BqYXgvRG9tLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvc2VydmljZXMvUGpheC9QcmVmZXRjaC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3NlcnZpY2VzL1BqYXgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9zZXJ2aWNlcy9UcmFuc2l0aW9uL0Jhc2VUcmFuc2l0aW9uLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvc2VydmljZXMvVHJhbnNpdGlvbi9DdXN0b21UcmFuc2l0aW9uLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvc2VydmljZXMvVHJhbnNpdGlvbi9GYWRlVHJhbnNpdGlvbi50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3NlcnZpY2VzL1RyYW5zaXRpb24vSGlkZVNob3dUcmFuc2l0aW9uLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvc2VydmljZXMvVHJhbnNpdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3NlcnZpY2VzL1ZpZXcudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9zZXJ2aWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3NlcnZpY2VzL3JvdXRlci5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3JvdXRlci9zcmMvdHlwZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy90eXBlcy9qc3gvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2NvbXBvbmVudHMvaW5zdGFncmFtLXNjcm9sbGJhci9pbnN0YWdyYW0tc2Nyb2xsYmFyLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvY29tcG9uZW50cy9pbnN0YWdyYW0vaW5zdGFncmFtLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9kZXBlbmRlbmNpZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2RlcGVuZGVuY2llcy9zb2NrZXQtaW8tY2xpZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvaW50ZXJmYWNlcy9mYWNlYm9vay1hcGkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2ludGVyZmFjZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2ludGVyZmFjZXMvaW5zdGFncmFtLWFwaS9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvaW50ZXJmYWNlcy9zaG9waWZ5LWFwaS9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2VydmljZXMvYmFzZS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9zZXJ2aWNlcy9mYWNlYm9vay1hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL3NlcnZpY2VzL2luc3RhZ3JhbS1hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2VydmljZXMvbG9jYWxlcy5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9zZXJ2aWNlcy9tb2R1bGUuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2VydmljZXMvc2hvcGlmeS1hcGktYXJ0aWNsZS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnktdGRhL3NyYy9zZXJ2aWNlcy9zaG9waWZ5LWFwaS1ibG9nLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL3NlcnZpY2VzL3Nob3BpZnktYXBpLXByb2R1Y3Quc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2VydmljZXMvc2hvcGlmeS1hcGktdGhlbWUuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvc2hvcGlmeS10ZGEubW9kdWxlLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvYmluZGVycy9zaG9waWZ5LWNhcnQtY291bnQuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2JpbmRlcnMvc2hvcGlmeS1pbWcuYmluZGVyLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvYWRkcmVzc2VzLWZvcm0vYWRkcmVzc2VzLWZvcm0uY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY2FydC1idXR0b24vY2FydC1idXR0b24uY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY2FydC1pdGVtL2NhcnQtaXRlbS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9jYXJ0L2NhcnQuY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY29tbWVudHMtZm9ybS9jb21tZW50cy1mb3JtLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2NvbnRhY3QtZm9ybS9jb250YWN0LWZvcm0uY29tcG9uZW50LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvZGVidWctYmFyL2RlYnVnLWJhci5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2xpbmtsaXN0L2xpbmtsaXN0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2xvZ2luLWZvcm0vbG9naW4tZm9ybS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9wcm9kdWN0LWl0ZW0vcHJvZHVjdC1pdGVtLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL3Byb2R1Y3Qtc2Nyb2xsYmFyL3Byb2R1Y3Qtc2Nyb2xsYmFyLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvZm9ybWF0dGVycy9pbWctdXJsLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2Zvcm1hdHRlcnMvbW9uZXktd2l0aC1jdXJyZW5jeS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvZm9ybWF0dGVycy9tb25leS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvaW50ZXJmYWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9tb2R1bGUuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9wLXF1ZXVlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvc2VydmljZXMvcHJpb3JpdHktcXVldWUuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9zaG9waWZ5LWNhcnQuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9zaG9waWZ5LXByb2R1Y3Quc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9zZXJ2aWNlcy9zaG9waWZ5LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvc2hvcGlmeS5tb2R1bGUudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2NvbG9yLnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3V0aWxzL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2NvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2RvbS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy91dGlscy9zcmMvZW52LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3V0aWxzL3NyYy9pbW1lZGlhdGUudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3V0aWxzL3NyYy90b29scy50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy91dGlscy9zcmMvdHlwZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy91dGlscy9zcmMvdHlwZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL3VybC50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9jb21wb25lbnRzL2JpbmQtY29udGVudC9iaW5kLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvY29tcG9uZW50cy9leGFtcGxlLXRhYnMvZXhhbXBsZS10YWJzLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2NvbXBvbmVudHMvZmlsZS10cmVlL2ZpbGUtdHJlZS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9jb21wb25lbnRzL2ljb24tcHJldmlldy9pY29uLXByZXZpZXcuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvY29tcG9uZW50cy9zaG9waWZ5LWxpbmtsaXN0L3Nob3BpZnktbGlua2xpc3QuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvZGVtb3MvYnM0LXRhYnMtYXR0ci9zcmMvdHMvY29tcG9uZW50cy9iczQtdGFicy1hdHRyLWV4YW1wbGUvYnM0LXRhYnMtYXR0ci1leGFtcGxlLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4vc3JjL3RzL2RlbW9zL2JzNC10YWJzLXRwbC9zcmMvdHMvY29tcG9uZW50cy9iczQtdGFicy10cGwtZXhhbXBsZS9iczQtdGFicy10cGwtZXhhbXBsZS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9kZW1vcy9jb3JlLWVhY2gtaXRlbS9zcmMvdHMvY29tcG9uZW50cy9lYWNoLWl0ZW0tZXhhbXBsZS9lYWNoLWl0ZW0tZXhhbXBsZS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9kZW1vcy9leHRyYXMtc2Nyb2xsLWV2ZW50cy9zcmMvdHMvY29tcG9uZW50cy9leHRyYXMtc2Nyb2xsLWV2ZW50cy1leGFtcGxlL2V4dHJhcy1zY3JvbGwtZXZlbnRzLWV4YW1wbGUuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvdHMvZGVtb3MvZXh0cmFzLXRvdWNoLWV2ZW50cy9zcmMvdHMvY29tcG9uZW50cy90b3VjaC1ldmVudHMtZXhhbXBsZS90b3VjaC1ldmVudHMtZXhhbXBsZS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uL3NyYy90cy9kZW1vcy9pMThuLXN0YXRpYy9zcmMvdHMvY29tcG9uZW50cy9pMThuLXN0YXRpYy1leGFtcGxlL2kxOG4tc3RhdGljLWV4YW1wbGUuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1hY2NvcmRpb24vYnM0LWFjY29yZGlvbi5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWNvbG9ycGlja2VyL2JzNC1jb2xvcnBpY2tlci5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWNvbnRlbnRzL2JzNC1jb250ZW50cy5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LWZvcm0vYnM0LWZvcm0uY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1tb2RhbC1pdGVtL2JzNC1tb2RhbC1pdGVtLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtbm90aWZpY2F0aW9uLWNvbnRhaW5lci9iczQtbm90aWZpY2F0aW9uLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXNjcm9sbHNweS9iczQtc2Nyb2xsc3B5LmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtc2hhcmUvYnM0LXNoYXJlLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtc2hhcmUvYnM0LXNoYXJlLmxhYmVsLmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1zbGlkZXNob3cvYnM0LXNsaWRlc2hvdy1jb250cm9scy5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXNsaWRlc2hvdy9iczQtc2xpZGVzaG93LWluZGljYXRvcnMuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1zbGlkZXNob3cvYnM0LXNsaWRlc2hvdy1zbGlkZXMuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC10YWJzL2JzNC10YWJzLWhvcml6b250YWwuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC10YWJzL2JzNC10YWJzLXZlcnRpY2FsLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2JzNC9zcmMvY29tcG9uZW50cy9iczQtdGFnZ2VkLWltYWdlL2JzNC10YWdnZWQtaW1hZ2UuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC10b2FzdC1pdGVtL2JzNC10b2FzdC1pdGVtLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL2kxOG4vc3JjL2NvbXBvbmVudHMvc2hhcmUvc2hhcmUubGFiZWwuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5LXRkYS9zcmMvY29tcG9uZW50cy9pbnN0YWdyYW0tc2Nyb2xsYmFyL2luc3RhZ3JhbS1zY3JvbGxiYXIuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS10ZGEvc3JjL2NvbXBvbmVudHMvaW5zdGFncmFtL2luc3RhZ3JhbS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2FkZHJlc3Nlcy1mb3JtL2FkZHJlc3Nlcy1mb3JtLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY2FydC1idXR0b24vY2FydC1idXR0b24uY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9jYXJ0LWl0ZW0vY2FydC1pdGVtLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY2FydC9jYXJ0LmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY29tbWVudHMtZm9ybS9jb21tZW50cy1mb3JtLmNvbXBvbmVudC5odG1sIiwid2VicGFjazovL0ByaWJhanMvZG9jLy4uLy4uL3BhY2thZ2VzL3Nob3BpZnkvc3JjL2NvbXBvbmVudHMvY29udGFjdC1mb3JtL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2RlYnVnLWJhci9kZWJ1Zy1iYXIuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9saW5rbGlzdC9saW5rbGlzdC5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL2xvZ2luLWZvcm0vbG9naW4tZm9ybS5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9wYWNrYWdlcy9zaG9waWZ5L3NyYy9jb21wb25lbnRzL3Byb2R1Y3QtaXRlbS9wcm9kdWN0LWl0ZW0uY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vcGFja2FnZXMvc2hvcGlmeS9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi9zcmMvc2Nzcy9tYWluLnNjc3M/N2NkOCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2V2ZW50LWRpc3BhdGNoZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy8uLi8uLi8uLi9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2MvLi4vLi4vLi4vc3JjL3R5cGVzL2luZGV4LnRzIiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2Mvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2Mvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9AcmliYWpzL2RvYy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vQHJpYmFqcy9kb2Mvd2VicGFjay9zdGFydHVwIiwid2VicGFjazovL0ByaWJhanMvZG9jL3dlYnBhY2svYWZ0ZXItc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iaW5kLWNvbnRlbnQuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGNsYXNzIEJpbmRDb250ZW50Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJydi1iaW5kLWNvbnRlbnRcIjtcblxuICBwcm90ZWN0ZWQgY29udGVudCA9IFwiXCI7XG5cbiAgcHVibGljIHNjb3BlID0ge307XG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgYmluZENvbnRlbnQoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiYm91bmRcIik7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB0aGlzLmNvbnRlbnQ7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5iaW5kQ29udGVudCk7XG4gICAgdGhpcy5iaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5iaW5kQ29udGVudCk7XG4gICAgdGhpcy5pbml0KFtdKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpIHtcbiAgICBjb25zdCBmaXJzdEVsZW1lbnRDaGlsZCA9IHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgaWYgKCFmaXJzdEVsZW1lbnRDaGlsZCB8fCBmaXJzdEVsZW1lbnRDaGlsZC50YWdOYW1lICE9PSBcIlRFTVBMQVRFXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgY2hpbGQgZWxlbWVudCBtdXN0IGJlIGEgdGVtcGxhdGVcIik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jb250ZW50ID0gZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQnM0VGFic0NvbXBvbmVudCxcbiAgVGFiLFxuICBTY29wZSBhcyBPcmlnaW5hbFNjb3BlLFxufSBmcm9tIFwiQHJpYmFqcy9iczQvc3JjL2NvbXBvbmVudHMvYnM0LXRhYnMvYnM0LXRhYnMuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuaW1wb3J0IHsgZXNjYXBlSHRtbCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbmltcG9ydCAqIGFzIFByaXNtIGZyb20gXCJwcmlzbWpzXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9leGFtcGxlLXRhYnMuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTY29wZSBleHRlbmRzIE9yaWdpbmFsU2NvcGUge1xuICBzdW0/OiBFeGFtcGxlQnM0VGFic0NvbXBvbmVudFtcInN1bVwiXTtcbn1cblxuZXhwb3J0IGNsYXNzIEV4YW1wbGVCczRUYWJzQ29tcG9uZW50IGV4dGVuZHMgQnM0VGFic0NvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtZXhhbXBsZS10YWJzXCI7XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBwcm90ZWN0ZWQgdGVtcGxhdGVBdHRyaWJ1dGVzID0gW1xuICAgIHtcbiAgICAgIG5hbWU6IFwidGl0bGVcIixcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJoYW5kbGVcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwidHlwZVwiLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJhY3RpdmVcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiaW5kZXhcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICBdO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbXCJvcHRpb24tdGFicy1hdXRvLWhlaWdodFwiLCBcImhhbmRsZVwiXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLy8gc3VtIGlzIHVzZWQgZm9yIGV4YW1wbGVzXG4gICAgKHRoaXMuc2NvcGUgYXMgYW55KS5zdW0gPSB0aGlzLnN1bTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdXNlZCBpbiBleGFtcGxlc1xuICAgKiBAcGFyYW0gYVxuICAgKiBAcGFyYW0gYlxuICAgKi9cbiAgcHVibGljIHN1bShhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgICh0aGlzLnNjb3BlIGFzIGFueSkucmVzdWx0ID0gTnVtYmVyKGEpICsgTnVtYmVyKGIpO1xuICAgIHJldHVybiAodGhpcy5zY29wZSBhcyBhbnkpLnJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBhY3RpdmF0ZSh0YWI6IFRhYikge1xuICAgIHN1cGVyLmFjdGl2YXRlKHRhYik7XG4gICAgaWYgKHRhYi50eXBlID09PSBcInJlYWx0aW1lLXJlc3VsdFwiKSB7XG4gICAgICAvLyBHZXQgY29udGVudCBvZiBwcmV2aWV3IHRhYiBhbmQgaW5zZXJ0IHRoaXMgYXMgdGhlIHNvdXJjZSB0YWIgY29udGVudFxuICAgICAgY29uc3QgcHJldmlld0VsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIudGFiLWNvbnRlbnQtcHJldmlld1wiKTtcbiAgICAgIGlmIChwcmV2aWV3RWxlbWVudCkge1xuICAgICAgICB0YWIuY29udGVudCA9IGA8cHJlIGNsYXNzPVwibGFuZ3VhZ2UtaHRtbFwiPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtaHRtbFwiPiR7ZXNjYXBlSHRtbChcbiAgICAgICAgICBwcmV2aWV3RWxlbWVudC5pbm5lckhUTUwudHJpbSgpXG4gICAgICAgICl9PC9jb2RlPjwvcHJlPmA7XG4gICAgICAgIFByaXNtLmhpZ2hsaWdodEFsbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiaW5kSWZSZWFkeSgpIHtcbiAgICByZXR1cm4gc3VwZXIuYmluZElmUmVhZHkoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdFRhYnMoKTtcbiAgICB0aGlzLmFjdGl2YXRlRmlyc3RUYWIoKTtcbiAgICB0aGlzLmluaXQoQnM0VGFic0NvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICBQcmlzbS5oaWdobGlnaHRBbGwoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb3VudE9mRmlyc3RXaGl0ZXNwYWNlcyhzdHI6IHN0cmluZykge1xuICAgIGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKC9eKFtcXHNdKykvcyk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMF0ubGVuZ3RoIDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBmaXJzdCBpbmRlbnRzIG9mIGEgc291cmNlIHN0cmluZyBiYXNlZCBvbiB0aGUgZmlyc3QgaW5kZW50cyB1bnRpbCB0aGUgZmlyc3QgY2hhcmFjdGVyIHdhcyBmb3VuZFxuICAgKiBAcGFyYW0gc291cmNlXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVtb3ZlSW5kZW50c09mU291cmNlKHNvdXJjZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcbiAgICBsZXQgZmlyc3RMaW5lSW5kZW50cyA9IHRoaXMuY291bnRPZkZpcnN0V2hpdGVzcGFjZXMobGluZXNbMF0pO1xuICAgIC8vIElmIHRoZSBmaXJzdCBsaW5lcyBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzXG4gICAgd2hpbGUgKGZpcnN0TGluZUluZGVudHMgPT09IGxpbmVzWzBdLmxlbmd0aCkge1xuICAgICAgbGluZXMuc2hpZnQoKTtcbiAgICAgIGZpcnN0TGluZUluZGVudHMgPSB0aGlzLmNvdW50T2ZGaXJzdFdoaXRlc3BhY2VzKGxpbmVzWzBdKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RMaW5lSW5kZW50cyAhPT0gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZW50cyA9IHRoaXMuY291bnRPZkZpcnN0V2hpdGVzcGFjZXMobGluZXNbaV0pO1xuICAgICAgICBpZiAoY3VycmVudEluZGVudHMgPj0gZmlyc3RMaW5lSW5kZW50cykge1xuICAgICAgICAgIGxpbmVzW2ldID0gbGluZXNbaV0uc3Vic3RyaW5nKGZpcnN0TGluZUluZGVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oXCJcXG5cIikudHJpbSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEl0ZW1zQnlUZW1wbGF0ZSgpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRlbXBsYXRlRWxlbWVudD4oXCJ0ZW1wbGF0ZVwiKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGVtcGxhdGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgdHBsID0gdGVtcGxhdGVzW2luZGV4XTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0cGwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKTtcbiAgICAgIGlmICh0eXBlID09PSBcInNpbmdsZS1odG1sLWZpbGVcIikge1xuICAgICAgICBjb25zdCBzb3VyY2VUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICAgICAgY29uc3Qgc291cmNlQ29kZSA9IHRoaXMucmVtb3ZlSW5kZW50c09mU291cmNlKHRwbC5pbm5lckhUTUwpO1xuICAgICAgICBzb3VyY2VUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlNvdXJjZVwiKTtcbiAgICAgICAgc291cmNlVGVtcGxhdGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInNvdXJjZVwiKTtcbiAgICAgICAgc291cmNlVGVtcGxhdGUuaW5uZXJIVE1MID0gYDxwcmUgY2xhc3M9XCJsYW5ndWFnZS1odG1sXCI+PGNvZGUgY2xhc3M9XCJsYW5ndWFnZS1odG1sXCI+JHtlc2NhcGVIdG1sKFxuICAgICAgICAgIHNvdXJjZUNvZGVcbiAgICAgICAgKX08L2NvZGU+PC9wcmU+YDtcbiAgICAgICAgdGhpcy5hZGRJdGVtQnlUZW1wbGF0ZShzb3VyY2VUZW1wbGF0ZSwgaW5kZXgpO1xuXG4gICAgICAgIGNvbnN0IHByZXZpZXdUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICAgICAgcHJldmlld1RlbXBsYXRlLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiUHJldmlld1wiKTtcbiAgICAgICAgcHJldmlld1RlbXBsYXRlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJwcmV2aWV3XCIpO1xuICAgICAgICBwcmV2aWV3VGVtcGxhdGUuaW5uZXJIVE1MID0gc291cmNlQ29kZTtcbiAgICAgICAgdGhpcy5hZGRJdGVtQnlUZW1wbGF0ZShwcmV2aWV3VGVtcGxhdGUsIGluZGV4ICsgMSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgICAgIHJlc3VsdFRlbXBsYXRlLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiUmVuZGVyZWRcIik7XG4gICAgICAgIHJlc3VsdFRlbXBsYXRlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyZWFsdGltZS1yZXN1bHRcIik7XG4gICAgICAgIHJlc3VsdFRlbXBsYXRlLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIHRoaXMuYWRkSXRlbUJ5VGVtcGxhdGUocmVzdWx0VGVtcGxhdGUsIGluZGV4ICsgMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZEl0ZW1CeVRlbXBsYXRlKHRwbCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRlbXBsYXRlUmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCkge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIG9yIHRoZSBjaGlsZHMgYXJlIHRlbXBsYXRlc1xuICAgIGlmICghaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykgfHwgdGhpcy5oYXNPbmx5VGVtcGxhdGVDaGlsZHMoKSkge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2ljQ29tcG9uZW50IH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vZmlsZS10cmVlLmNvbXBvbmVudC5odG1sXCI7XG5cbi8vIGludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7fVxuXG5leHBvcnQgY2xhc3MgRmlsZVRyZWVDb21wb25lbnQgZXh0ZW5kcyBCYXNpY0NvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtZmlsZS10cmVlXCI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlID0ge307IC8vIDogU2NvcGUgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEZpbGVUcmVlQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKSB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmIChoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgeyBlc2NhcGVIdG1sIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2ljb24tcHJldmlldy5jb21wb25lbnQuaHRtbFwiO1xuXG5pbXBvcnQgKiBhcyBQcmlzbSBmcm9tIFwicHJpc21qc1wiO1xuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBhc3NldFBhdGg6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBzcmM6IHN0cmluZztcbiAgc2l6ZXM6IG51bWJlcltdO1xuICBjb2xvcnM6IEFycmF5PHN0cmluZyB8IHN0cmluZ1tdPjtcbiAgZGlyZWN0aW9uczogc3RyaW5nW107XG4gIGV4YW1wbGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEljb25QcmV2aWV3Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJydi1pY29uLXByZXZpZXdcIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbXCJhc3NldC1wYXRoXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBhc3NldFBhdGg6IFwiXCIsXG4gICAgbmFtZTogXCJcIixcbiAgICBzcmM6IFwiXCIsXG4gICAgc2l6ZXM6IFs5NiwgODgsIDgwLCA3MiwgNjQsIDU2LCA0OCwgNDAsIDMyLCAyNCwgMTYsIDhdLFxuICAgIGNvbG9yczogW1xuICAgICAgXCJibGFja1wiLFxuICAgICAgXCJ3aGl0ZVwiLFxuICAgICAgXCJwcmltYXJ5XCIsXG4gICAgICBcInN1Y2Nlc3NcIixcbiAgICAgIFwiaW5mb1wiLFxuICAgICAgXCJ3YXJuaW5nXCIsXG4gICAgICBcImRhbmdlclwiLFxuICAgICAgW1wic3Ryb2tlLWJsYWNrXCIsIFwid2hpdGVcIl0sXG4gICAgICBbXCJzdHJva2Utd2hpdGVcIiwgXCJibGFja1wiXSxcbiAgICAgIFtcInN0cm9rZS1wcmltYXJ5XCIsIFwid2hpdGVcIl0sXG4gICAgICBbXCJzdHJva2Utc3VjY2Vzc1wiLCBcIndoaXRlXCJdLFxuICAgICAgW1wic3Ryb2tlLWluZm9cIiwgXCJ3aGl0ZVwiXSxcbiAgICAgIFtcInN0cm9rZS13YXJuaW5nXCIsIFwid2hpdGVcIl0sXG4gICAgICBbXCJzdHJva2UtZGFuZ2VyXCIsIFwid2hpdGVcIl0sXG4gICAgXSxcbiAgICBkaXJlY3Rpb25zOiBbXG4gICAgICBcImxlZnRcIixcbiAgICAgIFwibGVmdC11cFwiLFxuICAgICAgXCJ1cFwiLFxuICAgICAgXCJ1cC1yaWdodFwiLFxuICAgICAgXCJyaWdodFwiLFxuICAgICAgXCJyaWdodC1kb3duXCIsXG4gICAgICBcImRvd25cIixcbiAgICAgIFwiZG93bi1sZWZ0XCIsXG4gICAgXSxcbiAgICBleGFtcGxlOiBcInN0cmluZ1wiLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCBuYW1lID0gdXJsUGFyYW1zLmdldChcIm5hbWVcIik7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5IHVybCBwYXJhbWV0ZXIgXCJuYW1lXCIgaXMgcmVxdWlyZWQhJyk7XG4gICAgfVxuICAgIHRoaXMuc2NvcGUubmFtZSA9IG5hbWU7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoSWNvblByZXZpZXdDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBpbml0KG9ic2VydmVkQXR0cmlidXRlczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gc3VwZXIuaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICBQcmlzbS5oaWdobGlnaHRBbGwoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSBcImFzc2V0UGF0aFwiKSB7XG4gICAgICBjb25zdCB1cmxQYXJ0cyA9IHRoaXMuc2NvcGUuYXNzZXRQYXRoLnNwbGl0KFwiP1wiKTtcbiAgICAgIHRoaXMuc2NvcGUuYXNzZXRQYXRoID0gdXJsUGFydHNbMF07XG4gICAgICBjb25zdCBjYWNoZVF1ZXJ5UGFyYW0gPSB1cmxQYXJ0c1sxXTtcbiAgICAgIHRoaXMuc2NvcGUuc3JjID0gdGhpcy5zY29wZS5hc3NldFBhdGggKz1cbiAgICAgICAgXCJpY29uc2V0X1wiICsgdGhpcy5zY29wZS5uYW1lICsgXCIuc3ZnP1wiICsgY2FjaGVRdWVyeVBhcmFtO1xuXG4gICAgICB0aGlzLnNjb3BlLmV4YW1wbGUgPSBlc2NhcGVIdG1sKFxuICAgICAgICBgXG4gICAgICAgIDxiczQtaWNvbiBjb2xvcj1cImRhbmdlclwiIHNyYz1cIi9hc3NldHMvJHtcbiAgICAgICAgICB0aGlzLnNjb3BlLm5hbWUgKyBcIi5zdmdcIlxuICAgICAgICB9XCIgc2l6ZT1cIjMyXCIgZGlyZWN0aW9uPVwidXBcIj48L2JzNC1pY29uPlxuICAgICAgYC50cmltKClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW1wiYXNzZXRQYXRoXCIsIFwic3JjXCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCkge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgeyBCaW5kQ29udGVudENvbXBvbmVudCB9IGZyb20gXCIuL2JpbmQtY29udGVudC9iaW5kLWNvbnRlbnQuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBFeGFtcGxlQnM0VGFic0NvbXBvbmVudCB9IGZyb20gXCIuL2V4YW1wbGUtdGFicy9leGFtcGxlLXRhYnMuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBGaWxlVHJlZUNvbXBvbmVudCB9IGZyb20gXCIuL2ZpbGUtdHJlZS9maWxlLXRyZWUuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBJY29uUHJldmlld0NvbXBvbmVudCB9IGZyb20gXCIuL2ljb24tcHJldmlldy9pY29uLXByZXZpZXcuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBMb3JlbUlwc3VtQ29tcG9uZW50IH0gZnJvbSBcIi4vbG9yZW0taXBzdW0vbG9yZW0taXBzdW0uY29tcG9uZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5LWxpbmtsaXN0L3Nob3BpZnktbGlua2xpc3QuY29tcG9uZW50LmpzXCI7XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IExvcmVtSXBzdW0gfSBmcm9tIFwibG9yZW0taXBzdW1cIjtcbmltcG9ydCB7IElHZW5lcmF0b3JPcHRpb25zIH0gZnJvbSBcImxvcmVtLWlwc3VtL3NyYy9saWIvZ2VuZXJhdG9yXCI7XG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBnZW5lcmF0ZVdvcmRzPzogbnVtYmVyO1xuICBnZW5lcmF0ZVNlbnRlbmNlcz86IG51bWJlcjtcbiAgZ2VuZXJhdGVQYXJhZ3JhcGhzPzogbnVtYmVyO1xuICBmb3JtYXQ6IFwicGxhaW5cIiB8IFwiaHRtbFwiO1xufVxuXG5leHBvcnQgY2xhc3MgTG9yZW1JcHN1bUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtbG9yZW0taXBzdW1cIjtcblxuICBwcm90ZWN0ZWQgb3B0aW9uczogSUdlbmVyYXRvck9wdGlvbnMgPSB7XG4gICAgc2VudGVuY2VzUGVyUGFyYWdyYXBoOiB7XG4gICAgICBtYXg6IDgsXG4gICAgICBtaW46IDQsXG4gICAgfSxcbiAgICB3b3Jkc1BlclNlbnRlbmNlOiB7XG4gICAgICBtYXg6IDE2LFxuICAgICAgbWluOiA0LFxuICAgIH0sXG4gIH07XG5cbiAgcHJvdGVjdGVkIGxvcmVtPzogTG9yZW1JcHN1bTtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJzZW50ZW5jZXMtcGVyLXBhcmFncmFwaC1tYXhcIixcbiAgICAgIFwic2VudGVuY2VzLXBlci1wYXJhZ3JhcGgtbWluXCIsXG4gICAgICBcIndvcmRzLXBlci1zZW50ZW5jZS1tYXhcIixcbiAgICAgIFwid29yZHMtcGVyLXNlbnRlbmNlLW1pblwiLFxuICAgICAgXCJ3b3Jkc1wiLFxuICAgICAgXCJnZW5lcmF0ZS13b3Jkc1wiLFxuICAgICAgXCJnZW5lcmF0ZS1zZW50ZW5jZXNcIixcbiAgICAgIFwiZ2VuZXJhdGUtcGFyYWdyYXBoc1wiLFxuICAgICAgXCJmb3JtYXRcIixcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBnZW5lcmF0ZVBhcmFncmFwaHM6IDEsXG4gICAgZm9ybWF0OiBcImh0bWxcIixcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KExvcmVtSXBzdW1Db21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBpbml0KG9ic2VydmVkQXR0cmlidXRlczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gc3VwZXIuaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXMpLnRoZW4oKHZpZXcpID0+IHtcbiAgICAgIHJldHVybiB2aWV3O1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmxvcmVtID0gbmV3IExvcmVtSXBzdW0odGhpcy5vcHRpb25zLCB0aGlzLnNjb3BlLmZvcm1hdCk7XG4gICAgaWYgKHRoaXMuc2NvcGUuZ2VuZXJhdGVXb3Jkcykge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB0aGlzLmxvcmVtLmdlbmVyYXRlV29yZHModGhpcy5zY29wZS5nZW5lcmF0ZVdvcmRzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NvcGUuZ2VuZXJhdGVTZW50ZW5jZXMpIHtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5sb3JlbS5nZW5lcmF0ZVNlbnRlbmNlcyhcbiAgICAgICAgdGhpcy5zY29wZS5nZW5lcmF0ZVNlbnRlbmNlc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NvcGUuZ2VuZXJhdGVQYXJhZ3JhcGhzKSB7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMubG9yZW0uZ2VuZXJhdGVQYXJhZ3JhcGhzKFxuICAgICAgICB0aGlzLnNjb3BlLmdlbmVyYXRlUGFyYWdyYXBoc1xuICAgICAgKTtcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICAgIHN3aXRjaCAoYXR0cmlidXRlTmFtZSkge1xuICAgICAgY2FzZSBcInNlbnRlbmNlc1BlclBhcmFncmFwaE1heFwiOlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlbnRlbmNlc1BlclBhcmFncmFwaCkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5zZW50ZW5jZXNQZXJQYXJhZ3JhcGgubWF4ID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VudGVuY2VzUGVyUGFyYWdyYXBoTWluXCI6XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VudGVuY2VzUGVyUGFyYWdyYXBoKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNlbnRlbmNlc1BlclBhcmFncmFwaC5taW4gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3b3Jkc1BlclNlbnRlbmNlTWF4XCI6XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud29yZHNQZXJTZW50ZW5jZSkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy53b3Jkc1BlclNlbnRlbmNlLm1heCA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIndvcmRzUGVyU2VudGVuY2VNaW5cIjpcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53b3Jkc1BlclNlbnRlbmNlKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLndvcmRzUGVyU2VudGVuY2UubWluID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwid29yZHNcIjpcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53b3Jkcykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy53b3JkcyA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRlY29uc3RydWN0b3JcbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNob3BpZnlMaW5rbGlzdENvbXBvbmVudCBhcyBPcmlnaW5hbFNob3BpZnlMaW5rbGlzdENvbXBvbmVudCB9IGZyb20gXCJAcmliYWpzL3Nob3BpZnlcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL3Nob3BpZnktbGlua2xpc3QuY29tcG9uZW50Lmh0bWxcIjtcblxuLyoqXG4gKiBzaG9waWZ5LWZpbHRlclxuICovXG5leHBvcnQgY2xhc3MgU2hvcGlmeUxpbmtsaXN0Q29tcG9uZW50IGV4dGVuZHMgT3JpZ2luYWxTaG9waWZ5TGlua2xpc3RDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInNob3BpZnktbGlua2xpc3RcIjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICovXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpIHtcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtdGFicy1hdHRyLWV4YW1wbGUuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGNsYXNzIEJzNFRhYnNBdHRyRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtYnM0LXRhYnMtYXR0ci1leGFtcGxlXCI7XG5cbiAgcHVibGljIHNjb3BlID0ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChbXSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtdGFicy10cGwtZXhhbXBsZS5jb21wb25lbnQuaHRtbFwiO1xuXG5leHBvcnQgY2xhc3MgQnM0VGFic1RwbEV4YW1wbGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInJ2LWJzNC10YWJzLXRwbC1leGFtcGxlXCI7XG4gIHB1YmxpYyBzY29wZSA9IHt9O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChbXSk7XG4gIH1cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vZWFjaC1pdGVtLWV4YW1wbGUuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGNsYXNzIEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtZWFjaC1pdGVtLWV4YW1wbGVcIjtcblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGl0ZW1zOiB0aGlzLmdldEl0ZW1zKCksXG4gICAgcG9wOiB0aGlzLnBvcCxcbiAgICBwdXNoOiB0aGlzLnB1c2gsXG4gICAgcmVzZXQ6IHRoaXMucmVzZXQsXG4gICAgc2hpZnQ6IHRoaXMuc2hpZnQsXG4gICAgc29ydDogdGhpcy5zb3J0LFxuICAgIHNwbGljZTogdGhpcy5zcGxpY2UsXG4gICAgdW5zaGlmdDogdGhpcy51bnNoaWZ0LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgcHVzaCgpIHtcbiAgICB0aGlzLnNjb3BlLml0ZW1zLnB1c2goeyBuYW1lOiBcInB1c2hlZFwiIH0pO1xuICB9XG5cbiAgcHVibGljIHBvcCgpIHtcbiAgICB0aGlzLnNjb3BlLml0ZW1zLnBvcCgpO1xuICB9XG5cbiAgcHVibGljIHNoaWZ0KCkge1xuICAgIHRoaXMuc2NvcGUuaXRlbXMuc2hpZnQoKTtcbiAgfVxuXG4gIHB1YmxpYyB1bnNoaWZ0KCkge1xuICAgIHRoaXMuc2NvcGUuaXRlbXMudW5zaGlmdCh7IG5hbWU6IFwic2hpZnRlZFwiIH0pO1xuICB9XG5cbiAgcHVibGljIHNwbGljZSgpIHtcbiAgICB0aGlzLnNjb3BlLml0ZW1zLnNwbGljZSgxLCAxLCB7IG5hbWU6IFwic3BsaWNlZDFcIiB9LCB7IG5hbWU6IFwic3BsaWNlZDJcIiB9KTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLnNjb3BlLml0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xuICB9XG5cbiAgcHVibGljIHNvcnQoKSB7XG4gICAgdGhpcy5zY29wZS5pdGVtcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gKGEudmFsdWUgfHwgMCkgLSAoYi52YWx1ZSB8fCAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChbXSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SXRlbXMoKTogSXRlbVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBuYW1lOiBcInhcIiwgdmFsdWU6IDIgfSxcbiAgICAgIHsgbmFtZTogXCJ5XCIsIHZhbHVlOiAxIH0sXG4gICAgICB7IG5hbWU6IFwielwiLCB2YWx1ZTogMyB9LFxuICAgIF07XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHN1cGVyLmluaXQob2JzZXJ2ZWRBdHRyaWJ1dGVzKS50aGVuKCh2aWV3KSA9PiB7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbn1cblxuaW50ZXJmYWNlIEl0ZW0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlPzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBpdGVtczogSXRlbVtdO1xuICBwdXNoOiBFYWNoSXRlbUV4YW1wbGVDb21wb25lbnRbXCJwdXNoXCJdO1xuICBwb3A6IEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudFtcInBvcFwiXTtcbiAgc2hpZnQ6IEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudFtcInNoaWZ0XCJdO1xuICB1bnNoaWZ0OiBFYWNoSXRlbUV4YW1wbGVDb21wb25lbnRbXCJ1bnNoaWZ0XCJdO1xuICBzcGxpY2U6IEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudFtcInNwbGljZVwiXTtcbiAgcmVzZXQ6IEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudFtcInJlc2V0XCJdO1xuICBzb3J0OiBFYWNoSXRlbUV4YW1wbGVDb21wb25lbnRbXCJzb3J0XCJdO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vZXh0cmFzLXNjcm9sbC1ldmVudHMtZXhhbXBsZS5jb21wb25lbnQuaHRtbFwiO1xuXG5leHBvcnQgY2xhc3MgRXh0cmFzU2Nyb2xsRXZlbnRzRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtZXh0cmFzLXNjcm9sbC1ldmVudHMtZXhhbXBsZVwiO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG5cbiAgcHJvdGVjdGVkIGNvbnNvbGVFbGVtZW50OiBIVE1MRGl2RWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgdG91Y2hab25lRWxlbWVudDogSFRNTERpdkVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgc2NvcGU6IGFueSA9IHtcbiAgICBsb2c6IHRoaXMubG9nLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgbG9nKGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogRXZlbnQpIHtcbiAgICBpZiAodGhpcy5jb25zb2xlRWxlbWVudCkge1xuICAgICAgbGV0IGh0bWwgPSBgPHAgY2xhc3M9XCJsb2dcIj48c3BhbiBjbGFzcz1cIm5hbWVcIj4ke2V2ZW50TmFtZX08L3NwYW4+YDtcbiAgICAgIGNvbnN0IGRldGFpbCA9IChldmVudCBhcyBDdXN0b21FdmVudCkuZGV0YWlsO1xuICAgICAgaWYgKGRldGFpbCAmJiBkZXRhaWwucG9zaXRpb24pIHtcbiAgICAgICAgaHRtbCArPSBgPHNwYW4gY2xhc3M9XCJkZXRhaWxcIj4oeDogJHtkZXRhaWwucG9zaXRpb24ueH0geTogJHtkZXRhaWwucG9zaXRpb24ueX0gbWF4WDogJHtkZXRhaWwucG9zaXRpb24ubWF4WH0gbWF4WTogJHtkZXRhaWwucG9zaXRpb24ubWF4WX0pPC9zcGFuPmA7XG4gICAgICB9XG4gICAgICBodG1sICs9XG4gICAgICAgICc8c3BhbiBjbGFzcz1cInRpbWVcIj4nICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArIFwiPC9zcGFuPjwvcD5cIjtcbiAgICAgIHRoaXMuY29uc29sZUVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBodG1sKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoW10pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIHRoaXMuY29uc29sZUVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuY29uc29sZVwiKTtcbiAgICB0aGlzLnRvdWNoWm9uZUVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIudG91Y2gtem9uZVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICAvLyBPbmx5IHNldCB0aGUgY29tcG9uZW50IHRlbXBsYXRlIGlmIHRoZXJlIG5vIGNoaWxkcyBhbHJlYWR5XG4gICAgaWYgKGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vdG91Y2gtZXZlbnRzLWV4YW1wbGUuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGNsYXNzIFRvdWNoRXZlbnRzRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicnYtdG91Y2gtZXZlbnRzLWV4YW1wbGVcIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCBjb25zb2xlRWxlbWVudDogSFRNTERpdkVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIHRvdWNoWm9uZUVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgcHVibGljIHNjb3BlOiBhbnkgPSB7XG4gICAgbG9nOiB0aGlzLmxvZyxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIGxvZyhldmVudE5hbWU6IHN0cmluZywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY29uc29sZUVsZW1lbnQpIHtcbiAgICAgIGxldCBodG1sID0gYDxwIGNsYXNzPVwibG9nXCI+PHNwYW4gY2xhc3M9XCJuYW1lXCI+JHtldmVudE5hbWV9PC9zcGFuPmA7XG4gICAgICBpZiAoKGV2ZW50IGFzIGFueSkuZGV0YWlsICYmIChldmVudCBhcyBhbnkpLmRldGFpbC5vZmZzZXQpIHtcbiAgICAgICAgaHRtbCArPSBgPHNwYW4gY2xhc3M9XCJkZXRhaWxcIj4oWDogJHtcbiAgICAgICAgICAoZXZlbnQgYXMgYW55KS5kZXRhaWwub2Zmc2V0LnhcbiAgICAgICAgfSBZOiAkeyhldmVudCBhcyBhbnkpLmRldGFpbC5vZmZzZXQueX0pPC9zcGFuPmA7XG4gICAgICB9XG4gICAgICBodG1sICs9XG4gICAgICAgICc8c3BhbiBjbGFzcz1cInRpbWVcIj4nICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArIFwiPC9zcGFuPjwvcD5cIjtcbiAgICAgIHRoaXMuY29uc29sZUVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBodG1sKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoW10pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIHRoaXMuY29uc29sZUVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuY29uc29sZVwiKTtcbiAgICB0aGlzLnRvdWNoWm9uZUVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIudG91Y2gtem9uZVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICAvLyBPbmx5IHNldCB0aGUgY29tcG9uZW50IHRlbXBsYXRlIGlmIHRoZXJlIG5vIGNoaWxkcyBhbHJlYWR5XG4gICAgaWYgKGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vaTE4bi1zdGF0aWMtZXhhbXBsZS5jb21wb25lbnQuaHRtbFwiO1xuXG5leHBvcnQgY2xhc3MgSTE4blN0YXRpY0V4YW1wbGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInJ2LWkxOG4tc3RhdGljLWV4YW1wbGVcIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwdWJsaWMgc2NvcGUgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEkxOG5TdGF0aWNFeGFtcGxlQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHN1cGVyLmluaXQob2JzZXJ2ZWRBdHRyaWJ1dGVzKS50aGVuKCh2aWV3KSA9PiB7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbn1cbiIsImltcG9ydCB7IFJpYmEsIGNvcmVNb2R1bGUsIFZpZXcgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IHJlYWR5IH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBleHRyYXNNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9leHRyYXNcIjtcbmltcG9ydCB0eXBlIHsgU3RhdGUgfSBmcm9tIFwiQHJpYmFqcy9oaXN0b3J5L3NyYy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc2hvcGlmeU1vZHVsZSB9IGZyb20gXCJAcmliYWpzL3Nob3BpZnlcIjtcbmltcG9ydCB7IHJvdXRlck1vZHVsZSB9IGZyb20gXCJAcmliYWpzL3JvdXRlclwiO1xuaW1wb3J0IHsgaTE4bk1vZHVsZSB9IGZyb20gXCJAcmliYWpzL2kxOG5cIjtcbmltcG9ydCB7IGJzNE1vZHVsZSB9IGZyb20gXCJAcmliYWpzL2JzNFwiO1xuaW1wb3J0IHsgTG9jYWxlc1NlcnZpY2UgfSBmcm9tIFwiQHJpYmFqcy9zaG9waWZ5LXRkYVwiO1xuXG5pbXBvcnQgKiBhcyBDdXN0b21Db21wb25lbnRzIGZyb20gXCIuL2NvbXBvbmVudHMvaW5kZXguanNcIjtcblxuLy8gRXhhbXBsZXNcbmltcG9ydCB7IEVhY2hJdGVtRXhhbXBsZUNvbXBvbmVudCB9IGZyb20gXCIuL2RlbW9zL2NvcmUtZWFjaC1pdGVtL3NyYy90cy9jb21wb25lbnRzL2VhY2gtaXRlbS1leGFtcGxlL2VhY2gtaXRlbS1leGFtcGxlLmNvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHsgQnM0VGFic0F0dHJFeGFtcGxlQ29tcG9uZW50IH0gZnJvbSBcIi4vZGVtb3MvYnM0LXRhYnMtYXR0ci9zcmMvdHMvY29tcG9uZW50cy9iczQtdGFicy1hdHRyLWV4YW1wbGUvYnM0LXRhYnMtYXR0ci1leGFtcGxlLmNvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHsgQnM0VGFic1RwbEV4YW1wbGVDb21wb25lbnQgfSBmcm9tIFwiLi9kZW1vcy9iczQtdGFicy10cGwvc3JjL3RzL2NvbXBvbmVudHMvYnM0LXRhYnMtdHBsLWV4YW1wbGUvYnM0LXRhYnMtdHBsLWV4YW1wbGUuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBJMThuU3RhdGljRXhhbXBsZUNvbXBvbmVudCB9IGZyb20gXCIuL2RlbW9zL2kxOG4tc3RhdGljL3NyYy90cy9jb21wb25lbnRzL2kxOG4tc3RhdGljLWV4YW1wbGUvaTE4bi1zdGF0aWMtZXhhbXBsZS5jb21wb25lbnQuanNcIjtcbmltcG9ydCB7IFRvdWNoRXZlbnRzRXhhbXBsZUNvbXBvbmVudCB9IGZyb20gXCIuL2RlbW9zL2V4dHJhcy10b3VjaC1ldmVudHMvc3JjL3RzL2NvbXBvbmVudHMvdG91Y2gtZXZlbnRzLWV4YW1wbGUvdG91Y2gtZXZlbnRzLWV4YW1wbGUuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBFeHRyYXNTY3JvbGxFdmVudHNFeGFtcGxlQ29tcG9uZW50IH0gZnJvbSBcIi4vZGVtb3MvZXh0cmFzLXNjcm9sbC1ldmVudHMvc3JjL3RzL2NvbXBvbmVudHMvZXh0cmFzLXNjcm9sbC1ldmVudHMtZXhhbXBsZS9leHRyYXMtc2Nyb2xsLWV2ZW50cy1leGFtcGxlLmNvbXBvbmVudC5qc1wiO1xuXG5pbXBvcnQgKiBhcyBQcmlzbSBmcm9tIFwicHJpc21qc1wiO1xuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmFzY3JpcHRcIjtcbmltcG9ydCBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS10eXBlc2NyaXB0XCI7XG5pbXBvcnQgXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tc2Nzc1wiO1xuXG5leHBvcnQgY2xhc3MgTWFpbiB7XG4gIHByaXZhdGUgcmliYSA9IG5ldyBSaWJhKCk7XG4gIHByaXZhdGUgdmlldz86IFZpZXc7XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIm1haW5cIik7XG5cbiAgcHJpdmF0ZSBsb2NhbGVzU2VydmljZSA9IExvY2FsZXNTZXJ2aWNlLmdldFNpbmdsZXRvbigpO1xuXG4gIHByb3RlY3RlZCBvblBhZ2VSZWFkeShcbiAgICB2aWV3SWQ6IHN0cmluZyxcbiAgICBjdXJyZW50U3RhdHVzOiBTdGF0ZSxcbiAgICBwcmV2U3RhdHVzOiBTdGF0ZSxcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIG5ld1BhZ2VSYXdIVE1MOiBzdHJpbmcsXG4gICAgZGF0YXNldDogYW55XG4gICAgLy8gaXNJbml0OiBib29sZWFuXG4gICkge1xuICAgIFByaXNtLmhpZ2hsaWdodEFsbCgpO1xuICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgIHRoaXMudmlldy5tb2RlbHMuZGF0YXNldCA9IGRhdGFzZXQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yaWJhLm1vZHVsZS5yZWdpc3QoY29yZU1vZHVsZS5pbml0KCkpO1xuICAgIHRoaXMucmliYS5tb2R1bGUucmVnaXN0KGV4dHJhc01vZHVsZS5pbml0KCkpO1xuICAgIHRoaXMucmliYS5tb2R1bGUucmVnaXN0KHJvdXRlck1vZHVsZS5pbml0KCkpO1xuICAgIHRoaXMucmliYS5tb2R1bGUucmVnaXN0KHNob3BpZnlNb2R1bGUuaW5pdCgpKTtcbiAgICB0aGlzLnJpYmEubW9kdWxlLnJlZ2lzdChcbiAgICAgIGkxOG5Nb2R1bGUuaW5pdCh7IGxvY2FsZXNTZXJ2aWNlOiB0aGlzLmxvY2FsZXNTZXJ2aWNlIH0pXG4gICAgKTtcbiAgICB0aGlzLnJpYmEubW9kdWxlLnJlZ2lzdChiczRNb2R1bGUuaW5pdCgpKTtcblxuICAgIC8vIFJlZ2lzdGVyIGN1c3RvbSBjb21wb25lbnRzXG4gICAgdGhpcy5yaWJhLm1vZHVsZS5jb21wb25lbnQucmVnaXN0cyhDdXN0b21Db21wb25lbnRzKTtcblxuICAgIC8vIFJlZ2lzdCBleGFtcGxlc+KAmlxuICAgIHRoaXMucmliYS5tb2R1bGUuY29tcG9uZW50LnJlZ2lzdHMoe1xuICAgICAgRWFjaEl0ZW1FeGFtcGxlQ29tcG9uZW50LFxuICAgICAgQnM0VGFic0F0dHJFeGFtcGxlQ29tcG9uZW50LFxuICAgICAgQnM0VGFic1RwbEV4YW1wbGVDb21wb25lbnQsXG4gICAgICBJMThuU3RhdGljRXhhbXBsZUNvbXBvbmVudCxcbiAgICAgIFRvdWNoRXZlbnRzRXhhbXBsZUNvbXBvbmVudCxcbiAgICAgIEV4dHJhc1Njcm9sbEV2ZW50c0V4YW1wbGVDb21wb25lbnQsXG4gICAgfSk7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIub24oXCJuZXdQYWdlUmVhZHlcIiwgdGhpcy5vblBhZ2VSZWFkeSwgdGhpcyk7XG5cbiAgICB3aW5kb3cubW9kZWwgPSB3aW5kb3cubW9kZWwgfHwge307XG4gICAgd2luZG93Lm1vZGVsLmRhdGFzZXQgPSB3aW5kb3cubW9kZWwuZGF0YXNldCB8fCB7fTtcblxuICAgIHRoaXMudmlldyA9IHRoaXMucmliYS5iaW5kKGRvY3VtZW50LmJvZHksIHdpbmRvdy5tb2RlbCk7XG4gICAgLy8gdmlldy5yZWdpc3RDb21wb25lbnRzKCk7XG4gIH1cbn1cblxucmVhZHkoKCkgPT4ge1xuICBuZXcgTWFpbigpO1xufSk7XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IENvbGxhcHNlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBvblJvdXRlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3VybFwiO1xuXG4vKipcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMS9jb21wb25lbnRzL2NvbGxhcHNlL1xuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi92NC1kZXYvanMvc3JjL2NvbGxhcHNlLmpzXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xsYXBzZU9uVXJsQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LWNvbGxhcHNlLW9uLXVybFwiO1xuXG4gIHByaXZhdGUgdXJsPzogc3RyaW5nO1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZShcIm1haW5cIik7XG4gIHByaXZhdGUgY29sbGFwc2VTZXJ2aWNlPzogQ29sbGFwc2VTZXJ2aWNlO1xuXG4gIHByaXZhdGUgX2NoZWNrVVJMKCkge1xuICAgIGlmICh0aGlzLnVybCAmJiBvblJvdXRlKHRoaXMudXJsKSkge1xuICAgICAgdGhpcy5jb2xsYXBzZVNlcnZpY2U/LmhpZGUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBjb2xsYXBzZVNlcnZpY2Uuc2hvdygpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tVUkwgPSB0aGlzLl9jaGVja1VSTC5iaW5kKHRoaXMpO1xuXG4gIGJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5jb2xsYXBzZVNlcnZpY2UgPSBuZXcgQ29sbGFwc2VTZXJ2aWNlKGVsLCBbXSwgeyB0b2dnbGU6IGZhbHNlIH0pO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGlmICh0aGlzLmNoZWNrVVJMKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoZXIub2ZmKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMuY2hlY2tVUkwpO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB1cmw6IHN0cmluZykge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIGlmICh0aGlzLmNoZWNrVVJMKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoZXIub2ZmKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMuY2hlY2tVUkwpO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoZXIub24oXCJuZXdQYWdlUmVhZHlcIiwgdGhpcy5jaGVja1VSTCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IENvbGxhcHNlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNsYXNzIENvbGxhcHNlQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LWNvbGxhcHNlXCI7XG4gIGJpbmQoKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJiczQtY29sbGFwc2UgaXMgZGVwcmVjYXRlZCwgdXNlIGJzNC10b2dnbGUtY29sbGFwc2Utb24tY2xpY2sgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdGFyZ2V0U2VsZWN0b3I6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50Pih0YXJnZXRTZWxlY3Rvcik7XG5cbiAgICBjb25zdCBjb2xsYXBzZVNlcnZpY2VzOiBDb2xsYXBzZVNlcnZpY2VbXSA9IFtdO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IHtcbiAgICAgIGNvbGxhcHNlU2VydmljZXMucHVzaChcbiAgICAgICAgbmV3IENvbGxhcHNlU2VydmljZSh0YXJnZXQsIFtlbF0sIHsgdG9nZ2xlOiBmYWxzZSB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb2xsYXBzZVNlcnZpY2VzLmZvckVhY2goKGNvbGxhcHNlU2VydmljZSkgPT4ge1xuICAgICAgICBjb2xsYXBzZVNlcnZpY2UudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgRHJvcGRvd25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2Ryb3Bkb3duLnNlcnZpY2UuanNcIjtcblxuLyoqXG4gKlxuICogQHNlZSBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy80LjEvY29tcG9uZW50cy9kcm9wZG93bi9cbiAqL1xuZXhwb3J0IGNsYXNzIERyb3Bkb3duQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LWRyb3Bkb3duXCI7XG5cbiAgcHJpdmF0ZSB0b2dnbGVyPzogSFRNTEJ1dHRvbkVsZW1lbnQgfCBIVE1MQW5jaG9yRWxlbWVudDtcblxuICBwcml2YXRlIGRyb3Bkb3duU2VydmljZT86IERyb3Bkb3duU2VydmljZTtcblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMudG9nZ2xlciA9ICgoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGRvd24tdG9nZ2xlXCIpXG4gICAgICA/IGVsXG4gICAgICA6IGVsLnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcGRvd24tdG9nZ2xlXCIpKSB8fCBlbCkgYXNcbiAgICAgIHwgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgICAgIHwgSFRNTEFuY2hvckVsZW1lbnQ7XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgb3B0aW9uOiBhbnkgPSB7fSkge1xuICAgIGlmICghdGhpcy50b2dnbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBkcm9wZG93biB0b2dnbGUgZWxlbWVudCBmb3VuZCFcIik7XG4gICAgfVxuICAgIGlmICh0aGlzLmRyb3Bkb3duU2VydmljZSkge1xuICAgICAgdGhpcy5kcm9wZG93blNlcnZpY2UuZGlzcG9zZSgpO1xuICAgICAgdGhpcy50b2dnbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmRyb3Bkb3duU2VydmljZS50b2dnbGUpO1xuICAgIH1cbiAgICB0aGlzLmRyb3Bkb3duU2VydmljZSA9IG5ldyBEcm9wZG93blNlcnZpY2UodGhpcy50b2dnbGVyLCBvcHRpb24pO1xuICAgIHRoaXMuZHJvcGRvd25TZXJ2aWNlLnRvZ2dsZSA9IHRoaXMuZHJvcGRvd25TZXJ2aWNlLnRvZ2dsZS5iaW5kKFxuICAgICAgdGhpcy5kcm9wZG93blNlcnZpY2VcbiAgICApO1xuICAgIHRoaXMudG9nZ2xlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kcm9wZG93blNlcnZpY2UudG9nZ2xlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgeyBDb2xsYXBzZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvY29sbGFwc2Uuc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgb25Sb3V0ZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy91cmxcIjtcblxuLyoqXG4gKlxuICogQHNlZSBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy80LjEvY29tcG9uZW50cy9jb2xsYXBzZS9cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQtZGV2L2pzL3NyYy9jb2xsYXBzZS5qc1xuICovXG5leHBvcnQgY2xhc3MgRXhwYW5PblVybEJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcImJzNC1leHBhbi1vbi11cmxcIjtcbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHVybDogc3RyaW5nKSB7XG4gICAgY29uc3QgY29sbGFwc2VTZXJ2aWNlID0gbmV3IENvbGxhcHNlU2VydmljZShlbCwgW10sIHsgdG9nZ2xlOiBmYWxzZSB9KTtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIm1haW5cIik7XG5cbiAgICBjb25zdCBjaGVja1VSTCA9ICh1cmxUb0NoZWNrPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAodXJsVG9DaGVjayAmJiBvblJvdXRlKHVybFRvQ2hlY2spKSB7XG4gICAgICAgIGNvbGxhcHNlU2VydmljZS5zaG93KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgY29sbGFwc2VTZXJ2aWNlLmhpZGUoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgZGlzcGF0Y2hlci5vbihcIm5ld1BhZ2VSZWFkeVwiLCAoKSA9PiBjaGVja1VSTCh1cmwpKTtcblxuICAgIGNoZWNrVVJMKHVybCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBvcG92ZXJTZXJ2aWNlLCBQb3BvdmVyT3B0aW9ucyB9IGZyb20gXCJAcmliYWpzL2JzNFwiO1xuaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBQb3BvdmVyQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LXBvcG92ZXJcIjtcblxuICBwcml2YXRlIHBvcG92ZXI/OiBQb3BvdmVyU2VydmljZTtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHsgW2tleTogc3RyaW5nXTogRXZlbnRMaXN0ZW5lciB9ID0ge307XG5cbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnNPckNvbnRlbnQ6IHN0cmluZyB8IFBvcG92ZXJPcHRpb25zKSB7XG4gICAgbGV0IG9wdGlvbnM6IFBhcnRpYWw8UG9wb3Zlck9wdGlvbnM+ID0ge307XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG9wdGlvbnMuY29udGVudCA9IG9wdGlvbnNPckNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9uc09yQ29udGVudCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgb3B0aW9ucyA9IHsgLi4ub3B0aW9uc09yQ29udGVudCB9O1xuICAgIH1cbiAgICBvcHRpb25zLnBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50IHx8IFwiYXV0b1wiO1xuXG4gICAgY29uc3QgcG9wb3ZlciA9IG5ldyBQb3BvdmVyU2VydmljZShlbCwge1xuICAgICAgLi4uUG9wb3ZlclNlcnZpY2UuRGVmYXVsdCxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG5cbiAgICAvLyBkZXN0cm95IHByZXZpb3VzIHBvcG92ZXIgaWYgaXQgYWxyZWFkeSBleGlzdHNcbiAgICBpZiAodGhpcy5wb3BvdmVyKSB7XG4gICAgICB0aGlzLnBvcG92ZXIuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIHRoaXMucG9wb3ZlciA9IHBvcG92ZXI7XG5cbiAgICAvKlxuICAgICAqIE1ldGhvZHMgXCJzaG93XCIsIFwiaGlkZVwiLCBldGMuIG9mIHRoZSBQb3BvdmVyU2VydmljZSBjYW4gYmUgY2FsbGVkIGJ5IGRpc3BhdGNoaW5nIGFuXG4gICAgICogZXZlbnQgYHRyaWdnZXItJHttZXRob2ROYW1lfWAgb24gdGhlIGJvdW5kIGVsZW1lbnQuXG4gICAgICogQWxsIHRoZXNlIG1ldGhvZHMgaGF2ZSBubyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgY29uc3QgbWV0aG9kTmFtZXM6IChrZXlvZiB0eXBlb2YgcG9wb3ZlcilbXSA9IFtcbiAgICAgIFwic2hvd1wiLFxuICAgICAgXCJoaWRlXCIsXG4gICAgICBcInRvZ2dsZVwiLFxuICAgICAgXCJkaXNwb3NlXCIsXG4gICAgICBcImVuYWJsZVwiLFxuICAgICAgXCJkaXNhYmxlXCIsXG4gICAgICBcInRvZ2dsZUVuYWJsZWRcIixcbiAgICAgIFwidXBkYXRlXCIsIC8vIHJlbmRlciB1cGRhdGVcbiAgICBdO1xuXG4gICAgLy8gcmVtb3ZlIGxpc3RlbmVycyBvZiBwcmV2aW91cyBQb3BvdmVyIGlmIHRoZXJlIGFscmVhZHkgd2FzIG9uZVxuICAgIGlmICh0aGlzLmxpc3RlbmVycykge1xuICAgICAgZm9yIChjb25zdCBbdHJpZ2dlciwgbGlzdGVuZXJdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMubGlzdGVuZXJzKSkge1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJpZ2dlciwgbGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgbWV0aG9kTmFtZSBvZiBtZXRob2ROYW1lcykge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IGB0cmlnZ2VyLSR7bWV0aG9kTmFtZX1gO1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAocG9wb3ZlclttZXRob2ROYW1lXSBhcyBhbnkpLmJpbmQocG9wb3Zlcik7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIodHJpZ2dlciwgbGlzdGVuZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnNbdHJpZ2dlcl0gPSBsaXN0ZW5lcjtcbiAgICB9XG4gIH1cblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIC8vIGluZm9ybSBhbmNlc3RvcnMgdGhhdCB0aGlzIHBvcG92ZXIgd2FzIGJvdW5kXG4gICAgLy8gRXZlbnQgbmFtZSBpbiBzYW1lIHN0eWxlIGFzIHRoZSBvdGhlciBwb3BvdmVyIEN1c3RvbUV2ZW50cyBmcm9tIEJvb3RzdHJhcFxuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJib3VuZC5icy5wb3BvdmVyXCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KVxuICAgICk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgLy8gZGVzdHJveSBQb3BvdmVyIGlmIGl0IGFscmVhZHkgZXhpc3RzXG4gICAgaWYgKHRoaXMucG9wb3Zlcikge1xuICAgICAgdGhpcy5wb3BvdmVyLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGxpc3RlbmVycyBpZiB0aGVyZSBhcmUgYW55XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IFt0cmlnZ2VyLCBsaXN0ZW5lcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmlnZ2VyLCBsaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2NvbnRyb2xcIjtcbmltcG9ydCB7IGlzSW5WaWV3cG9ydCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuLyoqXG4gKiBzY3JvbGxzcHktY2xhc3NcbiAqIEBzZWUgaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4xL2NvbXBvbmVudHMvc2Nyb2xsc3B5L1xuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsc3B5Q2xhc3NCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MSW5wdXRFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcImJzNC1zY3JvbGxzcHktKlwiO1xuXG4gIHByaXZhdGUgdGFyZ2V0PzogRWxlbWVudDtcbiAgcHJpdmF0ZSBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfb25TY3JvbGwoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGFyZ2V0IGVsZW1lbnQgZm91bmQhXCIpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jbGFzc05hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNsYXNzTmFtZSBub3Qgc2V0IVwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0luVmlld3BvcnQodGhpcy50YXJnZXQpKSB7XG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWUpO1xuICAgICAgaWYgKHRoaXMuZWwudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICAgIHRoaXMuZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZSk7XG4gICAgICBpZiAodGhpcy5lbC50eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgdGhpcy5lbC5jaGVja2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByaXZhdGUgb25TY3JvbGwgPSBkZWJvdW5jZSh0aGlzLl9vblNjcm9sbC5iaW5kKHRoaXMpKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XG4gICAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50XG4gICAqIEByZXR1cm4gUmV0dXJucyB0cnVlIGlmIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XG4gICAqL1xuICBwcml2YXRlIF9pc0luVmlld3BvcnQoZWxlbTogRWxlbWVudCkge1xuICAgIGlmICghZWxlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBvZmZzZXRUb3AgPSBOdW1iZXIodGhpcy5lbC5kYXRhc2V0Lm9mZnNldCB8fCAwKTtcbiAgICBjb25zdCBvZmZzZXRCb3R0b20gPSBOdW1iZXIodGhpcy5lbC5kYXRhc2V0Lm9mZnNldEJvdHRvbSB8fCAwKTtcbiAgICByZXR1cm4gaXNJblZpZXdwb3J0KGVsZW0sIG9mZnNldFRvcCwgb2Zmc2V0Qm90dG9tKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNJblZpZXdwb3J0ID0gdGhpcy5faXNJblZpZXdwb3J0LmJpbmQodGhpcyk7XG5cbiAgYmluZCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMub25TY3JvbGwoKTtcbiAgfVxuICByb3V0aW5lKGVsOiBIVE1MSW5wdXRFbGVtZW50LCB0YXJnZXRTZWxlY3Rvcjogc3RyaW5nKSB7XG4gICAgY29uc3QgbmF0aXZlSURUYXJnZXRTZWxlY3RvciA9IHRhcmdldFNlbGVjdG9yLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobmF0aXZlSURUYXJnZXRTZWxlY3RvcikgfHwgdW5kZWZpbmVkO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgfVxuICB1bmJpbmQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tIFwiQHJpYmFqcy9iczQvc3JjL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGNsYXNzIFNob3dUb2FzdE9uRXZlbnRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8VG9hc3QsIEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwic2hvdy10b2FzdC1vbi0qXCI7XG5cbiAgcHJpdmF0ZSB0b2FzdERhdGE/OiBUb2FzdDtcblxuICBwcml2YXRlIF9vbkV2ZW50KGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgIGlmICghdGhpcy50b2FzdERhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvYXN0IGRhdGEgbm90IHNldCFcIik7XG4gICAgfVxuICAgIHRoaXMudG9hc3REYXRhLiRldmVudCA9IGV2ZW50O1xuICAgIHRoaXMudG9hc3REYXRhLiRjb250ZXh0ID0gdGhpcy52aWV3Lm1vZGVscztcbiAgICBjb25zdCB0b2FzdERhdGE6IFRvYXN0ID0gbmV3IFRvYXN0KHRoaXMudG9hc3REYXRhKTtcbiAgICBjb25zdCBub3RpZmljYXRpb25EaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcbiAgICAgIHRvYXN0RGF0YS5jaGFubmVsIHx8IFwidG9hc3RcIlxuICAgICk7XG4gICAgbm90aWZpY2F0aW9uRGlzcGF0Y2hlci50cmlnZ2VyKFwic2hvdy1ub3RpZmljYXRpb25cIiwgdG9hc3REYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FdmVudCA9IHRoaXMuX29uRXZlbnQuYmluZCh0aGlzKTtcblxuICBiaW5kKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQpIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lIGFzIGFueSwgdGhpcy5vbkV2ZW50LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gIH1cbiAgcm91dGluZShlbDogSFRNTFVua25vd25FbGVtZW50LCB0b2FzdERhdGE6IFRvYXN0KSB7XG4gICAgaWYgKHRoaXMuYXJncyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJncyBpcyBudWxsXCIpO1xuICAgIH1cbiAgICB0aGlzLnRvYXN0RGF0YSA9IHRvYXN0RGF0YTtcbiAgfVxuICB1bmJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSBhcyBhbnksIHRoaXMub25FdmVudCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IENvbGxhcHNlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFRvZ2dsZUNvbGxhcHNlT25FdmVudEJpbmRlciBleHRlbmRzIEJpbmRlcjxcbiAgc3RyaW5nLFxuICBIVE1MSW5wdXRFbGVtZW50XG4+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LXRvZ2dsZS1jb2xsYXBzZS1vbi0qXCI7XG5cbiAgcHJpdmF0ZSB0YXJnZXRzID0gbmV3IE1hcDxIVE1MRWxlbWVudCwgQ29sbGFwc2VTZXJ2aWNlPigpO1xuXG4gIHByaXZhdGUgX29uRXZlbnQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBmb3IgKGNvbnN0IGNvbGxhcHNlU2VydmljZSBvZiB0aGlzLnRhcmdldHMudmFsdWVzKCkpIHtcbiAgICAgIGNvbGxhcHNlU2VydmljZS50b2dnbGUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uRXZlbnQgPSB0aGlzLl9vbkV2ZW50LmJpbmQodGhpcyk7XG5cbiAgYmluZChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLm9uRXZlbnQgPSB0aGlzLm9uRXZlbnQuYmluZCh0aGlzKTtcbiAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmdzIGlzIG51bGxcIik7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMub25FdmVudCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5vbkV2ZW50KTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB0YXJnZXRTZWxlY3Rvcjogc3RyaW5nKSB7XG4gICAgY29uc3QgbmV3VGFyZ2V0cyA9IEFycmF5LmZyb20oXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50Pih0YXJnZXRTZWxlY3RvcilcbiAgICApO1xuXG4gICAgaWYgKG5ld1RhcmdldHMubGVuZ3RoIDw9IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFt0b2dnbGVDb2xsYXBzZU9uRXZlbnRCaW5kZXJdIE5vIGVsZW1lbnQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIgZm91bmQuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHRhcmdldCBvZiB0aGlzLnRhcmdldHMua2V5cygpKSB7XG4gICAgICBpZiAoIW5ld1RhcmdldHMuZmluZCgoeCkgPT4geCA9PT0gdGFyZ2V0KSkge1xuICAgICAgICB0aGlzLnRhcmdldHMuZ2V0KHRhcmdldCk/LmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy50YXJnZXRzLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgdGFyZ2V0IG9mIG5ld1RhcmdldHMpIHtcbiAgICAgIGlmICghdGhpcy50YXJnZXRzLmhhcyh0YXJnZXQpKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0cy5zZXQoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIG5ldyBDb2xsYXBzZVNlcnZpY2UodGFyZ2V0LCBbZWxdLCB7IHRvZ2dsZTogZmFsc2UgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQb3BwZXIgZnJvbSBcInBvcHBlci5qc1wiO1xuaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG4vKipcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMS9jb21wb25lbnRzL3Rvb2x0aXBzL1xuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi92NC1kZXYvanMvc3JjL3Rvb2x0aXAuanNcbiAqL1xuXG5jb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG50ZW1wbGF0ZS5jbGFzc0xpc3QuYWRkKFwidG9vbHRpcFwiKTtcbnRlbXBsYXRlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJ0b29sdGlwXCIpO1xuXG5jb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5hcnJvdy5jbGFzc0xpc3QuYWRkKFwiYXJyb3dcIik7XG50ZW1wbGF0ZS5hcHBlbmRDaGlsZChhcnJvdyk7XG5cbmNvbnN0IGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmlubmVyLmNsYXNzTGlzdC5hZGQoXCJ0b29sdGlwLWlubmVyXCIpO1xudGVtcGxhdGUuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sdGlwQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTElucHV0RWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJiczQtdG9vbHRpcFwiO1xuXG4gIHByaXZhdGUgcG9wcGVyPzogUG9wcGVyO1xuXG4gIHByaXZhdGUgdGlwID0gdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuXG4gIHByaXZhdGUgX3Nob3coKSB7XG4gICAgY29uc3QgcGxhY2VtZW50ID0gKHRoaXMuZWwuZGF0YXNldC5wbGFjZW1lbnQgfHwgXCJ0b3BcIikgYXNcbiAgICAgIHwgXCJhdXRvXCJcbiAgICAgIHwgXCJ0b3BcIlxuICAgICAgfCBcInJpZ2h0XCJcbiAgICAgIHwgXCJib3R0b21cIlxuICAgICAgfCBcImxlZnRcIjtcbiAgICBjb25zdCBvZmZzZXQgPSAwO1xuICAgIHRoaXMucG9wcGVyID0gbmV3IFBvcHBlcih0aGlzLmVsLCB0aGlzLnRpcCwge1xuICAgICAgcGxhY2VtZW50LFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcDoge1xuICAgICAgICAgIGJlaGF2aW9yOiBcImZsaXBcIixcbiAgICAgICAgfSxcbiAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICBlbGVtZW50OiBcIi5hcnJvd1wiLFxuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogXCJzY3JvbGxQYXJlbnRcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnRpcCk7XG4gICAgdGhpcy50aXAuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XG4gICAgdGhpcy50aXAuY2xhc3NMaXN0LmFkZChcImJzLXRvb2x0aXAtXCIgKyBwbGFjZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93ID0gdGhpcy5fc2hvdy5iaW5kKHRoaXMpO1xuXG4gIHByaXZhdGUgX2hpZGUoKSB7XG4gICAgdGhpcy50aXAuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XG4gICAgaWYgKHRoaXMucG9wcGVyKSB7XG4gICAgICB0aGlzLnBvcHBlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoaWRlID0gdGhpcy5faGlkZS5iaW5kKHRoaXMpO1xuXG4gIGJpbmQoZWw6IEhUTUxVbmtub3duRWxlbWVudCkge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMuc2hvdyk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5oaWRlKTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB0ZXh0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbm5lckVsID0gdGhpcy50aXAucXVlcnlTZWxlY3RvcihcIi50b29sdGlwLWlubmVyXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgIGlubmVyRWwuaW5uZXJIVE1MID0gdGV4dDtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMuc2hvdyk7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLmhpZGUpO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9iczQtY29sbGFwc2Utb24tdXJsLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYnM0LWNvbGxhcHNlLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYnM0LXRvZ2dsZS1jb2xsYXBzZS1vbi1ldmVudC5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JzNC1kcm9wZG93bi5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JzNC1leHBhbi1vbi11cmwuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iczQtcG9wb3Zlci5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JzNC1zaG93LXRvYXN0LW9uLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYnM0LXNjcm9sbHNweS1jbGFzcy5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JzNC10b29sdGlwLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsLXRvLW9uLWV2ZW50LmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9nZ2xlLWF0dHJpYnV0ZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvZ2dsZS1jbGFzcy5iaW5kZXIuanNcIjtcbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IHNjcm9sbFRvIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsVG9PbkV2ZW50QmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTElucHV0RWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJzY3JvbGwtdG8tb24tKlwiO1xuXG4gIHByaXZhdGUgdGFyZ2V0PzogSFRNTEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBfb25FdmVudChldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBOdW1iZXIodGhpcy5lbC5kYXRhc2V0Lm9mZnNldCB8fCAwKTtcbiAgICBjb25zdCBzY3JvbGxFbGVtZW50ID0gdGhpcy5lbC5kYXRhc2V0LnNjcm9sbEVsZW1lbnRcbiAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4odGhpcy5lbC5kYXRhc2V0LnNjcm9sbEVsZW1lbnQpXG4gICAgICA6IHdpbmRvdztcbiAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgIHNjcm9sbFRvKHRoaXMudGFyZ2V0LCBvZmZzZXQsIHNjcm9sbEVsZW1lbnQpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uRXZlbnQgPSB0aGlzLl9vbkV2ZW50LmJpbmQodGhpcyk7XG5cbiAgYmluZChlbDogSFRNTFVua25vd25FbGVtZW50KSB7XG4gICAgdGhpcy5vbkV2ZW50ID0gdGhpcy5vbkV2ZW50LmJpbmQodGhpcyk7XG4gICAgY29uc3QgZXZlbnROYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5vbkV2ZW50LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQsIHRhcmdldFNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRhcmdldCA9XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50Pih0YXJnZXRTZWxlY3RvcikgfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgdW5iaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMub25FdmVudCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHsgVE9HR0xFX0JVVFRPTiwgVE9HR0xFX0FUVFJJQlVURSB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBBZGRzIC8gcmVtb3ZlcyB0aGUgYXR0cmlidXRlIG9uIGNsaWNrIG9uIHRoZSBiczQtdG9nZ2xlLWJ1dHRvbiB3aXRoIHRoZSBzYW1lIGlkXG4gKiBFLmcuIHdpdGggdGhpcyBiaW5kZXIgeW91IGNhbiB0b2dnbGUgYSBoaWRkZW4gYXR0cmlidXRlIHRvIHNob3cgLyBoaWRlIHRoZSBlbGVtZW50XG4gKiBFdmVudHNcbiAqICogYG9mZmBcbiAqICogYG9uYFxuICovXG5leHBvcnQgY2xhc3MgVG9nZ2xlQXR0cmlidXRlQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYnM0LXRvZ2dsZS1hdHRyaWJ1dGUtKlwiO1xuXG4gIHByaXZhdGUgdG9nZ2xlQnV0dG9uRXZlbnRzPzogRXZlbnREaXNwYXRjaGVyO1xuICBwcml2YXRlIHN0YXRlID0gXCJvZmZcIjtcblxuICBwcml2YXRlIF90cmlnZ2VyU3RhdGUoKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHM/LnRyaWdnZXIoXG4gICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuc3RhdGUsXG4gICAgICB0aGlzLnN0YXRlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdHJpZ2dlclN0YXRlID0gdGhpcy5fdHJpZ2dlclN0YXRlLmJpbmQodGhpcyk7XG5cbiAgcHJpdmF0ZSBfb25Ub2dnbGUoKSB7XG4gICAgdGhpcy50b2dnbGUuYmluZCh0aGlzKSh0aGlzLmVsKTtcbiAgfVxuXG4gIHByaXZhdGUgb25Ub2dnbGUgPSB0aGlzLl9vblRvZ2dsZS5iaW5kKHRoaXMpO1xuXG4gIHByaXZhdGUgdG9nZ2xlKGVsOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBcInJlbW92ZWRcIikge1xuICAgICAgdGhpcy5hZGQuYmluZCh0aGlzKShlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlLmJpbmQodGhpcykoZWwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlKGVsOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICB0aGlzLnN0YXRlID0gXCJyZW1vdmVkXCI7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChUT0dHTEVfQVRUUklCVVRFLmVsRXZlbnROYW1lcy5yZW1vdmVkLCB7XG4gICAgICAgIGRldGFpbDogeyBhdHRyaWJ1dGVOYW1lIH0sXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy50cmlnZ2VyU3RhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkKGVsOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuXG4gICAgZWwuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWUpO1xuICAgIHRoaXMuc3RhdGUgPSBcImFkZGVkXCI7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChUT0dHTEVfQVRUUklCVVRFLmVsRXZlbnROYW1lcy5hZGRlZCwge1xuICAgICAgICBkZXRhaWw6IHsgYXR0cmlidXRlTmFtZSB9LFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMudHJpZ2dlclN0YXRlKCk7XG4gIH1cblxuICBiaW5kKGVsOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuICAgIHRoaXMuc3RhdGUgPSBlbC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkgPyBcImFkZGVkXCIgOiBcInJlbW92ZWRcIjtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cz8ub2ZmKFxuICAgICAgVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLnRvZ2dsZSxcbiAgICAgIHRoaXMub25Ub2dnbGUsXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cz8ub2ZmKFxuICAgICAgVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLmluaXQsXG4gICAgICB0aGlzLnRyaWdnZXJTdGF0ZSxcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgcm91dGluZShlbDogSFRNTEJ1dHRvbkVsZW1lbnQsIG5ld0lkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvbGRJZCA9IHRoaXMuX2dldFZhbHVlKGVsKTtcblxuICAgIGlmIChvbGRJZCAmJiB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cykge1xuICAgICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMub2ZmKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMudG9nZ2xlLFxuICAgICAgICB0aGlzLm9uVG9nZ2xlLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMub2ZmKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuaW5pdCxcbiAgICAgICAgdGhpcy50cmlnZ2VyU3RhdGUsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cykge1xuICAgICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMgPSBuZXcgRXZlbnREaXNwYXRjaGVyKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLm5zUHJlZml4ICsgbmV3SWRcbiAgICAgICk7XG4gICAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vbihcbiAgICAgICAgVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLnRvZ2dsZSxcbiAgICAgICAgdGhpcy5vblRvZ2dsZSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuaW5pdCxcbiAgICAgICAgdGhpcy50cmlnZ2VyU3RhdGUsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IFRPR0dMRV9CVVRUT04sIFRPR0dMRV9DTEFTUyB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBBZGRzIC8gcmVtb3ZlcyB0aGUgY2xhc3Mgb24gY2xpY2sgb24gdGhlIGJzNC10b2dnbGUtYnV0dG9uIHdpdGggdGhlIHNhbWUgaWRcbiAqXG4gKiBFdmVudHNcbiAqICogYG9mZmBcbiAqICogYG9uYFxuICovXG5leHBvcnQgY2xhc3MgVG9nZ2xlQ2xhc3NCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MQnV0dG9uRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJiczQtdG9nZ2xlLWNsYXNzLSpcIjtcblxuICBwcml2YXRlIHRvZ2dsZUJ1dHRvbkV2ZW50cz86IEV2ZW50RGlzcGF0Y2hlcjtcbiAgcHJpdmF0ZSBzdGF0ZSA9IFwib2ZmXCI7XG5cbiAgcHJpdmF0ZSBfdHJpZ2dlclN0YXRlKCkge1xuICAgIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzPy50cmlnZ2VyKFxuICAgICAgVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLnN0YXRlLFxuICAgICAgdGhpcy5zdGF0ZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHRyaWdnZXJTdGF0ZSA9IHRoaXMuX3RyaWdnZXJTdGF0ZS5iaW5kKHRoaXMpO1xuXG4gIHByaXZhdGUgX29uVG9nZ2xlKCkge1xuICAgIHRoaXMudG9nZ2xlLmJpbmQodGhpcykodGhpcy5lbCk7XG4gIH1cblxuICBwcml2YXRlIG9uVG9nZ2xlID0gdGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKTtcblxuICBwcml2YXRlIHRvZ2dsZShlbDogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJyZW1vdmVkXCIpIHtcbiAgICAgIHRoaXMuYWRkLmJpbmQodGhpcykoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZS5iaW5kKHRoaXMpKGVsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZShlbDogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB0aGlzLnN0YXRlID0gXCJyZW1vdmVkXCI7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChUT0dHTEVfQ0xBU1MuZWxFdmVudE5hbWVzLnJlbW92ZWQsIHtcbiAgICAgICAgZGV0YWlsOiB7IGNsYXNzTmFtZSB9LFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMudHJpZ2dlclN0YXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGFkZChlbDogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuXG4gICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUsIGNsYXNzTmFtZSk7XG4gICAgdGhpcy5zdGF0ZSA9IFwiYWRkZWRcIjtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KFRPR0dMRV9DTEFTUy5lbEV2ZW50TmFtZXMuYWRkZWQsIHtcbiAgICAgICAgZGV0YWlsOiB7IGNsYXNzTmFtZSB9LFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMudHJpZ2dlclN0YXRlKCk7XG4gIH1cblxuICBiaW5kKGVsOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgdGhpcy5zdGF0ZSA9IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpID8gXCJhZGRlZFwiIDogXCJyZW1vdmVkXCI7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHM/Lm9mZihcbiAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGUsXG4gICAgICB0aGlzLm9uVG9nZ2xlLFxuICAgICAgdGhpc1xuICAgICk7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHM/Lm9mZihcbiAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy5pbml0LFxuICAgICAgdGhpcy50cmlnZ2VyU3RhdGUsXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxCdXR0b25FbGVtZW50LCBuZXdJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgb2xkSWQgPSB0aGlzLl9nZXRWYWx1ZShlbCk7XG4gICAgbGV0IHRvZ2dsZUJ1dHRvbiA9IHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzO1xuICAgIGlmIChvbGRJZCAmJiB0b2dnbGVCdXR0b24pIHtcbiAgICAgIHRvZ2dsZUJ1dHRvbi5vZmYoVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLnRvZ2dsZSwgdGhpcy5vblRvZ2dsZSwgdGhpcyk7XG4gICAgICB0b2dnbGVCdXR0b24ub2ZmKFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy5pbml0LCB0aGlzLnRyaWdnZXJTdGF0ZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cykge1xuICAgICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMgPSBuZXcgRXZlbnREaXNwYXRjaGVyKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLm5zUHJlZml4ICsgbmV3SWRcbiAgICAgICk7XG4gICAgICB0b2dnbGVCdXR0b24gPSB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cyBhcyBFdmVudERpc3BhdGNoZXI7XG4gICAgICB0b2dnbGVCdXR0b24ub24oVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLnRvZ2dsZSwgdGhpcy5vblRvZ2dsZSwgdGhpcyk7XG4gICAgICB0b2dnbGVCdXR0b24ub24oVE9HR0xFX0JVVFRPTi5ldmVudE5hbWVzLmluaXQsIHRoaXMudHJpZ2dlclN0YXRlLCB0aGlzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFJpYmFNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgKiBhcyBiaW5kZXJzIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSBcIi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgZm9ybWF0dGVycyBmcm9tIFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlcyBmcm9tIFwiLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuL2hlbHBlci9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gXCIuL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQnM0TW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuL2ludGVyZmFjZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IGJzNE1vZHVsZTogUmliYU1vZHVsZTxCczRNb2R1bGVPcHRpb25zPiA9IHtcbiAgYmluZGVycyxcbiAgc2VydmljZXMsXG4gIGZvcm1hdHRlcnMsXG4gIGNvbXBvbmVudHMsXG4gIGhlbHBlcixcbiAgY29uc3RhbnRzLFxuICBpbml0KG9wdGlvbnM6IEJzNE1vZHVsZU9wdGlvbnMgPSB7fSkge1xuICAgIHNlcnZpY2VzLkJzNFNlcnZpY2Uuc2V0U2luZ2xldG9uKG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxufTtcbiIsImltcG9ydCB7XG4gIGhhbmRsZWl6ZUZvcm1hdHRlcixcbiAgVGVtcGxhdGVGdW5jdGlvbixcbiAgRm9ybWF0dGVyRm4sXG4gIFRlbXBsYXRlc0NvbXBvbmVudCxcbiAgU2NvcGVCYXNlLFxufSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQge1xuICBDb2xsYXBzZVNlcnZpY2UsXG4gIEVWRU5UX0hJREUsXG4gIEVWRU5UX1NIT1csXG59IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2JzNC1hY2NvcmRpb24uY29tcG9uZW50Lmh0bWxcIjtcblxuY29uc3QgaGFuZGxlaXplID0gaGFuZGxlaXplRm9ybWF0dGVyLnJlYWQgYXMgRm9ybWF0dGVyRm47XG5cbmludGVyZmFjZSBBY2NvcmRpb25JdGVtIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nO1xuICBzaG93OiBib29sZWFuO1xuICBpY29uRGlyZWN0aW9uOlxuICAgIHwgXCJsZWZ0XCJcbiAgICB8IFwibGVmdC11cFwiXG4gICAgfCBcInVwXCJcbiAgICB8IFwidXAtcmlnaHRcIlxuICAgIHwgXCJyaWdodFwiXG4gICAgfCBcInJpZ2h0LWRvd25cIlxuICAgIHwgXCJkb3duXCJcbiAgICB8IFwiZG93bi1sZWZ0XCI7XG59XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGl0ZW1zOiBBY2NvcmRpb25JdGVtW107XG4gIHRvZ2dsZTogQnM0QWNjb3JkaW9uQ29tcG9uZW50W1widG9nZ2xlXCJdO1xuICBzaG93OiBCczRBY2NvcmRpb25Db21wb25lbnRbXCJzaG93XCJdO1xuICBoaWRlOiBCczRBY2NvcmRpb25Db21wb25lbnRbXCJoaWRlXCJdO1xuICBjb2xsYXBzZUljb25TcmM/OiBzdHJpbmc7XG4gIGNvbGxhcHNlSWNvblNpemU6IG51bWJlcjtcbiAgc2hvd09ubHlPbmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBCczRBY2NvcmRpb25Db21wb25lbnQgZXh0ZW5kcyBUZW1wbGF0ZXNDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1hY2NvcmRpb25cIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZUF0dHJpYnV0ZXMgPSBbXG4gICAge1xuICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiaWNvbi1kaXJlY3Rpb25cIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICBdO1xuXG4gIC8vIHByb3RlY3RlZCBjb2xsYXBzZVNlcnZpY2VzOiBDb2xsYXBzZVNlcnZpY2VbXSA9IFtdO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiY29sbGFwc2UtaWNvbi1zcmNcIiwgXCJjb2xsYXBzZS1pY29uLXNpemVcIiwgXCJzaG93LW9ubHktb25lXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBpdGVtczogW10sXG4gICAgdG9nZ2xlOiB0aGlzLnRvZ2dsZSxcbiAgICBzaG93OiB0aGlzLnNob3csXG4gICAgaGlkZTogdGhpcy5oaWRlLFxuICAgIGNvbGxhcHNlSWNvblNpemU6IDE2LFxuICAgIHNob3dPbmx5T25lOiB0cnVlLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgaGlkZShpdGVtOiBBY2NvcmRpb25JdGVtLCBpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihgW2RhdGEtaW5kZXg9XCIke2luZGV4fVwiXWApO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMuaW5pdEl0ZW1FdmVudExpc3RlbmVycyhpdGVtLCB0YXJnZXQpO1xuICAgICAgbmV3IENvbGxhcHNlU2VydmljZSh0YXJnZXQsIFt0aGlzXSwgeyB0b2dnbGU6IGZhbHNlIH0pLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2hvdyhpdGVtOiBBY2NvcmRpb25JdGVtLCBpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihgW2RhdGEtaW5kZXg9XCIke2luZGV4fVwiXWApO1xuICAgIGNvbnN0IG90aGVycyA9IEFycmF5LmZyb20oXG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KFxuICAgICAgICBgW2RhdGEtaW5kZXhdOm5vdChbZGF0YS1pbmRleD1cIiR7aW5kZXh9XCJdKWBcbiAgICAgIClcbiAgICApO1xuICAgIGlmIChvdGhlcnMgJiYgdGhpcy5zY29wZS5zaG93T25seU9uZSkge1xuICAgICAgZm9yIChjb25zdCBvdGhlciBvZiBvdGhlcnMpIHtcbiAgICAgICAgbmV3IENvbGxhcHNlU2VydmljZShvdGhlciwgW10sIHsgdG9nZ2xlOiBmYWxzZSB9KS5oaWRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMuaW5pdEl0ZW1FdmVudExpc3RlbmVycyhpdGVtLCB0YXJnZXQpO1xuICAgICAgbmV3IENvbGxhcHNlU2VydmljZSh0YXJnZXQsIFtdLCB7IHRvZ2dsZTogZmFsc2UgfSkuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoaXRlbTogQWNjb3JkaW9uSXRlbSwgaW5kZXg6IG51bWJlcikge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oYFtkYXRhLWluZGV4PVwiJHtpbmRleH1cIl1gKTtcbiAgICBjb25zdCBvdGhlcnMgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PihcbiAgICAgICAgYFtkYXRhLWluZGV4XTpub3QoW2RhdGEtaW5kZXg9XCIke2luZGV4fVwiXSlgXG4gICAgICApXG4gICAgKTtcbiAgICBpZiAob3RoZXJzICYmIHRoaXMuc2NvcGUuc2hvd09ubHlPbmUpIHtcbiAgICAgIGZvciAoY29uc3Qgb3RoZXIgb2Ygb3RoZXJzKSB7XG4gICAgICAgIG5ldyBDb2xsYXBzZVNlcnZpY2Uob3RoZXIsIFtdLCB7IHRvZ2dsZTogZmFsc2UgfSkuaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLmluaXRJdGVtRXZlbnRMaXN0ZW5lcnMoaXRlbSwgdGFyZ2V0KTtcbiAgICAgIG5ldyBDb2xsYXBzZVNlcnZpY2UodGFyZ2V0LCBbXSwgeyB0b2dnbGU6IGZhbHNlIH0pLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0SXRlbUV2ZW50TGlzdGVuZXJzKGl0ZW06IEFjY29yZGlvbkl0ZW0sIGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgRVZFTlRfSElERSxcbiAgICAgIHRoaXMub25IaWRlLmJpbmQodGhpcywgZWxlbWVudCwgaXRlbSlcbiAgICApO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIEVWRU5UX1NIT1csXG4gICAgICB0aGlzLm9uU2hvdy5iaW5kKHRoaXMsIGVsZW1lbnQsIGl0ZW0pXG4gICAgKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBFVkVOVF9ISURFLFxuICAgICAgdGhpcy5vbkhpZGUuYmluZCh0aGlzLCBlbGVtZW50LCBpdGVtKSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBFVkVOVF9TSE9XLFxuICAgICAgdGhpcy5vblNob3cuYmluZCh0aGlzLCBlbGVtZW50LCBpdGVtKSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRDb250ZW50Q2hpbGRCeUluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC5jYXJkLWJvZHkgPiAqYCkgfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2hvdyhlbGVtZW50OiBIVE1MRWxlbWVudCwgaXRlbTogQWNjb3JkaW9uSXRlbSkge1xuICAgIGl0ZW0uc2hvdyA9IHRydWU7XG4gICAgaXRlbS5pY29uRGlyZWN0aW9uID0gXCJ1cFwiO1xuICAgIGNvbnN0IGZpcnN0Q29udGVudENoaWxkID0gdGhpcy5nZXRDb250ZW50Q2hpbGRCeUluZGV4KCk7XG4gICAgaWYgKGZpcnN0Q29udGVudENoaWxkKSB7XG4gICAgICB0aGlzLnRyaWdnZXJWaXNpYmlsaXR5Q2hhbmdlZEZvckVsZW1lbnQoZmlyc3RDb250ZW50Q2hpbGQsIGl0ZW0uc2hvdyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIG9uSGlkZShlbGVtZW50OiBIVE1MRWxlbWVudCwgaXRlbTogQWNjb3JkaW9uSXRlbSkge1xuICAgIGl0ZW0uc2hvdyA9IGZhbHNlO1xuICAgIGl0ZW0uaWNvbkRpcmVjdGlvbiA9IFwiZG93blwiO1xuICAgIGNvbnN0IGZpcnN0Q29udGVudENoaWxkID0gdGhpcy5nZXRDb250ZW50Q2hpbGRCeUluZGV4KCk7XG4gICAgaWYgKGZpcnN0Q29udGVudENoaWxkKSB7XG4gICAgICB0aGlzLnRyaWdnZXJWaXNpYmlsaXR5Q2hhbmdlZEZvckVsZW1lbnQoZmlyc3RDb250ZW50Q2hpbGQsIGl0ZW0uc2hvdyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBhbnkpIHtcbiAgICBhdHRyaWJ1dGVzLmhhbmRsZSA9IGF0dHJpYnV0ZXMuaGFuZGxlIHx8IGhhbmRsZWl6ZShhdHRyaWJ1dGVzLnRpdGxlKTtcbiAgICBhdHRyaWJ1dGVzLnNob3cgPSAhIWF0dHJpYnV0ZXMuc2hvdztcbiAgICBhdHRyaWJ1dGVzLmljb25EaXJlY3Rpb24gPVxuICAgICAgYXR0cmlidXRlcy5pY29uRGlyZWN0aW9uIHx8IGF0dHJpYnV0ZXMuc2hvdyA/IFwidXBcIiA6IFwiZG93blwiO1xuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciBgdmlzaWJpbGl0eS1jaGFuZ2VkYCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8gdXBkYXRlIGlmIHZpc2liaWxpdHkgY2hhbmdlcy5cbiAgICogU2UgYWxzbyBic2YtdGFic1xuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAcGFyYW0gdmlzaWJsZVxuICAgKi9cbiAgcHJvdGVjdGVkIHRyaWdnZXJWaXNpYmlsaXR5Q2hhbmdlZEZvckVsZW1lbnQoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICB2aXNpYmxlOiBib29sZWFuXG4gICkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gVXNlIHRoaXMgZXZlbnQgdG8gdXBkYXRlIGFueSBjdXN0b20gZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgdmlzaWJsZVxuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJ2aXNpYmlsaXR5LWNoYW5nZWRcIiwgeyBkZXRhaWw6IHsgdmlzaWJsZSB9IH0pXG4gICAgICApO1xuICAgIH0sIDIwMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0QWNjb3JkaW9uQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHN1cGVyLmluaXQob2JzZXJ2ZWRBdHRyaWJ1dGVzKS50aGVuKCh2aWV3KSA9PiB7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICB9XG5cbiAgLy8gZGVjb25zdHJ1Y3Rpb25cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgb3IgdGhlIGNoaWxkcyBhcmUgdGVtcGxhdGVzXG4gICAgaWYgKCFoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSB8fCB0aGlzLmhhc09ubHlUZW1wbGF0ZUNoaWxkcygpKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGFuaW1hdGlvbkNsYXNzOiBzdHJpbmc7XG4gIG9uQ2xpY2s6IEJzNEJ1dHRvbkNvbXBvbmVudFtcIm9uQ2xpY2tcIl07XG59XG5cbmV4cG9ydCBjbGFzcyBCczRCdXR0b25Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1idXR0b25cIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiYW5pbWF0aW9uLWNsYXNzXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBhbmltYXRpb25DbGFzczogXCJidG4tYW5pbWF0aW9uLXN0YXJ0XCIsXG4gICAgb25DbGljazogdGhpcy5vbkNsaWNrLmJpbmQodGhpcyksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkNsaWNrKCkge1xuICAgIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChCczRCdXR0b25Db21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdGFydEFuaW1hdGlvbigpIHtcbiAgICB0aGlzLmNsYXNzTGlzdC5hZGQodGhpcy5zY29wZS5hbmltYXRpb25DbGFzcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TdGFydEFuaW1hdGlvbigpIHtcbiAgICAvL1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uRW5kQW5pbWF0aW9uKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2NvcGUuYW5pbWF0aW9uQ2xhc3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGluaXQob2JzZXJ2ZWRBdHRyaWJ1dGVzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBzdXBlci5pbml0KG9ic2VydmVkQXR0cmlidXRlcykudGhlbigodmlldykgPT4ge1xuICAgICAgdGhpcy5vblN0YXJ0QW5pbWF0aW9uID0gdGhpcy5vblN0YXJ0QW5pbWF0aW9uLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwid2Via2l0QW5pbWF0aW9uU3RhcnRcIiBhcyBcImFuaW1hdGlvbnN0YXJ0XCIsXG4gICAgICAgIHRoaXMub25TdGFydEFuaW1hdGlvblxuICAgICAgKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbnN0YXJ0XCIsIHRoaXMub25TdGFydEFuaW1hdGlvbik7XG4gICAgICB0aGlzLm9uRW5kQW5pbWF0aW9uID0gdGhpcy5vbkVuZEFuaW1hdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcIndlYmtpdEFuaW1hdGlvbkVuZFwiIGFzIFwiYW5pbWF0aW9uZW5kXCIsXG4gICAgICAgIHRoaXMub25FbmRBbmltYXRpb25cbiAgICAgICk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgdGhpcy5vbkVuZEFuaW1hdGlvbik7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNjb3BlLm9uQ2xpY2spO1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgfVxuXG4gIC8vIGRlY29uc3RydWN0aW9uXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwid2Via2l0QW5pbWF0aW9uU3RhcnRcIiBhcyBcImFuaW1hdGlvbnN0YXJ0XCIsXG4gICAgICB0aGlzLm9uU3RhcnRBbmltYXRpb25cbiAgICApO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbnN0YXJ0XCIsIHRoaXMub25TdGFydEFuaW1hdGlvbik7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgXCJ3ZWJraXRBbmltYXRpb25FbmRcIiBhcyBcImFuaW1hdGlvbmVuZFwiLFxuICAgICAgdGhpcy5vbkVuZEFuaW1hdGlvblxuICAgICk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIHRoaXMub25FbmRBbmltYXRpb24pO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2NvcGUub25DbGljayk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVGdW5jdGlvbiwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IENhcm91c2VsU2VydmljZSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY2Fyb3VzZWwuc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgQ2Fyb3VzZWxPcHRpb24gfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgLy8gUHJvcGVydGllc1xuICBpbnRlcnZhbDogQ2Fyb3VzZWxPcHRpb25bXCJpbnRlcnZhbFwiXTtcbiAga2V5Ym9hcmQ6IENhcm91c2VsT3B0aW9uW1wia2V5Ym9hcmRcIl07XG4gIHNsaWRlOiBDYXJvdXNlbE9wdGlvbltcInNsaWRlXCJdO1xuICBwYXVzZU9uOiBDYXJvdXNlbE9wdGlvbltcInBhdXNlXCJdO1xuICB3cmFwOiBDYXJvdXNlbE9wdGlvbltcIndyYXBcIl07XG4gIHRvdWNoOiBDYXJvdXNlbE9wdGlvbltcInRvdWNoXCJdO1xuICByaWRlOiBDYXJvdXNlbE9wdGlvbltcInJpZGVcIl07IC8vIFRPRE9cbiAgZmFkZTogYm9vbGVhbjtcbiAgLy8gTWV0aG9kc1xuICBuZXh0OiBCczRDYXJvdXNlbENvbXBvbmVudFtcIm5leHRcIl07XG4gIG5leHRXaGVuVmlzaWJsZTogQnM0Q2Fyb3VzZWxDb21wb25lbnRbXCJuZXh0V2hlblZpc2libGVcIl07XG4gIHByZXY6IEJzNENhcm91c2VsQ29tcG9uZW50W1wicHJldlwiXTtcbiAgcGF1c2U6IEJzNENhcm91c2VsQ29tcG9uZW50W1wicGF1c2VcIl07XG4gIGN5Y2xlOiBCczRDYXJvdXNlbENvbXBvbmVudFtcImN5Y2xlXCJdO1xuICB0bzogQnM0Q2Fyb3VzZWxDb21wb25lbnRbXCJ0b1wiXTtcbiAgZGlzcG9zZTogQnM0Q2Fyb3VzZWxDb21wb25lbnRbXCJkaXNwb3NlXCJdO1xufVxuXG5leHBvcnQgY2xhc3MgQnM0Q2Fyb3VzZWxDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1jYXJvdXNlbFwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJpbnRlcnZhbFwiLFxuICAgICAgXCJrZXlib2FyZFwiLFxuICAgICAgXCJzbGlkZVwiLFxuICAgICAgXCJwYXVzZU9uXCIsXG4gICAgICBcIndyYXBcIixcbiAgICAgIFwidG91Y2hcIixcbiAgICAgIFwicmlkZVwiLFxuICAgICAgXCJmYWRlXCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIGludGVydmFsOiBDYXJvdXNlbFNlcnZpY2UuRGVmYXVsdC5pbnRlcnZhbCxcbiAgICBrZXlib2FyZDogQ2Fyb3VzZWxTZXJ2aWNlLkRlZmF1bHQua2V5Ym9hcmQsXG4gICAgc2xpZGU6IENhcm91c2VsU2VydmljZS5EZWZhdWx0LnNsaWRlLFxuICAgIHBhdXNlT246IENhcm91c2VsU2VydmljZS5EZWZhdWx0LnBhdXNlIHx8IGZhbHNlLCAvLyBjaGFuZ2VkIGZyb20gcGF1c2UgdG8gcGF1c2VPblxuICAgIHdyYXA6IENhcm91c2VsU2VydmljZS5EZWZhdWx0LndyYXAsXG4gICAgdG91Y2g6IENhcm91c2VsU2VydmljZS5EZWZhdWx0LnRvdWNoLFxuICAgIHJpZGU6IENhcm91c2VsU2VydmljZS5EZWZhdWx0LnRvdWNoIHx8IGZhbHNlLFxuICAgIGZhZGU6IGZhbHNlLFxuICAgIC8vIE1ldGhvZHNcbiAgICBuZXh0OiB0aGlzLm5leHQsXG4gICAgbmV4dFdoZW5WaXNpYmxlOiB0aGlzLm5leHRXaGVuVmlzaWJsZSxcbiAgICBwcmV2OiB0aGlzLnByZXYsXG4gICAgcGF1c2U6IHRoaXMucGF1c2UsXG4gICAgY3ljbGU6IHRoaXMuY3ljbGUsXG4gICAgdG86IHRoaXMudG8sXG4gICAgZGlzcG9zZTogdGhpcy5kaXNwb3NlLFxuICB9O1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG5cbiAgcHJvdGVjdGVkIGNhcm91c2VsU2VydmljZT86IENhcm91c2VsU2VydmljZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcImNhcm91c2VsXCIsIFwic2xpZGVcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlID0gbmV3IENhcm91c2VsU2VydmljZSh0aGlzLCB7XG4gICAgICBpbnRlcnZhbDogdGhpcy5zY29wZS5pbnRlcnZhbCxcbiAgICAgIGtleWJvYXJkOiB0aGlzLnNjb3BlLmtleWJvYXJkLFxuICAgICAgc2xpZGU6IHRoaXMuc2NvcGUuc2xpZGUsXG4gICAgICBwYXVzZTogdGhpcy5zY29wZS5wYXVzZU9uLFxuICAgICAgd3JhcDogdGhpcy5zY29wZS53cmFwLFxuICAgICAgdG91Y2g6IHRoaXMuc2NvcGUudG91Y2gsXG4gICAgfSk7XG4gICAgaWYgKHRoaXMuc2NvcGUuZmFkZSkge1xuICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWwtZmFkZVwiKTtcbiAgICB9XG4gICAgLy8gVE9ETyBtYWtlIHRoaXMgY29uZmlndXJhYmxlP1xuICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlLmN5Y2xlKCk7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwdWJsaWMgbmV4dCgpIHtcbiAgICBpZiAodGhpcy5jYXJvdXNlbFNlcnZpY2UpIHtcbiAgICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIGlmICh0aGlzLmNhcm91c2VsU2VydmljZSkge1xuICAgICAgdGhpcy5jYXJvdXNlbFNlcnZpY2UubmV4dFdoZW5WaXNpYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHByZXYoKSB7XG4gICAgaWYgKHRoaXMuY2Fyb3VzZWxTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmNhcm91c2VsU2VydmljZS5wcmV2KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBhdXNlKCkge1xuICAgIGlmICh0aGlzLmNhcm91c2VsU2VydmljZSkge1xuICAgICAgdGhpcy5jYXJvdXNlbFNlcnZpY2UucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3ljbGUoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2Fyb3VzZWxTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmNhcm91c2VsU2VydmljZS5jeWNsZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRvKGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5jYXJvdXNlbFNlcnZpY2UpIHtcbiAgICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlLnRvKGluZGV4KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5jYXJvdXNlbFNlcnZpY2UpIHtcbiAgICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBzdXBlci5pbml0KEJzNENhcm91c2VsQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsIi8qKlxuICogQmFzZWQgb24gaHR0cHM6Ly92YW5pbGxhLXBpY2tlci5qcy5vcmcvXG4gKi9cblxuaW1wb3J0IENvbG9yIGZyb20gXCJAc3BoaW54eHh4L2NvbG9yLWNvbnZlcnNpb25cIjtcbmltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVGdW5jdGlvbiB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2JzNC1jb2xvcnBpY2tlci5jb21wb25lbnQuaHRtbFwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgeyBDb2xvclBpY2tlck9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvY29udHJvbFwiO1xuXG5pbnRlcmZhY2UgRXZlbnRCdWNrZXRJdGVtIHtcbiAgdGFyZ2V0OiBIVE1MRWxlbWVudCB8IFdpbmRvdztcbiAgdHlwZTogRXZlbnRbXCJ0eXBlXCJdO1xuICBoYW5kbGVyOiBhbnk7XG59XG5cbmNsYXNzIEV2ZW50QnVja2V0IHtcbiAgcHJvdGVjdGVkIGV2ZW50czogRXZlbnRCdWNrZXRJdGVtW10gPSBbXTtcblxuICBhZGQodGFyZ2V0OiBIVE1MRWxlbWVudCB8IFdpbmRvdywgdHlwZTogRXZlbnRbXCJ0eXBlXCJdLCBoYW5kbGVyOiBhbnkpIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgdGhpcy5ldmVudHMucHVzaCh7XG4gICAgICB0YXJnZXQsXG4gICAgICB0eXBlLFxuICAgICAgaGFuZGxlcixcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZSh0YXJnZXQ6IEhUTUxFbGVtZW50LCB0eXBlOiBFdmVudFtcInR5cGVcIl0sIGhhbmRsZXI6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzID0gdGhpcy5ldmVudHMuZmlsdGVyKChlKSA9PiB7XG4gICAgICBsZXQgaXNNYXRjaCA9IHRydWU7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZS50YXJnZXQpIHtcbiAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgJiYgdHlwZSAhPT0gZS50eXBlKSB7XG4gICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyICYmIGhhbmRsZXIgIT09IGUuaGFuZGxlcikge1xuICAgICAgICBpc01hdGNoID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIEV2ZW50QnVja2V0Ll9kb1JlbW92ZShlLnRhcmdldCBhcyBIVE1MRWxlbWVudCwgZS50eXBlLCBlLmhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFpc01hdGNoO1xuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBfZG9SZW1vdmUodGFyZ2V0OiBIVE1MRWxlbWVudCwgdHlwZTogRXZlbnRbXCJ0eXBlXCJdLCBoYW5kbGVyOiBhbnkpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRzLmZvckVhY2goKGUpID0+XG4gICAgICBFdmVudEJ1Y2tldC5fZG9SZW1vdmUoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQsIGUudHlwZSwgZS5oYW5kbGVyKVxuICAgICk7XG4gICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgfVxufVxuXG5jb25zdCBkcmFnVHJhY2sgPSAoXG4gIGV2ZW50QnVja2V0OiBFdmVudEJ1Y2tldCxcbiAgYXJlYTogSFRNTEVsZW1lbnQsXG4gIGNhbGxiYWNrOiBhbnlcbikgPT4ge1xuICBsZXQgZHJhZ2dpbmcgPSBmYWxzZTtcblxuICBjb25zdCBjbGFtcCA9ICh2YWw6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsLCBtYXgpKTtcbiAgfTtcblxuICBjb25zdCBvbk1vdmUgPSAoXG4gICAgZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQsXG4gICAgaW5mbzogeyBjbGllbnRYOiBudW1iZXI7IGNsaWVudFk6IG51bWJlciB9LFxuICAgIHN0YXJ0aW5nOiBib29sZWFuXG4gICkgPT4ge1xuICAgIGlmIChzdGFydGluZykge1xuICAgICAgZHJhZ2dpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgYm91bmRzID0gYXJlYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHcgPSBib3VuZHMud2lkdGgsXG4gICAgICBoID0gYm91bmRzLmhlaWdodCxcbiAgICAgIHggPSBpbmZvLmNsaWVudFgsXG4gICAgICB5ID0gaW5mby5jbGllbnRZO1xuXG4gICAgY29uc3QgcmVsWCA9IGNsYW1wKHggLSBib3VuZHMubGVmdCwgMCwgdyksXG4gICAgICByZWxZID0gY2xhbXAoeSAtIGJvdW5kcy50b3AsIDAsIGgpO1xuXG4gICAgY2FsbGJhY2socmVsWCAvIHcsIHJlbFkgLyBoKTtcbiAgfTtcblxuICBjb25zdCBvbk1vdXNlID0gKGU6IE1vdXNlRXZlbnQsIHN0YXJ0aW5nOiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gZS5idXR0b25zID09PSB1bmRlZmluZWQgPyBlLndoaWNoIDogZS5idXR0b25zO1xuICAgIGlmIChidXR0b24gPT09IDEpIHtcbiAgICAgIG9uTW92ZShlLCBlLCBzdGFydGluZyk7XG4gICAgfVxuICAgIC8vIGBtb3VzZXVwYCBvdXRzaWRlIG9mIHdpbmRvdzpcbiAgICBlbHNlIHtcbiAgICAgIGRyYWdnaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9uVG91Y2goZTogVG91Y2hFdmVudCwgc3RhcnRpbmc6IGJvb2xlYW4pIHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgb25Nb3ZlKGUsIGUudG91Y2hlc1swXSwgc3RhcnRpbmcpO1xuICAgIH1cbiAgICAvL0Rvbid0IGludGVyZmVyZSB3aXRoIHBpbmNoLXRvLXpvb20gZXRjOlxuICAgIGVsc2Uge1xuICAgICAgZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3RpY2UgaG93IHdlIG11c3QgbGlzdGVuIG9uIHRoZSB3aG9sZSB3aW5kb3cgdG8gcmVhbGx5IGtlZXAgdHJhY2sgb2YgbW91c2UgbW92ZW1lbnRzLFxuICAvLyB3aGlsZSB0b3VjaCBtb3ZlbWVudHMgXCJzdGlja1wiIHRvIHRoZSBvcmlnaW5hbCB0YXJnZXQgZnJvbSBgdG91Y2hzdGFydGAgKHdoaWNoIHdvcmtzIHdlbGwgZm9yIG91ciBwdXJwb3NlcyBoZXJlKTpcbiAgLy9cbiAgLy8gIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTc1MDQ1OC8xODY5NjYwXG4gIC8vICBcIk1vdXNlIG1vdmVzID0gKmhvdmVyKiBsaWtlIGJlaGF2aW9yLiBUb3VjaCBtb3ZlcyA9ICpkcmFncyogbGlrZSBiZWhhdmlvclwiXG4gIC8vXG4gIGV2ZW50QnVja2V0LmFkZChhcmVhLCBcIm1vdXNlZG93blwiLCAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIG9uTW91c2UoZSwgdHJ1ZSk7XG4gIH0pO1xuICBldmVudEJ1Y2tldC5hZGQoYXJlYSwgXCJ0b3VjaHN0YXJ0XCIsIChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgb25Ub3VjaChlLCB0cnVlKTtcbiAgfSk7XG4gIGV2ZW50QnVja2V0LmFkZCh3aW5kb3csIFwibW91c2Vtb3ZlXCIsIG9uTW91c2UpO1xuICBldmVudEJ1Y2tldC5hZGQoYXJlYSwgXCJ0b3VjaG1vdmVcIiwgb25Ub3VjaCk7XG4gIGV2ZW50QnVja2V0LmFkZCh3aW5kb3csIFwibW91c2V1cFwiLCAoKSA9PiB7XG4gICAgZHJhZ2dpbmcgPSBmYWxzZTtcbiAgfSk7XG4gIGV2ZW50QnVja2V0LmFkZChhcmVhLCBcInRvdWNoZW5kXCIsICgpID0+IHtcbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICB9KTtcbiAgZXZlbnRCdWNrZXQuYWRkKGFyZWEsIFwidG91Y2hjYW5jZWxcIiwgKCkgPT4ge1xuICAgIGRyYWdnaW5nID0gZmFsc2U7XG4gIH0pO1xufTtcblxuY29uc3QgQkdfVFJBTlNQID0gYHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMicgaGVpZ2h0PScyJyUzRSUzQ3BhdGggZD0nTTEsMEgwVjFIMlYySDEnIGZpbGw9J2xpZ2h0Z3JleScvJTNFJTNDL3N2ZyUzRVwiKWA7XG5jb25zdCBIVUVTID0gMzYwO1xuLy8gV2UgbmVlZCB0byB1c2Uga2V5ZG93biBpbnN0ZWFkIG9mIGtleXByZXNzIHRvIGhhbmRsZSBFc2MgZnJvbSB0aGUgZWRpdG9yIHRleHRib3g6XG5jb25zdCBFVkVOVF9LRVkgPSBcImtleWRvd25cIjsgLy8na2V5cHJlc3MnXG5cbmZ1bmN0aW9uIHN0b3BFdmVudChlOiBFdmVudCkge1xuICAvLyBTdG9wIGFuIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIHBhcmVudDpcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuZnVuY3Rpb24gb25LZXkoXG4gIGJ1Y2tldDogRXZlbnRCdWNrZXQsXG4gIHRhcmdldDogSFRNTEVsZW1lbnQsXG4gIGtleXM6IHN0cmluZ1tdLFxuICBoYW5kbGVyOiBhbnksXG4gIHN0b3AgPSBmYWxzZVxuKSB7XG4gIGJ1Y2tldC5hZGQodGFyZ2V0LCBFVkVOVF9LRVksIGZ1bmN0aW9uIChlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihlLmtleSkgPj0gMCkge1xuICAgICAgaWYgKHN0b3ApIHtcbiAgICAgICAgc3RvcEV2ZW50KGUpO1xuICAgICAgfVxuICAgICAgaGFuZGxlcihlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBDb2xvclBpY2tlck9wdGlvbnMge1xuICBuYW1lc3BhY2U6IHN0cmluZztcbiAgaHNsOiBudW1iZXJbXTtcbiAgY3NzSHVlOiBzdHJpbmc7XG4gIGNzc0hzbDogc3RyaW5nO1xuICBjc3NIc2xhOiBzdHJpbmc7XG4gIGFscGhhQmc6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEJzNENvbG9yUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtY29sb3JwaWNrZXJcIjtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICBcIm5hbWVzcGFjZVwiLFxuICAgICAgXCJhbHBoYVwiLFxuICAgICAgXCJlZGl0b3JcIixcbiAgICAgIFwiZWRpdG9yLWZvcm1hdFwiLFxuICAgICAgXCJjYW5jZWwtYnV0dG9uXCIsXG4gICAgICBcIm9rYXktYnV0dG9uXCIsXG4gICAgICBcImNvbG9yXCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBldmVudERpc3BhdGNoZXI/OiBFdmVudERpc3BhdGNoZXI7XG5cbiAgcHVibGljIGNvbG9yPzogQ29sb3I7XG4gIHB1YmxpYyBfZGVidWcgPSBmYWxzZTtcbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBuYW1lc3BhY2U6IFwibWFpblwiLFxuICAgIGhzbDogW10sXG4gICAgY3NzSHVlOiBcIlwiLFxuICAgIGNzc0hzbDogXCJcIixcbiAgICBjc3NIc2xhOiBcIlwiLFxuICAgIGFscGhhQmc6IFwiXCIsXG4gICAgY29sb3I6IFwiIzBjZlwiLFxuICAgIGFscGhhOiB0cnVlLFxuICAgIGVkaXRvcjogdHJ1ZSxcbiAgICBlZGl0b3JGb3JtYXQ6IFwiaGV4XCIsXG4gICAgY2FuY2VsQnV0dG9uOiBmYWxzZSxcbiAgICBva2F5QnV0dG9uOiBmYWxzZSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgZXZlbnRzID0gbmV3IEV2ZW50QnVja2V0KCk7XG5cbiAgcHJvdGVjdGVkIF9kb21IOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgX2RvbVNMOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgX2RvbUE6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBfZG9tRWRpdDogSFRNTElucHV0RWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgX2RvbVNhbXBsZTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIF9kb21Pa2F5OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgX2RvbUNhbmNlbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgc3VwZXIuaW5pdChCczRDb2xvclBpY2tlckNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyID0gRXZlbnREaXNwYXRjaGVyLmdldEluc3RhbmNlKFxuICAgICAgXCJiczQtY29sb3JwaWNrZXI6XCIgKyB0aGlzLnNjb3BlLm5hbWVzcGFjZVxuICAgICk7XG4gICAgdGhpcy5zZXRDb2xvcih0aGlzLnNjb3BlLmNvbG9yKTtcbiAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJUZW1wbGF0ZShcbiAgICB0ZW1wbGF0ZTogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBudWxsXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgdGhpcy5zZXRFbGVtZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoZW5ldmVyIHRoZSBjb2xvciBjaGFuZ2VzLlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uQ2hhbmdlKGNvbG9yPzogQ29sb3IpIHtcbiAgICB0aGlzLmRlYnVnKFwib25DaGFuZ2VcIiwgY29sb3IpO1xuICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyPy50cmlnZ2VyKFwiY2hhbmdlXCIsIGNvbG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIk9rXCIuXG4gICAqL1xuICBwcm90ZWN0ZWQgb25Eb25lKGNvbG9yPzogQ29sb3IpIHtcbiAgICB0aGlzLmRlYnVnKFwib25Eb25lXCIsIGNvbG9yKTtcbiAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlcj8udHJpZ2dlcihcImRvbmVcIiwgY29sb3IpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIGlmIChoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gXCJjb2xvclwiKSB7XG4gICAgICB0aGlzLnNldENvbG9yKHRoaXMuc2NvcGUuY29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQvaW5pdGlhbGl6ZSB0aGUgcGlja2VyJ3MgY29sb3IuXG4gICAqXG4gICAqIEBwYXJhbSBjb2xvciBDb2xvciBuYW1lLCBSR0JBL0hTTEEvSEVYIHN0cmluZywgb3IgUkdCQSBhcnJheS5cbiAgICogQHBhcmFtIGZsYWdzIElmIHsgc2lsZW50OiB0cnVlIH0sIHdvbid0IHRyaWdnZXIgb25DaGFuZ2UuXG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0Q29sb3IoY29sb3I6IHN0cmluZywgZmxhZ3M6IGFueSA9IHsgc2lsZW50OiBmYWxzZSB9KSB7XG4gICAgcmV0dXJuIGRlYm91bmNlKHRoaXMuX3NldENvbG9yLmJpbmQodGhpcykpKGNvbG9yLCBmbGFncyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldENvbG9yKGNvbG9yOiBzdHJpbmcsIGZsYWdzOiBhbnkgPSB7IHNpbGVudDogZmFsc2UgfSkge1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbG9yID0gY29sb3IudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmxhZ3MgPSBmbGFncyB8fCB7fTtcbiAgICBsZXQgYztcbiAgICB0cnkge1xuICAgICAgLy8gV2lsbCB0aHJvdyBvbiB1bmtub3duIGNvbG9yczpcbiAgICAgIGMgPSBuZXcgQ29sb3IoY29sb3IpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBpZiAoZmxhZ3MuZmFpbFNpbGVudGx5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IGV4O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zY29wZS5hbHBoYSkge1xuICAgICAgY29uc3QgaHNsYSA9IGMuaHNsYTtcbiAgICAgIGhzbGFbM10gPSAxO1xuICAgICAgYy5oc2xhID0gaHNsYTtcbiAgICB9XG4gICAgdGhpcy5jb2xvciA9IGM7XG4gICAgdGhpcy5zZXRIU0xBKG51bGwsIG51bGwsIG51bGwsIG51bGwsIGZsYWdzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRFbGVtZW50cygpIHtcbiAgICB0aGlzLl9kb21IID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnBpY2tlcl9odWVcIik7XG4gICAgdGhpcy5fZG9tU0wgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIucGlja2VyX3NsXCIpO1xuICAgIHRoaXMuX2RvbUEgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIucGlja2VyX2FscGhhXCIpO1xuICAgIHRoaXMuX2RvbUVkaXQgPVxuICAgICAgKHRoaXMucXVlcnlTZWxlY3RvcihcIi5waWNrZXJfZWRpdG9yXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpIHx8IG51bGw7XG4gICAgdGhpcy5fZG9tU2FtcGxlID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnBpY2tlcl9zYW1wbGVcIik7XG4gICAgdGhpcy5fZG9tT2theSA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5waWNrZXJfZG9uZVwiKTtcbiAgICB0aGlzLl9kb21DYW5jZWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIucGlja2VyX2NhbmNlbFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlIGFsbCByZXNvdXJjZXMgdXNlZCBieSB0aGlzIHBpY2tlciBpbnN0YW5jZS5cbiAgICovXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmV2ZW50cy5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHVzZXIgaW5wdXQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYmluZEV2ZW50cygpIHtcbiAgICBjb25zdCBldmVudHMgPSB0aGlzLmV2ZW50cztcblxuICAgIGNvbnN0IGFkZEV2ZW50ID0gKFxuICAgICAgdGFyZ2V0OiBIVE1MRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQsXG4gICAgICB0eXBlOiBFdmVudFtcInR5cGVcIl0sXG4gICAgICBoYW5kbGVyOiBhbnlcbiAgICApID0+IHtcbiAgICAgIGV2ZW50cy5hZGQodGFyZ2V0LCB0eXBlLCBoYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgLy8gUHJldmVudCBjbGlja3Mgd2hpbGUgZHJhZ2dpbmcgZnJvbSBidWJibGluZyB1cCB0byB0aGUgcGFyZW50OlxuICAgIGFkZEV2ZW50KHRoaXMsIFwiY2xpY2tcIiwgKGU6IE1vdXNlRXZlbnQpID0+IGUucHJldmVudERlZmF1bHQoKSk7XG5cbiAgICAvLyBEcmFnZ2FibGUgY29sb3Igc2VsZWN0aW9uXG4gICAgY29uc3QgX2RyYWdUcmFjayA9IGRyYWdUcmFjay5iaW5kKHRoaXMpO1xuXG4gICAgLy8gU2VsZWN0IGh1ZVxuICAgIGlmIChcbiAgICAgICF0aGlzLl9kb21IIHx8XG4gICAgICAhdGhpcy5fZG9tU0wgfHxcbiAgICAgICF0aGlzLl9kb21BIHx8XG4gICAgICAhdGhpcy5fZG9tRWRpdCB8fFxuICAgICAgIXRoaXMuX2RvbU9rYXlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCByZWFkeSFcIik7XG4gICAgfVxuICAgIF9kcmFnVHJhY2soZXZlbnRzLCB0aGlzLl9kb21ILCAoeDogbnVtYmVyIC8qLCB5OiBudW1iZXIqLykgPT5cbiAgICAgIHRoaXMuc2V0SFNMQSh4KVxuICAgICk7XG5cbiAgICAvLyBTZWxlY3Qgc2F0dXJhdGlvbi9saWdodG5lc3NcbiAgICBfZHJhZ1RyYWNrKGV2ZW50cywgdGhpcy5fZG9tU0wsICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT5cbiAgICAgIHRoaXMuc2V0SFNMQShudWxsLCB4LCAxIC0geSlcbiAgICApO1xuXG4gICAgLy8gU2VsZWN0IGFscGhhXG4gICAgaWYgKHRoaXMuc2NvcGUuYWxwaGEpIHtcbiAgICAgIF9kcmFnVHJhY2soZXZlbnRzLCB0aGlzLl9kb21BLCAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+XG4gICAgICAgIHRoaXMuc2V0SFNMQShudWxsLCBudWxsLCBudWxsLCAxIC0geSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy9BbHdheXMgaW5pdCB0aGUgZWRpdG9yLCBmb3IgYWNjZXNzaWJpbGl0eSBhbmQgc2NyZWVuIHJlYWRlcnMgKHdlJ2xsIGhpZGUgaXQgd2l0aCBDU1MgaWYgYCFzZXR0aW5ncy5lZGl0b3JgKVxuICAgIGFkZEV2ZW50KHRoaXMuX2RvbUVkaXQsIFwiaW5wdXRcIiwgKGU6IElucHV0RXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIHRoaXMuc2V0Q29sb3IoaW5wdXQudmFsdWUsIHtcbiAgICAgICAgZnJvbUVkaXRvcjogdHJ1ZSxcbiAgICAgICAgZmFpbFNpbGVudGx5OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gU2VsZWN0IGFsbCB0ZXh0IG9uIGZvY3VzOlxuICAgIGFkZEV2ZW50KHRoaXMuX2RvbUVkaXQsIFwiZm9jdXNcIiwgKGU6IEZvY3VzRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIC8vSWYgbm8gY3VycmVudCBzZWxlY3Rpb246XG4gICAgICBpZiAoaW5wdXQuc2VsZWN0aW9uU3RhcnQgPT09IGlucHV0LnNlbGVjdGlvbkVuZCkge1xuICAgICAgICBpbnB1dC5zZWxlY3QoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG9uRG9uZVByb3h5ID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbkRvbmUodGhpcy5jb2xvcik7XG4gICAgfTtcbiAgICBhZGRFdmVudCh0aGlzLl9kb21Pa2F5LCBcImNsaWNrXCIsIG9uRG9uZVByb3h5KTtcbiAgICBvbktleShldmVudHMsIHRoaXMsIFtcIkVudGVyXCJdLCBvbkRvbmVQcm94eSk7XG4gIH1cblxuICAvKlxuICAgKiBcIkh1YlwiIGZvciBhbGwgY29sb3IgY2hhbmdlc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvdGVjdGVkIHNldEhTTEEoXG4gICAgaDogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgczogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgbDogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgYTogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgZmxhZ3M6IGFueSA9IHt9XG4gICkge1xuICAgIGlmICghdGhpcy5jb2xvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHJlYWR5IVwiKTtcbiAgICB9XG4gICAgY29uc3QgaHNsYSA9IHRoaXMuY29sb3IuaHNsYTtcblxuICAgIFtoLCBzLCBsLCBhXS5mb3JFYWNoKCh4LCBpKSA9PiB7XG4gICAgICBpZiAoeCB8fCB4ID09PSAwKSB7XG4gICAgICAgIGhzbGFbaV0gPSB4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuY29sb3IuaHNsYSA9IGhzbGE7XG5cbiAgICB0aGlzLnVwZGF0ZVVJKGZsYWdzKTtcblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlICYmICFmbGFncy5zaWxlbnQpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHVwZGF0ZVVJKGZsYWdzOiBhbnkgPSB7fSkge1xuICAgIHJldHVybiBkZWJvdW5jZSh0aGlzLl91cGRhdGVVSS5iaW5kKHRoaXMpKShmbGFncyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3VwZGF0ZVVJKGZsYWdzOiBhbnkgPSB7fSkge1xuICAgIGlmICghdGhpcyB8fCAhdGhpcy5jb2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2NvcGUuaHNsID0gdGhpcy5jb2xvci5oc2xhO1xuICAgIHRoaXMuc2NvcGUuY3NzSHVlID0gYGhzbCgke3RoaXMuc2NvcGUuaHNsWzBdICogSFVFU30sIDEwMCUsIDUwJSlgO1xuICAgIHRoaXMuc2NvcGUuY3NzSHNsID0gdGhpcy5jb2xvci5oc2xTdHJpbmc7XG4gICAgdGhpcy5zY29wZS5jc3NIc2xhID0gdGhpcy5jb2xvci5oc2xhU3RyaW5nO1xuXG4gICAgaWYgKCF0aGlzLl9kb21IIHx8ICF0aGlzLl9kb21TTCB8fCAhdGhpcy5fZG9tQSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29sb3IgdWkgZWxlbWVudHMgbm90IGZvdW5kIVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aHVtYkggPSB0aGlzLl9kb21ILnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5waWNrZXJfc2VsZWN0b3JcIlxuICAgICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIGNvbnN0IHRodW1iU0wgPSB0aGlzLl9kb21TTC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIucGlja2VyX3NlbGVjdG9yXCJcbiAgICApIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBjb25zdCB0aHVtYkEgPSB0aGlzLl9kb21BLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5waWNrZXJfc2VsZWN0b3JcIlxuICAgICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xuXG4gICAgaWYgKCF0aHVtYkggfHwgIXRodW1iU0wgfHwgIXRodW1iQSB8fCAhdGhpcy5fZG9tRWRpdCB8fCAhdGhpcy5fZG9tU2FtcGxlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICB0aHVtYkgsXG4gICAgICAgIHRodW1iU0wsXG4gICAgICAgIHRodW1iQSxcbiAgICAgICAgdGhpcy5fZG9tQSxcbiAgICAgICAgdGhpcy5fZG9tU0wsXG4gICAgICAgIHRoaXMuX2RvbUgsXG4gICAgICAgIHRoaXMuX2RvbUVkaXQsXG4gICAgICAgIHRoaXMuX2RvbVNhbXBsZVxuICAgICAgKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCByZWFkeSFcIik7XG4gICAgfVxuXG4gICAgY29uc3QgcG9zWCA9IChwYXJlbnQ6IEhUTUxFbGVtZW50LCBjaGlsZDogSFRNTEVsZW1lbnQsIHJlbFg6IG51bWJlcikgPT4ge1xuICAgICAgY2hpbGQuc3R5bGUubGVmdCA9IHJlbFggKiAxMDAgKyBcIiVcIjtcbiAgICB9O1xuICAgIGNvbnN0IHBvc1kgPSAocGFyZW50OiBIVE1MRWxlbWVudCwgY2hpbGQ6IEhUTUxFbGVtZW50LCByZWxZOiBudW1iZXIpID0+IHtcbiAgICAgIGNoaWxkLnN0eWxlLnRvcCA9IHJlbFkgKiAxMDAgKyBcIiVcIjtcbiAgICB9O1xuXG4gICAgcG9zWCh0aGlzLl9kb21ILCB0aHVtYkgsIHRoaXMuc2NvcGUuaHNsWzBdKTtcblxuICAgIC8vIFMvTFxuICAgIHBvc1godGhpcy5fZG9tU0wsIHRodW1iU0wsIHRoaXMuc2NvcGUuaHNsWzFdKTtcbiAgICBwb3NZKHRoaXMuX2RvbVNMLCB0aHVtYlNMLCAxIC0gdGhpcy5zY29wZS5oc2xbMl0pO1xuXG4gICAgLy8gQWxwaGFcbiAgICBwb3NZKHRoaXMuX2RvbUEsIHRodW1iQSwgMSAtIHRoaXMuc2NvcGUuaHNsWzNdKTtcblxuICAgIGNvbnN0IG9wYXF1ZSA9IHRoaXMuc2NvcGUuY3NzSHNsO1xuICAgIGNvbnN0IHRyYW5zcCA9IG9wYXF1ZS5yZXBsYWNlKFwiaHNsXCIsIFwiaHNsYVwiKS5yZXBsYWNlKFwiKVwiLCBcIiwgMClcIik7XG4gICAgY29uc3QgYmcgPSBgbGluZWFyLWdyYWRpZW50KCR7W29wYXF1ZSwgdHJhbnNwXX0pYDtcblxuICAgIC8vIExldCB0aGUgQWxwaGEgc2xpZGVyIGZhZGUgZnJvbSBvcGFxdWUgdG8gdHJhbnNwYXJlbnQ6XG4gICAgdGhpcy5zY29wZS5hbHBoYUJnID0gYmcgKyBcIiwgXCIgKyBCR19UUkFOU1A7XG5cbiAgICAvLyBEb24ndCB1cGRhdGUgdGhlIGVkaXRvciBpZiB0aGUgdXNlciBpcyB0eXBpbmcuXG4gICAgLy8gVGhhdCBjcmVhdGVzIHRvbyBtdWNoIG5vaXNlIGJlY2F1c2Ugb2Ygb3VyIGF1dG8tZXhwYW5zaW9uIG9mIDMvNC82IC0+IDggZGlnaXQgaGV4IGNvZGVzLlxuICAgIGlmICghZmxhZ3MuZnJvbUVkaXRvcikge1xuICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy5zY29wZS5lZGl0b3JGb3JtYXQsXG4gICAgICAgIGFscGhhID0gdGhpcy5zY29wZS5hbHBoYTtcblxuICAgICAgbGV0IGNvbG9yOiBzdHJpbmc7XG4gICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICBjYXNlIFwicmdiXCI6XG4gICAgICAgICAgY29sb3IgPSB0aGlzLmNvbG9yLnByaW50UkdCKGFscGhhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImhzbFwiOlxuICAgICAgICAgIGNvbG9yID0gdGhpcy5jb2xvci5wcmludEhTTChhbHBoYSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29sb3IgPSB0aGlzLmNvbG9yLnByaW50SGV4KGFscGhhKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2NvcGUuY29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVGdW5jdGlvbiwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vYnM0LWNvbnRlbnRzLmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yIHtcbiAgZWxlbWVudDogSFRNTEhlYWRpbmdFbGVtZW50O1xuICBocmVmOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNoaWxkczogQW5jaG9yW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICAvKipcbiAgICogSWYgc3RhcnQgaXMgYDJgIGFuZCBkZXB0aCBpcyBgMmAgZGVwdGggc3RhcnRzIG9uIGBoMmAgYW5kIGVuZHMgb24gYGgyYC5cbiAgICovXG4gIGhlYWRlcnNTdGFydDogbnVtYmVyO1xuICAvKipcbiAgICogSWYgc3RhcnQgaXMgYDFgIGFuZCBkZXB0aCBpcyBgMWAgb25seSBgaDFgIGhlYWRlcnMgYXJlIGRldGVjdGVkLCBpZiBkZXB0aCBpcyBgMmAgYWxzbyBgaDJgIGlzIGRldGVjdGVkLlxuICAgKi9cbiAgaGVhZGVyc0RlcHRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBEZXB0aCBpbiBob3cgbWFueSBwYXJlbnRzIGVsZW1lbnRzIHNob3VsZCBiZSBzZWFyY2hlZCBmb3IgYW4gaWQgZm9yIGVhY2ggZm91bmQgaGVhZGVyIGVsZW1lbnQgKGRlZmF1bHQgYDFgKVxuICAgKi9cbiAgZmluZEhlYWRlcklkRGVwdGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFNlbGVjdG9yIHRvIHNlYXJjaCBmb3IgaGVhZGVycyBpbnNpdGUgb2YgdGhlIGVsZW1lbnRcbiAgICovXG4gIGhlYWRlclBhcmVudFNlbGVjdG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogUGl4ZWxzIHRvIG9mZnNldCBmcm9tIHRvcCB3aGVuIGNhbGN1bGF0aW5nIHBvc2l0aW9uIHRvIHNjcm9sbCB0aGVyZS5cbiAgICovXG4gIHNjcm9sbE9mZnNldDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGVsZW1lbnQgdG8gc2Nyb2xsIChkZWZhdWx0IGB3aW5kb3dgKVxuICAgKi9cbiAgc2Nyb2xsRWxlbWVudD86IHN0cmluZztcbiAgLyoqXG4gICAqIEFycmF5IG9mIGZvdW5kIGhlYWRlcnMgLyBhbmNob3JzXG4gICAqL1xuICBhbmNob3JzOiBBbmNob3JbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJzNENvbnRlbnRzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtY29udGVudHNcIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCB3cmFwcGVyRWxlbWVudD86IEVsZW1lbnQ7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICBcImhlYWRlcnMtc3RhcnRcIixcbiAgICAgIFwiaGVhZGVycy1kZXB0aFwiLFxuICAgICAgXCJmaW5kLWhlYWRlci1pZC1kZXB0aFwiLFxuICAgICAgXCJoZWFkZXItcGFyZW50LXNlbGVjdG9yXCIsXG4gICAgICBcInNjcm9sbC1vZmZzZXRcIixcbiAgICAgIFwic2Nyb2xsLWVsZW1lbnRcIixcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBoZWFkZXJzRGVwdGg6IDEsXG4gICAgaGVhZGVyc1N0YXJ0OiAyLFxuICAgIGZpbmRIZWFkZXJJZERlcHRoOiAxLFxuICAgIGhlYWRlclBhcmVudFNlbGVjdG9yOiB1bmRlZmluZWQsXG4gICAgc2Nyb2xsT2Zmc2V0OiAwLFxuICAgIGFuY2hvcnM6IFtdLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0Q29udGVudHNDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRJZEZyb21FbGVtZW50T3JQYXJlbnQoXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgZGVwdGggPSAxXG4gICk6IHN0cmluZyB8IG51bGwge1xuICAgIGlmIChlbGVtZW50LmlkKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pZDtcbiAgICB9XG4gICAgaWYgKGRlcHRoIDw9IHRoaXMuc2NvcGUuZmluZEhlYWRlcklkRGVwdGgpIHtcbiAgICAgIGlmIChlbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SWRGcm9tRWxlbWVudE9yUGFyZW50KGVsZW1lbnQucGFyZW50RWxlbWVudCwgKytkZXB0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIHB1c2hIZWFkZXJzKFxuICAgIHdyYXBwZXJFbGVtZW50OiBFbGVtZW50LFxuICAgIGhlYWRlcnNTdGFydDogbnVtYmVyLFxuICAgIGhlYWRlcnNEZXB0aDogbnVtYmVyLFxuICAgIHB1c2hUbzogQW5jaG9yW11cbiAgKSB7XG4gICAgY29uc3QgaGVhZGVyRWxlbWVudHMgPSB3cmFwcGVyRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCJoXCIgKyBoZWFkZXJzU3RhcnRcbiAgICApIGFzIE5vZGVMaXN0T2Y8SFRNTEhlYWRpbmdFbGVtZW50PjtcbiAgICBoZWFkZXJFbGVtZW50cy5mb3JFYWNoKChoZWFkZXJFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBpZCA9IHRoaXMuZ2V0SWRGcm9tRWxlbWVudE9yUGFyZW50KGhlYWRlckVsZW1lbnQpO1xuICAgICAgaWYgKCFpZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwdXNoVG8ucHVzaCh7XG4gICAgICAgIGVsZW1lbnQ6IGhlYWRlckVsZW1lbnQsXG4gICAgICAgIGhyZWY6IFwiI1wiICsgaWQsXG4gICAgICAgIHRpdGxlOiBoZWFkZXJFbGVtZW50LmlubmVySFRNTCxcbiAgICAgICAgY2hpbGRzOiBbXSxcbiAgICAgIH0pO1xuICAgICAgaWYgKGhlYWRlckVsZW1lbnQucGFyZW50RWxlbWVudCAmJiBoZWFkZXJzRGVwdGggPj0gaGVhZGVyc1N0YXJ0ICsgMSkge1xuICAgICAgICB0aGlzLnB1c2hIZWFkZXJzKFxuICAgICAgICAgIGhlYWRlckVsZW1lbnQucGFyZW50RWxlbWVudCxcbiAgICAgICAgICBoZWFkZXJzU3RhcnQgKyAxLFxuICAgICAgICAgIGhlYWRlcnNEZXB0aCxcbiAgICAgICAgICBwdXNoVG9bcHVzaFRvLmxlbmd0aCAtIDFdLmNoaWxkc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnNjb3BlLmhlYWRlclBhcmVudFNlbGVjdG9yICYmXG4gICAgICB0aGlzLnNjb3BlLmhlYWRlcnNTdGFydCAmJlxuICAgICAgdGhpcy5zY29wZS5oZWFkZXJzRGVwdGhcbiAgICApIHtcbiAgICAgIHRoaXMud3JhcHBlckVsZW1lbnQgPVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2NvcGUuaGVhZGVyUGFyZW50U2VsZWN0b3IpIHx8IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuc2NvcGUuYW5jaG9ycyA9IFtdO1xuICAgICAgaWYgKCF0aGlzLndyYXBwZXJFbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyB3cmFwcGVyIGVsZW1lbnQgZm91bmQhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnB1c2hIZWFkZXJzKFxuICAgICAgICB0aGlzLndyYXBwZXJFbGVtZW50LFxuICAgICAgICB0aGlzLnNjb3BlLmhlYWRlcnNTdGFydCxcbiAgICAgICAgdGhpcy5zY29wZS5oZWFkZXJzRGVwdGgsXG4gICAgICAgIHRoaXMuc2NvcGUuYW5jaG9yc1xuICAgICAgKTtcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiaGVhZGVyc1N0YXJ0XCIsIFwiaGVhZGVyc0RlcHRoXCIsIFwiaGVhZGVyUGFyZW50U2VsZWN0b3JcIl07XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgfVxuXG4gIC8vIGRlY29uc3RydWN0aW9uXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuc2NvcGUuYW5jaG9ycyA9IFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBEcm9wZG93blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZHJvcGRvd24uc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQnM0RHJvcGRvd25Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1kcm9wZG93blwiO1xuXG4gIHB1YmxpYyBzY29wZTogYW55ID0ge1xuICAgIHRvZ2dsZTogdGhpcy50b2dnbGUsXG4gIH07XG5cbiAgcHJvdGVjdGVkIGRyb3Bkb3duU2VydmljZT86IERyb3Bkb3duU2VydmljZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXRoaXMuZHJvcGRvd25TZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEcm9wZG93blNlcnZpY2Ugbm90IHJlYWR5IVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZHJvcGRvd25TZXJ2aWNlLnRvZ2dsZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5kcm9wZG93blNlcnZpY2UgPSBuZXcgRHJvcGRvd25TZXJ2aWNlKFxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLmRyb3Bkb3duLXRvZ2dsZVwiKSBhc1xuICAgICAgICB8IEhUTUxCdXR0b25FbGVtZW50XG4gICAgICAgIHwgSFRNTEFuY2hvckVsZW1lbnRcbiAgICApO1xuICAgIHRoaXMuaW5pdChCczREcm9wZG93bkNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFRlbXBsYXRlRnVuY3Rpb24sXG4gIEh0dHBTZXJ2aWNlLFxuICBIdHRwTWV0aG9kLFxuICBIdHRwRGF0YVR5cGUsXG4gIFNjb3BlQmFzZSxcbn0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2JzNC1mb3JtLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQge1xuICBzY3JvbGxUbyxcbiAgZ2V0Vmlld3BvcnREaW1lbnNpb25zLFxuICBnZXRVSUQsXG4gIGhhc0NoaWxkTm9kZXNUcmltLFxuICBzdHJpcEh0bWwsXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25PYmplY3Qge1xuICBmaWVsZHM6XG4gICAgfCB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBib29sZWFuIHwgc3RyaW5nW107XG4gICAgICB9XG4gICAgfCBGb3JtRGF0YTtcbiAgdmFsaWQ6IGJvb2xlYW47XG4gIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Ym1pdFNldHRpbmdzIHtcbiAgYWN0aW9uOiBzdHJpbmc7XG4gIG1ldGhvZDogSHR0cE1ldGhvZDtcbiAgdGFyZ2V0Pzogc3RyaW5nO1xuICB0eXBlOiBIdHRwRGF0YVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBpZDogc3RyaW5nO1xuICBmb3JtOiBWYWxpZGF0aW9uT2JqZWN0O1xuICBvblN1Ym1pdDogQnM0Rm9ybUNvbXBvbmVudFtcIm9uU3VibWl0XCJdO1xuXG4gIGRpc2FibGVTdWJtaXRVbnRpbENoYW5nZTogYm9vbGVhbjtcbiAgc3VibWl0RGlzYWJsZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byBgdHJ1ZWAgdG8gc3VibWl0IHRoZSBmb3JtIHVzaW5nIGFqYXguXG4gICAqIFNldCB0aGlzIHRvIGBmYWxzZWAgdG8gdXNlIHRoZSBkZWZhdWx0IHN1Ym1pdCByZXF1ZXN0IHdpdGggYSBwYWdlIHJlbG9hZFxuICAgKi9cbiAgdXNlQWpheDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFVzZWQgZm9yIHRoZSBhamF4IHN1Ym1pdCByZXF1ZXN0LiBEZWZhdWx0IGlzIFwiZm9ybVwiIGJ1dCBjYW4gYWxzbyBiZSBcInNjcmlwdFwiIHwgXCJqc29uXCIgfCBcInhtbFwiIHwgXCJ0ZXh0XCIgfCBcImh0bWxcIiB8IFwiZm9ybVwiLlxuICAgKi9cbiAgYWpheFJlcXVlc3RUeXBlOiBIdHRwRGF0YVR5cGU7XG4gIC8qKlxuICAgKiBTdWJtaXR0ZWQgZGF0YSBmb3IgdGhlIGFqYXggc3VibWl0LlxuICAgKlxuICAgKiBTZXQgdGhpcyB0cCBgdHJ1ZWAgaWYgeW91IGRvIG5vdCB3YW50IHRvIHVzZSBgcnYtdmFsdWVgIG9uIHlvdXIgZm9ybSBlbGVtZW50cyxcbiAgICogaW4gdGhpcyBjYXNlIHRoZSBwcm9wZXJ0eSBuYW1lIGlzIGluIHRoaXMgY2FzZSB0aGUgcHJvcGVydHkgbmFtZSBpcyBkZXRlcm1pbmVkIGZyb20gdGhlIG5hbWUgYXR0cmlidXRlOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGA8aW5wdXQgbmFtZT1cImdpdmVuLW5hbWVcIj5gIC0+IGBzY29wZS5mb3JtLmZpZWxkcy5naXZlbk5hbWVcbiAgICpcbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCBpZiB5b3UgaWYgeW91IHdhbnQgdG8gdXNlIHRoZSBydi12YWx1ZSBiaW5kZXIsXG4gICAqIGluIHRoaXMgY2FzZSB0aGUgcHJvcGVydHkgbmFtZSBtYXkgYmUgZGlmZmVyZW50IGZyb20gdGhlIG5hbWUgYXR0cmlidXRlOlxuICAgKiBAZXhhbXBsZVxuICAgKiAgYDxpbnB1dCBuYW1lPVwiZ2l2ZW4tbmFtZVwiIHJ2LXZhbHVlPVwiZm9ybS5maWVsZHMubmFtZSB8IGRlZmF1bHQgJ1plbGRhJ1wiPmBcbiAgICpcbiAgICoqL1xuICBhdXRvU2V0Rm9ybURhdGE6IGJvb2xlYW47XG4gIHN0cmlwSHRtbDogYm9vbGVhbjtcbiAgc2Nyb2xsVG9JbnZhbGlkRWxlbWVudDogdHJ1ZTtcbiAgYW5pbWF0ZUludmFsaWRFbGVtZW50OiB0cnVlO1xufVxuXG5leHBvcnQgY2xhc3MgQnM0Rm9ybUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwiYnM0LWZvcm1cIjtcbiAgcHVibGljIF9kZWJ1ZyA9IGZhbHNlO1xuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJpZFwiLFxuICAgICAgXCJkaXNhYmxlLXN1Ym1pdC11bnRpbC1jaGFuZ2VcIixcbiAgICAgIFwidXNlLWFqYXhcIixcbiAgICAgIFwiYWpheC1yZXF1ZXN0LXR5cGVcIixcbiAgICAgIFwiYXV0by1zZXQtZm9ybS1kYXRhXCIsXG4gICAgICBcInN0cmlwLWh0bWxcIixcbiAgICAgIFwic2Nyb2xsLWludmFsaWQtZWxlbWVudFwiLFxuICAgICAgXCJhbmltYXRlLWludmFsaWQtZWxlbWVudFwiLFxuICAgIF07XG4gIH1cblxuICBwcm90ZWN0ZWQgZm9ybUVsOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdFNjb3BlKCk6IFNjb3BlIHtcbiAgICBjb25zdCBzY29wZTogU2NvcGUgPSB7XG4gICAgICBpZDogZ2V0VUlEKFwiZm9ybVwiKSxcblxuICAgICAgZm9ybToge1xuICAgICAgICBmaWVsZHM6IHt9LFxuICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgICB9LFxuXG4gICAgICBkaXNhYmxlU3VibWl0VW50aWxDaGFuZ2U6IGZhbHNlLFxuXG4gICAgICBzdWJtaXREaXNhYmxlZDogZmFsc2UsXG4gICAgICBvblN1Ym1pdDogdGhpcy5vblN1Ym1pdCxcblxuICAgICAgdXNlQWpheDogdHJ1ZSxcbiAgICAgIGFqYXhSZXF1ZXN0VHlwZTogXCJmb3JtXCIsXG4gICAgICBhdXRvU2V0Rm9ybURhdGE6IHRydWUsXG4gICAgICBzdHJpcEh0bWw6IHRydWUsXG4gICAgICBzY3JvbGxUb0ludmFsaWRFbGVtZW50OiB0cnVlLFxuICAgICAgYW5pbWF0ZUludmFsaWRFbGVtZW50OiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIHNjb3BlO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHRoaXMuZ2V0RGVmYXVsdFNjb3BlKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVuYWJsZVN1Ym1pdCA9IHRoaXMuZW5hYmxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0Rm9ybUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5zY29wZS5kaXNhYmxlU3VibWl0VW50aWxDaGFuZ2UpIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZW5hYmxlU3VibWl0KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5lbmFibGVTdWJtaXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbmFibGVTdWJtaXQoKSB7XG4gICAgdGhpcy5zY29wZS5zdWJtaXREaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIHRoaXMuaWQgPSB0aGlzLnNjb3BlLmlkO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdHJpcEh0bWwoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zY29wZS5mb3JtLmZpZWxkcykge1xuICAgICAgaWYgKFxuICAgICAgICAodGhpcy5zY29wZS5mb3JtLmZpZWxkcyBhcyBhbnkpW2tleV0gJiZcbiAgICAgICAgdHlwZW9mICh0aGlzLnNjb3BlLmZvcm0uZmllbGRzIGFzIGFueSlba2V5XSA9PT0gXCJzdHJpbmdcIlxuICAgICAgKSB7XG4gICAgICAgICh0aGlzLnNjb3BlLmZvcm0uZmllbGRzIGFzIGFueSlba2V5XSA9IHN0cmlwSHRtbChcbiAgICAgICAgICAodGhpcy5zY29wZS5mb3JtLmZpZWxkcyBhcyBhbnkpW2tleV0gYXMgc3RyaW5nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uU3VibWl0KGV2ZW50OiBFdmVudCwgZWw6IEhUTUxCdXR0b25FbGVtZW50KSB7XG4gICAgdGhpcy5kZWJ1ZyhcIm9uU3VibWl0XCIsIGV2ZW50LCBlbCk7XG4gICAgaWYgKCF0aGlzLmZvcm1FbCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTm8gZm9ybSBmb3VuZFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY29wZS5hdXRvU2V0Rm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZ2V0Rm9ybVZhbHVlcygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNjb3BlLnN0cmlwSHRtbCkge1xuICAgICAgdGhpcy5zdHJpcEh0bWwoKTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbGlkYXRlKHRoaXMuZm9ybUVsLCB0aGlzLnNjb3BlLmZvcm0pO1xuXG4gICAgaWYgKCF0aGlzLnNjb3BlLmZvcm0udmFsaWQpIHtcbiAgICAgIHRoaXMub25JbnZhbGlkRm9ybShldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3VibWl0U2V0dGluZ3MgPSB0aGlzLmdldFN1Ym1pdFNldHRpbmdzKGV2ZW50KTtcbiAgICBpZiAoc3VibWl0U2V0dGluZ3M/LnRhcmdldCA9PT0gXCJfYmxhbmtcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2NvcGUudXNlQWpheCkge1xuICAgICAgLy8gc3RvcCBuYXRpdmUgc3VibWl0IGJlY2F1c2Ugd2Ugc3VibWl0IHRoZSBkYXRhIHVzaW5nIGphdmFzY3JpcHRcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgdGhpcy5hamF4U3VibWl0KGV2ZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE8gTm90IHRlc3RlZCBpbiB0aGUgd2lsZCwgbWF5IG5lZWQgdG8gYmUgYWRqdXN0ZWQuIEFsc28gdGhlIGVycm9yIGhhbmRsaW5nIGlzIHVudGVzdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgYWpheFN1Ym1pdChldmVudD86IEV2ZW50LCBlbD86IEhUTUxCdXR0b25FbGVtZW50KSB7XG4gICAgdGhpcy5kZWJ1ZyhcIm9uU3VibWl0XCIsIGV2ZW50LCBlbCwgdGhpcy5zY29wZSk7XG4gICAgY29uc3Qgc3VibWl0U2V0dGluZ3MgPSB0aGlzLmdldFN1Ym1pdFNldHRpbmdzKGV2ZW50KTtcbiAgICBpZiAoIXN1Ym1pdFNldHRpbmdzKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBnZXQgc3VibWl0IHNldHRpbmdzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNjb3BlLmF1dG9TZXRGb3JtRGF0YSkge1xuICAgICAgdGhpcy5nZXRGb3JtVmFsdWVzKCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIHVudGVzdGVkIGluIHRoZSB3aWxkXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5mZXRjaChcbiAgICAgICAgc3VibWl0U2V0dGluZ3MuYWN0aW9uLFxuICAgICAgICBzdWJtaXRTZXR0aW5ncy5tZXRob2QsXG4gICAgICAgIHRoaXMuc2NvcGUuZm9ybS5maWVsZHMsXG4gICAgICAgIHN1Ym1pdFNldHRpbmdzLnR5cGVcbiAgICAgICk7XG5cbiAgICAgIGlmICghcmVzIHx8ICFyZXMuYm9keSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkVycm9yU3VibWl0KFwiNTAwXCIsIFwiRXJyb3JcIiwgXCJFbXB0eSBib2R5IVwiKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWVzc2FnZSA9IHJlcy5ib2R5ICYmIHJlcy5ib2R5Lm1lc3NhZ2UgPyByZXMuYm9keS5tZXNzYWdlIDogXCJcIjtcbiAgICAgIGlmIChOdW1iZXIocmVzLnN0YXR1cykgPj0gNDAwKSB7XG4gICAgICAgIC8vIFRPRE8gZ2VuZXJhdGUgbWVzc2FnZSBieSBzdGF0dXNcbiAgICAgICAgdGhpcy5vbkVycm9yU3VibWl0KHJlcy5zdGF0dXMudG9TdHJpbmcoKSwgbWVzc2FnZSwgcmVzLmJvZHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub25TdWNjZXNzU3VibWl0KHJlcy5zdGF0dXMudG9TdHJpbmcoKSwgbWVzc2FnZSwgcmVzLmJvZHkpO1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICB0aGlzLm9uRXJyb3JTdWJtaXQoZXJyLnN0YXR1cywgZXJyLmJvZHkubWVzc2FnZSwgZXJyLmJvZHkpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTdWJtaXRTZXR0aW5ncyhldmVudD86IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmZvcm1FbCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTm8gZm9ybSBmb3VuZFwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBhY3Rpb24gPSB0aGlzLmZvcm1FbC5hY3Rpb247XG4gICAgbGV0IG1ldGhvZCA9IHRoaXMuZm9ybUVsLm1ldGhvZDtcbiAgICBsZXQgdGFyZ2V0ID0gdGhpcy5mb3JtRWwubWV0aG9kO1xuXG4gICAgLy8gT3ZlcndyaXRlIGFjdGlvbiBieSBmb3JtYWN0aW9uIGF0dHJpYnV0ZTogPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgZm9ybWFjdGlvbj1cIi9mb29iYXJcIj5cblxuICAgIC8vIFRPRE8gc3VibWl0dGVyIGZyb20gdmFuaWxsYSBldmVudFxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIGpxdWVyeSBldmVudFxuICAgIGlmICgoZXZlbnQgYXMgYW55KT8ub3JpZ2luYWxFdmVudD8uc3VibWl0dGVyKSB7XG4gICAgICBjb25zdCBzdWJtaXR0ZXIgPSAoZXZlbnQgYXMgYW55KT8ub3JpZ2luYWxFdmVudD8uc3VibWl0dGVyO1xuICAgICAgYWN0aW9uID0gc3VibWl0dGVyPy5mb3JtQWN0aW9uIHx8IGFjdGlvbjtcbiAgICAgIG1ldGhvZCA9IHN1Ym1pdHRlcj8uZm9ybU1ldGhvZCB8fCBtZXRob2Q7XG4gICAgICB0YXJnZXQgPSBzdWJtaXR0ZXI/LmZvcm1UYXJnZXQgfHwgdGFyZ2V0O1xuICAgIH1cblxuICAgIGNvbnN0IHNldHRpbmdzOiBTdWJtaXRTZXR0aW5ncyA9IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCkgYXMgSHR0cE1ldGhvZCxcbiAgICAgIHRhcmdldCxcbiAgICAgIHR5cGU6IHRoaXMuc2NvcGUuYWpheFJlcXVlc3RUeXBlLFxuICAgIH07XG5cbiAgICByZXR1cm4gc2V0dGluZ3M7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JbnZhbGlkRm9ybShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmRlYnVnKFwiRm9ybSBub3QgdmFsaWRcIiwgdGhpcy5zY29wZSk7XG4gICAgLy8gc3RvcCBuYXRpdmUgc3VibWl0XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXRoaXMuZm9ybUVsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJObyBmb3JtIGZvdW5kXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnZhbGlkRWxlbWVudHMgPVxuICAgICAgdGhpcy5mb3JtRWwucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oXCI6aW52YWxpZFwiKTtcbiAgICBpZiAoaW52YWxpZEVsZW1lbnRzICYmIGludmFsaWRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGludmFsaWRFbGVtZW50ID0gaW52YWxpZEVsZW1lbnRzWzBdO1xuICAgICAgaWYgKHRoaXMuc2NvcGUuc2Nyb2xsVG9JbnZhbGlkRWxlbWVudCkge1xuICAgICAgICB0aGlzLnNjcm9sbFRvRWxlbWVudChpbnZhbGlkRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zY29wZS5hbmltYXRlSW52YWxpZEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0VsZW1lbnQoaW52YWxpZEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChcImludmFsaWRcIiwge1xuICAgICAgICBkZXRhaWw6IHsgZWxlbWVudHM6IGludmFsaWRFbGVtZW50cyB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNjcm9sbFRvRWxlbWVudChpbnZhbGlkRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCB2cCA9IGdldFZpZXdwb3J0RGltZW5zaW9ucygpO1xuICAgIGNvbnN0IG9mZnNldCA9IHZwLmggLyAyO1xuICAgIHNjcm9sbFRvKGludmFsaWRFbGVtZW50LCBvZmZzZXQsIHdpbmRvdyk7XG4gICAgdGhpcy5hbmltYXRlSW52YWxpZEVsZW1lbnQoaW52YWxpZEVsZW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFuaW1hdGVJbnZhbGlkRWxlbWVudChpbnZhbGlkRWxlbWVudDogSFRNTEVsZW1lbnQsIGVuZHNPbiA9IDMwMDApIHtcbiAgICBpbnZhbGlkRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1mbGFzaGluZy1hbmltYXRpb25cIik7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpbnZhbGlkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaW52YWxpZC1mbGFzaGluZy1hbmltYXRpb25cIik7XG4gICAgfSwgZW5kc09uKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkVycm9yU3VibWl0KHN0YXR1czogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIHJlc3BvbnNlOiBhbnkpIHtcbiAgICB0aGlzLmRlYnVnKFwib25FcnJvclN1Ym1pdFwiKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJzdWJtaXQtZXJyb3JcIiwge1xuICAgICAgICBkZXRhaWw6IHsgc3RhdHVzLCBtZXNzYWdlOiBtZXNzYWdlLCByZXNwb25zZSB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU3VjY2Vzc1N1Ym1pdChzdGF0dXM6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCByZXNwb25zZTogYW55KSB7XG4gICAgdGhpcy5kZWJ1ZyhcIm9uU3VjY2Vzc1N1Ym1pdFwiKTtcbiAgICBpZiAodGhpcy5zY29wZS5kaXNhYmxlU3VibWl0VW50aWxDaGFuZ2UpIHtcbiAgICAgIHRoaXMuc2NvcGUuc3VibWl0RGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChcInN1Ym1pdC1zdWNjZXNzXCIsIHtcbiAgICAgICAgZGV0YWlsOiB7IHN0YXR1cywgbWVzc2FnZTogbWVzc2FnZSwgcmVzcG9uc2UgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZShcbiAgICBmb3JtOiBIVE1MRm9ybUVsZW1lbnQsXG4gICAgdmFsaWRhdGlvblNjb3BlOiBWYWxpZGF0aW9uT2JqZWN0LFxuICAgIGVycm9yRXZlbnROYW1lID0gXCJ2YWxpZGF0aW9uLWVycm9yXCJcbiAgKSB7XG4gICAgdmFsaWRhdGlvblNjb3BlLnZhbGlkID0gZm9ybS5jaGVja1ZhbGlkaXR5KCk7XG4gICAgdmFsaWRhdGlvblNjb3BlLmVycm9yID0gZm9ybS52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICAvLyBvbmx5IHNob3cgdmFsaWRhdGlvbiBpZiB3ZSB3YW50IHRvIGdpdmUgYSBoaW50IHRvIHRoZSB1c2VyIHRoYXQgc29tZXRoaW5nIGlzIHdyb25nXG4gICAgaWYgKCF2YWxpZGF0aW9uU2NvcGUudmFsaWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXJyb3JFdmVudE5hbWUpKTtcbiAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcIndhcy12YWxpZGF0ZWRcIik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldEZvcm1WYWx1ZXMoKSB7XG4gICAgaWYgKCF0aGlzLmZvcm1FbCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTm8gZm9ybSBmb3VuZFwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyB0aGlzLmZvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIC8vICAgdGhpcy5zY29wZS5mb3JtLmZpZWxkc1tjYW1lbENhc2UoZWxlbWVudC5uYW1lKV0gPSBnZXRJbnB1dFZhbHVlKGVsZW1lbnQpO1xuICAgIC8vIH0pO1xuICAgIHRoaXMuc2NvcGUuZm9ybS5maWVsZHMgPSBuZXcgRm9ybURhdGEodGhpcy5mb3JtRWwpO1xuICAgIHJldHVybiB0aGlzLnNjb3BlLmZvcm0uZmllbGRzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRGb3JtKCkge1xuICAgIGNvbnN0IGZvcm1FbCA9IHRoaXMucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG4gICAgaWYgKGZvcm1FbCAmJiBmb3JtRWwubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5mb3JtRWwgPSBmb3JtRWw7XG4gICAgICB0aGlzLmZvcm1FbC5jbGFzc0xpc3QuYWRkKFwibmVlZHMtdmFsaWRhdGlvblwiKTtcbiAgICAgIHRoaXMuZm9ybUVsLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIiwgXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcImJzNCBmb3JtIHdpdGhvdXQgY2hpbGRyZW4gZm91bmRcIik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIGlmIChoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgdGhpcy5pbml0Rm9ybSgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2ljQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgQnM0SWNvbkNvbXBvbmVudCBleHRlbmRzIEJhc2ljQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtaWNvblwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wic2l6ZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwic3JjXCIsIFwiY29sb3JcIiwgXCJkaXJlY3Rpb25cIl07XG4gIH1cblxuICBwdWJsaWMgc2NvcGU6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIC8vIGluamVjdHMgdGhlIGNoYW5nZWQgYXR0cmlidXRlcyB0byBzY29wZVxuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSk7XG5cbiAgICBpZiAobmFtZSA9PT0gXCJzcmNcIikge1xuICAgICAgaWYgKCFuZXdWYWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgc3JjIGF0dHJpYnV0ZSBtdXN0IGhhdmUgYSB2YWx1ZSFcIiwgdGhpcy5zY29wZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmZXRjaCkge1xuICAgICAgICBmZXRjaChuZXdWYWx1ZSlcbiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik/LmluZGV4T2YoXCJpbWFnZS9zdmcreG1sXCIpICE9PVxuICAgICAgICAgICAgICAtMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIFwiW2JzNC1pY29uXSBPbmx5IHN2ZydzIGFyZSBzdXBwb3J0ZWQhIEJ1dCBjb250ZW50LXR5cGUgaXMgXCIgK1xuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IHJlc3BvbnNlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IFwidGl0bGVcIikge1xuICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgXCJ0aXRsZVwiXG4gICAgICApO1xuICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBuZXdWYWx1ZTtcblxuICAgICAgY29uc3Qgc3ZnID0gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIGlmIChzdmcpIHtcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gXCJjb2xvclwiKSB7XG4gICAgICBpZiAobmV3VmFsdWUuaW5kZXhPZihcIixcIikgIT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUuc3BsaXQoXCIsXCIpO1xuICAgICAgICBpZiAobmV3VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKWNvbG9yLVxcUysvZywgXCJcIik7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sb3I6IHN0cmluZyA9IG5ld1ZhbHVlW2ldO1xuICAgICAgICAgICAgaWYgKG5ld0NvbG9yLnN0YXJ0c1dpdGgoXCIjXCIpIHx8IG5ld0NvbG9yLnN0YXJ0c1dpdGgoXCJyZ2JcIikpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZS5jb2xvciA9IG5ld0NvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKGBjb2xvci0ke25ld0NvbG9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdHlsZS5jb2xvciA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lLnJlcGxhY2UoLyhefFxccyljb2xvci1cXFMrL2csIFwiXCIpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoYGNvbG9yLSR7bmV3VmFsdWV9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IFwic2l6ZVwiKSB7XG4gICAgICBjb25zdCBzaXplID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IHNpemUgKyBcInB4XCI7XG4gICAgICB0aGlzLnN0eWxlLndpZHRoID0gc2l6ZSArIFwicHhcIjtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKXNpemUtXFxTKy9nLCBcIlwiKTtcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChgc2l6ZS0ke3NpemV9YCk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IFwid2lkdGhcIikge1xuICAgICAgY29uc3Qgd2lkdGggPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKXdpZHRoLVxcUysvZywgXCJcIik7XG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoYHdpZHRoLSR7d2lkdGh9YCk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IFwiaGVpZ2h0XCIpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lLnJlcGxhY2UoLyhefFxccyloZWlnaHQtXFxTKy9nLCBcIlwiKTtcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChgaGVpZ2h0LSR7aGVpZ2h0fWApO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBcImRpcmVjdGlvblwiKSB7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSBuZXdWYWx1ZTtcbiAgICAgIGxldCBjbGFzc1N0cmluZyA9IGBkaXJlY3Rpb24tJHtkaXJlY3Rpb259YDtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9IFwiIHJvdGF0ZS0yNzBcIjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJsZWZ0LXRvcFwiIHx8XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJsZWZ0LXVwXCIgfHxcbiAgICAgICAgZGlyZWN0aW9uID09PSBcInRvcC1sZWZ0XCIgfHxcbiAgICAgICAgZGlyZWN0aW9uID09PSBcInVwLWxlZnRcIlxuICAgICAgKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9IFwiIHJvdGF0ZS0zMTVcIjtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcInRvcFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJ1cFwiKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9IFwiIHJvdGF0ZS0wXCI7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBkaXJlY3Rpb24gPT09IFwidG9wLXJpZ2h0XCIgfHxcbiAgICAgICAgZGlyZWN0aW9uID09PSBcInVwLXJpZ2h0XCIgfHxcbiAgICAgICAgZGlyZWN0aW9uID09PSBcInJpZ2h0LXRvcFwiIHx8XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJyaWdodC11cFwiXG4gICAgICApIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgKz0gXCIgcm90YXRlLTQ1XCI7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9IFwiIHJvdGF0ZS05MFwiO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZGlyZWN0aW9uID09PSBcInJpZ2h0LWJvdHRvbVwiIHx8XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJyaWdodC1kb3duXCIgfHxcbiAgICAgICAgZGlyZWN0aW9uID09PSBcImJvdHRvbS1yaWdodFwiIHx8XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJkb3duLXJpZ2h0XCJcbiAgICAgICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSBcIiByb3RhdGUtMTM1XCI7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJib3R0b21cIiB8fCBkaXJlY3Rpb24gPT09IFwiZG93blwiKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9IFwiIHJvdGF0ZS0xODBcIjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJsZWZ0LWJvdHRvbVwiIHx8XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJsZWZ0LWRvd25cIiB8fFxuICAgICAgICBkaXJlY3Rpb24gPT09IFwiYm90dG9tLWxlZnRcIiB8fFxuICAgICAgICBkaXJlY3Rpb24gPT09IFwiZG93bi1sZWZ0XCJcbiAgICAgICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSBcIiByb3RhdGUtMjI1XCI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKWRpcmVjdGlvbi1cXFMrL2csIFwiXCIpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZS5yZXBsYWNlKC8oXnxcXHMpcm90YXRlLVxcUysvZywgXCJcIik7XG4gICAgICB0aGlzLmNsYXNzTmFtZSArPSBcIiBcIiArIGNsYXNzU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImltZ1wiKTtcbiAgICB0aGlzLmNsYXNzTGlzdC5hZGQoXCJpY29uc2V0XCIpO1xuICAgIHRoaXMuaW5pdChCczRJY29uQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gICAgLy8gc2V0IGRlZmF1bHQgdmFsdWVzXG4gICAgaWYgKCF0aGlzLnNjb3BlLmRpcmVjdGlvbikge1xuICAgICAgdGhpcy5zY29wZS5kaXJlY3Rpb24gPSBcInVwXCI7XG4gICAgICB0aGlzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgICAgXCJkaXJlY3Rpb25cIixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGhpcy5zY29wZS5kaXJlY3Rpb24sXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2JzNC1tb2RhbC1pdGVtLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRFbGVtZW50RnJvbUV2ZW50IH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgTW9kYWxTZXJ2aWNlLCBFVkVOVF9ISURERU4gfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbW9kYWwuc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgU2NvcGUgYXMgQnM0Tm90aWZpY2F0aW9uQ29udGFpbmVyU2NvcGUgfSBmcm9tIFwiLi4vYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIvYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50LmpzXCI7XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGljb25Vcmw/OiBzdHJpbmc7XG4gIG1vZGFsPzogTW9kYWw7XG4gIG9uSGlkZGVuOiBCczRNb2RhbEl0ZW1Db21wb25lbnRbXCJvbkhpZGRlblwiXTtcbiAgZGlzbWlzczogQnM0TW9kYWxJdGVtQ29tcG9uZW50W1wiZGlzbWlzc1wiXTtcbiAgaW5kZXg6IG51bWJlcjtcbiAgJHBhcmVudD86IGFueTtcbiAgJGV2ZW50PzogQ3VzdG9tRXZlbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBCczRNb2RhbEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1tb2RhbC1pdGVtXCI7XG5cbiAgcHVibGljIF9kZWJ1ZyA9IGZhbHNlO1xuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCBtb2RhbFNlcnZpY2U/OiBNb2RhbFNlcnZpY2U7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJtb2RhbFwiLCBcImluZGV4XCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcIm1vZGFsXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBvbkhpZGRlbjogdGhpcy5vbkhpZGRlbi5iaW5kKHRoaXMpLFxuICAgIGluZGV4OiAtMSxcbiAgICBkaXNtaXNzOiB0aGlzLmRpc21pc3MuYmluZCh0aGlzKSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEJzNE1vZGFsSXRlbUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmluaXRNb2RhbFNlcnZpY2UoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0TW9kYWxTZXJ2aWNlKCkge1xuICAgIGNvbnN0IG1vZGFsID0gdGhpcy5zY29wZS5tb2RhbDtcbiAgICBjb25zdCBtb2RhbEVsID0gdGhpcy5maXJzdEVsZW1lbnRDaGlsZCBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgaWYgKG1vZGFsICYmIG1vZGFsRWwpIHtcbiAgICAgIHRoaXMubW9kYWxTZXJ2aWNlID0gbmV3IE1vZGFsU2VydmljZShtb2RhbEVsLCB7XG4gICAgICAgIGZvY3VzOlxuICAgICAgICAgIG1vZGFsLmZvY3VzICE9PSB1bmRlZmluZWQgPyBtb2RhbC5mb2N1cyA6IE1vZGFsU2VydmljZS5EZWZhdWx0LmZvY3VzLFxuICAgICAgICBrZXlib2FyZDpcbiAgICAgICAgICBtb2RhbC5rZXlib2FyZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG1vZGFsLmtleWJvYXJkXG4gICAgICAgICAgICA6IE1vZGFsU2VydmljZS5EZWZhdWx0LmtleWJvYXJkLFxuICAgICAgICBiYWNrZHJvcDpcbiAgICAgICAgICBtb2RhbC5iYWNrZHJvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG1vZGFsLmJhY2tkcm9wXG4gICAgICAgICAgICA6IE1vZGFsU2VydmljZS5EZWZhdWx0LmJhY2tkcm9wLFxuICAgICAgICBzaG93OiBtb2RhbC5zaG93ICE9PSB1bmRlZmluZWQgPyBtb2RhbC5zaG93IDogTW9kYWxTZXJ2aWNlLkRlZmF1bHQuc2hvdyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDYWxsIG9uSGlkZGVuIG9uIGhpZGRlbiBldmVudCBvbmNlXG4gICAgICBtb2RhbEVsLmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRfSElEREVOLCB0aGlzLnNjb3BlLm9uSGlkZGVuLCB7XG4gICAgICAgIG9uY2U6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgLy8gc2hvdyBtb2RhbCB1c2luZyB0aGUgbW9kYWxzZXJ2aWNlXG4gICAgICB0aGlzLm1vZGFsU2VydmljZS5zaG93KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbiBiZSBjYWxsZWQgaWYgbW9kYWwgc2hvdWxkIGJlIHJlbW92ZWRcbiAgcHVibGljIGRpc21pc3MoZXZlbnQ/OiBFdmVudCkge1xuICAgIHRoaXMubW9kYWxTZXJ2aWNlPy5oaWRlKGV2ZW50KTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBtb2RhbCBmcm9tIGRvbSBvbmNlIHNob3duXG4gIHB1YmxpYyBvbkhpZGRlbihldmVudDogRXZlbnQsIGVsPzogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IGdldEVsZW1lbnRGcm9tRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBjb25zdCBub3RpZmljYXRpb25Db250YWluZXI6IEJzNE5vdGlmaWNhdGlvbkNvbnRhaW5lclNjb3BlIHwgbnVsbCA9XG4gICAgICB0aGlzLnNjb3BlLiRwYXJlbnQ/LiRwYXJlbnQgfHwgbnVsbDtcbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygbm90aWZpY2F0aW9uQ29udGFpbmVyPy5vbkl0ZW1IaWRlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIHRoaXMuc2NvcGUubW9kYWwgJiZcbiAgICAgIGVsXG4gICAgKSB7XG4gICAgICBub3RpZmljYXRpb25Db250YWluZXIub25JdGVtSGlkZShcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGVsLFxuICAgICAgICB0aGlzLnNjb3BlLmluZGV4LFxuICAgICAgICB0aGlzLnNjb3BlLm1vZGFsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7XG4gIENvbGxhcHNlU2VydmljZSxcbiAgRVZFTlRfU0hPV04sXG4gIEVWRU5UX0hJRERFTixcbiAgQ0xBU1NfTkFNRV9DT0xMQVBTRUQsXG59IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBCczROYXZiYXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1uYXZiYXJcIjtcblxuICBwdWJsaWMgc2NvcGU6IGFueSA9IHtcbiAgICB0b2dnbGU6IHRoaXMudG9nZ2xlLFxuICAgIHNob3c6IHRoaXMuc2hvdyxcbiAgICBoaWRlOiB0aGlzLmhpZGUsXG4gICAgaXNDb2xsYXBzZWQ6IHRydWUsXG4gICAgY29sbGFwc2VTZWxlY3RvcjogXCIubmF2YmFyLWNvbGxhcHNlXCIsXG4gIH07XG5cbiAgcHJvdGVjdGVkIGNvbGxhcHNlVGFyZ2V0czogTWFwPEhUTUxFbGVtZW50LCBDb2xsYXBzZVNlcnZpY2U+ID0gbmV3IE1hcCgpO1xuICBwcm90ZWN0ZWQgcm91dGVyRXZlbnRzPzogRXZlbnREaXNwYXRjaGVyO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiY29sbGFwc2Utc2VsZWN0b3JcIl07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoZXZlbnQ/OiBFdmVudCkge1xuICAgIGZvciAoY29uc3QgY29sbGFwc2VTZXJ2aWNlIG9mIHRoaXMuY29sbGFwc2VUYXJnZXRzLnZhbHVlcygpKSB7XG4gICAgICBjb2xsYXBzZVNlcnZpY2UudG9nZ2xlKCk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNob3coZXZlbnQ/OiBFdmVudCkge1xuICAgIGZvciAoY29uc3QgY29sbGFwc2VTZXJ2aWNlIG9mIHRoaXMuY29sbGFwc2VUYXJnZXRzLnZhbHVlcygpKSB7XG4gICAgICBjb2xsYXBzZVNlcnZpY2Uuc2hvdygpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGlkZShldmVudD86IEV2ZW50KSB7XG4gICAgZm9yIChjb25zdCBjb2xsYXBzZVNlcnZpY2Ugb2YgdGhpcy5jb2xsYXBzZVRhcmdldHMudmFsdWVzKCkpIHtcbiAgICAgIGNvbGxhcHNlU2VydmljZS5oaWRlKCk7XG4gICAgfVxuICAgIGlmIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMucm91dGVyRXZlbnRzID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIm1haW5cIik7XG4gICAgdGhpcy5yb3V0ZXJFdmVudHMub24oXCJuZXdQYWdlUmVhZHlcIiwgdGhpcy5vbk5ld1BhZ2VSZWFkeSwgdGhpcyk7XG5cbiAgICB0aGlzLnNldENvbGxhcHNlRWxlbWVudCgpO1xuXG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG5cbiAgICB0aGlzLmluaXQoQnM0TmF2YmFyQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0Q29sbGFwc2VFbGVtZW50KCkge1xuICAgIGNvbnN0IGNvbGxhcHNlRWxlbWVudHMgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50Pih0aGlzLnNjb3BlLmNvbGxhcHNlU2VsZWN0b3IpIHx8IFtdXG4gICAgKTtcblxuICAgIC8vIHJlbW92ZSBvbGQgY29sbGFwc2UgdGFyZ2V0c1xuICAgIGZvciAoY29uc3QgY29sbGFwc2VFbGVtZW50IG9mIHRoaXMuY29sbGFwc2VUYXJnZXRzLmtleXMoKSkge1xuICAgICAgaWYgKCFjb2xsYXBzZUVsZW1lbnRzLmZpbmQoKGNlKSA9PiBjZSA9PT0gY29sbGFwc2VFbGVtZW50KSkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VDb2xsYXBzZVRhcmdldChjb2xsYXBzZUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCBuZXcgY29sbGFwc2UgdGFyZ2V0c1xuICAgIGZvciAoY29uc3QgY29sbGFwc2VFbGVtZW50IG9mIGNvbGxhcHNlRWxlbWVudHMpIHtcbiAgICAgIGlmICghdGhpcy5jb2xsYXBzZVRhcmdldHMuaGFzKGNvbGxhcHNlRWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy5jb2xsYXBzZVRhcmdldHMuc2V0KFxuICAgICAgICAgIGNvbGxhcHNlRWxlbWVudCxcbiAgICAgICAgICBuZXcgQ29sbGFwc2VTZXJ2aWNlKGNvbGxhcHNlRWxlbWVudCwgW3RoaXNdLCB7IHRvZ2dsZTogZmFsc2UgfSlcbiAgICAgICAgKTtcbiAgICAgICAgY29sbGFwc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRfU0hPV04sIHRoaXMub25TdGF0ZUNoYW5nZSk7XG4gICAgICAgIGNvbGxhcHNlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKEVWRU5UX0hJRERFTiwgdGhpcy5vblN0YXRlQ2hhbmdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNwb3NlQ29sbGFwc2VUYXJnZXRzKCkge1xuICAgIGZvciAoY29uc3QgY29sbGFwc2VFbGVtZW50IG9mIHRoaXMuY29sbGFwc2VUYXJnZXRzLmtleXMoKSkge1xuICAgICAgdGhpcy5kaXNwb3NlQ29sbGFwc2VUYXJnZXQoY29sbGFwc2VFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGlzcG9zZUNvbGxhcHNlVGFyZ2V0KGNvbGxhcHNlRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBjb2xsYXBzZVNlcnZpY2UgPSB0aGlzLmNvbGxhcHNlVGFyZ2V0cy5nZXQoY29sbGFwc2VFbGVtZW50KTtcbiAgICBpZiAoY29sbGFwc2VTZXJ2aWNlKSB7XG4gICAgICBjb2xsYXBzZVNlcnZpY2UuZGlzcG9zZSgpO1xuICAgIH1cbiAgICB0aGlzLmNvbGxhcHNlVGFyZ2V0cy5kZWxldGUoY29sbGFwc2VFbGVtZW50KTtcbiAgICBjb2xsYXBzZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVF9TSE9XTiwgdGhpcy5vblN0YXRlQ2hhbmdlKTtcbiAgICBjb2xsYXBzZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVF9ISURERU4sIHRoaXMub25TdGF0ZUNoYW5nZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmRpc3Bvc2VDb2xsYXBzZVRhcmdldHMoKTtcbiAgICBpZiAodGhpcy5yb3V0ZXJFdmVudHMpIHtcbiAgICAgIHRoaXMucm91dGVyRXZlbnRzLm9mZihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uTmV3UGFnZVJlYWR5LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZSgpIHtcbiAgICB0aGlzLnNjb3BlLmlzQ29sbGFwc2VkID0gdGhpcy5jb2xsYXBzZVRhcmdldHNcbiAgICAgIC52YWx1ZXMoKVxuICAgICAgLm5leHQoKVxuICAgICAgLnZhbHVlPy5pc0NvbGxhcHNlZCgpO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFRCk7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcInRydWVcIik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIG9uTmV3UGFnZVJlYWR5KCkge1xuICAgIHRoaXMuaGlkZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsXG4gICAgb2xkVmFsdWU6IGFueSxcbiAgICBuZXdWYWx1ZTogYW55LFxuICAgIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICBzdXBlci5wYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgb2xkVmFsdWUsXG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIG5hbWVzcGFjZVxuICAgICk7XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwiY29sbGFwc2VTZWxlY3RvclwiKSB7XG4gICAgICB0aGlzLnNldENvbGxhcHNlRWxlbWVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2JzNC1ub3RpZmljYXRpb24tY29udGFpbmVyLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgaWNvblVybD86IHN0cmluZztcbiAgcG9zaXRpb25DbGFzczogc3RyaW5nO1xuICBub3RpZmljYXRpb25zOiBOb3RpZmljYXRpb25bXTtcbiAgY2hhbm5lbE5hbWU6IHN0cmluZztcbiAgb25JdGVtSGlkZTogQnM0Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50W1wib25JdGVtSGlkZVwiXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJzNE5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwiYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXJcIjtcblxuICBwcm90ZWN0ZWQgYXV0b2JpbmQgPSB0cnVlO1xuICBwdWJsaWMgX2RlYnVnID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIG5vdGlmaWNhdGlvbkRpc3BhdGNoZXI/OiBFdmVudERpc3BhdGNoZXI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJpY29uLXVybFwiLCBcInBvc2l0aW9uLWNsYXNzXCIsIFwiY2hhbm5lbC1uYW1lXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBub3RpZmljYXRpb25zOiBbXSxcbiAgICBwb3NpdGlvbkNsYXNzOiBcImFic29sdXRlLWJvdHRvbSBhYnNvbHV0ZS1jZW50ZXJcIixcbiAgICBjaGFubmVsTmFtZTogXCJ0b2FzdFwiLFxuICAgIG9uSXRlbUhpZGU6IHRoaXMub25JdGVtSGlkZSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEJzNE5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgLy8gQ2FsbGVkIGJ5IGNoaWxkIGlmIG5vdGlmaWNhdGlvbiBpdGVtIHdhbnRzIHRvIGJlIHJlbW92ZWRcbiAgcHVibGljIG9uSXRlbUhpZGUoXG4gICAgdGhpczogU2NvcGUsXG4gICAgZXZlbnQ6IEV2ZW50LFxuICAgIGVsOiBIVE1MRWxlbWVudCxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uXG4gICkge1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFwiTm90aWZpY2F0aW9uIG5vdCBmb3VuZFwiLCBub3RpZmljYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvblNob3dOb3RpZmljYXRpb24obm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb24pIHtcbiAgICB0aGlzLmRlYnVnKFxuICAgICAgXCJSZWNlaXZlZCBub3RpZmljYXRpb24gY29udGFpbmVyIG9uIFwiICsgdGhpcy5zY29wZS5jaGFubmVsTmFtZSxcbiAgICAgIHRoaXMuc2NvcGUsXG4gICAgICBub3RpZmljYXRpb25cbiAgICApO1xuICAgIHRoaXMuc2NvcGUubm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmaWNhdGlvbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIC8vIEFkZCBldmVudCBkaXNwYXRjaGVyIHRvIGxpc3RlbiBmb3IgdG9hc3Qgbm90aWZpY2F0aW9uc1xuICAgIHRoaXMubm90aWZpY2F0aW9uRGlzcGF0Y2hlciA9IG5ldyBFdmVudERpc3BhdGNoZXIodGhpcy5zY29wZS5jaGFubmVsTmFtZSk7XG4gICAgdGhpcy5ub3RpZmljYXRpb25EaXNwYXRjaGVyLm9uKFxuICAgICAgXCJzaG93LW5vdGlmaWNhdGlvblwiLFxuICAgICAgdGhpcy5vblNob3dOb3RpZmljYXRpb24sXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICh0aGlzLm5vdGlmaWNhdGlvbkRpc3BhdGNoZXIgYXMgRXZlbnREaXNwYXRjaGVyKS5vZmYoXG4gICAgICBcInNob3ctbm90aWZpY2F0aW9uXCIsXG4gICAgICB0aGlzLm9uU2hvd05vdGlmaWNhdGlvbixcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIG9yIHRoZSBjaGlsZHMgYXJlIHRlbXBsYXRlc1xuICAgIGlmICghaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEJzNENvbnRlbnRzQ29tcG9uZW50LFxuICBTY29wZSBhcyBCczRDb250ZW50c0NvbXBvbmVudFNjb3BlLFxufSBmcm9tIFwiLi4vYnM0LWNvbnRlbnRzL2JzNC1jb250ZW50cy5jb21wb25lbnQuanNcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgVGVtcGxhdGVGdW5jdGlvbiB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtc2Nyb2xsc3B5LmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yIHtcbiAgZWxlbWVudDogSFRNTEhlYWRpbmdFbGVtZW50O1xuICBocmVmOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNoaWxkczogQW5jaG9yW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBCczRDb250ZW50c0NvbXBvbmVudFNjb3BlIHtcbiAgLyoqXG4gICAqIFBpeGVscyB0byBvZmZzZXQgZnJvbSB0b3Agd2hlbiBjYWxjdWxhdGluZyBwb3NpdGlvbiBvZiBzY3JvbGwuXG4gICAqL1xuICBvZmZzZXQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIFBpeGVscyB0byBvZmZzZXQgZnJvbSBib3R0b20gd2hlbiBjYWxjdWxhdGluZyBwb3NpdGlvbiBvZiBzY3JvbGwuXG4gICAqL1xuICBvZmZzZXRCb3R0b206IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEJzNFNjcm9sbHNweUNvbXBvbmVudCBleHRlbmRzIEJzNENvbnRlbnRzQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtc2Nyb2xsc3B5XCI7XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiaGVhZGVycy1zdGFydFwiLFxuICAgICAgXCJoZWFkZXJzLWRlcHRoXCIsXG4gICAgICBcImZpbmQtaGVhZGVyLWlkLWRlcHRoXCIsXG4gICAgICBcImhlYWRlci1wYXJlbnQtc2VsZWN0b3JcIixcbiAgICAgIFwib2Zmc2V0XCIsXG4gICAgICBcIm9mZnNldC1ib3R0b21cIixcbiAgICAgIFwic2Nyb2xsLW9mZnNldFwiLFxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGhlYWRlcnNEZXB0aDogMSxcbiAgICBoZWFkZXJzU3RhcnQ6IDIsXG4gICAgZmluZEhlYWRlcklkRGVwdGg6IDEsXG4gICAgaGVhZGVyUGFyZW50U2VsZWN0b3I6IHVuZGVmaW5lZCxcbiAgICBvZmZzZXQ6IDAsXG4gICAgb2Zmc2V0Qm90dG9tOiAwLFxuICAgIHNjcm9sbE9mZnNldDogMCxcbiAgICBhbmNob3JzOiBbXSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEJzNFNjcm9sbHNweUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImhlYWRlcnNTdGFydFwiLCBcImhlYWRlcnNEZXB0aFwiLCBcImhlYWRlclBhcmVudFNlbGVjdG9yXCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGdldFVybCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy91cmxcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtc2hhcmUuY29tcG9uZW50Lmh0bWxcIjtcbmltcG9ydCBsYWJlbFRlbXBsYXRlIGZyb20gXCIuL2JzNC1zaGFyZS5sYWJlbC5odG1sXCI7XG5pbXBvcnQgeyBTaGFyZUl0ZW0sIFNoYXJlVXJsVHlwZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBEcm9wZG93blNlcnZpY2UgfSBmcm9tIFwiQHJpYmFqcy9iczRcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgdHlwZTogU2hhcmVVcmxUeXBlO1xuICB0aXRsZTogc3RyaW5nO1xuICB0ZXh0OiBzdHJpbmc7XG4gIC8qKiBQYWdlIHVybCB0byBzaGFyZSAqL1xuICB1cmw6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgbGFiZWxUZW1wbGF0ZTogc3RyaW5nO1xuXG4gIC8qKiB0cnVlIGlmIHRoZSBicm93c2VyIHJ1bnMgb24gQW5kcm9pZCAqL1xuICBpc0FuZHJvaWQ6IGJvb2xlYW47XG4gIC8qKiB0cnVlIGlmIHRoZSBicm93c2VyIHJ1bnMgb24gaU9TICovXG4gIGlzSW9zOiBib29sZWFuO1xuICAvKiogdHJ1ZSBpZiB0aGUgYnJvd3NlciBydW5zIG9uIGEgZGVza3RvcCBjb21wdXRlciAqL1xuICBpc0Rlc2t0b3A6IGJvb2xlYW47XG4gIC8qKiB0cnVlIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIG5hdGl2ZSBzaGFyZSAqL1xuICBpc05hdGl2ZTogYm9vbGVhbjtcbiAgZHJvcGRvd25JZDogc3RyaW5nO1xuICAvKipcbiAgICogT2JqZWN0IHdpdGggc2hhcmUgdXJscyBsaWtlIHdoYXRzYXBwLCB0ZWxlZ3JhbSwgaW5zdGFncmFtIGV0YyB1c2VkIGlmIHRoZSBuYXRpdmUgc2hhcmUgaXMgbm9pdCBhdmFpbGFibGVcbiAgICogT25seSB1c2VkIGlmIHRoZSBicm93c2VyIGhhcyBub3QgYW4gbmF0aXZlIHNoYXJlIHN1cHBvcnQgbGlrZSBvbiBhbmRyb2lkIGFuZCBpT1NcbiAgICogKi9cbiAgc2hhcmVJdGVtczogU2hhcmVJdGVtW107XG5cbiAgZHJvcGRvd25EaXJlY3Rpb246IFwidXBcIiB8IFwiZG93blwiIHwgXCJyaWdodFwiIHwgXCJsZWZ0XCI7XG5cbiAgLy8gTWV0aG9kc1xuICBzaGFyZU9uU2VydmljZTogQnM0U2hhcmVDb21wb25lbnRbXCJzaGFyZU9uU2VydmljZVwiXTtcbiAgc2hhcmU6IEJzNFNoYXJlQ29tcG9uZW50W1wic2hhcmVcIl07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdG9yU2hhcmVQYXJhbSB7XG4gIHVybDogc3RyaW5nO1xuICB0ZXh0OiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gdHNsaW50OmRpc2FibGU6IGludGVyZmFjZS1uYW1lXG4gIGludGVyZmFjZSBOYXZpZ2F0b3Ige1xuICAgIHNoYXJlOiAoZGF0YT86IFNoYXJlRGF0YSkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgfVxufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byBzaGFyZSB0aGUgYSBsaW5rXG4gKiBTaW1pbGFyIHByb2plY3RzIHdoaWNoIGFyZSBjYW4gc2hhcmUgc3R1ZmY6XG4gKiAgKiBodHRwczovL2dpdGh1Yi5jb20vbmltaXEvd2ViLXNoYXJlLXNoaW1cbiAqICAqIGh0dHA6Ly93ZWJpbnRlbnRzLm9yZy9cbiAqICAqIGh0dHA6Ly9jaHJpc3dyZW4uZ2l0aHViLmlvL25hdGl2ZS1zb2NpYWwtaW50ZXJhY3Rpb25zL1xuICogICogaHR0cHM6Ly93d3cuc2hhcmV0aGlzLmNvbS9wbGF0Zm9ybS9zaGFyZS1idXR0b25zL1xuICogICogaHR0cHM6Ly9naXRodWIuY29tL2RpbXNlbWVub3YvUGhvdG9Td2lwZS9ibG9iL21hc3Rlci9zcmMvanMvdWkvcGhvdG9zd2lwZS11aS1kZWZhdWx0LmpzXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQnM0U2hhcmVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1zaGFyZVwiO1xuXG4gIHB1YmxpYyBfZGVidWcgPSBmYWxzZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwidHlwZVwiLFxuICAgICAgXCJ0aXRsZVwiLFxuICAgICAgXCJ0ZXh0XCIsXG4gICAgICBcInVybFwiLFxuICAgICAgXCJtZWRpYS11cmxcIixcbiAgICAgIFwibGFiZWxcIixcbiAgICAgIFwiZHJvcGRvd24tZGlyZWN0aW9uXCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkcm9wZG93bj86IERyb3Bkb3duU2VydmljZTtcblxuICAvLyBDb3VudCBvZiBCczRTaGFyZUNvbXBvbmVudCBjb21wb25lbnRzXG4gIHN0YXRpYyBjb3VudCA9IDA7XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2NvcGUgPSB0aGlzLmdldFNjb3BlRGVmYXVsdHMoKTtcbiAgICB0aGlzLmRlYnVnKFwiY29uc3RydWN0b3JcIiwgdGhpcy5zY29wZSk7XG4gICAgQnM0U2hhcmVDb21wb25lbnQuY291bnQrKztcbiAgICB0aGlzLm9uRXh0ZXJuYWxPcGVuRXZlbnQgPSB0aGlzLm9uRXh0ZXJuYWxPcGVuRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRXh0ZXJuYWxDbG9zZUV2ZW50ID0gdGhpcy5vbkV4dGVybmFsQ2xvc2VFdmVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldERlZmF1bHRTaGFyZVNlcnZpY2VzKCkge1xuICAgIGNvbnN0IG5ld0xpbmUgPSBcIiUwQVwiO1xuICAgIGNvbnN0IHNoYXJlSXRlbXM6IFNoYXJlSXRlbVtdID0gW1xuICAgICAge1xuICAgICAgICBpZDogXCJmYWNlYm9va1wiLFxuICAgICAgICBsYWJlbDogXCJGYWNlYm9va1wiLFxuICAgICAgICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gYWRkIGEgbWVzc2FnZSBvbiBmYWNlYm9vayBzaGFyZXIucGhwIGJ1dCB3aXRoIHRoZSBEaWFsb2cgQVBJLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL2phdmFzY3JpcHQvcmVmZXJlbmNlL0ZCLnVpXG4gICAgICAgIHVybFRlbXBsYXRlOiBcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7dXJsfX1cIixcbiAgICAgICAgbWVkaWFVcmxUZW1wbGF0ZTpcbiAgICAgICAgICBcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7bWVkaWFfdXJsfX1cIixcbiAgICAgICAgdHlwZTogXCJwb3B1cFwiLFxuICAgICAgICB1cmw6IFwiXCIsXG4gICAgICAgIGF2YWlsYWJsZUZvcjogW1wicGFnZVwiLCBcImltYWdlXCIsIFwidmlkZW9cIl0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogXCJ0d2l0dGVyXCIsXG4gICAgICAgIGxhYmVsOiBcIlR3aXR0ZXJcIixcbiAgICAgICAgdXJsVGVtcGxhdGU6XG4gICAgICAgICAgXCJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PXt7dGV4dH19JnVybD17e3VybH19XCIsXG4gICAgICAgIG1lZGlhVXJsVGVtcGxhdGU6IGBodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PXt7dGV4dH19JnVybD17e21lZGlhX3VybH19JHtuZXdMaW5lfSh7e3VybH19KWAsXG4gICAgICAgIHVybDogXCJcIixcbiAgICAgICAgYXZhaWxhYmxlRm9yOiBbXCJwYWdlXCIsIFwiaW1hZ2VcIiwgXCJ2aWRlb1wiXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcInBpbnRlcmVzdFwiLFxuICAgICAgICBsYWJlbDogXCJQaW50ZXJlc3RcIixcbiAgICAgICAgdXJsVGVtcGxhdGU6XG4gICAgICAgICAgXCJodHRwOi8vd3d3LnBpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vXCIgK1xuICAgICAgICAgIFwiP3VybD17e3VybH19Jm1lZGlhPXt7bWVkaWFfdXJsfX0mZGVzY3JpcHRpb249e3t0ZXh0fX1cIixcbiAgICAgICAgdHlwZTogXCJwb3B1cFwiLFxuICAgICAgICB1cmw6IFwiXCIsXG5cbiAgICAgICAgYXZhaWxhYmxlRm9yOiBbXCJpbWFnZVwiLCBcInZpZGVvXCJdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IFwid2hhdHNhcHBcIixcbiAgICAgICAgbGFiZWw6IFwiV2hhdHNBcHBcIixcbiAgICAgICAgdXJsVGVtcGxhdGU6IGBodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD90ZXh0PXt7dGV4dH19JHtuZXdMaW5lfSR7bmV3TGluZX17e3VybH19YCxcbiAgICAgICAgbWVkaWFVcmxUZW1wbGF0ZTogYGh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3RleHQ9e3t0ZXh0fX0ke25ld0xpbmV9JHtuZXdMaW5lfXt7bWVkaWFfdXJsfX0ke25ld0xpbmV9KHt7dXJsfX0pYCxcbiAgICAgICAgdHlwZTogXCJwb3B1cFwiLFxuICAgICAgICB1cmw6IFwiXCIsXG4gICAgICAgIGF2YWlsYWJsZUZvcjogW1wicGFnZVwiLCBcImltYWdlXCIsIFwidmlkZW9cIl0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogXCJ0ZWxlZ3JhbVwiLFxuICAgICAgICBsYWJlbDogXCJUZWxlZ3JhbVwiLFxuICAgICAgICB1cmxUZW1wbGF0ZTogYGh0dHBzOi8vdGVsZWdyYW0ubWUvc2hhcmUvdXJsP3VybD17e21lZGlhX3VybH19JnRleHQ9e3t0ZXh0fX1gLFxuICAgICAgICBtZWRpYVVybFRlbXBsYXRlOiBgaHR0cHM6Ly90ZWxlZ3JhbS5tZS9zaGFyZS91cmw/dXJsPXt7bWVkaWFfdXJsfX0mdGV4dD17e3RleHR9fSR7bmV3TGluZX0oe3t1cmx9fSlgLFxuICAgICAgICB0eXBlOiBcInBvcHVwXCIsXG4gICAgICAgIHVybDogXCJcIixcbiAgICAgICAgYXZhaWxhYmxlRm9yOiBbXCJwYWdlXCIsIFwiaW1hZ2VcIiwgXCJ2aWRlb1wiXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcImVtYWlsXCIsXG4gICAgICAgIGxhYmVsOiBcIkVtYWlsXCIsXG4gICAgICAgIHVybFRlbXBsYXRlOiBgbWFpbHRvOj9zdWJqZWN0PXt7dGl0bGV9fSZib2R5PXt7dGV4dH19JHtuZXdMaW5lfSR7bmV3TGluZX17e3VybH19YCxcbiAgICAgICAgbWVkaWFVcmxUZW1wbGF0ZTogYG1haWx0bzo/c3ViamVjdD17e3RpdGxlfX0mYm9keT17e3RleHR9fSR7bmV3TGluZX0ke25ld0xpbmV9e3ttZWRpYV91cmx9fSR7bmV3TGluZX0oe3t1cmx9fSlgLFxuICAgICAgICB0eXBlOiBcImhyZWZcIixcbiAgICAgICAgdXJsOiBcIlwiLFxuICAgICAgICBhdmFpbGFibGVGb3I6IFtcInBhZ2VcIiwgXCJpbWFnZVwiLCBcInZpZGVvXCJdLFxuICAgICAgfSxcbiAgICAgIC8vIHtcbiAgICAgIC8vICAgaWQ6IFwic21zXCIsXG4gICAgICAvLyAgIGxhYmVsOiBcIlNNU1wiLFxuICAgICAgLy8gICB1cmxUZW1wbGF0ZTogXCJzbXM6P2JvZHk9e3t0ZXh0fX1cIixcbiAgICAgIC8vICAgdHlwZTogJ2hyZWYnLFxuICAgICAgLy8gICB1cmw6IFwiXCIsXG4gICAgICAvLyAgIGNhblBhc3NVcmw6IGZhbHNlLFxuICAgICAgLy8gICBhdmFpbGFibGVGb3I6IFsncGFnZScsICdpbWFnZScsICd2aWRlbyddLFxuICAgICAgLy8gfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IFwiZG93bmxvYWRcIixcbiAgICAgICAgbGFiZWw6IFwiRG93bmxvYWQgaW1hZ2VcIixcbiAgICAgICAgdXJsVGVtcGxhdGU6IFwie3tyYXdfbWVkaWFfdXJsfX1cIixcbiAgICAgICAgdHlwZTogXCJkb3dubG9hZFwiLFxuICAgICAgICB1cmw6IFwiXCIsXG4gICAgICAgIGF2YWlsYWJsZUZvcjogW1wiaW1hZ2VcIiwgXCJ2aWRlb1wiXSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICByZXR1cm4gc2hhcmVJdGVtcztcbiAgfVxuXG4gIHByb3RlY3RlZCBpc0lvcygpIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBob25lfGlQYWR8aVBvZC9pKSAhPT0gbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBpc0FuZHJvaWQoKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSkgIT09IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnJvd3NlclN1cHBvcnRzTmF0aXZlU2hhcmUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3Iuc2hhcmUgPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTY29wZURlZmF1bHRzKCk6IFNjb3BlIHtcbiAgICBjb25zdCBzY29wZTogU2NvcGUgPSB7XG4gICAgICB0eXBlOiBcInBhZ2VcIixcbiAgICAgIHRpdGxlOiBkb2N1bWVudC50aXRsZSxcbiAgICAgIHRleHQ6IFwiTG9vayBhdCB0aGlzISDwn5GA8J+kqVwiLFxuICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgIGxhYmVsOiBcIlNoYXJlXCIsXG4gICAgICBsYWJlbFRlbXBsYXRlLFxuICAgICAgaXNBbmRyb2lkOiB0aGlzLmlzQW5kcm9pZCgpLFxuICAgICAgaXNJb3M6IHRoaXMuaXNJb3MoKSxcbiAgICAgIGlzRGVza3RvcDogZmFsc2UsXG4gICAgICBpc05hdGl2ZTogdGhpcy5icm93c2VyU3VwcG9ydHNOYXRpdmVTaGFyZSgpLFxuICAgICAgZHJvcGRvd25JZDogXCJkcm9wZG93blNoYXJlXCIgKyBCczRTaGFyZUNvbXBvbmVudC5jb3VudCxcbiAgICAgIHNoYXJlSXRlbXM6IHRoaXMuZ2V0RGVmYXVsdFNoYXJlU2VydmljZXMoKSxcbiAgICAgIGRyb3Bkb3duRGlyZWN0aW9uOiBcImRvd25cIixcbiAgICAgIC8vIE1ldGhvZHNcbiAgICAgIHNoYXJlOiB0aGlzLnNoYXJlLFxuICAgICAgc2hhcmVPblNlcnZpY2U6IHRoaXMuc2hhcmVPblNlcnZpY2UsXG4gICAgfTtcblxuICAgIC8vIG9uIHRob3NlIHR3byBzdXBwb3J0IFwibW9iaWxlIGRlZXAgbGlua3NcIiwgc28gSFRUUCBiYXNlZCBmYWxsYmFjayBmb3IgYWxsIG90aGVycy5cbiAgICBzY29wZS5pc0Rlc2t0b3AgPSAhc2NvcGUuaXNJb3MgJiYgIXNjb3BlLmlzQW5kcm9pZDtcblxuICAgIHJldHVybiBzY29wZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkV4dGVybmFsT3BlbkV2ZW50KCkge1xuICAgIHRoaXMuZHJvcGRvd24/LnNob3coKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkV4dGVybmFsQ2xvc2VFdmVudCgpIHtcbiAgICB0aGlzLmRyb3Bkb3duPy5jbG9zZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEJzNFNoYXJlQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgdGhpcy5vbkV4dGVybmFsT3BlbkV2ZW50KTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCB0aGlzLm9uRXh0ZXJuYWxDbG9zZUV2ZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIHRoaXMub25FeHRlcm5hbE9wZW5FdmVudCk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgdGhpcy5vbkV4dGVybmFsT3BlbkV2ZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRVUkxGb3JTaGFyZSgpIHtcbiAgICBpZiAodGhpcy5zY29wZS50eXBlID09PSBcInBhZ2VcIiAmJiB0aGlzLnNjb3BlLnVybCkge1xuICAgICAgcmV0dXJuIGdldFVybCh0aGlzLnNjb3BlLnVybCk7XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRNZWRpYVVybEZvclNoYXJlKCkge1xuICAgIGlmICh0aGlzLnNjb3BlLnR5cGUgIT09IFwicGFnZVwiICYmIHRoaXMuc2NvcGUudXJsKSB7XG4gICAgICByZXR1cm4gZ2V0VXJsKHRoaXMuc2NvcGUudXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0VGV4dEZvclNoYXJlKCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlLnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3VycmVudGx5IG9ubHkgdXNlZCBmb3IgZW1haWxcbiAgICogQHBhcmFtIGFwcGVuZFVybFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldFRpdGxlRm9yU2hhcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NvcGUudGl0bGU7XG4gIH1cblxuICBwcm90ZWN0ZWQgdXBkYXRlU2hhcmVVUkxzKCkge1xuICAgIGZvciAoY29uc3Qgc2hhcmVJdGVtIG9mIHRoaXMuc2NvcGUuc2hhcmVJdGVtcykge1xuICAgICAgY29uc3QgdXJsID0gdGhpcy5nZXRVUkxGb3JTaGFyZSgpO1xuICAgICAgY29uc3QgbWVkaWFVcmwgPSB0aGlzLmdldE1lZGlhVXJsRm9yU2hhcmUoKTtcbiAgICAgIGNvbnN0IHNoYXJlVGV4dCA9IHRoaXMuZ2V0VGV4dEZvclNoYXJlKCk7XG4gICAgICBjb25zdCBzaGFyZVRpdGxlID0gdGhpcy5nZXRUaXRsZUZvclNoYXJlKCk7XG4gICAgICBsZXQgdXJsVGVtcGxhdGUgPSBzaGFyZUl0ZW0udXJsVGVtcGxhdGU7XG5cbiAgICAgIGlmICh0aGlzLnNjb3BlLnR5cGUgIT09IFwicGFnZVwiICYmIHNoYXJlSXRlbS5tZWRpYVVybFRlbXBsYXRlKSB7XG4gICAgICAgIHVybFRlbXBsYXRlID0gc2hhcmVJdGVtLm1lZGlhVXJsVGVtcGxhdGU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNoYXJlVVJMID0gdXJsVGVtcGxhdGVcbiAgICAgICAgLnJlcGxhY2UoXCJ7e3VybH19XCIsIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxuICAgICAgICAucmVwbGFjZShcInt7dXJsfX1cIiwgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpXG4gICAgICAgIC5yZXBsYWNlKFwie3ttZWRpYV91cmx9fVwiLCBlbmNvZGVVUklDb21wb25lbnQobWVkaWFVcmwpKVxuICAgICAgICAucmVwbGFjZShcInt7cmF3X21lZGlhX3VybH19XCIsIG1lZGlhVXJsKVxuICAgICAgICAucmVwbGFjZShcInt7dGV4dH19XCIsIGVuY29kZVVSSUNvbXBvbmVudChzaGFyZVRleHQpKVxuICAgICAgICAucmVwbGFjZShcInt7dGl0bGV9fVwiLCBlbmNvZGVVUklDb21wb25lbnQoc2hhcmVUaXRsZSkpO1xuXG4gICAgICBzaGFyZUl0ZW0uYXZhaWxhYmxlID0gc2hhcmVJdGVtLmF2YWlsYWJsZUZvci5pbmNsdWRlcyh0aGlzLnNjb3BlLnR5cGUpO1xuICAgICAgc2hhcmVJdGVtLnVybCA9IHNoYXJlVVJMO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0RHJvcGRvd24oKSB7XG4gICAgY29uc3QgZHJvcERvd25CdXR0b25FbGVtZW50ID0gdGhpcy5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuZHJvcGRvd24tdG9nZ2xlLXNoYXJlXCJcbiAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTEFuY2hvckVsZW1lbnQ7XG4gICAgaWYgKCFkcm9wRG93bkJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0VsZW1lbnQgd2l0aCBzZWxlY3RvciBcIi5kcm9wZG93bi10b2dnbGUtc2hhcmVcIiBub3QgZm91bmQhJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kcm9wZG93biA9IG5ldyBEcm9wZG93blNlcnZpY2UoZHJvcERvd25CdXR0b25FbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOZXcgYnJvd3NlciBwb3B1cCB3aXRoIHRoZSBleHRlcm5hbCBzaXRlIChlLmcuIEZhY2Vib29rKSBvbiB5b3Ugd2FudCB0byBzaGFyZSB5b3VyIHVybFxuICAgKiBAcGFyYW0gYmluZGluZ1xuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQHBhcmFtIGNvbnRyb2xsZXJcbiAgICogQHBhcmFtIGVsXG4gICAqL1xuICBwdWJsaWMgc2hhcmVPblNlcnZpY2UoZXZlbnQ6IEV2ZW50LCBjb250cm9sbGVyOiBhbnksIGVsOiBIVE1MQW5jaG9yRWxlbWVudCkge1xuICAgIHRoaXMuZGVidWcoXCJPcGVuIHBvcHVwXCIpO1xuXG4gICAgdGhpcy5kcm9wZG93bj8uY2xvc2UoKTtcblxuICAgIGlmICghZWwgfHwgIWVsLmhyZWYpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBocmVmIGF0dHJpYnV0ZSBmb3VuZFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBXZSB1c2UgdGhlIGRlZmF1bHQgYnJvd3NlciBhbmNob3IgaHJlZiBsb2dpYyBmb3IgZG93bmxvYWQgYW5kIGhyZWZcbiAgICBpZiAoXG4gICAgICAoZWwuaGFzQXR0cmlidXRlKFwidHlwZVwiKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09PSBcImRvd25sb2FkXCIpIHx8XG4gICAgICBlbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09PSBcImhyZWZcIlxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIC8vIHRoaXMuZGVidWcoJ09wZW4gcG9wdXAnKTtcblxuICAgIHdpbmRvdy5vcGVuKFxuICAgICAgZWwuaHJlZixcbiAgICAgIFwiU2hhcmVcIixcbiAgICAgIFwic2Nyb2xsYmFycz15ZXMscmVzaXphYmxlPXllcyx0b29sYmFyPW5vLFwiICtcbiAgICAgICAgXCJsb2NhdGlvbj15ZXMsd2lkdGg9NTUwLGhlaWdodD00MjAsdG9wPTEwMCxsZWZ0PVwiICtcbiAgICAgICAgKHdpbmRvdy5zY3JlZW4gPyBNYXRoLnJvdW5kKHNjcmVlbi53aWR0aCAvIDIgLSAyNzUpIDogMTAwKVxuICAgICk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2hhcmUoZXZlbnQ6IEV2ZW50KTogUHJvbWlzZTxhbnk+IHtcbiAgICB0aGlzLmRlYnVnKFwic2hhcmVcIiwgdGhpcy5zY29wZSk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5zY29wZS5pc05hdGl2ZSAmJiAhdGhpcy5zY29wZS5pc0Rlc2t0b3ApIHtcbiAgICAgIHJldHVybiBuYXZpZ2F0b3JcbiAgICAgICAgLnNoYXJlKHtcbiAgICAgICAgICB0aXRsZTogdGhpcy5zY29wZS50aXRsZSxcbiAgICAgICAgICB0ZXh0OiBgJHt0aGlzLnNjb3BlLnRleHR9XFxyXFxuXFxyXFxuYCxcbiAgICAgICAgICB1cmw6IHRoaXMuc2NvcGUudXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yOiBET01FeGNlcHRpb24pID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdyBmbGFzaCBtZXNzYWdlXG4gICAgICAgICAgICAvLyB0aGlzLmRlYnVnKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciAke2Vycm9yLm5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YCwgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVTaGFyZVVSTHMoKTtcbiAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duPy50b2dnbGUoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gICAgLy8gdGhpcy5kZWJ1ZygnYmVmb3JlQmluZCcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmluaXREcm9wZG93bigpO1xuICAgIC8vIHRoaXMuZGVidWcoJ2FmdGVyQmluZCcsIHRoaXMuc2NvcGUpO1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcInVybFwiXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICB0aGlzLmRlYnVnKFwidGVtcGxhdGVcIiwgdGhpcywgaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpO1xuICAgIGlmICh0aGlzICYmIGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICAvLyBJZiBhIGNoaWxkIGlzIHNldCwgdGhpcyBpcyBhIGN1c3RvbSBsYWJlbCB0ZW1wbGF0ZVxuICAgICAgdGhpcy5zY29wZS5sYWJlbFRlbXBsYXRlID0gdGhpcy5pbm5lckhUTUw7XG4gICAgICB0aGlzLmRlYnVnKFwiQ3VzdG9tIGxhYmVsIHRlbXBsYXRlOiBcIiwgdGhpcy5zY29wZS5sYWJlbFRlbXBsYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7XG4gIGdldFZpZXdwb3J0RGltZW5zaW9ucyxcbiAgaGFzQ2hpbGROb2Rlc1RyaW0sXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB7IFRPR0dMRV9CVVRUT04gfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9jb250cm9sXCI7XG5pbXBvcnQge1xuICBCczRTaWRlYmFyQ29tcG9uZW50U2NvcGUgYXMgU2NvcGUsXG4gIEJzNFNpZGViYXJDb21wb25lbnRTdGF0ZSBhcyBTdGF0ZSxcbn0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIEJzNFNpZGViYXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1zaWRlYmFyXCI7XG5cbiAgcHJvdGVjdGVkIGNvbXB1dGVkU3R5bGU/OiBDU1NTdHlsZURlY2xhcmF0aW9uO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICBcImlkXCIsXG4gICAgICBcImNvbnRhaW5lci1zZWxlY3RvclwiLFxuICAgICAgXCJwb3NpdGlvblwiLFxuICAgICAgXCJ3aWR0aFwiLFxuICAgICAgXCJhdXRvLXNob3ctb24td2lkZXItdGhhblwiLFxuICAgICAgXCJhdXRvLWhpZGUtb24tc2xpbW1lci10aGFuXCIsXG4gICAgICBcImZvcmNlLWhpZGUtb24tbG9jYXRpb24tcGF0aG5hbWVzXCIsXG4gICAgICBcImZvcmNlLXNob3ctb24tbG9jYXRpb24tcGF0aG5hbWVzXCIsXG4gICAgICBcIm92ZXJsYXktb24tc2xpbW1lci10aGFuXCIsXG4gICAgICBcIndhdGNoLW5ldy1wYWdlLXJlYWR5LWV2ZW50XCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBldmVudERpc3BhdGNoZXI/OiBFdmVudERpc3BhdGNoZXI7XG5cbiAgcHJvdGVjdGVkIHJvdXRlckV2ZW50cyA9IG5ldyBFdmVudERpc3BhdGNoZXIoXCJtYWluXCIpO1xuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgLy8gdGVtcGxhdGUgcHJvcGVydGllc1xuICAgIGNvbnRhaW5lclNlbGVjdG9yOiB1bmRlZmluZWQsXG4gICAgc3RhdGU6IFwiaGlkZGVuXCIsXG4gICAgb2xkU3RhdGU6IFwiaGlkZGVuXCIsXG4gICAgaWQ6IHVuZGVmaW5lZCxcbiAgICB3aWR0aDogXCIyNTBweFwiLFxuXG4gICAgLy8gT3B0aW9uc1xuICAgIHBvc2l0aW9uOiBcImxlZnRcIixcbiAgICBhdXRvU2hvd09uV2lkZXJUaGFuOiAxMTk5LFxuICAgIGF1dG9IaWRlT25TbGltbWVyVGhhbjogMTIwMCxcbiAgICB3YXRjaE5ld1BhZ2VSZWFkeUV2ZW50OiB0cnVlLFxuICAgIGZvcmNlSGlkZU9uTG9jYXRpb25QYXRobmFtZXM6IFtdLFxuICAgIGZvcmNlU2hvd09uTG9jYXRpb25QYXRobmFtZXM6IFtdLFxuICAgIG92ZXJsYXlPblNsaW1tZXJUaGFuOiAxMjAwLFxuXG4gICAgLy8gdGVtcGxhdGUgbWV0aG9kc1xuICAgIGhpZGU6IHRoaXMuaGlkZSxcbiAgICBzaG93OiB0aGlzLnNob3csXG4gICAgdG9nZ2xlOiB0aGlzLnRvZ2dsZSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIC8vIGFzc2lnbiB0aGlzIHRvIGJvdW5kIHZlcnNpb24sIHNvIHdlIGNhbiByZW1vdmUgd2luZG93IEV2ZW50TGlzdGVuZXIgbGF0ZXIgd2l0aG91dCBwcm9ibGVtXG4gICAgdGhpcy5vbkVudmlyb25tZW50Q2hhbmdlcyA9IHRoaXMub25FbnZpcm9ubWVudENoYW5nZXMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTdGF0ZShzdGF0ZTogU3RhdGUpIHtcbiAgICB0aGlzLnNjb3BlLm9sZFN0YXRlID0gYCR7dGhpcy5zY29wZS5zdGF0ZX1gIGFzIFN0YXRlO1xuICAgIHRoaXMuc2NvcGUuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zY29wZS5zdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTaG93TW9kZSgpIHtcbiAgICBsZXQgbW9kZTogU3RhdGU7XG4gICAgY29uc3QgdncgPSBnZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53O1xuICAgIGlmICh2dyA8IHRoaXMuc2NvcGUub3ZlcmxheU9uU2xpbW1lclRoYW4pIHtcbiAgICAgIG1vZGUgPSAoXCJvdmVybGF5LVwiICsgdGhpcy5zY29wZS5wb3NpdGlvbikgYXMgU3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGUgPSAoXCJzaWRlLVwiICsgdGhpcy5zY29wZS5wb3NpdGlvbikgYXMgU3RhdGU7XG4gICAgfVxuICAgIHJldHVybiBtb2RlO1xuICB9XG5cbiAgcHVibGljIGhpZGUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShcImhpZGRlblwiKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93KCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRTaG93TW9kZSgpO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5zY29wZS5zdGF0ZSA9PT0gXCJoaWRkZW5cIikge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChCczRTaWRlYmFyQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gICAgdGhpcy5jb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbkVudmlyb25tZW50Q2hhbmdlcywge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICB9KTtcbiAgICAvLyBpbml0aWFsXG4gICAgdGhpcy5vbkVudmlyb25tZW50Q2hhbmdlcygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRUb2dnbGVCdXR0b25FdmVudERpc3BhdGNoZXIoKSB7XG4gICAgaWYgKHRoaXMuZXZlbnREaXNwYXRjaGVyKSB7XG4gICAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlci5vZmYoXG4gICAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGUsXG4gICAgICAgIHRoaXMudG9nZ2xlLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgICAgdGhpcy5ldmVudERpc3BhdGNoZXIub2ZmKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuaW5pdCxcbiAgICAgICAgdGhpcy50cmlnZ2VyU3RhdGUsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcbiAgICAgIFRPR0dMRV9CVVRUT04ubnNQcmVmaXggKyB0aGlzLnNjb3BlLmlkXG4gICAgKTtcbiAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlci5vbihUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMudG9nZ2xlLCB0aGlzLnRvZ2dsZSwgdGhpcyk7XG4gICAgdGhpcy5ldmVudERpc3BhdGNoZXIub24oXG4gICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuaW5pdCxcbiAgICAgIHRoaXMudHJpZ2dlclN0YXRlLFxuICAgICAgdGhpc1xuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5pdFJvdXRlckV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBpZiAodGhpcy5zY29wZS53YXRjaE5ld1BhZ2VSZWFkeUV2ZW50KSB7XG4gICAgICB0aGlzLnJvdXRlckV2ZW50cy5vbihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uRW52aXJvbm1lbnRDaGFuZ2VzLCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb25IaWRkZW4oKSB7XG4gICAgdGhpcy5zZXRDb250YWluZXJzU3R5bGUodGhpcy5zY29wZS5zdGF0ZSk7XG4gICAgY29uc3QgdHJhbnNsYXRlWCA9IHRoaXMuc2NvcGUucG9zaXRpb24gPT09IFwibGVmdFwiID8gXCItMTAwJVwiIDogXCIxMDAlXCI7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXG4gICAgICBcInN0eWxlXCIsXG4gICAgICBgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoJHt0cmFuc2xhdGVYfSk7d2lkdGg6JHt0aGlzLnNjb3BlLndpZHRofTtgXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNpZGUoc3RhdGU6IFN0YXRlKSB7XG4gICAgdGhpcy5zZXRDb250YWluZXJzU3R5bGUoc3RhdGUpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFxuICAgICAgXCJzdHlsZVwiLFxuICAgICAgYHRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3dpZHRoOiR7dGhpcy5zY29wZS53aWR0aH07YFxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25PdmVybGF5KHN0YXRlOiBTdGF0ZSkge1xuICAgIHRoaXMuc2V0Q29udGFpbmVyc1N0eWxlKHN0YXRlKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcbiAgICAgIFwic3R5bGVcIixcbiAgICAgIGB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt3aWR0aDoke3RoaXMuc2NvcGUud2lkdGh9O2BcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRyaWdnZXJTdGF0ZSgpIHtcbiAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlcj8udHJpZ2dlcihcInN0YXRlXCIsIHRoaXMuc2NvcGUuc3RhdGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgc3dpdGNoICh0aGlzLnNjb3BlLnN0YXRlKSB7XG4gICAgICBjYXNlIFwic2lkZS1sZWZ0XCI6XG4gICAgICBjYXNlIFwic2lkZS1yaWdodFwiOlxuICAgICAgICB0aGlzLm9uU2lkZSh0aGlzLnNjb3BlLnN0YXRlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib3ZlcmxheS1sZWZ0XCI6XG4gICAgICBjYXNlIFwib3ZlcmxheS1yaWdodFwiOlxuICAgICAgICB0aGlzLm9uT3ZlcmxheSh0aGlzLnNjb3BlLnN0YXRlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLm9uSGlkZGVuKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5ldmVudERpc3BhdGNoZXIpIHtcbiAgICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGVkLFxuICAgICAgICB0aGlzLnNjb3BlLnN0YXRlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMub2Zmc2V0V2lkdGggPyB0aGlzLm9mZnNldFdpZHRoICsgXCJweFwiIDogdGhpcy5zY29wZS53aWR0aDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRTdGF0ZUJ5RW52aXJvbm1lbnQoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZS5mb3JjZUhpZGVPbkxvY2F0aW9uUGF0aG5hbWVzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmhpZGUoKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZS5mb3JjZVNob3dPbkxvY2F0aW9uUGF0aG5hbWVzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3coKTtcbiAgICB9XG4gICAgY29uc3QgdncgPSBnZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53O1xuICAgIGlmIChcbiAgICAgIHRoaXMuc2NvcGUuYXV0b0hpZGVPblNsaW1tZXJUaGFuID4gLTEgJiZcbiAgICAgIHZ3IDwgdGhpcy5zY29wZS5hdXRvSGlkZU9uU2xpbW1lclRoYW5cbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmhpZGUoKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZS5hdXRvU2hvd09uV2lkZXJUaGFuID4gLTEgJiZcbiAgICAgIHZ3ID4gdGhpcy5zY29wZS5hdXRvU2hvd09uV2lkZXJUaGFuXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIFwidW5kZWJvdW5jZWRcIiB2ZXJzaW9uIG9mIGBvbkVudmlyb25tZW50Q2hhbmdlc2AuXG4gICAqL1xuICBwcm90ZWN0ZWQgX29uRW52aXJvbm1lbnRDaGFuZ2VzKCkge1xuICAgIHRoaXMuc2V0U3RhdGVCeUVudmlyb25tZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdmlld3BvcnQgc2l6ZSBjaGFuZ2VzLCBsb2NhdGlvbiB1cmwgY2hhbmdlcyBvciBzb21ldGhpbmcgZWxzZS5cbiAgICovXG4gIHByb3RlY3RlZCBvbkVudmlyb25tZW50Q2hhbmdlcyA9IGRlYm91bmNlKFxuICAgIHRoaXMuX29uRW52aXJvbm1lbnRDaGFuZ2VzLmJpbmQodGhpcylcbiAgKTtcblxuICBwcm90ZWN0ZWQgZ2V0Q29udGFpbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5zY29wZS5jb250YWluZXJTZWxlY3RvclxuICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxVbmtub3duRWxlbWVudD4oXG4gICAgICAgICAgdGhpcy5zY29wZS5jb250YWluZXJTZWxlY3RvclxuICAgICAgICApXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0Q29udGFpbmVycyhzdGF0ZTogU3RhdGUpIHtcbiAgICB0aGlzLnNldENvbnRhaW5lcnNTdHlsZShzdGF0ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0Q29udGFpbmVyc1N0eWxlKHN0YXRlOiBTdGF0ZSkge1xuICAgIGNvbnN0IGNvbnRhaW5lcnM6XG4gICAgICB8IE5vZGVMaXN0T2Y8SFRNTFVua25vd25FbGVtZW50PlxuICAgICAgfCBBcnJheTxIVE1MVW5rbm93bkVsZW1lbnQ+ID0gdGhpcy5nZXRDb250YWluZXJzKCkgfHwgW107XG5cbiAgICBpZiAoY29udGFpbmVycykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lcnNbaV07XG4gICAgICAgIHRoaXMuc2V0Q29udGFpbmVyU3R5bGUoY29udGFpbmVyLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNvbnRhaW5lciBzdHlsZSwgdGFrZXMgb3ZlcnMgYWx3YXlzIHRoZSB0cmFuc2l0aW9uIHN0eWxlIG9mIHRoaXMgc2lkZWJhclxuICAgKiBAcGFyYW0gY29udGFpbmVyXG4gICAqIEBwYXJhbSBzdHlsZVxuICAgKiBAcGFyYW0gc3RhdGVcbiAgICovXG4gIHByb3RlY3RlZCBzZXRDb250YWluZXJTdHlsZShjb250YWluZXI6IEhUTUxVbmtub3duRWxlbWVudCwgc3RhdGU6IFN0YXRlKSB7XG4gICAgY29uc3QgY3VyclN0eWxlID0gY29udGFpbmVyLnN0eWxlO1xuICAgIGlmIChzdGF0ZSkge1xuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgY29uc3QgY29uU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuXG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgIGNhc2UgXCJzaWRlLWxlZnRcIjpcbiAgICAgICAgICBzd2l0Y2ggKGNvblN0eWxlLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWRcIjpcbiAgICAgICAgICAgICAgY3VyclN0eWxlLmxlZnQgPSB3aWR0aDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjdXJyU3R5bGUubWFyZ2luTGVmdCA9IHdpZHRoO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzaWRlLXJpZ2h0XCI6XG4gICAgICAgICAgc3dpdGNoIChjb25TdHlsZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSBcImZpeGVkXCI6XG4gICAgICAgICAgICAgIGN1cnJTdHlsZS5yaWdodCA9IHdpZHRoO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGN1cnJTdHlsZS5tYXJnaW5SaWdodCA9IHdpZHRoO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2NvcGUub2xkU3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzaWRlLWxlZnRcIjpcbiAgICAgICAgICAgICAgc3dpdGNoIChjb25TdHlsZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmaXhlZFwiOlxuICAgICAgICAgICAgICAgICAgY3VyclN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyU3R5bGUubWFyZ2luTGVmdCA9IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2lkZS1yaWdodFwiOlxuICAgICAgICAgICAgICBzd2l0Y2ggKGNvblN0eWxlLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZpeGVkXCI6XG4gICAgICAgICAgICAgICAgICBjdXJyU3R5bGUucmlnaHQgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyU3R5bGUubWFyZ2luUmlnaHQgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gdGhpcy5jb21wdXRlZFN0eWxlXG4gICAgICA/IHRoaXMuY29tcHV0ZWRTdHlsZS50cmFuc2l0aW9uXG4gICAgICA6IFwiXCI7XG4gICAgLy8gbGV0IHN0eWxlU3RyID0gY29udGFpbmVyLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpIHx8IFwiXCI7XG4gICAgLy8gc3R5bGVTdHIgKz0gc3R5bGU7XG5cbiAgICAvLyByZXR1cm4gY29udGFpbmVyLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHN0eWxlU3RyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmJlZm9yZUJpbmQoKTtcbiAgICB0aGlzLnNjb3BlLm9sZFN0YXRlID0gdGhpcy5nZXRTaG93TW9kZSgpO1xuICAgIHRoaXMuaW5pdFJvdXRlckV2ZW50RGlzcGF0Y2hlcigpO1xuICAgIHJldHVybiB0aGlzLm9uRW52aXJvbm1lbnRDaGFuZ2VzKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMub25FbnZpcm9ubWVudENoYW5nZXMoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJpZFwiXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSBcImNvbnRhaW5lclNlbGVjdG9yXCIpIHtcbiAgICAgIHRoaXMuaW5pdENvbnRhaW5lcnModGhpcy5zY29wZS5zdGF0ZSk7XG4gICAgfVxuICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSBcImlkXCIpIHtcbiAgICAgIHRoaXMuaW5pdFRvZ2dsZUJ1dHRvbkV2ZW50RGlzcGF0Y2hlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRlY29uc3RydWN0aW9uXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyPy5vZmYoXG4gICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuaW5pdCxcbiAgICAgIHRoaXMudHJpZ2dlclN0YXRlLFxuICAgICAgdGhpc1xuICAgICk7XG4gICAgdGhpcy5ldmVudERpc3BhdGNoZXI/Lm9mZihcbiAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGUsXG4gICAgICB0aGlzLnRvZ2dsZSxcbiAgICAgIHRoaXNcbiAgICApO1xuICAgIHRoaXMucm91dGVyRXZlbnRzLm9mZihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uRW52aXJvbm1lbnRDaGFuZ2VzLCB0aGlzKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uRW52aXJvbm1lbnRDaGFuZ2VzLCBmYWxzZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgaWYgKCFoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIk5vIGNoaWxkIGVsZW1lbnRzIGZvdW5kLCB0aGlzIGNvbXBvbmVudCBhcyBubyB0ZW1wbGF0ZSBzbyB5b3UgbmVlZCB0byBkZWZpbmUgeW91ciBvd24gYXMgY2hpbGQgb2YgdGhpcyBjb21wb25lbnQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgY2xvbmUsIGNhbWVsQ2FzZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5pbXBvcnQgeyB0aHJvdHRsZSwgZGVib3VuY2UgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvY29udHJvbFwiO1xuaW1wb3J0IHsgVGVtcGxhdGVGdW5jdGlvbiwgVGVtcGxhdGVzQ29tcG9uZW50IH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5pbXBvcnQge1xuICBEcmFnc2Nyb2xsLFxuICBEcmFnc2Nyb2xsT3B0aW9ucyxcbiAgQXV0b3Njcm9sbCxcbiAgQXV0b3Njcm9sbE9wdGlvbnMsXG4gIFNjcm9sbFBvc2l0aW9uLFxuICBTY3JvbGxFdmVudHNTZXJ2aWNlLFxuICBnZXRTY3JvbGxQb3NpdGlvbixcbn0gZnJvbSBcIkByaWJhanMvZXh0cmFzXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZVNsaWRlcyBmcm9tIFwiLi9iczQtc2xpZGVzaG93LXNsaWRlcy5jb21wb25lbnQuaHRtbFwiO1xuXG5pbXBvcnQgdGVtcGxhdGVDb250cm9scyBmcm9tIFwiLi9iczQtc2xpZGVzaG93LWNvbnRyb2xzLmNvbXBvbmVudC5odG1sXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZUluZGljYXRvcnMgZnJvbSBcIi4vYnM0LXNsaWRlc2hvdy1pbmRpY2F0b3JzLmNvbXBvbmVudC5odG1sXCI7XG5cbmNvbnN0IFNMSURFU0hPV19JTk5FUl9TRUxFQ1RPUiA9IFwiLnNsaWRlc2hvdy1pbm5lclwiO1xuXG5jb25zdCBTTElERVNfU0VMRUNUT1IgPSBgJHtTTElERVNIT1dfSU5ORVJfU0VMRUNUT1J9ID4gLnNsaWRlYDtcblxuZXhwb3J0IHR5cGUgQnJlYWtwb2ludCA9IFwieHNcIiB8IFwic21cIiB8IFwibWRcIiB8IFwibGdcIiB8IFwieGxcIjtcblxuZXhwb3J0IHR5cGUgQ29udHJvbHNQb3NpdGlvbiA9XG4gIHwgXCJpbnNpZGUtbWlkZGxlXCJcbiAgfCBcImluc2lkZS1ib3R0b21cIlxuICB8IFwiaW5zaWRlLXRvcFwiXG4gIHwgXCJvdXRzaWRlLW1pZGRsZVwiXG4gIHwgXCJvdXRzaWRlLWJvdHRvbVwiXG4gIHwgXCJvdXRzaWRlLXRvcFwiO1xuXG5leHBvcnQgdHlwZSBJbmRpY2F0b3JzUG9zaXRpb24gPVxuICB8IFwiaW5zaWRlLWJvdHRvbVwiXG4gIHwgXCJpbnNpZGUtdG9wXCJcbiAgfCBcImluc2lkZS1yaWdodFwiXG4gIHwgXCJpbnNpZGUtbGVmdFwiXG4gIHwgXCJvdXRzaWRlLWJvdHRvbVwiXG4gIHwgXCJvdXRzaWRlLXRvcFwiXG4gIHwgXCJvdXRzaWRlLXJpZ2h0XCJcbiAgfCBcIm91dHNpZGUtbGVmdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uIGV4dGVuZHMgRE9NUmVjdCB7XG4gIGNlbnRlclg6IG51bWJlcjtcbiAgY2VudGVyWTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNsaWRlIHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgaGFuZGxlPzogc3RyaW5nO1xuICBhY3RpdmU6IGJvb2xlYW47XG4gIHR5cGU/OiBzdHJpbmc7XG4gIHBvc2l0aW9uOiBQb3NpdGlvbjtcbiAgaW5kZXg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zaXZlT3B0aW9ucyBleHRlbmRzIFBhcnRpYWw8T3B0aW9ucz4ge1xuICAvKiogbWluIHdpZHRoIG9mIHJlc3BvbnNpdmUgdmlldyBwb3J0IG9mIGZyb20gd2hpY2ggdGhlc2Ugb3B0aW9ucyB0YWtlIGVmZmVjdCAqL1xuICBtaW5XaWR0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAvKiogU2hvdyBjb250cm9scyAqL1xuICBjb250cm9sczogYm9vbGVhbjtcbiAgLyoqIFBvc2l0aW9uIG9mIHRoZSBjb250cm9scyAqL1xuICBjb250cm9sc1Bvc2l0aW9uOiBDb250cm9sc1Bvc2l0aW9uO1xuICAvKiogU2hvdyBpbmRpY2F0b3JzICovXG4gIGluZGljYXRvcnM6IGJvb2xlYW47XG4gIC8qKiBQb3NpdGlvbiBvZiB0aGUgaW5kaWNhdG9ycyAqL1xuICBpbmRpY2F0b3JzUG9zaXRpb246IEluZGljYXRvcnNQb3NpdGlvbjtcbiAgLyoqIFBhdXNlcyBhdXRvIHNjcm9sbCBvbiBob3ZlciBvciBmb2N1cyAqL1xuICBwYXVzZU9uSG92ZXI6IGJvb2xlYW47XG4gIC8qKiBudW1iZXIgb2Ygc2xpZGVzIHRvIGJlIHNjcm9sbGVkIGJ5IGNsaWNraW5nIG9uIHRoZSBjb250cm9scyAqL1xuICBzbGlkZXNUb1Njcm9sbDogbnVtYmVyO1xuICAvKiogQXV0b3Njcm9sbCB0byB0aGUgbmVhcmVzdCBzbGlkZSBhZnRlciBtYW51YWwgc2Nyb2xsIG9yIGRyYWdzY3JvbGwgKi9cbiAgc3RpY2t5OiBib29sZWFuO1xuICAvKiogU2xpZGVzIGFyZSBkcmFnZ2FibGUgb24gZGVza3RvcCBicm93c2VycyAqL1xuICBkcmFnOiBib29sZWFuO1xuICAvKiogRW5hYmxlcyBhdXRvcGxheSBjb250aW51b3VzbHkgb3Igd2l0aCBpbnRlcnZhbCAqL1xuICBhdXRvcGxheTogYm9vbGVhbjtcbiAgLyoqIFBhdXNlIGJldHdlZW4gYXV0b3Njcm9sbCwgMCBmb3IgY29udGludW91c2x5IGF1dG9zY3JvbGxpbmcgKi9cbiAgYXV0b3BsYXlJbnRlcnZhbDogbnVtYmVyO1xuICAvKiogU2Nyb2xsIHNwZWVkIGZvciBjb250aW51b3VzbHkgYXV0b3Njcm9sbGluZyAqL1xuICBhdXRvcGxheVZlbG9jaXR5OiBudW1iZXI7XG4gIC8qKiBJY29uIHNvdXJjZSB1cmwgZm9yIHRoZSBwcmV2IHNsaWRlIGljb24gYnV0dG9uICovXG4gIGNvbnRyb2xQcmV2SWNvblNyYzogc3RyaW5nO1xuICAvKiogSWNvbiBzb3VyY2UgdXJsIGZvciB0aGUgbmV4dCBzbGlkZSBpY29uIGJ1dHRvbiAqL1xuICBjb250cm9sTmV4dEljb25TcmM6IHN0cmluZztcbiAgLyoqIEljb24gc291cmNlIHVybCBmb3IgdGhlIGluYWN0aXZlIGluZGljYXRvciAqL1xuICBpbmRpY2F0b3JJbmFjdGl2ZUljb25TcmM6IHN0cmluZztcbiAgLyoqIEljb24gc291cmNlIHVybCBmb3IgdGhlIGFjdGl2ZSBpbmRpY2F0b3IgKi9cbiAgaW5kaWNhdG9yQWN0aXZlSWNvblNyYzogc3RyaW5nO1xuICAvKiogU2xpZGUgYW5nbGUsIGNhbiBiZSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsICovXG4gIGFuZ2xlOiBcInZlcnRpY2FsXCIgfCBcImhvcml6b250YWxcIjtcbiAgLyoqIFBhdXNlIG9uIGF1dG9wbGF5ICh3aXRoIGludGVydmFsKSAqL1xuICBwYXVzZTogYm9vbGVhbjtcblxuICAvLyBSZXNwb25zaXZlIG9wdGlvbnNcbiAgeHM6IFJlc3BvbnNpdmVPcHRpb25zO1xuICBzbTogUmVzcG9uc2l2ZU9wdGlvbnM7XG4gIG1kOiBSZXNwb25zaXZlT3B0aW9ucztcbiAgbGc6IFJlc3BvbnNpdmVPcHRpb25zO1xuICB4bDogUmVzcG9uc2l2ZU9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBPcHRpb25zIHtcbiAgbmV4dDogQnM0U2xpZGVzaG93Q29tcG9uZW50W1wibmV4dFwiXTtcbiAgcHJldjogQnM0U2xpZGVzaG93Q29tcG9uZW50W1wicHJldlwiXTtcbiAgZ29UbzogQnM0U2xpZGVzaG93Q29tcG9uZW50W1wiZ29Ub1wiXTtcbiAgY29udHJvbHNQb3NpdGlvbkNsYXNzOiBzdHJpbmc7XG4gIGluZGljYXRvcnNQb3NpdGlvbkNsYXNzOiBzdHJpbmc7XG4gIGl0ZW1zOiBTbGlkZVtdO1xufVxuXG5leHBvcnQgY2xhc3MgQnM0U2xpZGVzaG93Q29tcG9uZW50IGV4dGVuZHMgVGVtcGxhdGVzQ29tcG9uZW50IHtcbiAgcHJvdGVjdGVkIHJlc2l6ZU9ic2VydmVyPzogYW55OyAvLyBUT0RPIHR5cGUgUmVzaXplT2JzZXJ2ZXI7XG5cbiAgcHJvdGVjdGVkIGdldCBzbGlkZXNob3dJbm5lcigpIHtcbiAgICBpZiAoIXRoaXMuX3NsaWRlc2hvd0lubmVyKSB7XG4gICAgICB0aGlzLl9zbGlkZXNob3dJbm5lciA9IHRoaXMucXVlcnlTZWxlY3RvcihTTElERVNIT1dfSU5ORVJfU0VMRUNUT1IpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3NsaWRlc2hvd0lubmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBDaGlsZCBlbGVtZW50IHdpdGggc2VsZWN0b3IgJHtTTElERVNIT1dfSU5ORVJfU0VMRUNUT1J9IG5vdCBmb3VuZCFgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2xpZGVzaG93SW5uZXI7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHNsaWRlRWxlbWVudHMoKSB7XG4gICAgaWYgKCF0aGlzLl9zbGlkZUVsZW1lbnRzKSB7XG4gICAgICB0aGlzLl9zbGlkZUVsZW1lbnRzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFNMSURFU19TRUxFQ1RPUik7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc2xpZGVFbGVtZW50cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2hpbGQgZWxlbWVudCB3aXRoIHNlbGVjdG9yICR7U0xJREVTX1NFTEVDVE9SfSBub3QgZm91bmQhYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NsaWRlRWxlbWVudHM7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGNvbnRyb2xzRWxlbWVudHMoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250cm9sc0VsZW1lbnRzKSB7XG4gICAgICB0aGlzLl9jb250cm9sc0VsZW1lbnRzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICBcIi5zbGlkZXNob3ctY29udHJvbC1wcmV2LCAuc2xpZGVzaG93LWNvbnRyb2wtbmV4dFwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHNFbGVtZW50cztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgaW5kaWNhdG9yc0VsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVzaG93LWluZGljYXRvcnNcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJtaW4td2lkdGhcIixcbiAgICAgIFwic2xpZGVzLXRvLXNob3dcIixcbiAgICAgIFwic2xpZGVzLXRvLXNjcm9sbFwiLFxuICAgICAgXCJjb250cm9sc1wiLFxuICAgICAgXCJjb250cm9scy1wb3NpdGlvblwiLFxuICAgICAgXCJkcmFnXCIsXG4gICAgICBcImF1dG9wbGF5XCIsXG4gICAgICBcImF1dG9wbGF5LWludGVydmFsXCIsXG4gICAgICBcImF1dG9wbGF5LXZlbG9jaXR5XCIsXG4gICAgICBcImNvbnRyb2wtcHJldi1pY29uLXNyY1wiLFxuICAgICAgXCJjb250cm9sLW5leHQtaWNvbi1zcmNcIixcbiAgICAgIFwiaW5kaWNhdG9yLWluYWN0aXZlLWljb24tc3JjXCIsXG4gICAgICBcImluZGljYXRvci1hY3RpdmUtaWNvbi1zcmNcIixcbiAgICAgIFwiYW5nbGVcIixcbiAgICAgIFwic2V0LWFjdGl2ZS1zbGlkZVwiLFxuICAgICAgXCJwYXVzZS1vbi1ob3ZlclwiLFxuICAgICAgXCJzdGlja3lcIixcbiAgICAgIFwiaW5kaWNhdG9yc1wiLFxuICAgICAgXCJpbmRpY2F0b3JzLXBvc2l0aW9uXCIsXG4gICAgICBcInBhdXNlXCIsXG5cbiAgICAgIFwic20tbWluLXdpZHRoXCIsXG4gICAgICBcInNtLXNsaWRlcy10by1zaG93XCIsXG4gICAgICBcInNtLXNsaWRlcy10by1zY3JvbGxcIixcbiAgICAgIFwic20tY29udHJvbHNcIixcbiAgICAgIFwic20tY29udHJvbHMtcG9zaXRpb25cIixcbiAgICAgIFwic20tZHJhZ1wiLFxuICAgICAgXCJzbS1hdXRvcGxheVwiLFxuICAgICAgXCJzbS1hdXRvcGxheS1pbnRlcnZhbFwiLFxuICAgICAgXCJzbS1hdXRvcGxheS12ZWxvY2l0eVwiLFxuICAgICAgXCJzbS1jb250cm9sLXByZXYtaWNvbi1zcmNcIixcbiAgICAgIFwic20tY29udHJvbC1uZXh0LWljb24tc3JjXCIsXG4gICAgICBcInNtLWluZGljYXRvci1pbmFjdGl2ZS1pY29uLXNyY1wiLFxuICAgICAgXCJzbS1pbmRpY2F0b3ItYWN0aXZlLWljb24tc3JjXCIsXG4gICAgICBcInNtLWFuZ2xlXCIsXG4gICAgICBcInNtLXNldC1hY3RpdmUtc2xpZGVcIixcbiAgICAgIFwic20tcGF1c2Utb24taG92ZXJcIixcbiAgICAgIFwic20tc3RpY2t5XCIsXG4gICAgICBcInNtLWluZGljYXRvcnNcIixcbiAgICAgIFwic20taW5kaWNhdG9ycy1wb3NpdGlvblwiLFxuICAgICAgXCJzbS1wYXVzZVwiLFxuXG4gICAgICBcIm1kLW1pbi13aWR0aFwiLFxuICAgICAgXCJtZC1zbGlkZXMtdG8tc2hvd1wiLFxuICAgICAgXCJtZC1zbGlkZXMtdG8tc2Nyb2xsXCIsXG4gICAgICBcIm1kLWNvbnRyb2xzXCIsXG4gICAgICBcIm1kLWNvbnRyb2xzLXBvc2l0aW9uXCIsXG4gICAgICBcIm1kLWRyYWdcIixcbiAgICAgIFwibWQtYXV0b3BsYXlcIixcbiAgICAgIFwibWQtYXV0b3BsYXktaW50ZXJ2YWxcIixcbiAgICAgIFwibWQtYXV0b3BsYXktdmVsb2NpdHlcIixcbiAgICAgIFwibWQtY29udHJvbC1wcmV2LWljb24tc3JjXCIsXG4gICAgICBcIm1kLWNvbnRyb2wtbmV4dC1pY29uLXNyY1wiLFxuICAgICAgXCJtZC1pbmRpY2F0b3ItaW5hY3RpdmUtaWNvbi1zcmNcIixcbiAgICAgIFwibWQtaW5kaWNhdG9yLWFjdGl2ZS1pY29uLXNyY1wiLFxuICAgICAgXCJtZC1hbmdsZVwiLFxuICAgICAgXCJtZC1zZXQtYWN0aXZlLXNsaWRlXCIsXG4gICAgICBcIm1kLXBhdXNlLW9uLWhvdmVyXCIsXG4gICAgICBcIm1kLXN0aWNreVwiLFxuICAgICAgXCJtZC1pbmRpY2F0b3JzXCIsXG4gICAgICBcInNtLWluZGljYXRvcnMtcG9zaXRpb25cIixcbiAgICAgIFwibWQtcGF1c2VcIixcblxuICAgICAgXCJsZy1taW4td2lkdGhcIixcbiAgICAgIFwibGctc2xpZGVzLXRvLXNob3dcIixcbiAgICAgIFwibGctc2xpZGVzLXRvLXNjcm9sbFwiLFxuICAgICAgXCJsZy1jb250cm9sc1wiLFxuICAgICAgXCJsZy1jb250cm9scy1wb3NpdGlvblwiLFxuICAgICAgXCJsZy1kcmFnXCIsXG4gICAgICBcImxnLWF1dG9wbGF5XCIsXG4gICAgICBcImxnLWF1dG9wbGF5LWludGVydmFsXCIsXG4gICAgICBcImxnLWF1dG9wbGF5LXZlbG9jaXR5XCIsXG4gICAgICBcImxnLWNvbnRyb2wtcHJldi1pY29uLXNyY1wiLFxuICAgICAgXCJsZy1jb250cm9sLW5leHQtaWNvbi1zcmNcIixcbiAgICAgIFwibGctaW5kaWNhdG9yLWluYWN0aXZlLWljb24tc3JjXCIsXG4gICAgICBcImxnLWluZGljYXRvci1hY3RpdmUtaWNvbi1zcmNcIixcbiAgICAgIFwibGctYW5nbGVcIixcbiAgICAgIFwibGctc2V0LWFjdGl2ZS1zbGlkZVwiLFxuICAgICAgXCJsZy1wYXVzZS1vbi1ob3ZlclwiLFxuICAgICAgXCJsZy1zdGlja3lcIixcbiAgICAgIFwibGctaW5kaWNhdG9yc1wiLFxuICAgICAgXCJsZy1pbmRpY2F0b3JzLXBvc2l0aW9uXCIsXG4gICAgICBcImxnLXBhdXNlXCIsXG5cbiAgICAgIFwieGwtbWluLXdpZHRoXCIsXG4gICAgICBcInhsLXNsaWRlcy10by1zaG93XCIsXG4gICAgICBcInhsLXNsaWRlcy10by1zY3JvbGxcIixcbiAgICAgIFwieGwtY29udHJvbHNcIixcbiAgICAgIFwieGwtY29udHJvbHMtcG9zaXRpb25cIixcbiAgICAgIFwieGwtZHJhZ1wiLFxuICAgICAgXCJ4bC1hdXRvcGxheVwiLFxuICAgICAgXCJ4bC1hdXRvcGxheS1pbnRlcnZhbFwiLFxuICAgICAgXCJ4bC1hdXRvcGxheS12ZWxvY2l0eVwiLFxuICAgICAgXCJ4bC1jb250cm9sLXByZXYtaWNvbi1zcmNcIixcbiAgICAgIFwieGwtY29udHJvbC1uZXh0LWljb24tc3JjXCIsXG4gICAgICBcInhsLWluZGljYXRvci1pbmFjdGl2ZS1pY29uLXNyY1wiLFxuICAgICAgXCJ4bC1pbmRpY2F0b3ItYWN0aXZlLWljb24tc3JjXCIsXG4gICAgICBcInhsLWFuZ2xlXCIsXG4gICAgICBcInhsLXNldC1hY3RpdmUtc2xpZGVcIixcbiAgICAgIFwieGwtcGF1c2Utb24taG92ZXJcIixcbiAgICAgIFwieGwtc3RpY2t5XCIsXG4gICAgICBcInhsLWluZGljYXRvcnNcIixcbiAgICAgIFwieGwtaW5kaWNhdG9ycy1wb3NpdGlvblwiLFxuICAgICAgXCJ4bC1wYXVzZVwiLFxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC1zbGlkZXNob3dcIjtcblxuICBwcm90ZWN0ZWQgdGVtcGxhdGVBdHRyaWJ1dGVzID0gW1xuICAgIHtcbiAgICAgIG5hbWU6IFwiY2xhc3NcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiaGFuZGxlXCIsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcInR5cGVcIixcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJhY3RpdmVcIixcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJpbmRleFwiLFxuICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICBdO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG5cbiAgcHJvdGVjdGVkIGRyYWdzY3JvbGxTZXJ2aWNlPzogRHJhZ3Njcm9sbDtcblxuICBwcm90ZWN0ZWQgY29udGludW91c0F1dG9wbGF5U2VydmljZT86IEF1dG9zY3JvbGw7XG5cbiAgcHJvdGVjdGVkIHNjcm9sbEV2ZW50c1NlcnZpY2U/OiBTY3JvbGxFdmVudHNTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBfc2xpZGVzaG93SW5uZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIF9zbGlkZUVsZW1lbnRzOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIF9jb250cm9sc0VsZW1lbnRzOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIF9pbmRpY2F0b3JzRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgdGVtcGxhdGVDb250cm9scyA9IHRlbXBsYXRlQ29udHJvbHM7XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlSW5kaWNhdG9ycyA9IHRlbXBsYXRlSW5kaWNhdG9ycztcblxuICBwcm90ZWN0ZWQgYXV0b3BsYXlJbnRlcnZhbEluZGV4OiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgY29udGludW91c0F1dG9wbGF5SW50ZXJ2YWxJbmRleDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIHJlc3VtZVRpbWVyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgcm91dGVyRXZlbnRzID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIm1haW5cIik7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgYnJlYWtwb2ludFxuICAgKi9cbiAgcHJvdGVjdGVkIGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQgPSBcInhzXCI7XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICAvLyBUZW1wbGF0ZSBtZXRob2RzXG4gICAgbmV4dDogdGhpcy5uZXh0LmJpbmQodGhpcyksXG4gICAgcHJldjogdGhpcy5wcmV2LmJpbmQodGhpcyksXG4gICAgZ29UbzogdGhpcy5nb1RvLmJpbmQodGhpcyksXG4gICAgLy8gVGVtcGxhdGUgcHJvcGVydGllc1xuICAgIGl0ZW1zOiBuZXcgQXJyYXk8U2xpZGU+KCksXG4gICAgLy8gT3B0aW9uc1xuICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgIGNvbnRyb2xzUG9zaXRpb246IFwiaW5zaWRlLW1pZGRsZVwiLFxuICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICBzdGlja3k6IGZhbHNlLFxuICAgIGluZGljYXRvcnM6IHRydWUsXG4gICAgaW5kaWNhdG9yc1Bvc2l0aW9uOiBcImluc2lkZS1ib3R0b21cIixcbiAgICBwYXVzZTogZmFsc2UsXG4gICAgZHJhZzogdHJ1ZSxcbiAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgYXV0b3BsYXlJbnRlcnZhbDogMCxcbiAgICBhdXRvcGxheVZlbG9jaXR5OiAwLjgsXG4gICAgY29udHJvbFByZXZJY29uU3JjOiBcIlwiLFxuICAgIGNvbnRyb2xOZXh0SWNvblNyYzogXCJcIixcbiAgICBpbmRpY2F0b3JBY3RpdmVJY29uU3JjOiBcIlwiLFxuICAgIGluZGljYXRvckluYWN0aXZlSWNvblNyYzogXCJcIixcbiAgICBhbmdsZTogXCJob3Jpem9udGFsXCIsXG5cbiAgICAvLyBSZXNwb25zaXZlIG9wdGlvbnNcbiAgICB4czoge1xuICAgICAgbWluV2lkdGg6IDAsXG4gICAgfSxcbiAgICBzbToge1xuICAgICAgbWluV2lkdGg6IDU3NixcbiAgICB9LFxuICAgIG1kOiB7XG4gICAgICBtaW5XaWR0aDogNzY4LFxuICAgIH0sXG4gICAgbGc6IHtcbiAgICAgIG1pbldpZHRoOiA5OTIsXG4gICAgfSxcbiAgICB4bDoge1xuICAgICAgbWluV2lkdGg6IDEyMDAsXG4gICAgfSxcblxuICAgIC8vIENsYXNzZXNcbiAgICBjb250cm9sc1Bvc2l0aW9uQ2xhc3M6IFwiXCIsXG4gICAgaW5kaWNhdG9yc1Bvc2l0aW9uQ2xhc3M6IFwiXCIsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBzZXQgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSB0aGlzLWJvdW5kIHZlcnNpb24gb25jZSwgc28gd2UgY2FuIGVhc2lseSBwYXNzIHRoZW0gdG8gRE9NIGV2ZW50IGhhbmRsZXJzIGFuZCByZW1vdmUgdGhlbSBhZ2FpbiBsYXRlclxuICAgIHRoaXMub25WaWV3Q2hhbmdlcyA9IHRoaXMub25WaWV3Q2hhbmdlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlZCA9IHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TY3JvbGwgPSB0aGlzLm9uU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNjcm9sbGVuZCA9IHRoaXMub25TY3JvbGxlbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VJbiA9IHRoaXMub25Nb3VzZUluLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlT3V0ID0gdGhpcy5vbk1vdXNlT3V0LmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogR28gdG8gbmV4dCBzbGlkZVxuICAgKi9cbiAgcHVibGljIG5leHQoKSB7XG4gICAgdGhpcy5zY3JvbGxUb05leHRTbGlkZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvIHRvIHByZXYgc2xpZGVcbiAgICovXG4gIHB1YmxpYyBwcmV2KCkge1xuICAgIHRoaXMuc2Nyb2xsVG9QcmV2U2xpZGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHbyB0byBzbGlkZSBieSBpbmRleFxuICAgKiBAcGFyYW0gaW5kZXhcbiAgICovXG4gIHB1YmxpYyBnb1RvKGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLnNldFNsaWRlUG9zaXRpb25zKCk7XG4gICAgbGV0IHRvcCA9IDA7XG4gICAgbGV0IGxlZnQgPSAwO1xuXG4gICAgaWYgKCF0aGlzLnNjb3BlLml0ZW1zW2luZGV4XSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFNsaWRlIHdpdGggaW5kZXggXCIke2luZGV4fVwiIG5vdCBmb3VuZCFgLFxuICAgICAgICB0aGlzLnNjb3BlLml0ZW1zW2luZGV4XVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY29wZS5hbmdsZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAvLyBDaGVjayBpZiB3ZSBkbyBub3QgbmVlZCB0byBzbGlkZVxuICAgICAgaWYgKHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLnBvc2l0aW9uLmNlbnRlclkgPT09IDApIHtcbiAgICAgICAgLy8gV2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRvcCA9XG4gICAgICAgIHRoaXMuc2xpZGVzaG93SW5uZXIuc2Nyb2xsVG9wICtcbiAgICAgICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0ucG9zaXRpb24uY2VudGVyWTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2hlY2sgaWYgd2UgZG8gbm90IG5lZWQgdG8gc2xpZGVcbiAgICAgIGlmICh0aGlzLnNjb3BlLml0ZW1zW2luZGV4XS5wb3NpdGlvbi5jZW50ZXJYID09PSAwKSB7XG4gICAgICAgIC8vIFdlIGRvIG5vdCBuZWVkIHRvIHNjcm9sbFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZWZ0ID1cbiAgICAgICAgdGhpcy5zbGlkZXNob3dJbm5lci5zY3JvbGxMZWZ0ICtcbiAgICAgICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0ucG9zaXRpb24uY2VudGVyWDtcbiAgICB9XG5cbiAgICAvLyBUT0RPIG5ldyBzY3JvbGwgc2VydmljZSBiYXNlZCBvbiBodHRwczovL3Bhd2VsZ3J6eWJlay5jb20vcGFnZS1zY3JvbGwtaW4tdmFuaWxsYS1qYXZhc2NyaXB0L1xuICAgIGlmICh0aGlzLnNsaWRlRWxlbWVudHNbaW5kZXhdKSB7XG4gICAgICAvLyBpZiBpcyBpcyB3aW5kb3cgdG8gc2Nyb2xsXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2xpZGVzaG93SW5uZXIuc2Nyb2xsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhpcy5zbGlkZXNob3dJbm5lci5zY3JvbGwoe1xuICAgICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgdG9wLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnNjb3BlLmFuZ2xlID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICB0aGlzLnNsaWRlc2hvd0lubmVyLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNsaWRlc2hvd0lubmVyLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNldE9wdGlvbnMoXG4gICAgZGVzdDogUmVzcG9uc2l2ZU9wdGlvbnMgfCBPcHRpb25zLFxuICAgIHNvdXJjZTogUmVzcG9uc2l2ZU9wdGlvbnMgfCBPcHRpb25zXG4gICkge1xuICAgIGRlc3Quc2xpZGVzVG9TY3JvbGwgPVxuICAgICAgdHlwZW9mIHNvdXJjZS5zbGlkZXNUb1Njcm9sbCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2Uuc2xpZGVzVG9TY3JvbGwpXG4gICAgICAgIDogZGVzdC5zbGlkZXNUb1Njcm9sbDtcbiAgICBkZXN0LmNvbnRyb2xzID1cbiAgICAgIHR5cGVvZiBzb3VyY2UuY29udHJvbHMgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLmNvbnRyb2xzKVxuICAgICAgICA6IGRlc3QuY29udHJvbHM7XG4gICAgZGVzdC5jb250cm9sc1Bvc2l0aW9uID1cbiAgICAgIHR5cGVvZiBzb3VyY2UuY29udHJvbHNQb3NpdGlvbiAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UuY29udHJvbHNQb3NpdGlvbilcbiAgICAgICAgOiBkZXN0LmNvbnRyb2xzUG9zaXRpb247XG4gICAgZGVzdC5kcmFnID1cbiAgICAgIHR5cGVvZiBzb3VyY2UuZHJhZyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UuZHJhZylcbiAgICAgICAgOiBkZXN0LmRyYWc7XG4gICAgZGVzdC5hdXRvcGxheSA9XG4gICAgICB0eXBlb2Ygc291cmNlLmF1dG9wbGF5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gY2xvbmUoZmFsc2UsIHNvdXJjZS5hdXRvcGxheSlcbiAgICAgICAgOiBkZXN0LmF1dG9wbGF5O1xuICAgIGRlc3QuYXV0b3BsYXlJbnRlcnZhbCA9XG4gICAgICB0eXBlb2Ygc291cmNlLmF1dG9wbGF5SW50ZXJ2YWwgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLmF1dG9wbGF5SW50ZXJ2YWwpXG4gICAgICAgIDogZGVzdC5hdXRvcGxheUludGVydmFsO1xuICAgIGRlc3QuYXV0b3BsYXlWZWxvY2l0eSA9XG4gICAgICB0eXBlb2Ygc291cmNlLmF1dG9wbGF5VmVsb2NpdHkgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLmF1dG9wbGF5VmVsb2NpdHkpXG4gICAgICAgIDogZGVzdC5hdXRvcGxheVZlbG9jaXR5O1xuICAgIGRlc3QuY29udHJvbFByZXZJY29uU3JjID1cbiAgICAgIHR5cGVvZiBzb3VyY2UuY29udHJvbFByZXZJY29uU3JjICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gY2xvbmUoZmFsc2UsIHNvdXJjZS5jb250cm9sUHJldkljb25TcmMpXG4gICAgICAgIDogZGVzdC5jb250cm9sUHJldkljb25TcmM7XG4gICAgZGVzdC5jb250cm9sTmV4dEljb25TcmMgPVxuICAgICAgdHlwZW9mIHNvdXJjZS5jb250cm9sTmV4dEljb25TcmMgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLmNvbnRyb2xOZXh0SWNvblNyYylcbiAgICAgICAgOiBkZXN0LmNvbnRyb2xOZXh0SWNvblNyYztcbiAgICBkZXN0LmluZGljYXRvckFjdGl2ZUljb25TcmMgPVxuICAgICAgdHlwZW9mIHNvdXJjZS5pbmRpY2F0b3JBY3RpdmVJY29uU3JjICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gY2xvbmUoZmFsc2UsIHNvdXJjZS5pbmRpY2F0b3JBY3RpdmVJY29uU3JjKVxuICAgICAgICA6IGRlc3QuaW5kaWNhdG9yQWN0aXZlSWNvblNyYztcbiAgICBkZXN0LmluZGljYXRvckluYWN0aXZlSWNvblNyYyA9XG4gICAgICB0eXBlb2Ygc291cmNlLmluZGljYXRvckluYWN0aXZlSWNvblNyYyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UuaW5kaWNhdG9ySW5hY3RpdmVJY29uU3JjKVxuICAgICAgICA6IGRlc3QuaW5kaWNhdG9ySW5hY3RpdmVJY29uU3JjO1xuICAgIGRlc3QuYW5nbGUgPVxuICAgICAgdHlwZW9mIHNvdXJjZS5hbmdsZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UuYW5nbGUpXG4gICAgICAgIDogZGVzdC5hbmdsZTtcbiAgICBkZXN0LnBhdXNlT25Ib3ZlciA9XG4gICAgICB0eXBlb2Ygc291cmNlLnBhdXNlT25Ib3ZlciAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UucGF1c2VPbkhvdmVyKVxuICAgICAgICA6IGRlc3QucGF1c2VPbkhvdmVyO1xuICAgIGRlc3Quc3RpY2t5ID1cbiAgICAgIHR5cGVvZiBzb3VyY2Uuc3RpY2t5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gY2xvbmUoZmFsc2UsIHNvdXJjZS5zdGlja3kpXG4gICAgICAgIDogZGVzdC5zdGlja3k7XG4gICAgZGVzdC5pbmRpY2F0b3JzID1cbiAgICAgIHR5cGVvZiBzb3VyY2UuaW5kaWNhdG9ycyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IGNsb25lKGZhbHNlLCBzb3VyY2UuaW5kaWNhdG9ycylcbiAgICAgICAgOiBkZXN0LmluZGljYXRvcnM7XG4gICAgZGVzdC5pbmRpY2F0b3JzUG9zaXRpb24gPVxuICAgICAgdHlwZW9mIHNvdXJjZS5pbmRpY2F0b3JzUG9zaXRpb24gIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLmluZGljYXRvcnNQb3NpdGlvbilcbiAgICAgICAgOiBkZXN0LmluZGljYXRvcnNQb3NpdGlvbjtcbiAgICBkZXN0LnBhdXNlID1cbiAgICAgIHR5cGVvZiBzb3VyY2UucGF1c2UgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBjbG9uZShmYWxzZSwgc291cmNlLnBhdXNlKVxuICAgICAgICA6IGRlc3QucGF1c2U7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0T3B0aW9uc0lmVW5kZWZpbmVkKFxuICAgIGRlc3Q6IFJlc3BvbnNpdmVPcHRpb25zIHwgT3B0aW9ucyxcbiAgICBzb3VyY2U6IFJlc3BvbnNpdmVPcHRpb25zIHwgT3B0aW9uc1xuICApIHtcbiAgICBkZXN0LnNsaWRlc1RvU2Nyb2xsID1cbiAgICAgIHR5cGVvZiBkZXN0LnNsaWRlc1RvU2Nyb2xsID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gc291cmNlLnNsaWRlc1RvU2Nyb2xsXG4gICAgICAgIDogZGVzdC5zbGlkZXNUb1Njcm9sbDtcbiAgICBkZXN0LmNvbnRyb2xzID1cbiAgICAgIHR5cGVvZiBkZXN0LmNvbnRyb2xzID09PSBcInVuZGVmaW5lZFwiID8gc291cmNlLmNvbnRyb2xzIDogZGVzdC5jb250cm9scztcbiAgICBkZXN0LmNvbnRyb2xzUG9zaXRpb24gPVxuICAgICAgdHlwZW9mIGRlc3QuY29udHJvbHNQb3NpdGlvbiA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5jb250cm9sc1Bvc2l0aW9uXG4gICAgICAgIDogZGVzdC5jb250cm9sc1Bvc2l0aW9uO1xuICAgIGRlc3QuZHJhZyA9IHR5cGVvZiBkZXN0LmRyYWcgPT09IFwidW5kZWZpbmVkXCIgPyBzb3VyY2UuZHJhZyA6IGRlc3QuZHJhZztcbiAgICBkZXN0LmF1dG9wbGF5ID1cbiAgICAgIHR5cGVvZiBkZXN0LmF1dG9wbGF5ID09PSBcInVuZGVmaW5lZFwiID8gc291cmNlLmF1dG9wbGF5IDogZGVzdC5hdXRvcGxheTtcbiAgICBkZXN0LmF1dG9wbGF5SW50ZXJ2YWwgPVxuICAgICAgdHlwZW9mIGRlc3QuYXV0b3BsYXlJbnRlcnZhbCA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5hdXRvcGxheUludGVydmFsXG4gICAgICAgIDogZGVzdC5hdXRvcGxheUludGVydmFsO1xuICAgIGRlc3QuYXV0b3BsYXlWZWxvY2l0eSA9XG4gICAgICB0eXBlb2YgZGVzdC5hdXRvcGxheVZlbG9jaXR5ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gc291cmNlLmF1dG9wbGF5VmVsb2NpdHlcbiAgICAgICAgOiBkZXN0LmF1dG9wbGF5VmVsb2NpdHk7XG4gICAgZGVzdC5jb250cm9sUHJldkljb25TcmMgPVxuICAgICAgdHlwZW9mIGRlc3QuY29udHJvbFByZXZJY29uU3JjID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gc291cmNlLmNvbnRyb2xQcmV2SWNvblNyY1xuICAgICAgICA6IGRlc3QuY29udHJvbFByZXZJY29uU3JjO1xuICAgIGRlc3QuY29udHJvbE5leHRJY29uU3JjID1cbiAgICAgIHR5cGVvZiBkZXN0LmNvbnRyb2xOZXh0SWNvblNyYyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5jb250cm9sTmV4dEljb25TcmNcbiAgICAgICAgOiBkZXN0LmNvbnRyb2xOZXh0SWNvblNyYztcbiAgICBkZXN0LmluZGljYXRvckFjdGl2ZUljb25TcmMgPVxuICAgICAgdHlwZW9mIGRlc3QuaW5kaWNhdG9yQWN0aXZlSWNvblNyYyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5pbmRpY2F0b3JBY3RpdmVJY29uU3JjXG4gICAgICAgIDogZGVzdC5pbmRpY2F0b3JBY3RpdmVJY29uU3JjO1xuICAgIGRlc3QuaW5kaWNhdG9ySW5hY3RpdmVJY29uU3JjID1cbiAgICAgIHR5cGVvZiBkZXN0LmluZGljYXRvckluYWN0aXZlSWNvblNyYyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5pbmRpY2F0b3JJbmFjdGl2ZUljb25TcmNcbiAgICAgICAgOiBkZXN0LmluZGljYXRvckluYWN0aXZlSWNvblNyYztcbiAgICBkZXN0LmFuZ2xlID0gdHlwZW9mIGRlc3QuYW5nbGUgPT09IFwidW5kZWZpbmVkXCIgPyBzb3VyY2UuYW5nbGUgOiBkZXN0LmFuZ2xlO1xuICAgIGRlc3QucGF1c2VPbkhvdmVyID1cbiAgICAgIHR5cGVvZiBkZXN0LnBhdXNlT25Ib3ZlciA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHNvdXJjZS5wYXVzZU9uSG92ZXJcbiAgICAgICAgOiBkZXN0LnBhdXNlT25Ib3ZlcjtcbiAgICBkZXN0LnN0aWNreSA9XG4gICAgICB0eXBlb2YgZGVzdC5zdGlja3kgPT09IFwidW5kZWZpbmVkXCIgPyBzb3VyY2Uuc3RpY2t5IDogZGVzdC5zdGlja3k7XG4gICAgZGVzdC5pbmRpY2F0b3JzID1cbiAgICAgIHR5cGVvZiBkZXN0LmluZGljYXRvcnMgPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBzb3VyY2UuaW5kaWNhdG9yc1xuICAgICAgICA6IGRlc3QuaW5kaWNhdG9ycztcbiAgICBkZXN0LmluZGljYXRvcnNQb3NpdGlvbiA9XG4gICAgICB0eXBlb2YgZGVzdC5pbmRpY2F0b3JzUG9zaXRpb24gPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBzb3VyY2UuaW5kaWNhdG9yc1Bvc2l0aW9uXG4gICAgICAgIDogZGVzdC5pbmRpY2F0b3JzUG9zaXRpb247XG4gICAgZGVzdC5wYXVzZSA9IHR5cGVvZiBkZXN0LnBhdXNlID09PSBcInVuZGVmaW5lZFwiID8gc291cmNlLnBhdXNlIDogZGVzdC5wYXVzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0UmVzcG9uc2l2ZU9wdGlvbnMoKSB7XG4gICAgdGhpcy5zZXRPcHRpb25zKHRoaXMuc2NvcGUueHMsIHRoaXMuc2NvcGUpO1xuICAgIHRoaXMuc2V0T3B0aW9uc0lmVW5kZWZpbmVkKHRoaXMuc2NvcGUuc20sIHRoaXMuc2NvcGUueHMpO1xuICAgIHRoaXMuc2V0T3B0aW9uc0lmVW5kZWZpbmVkKHRoaXMuc2NvcGUubWQsIHRoaXMuc2NvcGUuc20pO1xuICAgIHRoaXMuc2V0T3B0aW9uc0lmVW5kZWZpbmVkKHRoaXMuc2NvcGUubGcsIHRoaXMuc2NvcGUubWQpO1xuICAgIHRoaXMuc2V0T3B0aW9uc0lmVW5kZWZpbmVkKHRoaXMuc2NvcGUueGwsIHRoaXMuc2NvcGUubGcpO1xuICAgIHRoaXMuYnJlYWtwb2ludCA9IHRoaXMuZ2V0QnJlYWtwb2ludCgpO1xuICAgIHRoaXMuc2V0T3B0aW9uc0J5QnJlYWtwb2ludCh0aGlzLmJyZWFrcG9pbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldENvbnRyb2xzT3B0aW9ucygpIHtcbiAgICBjb25zdCB4c0NvbnRyb2xzUG9zaXRpb24gPSB0aGlzLnNjb3BlLnhzLmNvbnRyb2xzUG9zaXRpb24/LnNwbGl0KFxuICAgICAgXCItXCJcbiAgICApIGFzIENvbnRyb2xzUG9zaXRpb25bXTtcbiAgICBjb25zdCBzbUNvbnRyb2xzUG9zaXRpb24gPSB0aGlzLnNjb3BlLnNtLmNvbnRyb2xzUG9zaXRpb24/LnNwbGl0KFxuICAgICAgXCItXCJcbiAgICApIGFzIENvbnRyb2xzUG9zaXRpb25bXTtcbiAgICBjb25zdCBtZENvbnRyb2xzUG9zaXRpb24gPSB0aGlzLnNjb3BlLm1kLmNvbnRyb2xzUG9zaXRpb24/LnNwbGl0KFxuICAgICAgXCItXCJcbiAgICApIGFzIENvbnRyb2xzUG9zaXRpb25bXTtcbiAgICBjb25zdCBsZ0NvbnRyb2xzUG9zaXRpb24gPSB0aGlzLnNjb3BlLmxnLmNvbnRyb2xzUG9zaXRpb24/LnNwbGl0KFxuICAgICAgXCItXCJcbiAgICApIGFzIENvbnRyb2xzUG9zaXRpb25bXTtcbiAgICBjb25zdCB4bENvbnRyb2xzUG9zaXRpb24gPSB0aGlzLnNjb3BlLnhsLmNvbnRyb2xzUG9zaXRpb24/LnNwbGl0KFxuICAgICAgXCItXCJcbiAgICApIGFzIENvbnRyb2xzUG9zaXRpb25bXTtcblxuICAgIHRoaXMuc2NvcGUuY29udHJvbHNQb3NpdGlvbkNsYXNzID0gYGNvbnRyb2wtJHt4c0NvbnRyb2xzUG9zaXRpb25bMF19IGNvbnRyb2wtJHt4c0NvbnRyb2xzUG9zaXRpb25bMV19IGNvbnRyb2wtc20tJHtzbUNvbnRyb2xzUG9zaXRpb25bMF19IGNvbnRyb2wtc20tJHtzbUNvbnRyb2xzUG9zaXRpb25bMV19IGNvbnRyb2wtbWQtJHttZENvbnRyb2xzUG9zaXRpb25bMF19IGNvbnRyb2wtbWQtJHttZENvbnRyb2xzUG9zaXRpb25bMV19IGNvbnRyb2wtbGctJHtsZ0NvbnRyb2xzUG9zaXRpb25bMF19IGNvbnRyb2wtbGctJHtsZ0NvbnRyb2xzUG9zaXRpb25bMV19IGNvbnRyb2wteGwtJHt4bENvbnRyb2xzUG9zaXRpb25bMF19IGNvbnRyb2wteGwtJHt4bENvbnRyb2xzUG9zaXRpb25bMV19YDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRJbmRpY2F0b3JzT3B0aW9ucygpIHtcbiAgICBjb25zdCB4c0luZGljYXRvcnNQb3NpdGlvbiA9IHRoaXMuc2NvcGUueHMuaW5kaWNhdG9yc1Bvc2l0aW9uPy5zcGxpdChcbiAgICAgIFwiLVwiXG4gICAgKSBhcyBJbmRpY2F0b3JzUG9zaXRpb25bXTtcbiAgICBjb25zdCBzbUluZGljYXRvcnNQb3NpdGlvbiA9IHRoaXMuc2NvcGUuc20uaW5kaWNhdG9yc1Bvc2l0aW9uPy5zcGxpdChcbiAgICAgIFwiLVwiXG4gICAgKSBhcyBJbmRpY2F0b3JzUG9zaXRpb25bXTtcbiAgICBjb25zdCBtZEluZGljYXRvcnNQb3NpdGlvbiA9IHRoaXMuc2NvcGUubWQuaW5kaWNhdG9yc1Bvc2l0aW9uPy5zcGxpdChcbiAgICAgIFwiLVwiXG4gICAgKSBhcyBJbmRpY2F0b3JzUG9zaXRpb25bXTtcbiAgICBjb25zdCBsZ0luZGljYXRvcnNQb3NpdGlvbiA9IHRoaXMuc2NvcGUubGcuaW5kaWNhdG9yc1Bvc2l0aW9uPy5zcGxpdChcbiAgICAgIFwiLVwiXG4gICAgKSBhcyBJbmRpY2F0b3JzUG9zaXRpb25bXTtcbiAgICBjb25zdCB4bEluZGljYXRvcnNQb3NpdGlvbiA9IHRoaXMuc2NvcGUueGwuaW5kaWNhdG9yc1Bvc2l0aW9uPy5zcGxpdChcbiAgICAgIFwiLVwiXG4gICAgKSBhcyBJbmRpY2F0b3JzUG9zaXRpb25bXTtcblxuICAgIHRoaXMuc2NvcGUuaW5kaWNhdG9yc1Bvc2l0aW9uQ2xhc3MgPSBgaW5kaWNhdG9ycy0ke3hzSW5kaWNhdG9yc1Bvc2l0aW9uWzBdfSBpbmRpY2F0b3JzLSR7eHNJbmRpY2F0b3JzUG9zaXRpb25bMV19IGluZGljYXRvcnMtc20tJHtzbUluZGljYXRvcnNQb3NpdGlvblswXX0gaW5kaWNhdG9ycy1zbS0ke3NtSW5kaWNhdG9yc1Bvc2l0aW9uWzFdfSBpbmRpY2F0b3JzLW1kLSR7bWRJbmRpY2F0b3JzUG9zaXRpb25bMF19IGluZGljYXRvcnMtbWQtJHttZEluZGljYXRvcnNQb3NpdGlvblsxXX0gaW5kaWNhdG9ycy1sZy0ke2xnSW5kaWNhdG9yc1Bvc2l0aW9uWzBdfSBpbmRpY2F0b3JzLWxnLSR7bGdJbmRpY2F0b3JzUG9zaXRpb25bMV19IGluZGljYXRvcnMteGwtJHt4bEluZGljYXRvcnNQb3NpdGlvblswXX0gaW5kaWNhdG9ycy14bC0ke3hsSW5kaWNhdG9yc1Bvc2l0aW9uWzFdfWA7XG4gIH1cblxuICAvLyBUT0RPIGNyZWF0ZSBpbmRlcGVuZGVudCBiczQgYnJlYWtwb2ludCBzZXJ2aWNlXG4gIHByb3RlY3RlZCBnZXRCcmVha3BvaW50KCk6IEJyZWFrcG9pbnQge1xuICAgIGNvbnN0IHNpemUgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAvLyBYU1xuICAgIGlmIChzaXplID49IHRoaXMuc2NvcGUueHMubWluV2lkdGggJiYgc2l6ZSA8IHRoaXMuc2NvcGUuc20ubWluV2lkdGgpIHtcbiAgICAgIHJldHVybiBcInhzXCI7XG4gICAgfVxuICAgIC8vIFNNXG4gICAgaWYgKHNpemUgPj0gdGhpcy5zY29wZS5zbS5taW5XaWR0aCAmJiBzaXplIDwgdGhpcy5zY29wZS5tZC5taW5XaWR0aCkge1xuICAgICAgcmV0dXJuIFwic21cIjtcbiAgICB9XG4gICAgLy8gTURcbiAgICBpZiAoc2l6ZSA+PSB0aGlzLnNjb3BlLm1kLm1pbldpZHRoICYmIHNpemUgPCB0aGlzLnNjb3BlLmxnLm1pbldpZHRoKSB7XG4gICAgICByZXR1cm4gXCJtZFwiO1xuICAgIH1cbiAgICAvLyBMR1xuICAgIGlmIChzaXplID49IHRoaXMuc2NvcGUubGcubWluV2lkdGggJiYgc2l6ZSA8IHRoaXMuc2NvcGUueGwubWluV2lkdGgpIHtcbiAgICAgIHJldHVybiBcImxnXCI7XG4gICAgfVxuICAgIC8vIFhMXG4gICAgcmV0dXJuIFwieGxcIjtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRPcHRpb25zQnlCcmVha3BvaW50KGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQpIHtcbiAgICB0aGlzLnNldE9wdGlvbnModGhpcy5zY29wZSwgdGhpcy5zY29wZVticmVha3BvaW50XSk7XG4gICAgaWYgKHRoaXMuc2NvcGUuYXV0b3BsYXkpIHtcbiAgICAgIHRoaXMuZW5hYmxlQXV0b3BsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlQXV0b3BsYXkoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2NvcGUuZHJhZykge1xuICAgICAgdGhpcy5lbmFibGVEZXNrdG9wRHJhZ3Njcm9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGVEZXNrdG9wRHJhZ3Njcm9sbCgpO1xuICAgIH1cbiAgICB0aGlzLnNldENvbnRyb2xzT3B0aW9ucygpO1xuICAgIHRoaXMuc2V0SW5kaWNhdG9yc09wdGlvbnMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkJyZWFrcG9pbnRDaGFuZ2VzKCkge1xuICAgIHRoaXMuc2V0T3B0aW9uc0J5QnJlYWtwb2ludCh0aGlzLmJyZWFrcG9pbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9vblZpZXdDaGFuZ2VzKCkge1xuICAgIHRoaXMuZGVidWcoXCJvblZpZXdDaGFuZ2VzXCIpO1xuICAgIGNvbnN0IG5ld0JyZWFrcG9pbnQgPSB0aGlzLmdldEJyZWFrcG9pbnQoKTtcbiAgICBpZiAobmV3QnJlYWtwb2ludCAhPT0gdGhpcy5icmVha3BvaW50KSB7XG4gICAgICB0aGlzLmJyZWFrcG9pbnQgPSBuZXdCcmVha3BvaW50O1xuICAgICAgdGhpcy5vbkJyZWFrcG9pbnRDaGFuZ2VzKCk7XG4gICAgfVxuICAgIHRoaXMuc2V0U2xpZGVQb3NpdGlvbnMoKTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc2V0Q2VudGVyZWRTbGlkZUFjdGl2ZSgpO1xuICAgIGlmICh0aGlzLnNjb3BlLnN0aWNreSkge1xuICAgICAgdGhpcy5nb1RvKGluZGV4KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb25WaWV3Q2hhbmdlcyA9IGRlYm91bmNlKHRoaXMuX29uVmlld0NoYW5nZXMuYmluZCh0aGlzKSk7XG5cbiAgcHJvdGVjdGVkIG9uVmlzaWJpbGl0eUNoYW5nZWQoZXZlbnQ6IEN1c3RvbUV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmRldGFpbC52aXNpYmxlKSB7XG4gICAgICB0aGlzLmRyYWdzY3JvbGxTZXJ2aWNlPy5jaGVja0RyYWdnYWJsZSgpO1xuICAgICAgdGhpcy5jb250aW51b3VzQXV0b3BsYXlTZXJ2aWNlPy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX29uU2Nyb2xsKCkge1xuICAgIC8vIHRoaXMuc2V0U2xpZGVQb3NpdGlvbnMoKTtcbiAgICAvLyB0aGlzLnNldENlbnRlcmVkU2xpZGVBY3RpdmUoKTtcbiAgICB0aGlzLnJlc3VtZSgxMDAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNjcm9sbCA9IGRlYm91bmNlKHRoaXMuX29uU2Nyb2xsLmJpbmQodGhpcykpO1xuXG4gIHByb3RlY3RlZCBvblNjcm9sbGVuZCgpIHtcbiAgICB0aGlzLnNldFNsaWRlUG9zaXRpb25zKCk7XG4gICAgdGhpcy5zZXRDZW50ZXJlZFNsaWRlQWN0aXZlKCk7XG4gICAgaWYgKHRoaXMuc2NvcGUuc3RpY2t5KSB7XG4gICAgICB0aGlzLnNjcm9sbFRvTmVhcmVzdFNsaWRlKCk7XG4gICAgfVxuICAgIHRoaXMucmVzdW1lKDEwMDApO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uTW91c2VJbigpIHtcbiAgICBpZiAodGhpcy5zY29wZS5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMuc2NvcGUucGF1c2UgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdXNlT3V0KCkge1xuICAgIHRoaXMucmVzdW1lKDIwMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX29uTW91c2VVcCgpIHtcbiAgICB0aGlzLnJlc3VtZSgxMDAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdXNlVXAgPSB0aHJvdHRsZSh0aGlzLl9vbk1vdXNlVXAuYmluZCh0aGlzKSk7XG5cbiAgLyoqIFJlc3VtZSBpZiB0aGlzIG1ldGhvZCB3YXMgbm90IGNhbGxlZCB1cCBmb3IgW2RlbGF5XSBtaWxsaXNlY29uZHMgKi9cbiAgcHJvdGVjdGVkIHJlc3VtZShkZWxheSA9IDEwMDApIHtcbiAgICBpZiAoIXRoaXMuc2NvcGUucGF1c2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXN1bWVUaW1lciAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzdW1lVGltZXIpO1xuICAgICAgdGhpcy5yZXN1bWVUaW1lciA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5yZXN1bWVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2V0U2xpZGVQb3NpdGlvbnMoKTtcbiAgICAgIHRoaXMuc2NvcGUucGF1c2UgPSBmYWxzZTtcbiAgICB9LCBkZWxheSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICByZXR1cm4gdGhpcy5pbml0KEJzNFNsaWRlc2hvd0NvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMucm91dGVyRXZlbnRzLm9uKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMub25CcmVha3BvaW50Q2hhbmdlcywgdGhpcyk7XG5cbiAgICAvLyBUT0RPIHR5cGVzXG4gICAgLy8gV2hhdCBlbGVtZW50IHJlc2l6ZVxuICAgIGlmICgod2luZG93IGFzIGFueSkuUmVzaXplT2JzZXJ2ZXIgYXMgYW55KSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3ICh3aW5kb3cgYXMgYW55KS5SZXNpemVPYnNlcnZlcihcbiAgICAgICAgdGhpcy5vblZpZXdDaGFuZ2VzXG4gICAgICApO1xuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlcj8ub2JzZXJ2ZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgd2F0Y2ggd2luZG93IHJlc2l6ZVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblZpZXdDaGFuZ2VzLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3VzdG9tIGV2ZW50IHRyaWdnZXJlZCBieSBzb21lIHBhcmVudCBjb21wb25lbnRzIHdoZW4gdGhpcyBjb21wb25lbnQgY2hhbmdlcyBoaXMgdmlzaWJpbGl0eSwgZS5nLiB0cmlnZ2VyZWQgaW4gdGhlIGJzNC10YWJzIGNvbXBvbmVudFxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwidmlzaWJpbGl0eS1jaGFuZ2VkXCIgYXMgYW55LFxuICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2VkXG4gICAgKTtcblxuICAgIHRoaXMuc2xpZGVzaG93SW5uZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMuc2xpZGVzaG93SW5uZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZGVkXCIsIHRoaXMub25TY3JvbGxlbmQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUluLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIHRoaXMub25Nb3VzZUluLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCB0aGlzLm9uTW91c2VJbiwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vbk1vdXNlSW4sIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIHRoaXMub25Nb3VzZU91dCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlT3V0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgdGhpcy5vbk1vdXNlT3V0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5vbk1vdXNlVXAsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vbk1vdXNlVXAsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgdGhpcy5vbk1vdXNlVXAsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAvLyBTZWUgU2Nyb2xsRXZlbnRzU2VydmljZSBmb3IgdGhpcyBldmVudFxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZGVkXCIsIHRoaXMub25Nb3VzZVVwLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgICAvLyBpbml0aWFsXG4gICAgdGhpcy5vblZpZXdDaGFuZ2VzKCk7XG4gICAgLy8gdGhpcy5vblNjcm9sbCgpO1xuICAgIHRoaXMub25TY3JvbGxlbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLnJvdXRlckV2ZW50cy5vZmYoXCJuZXdQYWdlUmVhZHlcIiwgdGhpcy5vbkJyZWFrcG9pbnRDaGFuZ2VzLCB0aGlzKTtcblxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25WaWV3Q2hhbmdlcyk7XG5cbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyPy51bm9ic2VydmUodGhpcyk7XG5cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcInZpc2liaWxpdHktY2hhbmdlZFwiIGFzIGFueSxcbiAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlZFxuICAgICk7XG5cbiAgICB0aGlzLnNsaWRlc2hvd0lubmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgdGhpcy5zbGlkZXNob3dJbm5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsZW5kZWRcIiwgdGhpcy5vblNjcm9sbGVuZCk7XG5cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUluKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5vbk1vdXNlSW4pO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgdGhpcy5vbk1vdXNlSW4pO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vbk1vdXNlSW4pO1xuXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgdGhpcy5vbk1vdXNlT3V0KTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZU91dCk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgdGhpcy5vbk1vdXNlT3V0KTtcblxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgLy8gU2VlIFNjcm9sbEV2ZW50c1NlcnZpY2UgZm9yIHRoaXMgZXZlbnRcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRlZFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmluaXRTbGlkZXNob3dJbm5lcigpO1xuICAgIHRoaXMuaW5pdFJlc3BvbnNpdmVPcHRpb25zKCk7XG4gICAgLy8gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0U2xpZGVzaG93SW5uZXIoKSB7XG4gICAgdGhpcy5pbml0U2xpZGVzaG93SW5uZXJTbGlkZXMoKTtcblxuICAgIHRoaXMuc2Nyb2xsRXZlbnRzU2VydmljZSA9IG5ldyBTY3JvbGxFdmVudHNTZXJ2aWNlKHRoaXMuc2xpZGVzaG93SW5uZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGVuYWJsZURlc2t0b3BEcmFnc2Nyb2xsKCkge1xuICAgIGlmICghdGhpcy5kcmFnc2Nyb2xsU2VydmljZSkge1xuICAgICAgY29uc3QgZHJhZ3Njcm9sbE9wdGlvbnM6IERyYWdzY3JvbGxPcHRpb25zID0geyBkZXRlY3RHbG9iYWxNb3ZlOiB0cnVlIH07XG4gICAgICB0aGlzLmRyYWdzY3JvbGxTZXJ2aWNlID0gbmV3IERyYWdzY3JvbGwoXG4gICAgICAgIHRoaXMuc2xpZGVzaG93SW5uZXIsXG4gICAgICAgIGRyYWdzY3JvbGxPcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNhYmxlRGVza3RvcERyYWdzY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuZHJhZ3Njcm9sbFNlcnZpY2UpIHtcbiAgICAgIHRoaXMuZHJhZ3Njcm9sbFNlcnZpY2UuZGVzdHJveSgpO1xuICAgICAgdGhpcy5kcmFnc2Nyb2xsU2VydmljZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZW5hYmxlQ29udGludW91c0F1dG9wbGF5KCkge1xuICAgIGlmICghdGhpcy5jb250aW51b3VzQXV0b3BsYXlTZXJ2aWNlKSB7XG4gICAgICBjb25zdCBhdXRvc2Nyb2xsT3B0aW9uczogQXV0b3Njcm9sbE9wdGlvbnMgPSB7XG4gICAgICAgIHZlbG9jaXR5OiB0aGlzLnNjb3BlLmF1dG9wbGF5VmVsb2NpdHksXG4gICAgICAgIGFuZ2xlOiB0aGlzLnNjb3BlLmFuZ2xlLFxuICAgICAgICBwYXVzZU9uSG92ZXI6IHRoaXMuc2NvcGUucGF1c2VPbkhvdmVyLFxuICAgICAgfTtcbiAgICAgIHRoaXMuY29udGludW91c0F1dG9wbGF5U2VydmljZSA9IG5ldyBBdXRvc2Nyb2xsKFxuICAgICAgICB0aGlzLnNsaWRlc2hvd0lubmVyLFxuICAgICAgICBhdXRvc2Nyb2xsT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG4gICAgLy8gb24gY29udGludW91cyBhdXRvcGxheSB0aGUgc2Nyb2xsZW5kZWQgZXZlbnQgaXMgbmV2ZXIgdHJpZ2dlcmVkLCBzbyBjYWxsIHRoaXMgbWV0aG9kIGFsbCBgaW50ZXJ2YWxzVGltZU1zYCBtaWxsaXNlY29uZHMgYXMgYSBXT1JLQVJPVU5EXG4gICAgaWYgKCF0aGlzLmNvbnRpbnVvdXNBdXRvcGxheUludGVydmFsSW5kZXgpIHtcbiAgICAgIC8vIGludGVydmFscyBhcmUgZGVwZW5kaW5nIG9uIHRoZSBhdXRvc2Nyb2xsaW5nIHNwZWVkIChhdXRvcGxheVZlbG9jaXR5KVxuICAgICAgY29uc3QgaW50ZXJ2YWxzVGltZU1zID0gdGhpcy5zY29wZS5hdXRvcGxheVZlbG9jaXR5ICogMTAwMDA7XG4gICAgICAvLyB0aGlzLmRlYnVnKCdpbnRlcnZhbHNUaW1lTXMnLCBpbnRlcnZhbHNUaW1lTXMpO1xuICAgICAgdGhpcy5jb250aW51b3VzQXV0b3BsYXlJbnRlcnZhbEluZGV4ID0gd2luZG93LnNldEludGVydmFsKFxuICAgICAgICB0aGlzLm9uU2Nyb2xsZW5kLmJpbmQodGhpcyksXG4gICAgICAgIGludGVydmFsc1RpbWVNc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGlzYWJsZUNvbnRpbnVvdXNBdXRvcGxheSgpIHtcbiAgICBpZiAodGhpcy5jb250aW51b3VzQXV0b3BsYXlTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmNvbnRpbnVvdXNBdXRvcGxheVNlcnZpY2UuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb250aW51b3VzQXV0b3BsYXlTZXJ2aWNlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb250aW51b3VzQXV0b3BsYXlJbnRlcnZhbEluZGV4KSB7XG4gICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmNvbnRpbnVvdXNBdXRvcGxheUludGVydmFsSW5kZXgpO1xuICAgICAgdGhpcy5jb250aW51b3VzQXV0b3BsYXlJbnRlcnZhbEluZGV4ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZW5hYmxlSW50ZXJ2YWxBdXRvcGxheSgpIHtcbiAgICBpZiAodGhpcy5hdXRvcGxheUludGVydmFsSW5kZXggPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYXV0b3BsYXlJbnRlcnZhbEluZGV4ID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnNjb3BlLnBhdXNlKSB7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuc2NvcGUuYXV0b3BsYXlJbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGRpc2FibGVJbnRlcnZhbEF1dG9wbGF5KCkge1xuICAgIGlmICh0aGlzLmF1dG9wbGF5SW50ZXJ2YWxJbmRleCkge1xuICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5hdXRvcGxheUludGVydmFsSW5kZXgpO1xuICAgICAgdGhpcy5hdXRvcGxheUludGVydmFsSW5kZXggPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNhYmxlQXV0b3BsYXkoKSB7XG4gICAgdGhpcy5kaXNhYmxlSW50ZXJ2YWxBdXRvcGxheSgpO1xuICAgIHRoaXMuZGlzYWJsZUNvbnRpbnVvdXNBdXRvcGxheSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGVuYWJsZUF1dG9wbGF5KCkge1xuICAgIC8vIGNvbnRpbnVvdXMgc2Nyb2xsaW5nXG4gICAgaWYgKHRoaXMuc2NvcGUuYXV0b3BsYXlJbnRlcnZhbCA8PSAwKSB7XG4gICAgICB0aGlzLmVuYWJsZUNvbnRpbnVvdXNBdXRvcGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuYWJsZUludGVydmFsQXV0b3BsYXkoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5pdFNsaWRlc2hvd0lubmVyU2xpZGVzKCkge1xuICAgIGlmICghdGhpcy5zbGlkZUVsZW1lbnRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzbGlkZXMgZm91bmQhXCIpO1xuICAgIH1cblxuICAgIC8vIElmIHNsaWRlcyBub3QgYWRkZWQgYnkgdGVtcGxhdGVcbiAgICBpZiAodGhpcy5zY29wZS5pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuYWRkSXRlbXNCeUNoaWxkcygpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0cmFuc2Zvcm1UZW1wbGF0ZUF0dHJpYnV0ZXMoYXR0cmlidXRlczogYW55LCBpbmRleDogbnVtYmVyKSB7XG4gICAgYXR0cmlidXRlcyA9IHN1cGVyLnRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBpbmRleCk7XG4gICAgYXR0cmlidXRlcy5oYW5kbGUgPSBhdHRyaWJ1dGVzLmhhbmRsZSB8fCBpbmRleC50b1N0cmluZygpO1xuICAgIGF0dHJpYnV0ZXMuaW5kZXggPSBpbmRleDtcbiAgICBhdHRyaWJ1dGVzLmNsYXNzID0gYXR0cmlidXRlcy5jbGFzcyB8fCBcIlwiO1xuICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gXCIgc2xpZGVcIjtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgc2xpZGUgYnkgdGVtcGxhdGUgZWxlbWVudFxuICAgKiBAcGFyYW0gdHBsIHRlbXBsYXRlIGVsZW1lbnRcbiAgICovXG4gIHByb3RlY3RlZCBhZGRJdGVtQnlUZW1wbGF0ZSh0cGw6IEhUTUxUZW1wbGF0ZUVsZW1lbnQsIGluZGV4OiBudW1iZXIpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRUZW1wbGF0ZUF0dHJpYnV0ZXModHBsLCBpbmRleCk7XG4gICAgY29uc3QgY29udGVudCA9IHRwbC5pbm5lckhUTUw7XG4gICAgaWYgKGF0dHJpYnV0ZXMudHlwZSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXMudHlwZSA9PT0gXCJzbGlkZVwiKSB7XG4gICAgICAgIHRoaXMuc2NvcGUuaXRlbXMucHVzaCh7IC4uLmF0dHJpYnV0ZXMsIGNvbnRlbnQgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlcy50eXBlID09PSBcImNvbnRyb2xzXCIpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUNvbnRyb2xzID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGlmIChhdHRyaWJ1dGVzLnR5cGUgPT09IFwiaW5kaWNhdG9yc1wiKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVJbmRpY2F0b3JzID0gY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIHNsaWRlcyBieSBjaGlsZCBlbGVtZW50cyAobm90IGFzIHRlbXBsYXRlIGVsZW1lbnRzKVxuICAgKiBAcGFyYW0gdHBsIHRlbXBsYXRlIGVsZW1lbnRcbiAgICovXG4gIHByb3RlY3RlZCBhZGRJdGVtc0J5Q2hpbGRzKCkge1xuICAgIGlmICghdGhpcy5zbGlkZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2xpZGVFbGVtZW50cy5mb3JFYWNoKChzbGlkZUVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGUgPVxuICAgICAgICBzbGlkZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaGFuZGxlXCIpIHx8XG4gICAgICAgIHNsaWRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSB8fFxuICAgICAgICBpbmRleC50b1N0cmluZygpO1xuICAgICAgc2xpZGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImluZGV4XCIsIGluZGV4LnRvU3RyaW5nKCkpO1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgaGFuZGxlLFxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICBjb250ZW50OiBzbGlkZUVsZW1lbnQuaW5uZXJIVE1MLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAuLi5zbGlkZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgY2VudGVyWTogMCxcbiAgICAgICAgICBjZW50ZXJYOiAwLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHRoaXMuc2NvcGUuaXRlbXMucHVzaChhdHRyaWJ1dGVzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTY3JvbGxQb3NpdGlvbigpOiBTY3JvbGxQb3NpdGlvbiB7XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbih0aGlzLnNsaWRlc2hvd0lubmVyKTtcbiAgICByZXR1cm4gc2Nyb2xsUG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGNsb3Nlc3QgbnVtYmVyXG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM1MDAwNTU3XG4gICAqIEBwYXJhbSBnb2FsIHRoZSBudW1iZXIgd2hpY2ggdGhpcyBudW1iZXIgc2hvdWxkIGJlIGNsb3Nlc3QgdG9cbiAgICogQHBhcmFtIGN1cnIgY3VycmVudCBudW1iZXIgaW4gbG9vcFxuICAgKiBAcGFyYW0gcHJldiBwcmV2aW91cyBudW1iZXIgb3IgY2xvc2VzdCB2YWx1ZSBmb3VuZCBzbyBmYXJcbiAgICovXG4gIHByb3RlY3RlZCBnZXRDdXJyZW50Q2xvc2VzdE51bWJlcihnb2FsOiBudW1iZXIsIGN1cnI6IG51bWJlciwgcHJldjogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGN1cnIgLSBnb2FsKSA8IE1hdGguYWJzKHByZXYgLSBnb2FsKSA/IGN1cnIgOiBwcmV2O1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE1vc3RDZW50ZXJlZFNsaWRlSW5kZXgoKSB7XG4gICAgaWYgKHRoaXMuc2NvcGUuaXRlbXMubGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbGV0IG5lYXJaZXJvID0gTWF0aC5hYnMoXG4gICAgICB0aGlzLnNjb3BlLmFuZ2xlID09PSBcInZlcnRpY2FsXCJcbiAgICAgICAgPyB0aGlzLnNjb3BlLml0ZW1zWzBdLnBvc2l0aW9uLmNlbnRlcllcbiAgICAgICAgOiB0aGlzLnNjb3BlLml0ZW1zWzBdLnBvc2l0aW9uLmNlbnRlclhcbiAgICApO1xuICAgIGxldCBtaW5JbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuc2NvcGUuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gTWF0aC5hYnMoXG4gICAgICAgIHRoaXMuc2NvcGUuYW5nbGUgPT09IFwidmVydGljYWxcIlxuICAgICAgICAgID8gdGhpcy5zY29wZS5pdGVtc1tpXS5wb3NpdGlvbi5jZW50ZXJZXG4gICAgICAgICAgOiB0aGlzLnNjb3BlLml0ZW1zW2ldLnBvc2l0aW9uLmNlbnRlclhcbiAgICAgICk7XG4gICAgICBuZWFyWmVybyA9IHRoaXMuZ2V0Q3VycmVudENsb3Nlc3ROdW1iZXIoMCwgcG9zaXRpb24sIG5lYXJaZXJvKTtcbiAgICAgIGlmIChuZWFyWmVybyA9PT0gcG9zaXRpb24pIHtcbiAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWluSW5kZXg7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0QWxsU2xpZGVzSW5hY3RpdmUoZXhjbHVkZUluZGV4ID0gLTEpIHtcbiAgICBpZiAoIXRoaXMuc2xpZGVFbGVtZW50cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zY29wZS5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpbmRleCAhPT0gZXhjbHVkZUluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnNjb3BlLml0ZW1zW2luZGV4XSkge1xuICAgICAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNsaWRlRWxlbWVudHNbaW5kZXhdICYmIHRoaXMuc2xpZGVFbGVtZW50c1tpbmRleF0uY2xhc3NMaXN0KSB7XG4gICAgICAgICAgdGhpcy5zbGlkZUVsZW1lbnRzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNldENlbnRlcmVkU2xpZGVBY3RpdmUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0TW9zdENlbnRlcmVkU2xpZGVJbmRleCgpO1xuICAgIHRoaXMuc2V0QWxsU2xpZGVzSW5hY3RpdmUoaW5kZXgpO1xuICAgIGlmICghdGhpcy5zY29wZS5pdGVtc1tpbmRleF0pIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0uYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5zbGlkZUVsZW1lbnRzICYmIHRoaXMuc2xpZGVFbGVtZW50c1tpbmRleF0uY2xhc3NMaXN0KSB7XG4gICAgICB0aGlzLnNsaWRlRWxlbWVudHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHByb3RlY3RlZCBpc1Njcm9sbGFibGVUb0luZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG1heFNjcm9sbFRvID1cbiAgICAgIHRoaXMuc2NvcGUuYW5nbGUgPT09IFwidmVydGljYWxcIlxuICAgICAgICA/IHRoaXMuZ2V0U2Nyb2xsUG9zaXRpb24oKS5tYXhZXG4gICAgICAgIDogdGhpcy5nZXRTY3JvbGxQb3NpdGlvbigpLm1heFg7XG4gICAgY29uc3Qgc2Nyb2xsVG8gPVxuICAgICAgdGhpcy5zY29wZS5hbmdsZSA9PT0gXCJ2ZXJ0aWNhbFwiXG4gICAgICAgID8gdGhpcy5zbGlkZXNob3dJbm5lci5zY3JvbGxUb3AgK1xuICAgICAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLnBvc2l0aW9uLmNlbnRlcllcbiAgICAgICAgOiB0aGlzLnNsaWRlc2hvd0lubmVyLnNjcm9sbExlZnQgK1xuICAgICAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLnBvc2l0aW9uLmNlbnRlclg7XG4gICAgcmV0dXJuIHNjcm9sbFRvIDw9IG1heFNjcm9sbFRvICYmIHNjcm9sbFRvID49IDA7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2Nyb2xsVG9OZXh0U2xpZGUoKSB7XG4gICAgdGhpcy5zZXRTbGlkZVBvc2l0aW9ucygpO1xuICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHRoaXMuZ2V0TW9zdENlbnRlcmVkU2xpZGVJbmRleCgpO1xuICAgIGxldCBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyB0aGlzLnNjb3BlLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgaWYgKG5leHRJbmRleCA+PSB0aGlzLnNsaWRlRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICBuZXh0SW5kZXggPSBuZXh0SW5kZXggLSB0aGlzLnNsaWRlRWxlbWVudHMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIGlmICghdGhpcy5pc1Njcm9sbGFibGVUb0luZGV4KG5leHRJbmRleCkpIHtcbiAgICAvLyAgIG5leHRJbmRleCsrO1xuICAgIC8vIH1cblxuICAgIC8vIGlmIChuZXh0SW5kZXggPj0gdGhpcy5zbGlkZUVsZW1lbnRzLmxlbmd0aCkge1xuICAgIC8vICAgbmV4dEluZGV4ID0gbmV4dEluZGV4IC0gdGhpcy5zbGlkZUVsZW1lbnRzLmxlbmd0aDtcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gdGhpcy5nb1RvKG5leHRJbmRleCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2Nyb2xsVG9QcmV2U2xpZGUoKSB7XG4gICAgdGhpcy5zZXRTbGlkZVBvc2l0aW9ucygpO1xuICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHRoaXMuZ2V0TW9zdENlbnRlcmVkU2xpZGVJbmRleCgpO1xuICAgIGxldCBwcmV2SW5kZXggPSBjdXJyZW50SW5kZXggLSB0aGlzLnNjb3BlLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgaWYgKHByZXZJbmRleCA8IDApIHtcbiAgICAgIHByZXZJbmRleCA9IHRoaXMuc2xpZGVFbGVtZW50cy5sZW5ndGggLSAxICsgKHByZXZJbmRleCArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdvVG8ocHJldkluZGV4KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzY3JvbGxUb05lYXJlc3RTbGlkZSgpIHtcbiAgICB0aGlzLnNldFNsaWRlUG9zaXRpb25zKCk7XG4gICAgY29uc3QgbmVhcmVzdEluZGV4ID0gdGhpcy5nZXRNb3N0Q2VudGVyZWRTbGlkZUluZGV4KCk7XG4gICAgcmV0dXJuIHRoaXMuZ29UbyhuZWFyZXN0SW5kZXgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldFNsaWRlUG9zaXRpb25zKCkge1xuICAgIGlmICh0aGlzLnNjb3BlLml0ZW1zLmxlbmd0aCAhPT0gdGhpcy5zbGlkZUVsZW1lbnRzPy5sZW5ndGgpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFRoZSBzbGlkZSBvYmplY3RzIG11c3QgYmUgdGhlIHNhbWUgc2l6ZSBhcyB0aGUgc2xpZGUgZWxlbWVudHMhICR7dGhpcy5zY29wZS5pdGVtcy5sZW5ndGh9ICE9PSAke3RoaXMuc2xpZGVFbGVtZW50cz8ubGVuZ3RofWBcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1haW5Cb3VuZGluZ0NsaWVudCA9IHRoaXMuc2xpZGVzaG93SW5uZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNjb3BlLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzbGlkZUVsZW1lbnQgPSB0aGlzLnNsaWRlRWxlbWVudHNbaV07XG4gICAgICBjb25zdCBzbGlkZU9iamVjdCA9IHRoaXMuc2NvcGUuaXRlbXNbaV07XG4gICAgICBjb25zdCByZWN0ID0gc2xpZGVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICByZWN0LnggLT0gbWFpbkJvdW5kaW5nQ2xpZW50Lng7XG4gICAgICByZWN0LnkgLT0gbWFpbkJvdW5kaW5nQ2xpZW50Lnk7XG5cbiAgICAgIHNsaWRlT2JqZWN0LnBvc2l0aW9uID0ge1xuICAgICAgICB4OiByZWN0LngsXG4gICAgICAgIHk6IHJlY3QueSxcbiAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgIHRvSlNPTjogcmVjdC50b0pTT04sXG4gICAgICAgIC8vIDAgaWYgZWxlbWVudCBpcyBpbiB0aGUgbWlkZGxlIC8gY2VudGVyXG4gICAgICAgIGNlbnRlclk6IHJlY3QueSArIHJlY3QuaGVpZ2h0IC8gMiAtIG1haW5Cb3VuZGluZ0NsaWVudC5oZWlnaHQgLyAyLFxuICAgICAgICAvLyAwIGlmIGVsZW1lbnQgaXMgaW4gdGhlIG1pZGRsZSAvIGNlbnRlclxuICAgICAgICBjZW50ZXJYOiByZWN0LnggKyByZWN0LndpZHRoIC8gMiAtIG1haW5Cb3VuZGluZ0NsaWVudC53aWR0aCAvIDIsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gYW4gYXR0cmlidXRlIG9uIHRoZSBjdXN0b20gZWxlbWVudCBjaGFuZ2VzLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICAgKiBAcGFyYW0gb2xkVmFsdWVcbiAgICogQHBhcmFtIG5ld1ZhbHVlXG4gICAqIEBwYXJhbSBuYW1lc3BhY2VcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgbGV0IG9wdGlvbkZvclNpemU6IEJyZWFrcG9pbnQgPSBcInhzXCI7XG5cbiAgICBsZXQgcmVzcG9uc2l2ZVNjb3BlOiBSZXNwb25zaXZlT3B0aW9ucyB8IE9wdGlvbnMgPSB0aGlzLnNjb3BlO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXNUb0NoZWNrICYmXG4gICAgICB0aGlzLm9ic2VydmVkQXR0cmlidXRlc1RvQ2hlY2tbYXR0cmlidXRlTmFtZV1cbiAgICApIHtcbiAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVja1thdHRyaWJ1dGVOYW1lXS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbmV3VmFsdWUgPSB0aGlzLnBhcnNlQXR0cmlidXRlKG5ld1ZhbHVlKTtcblxuICAgIGlmIChhdHRyaWJ1dGVOYW1lLnN0YXJ0c1dpdGgoXCJzbS1cIikpIHtcbiAgICAgIG9wdGlvbkZvclNpemUgPSBcInNtXCI7XG4gICAgICByZXNwb25zaXZlU2NvcGUgPSB0aGlzLnNjb3BlLnNtO1xuICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUuc2xpY2UoMyk7XG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOYW1lLnN0YXJ0c1dpdGgoXCJtZC1cIikpIHtcbiAgICAgIG9wdGlvbkZvclNpemUgPSBcIm1kXCI7XG4gICAgICByZXNwb25zaXZlU2NvcGUgPSB0aGlzLnNjb3BlLm1kO1xuICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUuc2xpY2UoMyk7XG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOYW1lLnN0YXJ0c1dpdGgoXCJsZy1cIikpIHtcbiAgICAgIG9wdGlvbkZvclNpemUgPSBcImxnXCI7XG4gICAgICByZXNwb25zaXZlU2NvcGUgPSB0aGlzLnNjb3BlLmxnO1xuICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUuc2xpY2UoMyk7XG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOYW1lLnN0YXJ0c1dpdGgoXCJ4bC1cIikpIHtcbiAgICAgIG9wdGlvbkZvclNpemUgPSBcInhsXCI7XG4gICAgICByZXNwb25zaXZlU2NvcGUgPSB0aGlzLnNjb3BlLnhsO1xuICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUuc2xpY2UoMyk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkQXR0cmlidXRlTmFtZSA9IGNhbWVsQ2FzZShhdHRyaWJ1dGVOYW1lKTtcblxuICAgIGlmIChyZXNwb25zaXZlU2NvcGUgJiYgKHJlc3BvbnNpdmVTY29wZSBhcyBhbnkpW3BhcnNlZEF0dHJpYnV0ZU5hbWVdKSB7XG4gICAgICBvbGRWYWx1ZSA9IChyZXNwb25zaXZlU2NvcGUgYXMgYW55KVtwYXJzZWRBdHRyaWJ1dGVOYW1lXTtcbiAgICB9XG5cbiAgICAvLyBhdXRvbWF0aWNhbGx5IGluamVjdCBvYnNlcnZlZCBhdHRyaWJ1dGVzIHRvIHZpZXcgcmVzcG9uc2l2ZVNjb3BlXG4gICAgKHJlc3BvbnNpdmVTY29wZSBhcyBhbnkpW3BhcnNlZEF0dHJpYnV0ZU5hbWVdID0gbmV3VmFsdWU7XG5cbiAgICAvLyBjYWxsIGN1c3RvbSBhdHRyaWJ1dGUgY2hhbmdlZCBjYWxsYmFjayB3aXRoIHBhcnNlZCB2YWx1ZXNcbiAgICB0aGlzLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIG9wdGlvbkZvclNpemUgKyBwYXJzZWRBdHRyaWJ1dGVOYW1lLFxuICAgICAgb2xkVmFsdWUsXG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIG5hbWVzcGFjZVxuICAgICk7XG5cbiAgICB0aGlzLmJpbmRJZlJlYWR5KCk7XG4gIH1cblxuICAvKipcbiAgICogU2ltaWxhciB0byBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgYnV0IGF0dHJpYnV0ZSBhcmd1bWVudHMgYXJlIGFscmVhZHkgcGFyc2VkIGFzIHRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgc2NvcGVcbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIG9sZFZhbHVlXG4gICAqIEBwYXJhbSBuZXdWYWx1ZVxuICAgKiBAcGFyYW0gbmFtZXNwYWNlXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHJldHVybiBzdXBlci5wYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgb2xkVmFsdWUsXG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIG5hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICAvLyBkZWNvbnN0cnVjdGlvblxuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuc2Nyb2xsRXZlbnRzU2VydmljZT8uZGVzdHJveSgpO1xuICAgIHRoaXMuZGlzYWJsZUF1dG9wbGF5KCk7XG4gICAgdGhpcy5kaXNhYmxlRGVza3RvcERyYWdzY3JvbGwoKTtcbiAgICByZXR1cm4gc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICAvLyBPbmx5IHNldCB0aGUgY29tcG9uZW50IHRlbXBsYXRlIGlmIHRoZXJlIG5vIGNoaWxkcyBvciB0aGUgY2hpbGRzIGFyZSB0ZW1wbGF0ZXNcbiAgICBpZiAoIWhhc0NoaWxkTm9kZXNUcmltKHRoaXMpIHx8IHRoaXMuaGFzT25seVRlbXBsYXRlQ2hpbGRzKCkpIHtcbiAgICAgIC8vICgnRnVsbCB0ZW1wbGF0ZSEnLCB0aGlzLnRlbXBsYXRlSW5kaWNhdG9ycyk7XG4gICAgICByZXR1cm4gdGVtcGxhdGVTbGlkZXMgKyB0aGlzLnRlbXBsYXRlQ29udHJvbHMgKyB0aGlzLnRlbXBsYXRlSW5kaWNhdG9ycztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcy5kZWJ1ZygnQXBwZW5kIHRvIHRlbXBsYXRlIScpO1xuICAgICAgLy8gUHJlcGVuZCBjb250cm9sIGVsZW1lbnRzIGlmIG5vIGN1c3RvbSBjb250cm9sIGVsZW1lbnRzIGluIHRlbXBsYXRlIGFyZSBmb3VuZFxuICAgICAgaWYgKHRoaXMuY29udHJvbHNFbGVtZW50cy5sZW5ndGggPD0gMCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCArPSB0aGlzLnRlbXBsYXRlQ29udHJvbHM7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCArPSB0aGlzLnRlbXBsYXRlSW5kaWNhdG9ycztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBoYW5kbGVpemVGb3JtYXR0ZXIsXG4gIEZvcm1hdHRlckZuLFxuICBUZW1wbGF0ZUZ1bmN0aW9uLFxuICBUZW1wbGF0ZXNDb21wb25lbnQsXG4gIFNjb3BlQmFzZSxcbn0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHRlbXBsYXRlSG9yaXpvbnRhbCBmcm9tIFwiLi9iczQtdGFicy1ob3Jpem9udGFsLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgdGVtcGxhdGVWZXJ0aWNhbCBmcm9tIFwiLi9iczQtdGFicy12ZXJ0aWNhbC5jb21wb25lbnQuaHRtbFwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9jb250cm9sXCI7XG5cbmNvbnN0IGhhbmRsZWl6ZSA9IGhhbmRsZWl6ZUZvcm1hdHRlci5yZWFkIGFzIEZvcm1hdHRlckZuO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYiB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgaGFuZGxlOiBzdHJpbmc7XG4gIGFjdGl2ZTogYm9vbGVhbjtcbiAgdHlwZT86IHN0cmluZztcbiAgaW5kZXg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGl0ZW1zOiBUYWJbXTtcbiAgYWN0aXZhdGU6IEJzNFRhYnNDb21wb25lbnRbXCJhY3RpdmF0ZVwiXTtcbiAgZGVhY3RpdmF0ZTogQnM0VGFic0NvbXBvbmVudFtcImFjdGl2YXRlXCJdO1xuICBkZWFjdGl2YXRlQWxsOiBCczRUYWJzQ29tcG9uZW50W1wiZGVhY3RpdmF0ZUFsbFwiXTtcbiAgb3B0aW9uVGFic0F1dG9IZWlnaHQ6IGJvb2xlYW47XG4gIG9wdGlvblRhYnNBbmdsZTogXCJ2ZXJ0aWNhbFwiIHwgXCJob3Jpem9udGFsXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBCczRUYWJzQ29tcG9uZW50IGV4dGVuZHMgVGVtcGxhdGVzQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtdGFic1wiO1xuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZUF0dHJpYnV0ZXMgPSBbXG4gICAge1xuICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImhhbmRsZVwiLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJ0eXBlXCIsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImFjdGl2ZVwiLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJpbmRleFwiLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gIF07XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBpdGVtczogbmV3IEFycmF5PFRhYj4oKSxcbiAgICBhY3RpdmF0ZTogdGhpcy5hY3RpdmF0ZSxcbiAgICBkZWFjdGl2YXRlOiB0aGlzLmRlYWN0aXZhdGUsXG4gICAgZGVhY3RpdmF0ZUFsbDogdGhpcy5kZWFjdGl2YXRlQWxsLFxuICAgIG9wdGlvblRhYnNBdXRvSGVpZ2h0OiBmYWxzZSxcbiAgICBvcHRpb25UYWJzQW5nbGU6IFwiaG9yaXpvbnRhbFwiLFxuICB9O1xuXG4gIHByb3RlY3RlZCB0YWJzPzogTm9kZUxpc3RPZjxFbGVtZW50PjtcbiAgcHJvdGVjdGVkIHRhYlBhbmVzPzogTm9kZUxpc3RPZjxFbGVtZW50PjtcbiAgcHJvdGVjdGVkIHNjcm9sbGFibGU/OiBFbGVtZW50IHwgbnVsbDtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwib3B0aW9uLXRhYnMtYXV0by1oZWlnaHRcIixcbiAgICAgIFwib3B0aW9uLXRhYnMtYW5nbGVcIixcbiAgICAgIFwidGFiLTAtdGl0bGVcIixcbiAgICAgIFwidGFiLTAtY29udGVudFwiLFxuICAgICAgXCJ0YWItMC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTEtdGl0bGVcIixcbiAgICAgIFwidGFiLTEtY29udGVudFwiLFxuICAgICAgXCJ0YWItMS1oYW5kbGVcIixcbiAgICAgIFwidGFiLTItdGl0bGVcIixcbiAgICAgIFwidGFiLTItY29udGVudFwiLFxuICAgICAgXCJ0YWItMi1oYW5kbGVcIixcbiAgICAgIFwidGFiLTMtdGl0bGVcIixcbiAgICAgIFwidGFiLTMtY29udGVudFwiLFxuICAgICAgXCJ0YWItMy1oYW5kbGVcIixcbiAgICAgIFwidGFiLTQtdGl0bGVcIixcbiAgICAgIFwidGFiLTQtY29udGVudFwiLFxuICAgICAgXCJ0YWItNC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTUtdGl0bGVcIixcbiAgICAgIFwidGFiLTUtY29udGVudFwiLFxuICAgICAgXCJ0YWItNS1oYW5kbGVcIixcbiAgICAgIFwidGFiLTYtdGl0bGVcIixcbiAgICAgIFwidGFiLTYtY29udGVudFwiLFxuICAgICAgXCJ0YWItNi1oYW5kbGVcIixcbiAgICAgIFwidGFiLTctdGl0bGVcIixcbiAgICAgIFwidGFiLTctY29udGVudFwiLFxuICAgICAgXCJ0YWItNy1oYW5kbGVcIixcbiAgICAgIFwidGFiLTgtdGl0bGVcIixcbiAgICAgIFwidGFiLTgtY29udGVudFwiLFxuICAgICAgXCJ0YWItOC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTktdGl0bGVcIixcbiAgICAgIFwidGFiLTktY29udGVudFwiLFxuICAgICAgXCJ0YWItOS1oYW5kbGVcIixcbiAgICAgIFwidGFiLTEwLXRpdGxlXCIsXG4gICAgICBcInRhYi0xMC1jb250ZW50XCIsXG4gICAgICBcInRhYi0xMC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTExLXRpdGxlXCIsXG4gICAgICBcInRhYi0xMS1jb250ZW50XCIsXG4gICAgICBcInRhYi0xMS1oYW5kbGVcIixcbiAgICAgIFwidGFiLTEyLXRpdGxlXCIsXG4gICAgICBcInRhYi0xMi1jb250ZW50XCIsXG4gICAgICBcInRhYi0xMi1oYW5kbGVcIixcbiAgICAgIFwidGFiLTEzLXRpdGxlXCIsXG4gICAgICBcInRhYi0xMy1jb250ZW50XCIsXG4gICAgICBcInRhYi0xMy1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE0LXRpdGxlXCIsXG4gICAgICBcInRhYi0xNC1jb250ZW50XCIsXG4gICAgICBcInRhYi0xNC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE1LXRpdGxlXCIsXG4gICAgICBcInRhYi0xNS1jb250ZW50XCIsXG4gICAgICBcInRhYi0xNS1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE2LXRpdGxlXCIsXG4gICAgICBcInRhYi0xNi1jb250ZW50XCIsXG4gICAgICBcInRhYi0xNi1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE3LXRpdGxlXCIsXG4gICAgICBcInRhYi0xNy1jb250ZW50XCIsXG4gICAgICBcInRhYi0xNy1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE4LXRpdGxlXCIsXG4gICAgICBcInRhYi0xOC1jb250ZW50XCIsXG4gICAgICBcInRhYi0xOC1oYW5kbGVcIixcbiAgICAgIFwidGFiLTE5LXRpdGxlXCIsXG4gICAgICBcInRhYi0xOS1jb250ZW50XCIsXG4gICAgICBcInRhYi0xOS1oYW5kbGVcIixcbiAgICBdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfb25SZXNpemUoKSB7XG4gICAgdGhpcy5zZXRIZWlnaHQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblJlc2l6ZSA9IGRlYm91bmNlKHRoaXMuX29uUmVzaXplLmJpbmQodGhpcykpO1xuXG4gIC8qKlxuICAgKiBNYWtlIGFsbCB0YWJzIHBhbmVzIGFzIGhlaWdodCBhcyB0aGUgaGlnaGVzdCB0YWIgcGFuZVxuICAgKi9cbiAgcHVibGljIHNldEhlaWdodCgpIHtcbiAgICBpZiAodGhpcy5zY29wZS5vcHRpb25UYWJzQXV0b0hlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBCaW5kIHN0YXRpYyB0ZW1wbGF0ZVxuICAgIHRoaXMuc2V0RWxlbWVudHMoKTtcblxuICAgIGxldCBoaWdoZXN0ID0gMDtcbiAgICBpZiAoIXRoaXMudGFiUGFuZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy50YWJQYW5lcy5mb3JFYWNoKCh0YWJQYW5lKSA9PiB7XG4gICAgICBpZiAoISh0YWJQYW5lIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnQpLnN0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICh0YWJQYW5lIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuICAgICAgKHRhYlBhbmUgYXMgdW5rbm93biBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGNvbnN0IGhlaWdodCA9ICh0YWJQYW5lIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnQpLm9mZnNldEhlaWdodCB8fCAwO1xuICAgICAgaWYgKGhlaWdodCA+IGhpZ2hlc3QpIHtcbiAgICAgICAgaGlnaGVzdCA9IGhlaWdodDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnRhYlBhbmVzLmZvckVhY2goKHRhYlBhbmUpID0+IHtcbiAgICAgIGlmICghKHRhYlBhbmUgYXMgdW5rbm93biBhcyBIVE1MRWxlbWVudCkuc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUmVzZXQgZGlzcGxheSBzdHlsZSBwcm9wZXJ0eVxuICAgICAgKHRhYlBhbmUgYXMgdW5rbm93biBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICBpZiAoaGlnaGVzdCA+IDApIHtcbiAgICAgICAgKHRhYlBhbmUgYXMgdW5rbm93biBhcyBIVE1MRWxlbWVudCkuc3R5bGUuaGVpZ2h0ID0gaGlnaGVzdCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlQWxsKCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnNjb3BlLml0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgdGFiID0gdGhpcy5zY29wZS5pdGVtc1tpbmRleF07XG4gICAgICB0aGlzLmRlYWN0aXZhdGUodGFiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVhY3RpdmF0ZSh0YWI6IFRhYikge1xuICAgIHRhYi5hY3RpdmUgPSBmYWxzZTtcblxuICAgIGNvbnN0IGZpcnN0VGFiQ29udGVudENoaWxkID0gdGhpcy5nZXRUYWJDb250ZW50Q2hpbGRCeUluZGV4KHRhYi5pbmRleCk7XG4gICAgaWYgKGZpcnN0VGFiQ29udGVudENoaWxkKSB7XG4gICAgICB0aGlzLnRyaWdnZXJWaXNpYmlsaXR5Q2hhbmdlZEZvckVsZW1lbnQoZmlyc3RUYWJDb250ZW50Q2hpbGQsIHRhYi5hY3RpdmUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhY3RpdmF0ZSh0YWI6IFRhYikge1xuICAgIHRoaXMuZGVhY3RpdmF0ZUFsbCgpO1xuICAgIHRhYi5hY3RpdmUgPSB0cnVlO1xuXG4gICAgY29uc3QgZmlyc3RUYWJDb250ZW50Q2hpbGQgPSB0aGlzLmdldFRhYkNvbnRlbnRDaGlsZEJ5SW5kZXgodGFiLmluZGV4KTtcbiAgICBpZiAoZmlyc3RUYWJDb250ZW50Q2hpbGQpIHtcbiAgICAgIHRoaXMudHJpZ2dlclZpc2liaWxpdHlDaGFuZ2VkRm9yRWxlbWVudChcbiAgICAgICAgZmlyc3RUYWJDb250ZW50Q2hpbGQgYXMgRWxlbWVudCxcbiAgICAgICAgdGFiLmFjdGl2ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWN0aXZhdGVGaXJzdFRhYigpIHtcbiAgICBpZiAodGhpcy5zY29wZS5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlKHRoaXMuc2NvcGUuaXRlbXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRUYWJDb250ZW50Q2hpbGRCeUluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgLnRhYi1jb250ZW50IC50YWItcGFuZTpudGgtY2hpbGQoJHtpbmRleCArIDF9KSA+ICpgXG4gICAgICApIHx8IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciBgdmlzaWJpbGl0eS1jaGFuZ2VkYCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8gdXBkYXRlIGlmIHZpc2liaWxpdHkgY2hhbmdlcy5cbiAgICogRS5nLiB0aGlzIGV2ZW50IGlzIHVzZWQgdGhlIGJzNC1zbGlkZXNob3cgY29tcG9uZW50XG4gICAqIEBwYXJhbSBlbGVtZW50XG4gICAqIEBwYXJhbSB2aXNpYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgdHJpZ2dlclZpc2liaWxpdHlDaGFuZ2VkRm9yRWxlbWVudChcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIHZpc2libGU6IGJvb2xlYW5cbiAgKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBVc2UgdGhpcyBldmVudCB0byB1cGRhdGUgYW55IGN1c3RvbSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyB2aXNpYmxlXG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudChcInZpc2liaWxpdHktY2hhbmdlZFwiLCB7IGRldGFpbDogeyB2aXNpYmxlIH0gfSlcbiAgICAgICk7XG4gICAgfSwgMjAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdFRhYnMoKTtcbiAgICB0aGlzLmFjdGl2YXRlRmlyc3RUYWIoKTtcbiAgICB0aGlzLmluaXQoQnM0VGFic0NvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLnRhYnMpIHtcbiAgICAgIHRoaXMudGFicy5mb3JFYWNoKCh0YWIpID0+IHtcbiAgICAgICAgdGFiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzaG93bi5icy50YWJcIiwgdGhpcy5vblRhYlNob3duRXZlbnRIYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRFbGVtZW50cygpIHtcbiAgICB0aGlzLnRhYnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPVwidGFiXCJdJyk7XG4gICAgdGhpcy50YWJQYW5lcyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9XCJ0YWJwYW5lbFwiXScpO1xuICAgIHRoaXMuc2Nyb2xsYWJsZSA9IHRoaXMucXVlcnlTZWxlY3RvcihcIltzY3JvbGxhYmxlXVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXNpemVUYWJzQXJyYXkobmV3U2l6ZTogbnVtYmVyKSB7XG4gICAgd2hpbGUgKG5ld1NpemUgPiB0aGlzLnNjb3BlLml0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5zY29wZS5pdGVtcy5wdXNoKHtcbiAgICAgICAgaGFuZGxlOiBcIlwiLFxuICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgaW5kZXg6IHRoaXMuc2NvcGUuaXRlbXMubGVuZ3RoIC0gMSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvblRhYlNob3duRXZlbnRIYW5kbGVyKGV2ZW50OiBFdmVudCkge1xuICAgIGNvbnN0IGN1clRhYiA9IChldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCkgYXMgRWxlbWVudCB8IG51bGw7XG4gICAgaWYgKCFjdXJUYWIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2Nyb2xsYWJsZSkge1xuICAgICAgY29uc3QgdGFiU2Nyb2xsUG9zaXRpb24gPSBjdXJUYWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBzY3JvbGxMZWZ0VG8gPVxuICAgICAgICB0aGlzLnNjcm9sbGFibGUuc2Nyb2xsTGVmdCB8fCAwICsgdGFiU2Nyb2xsUG9zaXRpb24ubGVmdDtcbiAgICAgIC8vIFRPRE8gYW5pbWF0ZVxuICAgICAgLy8gdGhpcy5zY3JvbGxhYmxlLmFuaW1hdGUoeyBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0VG99LCAnc2xvdycpO1xuICAgICAgdGhpcy5zY3JvbGxhYmxlLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0VG87XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRUYWJzKCkge1xuICAgIC8vIEJpbmQgc3RhdGljIHRlbXBsYXRlXG4gICAgdGhpcy5zZXRFbGVtZW50cygpO1xuXG4gICAgaWYgKHRoaXMudGFicykge1xuICAgICAgdGhpcy50YWJzLmZvckVhY2goKHRhYikgPT4ge1xuICAgICAgICB0YWIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNob3duLmJzLnRhYlwiLCB0aGlzLm9uVGFiU2hvd25FdmVudEhhbmRsZXIpO1xuICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcInNob3duLmJzLnRhYlwiLCB0aGlzLm9uVGFiU2hvd25FdmVudEhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2NvcGUub3B0aW9uVGFic0F1dG9IZWlnaHQpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgdGhpcy5zZXRIZWlnaHQoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkVGFiQnlBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoYXR0cmlidXRlTmFtZS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIikpO1xuICAgIGlmIChpbmRleCA+PSB0aGlzLnNjb3BlLml0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5yZXNpemVUYWJzQXJyYXkoaW5kZXggKyAxKTtcbiAgICB9XG4gICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0uaW5kZXggPSBpbmRleDtcbiAgICBpZiAoYXR0cmlidXRlTmFtZS5lbmRzV2l0aChcIkNvbnRlbnRcIikpIHtcbiAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLmNvbnRlbnQgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWUuZW5kc1dpdGgoXCJUaXRsZVwiKSkge1xuICAgICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0udGl0bGUgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLmhhbmRsZSA9XG4gICAgICAgIHRoaXMuc2NvcGUuaXRlbXNbaW5kZXhdLmhhbmRsZSB8fFxuICAgICAgICBoYW5kbGVpemUodGhpcy5zY29wZS5pdGVtc1tpbmRleF0udGl0bGUpO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlTmFtZS5lbmRzV2l0aChcIkhhbmRsZVwiKSkge1xuICAgICAgdGhpcy5zY29wZS5pdGVtc1tpbmRleF0uaGFuZGxlID0gbmV3VmFsdWU7XG4gICAgfVxuXG4gICAgLy8gaWYgaXMgZmlyc3QgdGFiXG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZS5pdGVtcy5sZW5ndGggPiAwICYmXG4gICAgICB0aGlzLnNjb3BlLml0ZW1zWzBdICYmXG4gICAgICB0aGlzLnNjb3BlLml0ZW1zWzBdLmNvbnRlbnQubGVuZ3RoID4gMCAmJlxuICAgICAgdGhpcy5zY29wZS5pdGVtc1swXS50aXRsZS5sZW5ndGggPiAwICYmXG4gICAgICB0aGlzLnNjb3BlLml0ZW1zWzBdLmhhbmRsZS5sZW5ndGggPiAwXG4gICAgKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlRmlyc3RUYWIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXh0ZW5kcyBUZW1wbGF0ZXNDb21wb25lbnQudHJhbnNmb3JtVGVtcGxhdGVBdHRyaWJ1dGVzIHRvIHNldCB0aGUgaGFuZGxlIGJ5IHRoZSB0aXRsZSBpZiBubyBoYW5kbGUgaXMgc2V0XG4gICAqL1xuICBwcm90ZWN0ZWQgdHJhbnNmb3JtVGVtcGxhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgIGF0dHJpYnV0ZXMgPSBzdXBlci50cmFuc2Zvcm1UZW1wbGF0ZUF0dHJpYnV0ZXMoYXR0cmlidXRlcywgaW5kZXgpO1xuICAgIGlmICghYXR0cmlidXRlcy5oYW5kbGUgJiYgYXR0cmlidXRlcy50aXRsZSkge1xuICAgICAgYXR0cmlidXRlcy5oYW5kbGUgPSBoYW5kbGVpemUoYXR0cmlidXRlcy50aXRsZSk7XG4gICAgfVxuICAgIGF0dHJpYnV0ZXMuYWN0aXZlID0gYXR0cmlidXRlcy5hY3RpdmUgfHwgZmFsc2U7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgICBpZiAoYXR0cmlidXRlTmFtZS5zdGFydHNXaXRoKFwidGFiXCIpKSB7XG4gICAgICB0aGlzLmFkZFRhYkJ5QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHRoaXMuaW5pdFRhYnMoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gV29ya2Fyb3VuZFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc2NvcGUub3B0aW9uVGFic0F1dG9IZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIG9yIHRoZSBjaGlsZHMgYXJlIHRlbXBsYXRlc1xuICAgIGlmICghaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykgfHwgdGhpcy5oYXNPbmx5VGVtcGxhdGVDaGlsZHMoKSkge1xuICAgICAgaWYgKHRoaXMuc2NvcGUub3B0aW9uVGFic0FuZ2xlID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVIb3Jpem9udGFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlVmVydGljYWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5cbmltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVGdW5jdGlvbiwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgUG9wb3Zlck9wdGlvbnMgfSBmcm9tIFwiQHJpYmFqcy9iczRcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgVGFnZ2VkSW1hZ2VUYWcgYXMgVGFnIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvaW5kZXguanNcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtdGFnZ2VkLWltYWdlLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9jb250cm9sLmpzXCI7XG5cbmludGVyZmFjZSBPcHRpb25zIHtcbiAgcG9wb3Zlck9wdGlvbnM6IFBhcnRpYWw8UG9wb3Zlck9wdGlvbnM+O1xuICB0YWdPcHRpb25zOiBQYXJ0aWFsPFRhZz47XG4gIG11bHRpUG9wb3Zlcj86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGRlYnVnOiBib29sZWFuO1xuICBvcHRpb25zOiBPcHRpb25zO1xuICB0YWdzOiBUYWdbXTtcbiAgZmlsbFBvcG92ZXJPcHRpb25zOiAoXG4gICAgb3B0aW9uczogUGFydGlhbDxQb3BvdmVyT3B0aW9ucz5cbiAgKSA9PiBQYXJ0aWFsPFBvcG92ZXJPcHRpb25zPjtcbiAgdHJpZ2dlck9uRm9jdXM6IChvcHRpb25zOiBQYXJ0aWFsPFBvcG92ZXJPcHRpb25zPikgPT4gYW55O1xuICBvblBvcG92ZXJCb3VuZDogRXZlbnRMaXN0ZW5lcjtcbiAgb25Qb3BvdmVyU2hvd246IEV2ZW50TGlzdGVuZXI7XG4gIG9uUG9wb3ZlckhpZGRlbjogRXZlbnRMaXN0ZW5lcjtcbiAgb25DbGljazogRXZlbnRMaXN0ZW5lcjtcbiAgdXBkYXRlVGFnUG9zaXRpb25zOiBFdmVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQnM0VGFnZ2VkSW1hZ2VDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAvKipcbiAgICogQVRUUklCVVRFUyBBTkQgU0NPUEVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwiYnM0LXRhZ2dlZC1pbWFnZVwiO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG4gIHB1YmxpYyBfZGVidWcgPSB0cnVlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1widGFnc1wiLCBcIm9wdGlvbnNcIiwgXCJkZWJ1Z1wiXTtcbiAgfVxuXG4gIGltYWdlPzogSFRNTEltYWdlRWxlbWVudDtcblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGRlYnVnOiBmYWxzZSxcbiAgICB0YWdzOiBbXSxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwb3BvdmVyT3B0aW9uczoge30sIC8vIHNldCBjb250YWluZXIgPSB0aGlzIGluIGNvbnN0cnVjdG9yXG4gICAgICBtdWx0aVBvcG92ZXI6IGZhbHNlLFxuICAgICAgdGFnT3B0aW9uczoge30sXG4gICAgfSxcbiAgICBmaWxsUG9wb3Zlck9wdGlvbnM6IChvcHRpb25zOiBQYXJ0aWFsPFBvcG92ZXJPcHRpb25zPikgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4udGhpcy5zY29wZS5vcHRpb25zLnBvcG92ZXJPcHRpb25zLFxuICAgICAgICAuLi50aGlzLnNjb3BlLm9wdGlvbnMudGFnT3B0aW9ucy5wb3BvdmVyT3B0aW9ucyxcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIH07XG4gICAgfSxcbiAgICB0cmlnZ2VyT25Gb2N1czogKG9wdGlvbnM6IFBhcnRpYWw8UG9wb3Zlck9wdGlvbnM+KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5zY29wZS5maWxsUG9wb3Zlck9wdGlvbnMob3B0aW9ucykudHJpZ2dlciA/IDAgOiBudWxsO1xuICAgIH0sXG4gICAgb25DbGljazogdGhpcy5vbkNsaWNrLmJpbmQodGhpcyksXG4gICAgb25Qb3BvdmVyQm91bmQ6IHRoaXMub25Qb3BvdmVyQm91bmQuYmluZCh0aGlzKSxcbiAgICBvblBvcG92ZXJTaG93bjogdGhpcy5vblBvcG92ZXJTaG93bi5iaW5kKHRoaXMpLFxuICAgIG9uUG9wb3ZlckhpZGRlbjogdGhpcy5vblBvcG92ZXJIaWRkZW4uYmluZCh0aGlzKSxcbiAgICB1cGRhdGVUYWdQb3NpdGlvbnM6IGRlYm91bmNlKHRoaXMudXBkYXRlVGFnUG9zaXRpb25zLmJpbmQodGhpcykpLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDT05TVFJVQ1RPUiBBTkQgTElGRUNZQ0xFIEhBTkRMRVJTXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zY29wZS5vcHRpb25zLnBvcG92ZXJPcHRpb25zLmNvbnRhaW5lciA9IHRoaXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnlcbiAgKSB7XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwib3B0aW9uc1wiKSB7XG4gICAgICAvLyBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBib3VuZCwgd2UganVzdCB3YW50IHRvIGV4dGVuZCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gICAgICBpZiAodGhpcy5ib3VuZCkge1xuICAgICAgICB0aGlzLnNjb3BlLm9wdGlvbnMgPSBuZXdWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2NvcGUub3B0aW9ucyA9IGV4dGVuZCh7IGRlZXA6IHRydWUgfSwgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvID0gdGhpcy5zY29wZS5vcHRpb25zLnBvcG92ZXJPcHRpb25zO1xuICAgICAgaWYgKHBvICYmIHR5cGVvZiBwby5jb250YWluZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcG8uY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwby5jb250YWluZXIpIHx8IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgaWYgKGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICB0aGlzLnBhcnNlQ2hpbGRUYWdzKCk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmJlZm9yZUJpbmQoKTtcbiAgICAvLyBUZW1wbGF0ZSBoYXMgYmVlbiBsb2FkZWQuIFNvIHRoZSA8aW1nPiB0YWcgc2hvdWxkIGJlIHRoZXJlIG5vdy5cbiAgICB0aGlzLmltYWdlID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuaW5pdFRhZ3MoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBpbWcgPSB0aGlzLmltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMuc2NvcGUudXBkYXRlVGFnUG9zaXRpb25zKTtcbiAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2NvcGUub25DbGljayk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5zY29wZS51cGRhdGVUYWdQb3NpdGlvbnMsIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgaW1nID0gdGhpcy5pbWFnZSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIGltZy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLnNjb3BlLnVwZGF0ZVRhZ1Bvc2l0aW9ucyk7XG4gICAgaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNjb3BlLm9uQ2xpY2spO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuc2NvcGUudXBkYXRlVGFnUG9zaXRpb25zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBhZnRlckJpbmQoKSB7XG4gICAgdGhpcy5wYXNzSW1hZ2VBdHRyaWJ1dGVzKCk7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0VGFnZ2VkSW1hZ2VDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2NvcGUub25DbGljayk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5zY29wZS51cGRhdGVUYWdQb3NpdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExJRkVDWUNMRSBIRUxQRVJTXG4gICAqL1xuXG4gIHByb3RlY3RlZCBwYXJzZUNoaWxkVGFncygpIHtcbiAgICB0aGlzLmRlYnVnKGBwYXJzZUNoaWxkVGFncygpYCk7XG4gICAgZm9yIChjb25zdCB0YWdFbCBvZiBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwidGFnXCIpIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+XG4gICAgKSkge1xuICAgICAgY29uc3QgdGl0bGUgPSB0YWdFbC5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSB8fCBcIlwiO1xuICAgICAgY29uc3QgY29udGVudCA9IHRhZ0VsLmlubmVySFRNTDtcblxuICAgICAgY29uc3QgeCA9ICgodikgPT4gKGlzTmFOKHYpID8gTWF0aC5yYW5kb20oKSA6IHYpKShcbiAgICAgICAgcGFyc2VGbG9hdCh0YWdFbC5nZXRBdHRyaWJ1dGUoXCJ4XCIpIHx8IFwiXCIpXG4gICAgICApO1xuICAgICAgY29uc3QgeSA9ICgodikgPT4gKGlzTmFOKHYpID8gTWF0aC5yYW5kb20oKSA6IHYpKShcbiAgICAgICAgcGFyc2VGbG9hdCh0YWdFbC5nZXRBdHRyaWJ1dGUoXCJ5XCIpIHx8IFwiXCIpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzaGFwZSA9IHRhZ0VsLmdldEF0dHJpYnV0ZShcInNoYXBlXCIpIHx8IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGNvbG9yID0gdGFnRWwuZ2V0QXR0cmlidXRlKFwiY29sb3JcIikgfHwgdW5kZWZpbmVkO1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdGFnRWwuZ2V0QXR0cmlidXRlKFwiYm9yZGVyLXJhZGl1c1wiKSB8fCB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBmdWxsU2l6ZSA9IHRhZ0VsLmdldEF0dHJpYnV0ZShcImZ1bGwtc2l6ZVwiKSB8fCB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBzbWFsbFNpemUgPSB0YWdFbC5nZXRBdHRyaWJ1dGUoXCJzbWFsbC1zaXplXCIpIHx8IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHRhZ0RhdGEgPSB7XG4gICAgICAgIC4uLnRoaXMuc2NvcGUub3B0aW9ucy50YWdPcHRpb25zLFxuICAgICAgICBwb3BvdmVyT3B0aW9uczogdGhpcy5zY29wZS5maWxsUG9wb3Zlck9wdGlvbnMoe1xuICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgfSksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHNoYXBlLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgYm9yZGVyUmFkaXVzLFxuICAgICAgICBmdWxsU2l6ZSxcbiAgICAgICAgc21hbGxTaXplLFxuICAgICAgfTtcbiAgICAgIHRoaXMuc2NvcGUudGFncy5wdXNoKHRhZ0RhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0VGFncygpIHtcbiAgICBjb25zdCBzY29wZVRhZ09wdGlvbnMgPSB0aGlzLnNjb3BlLm9wdGlvbnMudGFnT3B0aW9ucztcbiAgICBmb3IgKGNvbnN0IFtpbmRleCwgdGFnXSBvZiB0aGlzLnNjb3BlLnRhZ3MuZW50cmllcygpKSB7XG4gICAgICB0YWcuaW5kZXggPSBpbmRleDtcbiAgICAgIHRhZy5zaGFwZSA9IHRhZy5zaGFwZSB8fCBzY29wZVRhZ09wdGlvbnMuc2hhcGU7XG4gICAgICB0YWcuYm9yZGVyUmFkaXVzID0gdGFnLmJvcmRlclJhZGl1cyB8fCBzY29wZVRhZ09wdGlvbnMuYm9yZGVyUmFkaXVzO1xuICAgICAgdGFnLnNtYWxsU2l6ZSA9IHRhZy5zbWFsbFNpemUgfHwgc2NvcGVUYWdPcHRpb25zLnNtYWxsU2l6ZTtcbiAgICAgIHRhZy5mdWxsU2l6ZSA9IHRhZy5mdWxsU2l6ZSB8fCBzY29wZVRhZ09wdGlvbnMuZnVsbFNpemU7XG4gICAgICB0YWcuY29sb3IgPSB0YWcuY29sb3IgfHwgc2NvcGVUYWdPcHRpb25zLmNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXNzIGFsbCBhdHRyaWJ1dGVzIHN0YXJ0aW5nIHdpdGggXCJpbWctXCIgZG93biB0byB0aGUgPGltZz4gVGFnLCB3aXRob3V0IHRoZSBwcmVmaXguXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFzc0ltYWdlQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBpbWcgPSB0aGlzLmltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgZm9yIChsZXQgaSA9IGF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpZiAoYXR0cnNbaV0ubmFtZS5zdGFydHNXaXRoKFwiaW1nLVwiKSkge1xuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKGF0dHJzW2ldLm5hbWUuc3Vic3RyKDQpLCBhdHRyc1tpXS52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVWRU5UIExJU1RFTkVSU1xuICAgKi9cbiAgb25DbGljayhlOiBFdmVudCkge1xuICAgIGlmICh0aGlzLnNjb3BlLmRlYnVnKSB7XG4gICAgICAvLyBhZGFwdGVkIGZyb20gaGVyZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQyMTExNjIzLzcwNDgyMDBcbiAgICAgIC8vIFRPRE86IGF2b2lkIHVzaW5nIFwiYXMgYW55XCJcbiAgICAgIGNvbnN0IGltZyA9IHRoaXMuaW1hZ2UgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50VG9wLFxuICAgICAgICBjbGllbnRMZWZ0LFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBuYXR1cmFsV2lkdGgsXG4gICAgICAgIG5hdHVyYWxIZWlnaHQsXG4gICAgICB9ID0gaW1nO1xuICAgICAgY29uc3QgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBlIGFzIGFueTtcbiAgICAgIGxldCB4ID0gY2xpZW50WCAtIGNsaWVudExlZnQ7XG4gICAgICBsZXQgeSA9IGNsaWVudFkgLSBjbGllbnRUb3A7XG4gICAgICBjb25zdCB3UmF0aW8gPSB3aWR0aCAvIG5hdHVyYWxXaWR0aDtcbiAgICAgIGNvbnN0IGhSYXRpbyA9IGhlaWdodCAvIG5hdHVyYWxIZWlnaHQ7XG4gICAgICBsZXQgYWN0dWFsV2lkdGggPSB3aWR0aDtcbiAgICAgIGxldCBhY3R1YWxIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBpZiAod1JhdGlvIDwgaFJhdGlvKSB7XG4gICAgICAgIC8vIGxlZnQsIHJpZ2h0IGN1dCBvZmZcbiAgICAgICAgYWN0dWFsV2lkdGggPSAod2lkdGggKiBoUmF0aW8pIC8gd1JhdGlvO1xuICAgICAgICB4ICs9IChhY3R1YWxXaWR0aCAtIHdpZHRoKSAvIDI7XG4gICAgICB9IGVsc2UgaWYgKGhSYXRpbyA8IHdSYXRpbykge1xuICAgICAgICAvLyBsZWZ0LCByaWdodCBjdXQgb2ZmXG4gICAgICAgIGFjdHVhbEhlaWdodCA9IChoZWlnaHQgKiB3UmF0aW8pIC8gaFJhdGlvO1xuICAgICAgICB5ICs9IChhY3R1YWxIZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICAgIH1cbiAgICAgIHggKj0gMTAwIC8gYWN0dWFsV2lkdGg7XG4gICAgICB5ICo9IDEwMCAvIGFjdHVhbEhlaWdodDtcbiAgICAgIGNvbnNvbGUubG9nKHsgeCwgeSB9KTtcbiAgICB9XG4gIH1cbiAgb25Qb3BvdmVyQm91bmQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgLypcbiAgICAgKiAgV2UgZ2V0IHRoZSBhbmNob3IgYGVsYCBmb3IgZWFjaCB0YWcgaGVyZSwgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gYm91bmQgaW4gdGhlIHJ2LWVhY2gsXG4gICAgICogIHNvIHdlIGNhbiB0cmlnZ2VyIGV2ZW50cyBvbiB0aGVtIGxhdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGJvdW5kSW5kZXhBdHRyID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuZ2V0QXR0cmlidXRlKFwiaW5kZXhcIik7XG4gICAgaWYgKGJvdW5kSW5kZXhBdHRyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwb3B1cCBib3VuZCBvbiBubyBpbmRleFwiKTtcbiAgICB9XG4gICAgY29uc3QgYm91bmRJbmRleCA9IHBhcnNlSW50KGJvdW5kSW5kZXhBdHRyKTtcbiAgICBpZiAoaXNOYU4oYm91bmRJbmRleCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgYm91bmRJbmRleCBcIiR7Ym91bmRJbmRleEF0dHJ9XCIgaXMgbm90IGEgbnVtYmVyIWApO1xuICAgIH1cbiAgICBjb25zdCBmb3VuZFRhZyA9IHRoaXMuc2NvcGUudGFncy5maW5kKCh0YWcpID0+IHRhZy5pbmRleCA9PT0gYm91bmRJbmRleCk7XG4gICAgaWYgKGZvdW5kVGFnKSB7XG4gICAgICBmb3VuZFRhZy5lbCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGFnIHdpdGggaW5kZXggKCR7Ym91bmRJbmRleH0sIFwiJHtib3VuZEluZGV4QXR0cn1cIikgbm90IGZvdW5kYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgb25Qb3BvdmVyU2hvd24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy5zY29wZS50YWdzKSB7XG4gICAgICBpZiAodGFnLmVsID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgICAgLy8gU2V0IHNob3duIHBvcG92ZXIncyBhbmNob3IgYXMgYWN0aXZlLlxuICAgICAgICB0YWcuZWwuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEhpZGUgYWxsIG90aGVyIHBvcG92ZXJzIGFuZCByZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gb3RoZXIgdGFncyBpZiBtdWx0aVBvcG92ZXIgb3B0aW9uIGlzIGZhbHNlLlxuICAgICAgICBpZiAoIXRoaXMuc2NvcGUub3B0aW9ucy5tdWx0aVBvcG92ZXIpIHtcbiAgICAgICAgICB0YWcuZWw/LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgdGFnLmVsPy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInRyaWdnZXItaGlkZVwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb25Qb3BvdmVySGlkZGVuKGV2ZW50OiBFdmVudCkge1xuICAgIGNvbnN0IGZvdW5kID0gdGhpcy5zY29wZS50YWdzLmZpbmQoKHRhZykgPT4gdGFnLmVsID09PSBldmVudC50YXJnZXQpO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgZm91bmQuZWw/LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHVwZGF0ZVRhZ1Bvc2l0aW9ucygpIHtcbiAgICAvKlxuICAgICAqIEN1cnJlbnRseSB3b3JraW5nIGZvciBvYmplY3QtZml0OiBjb3ZlciwgY29udGFpbiBvciBmaWxsLCBhbmQgb2JqZWN0LXBvc2l0aW9uOiA1MCUgNTAlIChkZWZhdWx0KVxuICAgICAqIFRPRE86IG1ha2UgdGhpcyB3b3JrIGZvciBhbGwgQ1NTIHZhbHVlcyBvZiBcIm9iamVjdC1wb3NpdGlvblwiIGFuZCBcIm9iamVjdC1maXRcIiFcbiAgICAgKi9cbiAgICBjb25zdCBpbWcgPSB0aGlzLmltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBuYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQgfSA9IGltZztcbiAgICBjb25zdCB3UmF0aW8gPSBuYXR1cmFsV2lkdGggLyB3aWR0aDtcbiAgICBjb25zdCBoUmF0aW8gPSBuYXR1cmFsSGVpZ2h0IC8gaGVpZ2h0O1xuICAgIGNvbnN0IGZpdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGltZykuZ2V0UHJvcGVydHlWYWx1ZShcIm9iamVjdC1maXRcIik7XG4gICAgaWYgKFxuICAgICAgKGZpdCA9PT0gXCJjb3ZlclwiICYmIHdSYXRpbyA+IGhSYXRpbykgfHxcbiAgICAgIChmaXQgPT09IFwiY29udGFpblwiICYmIGhSYXRpbyA+IHdSYXRpbylcbiAgICApIHtcbiAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRoaXMuc2NvcGUudGFncykge1xuICAgICAgICB0YWcudG9wID0gdGFnLnkgKiAxMDAgKyBcIiVcIjtcbiAgICAgICAgdGFnLmxlZnQgPSAoKHdSYXRpbyAvIGhSYXRpbykgKiAodGFnLnggLSAwLjUpICsgMC41KSAqIDEwMCArIFwiJVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZml0ID09PSBcImNvdmVyXCIgfHwgZml0ID09PSBcImNvbnRhaW5cIikge1xuICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy5zY29wZS50YWdzKSB7XG4gICAgICAgIHRhZy5sZWZ0ID0gdGFnLnggKiAxMDAgKyBcIiVcIjtcbiAgICAgICAgdGFnLnRvcCA9ICgoaFJhdGlvIC8gd1JhdGlvKSAqICh0YWcueSAtIDAuNSkgKyAwLjUpICogMTAwICsgXCIlXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRoaXMuc2NvcGUudGFncykge1xuICAgICAgICB0YWcubGVmdCA9IHRhZy54ICogMTAwICsgXCIlXCI7XG4gICAgICAgIHRhZy50b3AgPSB0YWcueSAqIDEwMCArIFwiJVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9iczQtdG9hc3QtaXRlbS5jb21wb25lbnQuaHRtbFwiO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgVG9hc3RTZXJ2aWNlLCBFVkVOVF9ISURERU4gfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvdG9hc3Quc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgU2NvcGUgYXMgQnM0Tm90aWZpY2F0aW9uQ29udGFpbmVyU2NvcGUgfSBmcm9tIFwiLi4vYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIvYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBnZXRFbGVtZW50RnJvbUV2ZW50IH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBpY29uVXJsPzogc3RyaW5nO1xuICB0b2FzdD86IFRvYXN0O1xuICBvbkhpZGRlbjogQnM0VG9hc3RJdGVtQ29tcG9uZW50W1wib25IaWRkZW5cIl07XG4gIGRpc21pc3M6IEJzNFRvYXN0SXRlbUNvbXBvbmVudFtcImRpc21pc3NcIl07XG4gIGluZGV4OiBudW1iZXI7XG4gICRwYXJlbnQ/OiBhbnk7XG4gICRldmVudD86IEN1c3RvbUV2ZW50O1xufVxuXG5leHBvcnQgY2xhc3MgQnM0VG9hc3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJiczQtdG9hc3QtaXRlbVwiO1xuXG4gIHB1YmxpYyBfZGVidWcgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBwcm90ZWN0ZWQgdG9hc3RTZXJ2aWNlPzogVG9hc3RTZXJ2aWNlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1widG9hc3RcIiwgXCJpY29uLXVybFwiLCBcImluZGV4XCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcInRvYXN0XCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBvbkhpZGRlbjogdGhpcy5vbkhpZGRlbi5iaW5kKHRoaXMpLFxuICAgIGluZGV4OiAtMSxcbiAgICBkaXNtaXNzOiB0aGlzLmRpc21pc3MuYmluZCh0aGlzKSxcbiAgICB0b2FzdDogdW5kZWZpbmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0VG9hc3RJdGVtQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMuaW5pdFRvYXN0U2VydmljZSgpO1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRUb2FzdFNlcnZpY2UoKSB7XG4gICAgY29uc3QgdG9hc3QgPSB0aGlzLnNjb3BlLnRvYXN0O1xuICAgIGNvbnN0IHRvYXN0RWwgPSB0aGlzLmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBpZiAodG9hc3QgJiYgdG9hc3RFbCkge1xuICAgICAgdGhpcy50b2FzdFNlcnZpY2UgPSBuZXcgVG9hc3RTZXJ2aWNlKHRvYXN0RWwsIHtcbiAgICAgICAgZGVsYXk6XG4gICAgICAgICAgdG9hc3QuZGVsYXkgIT09IHVuZGVmaW5lZCA/IHRvYXN0LmRlbGF5IDogVG9hc3RTZXJ2aWNlLkRlZmF1bHQuZGVsYXksXG4gICAgICAgIGF1dG9oaWRlOlxuICAgICAgICAgIHRvYXN0LmF1dG9IaWRlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gdG9hc3QuYXV0b0hpZGVcbiAgICAgICAgICAgIDogVG9hc3RTZXJ2aWNlLkRlZmF1bHQuYXV0b2hpZGUsXG4gICAgICAgIGFuaW1hdGlvbjpcbiAgICAgICAgICB0b2FzdC5hbmltYXRpb24gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB0b2FzdC5hbmltYXRpb25cbiAgICAgICAgICAgIDogVG9hc3RTZXJ2aWNlLkRlZmF1bHQuYW5pbWF0aW9uLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENhbGwgb25IaWRkZW4gb24gaGlkZGVuIGV2ZW50IG9uY2VcbiAgICAgIHRvYXN0RWwuYWRkRXZlbnRMaXN0ZW5lcihFVkVOVF9ISURERU4sIHRoaXMuc2NvcGUub25IaWRkZW4sIHtcbiAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBzaG93IHRvYXN0IHVzaW5nIHRoZSB0b2FzdHNlcnZpY2VcbiAgICAgIHRoaXMudG9hc3RTZXJ2aWNlLnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvLyBjYW4gYmUgY2FsbGVkIGlmIHRvYXN0IHNob3VsZCBiZSByZW1vdmVkXG4gIHB1YmxpYyBkaXNtaXNzKCkge1xuICAgIHRoaXMudG9hc3RTZXJ2aWNlPy5oaWRlKCk7XG4gIH1cblxuICAvLyByZW1vdmUgdG9hc3QgZnJvbSBkb20gb25jZSBzaG93blxuICBwdWJsaWMgb25IaWRkZW4oZXZlbnQ6IEV2ZW50LCBlbD86IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKCFlbCkge1xuICAgICAgZWwgPSBnZXRFbGVtZW50RnJvbUV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgY29uc3QgdG9hc3RDb250YWluZXI6IEJzNE5vdGlmaWNhdGlvbkNvbnRhaW5lclNjb3BlIHwgbnVsbCA9XG4gICAgICB0aGlzLnNjb3BlLiRwYXJlbnQ/LiRwYXJlbnQgfHwgbnVsbDtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdG9hc3RDb250YWluZXI/Lm9uSXRlbUhpZGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgdGhpcy5zY29wZS50b2FzdCAmJlxuICAgICAgZWxcbiAgICApIHtcbiAgICAgIHRvYXN0Q29udGFpbmVyLm9uSXRlbUhpZGUoZXZlbnQsIGVsLCB0aGlzLnNjb3BlLmluZGV4LCB0aGlzLnNjb3BlLnRvYXN0KTtcbiAgICB9XG4gIH1cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGNvbXBvbmVudHMgaXMgdXNlZCB0byB0cmlnZ2VyIGEgdG9nZ2xlIGV2ZW50IHVzZWQgaW4gb3RoZXIgY29tcG9uZW50cyBvciBwYXJ0cyBvZiB5b3VyIHByb2plY3QuIFRoaXMgc2l0ZSBpdHNlbGYgdXNlcyB0aGUgYnM0LXRvZ2dsZS1idXR0b24gdG8gb3BlbiBvciBjbG9zZSB0aGUgc2lkZWJhci5cbiAqIEBhdHRyaWJ1dGUgXCJ0YXJnZXQtaWRcIiAoUmVxdWlyZWQpIFRoZSBpZCB3aXRoIHdoaWNoIHRoZSB0b2dnbGUgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gKiBAbWV0aG9kIHRvZ2dsZVx0IFRyaWdnZXJzIHRoZSB0b2dnbGUgZXZlbnRcbiAqIEBwcm9wZXJ0eSBzdGF0ZSBDYW4gYmUgJ2hpZGRlbicgb3Igc29tZXRoaW5nIGVsc2VcbiAqIEBwcm9wZXJ0eSBpc0Nsb3NlZCBJcyB0cnVlIGlmIHRoZSBzdGF0ZSBpcyAnaGlkZGVuJ1xuICogQHByb3BlcnR5IHRhcmdldElkIFBhc3NlZCBhdHRyaWJ1dGUgdmFsdWUsIHNlZSBgdGFyZ2V0LWlkYCBhdHRyaWJ1dGVcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgeyBUT0dHTEVfQlVUVE9OIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuXG50eXBlIFN0YXRlID1cbiAgfCBcInVuZGVmaW5lZFwiXG4gIHwgXCJvdmVybGF5LWxlZnRcIlxuICB8IFwib3ZlcmxheS1yaWdodFwiXG4gIHwgXCJzaWRlLWxlZnRcIlxuICB8IFwic2lkZS1yaWdodFwiXG4gIHwgXCJoaWRkZW5cIlxuICB8IFwiYWRkZWRcIlxuICB8IFwicmVtb3ZlZFwiO1xuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICB0YXJnZXRJZD86IHN0cmluZztcbiAgdG9nZ2xlOiBCczRUb2dnbGVCdXR0b25Db21wb25lbnRbXCJ0b2dnbGVcIl07XG4gIHN0YXRlOiBTdGF0ZTtcbiAgaXNBY3RpdmU6IGJvb2xlYW47XG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgIWlzQWN0aXZlIGluc3RlYWQgKi9cbiAgaXNDbG9zZWQ6IGJvb2xlYW47XG59XG5cbi8vIFRPRE8gZXh0ZW5kIGZyb20gQnM0QnV0dG9uQ29tcG9uZW50XG5leHBvcnQgY2xhc3MgQnM0VG9nZ2xlQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJ0YXJnZXQtaWRcIl07XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1widGFyZ2V0SWRcIl07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcImJzNC10b2dnbGUtYnV0dG9uXCI7XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBwcm90ZWN0ZWQgZXZlbnREaXNwYXRjaGVyPzogRXZlbnREaXNwYXRjaGVyO1xuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgdGFyZ2V0SWQ6IHVuZGVmaW5lZCxcbiAgICB0b2dnbGU6IHRoaXMudG9nZ2xlLFxuICAgIHN0YXRlOiBcInVuZGVmaW5lZFwiLFxuICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgIGlzQ2xvc2VkOiBmYWxzZSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5ldmVudERpc3BhdGNoZXIpIHtcbiAgICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGUsXG4gICAgICAgIHRoaXMuc2NvcGUudGFyZ2V0SWRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICAvLyBUcmlnZ2VyIGluaXQgdG8gdHJpZ2dlciB0aGVyZSBjdXJyZW50IHN0YXRlIG9mIGFsbCB0aGUgY29tcG9uZW50cyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhpcyBjb21wb25lbnRcbiAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlcj8udHJpZ2dlcihcbiAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy5pbml0LFxuICAgICAgdGhpcy5zY29wZS50YXJnZXRJZFxuICAgICk7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoQnM0VG9nZ2xlQnV0dG9uQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25Ub2dnbGVkRXZlbnQoc3RhdGU6IFN0YXRlKSB7XG4gICAgdGhpcy5zY29wZS5zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMuc2NvcGUuaXNBY3RpdmUgPSBzdGF0ZSAhPT0gXCJoaWRkZW5cIiAmJiBzdGF0ZSAhPT0gXCJyZW1vdmVkXCI7XG4gICAgdGhpcy5zY29wZS5pc0Nsb3NlZCA9ICF0aGlzLnNjb3BlLmlzQWN0aXZlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRFdmVudERpc3BhdGNoZXIoaWQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmV2ZW50RGlzcGF0Y2hlcikge1xuICAgICAgdGhpcy5ldmVudERpc3BhdGNoZXIub2ZmKFxuICAgICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMudG9nZ2xlZCxcbiAgICAgICAgdGhpcy5vblRvZ2dsZWRFdmVudCxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudERpc3BhdGNoZXIgPSBuZXcgRXZlbnREaXNwYXRjaGVyKFRPR0dMRV9CVVRUT04ubnNQcmVmaXggKyBpZCk7XG4gICAgdGhpcy5ldmVudERpc3BhdGNoZXIub24oXG4gICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMudG9nZ2xlZCxcbiAgICAgIHRoaXMub25Ub2dnbGVkRXZlbnQsXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICAvLyBUcmlnZ2VyZWQgc3RhdGUgdHJpZ2dlcmVkIGJ5IGAuLnRyaWdnZXIoJ2luaXQnLCAuLi5gXG4gICAgdGhpcy5ldmVudERpc3BhdGNoZXIub24oXG4gICAgICBUT0dHTEVfQlVUVE9OLmV2ZW50TmFtZXMuc3RhdGUsXG4gICAgICB0aGlzLm9uVG9nZ2xlZEV2ZW50LFxuICAgICAgdGhpc1xuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBhbnksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSBcInRhcmdldElkXCIgJiYgbmV3VmFsdWUpIHtcbiAgICAgIHRoaXMuaW5pdEV2ZW50RGlzcGF0Y2hlcihuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZGVjb25zdHJ1Y3Rpb25cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgaWYgKHRoaXMuZXZlbnREaXNwYXRjaGVyKSB7XG4gICAgICB0aGlzLmV2ZW50RGlzcGF0Y2hlci5vZmYoXG4gICAgICAgIFRPR0dMRV9CVVRUT04uZXZlbnROYW1lcy50b2dnbGVkLFxuICAgICAgICB0aGlzLm9uVG9nZ2xlZEV2ZW50LFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICBpZiAoIWhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiTm8gY2hpbGQgZWxlbWVudHMgZm91bmQsIHRoaXMgY29tcG9uZW50IGFzIG5vIHRlbXBsYXRlIHNvIHlvdSBuZWVkIHRvIGRlZmluZSB5b3VyIG93biBhcyBjaGlsZCBvZiB0aGlzIGNvbXBvbmVudC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCB7IEJzNERyb3Bkb3duQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LWRyb3Bkb3duL2JzNC1kcm9wZG93bi5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNEFjY29yZGlvbkNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1hY2NvcmRpb24vYnM0LWFjY29yZGlvbi5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1idXR0b24vYnM0LWJ1dHRvbi5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNENhcm91c2VsQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LWNhcm91c2VsL2JzNC1jYXJvdXNlbC5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNENvbG9yUGlja2VyQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LWNvbG9ycGlja2VyL2JzNC1jb2xvcnBpY2tlci5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNENvbnRlbnRzQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LWNvbnRlbnRzL2JzNC1jb250ZW50cy5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNEljb25Db21wb25lbnQgfSBmcm9tIFwiLi9iczQtaWNvbi9iczQtaWNvbi5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNFNjcm9sbHNweUNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1zY3JvbGxzcHkvYnM0LXNjcm9sbHNweS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNFNoYXJlQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LXNoYXJlL2JzNC1zaGFyZS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNFNpZGViYXJDb21wb25lbnQgfSBmcm9tIFwiLi9iczQtc2lkZWJhci9iczQtc2lkZWJhci5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNFNsaWRlc2hvd0NvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1zbGlkZXNob3cvYnM0LXNsaWRlc2hvdy5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNFRvZ2dsZUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC10b2dnbGUtYnV0dG9uL2JzNC10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgQnM0TmF2YmFyQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LW5hdmJhci9iczQtbmF2YmFyLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgQnM0VGFic0NvbXBvbmVudCB9IGZyb20gXCIuL2JzNC10YWJzL2JzNC10YWJzLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgQnM0Rm9ybUNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1mb3JtL2JzNC1mb3JtLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgQnM0Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSBcIi4vYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIvYnM0LW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBCczRUb2FzdEl0ZW1Db21wb25lbnQgfSBmcm9tIFwiLi9iczQtdG9hc3QtaXRlbS9iczQtdG9hc3QtaXRlbS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IEJzNE1vZGFsSXRlbUNvbXBvbmVudCB9IGZyb20gXCIuL2JzNC1tb2RhbC1pdGVtL2JzNC1tb2RhbC1pdGVtLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgQnM0VGFnZ2VkSW1hZ2VDb21wb25lbnQgfSBmcm9tIFwiLi9iczQtdGFnZ2VkLWltYWdlL2JzNC10YWdnZWQtaW1hZ2UuY29tcG9uZW50LmpzXCI7XG4iLCJleHBvcnQgY29uc3QgTk9ERV9URVhUID0gMztcblxuLy8gRXZlbnREaXNwYXRjaGVyIGV2ZW50c1xuZXhwb3J0IGNvbnN0IFRPR0dMRV9CVVRUT04gPSB7XG4gIG5zUHJlZml4OiBcImJzNC10b2dnbGUtYnV0dG9uOlwiLFxuICBldmVudE5hbWVzOiB7XG4gICAgdG9nZ2xlOiBcInRvZ2dsZVwiLFxuICAgIHRvZ2dsZWQ6IFwidG9nZ2xlZFwiLFxuICAgIGluaXQ6IFwiaW5pdFwiLFxuICAgIHN0YXRlOiBcInN0YXRlXCIsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVE9HR0xFX0FUVFJJQlVURSA9IHtcbiAgZWxFdmVudE5hbWVzOiB7XG4gICAgcmVtb3ZlZDogXCJyZW1vdmVkXCIsXG4gICAgYWRkZWQ6IFwiYWRkZWRcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBUT0dHTEVfQ0xBU1MgPSB7XG4gIGVsRXZlbnROYW1lczoge1xuICAgIHJlbW92ZWQ6IFwicmVtb3ZlZFwiLFxuICAgIGFkZGVkOiBcImFkZGVkXCIsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVVJJX0FUVFJTID0gW1xuICBcImJhY2tncm91bmRcIixcbiAgXCJjaXRlXCIsXG4gIFwiaHJlZlwiLFxuICBcIml0ZW10eXBlXCIsXG4gIFwibG9uZ2Rlc2NcIixcbiAgXCJwb3N0ZXJcIixcbiAgXCJzcmNcIixcbiAgXCJ4bGluazpocmVmXCIsXG5dO1xuXG5leHBvcnQgY29uc3QgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pO1xuXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cbmV4cG9ydCBjb25zdCBTQUZFX1VSTF9QQVRURVJOID1cbiAgL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9naTtcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cbmV4cG9ydCBjb25zdCBEQVRBX1VSTF9QQVRURVJOID1cbiAgL15kYXRhOig/OmltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtKXxhdWRpb1xcLyg/Om1wM3xvZ2F8b2dnfG9wdXMpKTtiYXNlNjQsW1xcZCsvYS16XSs9KiQvaTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQUxMT1dMSVNUID0ge1xuICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICBcIipcIjogW1wiY2xhc3NcIiwgXCJkaXJcIiwgXCJpZFwiLCBcImxhbmdcIiwgXCJyb2xlXCIsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICBhOiBbXCJ0YXJnZXRcIiwgXCJocmVmXCIsIFwidGl0bGVcIiwgXCJyZWxcIl0sXG4gIGFyZWE6IFtdIGFzIHN0cmluZ1tdLFxuICBiOiBbXSBhcyBzdHJpbmdbXSxcbiAgYnI6IFtdIGFzIHN0cmluZ1tdLFxuICBjb2w6IFtdIGFzIHN0cmluZ1tdLFxuICBjb2RlOiBbXSBhcyBzdHJpbmdbXSxcbiAgZGl2OiBbXSBhcyBzdHJpbmdbXSxcbiAgZW06IFtdIGFzIHN0cmluZ1tdLFxuICBocjogW10gYXMgc3RyaW5nW10sXG4gIGgxOiBbXSBhcyBzdHJpbmdbXSxcbiAgaDI6IFtdIGFzIHN0cmluZ1tdLFxuICBoMzogW10gYXMgc3RyaW5nW10sXG4gIGg0OiBbXSBhcyBzdHJpbmdbXSxcbiAgaDU6IFtdIGFzIHN0cmluZ1tdLFxuICBoNjogW10gYXMgc3RyaW5nW10sXG4gIGk6IFtdIGFzIHN0cmluZ1tdLFxuICBpbWc6IFtcInNyY1wiLCBcInNyY3NldFwiLCBcImFsdFwiLCBcInRpdGxlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIl0sXG4gIGxpOiBbXSBhcyBzdHJpbmdbXSxcbiAgb2w6IFtdIGFzIHN0cmluZ1tdLFxuICBwOiBbXSBhcyBzdHJpbmdbXSxcbiAgcHJlOiBbXSBhcyBzdHJpbmdbXSxcbiAgczogW10gYXMgc3RyaW5nW10sXG4gIHNtYWxsOiBbXSBhcyBzdHJpbmdbXSxcbiAgc3BhbjogW10gYXMgc3RyaW5nW10sXG4gIHN1YjogW10gYXMgc3RyaW5nW10sXG4gIHN1cDogW10gYXMgc3RyaW5nW10sXG4gIHN0cm9uZzogW10gYXMgc3RyaW5nW10sXG4gIHU6IFtdIGFzIHN0cmluZ1tdLFxuICB1bDogW10gYXMgc3RyaW5nW10sXG59O1xuXG5leHBvcnQgY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwO1xuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fRU5EID0gXCJ0cmFuc2l0aW9uZW5kXCI7XG4iLCJleHBvcnQge307XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IGRvbS9kYXRhLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBtYXBEYXRhID0gKCgpID0+IHtcbiAgY29uc3Qgc3RvcmVEYXRhOiB7IFtpZDogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgbGV0IGlkID0gMTtcbiAgcmV0dXJuIHtcbiAgICBzZXQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5kYXRhc2V0LmtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBlbGVtZW50LmRhdGFzZXQua2V5ID0ga2V5O1xuICAgICAgICBlbGVtZW50LmRhdGFzZXQuaWQgPSBpZC50b1N0cmluZygpO1xuICAgICAgICBpZCsrO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnQuZGF0YXNldC5pZCkge1xuICAgICAgICBzdG9yZURhdGFbZWxlbWVudC5kYXRhc2V0LmlkXSA9IGRhdGE7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nKSB7XG4gICAgICBpZiAoIWVsZW1lbnQgfHwgdHlwZW9mIGVsZW1lbnQuZGF0YXNldC5rZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleVByb3BlcnRpZXMgPSB7XG4gICAgICAgIGtleTogZWxlbWVudC5kYXRhc2V0LmtleSxcbiAgICAgICAgaWQ6IGVsZW1lbnQuZGF0YXNldC5pZCxcbiAgICAgIH07XG4gICAgICBpZiAoXG4gICAgICAgIGtleVByb3BlcnRpZXMua2V5ID09PSBrZXkgJiZcbiAgICAgICAgdHlwZW9mIGtleVByb3BlcnRpZXMuaWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gc3RvcmVEYXRhW2tleVByb3BlcnRpZXMuaWRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGRlbGV0ZShlbGVtZW50OiBIVE1MRWxlbWVudCwga2V5OiBzdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5kYXRhc2V0LmtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleVByb3BlcnRpZXMgPSB7XG4gICAgICAgIGtleTogZWxlbWVudC5kYXRhc2V0LmtleSxcbiAgICAgICAgaWQ6IGVsZW1lbnQuZGF0YXNldC5pZCxcbiAgICAgIH07XG4gICAgICBpZiAoXG4gICAgICAgIGtleVByb3BlcnRpZXMua2V5ID09PSBrZXkgJiZcbiAgICAgICAgdHlwZW9mIGtleVByb3BlcnRpZXMuaWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICBkZWxldGUgc3RvcmVEYXRhW2tleVByb3BlcnRpZXMuaWRdO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kYXRhc2V0LmtleTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGNvbnN0IHNldERhdGEgPSAoaW5zdGFuY2U6IEhUTUxFbGVtZW50LCBrZXk6IHN0cmluZywgZGF0YTogYW55KSA9PiB7XG4gIG1hcERhdGEuc2V0KGluc3RhbmNlLCBrZXksIGRhdGEpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAoaW5zdGFuY2U6IEhUTUxFbGVtZW50LCBrZXk6IHN0cmluZykgPT4ge1xuICByZXR1cm4gbWFwRGF0YS5nZXQoaW5zdGFuY2UsIGtleSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlRGF0YSA9IChpbnN0YW5jZTogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nKSA9PiB7XG4gIG1hcERhdGEuZGVsZXRlKGluc3RhbmNlLCBrZXkpO1xufTtcbiIsIi8qKlxuICogc2VlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvanMvc3JjL2RvbS9ldmVudC1oYW5kbGVyLmpzXG4gKi9cblxuZXhwb3J0IGNvbnN0IG9uID0gKFxuICBlbGVtZW50OiBFbGVtZW50IHwgSFRNTEVsZW1lbnQgfCBEb2N1bWVudCB8IFdpbmRvdyxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3RcbikgPT4ge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSBhcyBhbnksIGhhbmRsZXIsIHt9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBvbmUgPSAoXG4gIGVsZW1lbnQ6IEVsZW1lbnQgfCBIVE1MRWxlbWVudCB8IERvY3VtZW50IHwgV2luZG93LFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgaGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdFxuKSA9PiB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lIGFzIGFueSwgaGFuZGxlciwgeyBvbmNlOiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IG9mZiA9IChcbiAgZWxlbWVudDogRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQgfCBXaW5kb3csXG4gIG9yaWdpbmFsVHlwZUV2ZW50OiBzdHJpbmcsXG4gIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3RcbikgPT4ge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG9yaWdpbmFsVHlwZUV2ZW50IGFzIGFueSwgaGFuZGxlcik7XG59O1xuXG5leHBvcnQgY29uc3QgdHJpZ2dlciA9IDxUID0gYW55PihcbiAgZWxlbWVudDogRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQgfCBXaW5kb3csXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBleHRyYVBhcmFtZXRlcnM6IGFueSA9IHt9XG4pID0+IHtcbiAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQ8VD4oZXZlbnROYW1lLCB7XG4gICAgZGV0YWlsOiBleHRyYVBhcmFtZXRlcnMsXG4gICAgYnViYmxlczogdHJ1ZSxcbiAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICB9KTtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2RhdGEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V2ZW50LWhhbmRsZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21hbmlwdWxhdG9yLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZWxlY3Rvci1lbmdpbmUuanNcIjtcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4wLWFscGhhMSk6IGRvbS9tYW5pcHVsYXRvci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vanMvc3JjL2RvbS9tYW5pcHVsYXRvci5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhKHZhbDogYW55KSB7XG4gIGlmICh2YWwgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodmFsID09PSBOdW1iZXIodmFsKS50b1N0cmluZygpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWwpO1xuICB9XG5cbiAgaWYgKHZhbCA9PT0gXCJcIiB8fCB2YWwgPT09IFwibnVsbFwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhS2V5KGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBrZXkucmVwbGFjZSgvW0EtWl0vZywgKGNocikgPT4gYC0ke2Noci50b0xvd2VyQ2FzZSgpfWApO1xufVxuXG5leHBvcnQgY29uc3Qgc2V0RGF0YUF0dHJpYnV0ZSA9IChcbiAgZWxlbWVudDogRWxlbWVudCB8IEhUTUxVbmtub3duRWxlbWVudCB8IEhUTUxFbGVtZW50LFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IHN0cmluZ1xuKSA9PiB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWAsIHZhbHVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVEYXRhQXR0cmlidXRlID0gKFxuICBlbGVtZW50OiBFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50IHwgSFRNTEVsZW1lbnQsXG4gIGtleTogc3RyaW5nXG4pID0+IHtcbiAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RGF0YUF0dHJpYnV0ZXMgPSAoXG4gIGVsZW1lbnQ6IEhUTUxVbmtub3duRWxlbWVudCB8IEhUTUxFbGVtZW50XG4pID0+IHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAuLi5lbGVtZW50LmRhdGFzZXQsXG4gIH07XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgYXR0cmlidXRlc1trZXldID0gbm9ybWFsaXplRGF0YShhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICByZXR1cm4gYXR0cmlidXRlcztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREYXRhQXR0cmlidXRlID0gKFxuICBlbGVtZW50OiBFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50IHwgSFRNTEVsZW1lbnQsXG4gIGtleTogc3RyaW5nXG4pID0+IHtcbiAgcmV0dXJuIG5vcm1hbGl6ZURhdGEoZWxlbWVudC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCkpO1xufTtcblxuZXhwb3J0IGNvbnN0IG9mZnNldCA9IChlbGVtZW50OiBFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50IHwgSFRNTEVsZW1lbnQpID0+IHtcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHJlY3QudG9wICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHBvc2l0aW9uID0gKGVsZW1lbnQ6IEhUTUxVbmtub3duRWxlbWVudCB8IEhUTUxFbGVtZW50KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgdG9nZ2xlQ2xhc3MgPSAoXG4gIGVsZW1lbnQ6IEVsZW1lbnQgfCBIVE1MVW5rbm93bkVsZW1lbnQgfCBIVE1MRWxlbWVudCxcbiAgY2xhc3NOYW1lOiBzdHJpbmdcbikgPT4ge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9XG59O1xuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4zLjEpOiBkb20vc2VsZWN0b3ItZW5naW5lLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9qcy9zcmMvZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuaW1wb3J0IHsgTk9ERV9URVhUIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuXG5pbXBvcnQgeyBtYWtlQXJyYXkgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGNvbnN0IG1hdGNoZXMgPSAoXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgKE5vZGUgJiBQYXJlbnROb2RlKSxcbiAgc2VsZWN0b3I6IHN0cmluZ1xuKSA9PiB7XG4gIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbmQgPSAoc2VsZWN0b3I6IHN0cmluZywgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgPT4ge1xuICByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKFxuICAgIGVsZW1lbnQsXG4gICAgc2VsZWN0b3JcbiAgKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50Pjtcbn07XG5cbmV4cG9ydCBjb25zdCBmaW5kT25lID0gKFxuICBzZWxlY3Rvcjogc3RyaW5nLFxuICBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4pID0+IHtcbiAgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChcbiAgICBlbGVtZW50LFxuICAgIHNlbGVjdG9yXG4gICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGNoaWxkcmVuID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWFrZUFycmF5KGVsZW1lbnQuY2hpbGRyZW4pO1xuICByZXR1cm4gY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT4gbWF0Y2hlcyhjaGlsZCwgc2VsZWN0b3IpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJlbnRzID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTtcblxuICBsZXQgYW5jZXN0b3IgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgd2hpbGUgKFxuICAgIGFuY2VzdG9yICYmXG4gICAgYW5jZXN0b3Iubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXG4gICAgYW5jZXN0b3Iubm9kZVR5cGUgIT09IE5PREVfVEVYVFxuICApIHtcbiAgICBpZiAobWF0Y2hlcyhhbmNlc3Rvciwgc2VsZWN0b3IpKSB7XG4gICAgICBwYXJlbnRzLnB1c2goYW5jZXN0b3IpO1xuICAgIH1cblxuICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IGNsb3Nlc3QgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59O1xuXG5leHBvcnQgY29uc3QgcHJldiA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgc2VsZWN0b3I6IHN0cmluZykgPT4ge1xuICBjb25zdCBzaWJsaW5ncyA9IFtdO1xuXG4gIGxldCBwcmV2aW91cyA9IGVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xuXG4gIHdoaWxlIChcbiAgICBwcmV2aW91cyAmJlxuICAgIHByZXZpb3VzLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgIHByZXZpb3VzLm5vZGVUeXBlICE9PSBOT0RFX1RFWFRcbiAgKSB7XG4gICAgaWYgKG1hdGNoZXMocHJldmlvdXMgYXMgSFRNTEVsZW1lbnQsIHNlbGVjdG9yKSkge1xuICAgICAgc2libGluZ3MucHVzaChwcmV2aW91cyk7XG4gICAgfVxuXG4gICAgcHJldmlvdXMgPSBwcmV2aW91cy5wcmV2aW91c1NpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gc2libGluZ3M7XG59O1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vZG9tL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zYW5pdGl6ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzLmpzXCI7XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMC1hbHBoYTEpOiB1dGlsL3Nhbml0aXplci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vanMvc3JjL3V0aWwvc2FuaXRpemVyLmpzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIFVSSV9BVFRSUyxcbiAgREFUQV9VUkxfUEFUVEVSTixcbiAgU0FGRV9VUkxfUEFUVEVSTixcbn0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuXG4vLyBUT0RPIGNoZWNrIHR5cGVcbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZUxpc3QgPSAoc3RyaW5nIHwgUmVnRXhwKVtdO1xuZXhwb3J0IHR5cGUgQWxsb3dMaXN0ID0geyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuZXhwb3J0IGNvbnN0IGFsbG93ZWRBdHRyaWJ1dGUgPSAoXG4gIGF0dHI6IE5vZGUsXG4gIGFsbG93ZWRBdHRyaWJ1dGVMaXN0OiBBdHRyaWJ1dGVMaXN0XG4pID0+IHtcbiAgY29uc3QgYXR0ck5hbWUgPSBhdHRyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmluZGV4T2YoYXR0ck5hbWUpICE9PSAtMSkge1xuICAgIGlmIChVUklfQVRUUlMuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgICAgYXR0ci5ub2RlVmFsdWU/Lm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8XG4gICAgICAgICAgYXR0ci5ub2RlVmFsdWU/Lm1hdGNoKERBVEFfVVJMX1BBVFRFUk4pXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgcmVnRXhwID0gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKFxuICAgIChhdHRyUmVnZXgpID0+IGF0dHJSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cFxuICApO1xuXG4gIC8vIENoZWNrIGlmIGEgcmVndWxhciBleHByZXNzaW9uIHZhbGlkYXRlcyB0aGUgYXR0cmlidXRlLlxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVnRXhwLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGF0dHJOYW1lLm1hdGNoKHJlZ0V4cFtpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwoXG4gIHVuc2FmZUh0bWw6IHN0cmluZyxcbiAgYWxsb3dMaXN0OiBBbGxvd0xpc3QsXG4gIHNhbml0aXplRm4/OiAodW5zYWZlSHRtbDogc3RyaW5nKSA9PiBzdHJpbmdcbikge1xuICBpZiAoIXVuc2FmZUh0bWwubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHVuc2FmZUh0bWw7XG4gIH1cblxuICBpZiAoc2FuaXRpemVGbiAmJiB0eXBlb2Ygc2FuaXRpemVGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbCk7XG4gIH1cblxuICBjb25zdCBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBjb25zdCBhbGxvd2xpc3RLZXlzID0gT2JqZWN0LmtleXMoYWxsb3dMaXN0KTtcbiAgLy8gY29uc3QgZWxlbWVudHMgPSBbXS5jb25jYXQoLi4uY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIipcIikpO1xuICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIipcIikpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGVsID0gZWxlbWVudHNbaV07XG4gICAgY29uc3QgZWxOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChhbGxvd2xpc3RLZXlzLmluZGV4T2YoZWxOYW1lKSA9PT0gLTEpIHtcbiAgICAgIGVsPy5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChlbCk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnN0IGF0dHJpYnV0ZUxpc3QgPSBbXS5jb25jYXQoLi4uZWwuYXR0cmlidXRlcyk7XG4gICAgY29uc3QgYXR0cmlidXRlTGlzdCA9IEFycmF5LmZyb20oZWwuYXR0cmlidXRlcyk7XG4gICAgLy8gY29uc3QgYWxsb3dlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoXG4gICAgLy8gICBhbGxvd0xpc3RbXCIqXCJdIHx8IFtdLFxuICAgIC8vICAgYWxsb3dMaXN0W2VsTmFtZV0gfHwgW11cbiAgICAvLyApO1xuICAgIGNvbnN0IGFsbG93ZWRBdHRyaWJ1dGVzOiBBdHRyaWJ1dGVMaXN0ID1cbiAgICAgIGFsbG93TGlzdFtcIipcIl0gfHwgYWxsb3dMaXN0W2VsTmFtZV0gfHwgW107XG5cbiAgICBhdHRyaWJ1dGVMaXN0LmZvckVhY2goKGF0dHIpID0+IHtcbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyLCBhbGxvd2VkQXR0cmlidXRlcykpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIubm9kZU5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbn1cbiIsIi8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL2pzL3NyYy91dGlsL2luZGV4LmpzXG5cbmltcG9ydCB7IE1JTExJU0VDT05EU19NVUxUSVBMSUVSLCBUUkFOU0lUSU9OX0VORCB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHRvVHlwZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RvciA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdGFyZ2V0XCIpO1xuXG4gIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiI1wiKSB7XG4gICAgY29uc3QgaHJlZkF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cbiAgICBzZWxlY3RvciA9IGhyZWZBdHRyICYmIGhyZWZBdHRyICE9PSBcIiNcIiA/IGhyZWZBdHRyLnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpO1xuXG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcblxuICByZXR1cm4gKFxuICAgIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsXG4gICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgbGV0IHsgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uRGVsYXkgfSA9XG4gICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbik7XG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpO1xuXG4gIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcbiAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KFwiLFwiKVswXTtcbiAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KFwiLFwiKVswXTtcblxuICByZXR1cm4gKFxuICAgIChwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKyBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICpcbiAgICBNSUxMSVNFQ09ORFNfTVVMVElQTElFUlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHRyaWdnZXJUcmFuc2l0aW9uRW5kID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKTtcblxuICBldnQuaW5pdEV2ZW50KFRSQU5TSVRJT05fRU5ELCB0cnVlLCB0cnVlKTtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKG9iajogRWxlbWVudCB8IEVsZW1lbnRbXSkgPT4ge1xuICByZXR1cm4gKChvYmogYXMgRWxlbWVudFtdKVswXSB8fCAob2JqIGFzIEVsZW1lbnQpKS5ub2RlVHlwZTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbXVsYXRlVHJhbnNpdGlvbkVuZCA9IChcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gIGR1cmF0aW9uOiBudW1iZXJcbikgPT4ge1xuICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gIGNvbnN0IGR1cmF0aW9uUGFkZGluZyA9IDU7XG4gIGNvbnN0IGVtdWxhdGVkRHVyYXRpb24gPSBkdXJhdGlvbiArIGR1cmF0aW9uUGFkZGluZztcbiAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihUUkFOU0lUSU9OX0VORCwgbGlzdGVuZXIpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCk7XG4gICAgfVxuICB9LCBlbXVsYXRlZER1cmF0aW9uKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnROYW1lXG4gKiBAcGFyYW0gY29uZmlnXG4gKiBAcGFyYW0gY29uZmlnVHlwZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVDaGVja0NvbmZpZyA9IChcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICBjb25maWc6IGFueSxcbiAgY29uZmlnVHlwZXM6IGFueVxuKSA9PiB7XG4gIGZvciAoY29uc3QgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG4gICAgICBjb25zdCB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBpc0VsZW1lbnQodmFsdWUpID8gXCJlbGVtZW50XCIgOiB0b1R5cGUodmFsdWUpO1xuXG4gICAgICBpZiAoIXZhbHVlVHlwZSB8fCAhbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGAke2NvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKX06IGAgK1xuICAgICAgICAgICAgYE9wdGlvbiBcIiR7cHJvcGVydHl9XCIgcHJvdmlkZWQgdHlwZSBcIiR7dmFsdWVUeXBlfVwiIGAgK1xuICAgICAgICAgICAgYGJ1dCBleHBlY3RlZCB0eXBlIFwiJHtleHBlY3RlZFR5cGVzfVwiLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBtYWtlQXJyYXkgPSAoXG4gIG5vZGVMaXN0OiBOb2RlTGlzdCB8IEhUTUxDb2xsZWN0aW9uXG4pOiBIVE1MRWxlbWVudFtdID0+IHtcbiAgaWYgKCFub2RlTGlzdCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBbXS5zbGljZS5jYWxsKG5vZGVMaXN0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Zpc2libGUgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFxuICAgIGVsZW1lbnQuc3R5bGUgJiZcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgJiZcbiAgICAoZWxlbWVudC5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50KS5zdHlsZVxuICApIHtcbiAgICBjb25zdCBlbGVtZW50U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHBhcmVudE5vZGVTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudC5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50KTtcblxuICAgIHJldHVybiAoXG4gICAgICBlbGVtZW50U3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIgJiZcbiAgICAgIHBhcmVudE5vZGVTdHlsZS5kaXNwbGF5ICE9PSBcIm5vbmVcIiAmJlxuICAgICAgZWxlbWVudFN0eWxlLnZpc2liaWxpdHkgIT09IFwiaGlkZGVuXCJcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbmRTaGFkb3dSb290ID0gKFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IChOb2RlICYgUGFyZW50Tm9kZSlcbik6IEhUTUxFbGVtZW50IHwgKE5vZGUgJiBQYXJlbnROb2RlKSB8IG51bGwgPT4ge1xuICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG4gIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZmluZFNoYWRvd1Jvb3QoZWxlbWVudC5wYXJlbnROb2RlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8qKiBub3RoaW5nICovXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmVmbG93ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRqUXVlcnkgPSAoKSA9PiB7XG4gIGNvbnN0IHsgalF1ZXJ5IH0gPSB3aW5kb3cgYXMgYW55O1xuXG4gIGlmIChqUXVlcnkgJiYgIWRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKFwiZGF0YS1uby1qcXVlcnlcIikpIHtcbiAgICByZXR1cm4galF1ZXJ5O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudHMvaW5kZXguanNcIjtcbi8vIGV4cG9ydCAqIGFzIGZvcm1hdHRlcnMgZnJvbSAnLi9mb3JtYXR0ZXJzL2JzNC5mb3JtYXR0ZXJzJztcbmV4cG9ydCAqIGZyb20gXCIuL2ludGVyZmFjZXMvaW5kZXguanNcIjtcbi8vIGV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgYnM0TW9kdWxlIH0gZnJvbSBcIi4vYnM0Lm1vZHVsZS5qc1wiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vY2Fyb3VzZWwtY2xhc3MtbmFtZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2Fyb3VzZWwtZGlyZWN0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jYXJvdXNlbC1vcHRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbGxhcHNlLW9uLWV2ZW50LWJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29sb3ItcGlja2VyLW9wdGlvbnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZGFsLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGUtb3B0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbm90aWZpY2F0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wbGFjZW1lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvcG92ZXItb3B0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hhcmUtaXRlbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2lkZWJhci1jb21wb25lbnQtc2NvcGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NpZGViYXItY29tcG9uZW50LXN0YXRlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90YWdnZWQtaW1hZ2UtdGFnLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b2FzdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9nZ2xlLWF0dHJpYnV0ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9nZ2xlLWNsYXNzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b29sdGlwLW9wdGlvbnMuanNcIjtcbiIsImltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi5qc1wiO1xuaW1wb3J0IHsgTW9kYWxTZXJ2aWNlLCBDb25maWcgfSBmcm9tIFwiLi4vc2VydmljZXMvbW9kYWwuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvbiB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBkaXNwbGF5ZWQgaW4gdGhlIGJ1dHRvbi5cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCBpbiB0aGUgc2NvcGUgd2hpY2ggc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxuICAgKi9cbiAgYWN0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBCb290c3RyYXAgYnV0dG9uIGNsYXNzIGUuZy4gYnRuLXByaW1hcnksIGJ0bi1zZWNvbmRhcnksIGJ0bi1zdWNjZXNzLCBidG4tb3V0bGluZS1wcmltYXJ5LCBidG4tb3V0bGluZS1zZWNvbmRhcnksIGJ0bi1sZyBhbmQgc28gb24uLi5cbiAgICovXG4gIGNsYXNzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBOb3RpZmljYXRpb24gaW1wbGVtZW50cyBDb25maWcge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGljb25Vcmw/OiBzdHJpbmc7XG5cbiAgZm9jdXM/OiBib29sZWFuO1xuICBrZXlib2FyZD86IGJvb2xlYW47XG4gIGJhY2tkcm9wPzogYm9vbGVhbiB8IFwic3RhdGljXCI7XG4gIHNob3c/OiBib29sZWFuO1xuXG4gIGJ1dHRvbnM6IEJ1dHRvbltdID0gW107XG5cbiAgbW9kYWxTZXJ2aWNlPzogTW9kYWxTZXJ2aWNlO1xuICBjb250ZXh0dWFsQ2xhc3M/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2UsXG4gICAgaWNvblVybCxcblxuICAgIGZvY3VzLFxuICAgIGtleWJvYXJkLFxuICAgIGJhY2tkcm9wLFxuICAgIHNob3csXG5cbiAgICBidXR0b25zLFxuXG4gICAgbW9kYWxTZXJ2aWNlLFxuICAgIGNvbnRleHR1YWxDbGFzcyxcbiAgICBjaGFubmVsLFxuICAgICRldmVudCxcbiAgICAkY29udGV4dCxcbiAgfToge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBpY29uVXJsPzogc3RyaW5nO1xuXG4gICAgZm9jdXM/OiBib29sZWFuO1xuICAgIGtleWJvYXJkPzogYm9vbGVhbjtcbiAgICBiYWNrZHJvcD86IGJvb2xlYW4gfCBcInN0YXRpY1wiO1xuICAgIHNob3c/OiBib29sZWFuO1xuXG4gICAgYnV0dG9ucz86IEJ1dHRvbltdO1xuXG4gICAgbW9kYWxTZXJ2aWNlPzogTW9kYWxTZXJ2aWNlO1xuICAgIGNvbnRleHR1YWxDbGFzcz86IHN0cmluZztcbiAgICBjaGFubmVsPzogc3RyaW5nO1xuICAgICRldmVudD86IEN1c3RvbUV2ZW50O1xuICAgICRjb250ZXh0PzogYW55O1xuICB9KSB7XG4gICAgc3VwZXIoXCJtb2RhbFwiLCB0aXRsZSk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmljb25VcmwgPSBpY29uVXJsO1xuXG4gICAgdGhpcy5mb2N1cyA9IGZvY3VzO1xuICAgIHRoaXMua2V5Ym9hcmQgPSBrZXlib2FyZDtcbiAgICB0aGlzLmJhY2tkcm9wID0gYmFja2Ryb3A7XG4gICAgdGhpcy5zaG93ID0gc2hvdztcblxuICAgIHRoaXMuYnV0dG9ucyA9IGJ1dHRvbnMgfHwgW107XG5cbiAgICB0aGlzLm1vZGFsU2VydmljZSA9IG1vZGFsU2VydmljZTtcbiAgICB0aGlzLmNvbnRleHR1YWxDbGFzcyA9IGNvbnRleHR1YWxDbGFzcztcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgIHRoaXMuJGV2ZW50ID0gJGV2ZW50O1xuICAgIHRoaXMuJGNvbnRleHQgPSAkY29udGV4dDtcbiAgfVxufVxuIiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5vdGlmaWNhdGlvbiBpbXBsZW1lbnRzIEV2ZW50QmluZGVyRGF0YSB7XG4gIHR5cGU6IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgY2hhbm5lbD86IHN0cmluZztcbiAgJGV2ZW50PzogQ3VzdG9tRXZlbnQ7XG4gICRjb250ZXh0PzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50QmluZGVyRGF0YSB7XG4gIGNoYW5uZWw/OiBzdHJpbmc7XG4gICRldmVudD86IEN1c3RvbUV2ZW50O1xuICAkY29udGV4dD86IGFueTtcbn1cbiIsImltcG9ydCB7IFRvYXN0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBUb2FzdCBleHRlbmRzIE5vdGlmaWNhdGlvbiB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgaWNvblVybD86IHN0cmluZztcbiAgZGVsYXk/OiBudW1iZXI7XG4gIGF1dG9IaWRlPzogYm9vbGVhbjtcbiAgYW5pbWF0aW9uPzogYm9vbGVhbjtcbiAgdG9hc3RTZXJ2aWNlPzogVG9hc3RTZXJ2aWNlO1xuICBjb250ZXh0dWFsQ2xhc3M/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2UsXG4gICAgaWNvblVybCxcbiAgICBkZWxheSxcbiAgICBhdXRvSGlkZSxcbiAgICBhbmltYXRpb24sXG4gICAgdG9hc3RTZXJ2aWNlLFxuICAgIGNvbnRleHR1YWxDbGFzcyxcbiAgICBjaGFubmVsLFxuICAgICRldmVudCxcbiAgICAkY29udGV4dCxcbiAgfToge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBpY29uVXJsPzogc3RyaW5nO1xuICAgIGRlbGF5PzogbnVtYmVyO1xuICAgIGF1dG9IaWRlPzogYm9vbGVhbjtcbiAgICBhbmltYXRpb24/OiBib29sZWFuO1xuICAgIHRvYXN0U2VydmljZT86IFRvYXN0U2VydmljZTtcbiAgICBjb250ZXh0dWFsQ2xhc3M/OiBzdHJpbmc7XG4gICAgY2hhbm5lbD86IHN0cmluZztcbiAgICAkZXZlbnQ/OiBDdXN0b21FdmVudDtcbiAgICAkY29udGV4dD86IGFueTtcbiAgfSkge1xuICAgIHN1cGVyKFwidG9hc3RcIiwgdGl0bGUpO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5pY29uVXJsID0gaWNvblVybDtcbiAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgdGhpcy5hdXRvSGlkZSA9IGF1dG9IaWRlO1xuICAgIHRoaXMuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuICAgIHRoaXMudG9hc3RTZXJ2aWNlID0gdG9hc3RTZXJ2aWNlO1xuICAgIHRoaXMuY29udGV4dHVhbENsYXNzID0gY29udGV4dHVhbENsYXNzO1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgdGhpcy4kZXZlbnQgPSAkZXZlbnQ7XG4gICAgdGhpcy4kY29udGV4dCA9ICRjb250ZXh0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBCczRNb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIEJzNFNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgc3RhdGljIF9vcHRpb25zOiBCczRNb2R1bGVPcHRpb25zO1xuICBwdWJsaWMgc3RhdGljIGluc3RhbmNlPzogQnM0U2VydmljZTtcblxuICBwdWJsaWMgc3RhdGljIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xuICAgIC8qKi9cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U2luZ2xldG9uKCkge1xuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgU2luZ2xldG9uIG9mIEJzNFNlcnZpY2Ugbm90IGRlZmluZWQsIHBsZWFzZSBjYWxsIHNldFNpbmdsZXRvbiBmaXJzdCFgXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0U2luZ2xldG9uKG9wdGlvbnM6IEJzNE1vZHVsZU9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpbmdsZXRvbiBvZiBCczRTZXJ2aWNlIGFscmVhZHkgZGVmaW5lZCFgKTtcbiAgICB9XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IENhcm91c2VsT3B0aW9uIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY2Fyb3VzZWwtb3B0aW9uLmpzXCI7XG5pbXBvcnQgeyBDYXJvdXNlbERpcmVjdGlvbiB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2Nhcm91c2VsLWRpcmVjdGlvbi5qc1wiO1xuaW1wb3J0IHsgQ2Fyb3VzZWxDbGFzc05hbWUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jYXJvdXNlbC1jbGFzcy1uYW1lLmpzXCI7XG5pbXBvcnQgeyBUUkFOU0lUSU9OX0VORCB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4zLjEpOiBjYXJvdXNlbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgdHlwZUNoZWNrQ29uZmlnLFxuICBtYWtlQXJyYXksXG4gIHJlZmxvdyxcbiAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQsXG4gIGVtdWxhdGVUcmFuc2l0aW9uRW5kLFxuICBpc1Zpc2libGUsXG4gIHRyaWdnZXJUcmFuc2l0aW9uRW5kLFxufSBmcm9tIFwiLi4vaGVscGVyL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBvbiwgb25lLCBvZmYsIHRyaWdnZXIgfSBmcm9tIFwiLi4vaGVscGVyL2RvbS9ldmVudC1oYW5kbGVyLmpzXCI7XG5pbXBvcnQgeyBmaW5kT25lLCBmaW5kIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vc2VsZWN0b3ItZW5naW5lLmpzXCI7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSBcImNhcm91c2VsXCI7XG5jb25zdCBEQVRBX0tFWSA9IFwiYnMuY2Fyb3VzZWxcIjtcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xuY29uc3QgREFUQV9BUElfS0VZID0gXCIuZGF0YS1hcGlcIjtcbmNvbnN0IEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuY29uc3QgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcbmNvbnN0IFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuY29uc3QgU1dJUEVfVEhSRVNIT0xEID0gNDA7XG5cbmNvbnN0IERlZmF1bHQ6IENhcm91c2VsT3B0aW9uID0ge1xuICBpbnRlcnZhbDogNTAwMCxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHNsaWRlOiBmYWxzZSxcbiAgcGF1c2U6IFwiaG92ZXJcIixcbiAgd3JhcDogdHJ1ZSxcbiAgdG91Y2g6IHRydWUsXG59O1xuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgaW50ZXJ2YWw6IFwiKG51bWJlcnxib29sZWFuKVwiLFxuICBrZXlib2FyZDogXCJib29sZWFuXCIsXG4gIHNsaWRlOiBcIihib29sZWFufHN0cmluZylcIixcbiAgcGF1c2U6IFwiKHN0cmluZ3xib29sZWFuKVwiLFxuICB3cmFwOiBcImJvb2xlYW5cIixcbiAgdG91Y2g6IFwiYm9vbGVhblwiLFxufTtcblxuY29uc3QgRGlyZWN0aW9uID0ge1xuICBORVhUOiBcIm5leHRcIiBhcyBDYXJvdXNlbERpcmVjdGlvbixcbiAgUFJFVjogXCJwcmV2XCIgYXMgQ2Fyb3VzZWxEaXJlY3Rpb24sXG4gIExFRlQ6IFwibGVmdFwiIGFzIENhcm91c2VsRGlyZWN0aW9uLFxuICBSSUdIVDogXCJyaWdodFwiIGFzIENhcm91c2VsRGlyZWN0aW9uLFxufTtcblxuY29uc3QgRXZlbnQgPSB7XG4gIFNMSURFOiBgc2xpZGUke0VWRU5UX0tFWX1gLFxuICBTTElEOiBgc2xpZCR7RVZFTlRfS0VZfWAsXG4gIEtFWURPV046IGBrZXlkb3duJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxuICBNT1VTRUxFQVZFOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWAsXG4gIFRPVUNIU1RBUlQ6IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVl9YCxcbiAgVE9VQ0hNT1ZFOiBgdG91Y2htb3ZlJHtFVkVOVF9LRVl9YCxcbiAgVE9VQ0hFTkQ6IGB0b3VjaGVuZCR7RVZFTlRfS0VZfWAsXG4gIFBPSU5URVJET1dOOiBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWX1gLFxuICBQT0lOVEVSVVA6IGBwb2ludGVydXAke0VWRU5UX0tFWX1gLFxuICBEUkFHX1NUQVJUOiBgZHJhZ3N0YXJ0JHtFVkVOVF9LRVl9YCxcbiAgTE9BRF9EQVRBX0FQSTogYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSTogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YCxcbn07XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgQ0FST1VTRUw6IFwiY2Fyb3VzZWxcIiBhcyBDYXJvdXNlbENsYXNzTmFtZSxcbiAgQUNUSVZFOiBcImFjdGl2ZVwiIGFzIENhcm91c2VsQ2xhc3NOYW1lLFxuICBTTElERTogXCJzbGlkZVwiIGFzIENhcm91c2VsQ2xhc3NOYW1lLFxuICBSSUdIVDogXCJjYXJvdXNlbC1pdGVtLXJpZ2h0XCIgYXMgQ2Fyb3VzZWxDbGFzc05hbWUsXG4gIExFRlQ6IFwiY2Fyb3VzZWwtaXRlbS1sZWZ0XCIgYXMgQ2Fyb3VzZWxDbGFzc05hbWUsXG4gIE5FWFQ6IFwiY2Fyb3VzZWwtaXRlbS1uZXh0XCIgYXMgQ2Fyb3VzZWxDbGFzc05hbWUsXG4gIFBSRVY6IFwiY2Fyb3VzZWwtaXRlbS1wcmV2XCIgYXMgQ2Fyb3VzZWxDbGFzc05hbWUsXG4gIElURU06IFwiY2Fyb3VzZWwtaXRlbVwiIGFzIENhcm91c2VsQ2xhc3NOYW1lLFxuICBQT0lOVEVSX0VWRU5UOiBcInBvaW50ZXItZXZlbnRcIiBhcyBDYXJvdXNlbENsYXNzTmFtZSxcbn07XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBBQ1RJVkU6IFwiLmFjdGl2ZVwiLFxuICBBQ1RJVkVfSVRFTTogXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIixcbiAgSVRFTTogXCIuY2Fyb3VzZWwtaXRlbVwiLFxuICBJVEVNX0lNRzogXCIuY2Fyb3VzZWwtaXRlbSBpbWdcIixcbiAgTkVYVF9QUkVWOiBcIi5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXZcIixcbiAgSU5ESUNBVE9SUzogXCIuY2Fyb3VzZWwtaW5kaWNhdG9yc1wiLFxufTtcblxuY29uc3QgUG9pbnRlclR5cGUgPSB7XG4gIFRPVUNIOiBcInRvdWNoXCIsXG4gIFBFTjogXCJwZW5cIixcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY2xhc3MgQ2Fyb3VzZWxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBpdGVtczogSFRNTEVsZW1lbnRbXSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGludGVydmFsOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBhY3RpdmVFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGlzUGF1c2VkID0gZmFsc2U7XG4gIHByaXZhdGUgaXNTbGlkaW5nID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBjb25maWc6IENhcm91c2VsT3B0aW9uO1xuICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGluZGljYXRvcnNFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIHByaXZhdGUgdG91Y2hTdXBwb3J0ZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgcG9pbnRlckV2ZW50OiBib29sZWFuO1xuXG4gIHB1YmxpYyB0b3VjaFRpbWVvdXQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBwdWJsaWMgdG91Y2hTdGFydFggPSAwO1xuICBwdWJsaWMgdG91Y2hEZWx0YVggPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25maWc6IENhcm91c2VsT3B0aW9uKSB7XG4gICAgdGhpcy5jb25maWcgPSB0aGlzLmdldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbmRpY2F0b3JzRWxlbWVudCA9XG4gICAgICAoZmluZE9uZShTZWxlY3Rvci5JTkRJQ0FUT1JTLCB0aGlzLmVsZW1lbnQpIGFzIEhUTUxFbGVtZW50KSB8fCBudWxsO1xuICAgIHRoaXMudG91Y2hTdXBwb3J0ZWQgPVxuICAgICAgXCJvbnRvdWNoc3RhcnRcIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHxcbiAgICAgIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDA7XG4gICAgdGhpcy5wb2ludGVyRXZlbnQgPSAhIShcbiAgICAgIHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgKHdpbmRvdyBhcyBhbnkpLk1TUG9pbnRlckV2ZW50XG4gICAgKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQ7XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICBuZXh0KCkge1xuICAgIGlmICghdGhpcy5pc1NsaWRpbmcpIHtcbiAgICAgIHRoaXMuc2xpZGUoRGlyZWN0aW9uLk5FWFQpO1xuICAgIH1cbiAgfVxuXG4gIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmIGlzVmlzaWJsZSh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIGlmICghdGhpcy5pc1NsaWRpbmcpIHtcbiAgICAgIHRoaXMuc2xpZGUoRGlyZWN0aW9uLlBSRVYpO1xuICAgIH1cbiAgfVxuXG4gIHBhdXNlKGV2ZW50PzogRXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZmluZE9uZShTZWxlY3Rvci5ORVhUX1BSRVYsIHRoaXMuZWxlbWVudCkpIHtcbiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuZWxlbWVudCk7XG4gICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgIH1cblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCB8fCB1bmRlZmluZWQpO1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsO1xuICB9XG5cbiAgY3ljbGUoZXZlbnQ/OiBFdmVudCB8IChUb3VjaEV2ZW50ICYgTW91c2VFdmVudCAmIFBvaW50ZXJFdmVudCkgfCBib29sZWFuKSB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnICYmIHRoaXMuY29uZmlnLmludGVydmFsICYmICF0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLmludGVydmFsID0gd2luZG93LnNldEludGVydmFsKFxuICAgICAgICAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQoXG4gICAgICAgICAgdGhpc1xuICAgICAgICApLFxuICAgICAgICB0aGlzLmNvbmZpZy5pbnRlcnZhbFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB0byhpbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuaXRlbXMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGl0ZW1zIGZvdW5kIVwiKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID1cbiAgICAgIChmaW5kT25lKFNlbGVjdG9yLkFDVElWRV9JVEVNLCB0aGlzLmVsZW1lbnQpIGFzIEhUTUxFbGVtZW50KSB8fCBudWxsO1xuICAgIGlmICh0aGlzLmFjdGl2ZUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFjdGl2ZSBlbGVtZW50IG5vdCBmb3VuZCFcIik7XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy5hY3RpdmVFbGVtZW50KTtcblxuICAgIGlmIChpbmRleCA+IHRoaXMuaXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NsaWRpbmcpIHtcbiAgICAgIG9uZSh0aGlzLmVsZW1lbnQsIEV2ZW50LlNMSUQsICgpID0+IHRoaXMudG8oaW5kZXgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uOiBDYXJvdXNlbERpcmVjdGlvbiA9XG4gICAgICBpbmRleCA+IGFjdGl2ZUluZGV4ID8gRGlyZWN0aW9uLk5FWFQgOiBEaXJlY3Rpb24uUFJFVjtcblxuICAgIHRoaXMuc2xpZGUoZGlyZWN0aW9uLCB0aGlzLml0ZW1zW2luZGV4XSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVvdXQgfHwgdW5kZWZpbmVkKTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwgfHwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBwcml2YXRlIGdldENvbmZpZyhjb25maWc6IENhcm91c2VsT3B0aW9uKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9IGFzIENhcm91c2VsT3B0aW9uO1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTd2lwZSgpIHtcbiAgICBjb25zdCBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcblxuICAgIGlmIChhYnNEZWx0YXggPD0gU1dJUEVfVEhSRVNIT0xEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWDtcblxuICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuXG4gICAgLy8gc3dpcGUgbGVmdFxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB0aGlzLnByZXYoKTtcbiAgICB9XG5cbiAgICAvLyBzd2lwZSByaWdodFxuICAgIGlmIChkaXJlY3Rpb24gPCAwKSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMua2V5ZG93biA9IHRoaXMua2V5ZG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMucGF1c2UgPSB0aGlzLnBhdXNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jeWNsZSA9IHRoaXMuY3ljbGUuYmluZCh0aGlzKTtcbiAgICBpZiAodGhpcy5jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgIG9uKHRoaXMuZWxlbWVudCwgRXZlbnQuS0VZRE9XTiwgdGhpcy5rZXlkb3duKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcucGF1c2UgPT09IFwiaG92ZXJcIikge1xuICAgICAgb24odGhpcy5lbGVtZW50LCBFdmVudC5NT1VTRUVOVEVSLCB0aGlzLnBhdXNlKTtcbiAgICAgIG9uKHRoaXMuZWxlbWVudCwgRXZlbnQuTU9VU0VMRUFWRSwgdGhpcy5jeWNsZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLnRvdWNoICYmIHRoaXMudG91Y2hTdXBwb3J0ZWQpIHtcbiAgICAgIHRoaXMuYWRkVG91Y2hFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLm9uVG91Y2hTdGFydCA9IHRoaXMub25Ub3VjaFN0YXJ0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblRvdWNoTW92ZSA9IHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVG91Y2hFbmQgPSB0aGlzLm9uVG91Y2hFbmQuYmluZCh0aGlzKTtcbiAgICBtYWtlQXJyYXkoZmluZChTZWxlY3Rvci5JVEVNX0lNRywgdGhpcy5lbGVtZW50KSkuZm9yRWFjaCgoaXRlbUltZykgPT4ge1xuICAgICAgb24oaXRlbUltZywgRXZlbnQuRFJBR19TVEFSVCwgdGhpcy5wcmV2ZW50RHJhZyk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5wb2ludGVyRXZlbnQpIHtcbiAgICAgIG9uKHRoaXMuZWxlbWVudCwgRXZlbnQuUE9JTlRFUkRPV04sIHRoaXMub25Ub3VjaFN0YXJ0KTtcbiAgICAgIG9uKHRoaXMuZWxlbWVudCwgRXZlbnQuUE9JTlRFUlVQLCB0aGlzLm9uVG91Y2hFbmQpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuUE9JTlRFUl9FVkVOVCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uKHRoaXMuZWxlbWVudCwgRXZlbnQuVE9VQ0hTVEFSVCwgdGhpcy5vblRvdWNoU3RhcnQpO1xuICAgICAgb24odGhpcy5lbGVtZW50LCBFdmVudC5UT1VDSE1PVkUsIHRoaXMub25Ub3VjaE1vdmUpO1xuICAgICAgb24odGhpcy5lbGVtZW50LCBFdmVudC5UT1VDSEVORCwgdGhpcy5vblRvdWNoRW5kKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5rZXlib2FyZCkge1xuICAgICAgb2ZmKHRoaXMuZWxlbWVudCwgRXZlbnQuS0VZRE9XTiwgdGhpcy5rZXlkb3duKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcucGF1c2UgPT09IFwiaG92ZXJcIikge1xuICAgICAgb2ZmKHRoaXMuZWxlbWVudCwgRXZlbnQuTU9VU0VFTlRFUiwgdGhpcy5wYXVzZSk7XG4gICAgICBvZmYodGhpcy5lbGVtZW50LCBFdmVudC5NT1VTRUxFQVZFLCB0aGlzLmN5Y2xlKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZVRvdWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICBtYWtlQXJyYXkoZmluZChTZWxlY3Rvci5JVEVNX0lNRywgdGhpcy5lbGVtZW50KSkuZm9yRWFjaCgoaXRlbUltZykgPT4ge1xuICAgICAgb2ZmKGl0ZW1JbWcsIEV2ZW50LkRSQUdfU1RBUlQsIHRoaXMucHJldmVudERyYWcpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnBvaW50ZXJFdmVudCkge1xuICAgICAgb2ZmKHRoaXMuZWxlbWVudCwgRXZlbnQuUE9JTlRFUkRPV04sIHRoaXMub25Ub3VjaFN0YXJ0KTtcbiAgICAgIG9mZih0aGlzLmVsZW1lbnQsIEV2ZW50LlBPSU5URVJVUCwgdGhpcy5vblRvdWNoRW5kKTtcblxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLlBPSU5URVJfRVZFTlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmYodGhpcy5lbGVtZW50LCBFdmVudC5UT1VDSFNUQVJULCB0aGlzLm9uVG91Y2hTdGFydCk7XG4gICAgICBvZmYodGhpcy5lbGVtZW50LCBFdmVudC5UT1VDSE1PVkUsIHRoaXMub25Ub3VjaE1vdmUpO1xuICAgICAgb2ZmKHRoaXMuZWxlbWVudCwgRXZlbnQuVE9VQ0hFTkQsIHRoaXMub25Ub3VjaEVuZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblRvdWNoU3RhcnQoZTogRXZlbnQpIHtcbiAgICBjb25zdCBldmVudCA9IGUgYXMgVG91Y2hFdmVudCAmIE1vdXNlRXZlbnQgJiBQb2ludGVyRXZlbnQ7XG4gICAgaWYgKFxuICAgICAgdGhpcy5wb2ludGVyRXZlbnQgJiZcbiAgICAgIFBvaW50ZXJUeXBlW2V2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCkgYXMgXCJUT1VDSFwiIHwgXCJQRU5cIl1cbiAgICApIHtcbiAgICAgIHRoaXMudG91Y2hTdGFydFggPSBldmVudC5jbGllbnRYO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMucG9pbnRlckV2ZW50KSB7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25Ub3VjaE1vdmUoZTogRXZlbnQpIHtcbiAgICBjb25zdCBldmVudCA9IGUgYXMgVG91Y2hFdmVudCAmIE1vdXNlRXZlbnQgJiBQb2ludGVyRXZlbnQ7XG4gICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgIGlmIChldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25Ub3VjaEVuZChlOiBFdmVudCkge1xuICAgIGNvbnN0IGV2ZW50ID0gZSBhcyBUb3VjaEV2ZW50ICYgTW91c2VFdmVudCAmIFBvaW50ZXJFdmVudDtcbiAgICBpZiAoXG4gICAgICB0aGlzLnBvaW50ZXJFdmVudCAmJlxuICAgICAgUG9pbnRlclR5cGVbZXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKSBhcyBcIlRPVUNIXCIgfCBcIlBFTlwiXVxuICAgICkge1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50LmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYO1xuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlU3dpcGUoKTtcbiAgICBpZiAodGhpcy5jb25maWcucGF1c2UgPT09IFwiaG92ZXJcIikge1xuICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXG4gICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XG4gICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcblxuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gTnVtYmVyKFxuICAgICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAgIChldmVudDogVG91Y2hFdmVudCAmIE1vdXNlRXZlbnQgJiBQb2ludGVyRXZlbnQpID0+IHRoaXMuY3ljbGUoZXZlbnQpLFxuICAgICAgICAgIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyAodGhpcy5jb25maWcuaW50ZXJ2YWwgfHwgMClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHByZXZlbnREcmFnKGV2ZW50OiBFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIGtleWRvd24oZTogRXZlbnQpIHtcbiAgICBjb25zdCBldmVudCA9IGUgYXMgS2V5Ym9hcmRFdmVudDtcbiAgICBpZiAoXG4gICAgICAoZXZlbnQudGFyZ2V0IGFzIGFueSk/LnRhZ05hbWUgJiZcbiAgICAgIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoKGV2ZW50LnRhcmdldCBhcyBhbnkpLnRhZ05hbWUpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucHJldigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEl0ZW1JbmRleChlbGVtZW50PzogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgdGhpcy5pdGVtcyA9XG4gICAgICBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICA/IG1ha2VBcnJheShmaW5kKFNlbGVjdG9yLklURU0sIGVsZW1lbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkpXG4gICAgICAgIDogW107XG5cbiAgICByZXR1cm4gdGhpcy5pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJdGVtQnlEaXJlY3Rpb24oXG4gICAgZGlyZWN0aW9uOiBDYXJvdXNlbERpcmVjdGlvbixcbiAgICBhY3RpdmVFbGVtZW50OiBIVE1MRWxlbWVudFxuICApIHtcbiAgICBpZiAodGhpcy5pdGVtcyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gaXRlbXMgZm91bmQhXCIpO1xuICAgIH1cbiAgICBjb25zdCBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgIGNvbnN0IGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcbiAgICBjb25zdCBsYXN0SXRlbUluZGV4ID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGlzR29pbmdUb1dyYXAgPVxuICAgICAgKGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCkgfHxcbiAgICAgIChpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXgpO1xuXG4gICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuY29uZmlnLndyYXApIHtcbiAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIGNvbnN0IGRlbHRhID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFViA/IC0xIDogMTtcbiAgICBjb25zdCBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLml0ZW1zLmxlbmd0aDtcblxuICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xXG4gICAgICA/IHRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGggLSAxXVxuICAgICAgOiB0aGlzLml0ZW1zW2l0ZW1JbmRleF07XG4gIH1cblxuICBwcml2YXRlIHRyaWdnZXJTbGlkZUV2ZW50KFxuICAgIHJlbGF0ZWRUYXJnZXQ6IEhUTUxFbGVtZW50LFxuICAgIGV2ZW50RGlyZWN0aW9uTmFtZTogQ2Fyb3VzZWxEaXJlY3Rpb25cbiAgKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcbiAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChcbiAgICAgIChmaW5kT25lKFNlbGVjdG9yLkFDVElWRV9JVEVNLCB0aGlzLmVsZW1lbnQpIGFzIEhUTUxFbGVtZW50KSB8fCBudWxsXG4gICAgKTtcblxuICAgIHJldHVybiB0cmlnZ2VyKHRoaXMuZWxlbWVudCwgRXZlbnQuU0xJREUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgIHRvOiB0YXJnZXRJbmRleCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh0aGlzLmluZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICBjb25zdCBpbmRpY2F0b3JzID0gZmluZChTZWxlY3Rvci5BQ1RJVkUsIHRoaXMuaW5kaWNhdG9yc0VsZW1lbnQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluZGljYXRvcnNbaV0uY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV4dEluZGljYXRvciA9XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICBuZXh0SW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzbGlkZShkaXJlY3Rpb246IENhcm91c2VsRGlyZWN0aW9uLCBlbGVtZW50PzogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZmluZE9uZShTZWxlY3Rvci5BQ1RJVkVfSVRFTSwgdGhpcy5lbGVtZW50KSBhc1xuICAgICAgfCBIVE1MRWxlbWVudFxuICAgICAgfCB1bmRlZmluZWQ7XG4gICAgY29uc3QgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG4gICAgY29uc3QgbmV4dEVsZW1lbnQgPVxuICAgICAgZWxlbWVudCB8fFxuICAgICAgKGFjdGl2ZUVsZW1lbnQgJiYgdGhpcy5nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSk7XG5cbiAgICBpZiAoIW5leHRFbGVtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXh0IGVsZW1lbnQgbm90IGZvdW5kIVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuICAgIGNvbnN0IGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5pbnRlcnZhbCk7XG5cbiAgICBsZXQgZGlyZWN0aW9uYWxDbGFzc05hbWU6IENhcm91c2VsQ2xhc3NOYW1lO1xuICAgIGxldCBvcmRlckNsYXNzTmFtZTogQ2Fyb3VzZWxDbGFzc05hbWU7XG4gICAgbGV0IGV2ZW50RGlyZWN0aW9uTmFtZTogQ2Fyb3VzZWxEaXJlY3Rpb247XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xuICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVDtcbiAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XG4gICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uTEVGVDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XG4gICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWO1xuICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLlJJR0hUO1xuICAgIH1cblxuICAgIGlmIChuZXh0RWxlbWVudCAmJiBuZXh0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgIHRoaXMuaXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2xpZGVFdmVudCA9IHRoaXMudHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG4gICAgaWYgKHNsaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgIC8vIFNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLlNMSURFKSkge1xuICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChvcmRlckNsYXNzTmFtZSk7XG5cbiAgICAgIHJlZmxvdyhuZXh0RWxlbWVudCk7XG5cbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgY29uc3QgbmV4dEVsZW1lbnRJbnRlcnZhbCA9IHBhcnNlSW50KFxuICAgICAgICBuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWludGVydmFsXCIpIHx8IFwiMFwiLFxuICAgICAgICAxMFxuICAgICAgKTtcbiAgICAgIGlmIChuZXh0RWxlbWVudEludGVydmFsKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9XG4gICAgICAgICAgdGhpcy5jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuY29uZmlnLmludGVydmFsO1xuICAgICAgICB0aGlzLmNvbmZpZy5pbnRlcnZhbCA9IG5leHRFbGVtZW50SW50ZXJ2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbmZpZy5pbnRlcnZhbCA9XG4gICAgICAgICAgdGhpcy5jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuY29uZmlnLmludGVydmFsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPVxuICAgICAgICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgb25lKGFjdGl2ZUVsZW1lbnQsIFRSQU5TSVRJT05fRU5ELCAoKSA9PiB7XG4gICAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKG9yZGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG5cbiAgICAgICAgdGhpcy5pc1NsaWRpbmcgPSBmYWxzZTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0cmlnZ2VyKHRoaXMuZWxlbWVudCwgRXZlbnQuU0xJRCwge1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuXG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChhY3RpdmVFbGVtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICB0aGlzLmlzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgdHJpZ2dlcih0aGlzLmVsZW1lbnQsIEV2ZW50LlNMSUQsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICBmcm9tOiBhY3RpdmVFbGVtZW50SW5kZXgsXG4gICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbFNlcnZpY2U7XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuaW1wb3J0IHsgVFJBTlNJVElPTl9FTkQgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQge1xuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgZW11bGF0ZVRyYW5zaXRpb25FbmQsXG4gIHJlZmxvdyxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgdHlwZUNoZWNrQ29uZmlnLFxuICBpc0VsZW1lbnQsXG59IGZyb20gXCIuLi9oZWxwZXIvdXRpbHMuanNcIjtcbmltcG9ydCB7IG9uZSwgdHJpZ2dlciB9IGZyb20gXCIuLi9oZWxwZXIvZG9tL2V2ZW50LWhhbmRsZXIuanNcIjtcbmltcG9ydCAqIGFzIFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi9oZWxwZXIvZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1wiO1xuaW1wb3J0IHsgc2V0RGF0YSwgZ2V0RGF0YSwgcmVtb3ZlRGF0YSB9IGZyb20gXCIuLi9oZWxwZXIvZG9tL2RhdGEuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICB0b2dnbGU6IGJvb2xlYW47XG4gIHBhcmVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCBjb25zdCBOQU1FID0gXCJjb2xsYXBzZVwiO1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjQuMy4xXCI7XG5leHBvcnQgY29uc3QgREFUQV9LRVkgPSBcImJzLmNvbGxhcHNlXCI7XG5leHBvcnQgY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWA7XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0ge1xuICB0b2dnbGU6IHRydWUsXG4gIHBhcmVudDogXCJcIixcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgdG9nZ2xlOiBcImJvb2xlYW5cIixcbiAgcGFyZW50OiBcIihzdHJpbmd8ZWxlbWVudClcIixcbn07XG5cbmV4cG9ydCBjb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xuXG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gXCJzaG93XCI7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9IFwiY29sbGFwc2VcIjtcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0NPTExBUFNJTkcgPSBcImNvbGxhcHNpbmdcIjtcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0NPTExBUFNFRCA9IFwiY29sbGFwc2VkXCI7XG5cbmV4cG9ydCBjb25zdCBXSURUSCA9IFwid2lkdGhcIjtcbmV4cG9ydCBjb25zdCBIRUlHSFQgPSBcImhlaWdodFwiO1xuXG5leHBvcnQgY29uc3QgU0VMRUNUT1JfQUNUSVZFUyA9IFwiLnNob3csIC5jb2xsYXBzaW5nXCI7XG4vLyBleHBvcnQgY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgY2xhc3MgQ29sbGFwc2VTZXJ2aWNlIHtcbiAgX2lzVHJhbnNpdGlvbmluZzogYm9vbGVhbjtcbiAgX2VsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIF9jb25maWc6IGFueTtcbiAgX3RyaWdnZXJBcnJheTogSFRNTEVsZW1lbnRbXSB8IG51bGwgPSBudWxsO1xuICBfc2VsZWN0b3I6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBfcGFyZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHRyaWdnZXJMaXN0OiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PiB8IEhUTUxFbGVtZW50W10sXG4gICAgY29uZmlnOiBQYXJ0aWFsPENvbmZpZz4gPSB7fVxuICApIHtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBBcnJheS5mcm9tKHRyaWdnZXJMaXN0KTtcbiAgICAvLyB0aGlzLl90cmlnZ2VyQXJyYXkgPSBBcnJheS5mcm9tKFNlbGVjdG9yRW5naW5lLmZpbmQoXG4gICAgLy8gICBgJHtTRUxFQ1RPUl9EQVRBX1RPR0dMRX1baHJlZj1cIiMke2VsZW1lbnQuaWR9XCJdLGAgK1xuICAgIC8vICAgYCR7U0VMRUNUT1JfREFUQV9UT0dHTEV9W2RhdGEtdGFyZ2V0PVwiIyR7ZWxlbWVudC5pZH1cIl1gXG4gICAgLy8gKSkgYXMgSFRNTEVsZW1lbnRbXTtcblxuICAgIC8vIGNvbnN0IHRvZ2dsZUxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfVE9HR0xFKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcblxuICAgIC8vIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgLy8gICBjb25zdCBlbGVtID0gdG9nZ2xlTGlzdFtpXVxuICAgIC8vICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pXG4gICAgLy8gICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gIXNlbGVjdG9yID8gW10gOiBBcnJheS5mcm9tKFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpKVxuICAgIC8vICAgICAuZmlsdGVyKGZvdW5kRWxlbSA9PiBmb3VuZEVsZW0gPT09IGVsZW1lbnQpXG5cbiAgICAvLyAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCkge1xuICAgIC8vICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yXG4gICAgLy8gICAgIC8vIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pXG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICAvLyB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fZWxlbWVudCwgW10pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuXG4gICAgc2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSwgdGhpcyk7XG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0O1xuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgcHVibGljIGlzRXhwYW5kZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZWxlbWVudD8uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyk7XG4gIH1cblxuICBwdWJsaWMgaXNDb2xsYXBzZWQoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzRXhwYW5kZWQoKTtcbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0V4cGFuZGVkKCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgY29uc29sZS53YXJuKFwidGhpcy5fZWxlbWVudCBub3Qgc2V0IVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHxcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVylcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlczogSFRNTEVsZW1lbnRbXSB8IG51bGwgPSBudWxsO1xuICAgIGxldCBhY3RpdmVzRGF0YTogYW55O1xuXG4gICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgYWN0aXZlcyA9IEFycmF5LmZyb20oXG4gICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfQUNUSVZFUywgdGhpcy5fcGFyZW50KVxuICAgICAgKS5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiZGF0YS1wYXJlbnRcIikgPT09IHRoaXMuX2NvbmZpZy5wYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9DT0xMQVBTRSk7XG4gICAgICB9KSBhcyBIVE1MRWxlbWVudFtdO1xuXG4gICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5fc2VsZWN0b3JcbiAgICAgID8gU2VsZWN0b3JFbmdpbmUuZmluZE9uZSh0aGlzLl9zZWxlY3RvcilcbiAgICAgIDogbnVsbDtcbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgY29uc3QgdGVtcEFjdGl2ZURhdGEgPSBhY3RpdmVzLmZpbHRlcigoZWxlbSkgPT4gY29udGFpbmVyICE9PSBlbGVtKTtcbiAgICAgIGFjdGl2ZXNEYXRhID0gdGVtcEFjdGl2ZURhdGFbMF1cbiAgICAgICAgPyBnZXREYXRhKHRlbXBBY3RpdmVEYXRhWzBdLCBEQVRBX0tFWSlcbiAgICAgICAgOiBudWxsO1xuXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyk7XG4gICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICBhY3RpdmVzLmZvckVhY2goKGVsZW1BY3RpdmUpID0+IHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAhPT0gZWxlbUFjdGl2ZSkge1xuICAgICAgICAgIENvbGxhcHNlU2VydmljZS5jb2xsYXBzZUludGVyZmFjZShlbGVtQWN0aXZlLCBcImhpZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgc2V0RGF0YShlbGVtQWN0aXZlLCBEQVRBX0tFWSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gXCIwXCI7XG5cbiAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Py5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFRCk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcInRydWVcIik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ0aGlzLl9lbGVtZW50IG5vdCBzZXQhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UsIENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IFwiXCI7XG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgIHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pO1xuICAgIH07XG5cbiAgICBjb25zdCBjYXBpdGFsaXplZERpbWVuc2lvbiA9XG4gICAgICBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICBjb25zdCBzY3JvbGxTaXplID0gYHNjcm9sbCR7Y2FwaXRhbGl6ZWREaW1lbnNpb259YCBhc1xuICAgICAgfCBcInNjcm9sbFdpZHRoXCJcbiAgICAgIHwgXCJzY3JvbGxIZWlnaHRcIjtcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgIG9uZSh0aGlzLl9lbGVtZW50LCBUUkFOU0lUSU9OX0VORCwgY29tcGxldGUpO1xuXG4gICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YDtcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCAmJiB0aGlzLl90cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXksIHRydWUpO1xuICAgICAgLy8gdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIFtdKVxuICAgIH1cbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJ0aGlzLl9lbGVtZW50IG5vdCBzZXQhXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fFxuICAgICAgIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVylcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gdHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKTtcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXVxuICAgIH1weGA7XG5cbiAgICByZWZsb3codGhpcy5fZWxlbWVudCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSwgQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgIGNvbnN0IHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheT8ubGVuZ3RoO1xuICAgIGlmICh0cmlnZ2VyQXJyYXlMZW5ndGggJiYgdGhpcy5fdHJpZ2dlckFycmF5ICYmIHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcbiAgICAgICAgY29uc3QgZWxlbSA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodHJpZ2dlcik7XG5cbiAgICAgICAgaWYgKGVsZW0gJiYgIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykpIHtcbiAgICAgICAgICB0cmlnZ2VyLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpO1xuICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcInRoaXMuX2VsZW1lbnQgbm90IHNldCFcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICAgICAgdHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pO1xuICAgIH07XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBcIlwiO1xuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgb25lKHRoaXMuX2VsZW1lbnQsIFRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSk7XG4gICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCAmJiB0aGlzLl90cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXksIGZhbHNlKTtcbiAgICAgIC8vIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCBbXSlcbiAgICB9XG4gIH1cblxuICBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZzogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZztcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIHJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAvLyB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWc6IFBhcnRpYWw8Q29uZmlnPik6IENvbmZpZyB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xuICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICByZXR1cm4gY29uZmlnIGFzIENvbmZpZztcbiAgfVxuXG4gIF9nZXREaW1lbnNpb24oKSB7XG4gICAgY29uc3QgaGFzV2lkdGggPSB0aGlzLl9lbGVtZW50XG4gICAgICA/IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFdJRFRIKVxuICAgICAgOiBmYWxzZTtcbiAgICByZXR1cm4gaGFzV2lkdGggPyBXSURUSCA6IEhFSUdIVDtcbiAgfVxuXG4gIF9nZXRQYXJlbnQoKSB7XG4gICAgbGV0IHsgcGFyZW50IH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAoaXNFbGVtZW50KHBhcmVudCkpIHtcbiAgICAgIC8vIGl0J3MgYSBqUXVlcnkgb2JqZWN0XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBwYXJlbnQuanF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAgIHR5cGVvZiBwYXJlbnRbMF0gIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnRbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBjb25zdCBzZWxlY3RvciA9IGAke1NFTEVDVE9SX0RBVEFfVE9HR0xFfVtkYXRhLXBhcmVudD1cIiR7cGFyZW50fVwiXWBcbiAgICBjb25zdCBzZWxlY3RvciA9IGBbZGF0YS1wYXJlbnQ9XCIke3BhcmVudH1cIl1gO1xuXG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvciwgcGFyZW50KS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3Moc2VsZWN0ZWQsIFtlbGVtZW50XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHRyaWdnZXJBcnJheTogSFRNTEVsZW1lbnRbXSxcbiAgICBpc09wZW4/OiBib29sZWFuXG4gICkge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGlzT3BlbiAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgaXNPcGVuID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgdHJpZ2dlckFycmF5LmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCAoISFpc09wZW4pLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgY29sbGFwc2VJbnRlcmZhY2UoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbmZpZzogc3RyaW5nKSB7XG4gICAgbGV0IGRhdGEgPSBnZXREYXRhKGVsZW1lbnQsIERBVEFfS0VZKTtcbiAgICBjb25zdCBfY29uZmlnOiBDb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uZWxlbWVudC5kYXRhc2V0LFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgJiYgY29uZmlnID8gY29uZmlnIDoge30pLFxuICAgIH07XG5cbiAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZGF0YSkge1xuICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZVNlcnZpY2UoZWxlbWVudCwgW10sIF9jb25maWcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3BwZXIgZnJvbSBcInBvcHBlci5qc1wiOyAvLyAvZGlzdC91bWQvcG9wcGVyXG5pbXBvcnQgeyBpc0VsZW1lbnQsIHR5cGVDaGVja0NvbmZpZyB9IGZyb20gXCIuLi9oZWxwZXIvdXRpbHMuanNcIjtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMS4zKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vanMvc3JjL2Ryb3Bkb3duLmpzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCBjb25zdCBOQU1FID0gXCJkcm9wZG93blwiO1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjQuMS4zXCI7XG5leHBvcnQgY29uc3QgREFUQV9LRVkgPSBcImJzLmRyb3Bkb3duXCI7XG5leHBvcnQgY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWA7XG5leHBvcnQgY29uc3QgREFUQV9BUElfS0VZID0gXCIuZGF0YS1hcGlcIjtcbmV4cG9ydCBjb25zdCBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5leHBvcnQgY29uc3QgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcbmV4cG9ydCBjb25zdCBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcbmV4cG9ydCBjb25zdCBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuZXhwb3J0IGNvbnN0IEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuZXhwb3J0IGNvbnN0IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuZXhwb3J0IGNvbnN0IFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChcbiAgYCR7QVJST1dfVVBfS0VZQ09ERX18JHtBUlJPV19ET1dOX0tFWUNPREV9fCR7RVNDQVBFX0tFWUNPREV9YFxuKTtcblxuZXhwb3J0IGNvbnN0IEVWRU5UID0ge1xuICBISURFOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV046IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIENMSUNLOiBgY2xpY2ske0VWRU5UX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSTogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YCxcbiAgS0VZRE9XTl9EQVRBX0FQSTogYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlVUF9EQVRBX0FQSTogYGtleXVwJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YCxcbn07XG5cbmV4cG9ydCBjb25zdCBDTEFTU05BTUUgPSB7XG4gIERJU0FCTEVEOiBcImRpc2FibGVkXCIsXG4gIFNIT1c6IFwic2hvd1wiLFxuICBEUk9QVVA6IFwiZHJvcHVwXCIsXG4gIERST1BSSUdIVDogXCJkcm9wcmlnaHRcIixcbiAgRFJPUExFRlQ6IFwiZHJvcGxlZnRcIixcbiAgTUVOVVJJR0hUOiBcImRyb3Bkb3duLW1lbnUtcmlnaHRcIixcbiAgTUVOVUxFRlQ6IFwiZHJvcGRvd24tbWVudS1sZWZ0XCIsXG4gIFBPU0lUSU9OX1NUQVRJQzogXCJwb3NpdGlvbi1zdGF0aWNcIixcbn07XG5cbmV4cG9ydCBjb25zdCBTRUxFQ1RPUiA9IHtcbiAgREFUQV9UT0dHTEU6IFwiLmRyb3Bkb3duLXRvZ2dsZVwiLFxuICBGT1JNX0NISUxEOiBcIi5kcm9wZG93biBmb3JtXCIsXG4gIE1FTlU6IFwiLmRyb3Bkb3duLW1lbnVcIixcbiAgTkFWQkFSX05BVjogXCIubmF2YmFyLW5hdlwiLFxuICBWSVNJQkxFX0lURU1TOiBcIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCIsXG59O1xuXG5leHBvcnQgY29uc3QgQVRUQUNITUVOVE1BUCA9IHtcbiAgVE9QOiBcInRvcC1zdGFydFwiLFxuICBUT1BFTkQ6IFwidG9wLWVuZFwiLFxuICBCT1RUT006IFwiYm90dG9tLXN0YXJ0XCIsXG4gIEJPVFRPTUVORDogXCJib3R0b20tZW5kXCIsXG4gIFJJR0hUOiBcInJpZ2h0LXN0YXJ0XCIsXG4gIFJJR0hURU5EOiBcInJpZ2h0LWVuZFwiLFxuICBMRUZUOiBcImxlZnQtc3RhcnRcIixcbiAgTEVGVEVORDogXCJsZWZ0LWVuZFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFQgPSB7XG4gIG9mZnNldDogMCxcbiAgZmxpcDogdHJ1ZSxcbiAgYm91bmRhcnk6IFwic2Nyb2xsUGFyZW50XCIsXG4gIHJlZmVyZW5jZTogXCJ0b2dnbGVcIixcbiAgZGlzcGxheTogXCJkeW5hbWljXCIsXG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVFRZUEUgPSB7XG4gIG9mZnNldDogXCIobnVtYmVyfHN0cmluZ3xmdW5jdGlvbilcIixcbiAgZmxpcDogXCJib29sZWFuXCIsXG4gIGJvdW5kYXJ5OiBcIihzdHJpbmd8ZWxlbWVudClcIixcbiAgcmVmZXJlbmNlOiBcIihzdHJpbmd8ZWxlbWVudClcIixcbiAgZGlzcGxheTogXCJzdHJpbmdcIixcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuZXhwb3J0IGNsYXNzIERyb3Bkb3duU2VydmljZSB7XG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT047XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERFRkFVTFQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBERUZBVUxUVFlQRTtcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHB1YmxpYyBzdGF0aWMgY2xvc2VBbGwoKSB7XG4gICAgY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IuREFUQV9UT0dHTEUpO1xuICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBpZiAoYnV0dG9uLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbWVudSA9XG4gICAgICAgICAgYnV0dG9uLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIFNFTEVDVE9SLk1FTlUgKyBcIi5cIiArIENMQVNTTkFNRS5TSE9XXG4gICAgICAgICAgKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChtZW51KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UoYnV0dG9uLCBtZW51LCBidXR0b24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNsb3NlKGJ1dHRvbiwgYnV0dG9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY2xvc2UoXG4gICAgdHJpZ2dlckNsb3NlRWxlbWVudDogRWxlbWVudCxcbiAgICBtZW51OiBFbGVtZW50LFxuICAgIGRyb3Bkb3duPzogRWxlbWVudFxuICApIHtcbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdHJpZ2dlckNsb3NlRWxlbWVudCxcbiAgICB9O1xuXG4gICAgaWYgKG1lbnUgJiYgbWVudS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NOQU1FLlNIT1cpKSB7XG4gICAgICBtZW51LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NOQU1FLlNIT1cpO1xuICAgIH1cblxuICAgIGlmIChkcm9wZG93biAmJiBkcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NOQU1FLlNIT1cpKSB7XG4gICAgICBkcm9wZG93bi5jbGFzc0xpc3QucmVtb3ZlKENMQVNTTkFNRS5TSE9XKTtcbiAgICAgIGRyb3Bkb3duLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudChFVkVOVC5ISURERU4sIHsgZGV0YWlsOiByZWxhdGVkVGFyZ2V0IH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCA9IHRyaWdnZXJDbG9zZUVsZW1lbnQucGFyZW50RWxlbWVudDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU05BTUUuU0hPVykpIHtcbiAgICAgIHBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTTkFNRS5TSE9XKTtcbiAgICAgIHBhcmVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoRVZFTlQuSElEREVOLCB7IGRldGFpbDogcmVsYXRlZFRhcmdldCB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIF9jbGVhck1lbnVzKCkge1xuICAgIHJldHVybiB0aGlzLmNsb3NlQWxsKCk7XG4gIH1cblxuICBwcml2YXRlIF9lbGVtZW50OiBIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50O1xuICBwcml2YXRlIF9wb3BwZXI6IGFueSB8IC8qIFBvcHBlciAqLyBudWxsOyAvLyBUT0RPIFBvcHBlciBuYW1jZXNwYWNlIGVycm9yXG4gIHByaXZhdGUgX2NvbmZpZzogYW55OyAvLyBUT0RPXG4gIHByaXZhdGUgX21lbnU6IEVsZW1lbnQ7XG4gIHByaXZhdGUgX2luTmF2YmFyOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50LCBjb25maWc/OiBhbnkpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudHM7XG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuICAgIHRoaXMub3V0c2lkZUNsaWNrTGlzdGVuZXIgPSB0aGlzLm91dHNpZGVDbGlja0xpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZU9uQ2xpY2tPdXRzaWRlKCk7XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgcmV0dXJuIERyb3Bkb3duU2VydmljZS5jbG9zZSh0aGlzLl9lbGVtZW50LCB0aGlzLl9tZW51KTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93KCkge1xuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50LFxuICAgIH07XG5cbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9lbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cbiAgICBpZiAoIXRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5TSE9XKSkge1xuICAgICAgdGhpcy5fbWVudS5jbGFzc0xpc3QuYWRkKENMQVNTTkFNRS5TSE9XKTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5TSE9XKSkge1xuICAgICAgcGFyZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NOQU1FLlNIT1cpO1xuICAgICAgcGFyZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudChFVkVOVC5TSE9XTiwgeyBkZXRhaWw6IHJlbGF0ZWRUYXJnZXQgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRvZ2dsZSgpIHtcbiAgICBpZiAoXG4gICAgICAodGhpcy5fZWxlbWVudCBhcyBIVE1MQnV0dG9uRWxlbWVudCkuZGlzYWJsZWQgfHxcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5ESVNBQkxFRClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9lbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU05BTUUuU0hPVyk7XG5cbiAgICBEcm9wZG93blNlcnZpY2UuX2NsZWFyTWVudXMoKTtcblxuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50LFxuICAgIH07XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KEVWRU5ULlNIT1csIHsgZGV0YWlsOiByZWxhdGVkVGFyZ2V0IH0pO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LmRpc3BhdGNoRXZlbnQoc2hvd0V2ZW50KTtcbiAgICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG4gICAgaWYgKCF0aGlzLl9pbk5hdmJhcikge1xuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgICAgICovXG4gICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gXCJwYXJlbnRcIikge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50IGFzIEhUTUxFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBqUXVlcnkgZWxlbWVudFxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UuanF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjQyNTFcbiAgICAgIGlmIChwYXJlbnQgJiYgdGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSBcInNjcm9sbFBhcmVudFwiKSB7XG4gICAgICAgIHBhcmVudC5jbGFzc0xpc3QuYWRkKENMQVNTTkFNRS5QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCxcbiAgICAgICAgdGhpcy5fbWVudSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcInRydWVcIik7XG5cbiAgICBpZiAodGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NOQU1FLlNIT1cpKSB7XG4gICAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NOQU1FLlNIT1cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5hZGQoQ0xBU1NOQU1FLlNIT1cpO1xuICAgIH1cbiAgICB0aGlzLl9tZW51LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoRVZFTlQuU0hPV04sIHsgZGV0YWlsOiByZWxhdGVkVGFyZ2V0IH0pXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1cIiArIERBVEFfS0VZKTtcbiAgICAvLyBkZWxldGUgdGhpcy5fZWxlbWVudDtcbiAgICAvLyBkZWxldGUgdGhpcy5fbWVudTtcbiAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICB9XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3V0c2lkZUNsaWNrTGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBwcml2YXRlIG91dHNpZGVDbGlja0xpc3RlbmVyKGV2ZW50OiBFdmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5fZWxlbWVudC5wYXJlbnRFbGVtZW50IGFzIEVsZW1lbnQ7XG4gICAgaWYgKHRhcmdldCAmJiAhcGFyZW50LmNvbnRhaW5zKHRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3V0c2lkZUNsaWNrTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE1Mjk3NS9ob3ctZG8taS1kZXRlY3QtYS1jbGljay1vdXRzaWRlLWFuLWVsZW1lbnRcbiAgICogQHBhcmFtIHNlbGVjdG9yXG4gICAqL1xuICBwcml2YXRlIGNsb3NlT25DbGlja091dHNpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3V0c2lkZUNsaWNrTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2dldENvbmZpZyhjb25maWc/OiBhbnkpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5Ecm9wZG93blNlcnZpY2UuRGVmYXVsdCxcbiAgICAgIC4uLnRoaXMuX2VsZW1lbnQuZGF0YXNldCxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRHJvcGRvd25TZXJ2aWNlLkRlZmF1bHRUeXBlKTtcblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBwcml2YXRlIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuX21lbnUpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX2VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgY29uc3QgbWVudSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SLk1FTlUpO1xuICAgICAgICBpZiAoIW1lbnUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZW51IG5vdCBmb3VuZCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWVudSA9IG1lbnU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZW51O1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0UGxhY2VtZW50KCkge1xuICAgIGNvbnN0IHBhcmVudERyb3Bkb3duID0gdGhpcy5fZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIGxldCBwbGFjZW1lbnQgPSBBVFRBQ0hNRU5UTUFQLkJPVFRPTTtcblxuICAgIGlmICghcGFyZW50RHJvcGRvd24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmVudCBvZiBlbGVtZW50IG5vdCBmb3VuZCFcIik7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGRyb3B1cFxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NOQU1FLkRST1BVUCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEFUVEFDSE1FTlRNQVAuVE9QO1xuICAgICAgaWYgKHRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEFUVEFDSE1FTlRNQVAuVE9QRU5EO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5EUk9QUklHSFQpKSB7XG4gICAgICBwbGFjZW1lbnQgPSBBVFRBQ0hNRU5UTUFQLlJJR0hUO1xuICAgIH0gZWxzZSBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5EUk9QTEVGVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEFUVEFDSE1FTlRNQVAuTEVGVDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTTkFNRS5NRU5VUklHSFQpKSB7XG4gICAgICBwbGFjZW1lbnQgPSBBVFRBQ0hNRU5UTUFQLkJPVFRPTUVORDtcbiAgICB9XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgX2RldGVjdE5hdmJhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbG9zZXN0ICYmIHRoaXMuX2VsZW1lbnQuY2xvc2VzdChcIi5uYXZiYXJcIikgIT09IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgY29uc3Qgb2Zmc2V0Q29uZjogYW55ID0ge307XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9mZnNldENvbmYuZm4gPSAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIGRhdGEub2Zmc2V0cyA9IHtcbiAgICAgICAgICAuLi5kYXRhLm9mZnNldHMsXG4gICAgICAgICAgLi4uKHRoaXMuX2NvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzKSB8fCB7fSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0Q29uZi5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgIH1cblxuICAgIGNvbnN0IHBvcHBlckNvbmZpZyA9IHtcbiAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCkgYXMgYW55LFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0Q29uZixcbiAgICAgICAgZmxpcDoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwLFxuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5fY29uZmlnLmJvdW5kYXJ5LFxuICAgICAgICB9LFxuICAgICAgfSBhcyBhbnksXG4gICAgfTtcblxuICAgIC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gXCJzdGF0aWNcIikge1xuICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwb3BwZXJDb25maWc7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL2JzNC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jYXJvdXNlbC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgeyBDb2xsYXBzZVNlcnZpY2UgfSBmcm9tIFwiLi9jb2xsYXBzZS5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgeyBEcm9wZG93blNlcnZpY2UgfSBmcm9tIFwiLi9kcm9wZG93bi5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgeyBNb2RhbFNlcnZpY2UgfSBmcm9tIFwiLi9tb2RhbC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b29sdGlwLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvcG92ZXIuc2VydmljZS5qc1wiO1xuZXhwb3J0IHsgVG9hc3RTZXJ2aWNlIH0gZnJvbSBcIi4vdG9hc3Quc2VydmljZS5qc1wiO1xuZXhwb3J0IHsgVG9vbHRpcFNlcnZpY2UgfSBmcm9tIFwiLi90b29sdGlwLnNlcnZpY2UuanNcIjtcbiIsIi8vIEZvcmsgb2YgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9qcy9zcmMvbW9kYWwuanNcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjAtYWxwaGExKTogbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuaW1wb3J0IHsgVFJBTlNJVElPTl9FTkQgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQge1xuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgZW11bGF0ZVRyYW5zaXRpb25FbmQsXG4gIHR5cGVDaGVja0NvbmZpZyxcbiAgcmVmbG93LFxufSBmcm9tIFwiLi4vaGVscGVyL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBzZXREYXRhLCBnZXREYXRhLCByZW1vdmVEYXRhIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vZGF0YS5qc1wiO1xuaW1wb3J0IHsgb24sIG9uZSwgb2ZmLCB0cmlnZ2VyIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vZXZlbnQtaGFuZGxlci5qc1wiO1xuLy8gaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gXCIuL2RvbS9tYW5pcHVsYXRvclwiO1xuaW1wb3J0ICogYXMgU2VsZWN0b3JFbmdpbmUgZnJvbSBcIi4uL2hlbHBlci9kb20vc2VsZWN0b3ItZW5naW5lLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgZm9jdXM/OiBib29sZWFuO1xuICBrZXlib2FyZD86IGJvb2xlYW47XG4gIGJhY2tkcm9wPzogYm9vbGVhbiB8IFwic3RhdGljXCI7XG4gIHNob3c/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gXCJtb2RhbFwiO1xuY29uc3QgVkVSU0lPTiA9IFwiNS4wLjAtYWxwaGExXCI7XG5jb25zdCBEQVRBX0tFWSA9IFwiYnMubW9kYWxcIjtcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xuY29uc3QgRVNDQVBFX0tFWSA9IFwiRXNjYXBlXCI7XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0OiBDb25maWcgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWUsXG4gIHNob3c6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGJhY2tkcm9wOiBcIihib29sZWFufHN0cmluZylcIixcbiAga2V5Ym9hcmQ6IFwiYm9vbGVhblwiLFxuICBmb2N1czogXCJib29sZWFuXCIsXG4gIHNob3c6IFwiYm9vbGVhblwiLFxufTtcblxuZXhwb3J0IGNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWA7XG5leHBvcnQgY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWA7XG5leHBvcnQgY29uc3QgRVZFTlRfSElEREVOID0gYGhpZGRlbiR7RVZFTlRfS0VZfWA7XG5leHBvcnQgY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XG5leHBvcnQgY29uc3QgRVZFTlRfRk9DVVNJTiA9IGBmb2N1c2luJHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9DTElDS19ESVNNSVNTID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX01PVVNFVVBfRElTTUlTUyA9IGBtb3VzZXVwLmRpc21pc3Mke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTID0gYG1vdXNlZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YDtcblxuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfU0NST0xMQkFSX01FQVNVUkVSID0gXCJtb2RhbC1zY3JvbGxiYXItbWVhc3VyZVwiO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfQkFDS0RST1AgPSBcIm1vZGFsLWJhY2tkcm9wXCI7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9PUEVOID0gXCJtb2RhbC1vcGVuXCI7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gXCJmYWRlXCI7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gXCJzaG93XCI7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9TVEFUSUMgPSBcIm1vZGFsLXN0YXRpY1wiO1xuXG5leHBvcnQgY29uc3QgU0VMRUNUT1JfRElBTE9HID0gXCIubW9kYWwtZGlhbG9nXCI7XG5leHBvcnQgY29uc3QgU0VMRUNUT1JfTU9EQUxfQk9EWSA9IFwiLm1vZGFsLWJvZHlcIjtcbmV4cG9ydCBjb25zdCBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID1cbiAgXCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCI7XG5leHBvcnQgY29uc3QgU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQgPSBcIi5zdGlja3ktdG9wXCI7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIF9jb25maWc6IENvbmZpZztcbiAgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBfZGlhbG9nOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIF9iYWNrZHJvcDogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuICBfaXNTaG93bjogYm9vbGVhbjtcbiAgX2lzQm9keU92ZXJmbG93aW5nOiBib29sZWFuO1xuICBfaWdub3JlQmFja2Ryb3BDbGljazogYm9vbGVhbjtcbiAgX2lzVHJhbnNpdGlvbmluZzogYm9vbGVhbjtcbiAgX3Njcm9sbGJhcldpZHRoOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25maWc6IENvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX2RpYWxvZyA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRElBTE9HLCBlbGVtZW50KTtcbiAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICBzZXREYXRhKGVsZW1lbnQsIERBVEFfS0VZLCB0aGlzKTtcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT047XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQ7XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUocmVsYXRlZFRhcmdldD86IEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldD86IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gdHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0LFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcblxuICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCk7XG4gICAgdGhpcy5fc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgIG9uKFxuICAgICAgdGhpcy5fZWxlbWVudCxcbiAgICAgIEVWRU5UX0NMSUNLX0RJU01JU1MsXG4gICAgICAvLyBTRUxFQ1RPUl9EQVRBX0RJU01JU1MsXG4gICAgICAoZXZlbnQ6IEV2ZW50KSA9PiB0aGlzLmhpZGUoZXZlbnQpXG4gICAgKTtcblxuICAgIGlmICh0aGlzLl9kaWFsb2cpIHtcbiAgICAgIG9uKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgICAgb25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFVVBfRElTTUlTUywgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpO1xuICB9XG5cbiAgaGlkZShldmVudD86IEV2ZW50KSB7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSB0cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpO1xuXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgLy8gb2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOKTsgVE9ET1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICAvLyBvZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUyk7IFRPRE9cbiAgICAvLyBvZmYodGhpcy5fZGlhbG9nLCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyk7IFRPRE9cblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChcbiAgICAgICAgdGhpcy5fZWxlbWVudFxuICAgICAgKTtcblxuICAgICAgb25lKHRoaXMuX2VsZW1lbnQsIFRSQU5TSVRJT05fRU5ELCAoLypldmVudCovKSA9PlxuICAgICAgICB0aGlzLl9oaWRlTW9kYWwoLypldmVudCovKSk7XG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlTW9kYWwoKTtcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIC8vIFRPRE9cbiAgICAvLyBbd2luZG93LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9kaWFsb2ddLmZvckVhY2goKGh0bWxFbGVtZW50KSA9PlxuICAgIC8vICAgb2ZmKGh0bWxFbGVtZW50LCBFVkVOVF9LRVkpXG4gICAgLy8gKTtcblxuICAgIC8qKlxuICAgICAqIGBkb2N1bWVudGAgaGFzIDIgZXZlbnRzIGBFVkVOVF9GT0NVU0lOYCBhbmQgYEVWRU5UX0NMSUNLX0RBVEFfQVBJYFxuICAgICAqIERvIG5vdCBtb3ZlIGBkb2N1bWVudGAgaW4gYGh0bWxFbGVtZW50c2AgYXJyYXlcbiAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRVZFTlRfQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAqL1xuICAgIC8vIG9mZihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTik7IFRPRE9cblxuICAgIHJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXG4gICAgLy8gdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAvLyB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAvLyB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgIC8vIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAvLyB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAvLyB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgLy8gdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7XG4gICAgLy8gdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICAvLyB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IG51bGw7XG4gIH1cblxuICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWc6IENvbmZpZyk6IENvbmZpZyB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpO1xuICAgIGNvbnN0IG1vZGFsQm9keSA9IHRoaXMuX2RpYWxvZ1xuICAgICAgPyBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX01PREFMX0JPRFksIHRoaXMuX2RpYWxvZylcbiAgICAgIDogbnVsbDtcblxuICAgIGlmIChcbiAgICAgICF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHxcbiAgICAgIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREVcbiAgICApIHtcbiAgICAgIC8vIERvbid0IG1vdmUgbW9kYWwncyBET00gcG9zaXRpb25cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIik7XG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsIFwidHJ1ZVwiKTtcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJkaWFsb2dcIik7XG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgaWYgKG1vZGFsQm9keSkge1xuICAgICAgbW9kYWxCb2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgaWYgKCF0aGlzLl9kaWFsb2cpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGlhbG9nIGVsZW1lbnQgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9kaWFsb2cpO1xuXG4gICAgICBvbmUodGhpcy5fZGlhbG9nLCBUUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKTtcbiAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKHRoaXMuX2RpYWxvZywgdHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgX2VuZm9yY2VGb2N1cygpIHtcbiAgICBjb25zdCBvbkZvY3VzSW4gPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50LnRhcmdldCAmJlxuICAgICAgICBkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJlxuICAgICAgICAhdGhpcy5fZWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBvZmYoZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIG9uRm9jdXNJbik7IC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vdVxuICAgIG9uKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOLCBvbkZvY3VzSW4pO1xuICB9XG5cbiAgX3NldEVzY2FwZUV2ZW50KCkge1xuICAgIGNvbnN0IG9uRXNjYXBlRXZlbnQgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQgfCBFdmVudCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9jb25maWcua2V5Ym9hcmQgJiZcbiAgICAgICAgKGV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLmtleSA9PT0gRVNDQVBFX0tFWVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgIXRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJlxuICAgICAgICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkua2V5ID09PSBFU0NBUEVfS0VZXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgb24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTLCBvbkVzY2FwZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgb25Fc2NhcGVFdmVudCk7XG4gICAgfVxuICB9XG5cbiAgX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgIGNvbnN0IG9uUmVzaXplRXZlbnQgPSAoKSA9PiB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgb24od2luZG93LCBFVkVOVF9SRVNJWkUsIG9uUmVzaXplRXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmYod2luZG93LCBFVkVOVF9SRVNJWkUsIG9uUmVzaXplRXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9oaWRlTW9kYWwoLypldmVudD86IEV2ZW50Ki8pIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIik7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyb2xlXCIpO1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3Nob3dCYWNrZHJvcCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9PUEVOKTtcbiAgICAgIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKTtcbiAgICAgIHRoaXMuX3Jlc2V0U2Nyb2xsYmFyKCk7XG4gICAgICB0cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTik7XG4gICAgfSk7XG4gIH1cblxuICBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgdGhpcy5fYmFja2Ryb3A/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKHRoaXMuX2JhY2tkcm9wKTtcbiAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gIH1cblxuICBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgYW5pbWF0ZSA9IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSlcbiAgICAgID8gQ0xBU1NfTkFNRV9GQURFXG4gICAgICA6IFwiXCI7XG5cbiAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZSA9IENMQVNTX05BTUVfQkFDS0RST1A7XG5cbiAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQoYW5pbWF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fYmFja2Ryb3ApO1xuXG4gICAgICBvbih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICByZWZsb3codGhpcy5fYmFja2Ryb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoXG4gICAgICAgIHRoaXMuX2JhY2tkcm9wXG4gICAgICApO1xuXG4gICAgICBvbmUodGhpcy5fYmFja2Ryb3AsIFRSQU5TSVRJT05fRU5ELCBjYWxsYmFjayk7XG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0aGlzLl9iYWNrZHJvcCwgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgY29uc3QgY2FsbGJhY2tSZW1vdmUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUJhY2tkcm9wKCk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKSkge1xuICAgICAgICBjb25zdCBiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KFxuICAgICAgICAgIHRoaXMuX2JhY2tkcm9wXG4gICAgICAgICk7XG4gICAgICAgIG9uZSh0aGlzLl9iYWNrZHJvcCwgVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKTtcbiAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGhpcy5fYmFja2Ryb3AsIGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA9PT0gXCJzdGF0aWNcIikge1xuICAgICAgaWYgKCF0aGlzLl9kaWFsb2cpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkRpYWxvZyBlbGVtZW50IG5vdCBmb3VuZCFcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaGlkZUV2ZW50ID0gdHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFX1BSRVZFTlRFRCk7XG4gICAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPVxuICAgICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gXCJoaWRkZW5cIjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU1RBVElDKTtcblxuICAgICAgY29uc3QgbW9kYWxUcmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChcbiAgICAgICAgdGhpcy5fZGlhbG9nXG4gICAgICApO1xuXG4gICAgICBjb25zdCBvblRyYW5zaXRpb25FbmQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NUQVRJQyk7XG4gICAgICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgICAgb25lKHRoaXMuX2VsZW1lbnQsIFRSQU5TSVRJT05fRU5ELCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93WSA9IFwiXCI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCwgbW9kYWxUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBvZmYodGhpcy5fZWxlbWVudCwgVFJBTlNJVElPTl9FTkQsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICBvbmUodGhpcy5fZWxlbWVudCwgVFJBTlNJVElPTl9FTkQsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50LCBtb2RhbFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9hZGp1c3REaWFsb2coKSB7XG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID1cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7dGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3RoaXMuX3Njcm9sbGJhcldpZHRofXB4YDtcbiAgICB9XG4gIH1cblxuICBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCJcIjtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCI7XG4gIH1cblxuICBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgY29uc3QgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPVxuICAgICAgTWF0aC5yb3VuZChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSA8IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgfVxuXG4gIF9zZXRTY3JvbGxiYXIoKSB7XG4gICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG5cbiAgICAgIC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfRklYRURfQ09OVEVOVCkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRQYWRkaW5nOiBzdHJpbmcgPVxuICAgICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW1wicGFkZGluZy1yaWdodFwiIGFzIGFueV07XG4gICAgICAgIC8vIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJwYWRkaW5nLXJpZ2h0XCIsIGFjdHVhbFBhZGRpbmcpO1xuICAgICAgICBlbGVtZW50LmRhdGFzZXQucGFkZGluZ1JpZ2h0ID0gYWN0dWFsUGFkZGluZztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtcbiAgICAgICAgICBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoXG4gICAgICAgIH1weGA7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxNYXJnaW4gPSBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0O1xuICAgICAgICBjb25zdCBjYWxjdWxhdGVkTWFyZ2luID1cbiAgICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtcIm1hcmdpbi1yaWdodFwiIGFzIGFueV07XG4gICAgICAgIC8vIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJtYXJnaW4tcmlnaHRcIiwgYWN0dWFsTWFyZ2luKTtcbiAgICAgICAgZWxlbWVudC5kYXRhc2V0Lm1hcmdpblJpZ2h0ID0gYWN0dWFsTWFyZ2luO1xuICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gYCR7XG4gICAgICAgICAgcGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSAtIHRoaXMuX3Njcm9sbGJhcldpZHRoXG4gICAgICAgIH1weGA7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuICAgICAgY29uc3QgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgY29uc3QgY2FsY3VsYXRlZFBhZGRpbmcgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KVtcbiAgICAgICAgXCJwYWRkaW5nLXJpZ2h0XCIgYXMgYW55XG4gICAgICBdO1xuXG4gICAgICAvLyBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKFxuICAgICAgLy8gICBkb2N1bWVudC5ib2R5LFxuICAgICAgLy8gICBcInBhZGRpbmctcmlnaHRcIixcbiAgICAgIC8vICAgYWN0dWFsUGFkZGluZ1xuICAgICAgLy8gKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuZGF0YXNldC5wYWRkaW5nUmlnaHQgPSBhY3R1YWxQYWRkaW5nO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtcbiAgICAgICAgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aFxuICAgICAgfXB4YDtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9PUEVOKTtcbiAgfVxuXG4gIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfRklYRURfQ09OVEVOVCkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gY29uc3QgcGFkZGluZyA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJwYWRkaW5nLXJpZ2h0XCIpO1xuICAgICAgY29uc3QgcGFkZGluZyA9IGVsZW1lbnQuZGF0YXNldC5wYWRkaW5nUmlnaHQ7XG4gICAgICBpZiAodHlwZW9mIHBhZGRpbmcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBcInBhZGRpbmctcmlnaHRcIik7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRhdGFzZXQucGFkZGluZ1JpZ2h0O1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50IGFuZCBuYXZiYXItdG9nZ2xlciBtYXJnaW5cbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKGAke1NFTEVDVE9SX1NUSUNLWV9DT05URU5UfWApLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIC8vIGNvbnN0IG1hcmdpbiA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJtYXJnaW4tcmlnaHRcIik7XG4gICAgICBjb25zdCBtYXJnaW4gPSBlbGVtZW50LmRhdGFzZXQubWFyZ2luUmlnaHQ7XG4gICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBNYW5pcHVsYXRvci5yZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIFwibWFyZ2luLXJpZ2h0XCIpO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kYXRhc2V0Lm1hcmdpblJpZ2h0O1xuICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmdcbiAgICAvLyBjb25zdCBwYWRkaW5nID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZShcbiAgICAvLyAgIGRvY3VtZW50LmJvZHksXG4gICAgLy8gICBcInBhZGRpbmctcmlnaHRcIlxuICAgIC8vICk7XG4gICAgY29uc3QgcGFkZGluZyA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC5wYWRkaW5nUmlnaHQ7XG4gICAgaWYgKHR5cGVvZiBwYWRkaW5nID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1hbmlwdWxhdG9yLnJlbW92ZURhdGFBdHRyaWJ1dGUoZG9jdW1lbnQuYm9keSwgXCJwYWRkaW5nLXJpZ2h0XCIpO1xuICAgICAgZGVsZXRlIGRvY3VtZW50LmJvZHkuZGF0YXNldC5wYWRkaW5nUmlnaHQ7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmc7XG4gICAgfVxuICB9XG5cbiAgX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgIC8vIHRoeCBkLndhbHNoXG4gICAgY29uc3Qgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ0xBU1NfTkFNRV9TQ1JPTExCQVJfTUVBU1VSRVI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID1cbiAgICAgIHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGdldEluc3RhbmNlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldERhdGEoZWxlbWVudCwgREFUQV9LRVkpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsU2VydmljZTtcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4wLWFscGhhMSk6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL2pzL3NyYy9wb3BvdmVyLmpzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGdldERhdGEgfSBmcm9tIFwiLi4vaGVscGVyL2RvbS9kYXRhLmpzXCI7XG5pbXBvcnQgeyBmaW5kT25lIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vc2VsZWN0b3ItZW5naW5lLmpzXCI7XG5pbXBvcnQgeyBUb29sdGlwU2VydmljZSB9IGZyb20gXCIuL3Rvb2x0aXAuc2VydmljZS5qc1wiO1xuaW1wb3J0IHtcbiAgVG9vbHRpcENvbnRlbnRGbixcbiAgUG9wb3Zlck9wdGlvbnMsXG4gIFRvb2x0aXBPcHRpb25zLFxufSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gXCJwb3BvdmVyXCI7XG5jb25zdCBWRVJTSU9OID0gXCI1LjAuMC1hbHBoYTFcIjtcbmNvbnN0IERBVEFfS0VZID0gXCJicy5wb3BvdmVyXCI7XG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcbmNvbnN0IENMQVNTX1BSRUZJWCA9IFwiYnMtcG9wb3ZlclwiO1xuY29uc3QgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChgKF58XFxcXHMpJHtDTEFTU19QUkVGSVh9XFxcXFMrYCwgXCJnXCIpO1xuXG5jb25zdCBEZWZhdWx0OiBQb3BvdmVyT3B0aW9ucyA9IHtcbiAgLi4uVG9vbHRpcFNlcnZpY2UuRGVmYXVsdCxcbiAgcGxhY2VtZW50OiBcInJpZ2h0XCIsXG4gIHRyaWdnZXI6IFwiY2xpY2tcIixcbiAgY29udGVudDogXCJcIixcbiAgdGVtcGxhdGU6XG4gICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItYXJyb3cgYXJyb3dcIj48L2Rpdj4nICtcbiAgICAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgK1xuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+Jyxcbn07XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICAuLi5Ub29sdGlwU2VydmljZS5EZWZhdWx0VHlwZSxcbiAgY29udGVudDogXCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsXG59O1xuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0s6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVI6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gLFxufTtcblxuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gXCJmYWRlXCI7XG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSBcInNob3dcIjtcblxuY29uc3QgU0VMRUNUT1JfVElUTEUgPSBcIi5wb3BvdmVyLWhlYWRlclwiO1xuY29uc3QgU0VMRUNUT1JfQ09OVEVOVCA9IFwiLnBvcG92ZXItYm9keVwiO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IGNsYXNzIFBvcG92ZXJTZXJ2aWNlIGV4dGVuZHMgVG9vbHRpcFNlcnZpY2Uge1xuICAvLyBFeHBvcnQgY29uc3RhbnRzIGRlZmluZWQgYWJvdmUgYXMgc3RhdGljIG1lbWJlcnMgb2YgdGhlIHNlcnZpY2UgY2xhc3MsIHRvIGF2b2lkIG5hbWUgY29sbGlzaW9ucyBpbiB0aGUgZ2xvYmFsIG5hbWVzcGFjZS5cbiAgc3RhdGljIHJlYWRvbmx5IENPTlNUQU5UUzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcbiAgICBOQU1FLFxuICAgIFZFUlNJT04sXG4gICAgREFUQV9LRVksXG4gICAgRVZFTlRfS0VZLFxuICAgIENMQVNTX1BSRUZJWCxcbiAgICBCU0NMU19QUkVGSVhfUkVHRVgsXG5cbiAgICBEZWZhdWx0LFxuICAgIERlZmF1bHRUeXBlLFxuICAgIEV2ZW50LFxuXG4gICAgQ0xBU1NfTkFNRV9GQURFLFxuICAgIENMQVNTX05BTUVfU0hPVyxcblxuICAgIFNFTEVDVE9SX1RJVExFLFxuICAgIFNFTEVDVE9SX0NPTlRFTlQsXG4gIH07XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTjtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpOiBQb3BvdmVyT3B0aW9ucyB7XG4gICAgcmV0dXJuIERlZmF1bHQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUU7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgIHJldHVybiBEQVRBX0tFWTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50O1xuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICB9XG5cbiAgLy8gT3ZlcnJpZGVzXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50LFxuICAgIGNvbmZpZzogUGFydGlhbDxQb3BvdmVyT3B0aW9ucz5cbiAgKSB7XG4gICAgc3VwZXIoZWxlbWVudCwgY29uZmlnIGFzIFRvb2x0aXBPcHRpb25zKTtcbiAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2ZmZmYwMFwiO1xuICB9XG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpKTtcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudD86IHN0cmluZyB8IFRvb2x0aXBDb250ZW50Rm4pIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcblxuICAgIC8vIHdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KGZpbmRPbmUoU0VMRUNUT1JfVElUTEUsIHRpcCksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29udGVudCA9IChjb250ZW50IGFzIFRvb2x0aXBDb250ZW50Rm4pKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoZmluZE9uZShTRUxFQ1RPUl9DT05URU5ULCB0aXApLCBjb250ZW50KTtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0ZBREUsIENMQVNTX05BTUVfU0hPVyk7XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKGAke0NMQVNTX1BSRUZJWH0tJHthdHRhY2htZW50fWApO1xuICB9XG5cbiAgX2dldENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRlbnRcIikgfHwgdGhpcy5jb25maWcuY29udGVudDtcbiAgfVxuXG4gIF9jbGVhblRpcENsYXNzKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwPy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKT8ubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcbiAgICBpZiAodGFiQ2xhc3MgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgdGFiQ2xhc3NcbiAgICAgICAgLm1hcCgodG9rZW4pID0+IHRva2VuLnRyaW0oKSlcbiAgICAgICAgLmZvckVhY2goKHRDbGFzcykgPT4gdGlwLmNsYXNzTGlzdC5yZW1vdmUodENsYXNzKSk7XG4gICAgfVxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50OiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb25maWcgPSBzdXBlci5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpO1xuICAgIGNvbmZpZy5tb2RpZmllcnMuYXJyb3cuZWxlbWVudCA9IGAuJHtQb3BvdmVyU2VydmljZS5OQU1FfS1hcnJvd2A7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlclNlcnZpY2U7XG4iLCIvLyBGb3JrIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vanMvc3JjL3RvYXN0LmpzXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4wLWFscGhhMSk6IHRvYXN0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmltcG9ydCB7IFRSQU5TSVRJT05fRU5EIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgcmVmbG93LFxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgZW11bGF0ZVRyYW5zaXRpb25FbmQsXG4gIHR5cGVDaGVja0NvbmZpZyxcbn0gZnJvbSBcIi4uL2hlbHBlci91dGlscy5qc1wiO1xuaW1wb3J0IHsgc2V0RGF0YSwgZ2V0RGF0YSwgcmVtb3ZlRGF0YSB9IGZyb20gXCIuLi9oZWxwZXIvZG9tL2RhdGEuanNcIjtcbmltcG9ydCB7IG9uLCBvbmUsIHRyaWdnZXIgfSBmcm9tIFwiLi4vaGVscGVyL2RvbS9ldmVudC1oYW5kbGVyLmpzXCI7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSBcInRvYXN0XCI7XG5jb25zdCBWRVJTSU9OID0gXCI1LjAuMC1hbHBoYTEtcmliYVwiO1xuY29uc3QgREFUQV9LRVkgPSBcImJzLnRvYXN0XCI7XG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcblxuZXhwb3J0IGNvbnN0IEVWRU5UX0NMSUNLX0RJU01JU1MgPSBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZfWA7XG5leHBvcnQgY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YDtcbmV4cG9ydCBjb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xuZXhwb3J0IGNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YDtcblxuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRkFERSA9IFwiZmFkZVwiO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfSElERSA9IFwiaGlkZVwiO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfU0hPVyA9IFwic2hvd1wiO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfU0hPV0lORyA9IFwic2hvd2luZ1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gIGFuaW1hdGlvbj86IGJvb2xlYW47XG4gIGF1dG9oaWRlPzogYm9vbGVhbjtcbiAgZGVsYXk/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uOiBcImJvb2xlYW5cIixcbiAgYXV0b2hpZGU6IFwiYm9vbGVhblwiLFxuICBkZWxheTogXCJudW1iZXJcIixcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIGF1dG9oaWRlOiB0cnVlLFxuICBkZWxheTogMjAwMCxcbn07XG5cbi8vIGNvbnN0IFNFTEVDVE9SX0RBVEFfRElTTUlTUyA9ICdbZGF0YS1kaXNtaXNzPVwidG9hc3RcIl0nO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRvYXN0U2VydmljZSB7XG4gIHByb3RlY3RlZCBfZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByb3RlY3RlZCBfY29uZmlnOiBDb25maWcgPSB7fTtcbiAgcHJvdGVjdGVkIF90aW1lb3V0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgY29uZmlnOiBDb25maWcpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICBzZXREYXRhKGVsZW1lbnQsIERBVEFfS0VZLCB0aGlzKTtcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT047XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdDtcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHB1YmxpYyBzaG93KCkge1xuICAgIGNvbnN0IHNob3dFdmVudCA9IHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyk7XG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORyk7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgdHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTik7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IE51bWJlcihcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSk7XG4gICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1dJTkcpO1xuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChcbiAgICAgICAgdGhpcy5fZWxlbWVudFxuICAgICAgKTtcblxuICAgICAgb25lKHRoaXMuX2VsZW1lbnQsIFRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSk7XG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoaWRlKCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSk7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURFKTtcbiAgICAgIHRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KFxuICAgICAgICB0aGlzLl9lbGVtZW50XG4gICAgICApO1xuXG4gICAgICBvbmUodGhpcy5fZWxlbWVudCwgVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKTtcbiAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG4gICAgfVxuXG4gICAgLy8gb2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MpO1xuICAgIHJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXG4gICAgLy8gdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgLy8gdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBwcm90ZWN0ZWQgX2dldENvbmZpZyhjb25maWc6IENvbmZpZyk6IENvbmZpZyB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLih0aGlzLl9lbGVtZW50Py5kYXRhc2V0IHx8IHt9KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KSxcbiAgICB9O1xuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgVG9hc3RTZXJ2aWNlLkRlZmF1bHRUeXBlKTtcblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldExpc3RlbmVycygpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb24oXG4gICAgICB0aGlzLl9lbGVtZW50LFxuICAgICAgRVZFTlRfQ0xJQ0tfRElTTUlTUyxcbiAgICAgIC8vIFNFTEVDVE9SX0RBVEFfRElTTUlTUyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gY29uc3QgU0VMRUNUT1JfREFUQV9ESVNNSVNTID0gJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSc7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50Py5kYXRhc2V0LmRpc21pc3MgPT09IFwidG9hc3RcIikge1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHJldHVybiBnZXREYXRhKGVsZW1lbnQsIERBVEFfS0VZKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUb2FzdFNlcnZpY2U7XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMC1hbHBoYTEpOiB0b29sdGlwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9qcy9zcmMvdG9vbHRpcC5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuaW1wb3J0IHsgVFJBTlNJVElPTl9FTkQsIERFRkFVTFRfQUxMT1dMSVNUIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgZW11bGF0ZVRyYW5zaXRpb25FbmQsXG4gIGZpbmRTaGFkb3dSb290LFxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgaXNFbGVtZW50LFxuICBub29wLFxuICB0eXBlQ2hlY2tDb25maWcsXG59IGZyb20gXCIuLi9oZWxwZXIvdXRpbHMuanNcIjtcblxuaW1wb3J0IHtcbiAgY2xhc3NPZixcbiAgZ2V0VUlELFxuICBnZXRFbGVtZW50RnJvbUV2ZW50LFxufSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcbmltcG9ydCB7IHNhbml0aXplSHRtbCB9IGZyb20gXCIuLi9oZWxwZXIvc2FuaXRpemVyLmpzXCI7XG5pbXBvcnQgeyBzZXREYXRhLCBnZXREYXRhLCByZW1vdmVEYXRhIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vZGF0YS5qc1wiO1xuaW1wb3J0IHsgb24sIG9uZSwgb2ZmLCB0cmlnZ2VyIH0gZnJvbSBcIi4uL2hlbHBlci9kb20vZXZlbnQtaGFuZGxlci5qc1wiO1xuaW1wb3J0ICogYXMgTWFuaXB1bGF0b3IgZnJvbSBcIi4uL2hlbHBlci9kb20vbWFuaXB1bGF0b3IuanNcIjtcbmltcG9ydCBQb3BwZXIgZnJvbSBcInBvcHBlci5qc1wiO1xuaW1wb3J0IHsgZmluZE9uZSB9IGZyb20gXCIuLi9oZWxwZXIvZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1wiO1xuaW1wb3J0IHtcbiAgVG9vbHRpcE9wdGlvbnMsXG4gIFRvb2x0aXBUaXRsZUZuLFxuICBUb29sdGlwT2Zmc2V0Rm4sXG59IGZyb20gXCIuLy4uL2ludGVyZmFjZXMvdG9vbHRpcC1vcHRpb25zLmpzXCI7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSBcInRvb2x0aXBcIjtcbmNvbnN0IFZFUlNJT04gPSBcIjUuMC4wLWFscGhhMVwiO1xuY29uc3QgREFUQV9LRVkgPSBcImJzLnRvb2x0aXBcIjtcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xuY29uc3QgQ0xBU1NfUFJFRklYID0gXCJicy10b29sdGlwXCI7XG5jb25zdCBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKGAoXnxcXFxccykke0NMQVNTX1BSRUZJWH1cXFxcUytgLCBcImdcIik7XG5jb25zdCBESVNBTExPV0VEX0FUVFJJQlVURVMgPSBbXCJzYW5pdGl6ZVwiLCBcImFsbG93TGlzdFwiLCBcInNhbml0aXplRm5cIl07XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhbmltYXRpb246IFwiYm9vbGVhblwiLFxuICB0ZW1wbGF0ZTogXCJzdHJpbmdcIixcbiAgdGl0bGU6IFwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwiLFxuICB0cmlnZ2VyOiBcInN0cmluZ1wiLFxuICBkZWxheTogXCIobnVtYmVyfG9iamVjdClcIixcbiAgaHRtbDogXCJib29sZWFuXCIsXG4gIHNlbGVjdG9yOiBcIihzdHJpbmd8Ym9vbGVhbnx1bmRlZmluZWQpXCIsXG4gIHBsYWNlbWVudDogXCIoc3RyaW5nfGZ1bmN0aW9uKVwiLFxuICBvZmZzZXQ6IFwiKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pXCIsXG4gIGNvbnRhaW5lcjogXCIoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbnx1bmRlZmluZWQpXCIsXG4gIGZhbGxiYWNrUGxhY2VtZW50OiBcIihzdHJpbmd8YXJyYXkpXCIsXG4gIGJvdW5kYXJ5OiBcIihzdHJpbmd8ZWxlbWVudClcIixcbiAgc2FuaXRpemU6IFwiYm9vbGVhblwiLFxuICBzYW5pdGl6ZUZuOiBcIihudWxsfGZ1bmN0aW9uKVwiLFxuICBhbGxvd0xpc3Q6IFwib2JqZWN0XCIsXG4gIHBvcHBlckNvbmZpZzogXCIobnVsbHxvYmplY3QpXCIsXG59O1xuXG5jb25zdCBBdHRhY2htZW50TWFwID0ge1xuICBBVVRPOiBcImF1dG9cIixcbiAgVE9QOiBcInRvcFwiLFxuICBSSUdIVDogXCJyaWdodFwiLFxuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIExFRlQ6IFwibGVmdFwiLFxufTtcblxuY29uc3QgRGVmYXVsdDogVG9vbHRpcE9wdGlvbnMgPSB7XG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgY29udGFpbmVyOiB1bmRlZmluZWQsXG4gIGRlbGF5OiAwLFxuICBodG1sOiBmYWxzZSxcbiAgcGxhY2VtZW50OiBcInRvcFwiLFxuICBzZWxlY3RvcjogdW5kZWZpbmVkLFxuICB0ZW1wbGF0ZTpcbiAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvdyBhcnJvd1wiPjwvZGl2PicgK1xuICAgICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gIHRpdGxlOiBcIlwiLFxuICB0cmlnZ2VyOiBcImhvdmVyIGZvY3VzXCIsXG4gIG9mZnNldDogMCxcbiAgZmFsbGJhY2tQbGFjZW1lbnQ6IFwiZmxpcFwiLFxuICBib3VuZGFyeTogXCJzY3JvbGxQYXJlbnRcIixcbiAgc2FuaXRpemU6IHRydWUsXG4gIHNhbml0aXplRm46IG51bGwsXG4gIGFsbG93TGlzdDogREVGQVVMVF9BTExPV0xJU1QsXG4gIHBvcHBlckNvbmZpZzogbnVsbCxcbn07XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBISURFOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV046IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWX1gLFxuICBDTElDSzogYGNsaWNrJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNJTjogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxuICBNT1VTRUxFQVZFOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWAsXG59O1xuXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSBcImZhZGVcIjtcbmNvbnN0IENMQVNTX05BTUVfTU9EQUwgPSBcIm1vZGFsXCI7XG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSBcInNob3dcIjtcblxuY29uc3QgSE9WRVJfU1RBVEVfU0hPVyA9IFwic2hvd1wiO1xuY29uc3QgSE9WRVJfU1RBVEVfT1VUID0gXCJvdXRcIjtcblxuY29uc3QgU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiA9IFwiLnRvb2x0aXAtaW5uZXJcIjtcblxuY29uc3QgVFJJR0dFUl9IT1ZFUiA9IFwiaG92ZXJcIjtcbmNvbnN0IFRSSUdHRVJfRk9DVVMgPSBcImZvY3VzXCI7XG5jb25zdCBUUklHR0VSX0NMSUNLID0gXCJjbGlja1wiO1xuY29uc3QgVFJJR0dFUl9NQU5VQUwgPSBcIm1hbnVhbFwiO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBTZXJ2aWNlIHtcbiAgc3RhdGljIHJlYWRvbmx5IENPTlNUQU5UUzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcbiAgICBOQU1FLFxuICAgIFZFUlNJT04sXG4gICAgREFUQV9LRVksXG4gICAgRVZFTlRfS0VZLFxuICAgIENMQVNTX1BSRUZJWCxcbiAgICBCU0NMU19QUkVGSVhfUkVHRVgsXG4gICAgRElTQUxMT1dFRF9BVFRSSUJVVEVTLFxuXG4gICAgRGVmYXVsdFR5cGUsXG4gICAgQXR0YWNobWVudE1hcCxcbiAgICBEZWZhdWx0LFxuICAgIEV2ZW50LFxuXG4gICAgQ0xBU1NfTkFNRV9GQURFLFxuICAgIENMQVNTX05BTUVfTU9EQUwsXG4gICAgQ0xBU1NfTkFNRV9TSE9XLFxuXG4gICAgSE9WRVJfU1RBVEVfU0hPVyxcbiAgICBIT1ZFUl9TVEFURV9PVVQsXG5cbiAgICBTRUxFQ1RPUl9UT09MVElQX0lOTkVSLFxuXG4gICAgVFJJR0dFUl9IT1ZFUixcbiAgICBUUklHR0VSX0ZPQ1VTLFxuICAgIFRSSUdHRVJfQ0xJQ0ssXG4gICAgVFJJR0dFUl9NQU5VQUwsXG4gIH07XG4gIHByaXZhdGUgX2lzRW5hYmxlZCA9IHRydWU7XG4gIHByaXZhdGUgX3RpbWVvdXQgPSAwO1xuICBwcml2YXRlIF9ob3ZlclN0YXRlID0gXCJcIjtcbiAgcHJpdmF0ZSBfYWN0aXZlVHJpZ2dlcjogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgcHJpdmF0ZSBfcG9wcGVyOiBudWxsIHwgUG9wcGVyID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBIVE1MVW5rbm93bkVsZW1lbnQ7XG4gIHByb3RlY3RlZCBjb25maWc6IFRvb2x0aXBPcHRpb25zO1xuICBwcm90ZWN0ZWQgdGlwOiBudWxsIHwgSFRNTEVsZW1lbnQgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50LFxuICAgIGNvbmZpZzogVG9vbHRpcE9wdGlvbnNcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiQm9vdHN0cmFwJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gICAgc2V0RGF0YShlbGVtZW50LCBUb29sdGlwU2VydmljZS5EQVRBX0tFWSwgdGhpcyk7XG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FO1xuICB9XG5cbiAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcbiAgICByZXR1cm4gREFUQV9LRVk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRVZFTlRfS0VZKCkge1xuICAgIHJldHVybiBFVkVOVF9LRVk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgfVxuXG4gIHRvZ2dsZShldmVudDogRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29uc3QgZGF0YUtleSA9IFRvb2x0aXBTZXJ2aWNlLkRBVEFfS0VZO1xuICAgICAgY29uc3QgZWxlbWVudCA9IGdldEVsZW1lbnRGcm9tRXZlbnQoZXZlbnQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBnZXREYXRhKGVsZW1lbnQsIGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyBUb29sdGlwU2VydmljZShlbGVtZW50LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgc2V0RGF0YShlbGVtZW50LCBkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgICB0aGlzLl9sZWF2ZSh1bmRlZmluZWQsIHRoaXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VudGVyKHVuZGVmaW5lZCwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cbiAgICByZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgVG9vbHRpcFNlcnZpY2UuREFUQV9LRVkpO1xuXG4gICAgLy8gb2ZmKHRoaXMuZWxlbWVudCwgVG9vbHRpcFNlcnZpY2UuRVZFTlRfS0VZKTtcbiAgICBjb25zdCBtb2RhbEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuY2xvc2VzdChgLiR7Q0xBU1NfTkFNRV9NT0RBTH1gKTtcbiAgICBpZiAobW9kYWxFbGVtZW50KSB7XG4gICAgICBvZmYobW9kYWxFbGVtZW50LCBcImhpZGUuYnMubW9kYWxcIiwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICB0aGlzLnRpcC5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLnRpcCk7XG4gICAgfVxuXG4gICAgLy8gdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAvLyB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICAvLyB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAvLyB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgLy8gdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAvLyB0aGlzLmNvbmZpZyA9IG51bGw7XG4gICAgLy8gdGhpcy50aXAgPSBudWxsO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICBjb25zdCBzaG93RXZlbnQgPSB0cmlnZ2VyKHRoaXMuZWxlbWVudCwgY2xhc3NPZih0aGlzKS5FdmVudC5TSE9XKTtcbiAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBmaW5kU2hhZG93Um9vdCh0aGlzLmVsZW1lbnQpO1xuICAgICAgY29uc3QgaXNJblRoZURvbSA9XG4gICAgICAgIHNoYWRvd1Jvb3QgPT09IG51bGxcbiAgICAgICAgICA/IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgOiBzaGFkb3dSb290LmNvbnRhaW5zKHRoaXMuZWxlbWVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCAhaXNJblRoZURvbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgY29uc3QgdGlwSWQgPSBnZXRVSUQoVG9vbHRpcFNlcnZpY2UuTkFNRSk7XG5cbiAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aXBJZCk7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLCB0aXBJZCk7XG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBsYWNlbWVudCA9XG4gICAgICAgIHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgIGNvbnN0IGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCB8fCB1bmRlZmluZWQpO1xuICAgICAgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuXG4gICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9nZXRDb250YWluZXIoKTtcbiAgICAgIHNldERhdGEodGlwLCBUb29sdGlwU2VydmljZS5EQVRBX0tFWSwgdGhpcyk7XG5cbiAgICAgIGlmICghdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKSkge1xuICAgICAgICBjb250YWluZXI/LmFwcGVuZENoaWxkKHRpcCk7XG4gICAgICB9XG5cbiAgICAgIHRyaWdnZXIodGhpcy5lbGVtZW50LCBjbGFzc09mKHRoaXMpLkV2ZW50LklOU0VSVEVEKTtcblxuICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihcbiAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICB0aXAsXG4gICAgICAgIHRoaXMuX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KVxuICAgICAgKTtcblxuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBvbihlbGVtZW50LCBcIm1vdXNlb3ZlclwiLCBub29wKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9maXhUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmV2SG92ZXJTdGF0ZSA9IHRoaXMuX2hvdmVyU3RhdGU7XG4gICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBcIlwiO1xuICAgICAgICB0cmlnZ2VyKHRoaXMuZWxlbWVudCwgY2xhc3NPZih0aGlzKS5FdmVudC5TSE9XTik7XG5cbiAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgICB0aGlzLl9sZWF2ZSh1bmRlZmluZWQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy50aXA/LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMudGlwKTtcbiAgICAgICAgb25lKHRoaXMudGlwLCBUUkFOU0lUSU9OX0VORCwgY29tcGxldGUpO1xuICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0aGlzLnRpcCwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXRlICE9PSBIT1ZFUl9TVEFURV9TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRpcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpO1xuICAgICAgdHJpZ2dlcih0aGlzLmVsZW1lbnQsIGNsYXNzT2YodGhpcykuRXZlbnQuSElEREVOKTtcbiAgICAgIHRoaXMuX3BvcHBlcj8uZGVzdHJveSgpO1xuICAgIH07XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSB0cmlnZ2VyKHRoaXMuZWxlbWVudCwgY2xhc3NPZih0aGlzKS5FdmVudC5ISURFKTtcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpO1xuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKChlbGVtZW50KSA9PlxuICAgICAgICBvZmYoZWxlbWVudCwgXCJtb3VzZW92ZXJcIiwgbm9vcClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0NMSUNLXSA9IGZhbHNlO1xuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9GT0NVU10gPSBmYWxzZTtcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfSE9WRVJdID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy50aXA/LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aXApO1xuXG4gICAgICBvbmUodGlwLCBUUkFOU0lUSU9OX0VORCwgY29tcGxldGUpO1xuICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGlwLCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBcIlwiO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFByb3RlY3RlZFxuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKTtcbiAgfVxuXG4gIGdldFRpcEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5jb25maWcudGVtcGxhdGU7XG5cbiAgICB0aGlzLnRpcCA9IGVsZW1lbnQuY2hpbGRyZW5bMF0gYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICBpZiAoIXRoaXMudGlwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb29sdGlwIG5vdCBmb3VuZCFcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGlwO1xuICB9XG5cbiAgc2V0Q29udGVudCgpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KFxuICAgICAgZmluZE9uZShTRUxFQ1RPUl9UT09MVElQX0lOTkVSLCB0aXApLFxuICAgICAgdGhpcy5nZXRUaXRsZSgpXG4gICAgKTtcbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0ZBREUsIENMQVNTX05BTUVfU0hPVyk7XG4gIH1cblxuICBzZXRFbGVtZW50Q29udGVudChcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwsXG4gICAgY29udGVudDogRWxlbWVudCB8IG51bGwgfCBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwib2JqZWN0XCIgJiYgY29udGVudCAhPT0gbnVsbCAmJiBpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgIGlmICgoY29udGVudCBhcyBhbnkpLmpxdWVyeSkge1xuICAgICAgICBjb250ZW50ID0gKGNvbnRlbnQgYXMgYW55KVswXTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCA9IGNvbnRlbnQgYXMgRWxlbWVudDtcblxuICAgICAgLy8gY29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICBpZiAodGhpcy5jb25maWcuaHRtbCkge1xuICAgICAgICBpZiAoY29udGVudC5wYXJlbnROb2RlICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50LnRleHRDb250ZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGVudCA9IGNvbnRlbnQgYXMgc3RyaW5nO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmh0bWwgJiYgdGhpcy5jb25maWcuc2FuaXRpemUpIHtcbiAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIHRoaXMuY29uZmlnLmFsbG93TGlzdCxcbiAgICAgICAgdGhpcy5jb25maWcuc2FuaXRpemVGbiB8fCB1bmRlZmluZWRcbiAgICAgICk7XG4gICAgfVxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudDtcbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIGxldCB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO1xuXG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgdGl0bGUgPVxuICAgICAgICB0eXBlb2YgdGhpcy5jb25maWcudGl0bGUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gKHRoaXMuY29uZmlnLnRpdGxlIGFzIFRvb2x0aXBUaXRsZUZuKSh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgOiB0aGlzLmNvbmZpZy50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGU7XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50OiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcbiAgICAgICAgZmxpcDoge1xuICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudCxcbiAgICAgICAgfSxcbiAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICBlbGVtZW50OiBgLiR7VG9vbHRpcFNlcnZpY2UuTkFNRX0tYXJyb3dgLFxuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgb25DcmVhdGU6IChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IChkYXRhOiBhbnkpID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRCc0NvbmZpZyxcbiAgICAgIC4uLnRoaXMuY29uZmlnLnBvcHBlckNvbmZpZyxcbiAgICB9O1xuICB9XG5cbiAgX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKGAke0NMQVNTX1BSRUZJWH0tJHthdHRhY2htZW50fWApO1xuICB9XG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCBvZmZzZXQ6IGFueSA9IHt9O1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLm9mZnNldCAmJiB0eXBlb2YgdGhpcy5jb25maWcub2Zmc2V0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9mZnNldC5mbiA9IChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgZGF0YS5vZmZzZXRzID0ge1xuICAgICAgICAgIC4uLmRhdGEub2Zmc2V0cyxcbiAgICAgICAgICAuLi4oKHRoaXMuY29uZmlnLm9mZnNldCBhcyBUb29sdGlwT2Zmc2V0Rm4pKFxuICAgICAgICAgICAgZGF0YS5vZmZzZXRzLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgKSB8fCB7fSksXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXQub2Zmc2V0ID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICBfZ2V0Q29udGFpbmVyKCkge1xuICAgIGlmICghdGhpcy5jb25maWcuY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICB9XG5cbiAgICBpZiAoaXNFbGVtZW50KHRoaXMuY29uZmlnLmNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb250YWluZXI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBmaW5kT25lKHRoaXMuY29uZmlnLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQgPSBcIkFVVE9cIikge1xuICAgIHJldHVybiBBdHRhY2htZW50TWFwW1xuICAgICAgKHBsYWNlbWVudC50b1VwcGVyQ2FzZSgpIGFzIFwiQVVUT1wiIHwgXCJUT1BcIiB8IFwiUklHSFRcIikgfHxcbiAgICAgICAgXCJCT1RUT01cIiB8fFxuICAgICAgICBcIkxFRlRcIlxuICAgIF07XG4gIH1cblxuICBfc2V0TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdChcIiBcIik7XG5cbiAgICAvKlxuICAgICAgVE9ETzogVG9vbHRpcFNlcnZpY2UuRXZlbnQuWy4uLl0gY29uc3RhbnRzIHJlcGxhY2VkIGhlcmUgd2l0aCBzdGFuZGFyZCBldmVudHMuXG4gICAgICBIb3cgYXJlIHRoZSBUb29sdGlwU2VydmljZS5FdmVudHMgbWFkZSB0byB3b3JrIGFzIGV2ZW50IG5hbWVzIGluIEJvb3RzdHJhcCwgYW5kIHNob3VsZCB3ZSB1c2UgdGhlIHNhbWUgd2F5P1xuICAgICovXG4gICAgdHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcikgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIgPT09IFwiY2xpY2tcIikge1xuICAgICAgICBvbihcbiAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgXCJjbGlja1wiLCAvLyBUb29sdGlwU2VydmljZS5FdmVudC5DTElDSyxcbiAgICAgICAgICAvLyB0aGlzLmNvbmZpZy5zZWxlY3RvcixcbiAgICAgICAgICAoZXZlbnQ6IEV2ZW50KSA9PiB0aGlzLnRvZ2dsZShldmVudClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVFJJR0dFUl9NQU5VQUwpIHtcbiAgICAgICAgY29uc3QgZXZlbnRJbiA9XG4gICAgICAgICAgdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUlxuICAgICAgICAgICAgPyBcIm1vdXNlb3ZlclwiIC8vIFRvb2x0aXBTZXJ2aWNlLkV2ZW50Lk1PVVNFRU5URVJcbiAgICAgICAgICAgIDogXCJmb2N1c1wiOyAvLyBUb29sdGlwU2VydmljZS5FdmVudC5GT0NVU0lOO1xuICAgICAgICBjb25zdCBldmVudE91dCA9XG4gICAgICAgICAgdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUlxuICAgICAgICAgICAgPyBcIm1vdXNlb3V0XCIgLy8gVG9vbHRpcFNlcnZpY2UuRXZlbnQuTU9VU0VMRUFWRVxuICAgICAgICAgICAgOiBcImJsdXJcIjsgLy8gVG9vbHRpcFNlcnZpY2UuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgIG9uKHRoaXMuZWxlbWVudCwgZXZlbnRJbiAvKiwgdGhpcy5jb25maWcuc2VsZWN0b3IqLywgKGV2ZW50KSA9PlxuICAgICAgICAgIHRoaXMuX2VudGVyKGV2ZW50KVxuICAgICAgICApO1xuICAgICAgICBvbih0aGlzLmVsZW1lbnQsIGV2ZW50T3V0IC8qLCB0aGlzLmNvbmZpZy5zZWxlY3RvciovLCAoZXZlbnQpID0+XG4gICAgICAgICAgdGhpcy5fbGVhdmUoZXZlbnQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyID0gKCkgPT4ge1xuICAgIC8vICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgIC8vICAgICB0aGlzLmhpZGUoKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9O1xuICAgIGNvbnN0IGNsb3Nlc3RNb2RhbEVsID0gdGhpcy5lbGVtZW50LmNsb3Nlc3QoYC4ke0NMQVNTX05BTUVfTU9EQUx9YCk7XG4gICAgaWYgKGNsb3Nlc3RNb2RhbEVsKSB7XG4gICAgICBvbihjbG9zZXN0TW9kYWxFbCwgXCJoaWRlLmJzLm1vZGFsXCIsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgICB0cmlnZ2VyOiBcIm1hbnVhbFwiLFxuICAgICAgICBzZWxlY3RvcjogXCJcIixcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgfVxuICB9XG5cbiAgX2hpZGVNb2RhbEhhbmRsZXIoKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgX2ZpeFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKTtcblxuICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgfHwgdGl0bGVUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICBcImRhdGEtb3JpZ2luYWwtdGl0bGVcIixcbiAgICAgICAgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpIHx8IFwiXCJcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlwiKTtcbiAgICB9XG4gIH1cblxuICBfZW50ZXIoZXZlbnQ/OiBFdmVudCwgY29udGV4dD86IGFueSkge1xuICAgIGNvbnN0IGRhdGFLZXkgPSBUb29sdGlwU2VydmljZS5EQVRBX0tFWTtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGVsID0gKGV2ZW50IGFzIGFueSkuZGVsZWdhdGVUYXJnZXQgfHwgZ2V0RWxlbWVudEZyb21FdmVudChldmVudCk7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBnZXREYXRhKGVsLCBkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgVG9vbHRpcFNlcnZpY2UoZWwsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICBzZXREYXRhKGVsLCBkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcbiAgICAgICAgZXZlbnQudHlwZSA9PT0gXCJmb2N1c2luXCIgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUlxuICAgICAgXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY29udGV4dC5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykgfHxcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX1NIT1dcbiAgICApIHtcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcblxuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuXG4gICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgY29udGV4dC5zaG93KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcbiAgICAgICAgY29udGV4dC5zaG93KCk7XG4gICAgICB9XG4gICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gIH1cblxuICBfbGVhdmUoZXZlbnQ/OiBFdmVudCwgY29udGV4dD86IGFueSkge1xuICAgIGNvbnN0IGRhdGFLZXkgPSBUb29sdGlwU2VydmljZS5EQVRBX0tFWTtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGVsID0gKGV2ZW50IGFzIGFueSkuZGVsZWdhdGVUYXJnZXQgfHwgZ2V0RWxlbWVudEZyb21FdmVudChldmVudCk7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBnZXREYXRhKGVsLCBkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgVG9vbHRpcFNlcnZpY2UoZWwsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICBzZXREYXRhKGVsLCBkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbXG4gICAgICAgIGV2ZW50LnR5cGUgPT09IFwiZm9jdXNvdXRcIiA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXG4gICAgICBdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcblxuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9PVVQ7XG5cbiAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKSB7XG4gICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgfVxuICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpO1xuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnOiBUb29sdGlwT3B0aW9ucykge1xuICAgIGNvbnN0IGRhdGFBdHRyaWJ1dGVzID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5lbGVtZW50KTtcblxuICAgIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKS5mb3JFYWNoKChkYXRhQXR0cikgPT4ge1xuICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5pbmRleE9mKGRhdGFBdHRyKSAhPT0gLTEpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChcbiAgICAgIGNvbmZpZyAmJlxuICAgICAgdHlwZW9mIGNvbmZpZy5jb250YWluZXIgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIChjb25maWcuY29udGFpbmVyIGFzIGFueSkuanF1ZXJ5IC8vIFRPRE8/XG4gICAgKSB7XG4gICAgICBjb25maWcuY29udGFpbmVyID0gKGNvbmZpZy5jb250YWluZXIgYXMgYW55KVswXTsgLy8gVE9ETz9cbiAgICB9XG5cbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5Ub29sdGlwU2VydmljZS5EZWZhdWx0LFxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gXCJvYmplY3RcIiAmJiBjb25maWcgPyBjb25maWcgOiB7fSksXG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcbiAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLnRpdGxlICYmIHR5cGVvZiBjb25maWcudGl0bGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbmZpZy50aXRsZSA9IChjb25maWcudGl0bGUgYXMgbnVtYmVyKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY29udGVudCAmJiB0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbmZpZy5jb250ZW50ID0gKGNvbmZpZy5jb250ZW50IGFzIG51bWJlcikudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBUb29sdGlwU2VydmljZS5EZWZhdWx0VHlwZSk7XG5cbiAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XG4gICAgICBjb25maWcudGVtcGxhdGUgPVxuICAgICAgICBzYW5pdGl6ZUh0bWwoXG4gICAgICAgICAgY29uZmlnLnRlbXBsYXRlLFxuICAgICAgICAgIGNvbmZpZy5hbGxvd0xpc3QsXG4gICAgICAgICAgY29uZmlnLnNhbml0aXplRm4gfHwgdW5kZWZpbmVkXG4gICAgICAgICkgfHwgXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2dldERlbGVnYXRlQ29uZmlnKCk6IFRvb2x0aXBPcHRpb25zIHtcbiAgICBjb25zdCBjb25maWc6IFBhcnRpYWw8VG9vbHRpcE9wdGlvbnM+ID0ge307XG5cbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE8gZml4IHR5cGVzXG4gICAgICAgIGlmIChcbiAgICAgICAgICAodGhpcy5jb25maWcgYXMgYW55KVtrZXldICE9PSAoVG9vbHRpcFNlcnZpY2UuRGVmYXVsdCBhcyBhbnkpW2tleV1cbiAgICAgICAgKSB7XG4gICAgICAgICAgKGNvbmZpZyBhcyBhbnkpW2tleV0gPSAodGhpcy5jb25maWcgYXMgYW55KVtrZXldOyAvLyBUT0RPIGZpeCB0eXBlc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZyBhcyBUb29sdGlwT3B0aW9ucztcbiAgfVxuXG4gIF9jbGVhblRpcENsYXNzKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpPy5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuICAgIGlmICh0YWJDbGFzcyAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICB0YWJDbGFzc1xuICAgICAgICAubWFwKCh0b2tlbikgPT4gdG9rZW4udHJpbSgpKVxuICAgICAgICAuZm9yRWFjaCgodENsYXNzKSA9PiB0aXAuY2xhc3NMaXN0LnJlbW92ZSh0Q2xhc3MpKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGE6IGFueSkge1xuICAgIHRoaXMudGlwID0gcG9wcGVyRGF0YS5pbnN0YW5jZS5wb3BwZXI7XG4gICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSk7XG4gIH1cblxuICBfZml4VHJhbnNpdGlvbigpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICBjb25zdCBpbml0Q29uZmlnQW5pbWF0aW9uID0gdGhpcy5jb25maWcuYW5pbWF0aW9uO1xuICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIikgIT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0ZBREUpO1xuICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMuc2hvdygpO1xuICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGluaXRDb25maWdBbmltYXRpb247XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcFNlcnZpY2U7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuIiwiLyoqXG4gKiBCYXNlQ2FjaGUgaXQncyBhIHNpbXBsZSBzdGF0aWMgY2FjaGVcbiAqL1xuY2xhc3MgQmFzZUNhY2hlPFQgPSBhbnk+IHtcbiAgLyoqXG4gICAqIFRoZSBPYmplY3QgdGhhdCBrZWVwcyBhbGwgdGhlIGtleSB2YWx1ZSBpbmZvcm1hdGlvblxuICAgKi9cbiAgcHVibGljIGRhdGE6IHsgW2tleTogc3RyaW5nXTogVCB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGF0YSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIGtleSBhbmQgdmFsdWUgZGF0YSwgbWFpbmx5IEJhcmJhIGlzIGdvaW5nIHRvIHNhdmUgcHJvbWlzZXNcbiAgICpcbiAgICovXG4gIHB1YmxpYyBzZXQoa2V5OiBzdHJpbmcsIHZhbDogVCkge1xuICAgIHRoaXMuZGF0YVtrZXldID0gdmFsO1xuICAgIHJldHVybiB0aGlzLmRhdGFba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZGF0YSB1c2luZyB0aGUga2V5XG4gICAqL1xuICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHRoZSBjYWNoZVxuICAgKi9cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIHRoaXMuZGF0YSA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCB7IEJhc2VDYWNoZSB9O1xuIiwiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gXCJrZXNoaVwiO1xuaW1wb3J0IHR5cGUgeyBTdG9yYWdlIH0gZnJvbSBcImtlc2hpXCI7XG5pbXBvcnQgeyBnZXQsIHNldCwga2V5cywgZGVsLCBjbGVhciB9IGZyb20gXCJpZGIta2V5dmFsXCI7XG5cbmNvbnN0IGlkYlN0b3JhZ2U6IFN0b3JhZ2UgPSB7XG4gIGdldCxcbiAgc2V0LFxuICBrZXlzLFxuICBkZWwsXG4gIGNsZWFyOiAoKSA9PiB7XG4gICAgcmV0dXJuIGNsZWFyKCkgYXMgYW55O1xuICB9LFxufTtcbmNvbnN0IGlkYkNhY2hlID0gY3JlYXRlQ2FjaGUoe1xuICAvLyBVc2UgZGVmYXVsdCBtZW1vcnkgc3RvcmFnZSBvbiBzc3JcbiAgY3VzdG9tU3RvcmFnZTogKHdpbmRvdyBhcyBhbnkpLnNzciA/IHVuZGVmaW5lZCA6IGlkYlN0b3JhZ2UsXG59KTtcblxuZXhwb3J0IHsgaWRiQ2FjaGUgfTtcbiIsImltcG9ydCBjcmVhdGVDYWNoZSBmcm9tIFwia2VzaGlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2UtY2FjaGUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaWRiLWNhY2hlLnNlcnZpY2UuanNcIjtcbmV4cG9ydCB7IGNyZWF0ZUNhY2hlIH07XG4iLCJpbXBvcnQge1xuICBBZGFwdGVyLFxuICBBZGFwdGVyRnVuY3Rpb24sXG4gIFJlZixcbiAgT2JzZXJ2ZXJTeW5jQ2FsbGJhY2ssXG4gIFJWQXJyYXksXG59IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgRG90QWRhcHRlciBpbXBsZW1lbnRzIEFkYXB0ZXIge1xuICBwdWJsaWMgc3RhdGljIEFSUkFZX01FVEhPRFMgPSBbXG4gICAgXCJwdXNoXCIsXG4gICAgXCJwb3BcIixcbiAgICBcInNoaWZ0XCIsXG4gICAgXCJ1bnNoaWZ0XCIsXG4gICAgXCJzb3J0XCIsXG4gICAgXCJyZXZlcnNlXCIsXG4gICAgXCJzcGxpY2VcIixcbiAgXTtcblxuICBwdWJsaWMgbmFtZSA9IFwiLlwiO1xuXG4gIHB1YmxpYyBjb3VudGVyID0gMDtcbiAgcHVibGljIHdlYWttYXA6IGFueSA9IHt9O1xuXG4gIHB1YmxpYyB3ZWFrUmVmZXJlbmNlKG9iajogYW55KSB7XG4gICAgaWYgKCFPYmplY3QuaGFzT3duUHJvcGVydHkuYmluZChvYmopKFwiX19ydlwiKSkge1xuICAgICAgY29uc3QgaWQgPSB0aGlzLmNvdW50ZXIrKztcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgXCJfX3J2XCIsIHtcbiAgICAgICAgdmFsdWU6IGlkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLndlYWttYXBbb2JqLl9fcnZdKSB7XG4gICAgICB0aGlzLndlYWttYXBbb2JqLl9fcnZdID0ge1xuICAgICAgICBjYWxsYmFja3M6IHt9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhbnVwV2Vha1JlZmVyZW5jZShyZWY6IFJlZiwgaWQ6IG51bWJlcikge1xuICAgIGlmICghT2JqZWN0LmtleXMocmVmLmNhbGxiYWNrcykubGVuZ3RoKSB7XG4gICAgICBpZiAoIShyZWYucG9pbnRlcnMgJiYgT2JqZWN0LmtleXMocmVmLnBvaW50ZXJzKS5sZW5ndGgpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLndlYWttYXBbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdHViRnVuY3Rpb24ob2JqOiBhbnksIGZuOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IG9ialtmbl07XG4gICAgY29uc3QgbWFwID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaik7XG4gICAgY29uc3Qgd2Vha21hcCA9IHRoaXMud2Vha21hcDtcblxuICAgIG9ialtmbl0gPSAoLi4uYXJnczogYW55W10pOiBBZGFwdGVyRnVuY3Rpb24gPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBvcmlnaW5hbC5hcHBseShvYmosIGFyZ3MpO1xuXG4gICAgICBPYmplY3Qua2V5cyhtYXAucG9pbnRlcnMpLmZvckVhY2goKHIpID0+IHtcbiAgICAgICAgY29uc3QgayA9IG1hcC5wb2ludGVyc1tyXTtcblxuICAgICAgICBpZiAod2Vha21hcFtyXSkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHdlYWttYXBbcl0uY2FsbGJhY2tzW2tdKSkge1xuICAgICAgICAgICAgd2Vha21hcFtyXS5jYWxsYmFja3Nba10uZm9yRWFjaChcbiAgICAgICAgICAgICAgKGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLnN5bmMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvYnNlcnZlTXV0YXRpb25zKG9iajogYW55LCByZWY6IHN0cmluZywga2V5cGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgY29uc3QgbWFwID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaik7XG5cbiAgICAgIGlmICghbWFwLnBvaW50ZXJzKSB7XG4gICAgICAgIG1hcC5wb2ludGVycyA9IHt9O1xuXG4gICAgICAgIERvdEFkYXB0ZXIuQVJSQVlfTUVUSE9EUy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgICAgIHRoaXMuc3R1YkZ1bmN0aW9uKG9iaiwgZm4pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtYXAucG9pbnRlcnNbcmVmXSkge1xuICAgICAgICBtYXAucG9pbnRlcnNbcmVmXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFwLnBvaW50ZXJzW3JlZl0uaW5kZXhPZihrZXlwYXRoKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnBvaW50ZXJzW3JlZl0ucHVzaChrZXlwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdW5vYnNlcnZlTXV0YXRpb25zKG9iajogUlZBcnJheSwgcmVmOiBzdHJpbmcsIGtleXBhdGg6IHN0cmluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLl9fcnYgIT0gbnVsbCkge1xuICAgICAgY29uc3QgbWFwID0gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcblxuICAgICAgaWYgKG1hcCkge1xuICAgICAgICBjb25zdCBwb2ludGVycyA9IG1hcC5wb2ludGVyc1tyZWZdO1xuXG4gICAgICAgIGlmIChwb2ludGVycykge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHBvaW50ZXJzLmluZGV4T2Yoa2V5cGF0aCk7XG5cbiAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHBvaW50ZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgbWFwLnBvaW50ZXJzW3JlZl07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jbGVhbnVwV2Vha1JlZmVyZW5jZShtYXAsIG9iai5fX3J2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvYnNlcnZlKG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFjaykge1xuICAgIGxldCB2YWx1ZTogYW55O1xuXG4gICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaikuY2FsbGJhY2tzO1xuXG4gICAgaWYgKCFjYWxsYmFja3Nba2V5cGF0aF0pIHtcbiAgICAgIGNhbGxiYWNrc1trZXlwYXRoXSA9IFtdO1xuICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXlwYXRoKTtcblxuICAgICAgaWYgKCFkZXNjIHx8ICEoZGVzYy5nZXQgfHwgZGVzYy5zZXQgfHwgIWRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgICB2YWx1ZSA9IG9ialtrZXlwYXRoXTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXlwYXRoLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBzZXQ6IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZU11dGF0aW9ucyh2YWx1ZSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICBjb25zdCBtYXAgPSB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgICAgICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBfY2FsbGJhY2tzID0gbWFwLmNhbGxiYWNrc1trZXlwYXRoXTtcblxuICAgICAgICAgICAgICAgIGlmIChfY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICBfY2FsbGJhY2tzLmZvckVhY2goKGNiOiBPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYi5zeW5jKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVNdXRhdGlvbnMobmV3VmFsdWUsIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYWxsYmFja3Nba2V5cGF0aF0uaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICBjYWxsYmFja3Nba2V5cGF0aF0ucHVzaChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlTXV0YXRpb25zKG9ialtrZXlwYXRoXSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICB9XG5cbiAgcHVibGljIHVub2JzZXJ2ZShvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgaWYgKG1hcCkge1xuICAgICAgY29uc3QgY2FsbGJhY2tzID0gbWFwLmNhbGxiYWNrc1trZXlwYXRoXTtcblxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjb25zdCBpZHggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG5cbiAgICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuXG4gICAgICAgICAgaWYgKCFjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgbWFwLmNhbGxiYWNrc1trZXlwYXRoXTtcbiAgICAgICAgICAgIHRoaXMudW5vYnNlcnZlTXV0YXRpb25zKG9ialtrZXlwYXRoXSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYW51cFdlYWtSZWZlcmVuY2UobWFwLCBvYmouX19ydik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG9ialtrZXlwYXRoXTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIG9ialtrZXlwYXRoXSA9IHZhbHVlO1xuICB9XG59XG5cbmNvbnN0IGRvdEFkYXB0ZXIgPSBuZXcgRG90QWRhcHRlcigpO1xuZXhwb3J0IHsgZG90QWRhcHRlciB9O1xuIiwiZXhwb3J0IHsgZG90QWRhcHRlciB9IGZyb20gXCIuL2RvdC5hZGFwdGVyLmpzXCI7XG4iLCJpbXBvcnQgeyBwYXJzZVR5cGUsIFBSSU1JVElWRSwgS0VZUEFUSCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwiLi9vYnNlcnZlci5qc1wiO1xuaW1wb3J0IHR5cGUge1xuICBGb3JtYXR0ZXJPYnNlcnZlcnMsXG4gIGV2ZW50SGFuZGxlckZ1bmN0aW9uLFxuICBPYnNlcnZlclN5bmNDYWxsYmFjayxcbiAgQmluZGFibGUsXG59IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBGT1JNQVRURVJfQVJHUywgRk9STUFUVEVSX1NQTElUIH0gZnJvbSBcIi4vY29uc3RhbnRzL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHR5cGUgeyBWaWV3IH0gZnJvbSBcIi4vdmlldy5qc1wiO1xuaW1wb3J0IHsgZ2V0SW5wdXRWYWx1ZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuLyoqXG4gKiBBIHNpbmdsZSBiaW5kaW5nIGJldHdlZW4gYSBtb2RlbCBhdHRyaWJ1dGUgYW5kIGEgRE9NIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCaW5kZXI8VCA9IGFueSwgRSA9IEhUTUxVbmtub3duRWxlbWVudD5cbiAgaW1wbGVtZW50cyBCaW5kYWJsZTxFPlxue1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGJpbmRlciB0byBhY2Nlc3MgdGhlIGJpbmRlciBieVxuICAgKi9cbiAgc3RhdGljIGtleSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEJsb2NrcyB0aGUgY3VycmVudCBub2RlIGFuZCBjaGlsZCBub2RlcyBmcm9tIGJlaW5nIHBhcnNlZCAodXNlZCBmb3IgaXRlcmF0aW9uIGJpbmRpbmcgYXMgd2VsbCBhcyB0aGUgaWYvdW5sZXNzIGJpbmRlcnMpLlxuICAgKi9cbiAgc3RhdGljIGJsb2NrID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEtleSBvZiB0aGUgQmluZGVyXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgdmlldy5wdWJsaXNoKCkgdG8gY2FsbCBwdWJsaXNoIG9uIHRoZXNlIGJpbmRpbmdzLlxuICAgKi9cbiAgcHVibGlzaGVzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBQcmlvcml0eSBvZiB0aGUgYmluZGVyLCBiaW5kZXJzIHdpdGggaGlnaGVyIHByaW9yaXR5IGFyZSBhcHBsaWVkIGZpcnN0XG4gICAqL1xuICBwcmlvcml0eSA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSByb3V0aW5lIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGFuIG9ic2VydmVkIGF0dHJpYnV0ZSBvbiB0aGUgbW9kZWwgY2hhbmdlcyBhbmQgaXMgdXNlZCB0byB1cGRhdGUgdGhlIERPTS4gV2hlbiBkZWZpbmluZyBhIG9uZS13YXkgYmluZGVyIGFzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCBpcyBhY3R1YWxseSB0aGUgcm91dGluZSBmdW5jdGlvbiB0aGF0IHlvdSdyZSBkZWZpbmluZy5cbiAgICovXG4gIGFic3RyYWN0IHJvdXRpbmUoZWxlbWVudDogRSwgdmFsdWU6IFQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IGNhbGxlZCBmb3IgdGhpcyBiaW5kaW5nIG9uIHRoZSBpbml0aWFsIGB2aWV3LmJpbmQoKWAuIFVzZSBpdCB0byBzdG9yZSBzb21lIGluaXRpYWwgc3RhdGUgb24gdGhlIGJpbmRpbmcsIG9yIHRvIHNldCB1cCBhbnkgZXZlbnQgbGlzdGVuZXJzIG9uIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYmluZD8oZWxlbWVudDogRSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgY2FsbGVkIGZvciB0aGlzIGJpbmRpbmcgb24gYHZpZXcudW5iaW5kKClgLiBVc2UgaXQgdG8gcmVzZXQgYW55IHN0YXRlIG9uIHRoZSBlbGVtZW50IHRoYXQgd291bGQgaGF2ZSBiZWVuIGNoYW5nZWQgZnJvbSB0aGUgcm91dGluZSBnZXR0aW5nIGNhbGxlZCwgb3IgdG8gdW5iaW5kIGFueSBldmVudCBsaXN0ZW5lcnMgb24gdGhlIGVsZW1lbnQgdGhhdCB5b3UndmUgc2V0IHVwIGluIHRoZSBgYmluZGVyLmJpbmRgIGZ1bmN0aW9uLlxuICAgKi9cbiAgdW5iaW5kPyhlbGVtZW50OiBFKTogdm9pZDtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYmluZGluZydzIG1vZGVsIGZyb20gd2hhdCBpcyBjdXJyZW50bHkgc2V0IG9uIHRoZSB2aWV3LlxuICAgKiBVbmJpbmRzIHRoZSBvbGQgbW9kZWwgZmlyc3QgYW5kIHRoZW4gcmUtYmluZHMgd2l0aCB0aGUgbmV3IG1vZGVsLlxuICAgKi9cbiAgdXBkYXRlPyhtb2RlbDogYW55KTogdm9pZDtcblxuICAvKipcbiAgICogVGhlIGdldFZhbHVlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIHRoZSBiaW5kZXIgd2FudHMgdG8gc2V0IHRoZSB2YWx1ZSBvbiB0aGUgbW9kZWwuIFRoaXMgZnVuY3Rpb24gdGFrZXMgdGhlIEhUTUwgZWxlbWVudCBhcyBvbmx5IHBhcmFtZXRlclxuICAgKi9cbiAgZ2V0VmFsdWU/KGVsZW1lbnQ6IEUpOiB2b2lkO1xuXG4gIHB1YmxpYyB2YWx1ZT86IGFueTtcbiAgcHVibGljIG9ic2VydmVyPzogT2JzZXJ2ZXI7XG4gIHB1YmxpYyB2aWV3OiBWaWV3O1xuICBwdWJsaWMgZWw6IEU7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGJpbmRlciB3aXRob3V0IHRoZSBwcmVmaXhcbiAgICovXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmcgfCBudWxsO1xuICBwdWJsaWMgZm9ybWF0dGVyczogc3RyaW5nW10gfCBudWxsO1xuICBwdWJsaWMgZm9ybWF0dGVyT2JzZXJ2ZXJzOiBGb3JtYXR0ZXJPYnNlcnZlcnMgPSB7fTtcbiAgcHVibGljIGtleXBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFyZ3VtZW50cyBwYXJzZWQgZnJvbSBzdGFyIGJpbmRlcnMsIGUuZy4gb24gZm9vLSotKiBhcmdzWzBdIGlzIHRoZSBmaXJzdCBzdGFyLCBhcmdzWzFdIHRoZSBzZWNvbmQtXG4gICAqL1xuICBwdWJsaWMgYXJnczogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPjtcblxuICAvKipcbiAgICpcbiAgICovXG4gIHB1YmxpYyBtb2RlbD86IGFueTtcblxuICAvKipcbiAgICogSFRNTCBDb21tZW50IHRvIG1hcmsgYSBiaW5kaW5nIGluIHRoZSBET01cbiAgICovXG4gIHB1YmxpYyBtYXJrZXI/OiBDb21tZW50O1xuXG4gIC8qKlxuICAgKiBBbGwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGJpbmRpbmcgaXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yOyB0aGVcbiAgICogY29udGFpbmluZyB2aWV3LCB0aGUgRE9NIG5vZGUsIHRoZSB0eXBlIG9mIGJpbmRpbmcsIHRoZSBtb2RlbCBvYmplY3QgYW5kIHRoZVxuICAgKiBrZXlwYXRoIGF0IHdoaWNoIHRvIGxpc3RlbiBmb3IgY2hhbmdlcy5cbiAgICogQHBhcmFtIHsqfSB2aWV3XG4gICAqIEBwYXJhbSB7Kn0gZWxcbiAgICogQHBhcmFtIHsqfSB0eXBlXG4gICAqIEBwYXJhbSB7Kn0ga2V5cGF0aFxuICAgKiBAcGFyYW0geyp9IGJpbmRlclxuICAgKiBAcGFyYW0geyp9IGFyZ3MgVGhlIHN0YXJ0IGJpbmRlcnMsIG9uIGBjbGFzcy0qYCBhcmdzWzBdIHdpbCBiZSB0aGUgY2xhc3NuYW1lLlxuICAgKiBAcGFyYW0geyp9IGZvcm1hdHRlcnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZpZXc6IFZpZXcsXG4gICAgZWw6IEUsXG4gICAgdHlwZTogc3RyaW5nIHwgbnVsbCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAga2V5cGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGZvcm1hdHRlcnM6IHN0cmluZ1tdIHwgbnVsbCxcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmtleXBhdGggPSBrZXlwYXRoO1xuICAgIHRoaXMuZm9ybWF0dGVycyA9IGZvcm1hdHRlcnM7XG4gICAgdGhpcy5tb2RlbCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChpZGVudGlmaWVyICYmIHR5cGUpIHtcbiAgICAgIHRoaXMuYXJncyA9IHRoaXMuZ2V0U3RhckFyZ3VtZW50cyhpZGVudGlmaWVyLCB0eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcmdzID0gbmV3IEFycmF5PHN0cmluZyB8IG51bWJlcj4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdGhlIG9iamVjdCBrZXlwYXRoXG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHBhcmFtIGtleXBhdGhcbiAgICovXG4gIHB1YmxpYyBvYnNlcnZlKFxuICAgIG9iajogYW55LFxuICAgIGtleXBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogT2JzZXJ2ZXJTeW5jQ2FsbGJhY2tcbiAgKTogT2JzZXJ2ZXIge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2ZXIob2JqLCBrZXlwYXRoLCBjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VUYXJnZXQoKSB7XG4gICAgaWYgKHRoaXMua2V5cGF0aCkge1xuICAgICAgY29uc3QgdG9rZW4gPSBwYXJzZVR5cGUodGhpcy5rZXlwYXRoLCB0cnVlKTtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSBQUklNSVRJVkUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRva2VuLnZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSBLRVlQQVRIKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmUodGhpcy52aWV3Lm1vZGVscywgdGhpcy5rZXlwYXRoLCB0aGlzKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHt0aGlzLm5hbWV9XSBVbmtub3duIHR5cGUgaW4gdG9rZW5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBpdGVyYXRpb24gYWxpYXMsIHVzZWQgaW4gdGhlIGludGVyYWN0aW9uIGJpbmRlcnMgbGlrZSBgZWFjaC0qYFxuICAgKiBAcGFyYW0geyp9IG1vZGVsTmFtZVxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWtlcmljL3JpdmV0cy9ibG9iL21hc3Rlci9kaXN0L3JpdmV0cy5qcyNMMjZcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWlrZXJpYy9yaXZldHMvYmxvYi9tYXN0ZXIvZGlzdC9yaXZldHMuanMjTDExNzVcbiAgICovXG4gIHB1YmxpYyBnZXRJdGVyYXRpb25BbGlhcyhtb2RlbE5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBcIiVcIiArIG1vZGVsTmFtZSArIFwiJVwiO1xuICB9XG5cbiAgcHVibGljIHBhcnNlRm9ybWF0dGVyQXJndW1lbnRzKFxuICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgIGZvcm1hdHRlckluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBhcmdzXG4gICAgICAubWFwKChhcmcpID0+IHBhcnNlVHlwZShhcmcsIHRydWUpKVxuICAgICAgLm1hcCgoeyB0eXBlLCB2YWx1ZSB9LCBhaSkgPT4ge1xuICAgICAgICBpZiAodHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gICAgICAgICAgY29uc3QgcHJpbWl0aXZlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlVmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gS0VZUEFUSCkge1xuICAgICAgICAgIC8vIGtleXBhdGggaXMgc3RyaW5nXG4gICAgICAgICAgY29uc3Qga2V5cGF0aCA9IHZhbHVlIGFzIHN0cmluZztcbiAgICAgICAgICBpZiAoIXRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IG9ic2VydmVyID0gdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdW2FpXTtcblxuICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIGtleXBhdGgsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdW2FpXSA9IG9ic2VydmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIudmFsdWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3RoaXMubmFtZX1dIFVua25vd24gYXJndW1lbnQgdHlwZWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGFsbCB0aGUgY3VycmVudCBmb3JtYXR0ZXJzIHRvIHRoZSBzdXBwbGllZCB2YWx1ZSBhbmQgcmV0dXJucyB0aGVcbiAgICogZm9ybWF0dGVkIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIGZvcm1hdHRlZFZhbHVlKHZhbHVlOiBhbnksIHN0YXJ0SW5kZXggPSAwKTogYW55IHtcbiAgICBpZiAodGhpcy5mb3JtYXR0ZXJzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3RoaXMubmFtZX0gZm9ybWF0dGVycyBpcyBudWxsYCk7XG4gICAgfVxuXG4gICAgLy8gSWYgYW55IGludGVybWVkaWF0ZSByZXN1bHQgaXMgYSBwcm9taXNlIGNvbnRpbnVlIHRoZSBjaGFpbiAod2l0aCBzdGFydEluZGV4IHNldCkgYWZ0ZXIgaXQgaXMgcmVzb2x2ZWQuXG4gICAgbGV0IHByb21pc2VkID0gZmFsc2U7XG4gICAgY29uc3QgZm9ybWF0dGVycyA9IHN0YXJ0SW5kZXhcbiAgICAgID8gdGhpcy5mb3JtYXR0ZXJzLnNsaWNlKHN0YXJ0SW5kZXgpXG4gICAgICA6IHRoaXMuZm9ybWF0dGVycztcblxuICAgIHJldHVybiBmb3JtYXR0ZXJzLnJlZHVjZShcbiAgICAgIChyZXN1bHQ6IGFueSwgZGVjbGFyYXRpb246IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAocHJvbWlzZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJncyA9IGRlY2xhcmF0aW9uLm1hdGNoKEZPUk1BVFRFUl9BUkdTKTtcbiAgICAgICAgaWYgKGFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBbJHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgfV0gTm8gYXJncyBtYXRjaGVkIHdpdGggcmVnZXggXCJGT1JNQVRURVJfQVJHU1wiIVxcbnZhbHVlOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICl9XFxucmVzdWx0OiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICApfVxcbmRlY2xhcmF0aW9uOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uXG4gICAgICAgICAgICAgICl9XFxuaW5kZXg6ICR7aW5kZXh9XFxuYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZCA9IGFyZ3Muc2hpZnQoKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHt0aGlzLm5hbWV9XSBObyBmb3JtYXR0ZXIgaWQgZm91bmQgaW4gYXJncyFgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy52aWV3Lm9wdGlvbnMuZm9ybWF0dGVycykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7dGhpcy5uYW1lfV0gTm8gZm9ybWF0dGVycyBhcmUgZGVmaW5lZCFgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnNbaWRdO1xuXG4gICAgICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFske3RoaXMubmFtZX1dIE5vIGZvcm1hdHRlcnMgd2l0aCBpZCBcIiR7aWR9XCIgZm91bmQhYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9jZXNzZWRBcmdzID0gdGhpcy5wYXJzZUZvcm1hdHRlckFyZ3VtZW50cyhhcmdzLCBpbmRleCk7XG5cbiAgICAgICAgLy8gZ2V0IGZvcm1hdHRlciByZWFkIGZ1bmNpb25cbiAgICAgICAgaWYgKGZvcm1hdHRlciAmJiB0eXBlb2YgZm9ybWF0dGVyLnJlYWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5yZWFkLmFwcGx5KHRoaXMubW9kZWwsIFtyZXN1bHQsIC4uLnByb2Nlc3NlZEFyZ3NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHJlc3VsdCBpcyBhIHByb21pc2UsIGFuZCB0aGlzIGlzIG5vdCB0aGUgbGFzdCBmb3JtYXR0ZXIgaW4gdGhlIGNoYWluXG4gICAgICAgIGlmIChcbiAgICAgICAgICBpbmRleCA8IGZvcm1hdHRlcnMubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgIHJlc3VsdCAmJlxuICAgICAgICAgIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgdHlwZW9mIHJlc3VsdC5jYXRjaCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHByb21pc2VkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICB0aGlzLmZvcm1hdHRlZFZhbHVlKHZhbHVlLCBpbmRleCArIDEpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICAgIHZhbHVlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBiaW5kaW5nIGFyb3VuZCB0aGUgc3VwcGxpZWQgZnVuY3Rpb24uXG4gICAqIFRoaXMgZXZlbnQgSGFuZGxlciBpcyBtYWlubHkgdXNlZCBieSB0aGUgb24tKiBiaW5kZXJcbiAgICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGJ5IHRoZSBoYW5kbGVyXG4gICAqIEBwYXJhbSBlbCBUaGUgZWxlbWVudCB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBmcm9tXG4gICAqL1xuICBwdWJsaWMgZXZlbnRIYW5kbGVyKFxuICAgIGZuOiBldmVudEhhbmRsZXJGdW5jdGlvbixcbiAgICBlbDogSFRNTEVsZW1lbnRcbiAgKTogKGV2OiBFdmVudCkgPT4gYW55IHtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy52aWV3Lm9wdGlvbnMuaGFuZGxlcjtcbiAgICByZXR1cm4gKGV2KSA9PiB7XG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gaGFuZGxlciBkZWZpbmVkIGluIGJpbmRpbmcudmlldy5vcHRpb25zLmhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmNhbGwoZm4sIHRoaXMsIGV2LCB0aGlzLCBlbCk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGJpbmRpbmcuIFRoaXMgQmFzaWNhbGx5IGp1c3QgcnVucyB0aGUgYmluZGluZyByb3V0aW5lXG4gICAqIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlIGZvcm1hdHRlZC5cbiAgICovXG4gIHB1YmxpYyBzZXQodmFsdWU6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVkVmFsdWUodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMucm91dGluZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBJZiB2YWx1ZSBpcyBhIHByb21pc2VcbiAgICAgIGlmIChcbiAgICAgICAgdmFsdWUgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIlxuICAgICAgKSB7XG4gICAgICAgIHZhbHVlXG4gICAgICAgICAgLnRoZW4oKHJlYWxWYWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJvdXRpbmUodGhpcy5lbCwgcmVhbFZhbHVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm91dGluZSh0aGlzLmVsLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN5bmNzIHVwIHRoZSB2aWV3IGJpbmRpbmcgd2l0aCB0aGUgbW9kZWwuXG4gICAqL1xuICBwdWJsaWMgc3luYygpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgICAgdGhpcy5zZXQodGhpcy5vYnNlcnZlci52YWx1ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyB0aGUgdmFsdWUgY3VycmVudGx5IHNldCBvbiB0aGUgaW5wdXQgZWxlbWVudCAob3IgYW55IG90aGVyIHdoaWNoIGltcGxlbWVudHMgZ2V0VmFsdWUpIGJhY2sgdG8gdGhlIG1vZGVsLlxuICAgKiBBbiBleGFtcGxlIG9mIHRoZSB1c2Ugb2YgdGhpcyBtZXRob2QgYXJlIHRoZSBmb2xsb3dpbmcgYmluZGVyczpcbiAgICogLSBFbGVtZW50QmluZGVyXG4gICAqIC0gVmFsdWVCaW5kZXJcbiAgICogLSAoVW4pQ2hlY2tlZEJpbmRlclxuICAgKi9cbiAgcHVibGljIHB1Ymxpc2goKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIGlmICh0aGlzLmZvcm1hdHRlcnMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybWF0dGVycyBpcyBudWxsXCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVycy5yZWR1Y2VSaWdodChcbiAgICAgICAgKFxuICAgICAgICAgIHJlc3VsdDogYW55IC8qY2hlY2sgdHlwZSovLFxuICAgICAgICAgIGRlY2xhcmF0aW9uOiBzdHJpbmcgLypjaGVjayB0eXBlKi8sXG4gICAgICAgICAgaW5kZXg6IG51bWJlclxuICAgICAgICApID0+IHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gZGVjbGFyYXRpb24uc3BsaXQoRk9STUFUVEVSX1NQTElUKTtcbiAgICAgICAgICBjb25zdCBpZCA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpZCBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gdGhpcy52aWV3Lm9wdGlvbnMuZm9ybWF0dGVyc1tpZF07XG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkQXJncyA9IHRoaXMucGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJncywgaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKGZvcm1hdHRlciAmJiB0eXBlb2YgZm9ybWF0dGVyLnB1Ymxpc2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmVzdWx0ID0gZm9ybWF0dGVyLnB1Ymxpc2gocmVzdWx0LCAuLi5wcm9jZXNzZWRBcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5fZ2V0VmFsdWUodGhpcy5lbClcbiAgICAgICk7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXIuc2V0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIHRoZSBtb2RlbCBmb3IgY2hhbmdlcyBhdCB0aGUgc3BlY2lmaWVkIGtleXBhdGguIEJpLWRpcmVjdGlvbmFsXG4gICAqIHJvdXRpbmVzIHdpbGwgYWxzbyBsaXN0ZW4gZm9yIGNoYW5nZXMgb24gdGhlIGVsZW1lbnQgdG8gcHJvcGFnYXRlIHRoZW0gYmFja1xuICAgKiB0byB0aGUgbW9kZWwuXG4gICAqL1xuICBwdWJsaWMgX2JpbmQoKSB7XG4gICAgdGhpcy5wYXJzZVRhcmdldCgpO1xuXG4gICAgaWYgKHRoaXMuYmluZCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aGUgbWV0aG9kIGJpbmQgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG4gICAgICB0aGlzLmJpbmQodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlldy5vcHRpb25zLnByZWxvYWREYXRhKSB7XG4gICAgICB0aGlzLnN5bmMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gdGhlIG1vZGVsIGFuZCB0aGUgZWxlbWVudC5cbiAgICovXG4gIHB1YmxpYyBfdW5iaW5kKCkge1xuICAgIGlmICh0aGlzLnVuYmluZCkge1xuICAgICAgdGhpcy51bmJpbmQodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnMpLmZvckVhY2goKGZpKSA9PiB7XG4gICAgICBjb25zdCBhcmdzID0gdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZmldO1xuXG4gICAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKChhaSkgPT4ge1xuICAgICAgICBhcmdzW2FpXS51bm9ic2VydmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBiaW5kaW5nJ3MgbW9kZWwgZnJvbSB3aGF0IGlzIGN1cnJlbnRseSBzZXQgb24gdGhlIHZpZXcuIFVuYmluZHNcbiAgICogdGhlIG9sZCBtb2RlbCBmaXJzdCBhbmQgdGhlbiByZS1iaW5kcyB3aXRoIHRoZSBuZXcgbW9kZWwuXG4gICAqIEBwYXJhbSB7YW55fSBtb2RlbHNcbiAgICovXG4gIHB1YmxpYyBfdXBkYXRlKG1vZGVsczogYW55ID0ge30pIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMudXBkYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMudXBkYXRlKG1vZGVscyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZWxlbWVudHMgdmFsdWVcbiAgICogQHBhcmFtIGVsXG4gICAqL1xuICBwdWJsaWMgX2dldFZhbHVlKGVsOiBFKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmdldFZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldElucHV0VmFsdWUoZWwgYXMgYW55KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U3RhckFyZ3VtZW50cyhpZGVudGlmaWVyOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCByZWdleHAgPSB0aGlzLnZpZXcuYmluZGVyUmVnZXgoaWRlbnRpZmllcik7XG4gICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKHJlZ2V4cCk/LnNsaWNlKDEpIHx8IFtdO1xuICAgIHJldHVybiBtYXRjaDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIGFkZC1jbGFzc1xuICogQWRkcyB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSB0byB0aGUgY2xhc3MuXG4gKiBJbnN0ZWFkIG9mIGBjbGFzcy1bY2xhc3NuYW1lXWAgdGhlIGNsYXNzbmFtZSBpcyBkZWZpbmVkIGJ5IHRoZVxuICogYXR0cmlidXRlIHZhbHVlIGFuZCBub3QgYnkgdGhlIHN0YXIgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICogPHVsPlxuICogICA8bGkgcnYtZWFjaC10b2RvPVwidG9kb3NcIj5cbiAqICAgICA8ZGl2IHJ2LWFkZC1jbGFzcz1cInRvZG8uc3RhdGVcIj48L2Rpdj5cbiAqICAgPC9saT5cbiAqIDx1bD5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkZENsYXNzQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYWRkLWNsYXNzXCI7XG4gIGZ1bmN0aW9uID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAxMDAwO1xuICBwcml2YXRlIHN0YXRpY0NsYXNzZXM/OiBzdHJpbmdbXTtcblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCB8IFNWR0VsZW1lbnQpIHtcbiAgICAvLyBOb3RlOiBXZSB1c2UgZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgaW5zdGVhZCBvZiBlbC5jbGFzc05hbWUgaGVyZSB0byBhbHNvIHN1cHBvcnQgc3ZnIGVsZW1lbnRzXG4gICAgY29uc3QgY2xhc3NOYW1lID0gZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIjtcbiAgICB0aGlzLnN0YXRpY0NsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoXCIgXCIpO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGRlbGV0ZSB0aGlzLnN0YXRpY0NsYXNzZXM7XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgbmV3VmFsdWU6IHN0cmluZykge1xuICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuc3RhdGljQ2xhc3Nlcz8uaW5kZXhPZihuZXdWYWx1ZSkgPT09IC0xKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuc3RhdGljQ2xhc3Nlcy5qb2luKFwiIFwiKSArIFwiIFwiICsgbmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zdGF0aWNDbGFzc2VzKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuc3RhdGljQ2xhc3Nlcy5qb2luKFwiIFwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGVsLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGNsYXNzTmFtZS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIGFuaW1hdGUte2NsYXNzfVxuICogQWRkIC8gcmVtb3ZlIGFuaW1hdGlvbiBjbGFzcyB3aXRoIHN0YXJ0IGFuZCBkb25lIGFmZml4XG4gKi9cbmV4cG9ydCBjbGFzcyBBbmltYXRlU3RhckJpbmRlciBleHRlbmRzIEJpbmRlcjxib29sZWFuLCBIVE1MVW5rbm93bkVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYW5pbWF0ZS0qXCI7XG4gIGZ1bmN0aW9uID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAxMDAwO1xuXG4gIGJpbmQoZWw6IEhUTUxVbmtub3duRWxlbWVudCkge1xuICAgIGNvbnN0IGFuaW1hdGVDbGFzc05hbWUgPSAodGhpcyBhcyBhbnkpLmFyZ3NbMF07XG4gICAgZWwuY2xhc3NMaXN0LmFkZChhbmltYXRlQ2xhc3NOYW1lKTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxVbmtub3duRWxlbWVudCwgc3RhcnQ6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBhbmltYXRlQ2xhc3NOYW1lID0gKHRoaXMgYXMgYW55KS5hcmdzWzBdO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChhbmltYXRlQ2xhc3NOYW1lICsgXCItc3RhcnRcIik7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGFuaW1hdGVDbGFzc05hbWUgKyBcIi1kb25lXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGFuaW1hdGVDbGFzc05hbWUgKyBcIi1zdGFydFwiKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYW5pbWF0ZUNsYXNzTmFtZSArIFwiLWRvbmVcIik7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyBjYW1lbENhc2UgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIGFzc2lnbi0qXG4gKiBBc3NpZ24gYSB2YWx1ZSBpbiB5b3VyIG1vZGVsLlxuICogU2V0cyBvciBvdmVyd3JpdGVzIGEgdmFsdWUgYnkgaGlzIHByb3BlcnR5IG5hbWUgKG5hbWVkIHdoYXRldmVyIHZhbHVlIGlzIGluIHBsYWNlIG9mIFtwcm9wZXJ0eV0pIGluIHlvdXIgbW9kZWwuXG4gKiBAZXhhbXBsZVxuICogPGRpdiBydi1hc3NpZ24tbmV3PSdcImhlbGxvXCInPntuZXd9PC9kaXY+XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NpZ25Qcm9wZXJ0eUJpbmRlciBleHRlbmRzIEJpbmRlcjxhbnksIEhUTUxVbmtub3duRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJhc3NpZ24tKlwiO1xuICByb3V0aW5lKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBjYW1lbENhc2UoKHRoaXMuYXJnc1swXSBhcyBzdHJpbmcpLnRyaW0oKSk7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBvYmpbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIHRoaXMudmlldy5tb2RlbHNbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgdHlwZSB7IEFzc2lnbiB9IGZyb20gXCIuLi90eXBlcy9hc3NpZ24uanNcIjtcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogYXNzaWduXG4gKiBBc3NpZ24gYSB2YWx1ZSBpbiB5b3VyIG1vZGVsLlxuICogVGhlIHZhbHVlIHlvdSB3YW50IHRvIGFzc2lnbiBtdXN0IGJlIGFuIG9iamVjdCBhbmQgd2lsbCBiZSBjb25jYXRlbmF0ZSB3aXRoIHlvdXIgbW9kZWwuXG4gKiBAZXhhbXBsZVxuICogPGRpdiBydi1hc3NpZ249J3tcIm5ld1ZhbHVlXCI6IFwiaGVsbG9cIiwgXCJhbm90aGVyTmV3VmFsdWVcIjogXCJ3b3JsZFwifSc+e25ld1ZhbHVlfSB7YW5vdGhlck5ld1ZhbHVlfSE8L2Rpdj5cbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2lnbkJpbmRlciBleHRlbmRzIEJpbmRlcjxBc3NpZ24sIEhUTUxVbmtub3duRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJhc3NpZ25cIjtcbiAgcm91dGluZShlbDogSFRNTFVua25vd25FbGVtZW50LCB2YWx1ZTogYW55KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGV4dGVuZCh7IGRlZXA6IGZhbHNlIH0sIHRoaXMudmlldy5tb2RlbHMsIHZhbHVlKTtcbiAgICB9XG4gICAgY29uc29sZS53YXJuKFwiVmFsdWUgbXVzdCBiZSBhbiBvYmplY3Qgb3IgcHJvcGVydHlOYW1lIGlzIHJlcXVpcmVkXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyBCaW5kZXJBdHRyaWJ1dGVDaGFuZ2VkRXZlbnQgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHNldEF0dHJpYnV0ZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFNldHMgdGhlIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC4gSWYgbm8gYmluZGVyIGFib3ZlIGlzIG1hdGNoZWQgaXQgd2lsbCBmYWxsXG4gKiBiYWNrIHRvIHVzaW5nIHRoaXMgYmluZGVyLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQmluZGVyIGV4dGVuZHMgQmluZGVyPGFueSwgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYXR0ci0qXCI7XG5cbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIG5ld1ZhbHVlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMudHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc2V0IGF0dHJpYnV0ZSBvZiBcIiArIHRoaXMudHlwZSk7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZUZvcm1hdHRlZCxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgY2hhbmdlZCxcbiAgICB9ID0gc2V0QXR0cmlidXRlKGVsLCB0aGlzLnR5cGUsIG5ld1ZhbHVlKTtcblxuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJiaW5kZXItY2hhbmdlZFwiLCB7XG4gICAgICAgICAgZGV0YWlsOiB7IG5hbWU6IHRoaXMudHlwZSwgbmV3VmFsdWU6IG5ld1ZhbHVlRm9ybWF0dGVkLCBvbGRWYWx1ZSB9LFxuICAgICAgICB9IGFzIEJpbmRlckF0dHJpYnV0ZUNoYW5nZWRFdmVudClcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogYmxvY2tcbiAqIEJsb2NrcyB0aGUgYmluZGluZyBmb3IgdGhlIGN1cnJlbnQgZWxlbWVudCBhbmQgaGlzIGNoaWxkcy5cbiAqIEBub3RlIFBsZWFzZSBub3RlIHRoYXQgYDxzY3JpcHQ+PC9zY3JpcHQ+YCwgYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj48L3N0eWxlPmAsIGA8dGVtcGxhdGU+PC90ZW1wbGF0ZT5gIGFuZCBgPGNvZGU+PC9jb2RlPmAgdGFncyBhcmUgYmxvY2tlZCBieSBkZWZhdWx0LlxuICogWW91IGNhbiBjaGFuZ2UgdGhpcyBieSBzZXR0aW5nIHRoZSBgYmxvY2tOb2RlTmFtZXNgIG9wdGlvbi5cbiAqIEBleGFtcGxlXG4gKiA8ZGl2IHJ2LWJsb2NrPVwiXCI+XG4gKiAgPCEtLSBBZnRlciBiaW5kaW5nIHlvdSBzaG91bGQgc2VlIGB7IHZhbHVlIH1gIGJlY2F1c2UgdGhlIGJpbmRpbmcgaXMgYmxvY2tlZCBoZXJlIC0tPlxuICogIHsgdmFsdWUgfVxuICogPC9kaXY+XG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9ja0JpbmRlciBleHRlbmRzIEJpbmRlcjx1bmtub3duPiB7XG4gIHN0YXRpYyBrZXkgPSBcImJsb2NrXCI7XG4gIHN0YXRpYyBibG9jayA9IHRydWU7XG4gIHJvdXRpbmUoKSB7XG4gICAgLyoqL1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyBnZXRJbnB1dFZhbHVlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgZ2V0U3RyaW5nIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBjaGVja2VkXG4gKiBDaGVja3MgYSBjaGVja2JveCBvciByYWRpbyBpbnB1dCB3aGVuIHRoZSB2YWx1ZSBpcyB0cnVlLiBBbHNvIHNldHMgdGhlIG1vZGVsXG4gKiBwcm9wZXJ0eSB3aGVuIHRoZSBpbnB1dCBpcyBjaGVja2VkIG9yIHVuY2hlY2tlZCAodHdvLXdheSBiaW5kZXIpLlxuICovXG5leHBvcnQgY2xhc3MgQ2hlY2tlZEJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcgfCBib29sZWFuLCBIVE1MSW5wdXRFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcImNoZWNrZWRcIjtcbiAgcHVibGlzaGVzID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAyMDAwO1xuXG4gIG9uQ2hhbmdlID0gdGhpcy5wdWJsaXNoLmJpbmQodGhpcyk7XG5cbiAgYmluZChlbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5vbkNoYW5nZSk7XG4gIH1cblxuICB1bmJpbmQoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMub25DaGFuZ2UpO1xuICB9XG5cbiAgcm91dGluZShlbDogSFRNTElucHV0RWxlbWVudCwgbmV3VmFsdWU6IHN0cmluZyB8IGJvb2xlYW4pIHtcbiAgICBsZXQgb2xkVmFsdWU7XG4gICAgaWYgKCF0aGlzLl9nZXRWYWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKFwidGhpcy5fZ2V0VmFsdWUgaXMgbm90IGEgZnVuY3Rpb24sIHRoaXM6IFwiLCB0aGlzKTtcbiAgICAgIG9sZFZhbHVlID0gZ2V0SW5wdXRWYWx1ZShlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFZhbHVlID0gdGhpcy5fZ2V0VmFsdWUoZWwpO1xuICAgIH1cbiAgICBpZiAoZWwudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICBlbC5jaGVja2VkID0gZ2V0U3RyaW5nKG9sZFZhbHVlKSA9PT0gZ2V0U3RyaW5nKG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICBlbC5jaGVja2VkID0gISFuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShlbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgIHJldHVybiBnZXRJbnB1dFZhbHVlKGVsKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIGNsYXNzLSpcbiAqIGNsYXNzLVtjbGFzc25hbWVdXG4gKlxuICogQWRkcyBhIGNsYXNzICh3aGF0ZXZlciB2YWx1ZSBpcyBpbiBwbGFjZSBvZiBbY2xhc3NuYW1lXSkgb24gdGhlIGVsZW1lbnRcbiAqIHdoZW4gdGhlIHZhbHVlIGV2YWx1YXRlcyB0byB0cnVlIGFuZCByZW1vdmVzIHRoYXQgY2xhc3MgaWYgdGhlIHZhbHVlXG4gKiBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBAZXhhbXBsZVxuICogPGxpIHJ2LWNsYXNzLWNvbXBsZXRlZD1cInRvZG8uZG9uZVwiPnsgdG9kby5uYW1lIH08L2xpPlxuICovXG5leHBvcnQgY2xhc3MgQ2xhc3NTdGFyQmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJjbGFzcy0qXCI7XG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmdzIGlzIG51bGxcIik7XG4gICAgfVxuICAgIC8vIE5vdGU6IFdlIHVzZSBlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSBpbnN0ZWFkIG9mIGVsLmNsYXNzTmFtZSBoZXJlIHRvIGFsc28gc3VwcG9ydCBzdmcgZWxlbWVudHNcbiAgICBjb25zdCBjbGFzc05hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICAgIGNvbnN0IGNsYXNzTGlzdCA9IGNsYXNzTmFtZS5zcGxpdChcIiBcIikuZmlsdGVyKChlbGU6IHN0cmluZykgPT4gZWxlICE9PSBcIlwiKTtcbiAgICBjb25zdCBhcmcgPSAodGhpcy5hcmdzWzBdIGFzIHN0cmluZykudHJpbSgpO1xuICAgIGNvbnN0IGlkeCA9IGNsYXNzTGlzdC5pbmRleE9mKGFyZyk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBgJHtjbGFzc05hbWV9ICR7YXJnfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc0xpc3QuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpZHgpLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcbmltcG9ydCB7IEJhc2ljQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudC9iYXNpYy1jb21wb25lbnQuanNcIjtcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vb2JzZXJ2ZXIuanNcIjtcbmltcG9ydCB7XG4gIGlzQ3VzdG9tRWxlbWVudCxcbiAgd2FpdEZvckN1c3RvbUVsZW1lbnQsXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG5jb25zdCBOT19SSUJBX0NPTVBPTkVOVF9FUlJPUl9NRVNTQUdFID1cbiAgJ1tjb21wb25lbnRBdHRyaWJ1dGVCaW5kZXJdIFlvdSBjYW4gb25seSB1c2UgdGhlIFwicnYtY28tKlwiIGJpbmRlciBvbiBSaWJhIGNvbXBvbmVudHMsIGJ1dCBcInt0YWdOYW1lfVwiIGlzIG5vdCByZWdpc3RlcmVkLic7XG5cbi8qKlxuICogY28tKlxuICogUGFzcyBhIHJpYmEgbW9kZWwgLyBzY29wZSB2YWx1ZSB0byB5b3VyIGNvbXBvbmVudCB3aXRob3V0IGZpcnN0IGNvbnZlcnRpbmcgaXQgYXMgYW4gYXR0cmlidXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRBdHRyaWJ1dGVCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8YW55LCBCYXNpY0NvbXBvbmVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJjby0qXCI7XG4gIHB1Ymxpc2hlcyA9IHRydWU7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudEF0dHJpYnV0ZU9ic2VydmVyPzogT2JzZXJ2ZXI7XG4gIHByb3RlY3RlZCBhdHRyaWJ1dGVOYW1lPzogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBfX3JvdXRpbmUoZWw6IEJhc2ljQ29tcG9uZW50LCB2YWx1ZTogYW55KSB7XG4gICAgY29uc3QgYXR0ck5hbWUgPSAodGhpcy5hcmdzWzBdIGFzIHN0cmluZykudHJpbSgpO1xuICAgIGlmIChlbC5zZXRCaW5kZXJBdHRyaWJ1dGUpIHtcbiAgICAgIGVsLnNldEJpbmRlckF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIE5PX1JJQkFfQ09NUE9ORU5UX0VSUk9SX01FU1NBR0UucmVwbGFjZShcInt0YWdOYW1lfVwiLCBlbC50YWdOYW1lKSxcbiAgICAgICAgZWxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcm91dGluZShlbDogQmFzaWNDb21wb25lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoaXNDdXN0b21FbGVtZW50KGVsLCB0cnVlLCB0cnVlKSkge1xuICAgICAgdGhpcy5fX3JvdXRpbmUoZWwsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tRWxlbWVudChlbCwgdHJ1ZSkpIHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDdXN0b21FbGVtZW50KGVsKTtcbiAgICAgIHRoaXMuX19yb3V0aW5lKGVsLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgTk9fUklCQV9DT01QT05FTlRfRVJST1JfTUVTU0FHRS5yZXBsYWNlKFwie3RhZ05hbWV9XCIsIGVsLnRhZ05hbWUpLFxuICAgICAgICBlbFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX19iaW5kKGVsOiBCYXNpY0NvbXBvbmVudCkge1xuICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IHRoaXMuYXJnc1swXS50b1N0cmluZygpLnRyaW0oKTtcbiAgICBpZiAodHlwZW9mIGVsLm9ic2VydmVBdHRyaWJ1dGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBOT19SSUJBX0NPTVBPTkVOVF9FUlJPUl9NRVNTQUdFLnJlcGxhY2UoXCJ7dGFnTmFtZX1cIiwgZWwudGFnTmFtZSksXG4gICAgICAgIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudEF0dHJpYnV0ZU9ic2VydmVyID0gZWwub2JzZXJ2ZUF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUsIHtcbiAgICAgIHN5bmM6ICgpID0+IHtcbiAgICAgICAgdGhpcy5wdWJsaXNoKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgYmluZChlbDogQmFzaWNDb21wb25lbnQpIHtcbiAgICBpZiAoaXNDdXN0b21FbGVtZW50KGVsLCB0cnVlLCB0cnVlKSkge1xuICAgICAgdGhpcy5fX2JpbmQoZWwpO1xuICAgIH0gZWxzZSBpZiAoaXNDdXN0b21FbGVtZW50KGVsLCB0cnVlKSkge1xuICAgICAgYXdhaXQgd2FpdEZvckN1c3RvbUVsZW1lbnQoZWwpO1xuICAgICAgdGhpcy5fX2JpbmQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIE5PX1JJQkFfQ09NUE9ORU5UX0VSUk9SX01FU1NBR0UucmVwbGFjZShcInt0YWdOYW1lfVwiLCBlbC50YWdOYW1lKSxcbiAgICAgICAgZWxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIHRoaXMuY29tcG9uZW50QXR0cmlidXRlT2JzZXJ2ZXI/LnVub2JzZXJ2ZSgpO1xuICB9XG5cbiAgZ2V0VmFsdWUoZWw6IEJhc2ljQ29tcG9uZW50KSB7XG4gICAgY29uc3QgYXR0ck5hbWUgPSAodGhpcy5hcmdzWzBdIGFzIHN0cmluZykudHJpbSgpO1xuICAgIGNvbnN0IHZhbCA9IGVsLmdldEJpbmRlckF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIERpc2FibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSAobmVnYXRlZCB2ZXJzaW9uIG9mIGBlbmFibGVkYCBiaW5kZXIpLlxuICovXG5leHBvcnQgY2xhc3MgRGlzYWJsZWRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8XG4gIGJvb2xlYW4sXG4gIEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTElucHV0RWxlbWVudFxuPiB7XG4gIHN0YXRpYyBrZXkgPSBcImRpc2FibGVkXCI7XG4gIHJvdXRpbmUoZWw6IEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICBlbC5kaXNhYmxlZCA9ICEhdmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcblxuLyoqXG4gKiBUaGlzIGJpbmRlciBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIChvciBlbmFibGUpIGRyYWdnaW5nIGdob3N0IGltYWdlIGZvciBicm93c2VyIHdoaWNoIGhhdmUgbm8gc3VwcG9ydCBmb3IgdGhlIGNzcyBmZWF0dXJlIGB1c2VyLXNlbGVjdDogbm9uZTtgIGxpa2UgZmlyZWZveC5cbiAqIFRoaXMgYmluZGVyIGlzIHVzZWZ1bCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBgc2Nyb2xsYmFyLWRyYWdnYWJsZWAgYmluZGVyLlxuICovXG5leHBvcnQgY2xhc3MgTm9EcmFnQmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcImRyYWdnYWJsZVwiO1xuXG4gIGVuYWJsZSA9IGZhbHNlO1xuXG4gIF9vbkRyYWcoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZSkge1xuICAgICAgLy8gSWdub3JlIGV2ZW50IGlzIGRyYWdnYWJsZSBpcyBkaXNhYmxlZFxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBvbkRyYWcgPSB0aGlzLl9vbkRyYWcuYmluZCh0aGlzKTtcblxuICAvKiogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMgY2hhbmdlcyAqL1xuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgZW5hYmxlOiBib29sZWFuKSB7XG4gICAgdGhpcy5lbmFibGUgPSBlbmFibGU7XG4gICAgZWwuc2V0QXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIsIGVuYWJsZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYXMgc29vbiBhcyBSaWJhIGJvdW5kcyB0aGlzIGJpbmRlciAqL1xuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgdGhpcy5vbkRyYWcsIHRydWUpO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhcyBzb29uIGFzIFJpYmEgdW5ib3VuZCB0aGlzIGJpbmRlciAqL1xuICB1bmJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgdGhpcy5vbkRyYWcsIHRydWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kYWJsZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi92aWV3LmpzXCI7XG5pbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyB0aW1lcywgY2FtZWxDYXNlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5cbi8qKlxuICogZWFjaC0qXG4gKiBBcHBlbmRzIGJvdW5kIGluc3RhbmNlcyBvZiB0aGUgZWxlbWVudCBpbiBwbGFjZSBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVhY2hTdGFyQmluZGVyIGV4dGVuZHMgQmluZGVyPGFueVtdLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJlYWNoLSpcIjtcbiAgc3RhdGljIGJsb2NrID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSA0MDAwO1xuXG4gIGl0ZXJhdGVkOiBWaWV3W10gPSBbXTtcblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGlmICghdGhpcy5tYXJrZXIpIHtcbiAgICAgIHRoaXMubWFya2VyID0gd2luZG93Py5kb2N1bWVudD8uY3JlYXRlQ29tbWVudChgIHJpYmE6ICR7dGhpcy50eXBlfSBgKTtcbiAgICAgIGlmICghZWwucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlIHx8ICF0aGlzLm1hcmtlcikge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oJ05vIHBhcmVudCBub2RlIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tYXJrZXIsIGVsKTtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlcmF0ZWQuZm9yRWFjaCgodmlldzogVmlldykgPT4ge1xuICAgICAgICB2aWV3LmJpbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy5pdGVyYXRlZCkge1xuICAgICAgdGhpcy5pdGVyYXRlZC5mb3JFYWNoKCh2aWV3OiBWaWV3KSA9PiB7XG4gICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgY29sbGVjdGlvbjogYW55W10pIHtcbiAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmdzIGlzIG51bGxcIik7XG4gICAgfVxuICAgIGxldCBpc09iamVjdCA9IGZhbHNlO1xuICAgIGNvbnN0IG1vZGVsTmFtZSA9IGNhbWVsQ2FzZSh0aGlzLmFyZ3NbMF0udG9TdHJpbmcoKSk7XG4gICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24gfHwgW107XG5cbiAgICAvLyBUcmFuc2Zvcm0gb2JqZWN0IHRvIGFycmF5IHRvIGl0ZXJhdGUgb3ZlclxuICAgIGlmIChcbiAgICAgICFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pICYmXG4gICAgICB0eXBlb2YgY29sbGVjdGlvbiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgY29sbGVjdGlvbiAhPT0gbnVsbFxuICAgICkge1xuICAgICAgY29sbGVjdGlvbiA9IE9iamVjdC5lbnRyaWVzKGNvbGxlY3Rpb24pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIHJldHVybiB7IGtleSwgdmFsdWUgfTtcbiAgICAgIH0pO1xuICAgICAgaXNPYmplY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgZWFjaC0ke1xuICAgICAgICAgIHRoaXMuYXJnc1swXVxuICAgICAgICB9IG5lZWRzIGFuIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlIG92ZXIsIGJ1dCBpdCBpcyAke3R5cGVvZiBjb2xsZWN0aW9ufWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gaWYgaW5kZXggbmFtZSBpcyBzZXQgYnkgYGluZGV4LXByb3BlcnR5YCB1c2UgdGhpcyBuYW1lLCBvdGhlcndpc2UgYCVbbW9kZWxOYW1lXSVgXG4gICAgY29uc3QgaW5kZXhQcm9wID1cbiAgICAgIGVsLmdldEF0dHJpYnV0ZShcImluZGV4LXByb3BlcnR5XCIpIHx8IHRoaXMuZ2V0SXRlcmF0aW9uQWxpYXMobW9kZWxOYW1lKTtcblxuICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgobW9kZWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzY29wZTogYW55ID0geyAkcGFyZW50OiB0aGlzLnZpZXcubW9kZWxzIH07XG4gICAgICAvLyBJcyBvYmplY3QgdHJhbnNmb3JtZWQgdG8gYXJyYXlcbiAgICAgIGlmIChpc09iamVjdCkge1xuICAgICAgICBzY29wZVtpbmRleFByb3BdID0gbW9kZWwua2V5O1xuICAgICAgICBzY29wZVttb2RlbE5hbWVdID0gbW9kZWwudmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBJcyBBcnJheVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNjb3BlW2luZGV4UHJvcF0gPSBpbmRleDtcbiAgICAgICAgc2NvcGVbbW9kZWxOYW1lXSA9IG1vZGVsO1xuICAgICAgfVxuXG4gICAgICBsZXQgdmlldyA9IHRoaXMuaXRlcmF0ZWRbaW5kZXhdO1xuXG4gICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgbGV0IHByZXZpb3VzOiBIVE1MRWxlbWVudCB8IEVsZW1lbnQgfCBOb2RlIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLml0ZXJhdGVkLmxlbmd0aCkge1xuICAgICAgICAgIHByZXZpb3VzID0gdGhpcy5pdGVyYXRlZFt0aGlzLml0ZXJhdGVkLmxlbmd0aCAtIDFdLmVsc1swXTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hcmtlcikge1xuICAgICAgICAgIHByZXZpb3VzID0gdGhpcy5tYXJrZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZpZXcgPSBWaWV3LmNyZWF0ZSh0aGlzLCBzY29wZSwgcHJldmlvdXMubmV4dFNpYmxpbmcpO1xuICAgICAgICB0aGlzLml0ZXJhdGVkLnB1c2godmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmlldy5tb2RlbHNbbW9kZWxOYW1lXSAhPT0gbW9kZWwpIHtcbiAgICAgICAgICAvLyBzZWFyY2ggZm9yIGEgdmlldyB0aGF0IG1hdGNoZXMgdGhlIG1vZGVsXG4gICAgICAgICAgbGV0IG1hdGNoSW5kZXg7XG4gICAgICAgICAgbGV0IG5leHRWaWV3OiBWaWV3ID0gdGhpcy5pdGVyYXRlZFtpbmRleF07XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBuZXh0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgICAgICBuZXh0SW5kZXggPCB0aGlzLml0ZXJhdGVkLmxlbmd0aDtcbiAgICAgICAgICAgIG5leHRJbmRleCsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBuZXh0VmlldyA9IHRoaXMuaXRlcmF0ZWRbbmV4dEluZGV4XTtcbiAgICAgICAgICAgIGlmIChuZXh0Vmlldy5tb2RlbHNbbW9kZWxOYW1lXSA9PT0gbW9kZWwpIHtcbiAgICAgICAgICAgICAgbWF0Y2hJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXRjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG1vZGVsIGlzIGluIG90aGVyIHBvc2l0aW9uXG4gICAgICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBhdm9pZGluZyB0aGUgc3BsaWNlIGhlcmUgYnkgc2V0dGluZyBhIGZsYWdcbiAgICAgICAgICAgIC8vIHByb2ZpbGUgcGVyZm9ybWFuY2UgYmVmb3JlIGltcGxlbWVudGluZyBzdWNoIGNoYW5nZVxuICAgICAgICAgICAgdGhpcy5pdGVyYXRlZC5zcGxpY2UobWF0Y2hJbmRleCwgMSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWFya2VyIHx8ICF0aGlzLm1hcmtlci5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0VmlldyAmJiBuZXh0Vmlldy5lbHNbMF0gJiYgdmlldy5lbHNbMF0pIHtcbiAgICAgICAgICAgICAgdGhpcy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV4dFZpZXcuZWxzWzBdLCB2aWV3LmVsc1swXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5leHRWaWV3Lm1vZGVsc1tpbmRleFByb3BdID0gaW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBtb2RlbFxuICAgICAgICAgICAgbmV4dFZpZXcgPSBWaWV3LmNyZWF0ZSh0aGlzLCBzY29wZSwgdmlldy5lbHNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLml0ZXJhdGVkLnNwbGljZShpbmRleCwgMCwgbmV4dFZpZXcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZpZXcubW9kZWxzW2luZGV4UHJvcF0gPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaXRlcmF0ZWQubGVuZ3RoID4gY29sbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgIHRpbWVzKHRoaXMuaXRlcmF0ZWQubGVuZ3RoIC0gY29sbGVjdGlvbi5sZW5ndGgsICgpID0+IHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuaXRlcmF0ZWQucG9wKCk7XG4gICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInZpZXcgaXMgdW5kZWZpbmVkIVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3LnVuYmluZCgpO1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyIHx8ICF0aGlzLm1hcmtlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHZpZXcuZWxzWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gXCJPUFRJT05cIiAmJiB0aGlzLnZpZXcuYmluZGluZ3MpIHtcbiAgICAgIHRoaXMudmlldy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nOiBCaW5kYWJsZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5tYXJrZXIgJiZcbiAgICAgICAgICBiaW5kaW5nLmVsID09PSB0aGlzLm1hcmtlci5wYXJlbnROb2RlICYmXG4gICAgICAgICAgYmluZGluZy50eXBlID09PSBcInZhbHVlXCIgJiZcbiAgICAgICAgICBiaW5kaW5nLnN5bmNcbiAgICAgICAgKSB7XG4gICAgICAgICAgYmluZGluZy5zeW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShtb2RlbHM6IGFueSkge1xuICAgIGNvbnN0IGRhdGE6IGFueSA9IHt9O1xuICAgIC8vIFRPRE86IGFkZCB0ZXN0IGFuZCBmaXggaWYgbmVjZXNzYXJ5XG4gICAgT2JqZWN0LmtleXMobW9kZWxzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJncyBpcyBudWxsXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSAhPT0gdGhpcy5hcmdzWzBdKSB7XG4gICAgICAgIGRhdGFba2V5XSA9IG1vZGVsc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5pdGVyYXRlZC5mb3JFYWNoKCh2aWV3OiBWaWV3KSA9PiB7XG4gICAgICB2aWV3LnVwZGF0ZShkYXRhKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIFNldHMgYSByZWZlcmVuY2UgdG8gdGhlIEhUTUwgZWxlbWVudCBpbnRvIHRoZSBzY29wZVxuICovXG5leHBvcnQgY2xhc3MgRWxlbWVudEJpbmRlciBleHRlbmRzIEJpbmRlcjxIVE1MRWxlbWVudCwgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiZWxlbWVudFwiO1xuICBwdWJsaXNoZXMgPSB0cnVlO1xuXG4gIGJpbmQoKSB7XG4gICAgdGhpcy5wdWJsaXNoKCk7XG4gIH1cblxuICByb3V0aW5lKCkge1xuICAgIC8vXG4gIH1cblxuICBnZXRWYWx1ZShlbDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWw7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcblxuLyoqXG4gKiBFbmFibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVuYWJsZWRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8XG4gIGJvb2xlYW4sXG4gIEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTElucHV0RWxlbWVudFxuPiB7XG4gIHN0YXRpYyBrZXkgPSBcImVuYWJsZWRcIjtcbiAgcm91dGluZShlbDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikge1xuICAgIGVsLmRpc2FibGVkID0gIXZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogc29ydC1jaGlsZHMgdXNpbmcgZmxleCBvcmRlclxuICovXG5leHBvcnQgY2xhc3MgRmxleFNvcnRDaGlsZHNCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8Ym9vbGVhbiwgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiZmxleC1zb3J0LWNoaWxkc1wiO1xuICBwcmlvcml0eSA9IDkwMDAwO1xuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBkZXNjZW5kaW5nOiBib29sZWFuKSB7XG4gICAgY29uc3QgY2hpbGRyZW5zID0gQXJyYXkuZnJvbShlbC5jaGlsZHJlbikgYXMgSFRNTEVsZW1lbnRbXTtcbiAgICBjaGlsZHJlbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKCFhLmRhdGFzZXQuc29ydEJ5IHx8ICFiLmRhdGFzZXQuc29ydEJ5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGEuZGF0YXNldC5zb3J0QnkgPCBiLmRhdGFzZXQuc29ydEJ5KSB7XG4gICAgICAgIHJldHVybiBkZXNjZW5kaW5nID8gMSA6IC0xO1xuICAgICAgfVxuICAgICAgaWYgKGEuZGF0YXNldC5zb3J0QnkgPiBiLmRhdGFzZXQuc29ydEJ5KSB7XG4gICAgICAgIHJldHVybiBkZXNjZW5kaW5nID8gLTEgOiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5zW2ldO1xuICAgICAgY2hpbGQuc3R5bGUub3JkZXIgPSBpLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogSGlkZXMgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlIChuZWdhdGVkIHZlcnNpb24gb2YgYHNob3dgIGJpbmRlcikuXG4gKi9cbmV4cG9ydCBjbGFzcyBIaWRlQmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcImhpZGVcIjtcbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSB7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gXCJub25lXCIgOiBcIlwiO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIFNldHMgdGhlIGVsZW1lbnQncyB0ZXh0IHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgSHRtbEJpbmRlciBleHRlbmRzIEJpbmRlcjxudW1iZXIgfCBzdHJpbmcgfCBib29sZWFuLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJodG1sXCI7XG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWU/LnRvU3RyaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW0h0bWxCaW5kZXJdIFZhbHVlIGlzIG5vdCBhIHN0cmluZ1wiLCB2YWx1ZSk7XG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsLmlubmVySFRNTCA9IHZhbHVlIHx8IFwiXCI7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vdmlldy5qc1wiO1xuXG4vKipcbiAqIGlmXG4gKiBJbnNlcnRzIGFuZCBiaW5kcyB0aGUgZWxlbWVudCBhbmQgaXQncyBjaGlsZCBub2RlcyBpbnRvIHRoZSBET00gd2hlbiB0cnVlLlxuICovXG5leHBvcnQgY2xhc3MgSWZCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8Ym9vbGVhbj4ge1xuICBzdGF0aWMga2V5ID0gXCJpZlwiO1xuICBzdGF0aWMgYmxvY2sgPSB0cnVlO1xuICBwcmlvcml0eSA9IDQwMDA7XG5cbiAgYXR0YWNoZWQgPSBmYWxzZTtcbiAgbmVzdGVkPzogVmlldztcblxuICBiaW5kKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICB0aGlzLm1hcmtlciA9IHdpbmRvdz8uZG9jdW1lbnQ/LmNyZWF0ZUNvbW1lbnQoXG4gICAgICAgIFwiIHJpYmE6IFwiICsgdGhpcy50eXBlICsgXCIgXCIgKyB0aGlzLmtleXBhdGggKyBcIiBcIlxuICAgICAgKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIGlmICghZWwucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgIC8vIGNvbnNvbGUud2FybignRWxlbWVudCBoYXMgbm8gcGFyZW50IG5vZGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubWFya2VyLCBlbCk7XG4gICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZXN0ZWQpIHtcbiAgICAgIHRoaXMubmVzdGVkLmJpbmQoKTtcbiAgICB9XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKHRoaXMubmVzdGVkKSB7XG4gICAgICB0aGlzLm5lc3RlZC51bmJpbmQoKTtcbiAgICB9XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICB2YWx1ZSA9ICEhdmFsdWU7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLmF0dGFjaGVkKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLm5lc3RlZCkge1xuICAgICAgICAgIHRoaXMubmVzdGVkID0gbmV3IFZpZXcoZWwsIHRoaXMudmlldy5tb2RlbHMsIHRoaXMudmlldy5vcHRpb25zKTtcbiAgICAgICAgICB0aGlzLm5lc3RlZC5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm1hcmtlciB8fCAhdGhpcy5tYXJrZXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgIC8vIGNvbnNvbGUud2FybignTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFya2VyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCB0aGlzLm1hcmtlci5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0VsZW1lbnQgaGFzIG5vIHBhcmVudCBub2RlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShtb2RlbHM6IGFueSkge1xuICAgIGlmICh0aGlzLm5lc3RlZCkge1xuICAgICAgdGhpcy5uZXN0ZWQudXBkYXRlKG1vZGVscyk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9hbmltYXRlLWNsYXNzbmFtZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2FkZC1jbGFzcy5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Fzc2lnbi1wcm9wZXJ0eS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Fzc2lnbi5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F0dHJpYnV0ZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Jsb2NrLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2hlY2tlZC5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NsYXNzLW5hbWUuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jby1hdHRyaWJ1dGUuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kaXNhYmxlZC5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RyYWdnYWJsZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VhY2gtaXRlbS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VsZW1lbnQuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbmFibGVkLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmxleC1zb3J0LWNoaWxkcy5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2hpZGUuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9odG1sLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaWYuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXhsZW5ndGguYmluZGVyLmpzXCI7XG4vLyBleHBvcnQgKiBmcm9tIFwiLi9tdXN0YWNoZS10ZXh0LmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb24tZXZlbnQuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJlbnQuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWFkb25seS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlbW92ZS1jbGFzcy5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nob3cuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zcmNzZXQtc2l6ZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N0eWxlLWJhY2tncm91bmQtaW1hZ2UuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdHlsZS1jc3MtcHJvcGVydHkuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdHlsZS1wcm9wZXJ0eS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RhZy1uYW1lLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGVtcGxhdGUuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90ZXh0LmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9nZ2xlLW9uLWV2ZW50LmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdW5jaGVja2VkLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdW5sZXNzLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsdWUuYmluZGVyLmpzXCI7XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogbWF4bGVuZ3RoXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXhsZW5ndGhCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8bnVtYmVyLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJtYXhsZW5ndGhcIjtcblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgbWF4TGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiBtYXhMZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KS5zZXRBdHRyaWJ1dGUoXCJtYXhsZW5ndGhcIiwgbWF4TGVuZ3RoLnRvU3RyaW5nKCkpO1xuICAgICAgKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLm1heExlbmd0aCA9IG1heExlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShcIm1heGxlbmd0aFwiKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFFbGVtZW50IH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBNdXN0YWNoZVRleHRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBEYXRhRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJtdXN0YWNoZS10ZXh0XCI7XG4gIHJvdXRpbmUobm9kZTogRGF0YUVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBub2RlLmRhdGEgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBcIlwiO1xuICB9XG59XG4iLCJpbXBvcnQgeyBldmVudEhhbmRsZXJGdW5jdGlvbiB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIEJpbmRzIGFuIGV2ZW50IGhhbmRsZXIgb24gdGhlIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBPbkV2ZW50QmluZGVyIGV4dGVuZHMgQmluZGVyPGV2ZW50SGFuZGxlckZ1bmN0aW9uLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJvbi0qXCI7XG4gIGZ1bmN0aW9uID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAxMDAwO1xuXG4gIGhhbmRsZXI/OiBhbnk7XG5cbiAgdW5iaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJncyBpcyBudWxsXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgZXZlbnROYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLmhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogZXZlbnRIYW5kbGVyRnVuY3Rpb24pIHtcbiAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmdzIGlzIG51bGxcIik7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG5cbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMjkxMlxuICAgIGNvbnN0IG9wdGlvbnM6IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zICYgRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiB0aGlzLmVsLmRhdGFzZXQucGFzc2l2ZSA9PT0gXCJ0cnVlXCIsIC8vIGRhdGEtcGFzc2l2ZT1cInRydWVcIlxuICAgIH07XG4gICAgaWYgKHRoaXMuaGFuZGxlcikge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlciA9IHRoaXMuZXZlbnRIYW5kbGVyKHZhbHVlLCBlbCkuYmluZCh0aGlzKTtcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLmhhbmRsZXIsIG9wdGlvbnMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyBCYXNpY0NvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnQvYmFzaWMtY29tcG9uZW50LmpzXCI7XG5pbXBvcnQge1xuICBpc0N1c3RvbUVsZW1lbnQsXG4gIHdhaXRGb3JDdXN0b21FbGVtZW50LFxufSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBwYXJlbnRcbiAqIEJpbmRzIHRoZSBwYXJlbnQgc2NvcGUgdG8geW91ciBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmVudEJpbmRlciBleHRlbmRzIEJpbmRlcjxhbnksIEJhc2ljQ29tcG9uZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcInBhcmVudFwiO1xuICByb3V0aW5lKCkge1xuICAgIC8qKi9cbiAgfVxuICBwcml2YXRlIGJpbmRJbnRlcm4oZWw6IEJhc2ljQ29tcG9uZW50KSB7XG4gICAgaWYgKGVsLnNldEJpbmRlckF0dHJpYnV0ZSkge1xuICAgICAgZWwuc2V0QmluZGVyQXR0cmlidXRlKFwiJHBhcmVudFwiLCB0aGlzLnZpZXcubW9kZWxzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIltwYXJlbnRCaW5kZXJdIFlvdSBjYW4gb25seSB1c2UgdGhpcyBiaW5kZXIgb24gUmliYSBjb21wb25lbnRzXCIsXG4gICAgICAgIGVsLmxvY2FsTmFtZSxcbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZ2V0KGVsLmxvY2FsTmFtZSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYmluZChlbDogQmFzaWNDb21wb25lbnQpIHtcbiAgICBpZiAoaXNDdXN0b21FbGVtZW50KGVsLCB0cnVlLCB0cnVlKSkge1xuICAgICAgdGhpcy5iaW5kSW50ZXJuKGVsKTtcbiAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tRWxlbWVudChlbCwgdHJ1ZSkpIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgICAgYFtwYXJlbnRCaW5kZXJdIEN1c3RvbUVsZW1lbnQgJHtlbC5sb2NhbE5hbWV9IGhhcyBiZWVuIGRlZmluZWQsIGJ1dCBpcyBub3QgeWV0IHVwZ3JhZGVkLiBXYWl0aW5nIGZvciB1cGdyYWRlLi5gLFxuICAgICAgICBlbFxuICAgICAgKTtcbiAgICAgIGF3YWl0IHdhaXRGb3JDdXN0b21FbGVtZW50KGVsKTtcbiAgICAgIHRoaXMuYmluZEludGVybihlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbcGFyZW50QmluZGVyXSBZb3UgY2FuIG9ubHkgdXNlIHRoaXMgYmluZGVyIG9uIFJpYmEgY29tcG9uZW50c1wiLFxuICAgICAgICBlbC5sb2NhbE5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogcmVhZG9ubHlcbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRvbmx5QmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwicmVhZG9ubHlcIjtcblxuICByb3V0aW5lKGVsOiBIVE1MSW5wdXRFbGVtZW50LCByZWFkT25seTogYm9vbGVhbikge1xuICAgIHJlYWRPbmx5ID0gISFyZWFkT25seTtcbiAgICBlbC5yZWFkT25seSA9IHJlYWRPbmx5O1xuICAgIGlmIChyZWFkT25seSkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIHJlbW92ZS1jbGFzc1xuICogUmVtb3ZlcyB0aGUgZ2l2ZW4gY2xhc3Mgc3RyaW5nIHRoZSBjbGFzcyBhdHRpYnV0ZS5cbiAqIEluc3RlYWQgb2YgYGNsYXNzLVtjbGFzc25hbWVdYCB0aGUgY2xhc3NuYW1lIGlzIHJlbW92ZWQgYnkgdGhlXG4gKiBnaXZlbiBhdHRyaWJ1dGUgYW5kIG5vdCBieSB0aGUgc3RhciB2YWx1ZSxcbiAqIEBleGFtcGxlXG4gKiA8aW1nIGNsYXNzPVwibG9hZGluZ1wiIHJ2LXNyYz1cImltZy5zcmNcIiBydi1yZW1vdmUtY2xhc3M9XCJsb2FkaW5nQ2xhc3NcIj5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlbW92ZUNsYXNzQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwicmVtb3ZlLWNsYXNzXCI7XG4gIHByaXZhdGUgc3RhdGljQ2xhc3Nlc1N0cmluZz86IHN0cmluZztcbiAgYmluZChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLnN0YXRpY0NsYXNzZXNTdHJpbmcgPSBlbC5jbGFzc05hbWU7XG4gIH1cbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFxcXFxiJHt2YWx1ZX1cXFxcYmAsIFwiZ1wiKTtcbiAgICBpZiAoIXRoaXMuc3RhdGljQ2xhc3Nlc1N0cmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3RhdGljQ2xhc3Nlc1N0cmluZyBpcyB1bmRlZmluZWQhXCIpO1xuICAgIH1cbiAgICBlbC5jbGFzc05hbWUgPSB0aGlzLnN0YXRpY0NsYXNzZXNTdHJpbmcucmVwbGFjZShyZWdleCwgXCJcIikudHJpbSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogU2hvd3MgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlIChuZWdhdGVkIHZlcnNpb24gb2YgYGhpZGVgIGJpbmRlcikuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaG93QmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcInNob3dcIjtcbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSB7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gXCJcIiA6IFwibm9uZVwiO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIHNyY3NldC1zaXplXG4gKiBTZXRzIGFuIHVybCB3aXRoIHNpemUgdG8gdGhlIGBzcmNzZXRgIGF0dHJpYnV0ZVxuICovXG5leHBvcnQgY2xhc3MgU3Jjc2V0U2l6ZUJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcInNyY3NldC0qXCI7XG5cbiAgcm91dGluZShlbDogSFRNTFVua25vd25FbGVtZW50LCB1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IHNpemU6IHN0cmluZyA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgbGV0IHNyY3NldCA9IGVsLmdldEF0dHJpYnV0ZShcInNyY3NldFwiKTtcbiAgICBpZiAodHlwZW9mIHNyY3NldCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgc3Jjc2V0ID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIgJiYgdXJsLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHNlcGVyYXRvciA9IHNyY3NldC5sZW5ndGggPiAwID8gXCIsIFwiIDogXCJcIjtcbiAgICAgIC8vIEFkZCBzaXplIHRvIHNyY3NldCBhdHRyaWJ1dGVcbiAgICAgIHNyY3NldCArPSBgJHtzZXBlcmF0b3J9JHt1cmx9ICR7c2l6ZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZW1vdmUgc2l6ZSBmcm9tIHNyY3NldCBhdHRyaWJ1dGVcbiAgICAgIGxldCBzaXplcyA9IHNyY3NldC5zcGxpdChcIixcIik7XG4gICAgICBzaXplcyA9IHNpemVzLm1hcCgoaXRlclNpemUpID0+IGl0ZXJTaXplLnRyaW0oKSk7XG4gICAgICBzaXplcyA9IHNpemVzLmZpbHRlcigoaXRlclNpemUpID0+ICFpdGVyU2l6ZS5pbmNsdWRlcyhzaXplKSk7XG4gICAgICBzcmNzZXQgPSBzaXplcy5qb2luKFwiLCBcIikgfHwgXCJcIjtcbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKFwic3Jjc2V0XCIsIHNyY3NldCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcblxuLyoqXG4gKiBzdHlsZS0qXG4gKiBBZGRzIGEgc3R5bGUgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBydi1zdHlsZS1iYWNrZ3JvdW5kLWltYWdlPVwiJy9pbWFnZS5wbmcnXCI+PC9kaXY+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFN0eWxlQmFja2dyb3VuZEltYWdlQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwic3R5bGUtYmFja2dyb3VuZC1pbWFnZVwiO1xuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IHByb3AgPSBcImJhY2tncm91bmQtaW1hZ2VcIjtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGB1cmwoJHt2YWx1ZX0pYCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5cbi8qKlxuICogc3R5bGUtKlxuICogQWRkcyBhIHN0eWxlIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgcnYtc3R5bGUtYmFja2dyb3VuZC1jb2xvcj1cIidibHVlJ1wiPjwvZGl2PlxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHlsZVN0YXJCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJzdHlsZS0qXCI7XG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gdGhpcy5hcmdzWzBdO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eU5hbWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5TmFtZS50b1N0cmluZygpLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi4vYmluZGVyLmpzXCI7XG5pbXBvcnQgeyBrZWJhYkNhc2UgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBzdHlsZVxuICogQWRkcyBhIHN0eWxlIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgcnYtc3R5bGU9XCJ7J2JhY2tncm91bmRDb2xvcic6J2JsdWUnfVwiPjwvZGl2PlxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHlsZUJpbmRlciBleHRlbmRzIEJpbmRlcjxcbiAgUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB8IHN0cmluZyxcbiAgSFRNTEVsZW1lbnRcbj4ge1xuICBzdGF0aWMga2V5ID0gXCJzdHlsZVwiO1xuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4gfCBzdHJpbmcpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG4gICAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoa2ViYWJDYXNlKGtleSksIHZhbHVlW2tleSBhcyBhbnldIHx8IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGVsLnN0eWxlKSkge1xuICAgICAgICAoZWwuc3R5bGUgYXMgYW55KS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIHRhZy0qXG4gKiB0YWctW3RhZ25hbWVdXG4gKlxuICogQ2hhbmdlcyB0aGUgaHRtbCB0YWcgKHdoYXRldmVyIHZhbHVlIGlzIGluIHBsYWNlIG9mIFt0YWduYW1lXSkgb2YgdGhlIGVsZW1lbnRcbiAqIHdoZW4gdGhlIHZhbHVlIGV2YWx1YXRlcyB0byB0cnVlIGFuZCByZXZlcnRzIHRvIHRoZSBvcmlnaW5hbCB0YWcgbmFtZSBpZiB0aGUgdmFsdWUgZXZhbHVhdGVzIHRvIGZhbHNlLlxuICpcbiAqIFRPRE8gdGVzdCBtZSBvbiB2YWx1ZSBjaGFuZ2VcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBydi10YWctYT1cIml0ZW0uaGFzSHJlZlwiPnsgaXRlbS5sYWJlbCB9PC9kaXY+XG4gKi9cbmV4cG9ydCBjbGFzcyBUYWdTdGFyQmluZGVyIGV4dGVuZHMgQmluZGVyPGJvb2xlYW4sIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcInRhZy0qXCI7XG4gIHByaW9yaXR5ID0gLTEwMDA7XG5cbiAgcHJpdmF0ZSBvcmlnaW5hbFRhZz86IHN0cmluZztcblxuICBiaW5kKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQpIHtcbiAgICB0aGlzLm9yaWdpbmFsVGFnID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgcm91dGluZShvbGRFbDogSFRNTFVua25vd25FbGVtZW50LCB2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFyZ3MgaXMgbnVsbFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJUYWdOYW1lID0gdGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHRhZ05hbWU6IHN0cmluZztcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRhZ05hbWUgPSAodGhpcy5hcmdzWzBdIGFzIHN0cmluZykudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9yaWdpbmFsVGFnKSB7XG4gICAgICB0YWdOYW1lID0gdGhpcy5vcmlnaW5hbFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYWcgbmFtZSBub3QgZm91bmQhXCIpO1xuICAgIH1cblxuICAgIGlmIChjdXJUYWdOYW1lICE9PSB0YWdOYW1lKSB7XG4gICAgICBjb25zdCBuZXdFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG5cbiAgICAgIC8vIE1vdmUgY2hpbGRzIHRvIG5ldyBlbGVtZW50IHdlIHVzZSB0aGlzIGluc3RlYWQgaWYgaW5uZXJIVE1MIHRvIGtlZXAgdGhlIGJpbmRlcnMgYWxpdmUgb24gdGhpcyBjaGlsZHNcbiAgICAgIHdoaWxlIChvbGRFbC5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKG9sZEVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZChvbGRFbC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IGF0dHJpYnV0ZXMgdG8gbmV3IGVsZW1lbnRcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvbGRFbC5hdHRyaWJ1dGVzKTtcbiAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgbmV3RWwuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lLCBhdHRyaWJ1dGUudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXBsYWNlIHRoZSBvbGQgZWxlbWVudCB3aXRoIHRoZSBuZXcgZWxlbWVudFxuICAgICAgaWYgKG9sZEVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgb2xkRWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3RWwsIG9sZEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5vIHBhcmVudFwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbCA9IG5ld0VsO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi92aWV3LmpzXCI7XG5cbi8qKlxuICogdGVtcGxhdGVcbiAqIFNpbWlsYXIgdG8gcnYtaHRtbCBidXQgYWxzbyBiaW5kcyB0aGUgaHRtbCB3aXRoIHJpYmEsIHNvIHlvdSBjYW4gYWxzbyB1c2UgYmluZGVycyBhbmQgY29tcG9uZW50cyBpbiB0aGlzIHRlbXBsYXRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwidGVtcGxhdGVcIjtcblxuICBwcml2YXRlIG5lc3RlZD86IFZpZXc7XG5cbiAgYmluZChlbDogSFRNTFVua25vd25FbGVtZW50KSB7XG4gICAgdGhpcy5uZXN0ZWQgPSBuZXcgVmlldyhlbCwgdGhpcy52aWV3Lm1vZGVscywgdGhpcy52aWV3Lm9wdGlvbnMpO1xuICB9XG5cbiAgcm91dGluZShlbDogSFRNTFVua25vd25FbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5uZXN0ZWQ/LnVuYmluZCgpO1xuICAgIGVsLmlubmVySFRNTCA9IHZhbHVlID8gdmFsdWUgOiBcIlwiO1xuICAgIHRoaXMubmVzdGVkID0gbmV3IFZpZXcoZWwsIHRoaXMudmlldy5tb2RlbHMsIHRoaXMudmlldy5vcHRpb25zKTtcbiAgICB0aGlzLm5lc3RlZD8uYmluZCgpO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIHRoaXMubmVzdGVkPy51bmJpbmQoKTtcbiAgfVxuXG4gIHVwZGF0ZShtb2RlbHM6IGFueSkge1xuICAgIHRoaXMubmVzdGVkPy51cGRhdGUobW9kZWxzKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIFNldHMgdGhlIGVsZW1lbnQncyB0ZXh0IHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgVGV4dEJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxFbGVtZW50PiB7XG4gIHN0YXRpYyBrZXkgPSBcInRleHRcIjtcbiAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlPy50b1N0cmluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1RleHRCaW5kZXJdIENhbid0IGNvbnZlcnQgdmFsdWUgXCIke3ZhbHVlfVwiIHRvIHN0cmluZyEgRWxlbWVudDogYCxcbiAgICAgICAgICBlbFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsLnRleHRDb250ZW50ID0gdmFsdWUgfHwgXCJcIjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuXG4vKipcbiAqIFRvZ2dsZXMgYSBib29sZWFuIHZhcmlhYmxlIHRvIHRydWUvZmFsc2UgaWYgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvZ2dsZU9uRXZlbnRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MVW5rbm93bkVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwidG9nZ2xlLW9uLSpcIjtcblxuICBwcml2YXRlIHByb3BlcnR5S2V5Pzogc3RyaW5nO1xuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wZXJ0eUtleSkge1xuICAgICAgdGhpcy52aWV3Lm1vZGVsc1t0aGlzLnByb3BlcnR5S2V5XSA9ICF0aGlzLnZpZXcubW9kZWxzW3RoaXMucHJvcGVydHlLZXldO1xuICAgIH1cbiAgfVxuXG4gIGJpbmQoZWw6IEhUTUxVbmtub3duRWxlbWVudCkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgcGFzc2l2ZSA9IHRoaXMuZWwuZGF0YXNldC5wYXNzaXZlID09PSBcInRydWVcIjsgLy8gZGF0YS1wYXNzaXZlPVwidHJ1ZVwiXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMudG9nZ2xlLCB7IHBhc3NpdmUgfSk7XG4gIH1cblxuICB1bmJpbmQoZWw6IEhUTUxVbmtub3duRWxlbWVudCkge1xuICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFyZ3MgaXMgbnVsbFwiKTtcbiAgICB9XG4gICAgY29uc3QgZXZlbnROYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy50b2dnbGUpO1xuICB9XG5cbiAgcm91dGluZShlbDogSFRNTFVua25vd25FbGVtZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuYXJncyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJncyBpcyBudWxsXCIpO1xuICAgIH1cbiAgICB0aGlzLnByb3BlcnR5S2V5ID0gcHJvcGVydHlLZXk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9iaW5kZXIuanNcIjtcbmltcG9ydCB7IGdldElucHV0VmFsdWUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgeyBnZXRTdHJpbmcgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIHVuY2hlY2tlZFxuICogVW5jaGVja3MgYSBjaGVja2JveCBvciByYWRpbyBpbnB1dCB3aGVuIHRoZSB2YWx1ZSBpcyB0cnVlIChuZWdhdGVkIHZlcnNpb24gb2ZcbiAqIGBjaGVja2VkYCBiaW5kZXIpLiBBbHNvIHNldHMgdGhlIG1vZGVsIHByb3BlcnR5IHdoZW4gdGhlIGlucHV0IGlzIGNoZWNrZWQgb3JcbiAqIHVuY2hlY2tlZCAodHdvLXdheSBiaW5kZXIpLlxuICovXG5leHBvcnQgY2xhc3MgVW5jaGVja2VkQmluZGVyIGV4dGVuZHMgQmluZGVyPFxuICBzdHJpbmcgfCBib29sZWFuLFxuICBIVE1MSW5wdXRFbGVtZW50XG4+IHtcbiAgc3RhdGljIGtleSA9IFwidW5jaGVja2VkXCI7XG4gIHB1Ymxpc2hlcyA9IHRydWU7XG4gIHByaW9yaXR5ID0gMjAwMDtcblxuICBvbkNoYW5nZSA9IHRoaXMucHVibGlzaC5iaW5kKHRoaXMpO1xuXG4gIGJpbmQoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMub25DaGFuZ2UpO1xuICB9XG5cbiAgdW5iaW5kKGVsOiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLm9uQ2hhbmdlKTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxJbnB1dEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcgfCBib29sZWFuKSB7XG4gICAgaWYgKGVsLnR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgZWwuY2hlY2tlZCA9IGdldFN0cmluZyhlbC52YWx1ZSkgIT09IGdldFN0cmluZyh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNoZWNrZWQgPSAhdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0VmFsdWUoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0SW5wdXRWYWx1ZShlbCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElmQmluZGVyIH0gZnJvbSBcIi4vaWYuYmluZGVyLmpzXCI7XG5cbi8qKlxuICogdW5sZXNzXG4gKiBSZW1vdmVzIGFuZCB1bmJpbmRzIHRoZSBlbGVtZW50IGFuZCBpdCdzIGNoaWxkIG5vZGVzIGludG8gdGhlIERPTSB3aGVuIHRydWVcbiAqIChuZWdhdGVkIHZlcnNpb24gb2YgYGlmYCBiaW5kZXIpLlxuICovXG5leHBvcnQgY2xhc3MgVW5sZXNzQmluZGVyIGV4dGVuZHMgSWZCaW5kZXIge1xuICBzdGF0aWMga2V5ID0gXCJ1bmxlc3NcIjtcblxuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gc3VwZXIucm91dGluZShlbCwgIXZhbHVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuaW1wb3J0IHtcbiAgZ2V0SW5wdXRWYWx1ZSxcbiAgZ2V0U3RyaW5nLFxuICBzZXRBdHRyaWJ1dGUsXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG5jb25zdCBERUZBVUxUX0VWRU5UUyA9IFwiY2hhbmdlIGlucHV0IHBhc3RlIGJsdXIgZm9jdXNcIjtcblxuLyoqXG4gKiBTZXRzIHRoZSBlbGVtZW50J3MgdmFsdWUuIEFsc28gc2V0cyB0aGUgbW9kZWwgcHJvcGVydHkgd2hlbiB0aGUgaW5wdXQgY2hhbmdlc1xuICogKHR3by13YXkgYmluZGVyKS5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbHVlQmluZGVyIGV4dGVuZHMgQmluZGVyPGFueSwgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwidmFsdWVcIjtcbiAgcHVibGlzaGVzID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAzMDAwO1xuXG4gIGV2ZW50Pzogc3RyaW5nO1xuXG4gIGdldERhdGEoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHR5cGU6IChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KS50eXBlLFxuICAgICAgdGFnTmFtZTogZWwudGFnTmFtZSxcbiAgICAgIGNvbnRlbnRlZGl0YWJsZTogZWwuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgaXNSYWRpbzogZmFsc2UsXG4gICAgICBpc09wdGlvbjogZmFsc2UsXG4gICAgfTtcbiAgICBkYXRhLmlzUmFkaW8gPSBkYXRhLnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiBkYXRhLnR5cGUgPT09IFwicmFkaW9cIjtcbiAgICBkYXRhLmlzT3B0aW9uID0gZGF0YS50YWdOYW1lID09PSBcIk9QVElPTlwiO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgb25DaGFuZ2UgPSB0aGlzLnB1Ymxpc2guYmluZCh0aGlzKTtcblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChlbC50YWdOYW1lID09PSBcIk9QVElPTlwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGEoZWwpO1xuICAgIGlmICghZGF0YS5pc1JhZGlvKSB7XG4gICAgICB0aGlzLmV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKFwiZXZlbnQtbmFtZVwiKSB8fCBERUZBVUxUX0VWRU5UUztcblxuICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5ldmVudC5zcGxpdChcIiBcIik7XG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LnRyaW0oKSwgdGhpcy5vbkNoYW5nZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVuYmluZChlbDogSFRNTFVua25vd25FbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuZXZlbnQpIHtcbiAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuZXZlbnQuc3BsaXQoXCIgXCIpO1xuICAgICAgZm9yIChjb25zdCBldmVudCBpbiBldmVudHMpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudC50cmltKCksIHRoaXMub25DaGFuZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoXG4gICAgZWw6IEhUTUxFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQsXG4gICAgbmV3VmFsdWU/OiBudW1iZXIgfCBzdHJpbmcgfCBzdHJpbmdbXVxuICApIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLmdldFZhbHVlKGVsKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gZ2V0U3RyaW5nKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG9sZFZhbHVlKSkge1xuICAgICAgaWYgKG9sZFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgb2xkVmFsdWUgPSBnZXRTdHJpbmcob2xkVmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2xkVmFsdWUgPSBcIlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgIC8vIG5vdGhpbmcgY2hhbmdlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGEoZWwpO1xuXG4gICAgaWYgKGRhdGEuaXNSYWRpbyB8fCBkYXRhLmlzT3B0aW9uKSB7XG4gICAgICByZXR1cm4gc2V0QXR0cmlidXRlKGVsLCBcInZhbHVlXCIsIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoKGVsIGFzIEhUTUxTZWxlY3RFbGVtZW50KS50eXBlID09PSBcInNlbGVjdC1tdWx0aXBsZVwiKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoZWwgYXMgSFRNTFNlbGVjdEVsZW1lbnQpLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBvcHRpb24gPSAoZWwgYXMgSFRNTFNlbGVjdEVsZW1lbnQpLm9wdGlvbnNbXG4gICAgICAgICAgICBpXG4gICAgICAgICAgXSBhcyBIVE1MT3B0aW9uRWxlbWVudDtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBuZXdWYWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpKSB7XG4gICAgICBlbC5pbm5lckhUTUwgPSBuZXdWYWx1ZSBhcyBzdHJpbmc7IC8vIFRPRE8gd3JpdGUgdGVzdCBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgfSBlbHNlIHtcbiAgICAgIChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9IG5ld1ZhbHVlIGFzIHN0cmluZztcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShlbDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0SW5wdXRWYWx1ZShlbCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQXV0byBwYXJzZSBjdXN0b20gZWxlbWVudCBhdHRyaWJ1dGVzXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL1dlYi9XZWJfQ29tcG9uZW50cy9Vc2luZ19jdXN0b21fZWxlbWVudHNcbiAqL1xuaW1wb3J0IFwiQHJpYmFqcy90eXBlc1wiO1xuaW1wb3J0IHtcbiAgRXZlbnRIYW5kbGVyLFxuICBPYnNlcnZlZEF0dHJpYnV0ZXNUb0NoZWNrLFxuICBUZW1wbGF0ZUZ1bmN0aW9uLFxuICBPYnNlcnZlclN5bmNDYWxsYmFjayxcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgdHlwZSB7IEpzeEVsZW1lbnQgfSBmcm9tIFwiQHJpYmFqcy9qc3gvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyByZW5kZXJFbGVtZW50IH0gZnJvbSBcIkByaWJhanMvanN4L3NyYy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vb2JzZXJ2ZXIuanNcIjtcbmltcG9ydCB7IHBhcnNlSnNvblN0cmluZywgY2FtZWxDYXNlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcbmltcG9ydCB7IGdldFJhbmRvbUNvbG9yLCBjb25zb2xlQ29sb3VyZWQgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvY29sb3IuanNcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2ljQ29tcG9uZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcblxuICBwdWJsaWMgX2RlYnVnID0gZmFsc2U7XG4gIHB1YmxpYyBfY29sb3I/OiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlTG9hZGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY2hlY2sgaWYgYWxsIHBhc3NlZCBvYnNlcnZlZEF0dHJpYnV0ZXMgYXJlIGluaXRpYWxpemVkXG4gICAqL1xuICBwcm90ZWN0ZWQgb2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVjazogT2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVjayA9IHt9O1xuXG4gIHByb3RlY3RlZCBvYnNlcnZlZEF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgcHVibGljIGFic3RyYWN0IHNjb3BlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICh0aGlzLl9kZWJ1Zykge1xuICAgICAgdGhpcy5fY29sb3IgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhpcyBjdXN0b20gZWxlbWVudFxuICAgKi9cbiAgcHVibGljIHJlbW92ZSgpIHtcbiAgICBpZiAodGhpcyAmJiB0aGlzLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPjtcblxuICBwcm90ZWN0ZWQgX2xvZyhtb2RlOiBcImRlYnVnXCIgfCBcImluZm9cIiB8IFwibG9nXCIgfCBcImVycm9yXCIsIC4uLmFyZ3M6IHVua25vd25bXSkge1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZSB8fCB0aGlzLnRhZ05hbWU7XG4gICAgaWYgKCF0aGlzLl9jb2xvcikge1xuICAgICAgdGhpcy5fY29sb3IgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIH1cbiAgICBjb25zb2xlQ29sb3VyZWQoeyBuYW1lc3BhY2UsIGNvbG9yOiB0aGlzLl9jb2xvciwgbW9kZSB9LCAuLi5hcmdzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbmZvKC4uLmFyZ3M6IHVua25vd25bXSkge1xuICAgIHJldHVybiB0aGlzLl9sb2coXCJpbmZvXCIsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRlYnVnKC4uLmFyZ3M6IHVua25vd25bXSkge1xuICAgIGlmICghdGhpcy5fZGVidWcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fbG9nKFwiZGVidWdcIiwgLi4uYXJncyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZXJyb3IoLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGEgbGlzdCBvZiBhdHRyaWJ1dGVzIHdoaWNoIGFyZSByZXF1aXJlZCB1bnRpbCB0aGUgcmliYSBiaW5kaW5nIHN0YXJ0c1xuICAgKi9cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGluaXQob2JzZXJ2ZWRBdHRyaWJ1dGVzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMubG9hZEF0dHJpYnV0ZXMob2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgICB0aGlzLmdldFBhc3NlZE9ic2VydmVkQXR0cmlidXRlcyhvYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb3RlY3RlZCByZWFkeSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5hbGxQYXNzZWRPYnNlcnZlZEF0dHJpYnV0ZXNBcmVJbml0aWFsaXplZCgpICYmXG4gICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGVzKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBhdHRyaWJ1dGUgKGUuZy4gYHNyY2ApIGlzIHBhc3NlZCB0byB0aGlzIGN1c3RvbSBlbGVtZW50XG4gICAqIEBwYXJhbSBvYnNlcnZlZEF0dHJpYnV0ZVxuICAgKi9cbiAgcHJvdGVjdGVkIGF0dHJpYnV0ZUlzUGFzc2VkKG9ic2VydmVkQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUob2JzZXJ2ZWRBdHRyaWJ1dGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwYXNzZWQgb2JzZXJ2ZWQgYXR0cmlidXRlcywgdXNlZCB0byBjaGVjayBpZiBhbGwgcGFzc2VkIGF0dHJpYnV0ZXMgYXJlIGluaXRpYWxpemVkXG4gICAqIEBwYXJhbSBvYnNlcnZlZEF0dHJpYnV0ZXNcbiAgICovXG4gIHByb3RlY3RlZCBnZXRQYXNzZWRPYnNlcnZlZEF0dHJpYnV0ZXMob2JzZXJ2ZWRBdHRyaWJ1dGVzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IG9hMmMgPSB0aGlzLm9ic2VydmVkQXR0cmlidXRlc1RvQ2hlY2s7XG4gICAgZm9yIChjb25zdCBvYnNlcnZlZEF0dHJpYnV0ZSBvZiBvYnNlcnZlZEF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmICghb2EyY1tvYnNlcnZlZEF0dHJpYnV0ZV0pIHtcbiAgICAgICAgb2EyY1tvYnNlcnZlZEF0dHJpYnV0ZV0gPSB7IHBhc3NlZDogZmFsc2UsIGluaXRpYWxpemVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFvYTJjW29ic2VydmVkQXR0cmlidXRlXS5wYXNzZWQpIHtcbiAgICAgICAgICBvYTJjW29ic2VydmVkQXR0cmlidXRlXS5wYXNzZWQgPVxuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVJc1Bhc3NlZChvYnNlcnZlZEF0dHJpYnV0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGFsbCBwYXNzZWQgb2JzZXJ2ZWQgYXR0cmlidXRlcyBhcmUgaW5pdGlhbGl6ZWRcbiAgICovXG4gIHByb3RlY3RlZCBhbGxQYXNzZWRPYnNlcnZlZEF0dHJpYnV0ZXNBcmVJbml0aWFsaXplZCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXNUb0NoZWNrKS5ldmVyeShcbiAgICAgIChrZXkpID0+XG4gICAgICAgICF0aGlzLm9ic2VydmVkQXR0cmlidXRlc1RvQ2hlY2tba2V5XT8ucGFzc2VkIHx8XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVja1trZXldPy5pbml0aWFsaXplZFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWlyZWQgYXR0cmlidXRlcyBiZWZvcmUgdGhlIHZpZXcgaXMgYm91bmRcbiAgICpcbiAgICogVGhlIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayBpcyBjYWxsZWQgZm9yIGVhY2ggYXR0cmlidXRlIHdoaWNoIHVwZGF0ZXMgdGhlIHJpYmEgdmlldyBlYWNoIHRpbWVcbiAgICogd2hpY2ggY2FuIGhhdmUgYSBiaWcgaW1wYWN0IG9uIHBlcmZvcm1hbmNlIG9yIHJlcXVpcmVkIGF0dHJpYnV0ZXMgYXJlIG5vdCB5ZXQgYXZhaWxhYmxlIHdoaWNoIGNhbiBsZWFkIHRvIGVycm9ycy5cbiAgICogU28gZGVmaW5lIHJlcXVpcmVkIGF0dHJpYnV0ZXMgYW5kIHRoZSB2aWV3IGlzIG9ueSBiaW5kIHRoZSBmaXJzdCB0aW1lIGFmdGVyIGFsbCB0aGlzIGF0dHJpYnV0ZXMgYXJlIHRyYW5zbWl0dGVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNoZWNrUmVxdWlyZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVpcmVkQXR0cmlidXRlcygpLmV2ZXJ5KChyZXF1aXJlZEF0dHJpYnV0ZSkgPT4ge1xuICAgICAgcmVxdWlyZWRBdHRyaWJ1dGUgPSBjYW1lbENhc2UocmVxdWlyZWRBdHRyaWJ1dGUpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zY29wZS5oYXNPd25Qcm9wZXJ0eShyZXF1aXJlZEF0dHJpYnV0ZSkgJiZcbiAgICAgICAgdHlwZW9mIHRoaXMuc2NvcGVbcmVxdWlyZWRBdHRyaWJ1dGVdICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHBhcnNlQXR0cmlidXRlKGF0dHI6IHN0cmluZyB8IG51bGwpIHtcbiAgICBsZXQgdmFsdWU6IGFueSA9IGF0dHI7XG4gICAgaWYgKHR5cGVvZiBhdHRyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG5cbiAgICBpZiAoYXR0ciA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGF0dHIgPT09IFwiZmFsc2VcIikge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGF0dHIgPT09IFwibnVsbFwiKSB7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChhdHRyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGF0dHIgPT09IFwiXCIpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihhdHRyKSkpIHtcbiAgICAgIHZhbHVlID0gTnVtYmVyKGF0dHIpO1xuICAgICAgLy8gSWYgbnVtYmVyIGlzIHRvbyBsYXJnZSBzdG9yZSB0aGUgdmFsdWUgYXMgc3RyaW5nXG4gICAgICBpZiAodmFsdWUgPj0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgdmFsdWUgPSBhdHRyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBqc29uU3RyaW5nID0gcGFyc2VKc29uU3RyaW5nKHZhbHVlKTtcbiAgICAgIHZhbHVlID0ganNvblN0cmluZyA/IGpzb25TdHJpbmcgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgYmluZGluZ3MgKG1vc3Qgb24tKikgaW5zaWRlIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgcHJvdGVjdGVkIGV2ZW50SGFuZGxlcihzZWxmOiBCYXNpY0NvbXBvbmVudCk6IEV2ZW50SGFuZGxlciB7XG4gICAgLy8gSU1QT1JUQU5UIHRoaXMgbXVzdCBiZSBhIGZ1bmN0aW9uIGFuZCBub3QgYSBBcnJvdyBGdW5jdGlvbnNcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgY29udGV4dDogQmluZGVyLFxuICAgICAgZXZlbnQ6IEV2ZW50LFxuICAgICAgYmluZGluZzogQmluZGVyLFxuICAgICAgZWw6IEhUTUxFbGVtZW50XG4gICAgKSB7XG4gICAgICBpZiAoIXRoaXMgfHwgIXRoaXMuY2FsbCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgICBgW3J2LSR7YmluZGluZy50eXBlfT1cIiR7YmluZGluZy5rZXlwYXRofVwiXSBFdmVudCBoYW5kbGVyIFwiJHtiaW5kaW5nLmtleXBhdGh9XCIgbm90IGZvdW5kIVwiYFxuICAgICAgICApO1xuICAgICAgICBjb25zb2xlLmVycm9yKGJpbmRpbmcsIGVsKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbChzZWxmLCBldmVudCwgYmluZGluZy52aWV3Lm1vZGVscywgZWwpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjdXN0b20gZWxlbWVudCBpcyBmaXJzdCBjb25uZWN0ZWQgdG8gdGhlIGRvY3VtZW50J3MgRE9NLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIC8vIGNvbnNvbGUud2FybignY29ubmVjdGVkQ2FsbGJhY2sgY2FsbGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjdXN0b20gZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgLy8gaWYgKHRoaXMuYm91bmQgJiYgdGhpcy52aWV3KSB7XG4gICAgLy8gICAvLyBJTVBPUlRBTlQgUk9VVEUgRklYTUUsIGlmIHdlIHVuYmluZCB0aGUgY29tcG9uZW50IHRoZW4gaXQgd2lsbCBubyBsb25nZXIgd29yayBpZiBpdCBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUgYW5kIHRoZSBjb25uZWN0ZWRDYWxsYmFjayBpcyBjYWxsZWRcbiAgICAvLyAgIC8vIGJlY2F1c2UgdGhlIHJpYmEgYXR0cmlidXRlcyBhcmUgcmVtb3ZlZC4gV2UgbmVlZCBhIHNvbHV0aW9uIGZvciB0aGF0LCBtYXliZSB3ZSBkbyBub3QgcmVtb3ZlIHRoZSBhdHRyaWJ1dGVzIG9yIHdlIHJlY3JlYXRlIHRoZSBhdHRyaWJ1dGVzXG4gICAgLy8gICAvLyBTZWUgdmlldyBiaW5kIC8gdW5iaW5kIG1ldGhvZHMgZm9yIHRoYXQuXG4gICAgLy8gICAvLyBvbmx5IHVuYmluZCBpZiBjYWNoZSBpcyBub3QgZW5hYmxlZD9cbiAgICAvLyAgIHRoaXMudW5iaW5kKCk7XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY3VzdG9tIEVsZW1lbnQgbWV0aG9kXG4gICAqIEludm9rZWQgd2hlbiBvbmUgb2YgdGhlIGN1c3RvbSBlbGVtZW50J3MgYXR0cmlidXRlcyBpcyBhZGRlZCwgcmVtb3ZlZCwgb3IgY2hhbmdlZC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIG9sZFZhbHVlXG4gICAqIEBwYXJhbSBuZXdWYWx1ZVxuICAgKiBAcGFyYW0gbmFtZXNwYWNlXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIC8vIHRoaXMuZGVidWcoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIiwgYXR0cmlidXRlTmFtZSwgbmV3VmFsdWUpO1xuICAgIGlmIChcbiAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVjayAmJlxuICAgICAgdGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXNUb0NoZWNrW2F0dHJpYnV0ZU5hbWVdXG4gICAgKSB7XG4gICAgICB0aGlzLm9ic2VydmVkQXR0cmlidXRlc1RvQ2hlY2tbYXR0cmlidXRlTmFtZV0uaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIG5ld1ZhbHVlID0gdGhpcy5wYXJzZUF0dHJpYnV0ZShuZXdWYWx1ZSk7XG5cbiAgICBjb25zdCBwYXJzZWRBdHRyaWJ1dGVOYW1lID0gY2FtZWxDYXNlKGF0dHJpYnV0ZU5hbWUpO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUgJiYgdGhpcy5zY29wZVtwYXJzZWRBdHRyaWJ1dGVOYW1lXSkge1xuICAgICAgb2xkVmFsdWUgPSB0aGlzLnNjb3BlW3BhcnNlZEF0dHJpYnV0ZU5hbWVdO1xuICAgIH1cblxuICAgIC8vIGF1dG9tYXRpY2FsbHkgaW5qZWN0IG9ic2VydmVkIGF0dHJpYnV0ZXMgdG8gdmlldyBzY29wZVxuICAgIHRoaXMuc2NvcGVbcGFyc2VkQXR0cmlidXRlTmFtZV0gPSBuZXdWYWx1ZTtcblxuICAgIC8vIGNhbGwgY3VzdG9tIGF0dHJpYnV0ZSBjaGFuZ2VkIGNhbGxiYWNrIHdpdGggcGFyc2VkIHZhbHVlc1xuICAgIHRoaXMucGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgcGFyc2VkQXR0cmlidXRlTmFtZSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWUsXG4gICAgICBuYW1lc3BhY2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbWlsYXIgdG8gYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIGJ1dCBhdHRyaWJ1dGUgYXJndW1lbnRzIGFyZSBhbHJlYWR5IHBhcnNlZCBhcyB0aGV5IGFyZSBzdG9yZWQgaW4gdGhlIHNjb3BlXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lXG4gICAqIEBwYXJhbSBvbGRWYWx1ZVxuICAgKiBAcGFyYW0gbmV3VmFsdWVcbiAgICogQHBhcmFtIG5hbWVzcGFjZVxuICAgKi9cbiAgcHJvdGVjdGVkIHBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsXG4gICAgb2xkVmFsdWU6IGFueSxcbiAgICBuZXdWYWx1ZTogYW55LFxuICAgIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICB0aGlzLmRlYnVnKFxuICAgICAgXCJwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgY2FsbGVkXCIsXG4gICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgb2xkVmFsdWUsXG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIG5hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIG9uZSBvZiB0aGUgY3VzdG9tIGVsZW1lbnQncyBhdHRyaWJ1dGVzIGlzIGFkZGVkLCByZW1vdmVkLCBvciBjaGFuZ2VkLlxuICAgKiBOb3RlOiBOb3Qgc3VwcG9ydGVkIG9uIHBvbHlmaWxsOiBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMja25vd24tYnVncy1hbmQtbGltaXRhdGlvbnNcbiAgICogQHBhcmFtIG9sZERvY3VtZW50XG4gICAqIEBwYXJhbSBuZXdEb2N1bWVudFxuICAgKi9cbiAgcHJvdGVjdGVkIGFkb3B0ZWRDYWxsYmFjayhvbGREb2N1bWVudDogRG9jdW1lbnQsIG5ld0RvY3VtZW50OiBEb2N1bWVudCkge1xuICAgIHRoaXMuZGVidWcoXCJhZG9wdGVkQ2FsbGJhY2sgY2FsbGVkXCIsIG9sZERvY3VtZW50LCBuZXdEb2N1bWVudCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgbG9hZFRlbXBsYXRlKCk6IFByb21pc2U8XG4gICAgSnN4RWxlbWVudCB8IEhUTUxFbGVtZW50IHwgc3RyaW5nIHwgbnVsbFxuICA+IHtcbiAgICBpZiAodGhpcy50ZW1wbGF0ZUxvYWRlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gdGhpcy5kZWJ1ZyhcInRlbXBsYXRlIGFscmVhZHkgbG9hZGVkXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGVzKCkpIHtcbiAgICAgIHRoaXMuZGVidWcoXCJOb3QgYWxsIHJlcXVpcmVkIGF0dHJpYnV0ZXMgYXJlIHNldCB0byBsb2FkIHRoZSB0ZW1wbGF0ZVwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRoaXMudGVtcGxhdGVMb2FkZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLnRlbXBsYXRlKCk7XG5cbiAgICAvLyBpZiBpbm5lckhUTUwgaXMgbnVsbCB0aGlzIGNvbXBvbmVudCB1c2VzIHRoZSBpbm5lckhUTUwgd2hpY2ggaGUgYWxyZWFkeSBoYXMhXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRlbXBsYXRlIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgICAgICB9IGVsc2UgaWYgKCh0ZW1wbGF0ZSBhcyBKc3hFbGVtZW50KS50YWcpIHtcbiAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IHJlbmRlckVsZW1lbnQodGVtcGxhdGUgYXMgSnN4RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50ZW1wbGF0ZUxvYWRlZCA9IGZhbHNlO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZVRlbXBsYXRlKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gdGhpcy5kZWJ1ZygnYmVmb3JlVGVtcGxhdGUnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBhZnRlclRlbXBsYXRlKFxuICAgIHRlbXBsYXRlOiBKc3hFbGVtZW50IHwgSFRNTEVsZW1lbnQgfCBzdHJpbmcgfCBudWxsXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5kZWJ1ZyhcImFmdGVyVGVtcGxhdGVcIiwgdGVtcGxhdGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIG9uUmVhZHkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyB0aGlzLmRlYnVnKCdvblJlYWR5JywgdGhpcy5ib3VuZCk7XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZXMgYSBvYmplY3Qga2V5cGF0aCBpbiB0aGUgc2NvcGVcbiAgICogQHBhcmFtIGtleXBhdGhcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBwdWJsaWMgb2JzZXJ2ZShrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFjayk6IE9ic2VydmVyIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKHRoaXMuc2NvcGUsIGtleXBhdGgsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyBhIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBwdWJsaWMgb2JzZXJ2ZUF0dHJpYnV0ZShcbiAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IE9ic2VydmVyU3luY0NhbGxiYWNrXG4gICk6IE9ic2VydmVyIHtcbiAgICBjb25zdCBwYXJzZWRBdHRyaWJ1dGVOYW1lID0gY2FtZWxDYXNlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIHJldHVybiB0aGlzLm9ic2VydmUocGFyc2VkQXR0cmlidXRlTmFtZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIERpcmVjdGx5IHNldCBhIGF0dHJpYnV0ZSB2YWx1ZSBpbiB0aGUgc2NvcGUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIG1lYW50IHRvIGJlIGNhbGxlZCBmcm9tIHRoZSBvdXRzaWRlLCBlLmcuIGZyb20gYSBiaW5kZXIgb3IgYW5vdGhlciBjb21wb25lbnQuXG4gICAqIEBub3RlIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW4gdGhlIGNvbXBvbmVudEF0dHJpYnV0ZUJpbmRlclxuICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICAgKiBAcGFyYW0gbmV3VmFsdWVcbiAgICogQHBhcmFtIG5hbWVzcGFjZVxuICAgKi9cbiAgcHVibGljIHNldEJpbmRlckF0dHJpYnV0ZShcbiAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICkge1xuICAgIGNvbnN0IHBhcnNlZEF0dHJpYnV0ZU5hbWUgPSBjYW1lbENhc2UoYXR0cmlidXRlTmFtZSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnNjb3BlW3BhcnNlZEF0dHJpYnV0ZU5hbWVdO1xuICAgIHRoaXMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgbmFtZXNwYWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXJlY3RseSBnZXQgYSBhdHRyaWJ1dGUgdmFsdWUgZnJvbSB0aGUgc2NvcGUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIG1lYW50IHRvIGJlIGNhbGxlZCBmcm9tIHRoZSBvdXRzaWRlLCBlLmcuIGZyb20gYSBiaW5kZXIgb3IgYW5vdGhlciBjb21wb25lbnQuXG4gICAqIEBub3RlIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW4gdGhlIGNvbXBvbmVudEF0dHJpYnV0ZUJpbmRlclxuICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcHVibGljIGdldEJpbmRlckF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXJzZWRBdHRyaWJ1dGVOYW1lID0gY2FtZWxDYXNlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zY29wZVtwYXJzZWRBdHRyaWJ1dGVOYW1lXTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhbGwgYXR0cmlidXRlcyBhbmQgY2FsbHMgdGhlIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayBmb3IgZWFjaCBhdHRyaWJ1dGUuXG4gICAqIFBsZWFzZSBub3RlOiBOb3JtYWxseSB0aGUgYnJvd3NlciBjYWxscyB0aGUgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIGZvciB5b3VcbiAgICovXG4gIHByb3RlY3RlZCBsb2FkQXR0cmlidXRlcyhvYnNlcnZlZEF0dHJpYnV0ZXM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcbiAgICBmb3IgKGNvbnN0IGkgaW4gYXR0cmlidXRlcykge1xuICAgICAgY29uc3QgYXR0cmlidXRlOiBOb2RlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGUubm9kZU5hbWU7XG4gICAgICBpZiAob2JzZXJ2ZWRBdHRyaWJ1dGVzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gYXR0cmlidXRlLm5vZGVWYWx1ZTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgdW5kZWZpbmVkLCBuZXdWYWx1ZSwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gb2YgY29tcG9uZW50cyByZXBsYWNlcyB0aGUgb2xkIGNvbXBvbmVudHMgb2Ygcml2ZXRzIGZvbGxvd2luZyB0aGUgV2ViIENvbXBvbmVudHMgdjEgc3BlY3NcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL1dlYl9Db21wb25lbnRzL1VzaW5nX2N1c3RvbV9lbGVtZW50c1xuICovXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uL3ZpZXcuanNcIjtcbmltcG9ydCB7IFJpYmEgfSBmcm9tIFwiLi4vcmliYS5qc1wiO1xuaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIi4uL2JpbmRlci5qc1wiO1xuaW1wb3J0IHsgQmFzaWNDb21wb25lbnQgfSBmcm9tIFwiLi9iYXNpYy1jb21wb25lbnQuanNcIjtcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudExpZmVjeWNsZUV2ZW50RGF0YSB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgQmFzaWNDb21wb25lbnQge1xuICBwcm90ZWN0ZWQgdmlldz86IFZpZXcgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIHJpYmE/OiBSaWJhO1xuICAvKiogdHJ1ZSB3aGVuIGJpbmRpbmcgaXMgaW4gcHJvZ3Jlc3MgKi9cbiAgcHJvdGVjdGVkIF9iaW5kcyA9IGZhbHNlO1xuICAvKiogdHJ1ZSB3aGVuIGJpbmRpbmcgaXMgZG9uZSAqL1xuICBwcm90ZWN0ZWQgX2JvdW5kID0gZmFsc2U7XG4gIC8qKiB0cnVlIHdoZW4gY29tcG9uZW50IGlzIGNvbm5lY3RlZCB0byB0aGUgZG9tICovXG4gIHByb3RlY3RlZCBfY29ubmVjdGVkID0gZmFsc2U7XG4gIC8qKiB0cnVlIHdoZW4gY29tcG9uZW50IGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBkb20gKi9cbiAgcHJvdGVjdGVkIF9kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGxpZmVjeWNsZUV2ZW50cyA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZShcImxpZmVjeWNsZVwiKTtcblxuICAvKiogdHJ1ZSB3aGVuIGJpbmRpbmcgaXMgaW4gcHJvZ3Jlc3MgKi9cbiAgcHVibGljIGdldCBiaW5kcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluZHM7XG4gIH1cblxuICAvKiogdHJ1ZSB3aGVuIGJpbmRpbmcgaXMgZG9uZSAqL1xuICBwdWJsaWMgZ2V0IGJvdW5kKCkge1xuICAgIHJldHVybiB0aGlzLl9ib3VuZDtcbiAgfVxuXG4gIC8qKiB0cnVlIHdoZW4gY29tcG9uZW50IGlzIGNvbm5lY3RlZCB0byB0aGUgZG9tICovXG4gIHB1YmxpYyBnZXQgY29ubmVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWQ7XG4gIH1cblxuICAvKiogdHJ1ZSB3aGVuIGNvbXBvbmVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9tICovXG4gIHB1YmxpYyBnZXQgZGlzY29ubmVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNjb25uZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogSWYgdHJ1ZSB0aGUgY29tcG9uZW50IHdpbGwgYXV0b21hdGljYWxseSBiaW5kIHRoZSBjb21wb25lbnQgdG8gcmliYSBpZiBhbGwgcmVxdWlyZWQgYXR0cmlidXRlcyBhcmUgc2V0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubGlmZWN5Y2xlRXZlbnRzLnRyaWdnZXIoXG4gICAgICBcIkNvbXBvbmVudDpjb25zdHJ1Y3RvclwiLFxuICAgICAgdGhpcy5nZXRMaWZlY3ljbGVFdmVudERhdGEoKVxuICAgICk7XG4gICAgdGhpcy5saWZlY3ljbGVFdmVudHMub24oXG4gICAgICBcIkNvbXBvbmVudExpZmVjeWNsZTphbGxCb3VuZFwiLFxuICAgICAgdGhpcy5hZnRlckFsbEJpbmQsXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBpbml0KG9ic2VydmVkQXR0cmlidXRlczogc3RyaW5nW10pIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc3VwZXIuaW5pdChvYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICAgICAgdGhpcy5saWZlY3ljbGVFdmVudHMudHJpZ2dlcihcbiAgICAgICAgXCJDb21wb25lbnQ6aW5pdFwiLFxuICAgICAgICB0aGlzLmdldExpZmVjeWNsZUV2ZW50RGF0YSgpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuYmluZElmUmVhZHkoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50aHJvdyhlcnJvciBhcyBFcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHRocm93IGNyaXRpY2FsIGVycm9ycyB3aXRoaW4gdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAqIEBtZW1iZXJvZiBDb21wb25lbnRcbiAgICovXG4gIHByb3RlY3RlZCB0aHJvdyhlcnJvcjogYW55KSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFske3RoaXMudGFnTmFtZX1dICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgdGhpcy5saWZlY3ljbGVFdmVudHMudHJpZ2dlcihcbiAgICAgIFwiQ29tcG9uZW50OmVycm9yXCIsXG4gICAgICBlcnJvcixcbiAgICAgIHRoaXMuZ2V0TGlmZWN5Y2xlRXZlbnREYXRhKClcbiAgICApO1xuICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIGBhdXRvYmluZGAgaXMgdHJ1ZSB0aGlzIGNvbXBvbmVudCB3aWxsIGJpbmQgcmliYSBhdXRvbWF0aWNhbGx5IGluIHRoaXMgY29tcG9uZW50IGlmIGFsbCBhbGwgcGFzc2VkIG9ic2VydmVkIGFuZCByZXF1aXJlZCBhdHRyaWJ1dGVzIGFyZSBpbml0aWFsaXplZFxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGJpbmRJZlJlYWR5KCkge1xuICAgIC8qKlxuICAgICAqIEFmdGVyIGFsbCByZXF1aXJlZCBhbmQgcGFzc2VkIGF0dHJpYnV0ZXMgYXJlIHNldCB3ZSBsb2FkIHRoZSB0ZW1wbGF0ZSBhbmQgYmluZCB0aGUgY29tcG9uZW50XG4gICAgICovXG4gICAgaWYgKHRoaXMucmVhZHkoKSkge1xuICAgICAgYXdhaXQgdGhpcy5iZWZvcmVUZW1wbGF0ZSgpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLmxvYWRUZW1wbGF0ZSgpO1xuICAgICAgYXdhaXQgdGhpcy5hZnRlclRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIGlmICh0aGlzLmF1dG9iaW5kKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYmluZCgpO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5vblJlYWR5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGVidWcoXG4gICAgICBgTm90IGFsbCByZXF1aXJlZCBvciBwYXNzZWQgYXR0cmlidXRlcyBhcmUgc2V0IHRvIGxvYWQgYW5kIGJpbmQgdGhlIHRlbXBsYXRlYCxcbiAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzVG9DaGVjayxcbiAgICAgIHRoaXMuc2NvcGVcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKiBPbmx5IGludGVybmFsIHVzZWQgKi9cbiAgcHJpdmF0ZSBhc3luYyBfYmVmb3JlQmluZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuX2JpbmRzID0gdHJ1ZTtcbiAgICB0aGlzLmRlYnVnKFwiU3RhcnQgdG8gYmluZCBSaWJhXCIpO1xuICAgIHRoaXMubGlmZWN5Y2xlRXZlbnRzLnRyaWdnZXIoXG4gICAgICBcIkNvbXBvbmVudDpiZWZvcmVCaW5kXCIsXG4gICAgICB0aGlzLmdldExpZmVjeWNsZUV2ZW50RGF0YSgpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBVc2VkIHRvIGhhbmRsZSBzdHVmZiBiZWZvcmUgYmluZGluZyBzdGFydHMgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyB0aGlzLmRlYnVnKFwiYmVmb3JlQmluZFwiLCB0aGlzLnNjb3BlKTtcbiAgfVxuXG4gIC8qKiBPbmx5IGludGVybmFsIHVzZWQgKi9cbiAgcHJpdmF0ZSBhc3luYyBfYWZ0ZXJCaW5kKCk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5fYmluZHMgPSBmYWxzZTtcbiAgICB0aGlzLl9ib3VuZCA9IHRydWU7XG4gICAgdGhpcy5saWZlY3ljbGVFdmVudHMudHJpZ2dlcihcbiAgICAgIFwiQ29tcG9uZW50OmFmdGVyQmluZFwiLFxuICAgICAgdGhpcy5nZXRMaWZlY3ljbGVFdmVudERhdGEoKVxuICAgICk7XG4gIH1cblxuICAvKiogVXNlZCB0byBoYW5kbGUgc3R1ZmYgYWZ0ZXIgYmluZGluZyBpcyBkb25lICovXG4gIHByb3RlY3RlZCBhc3luYyBhZnRlckJpbmQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyB0aGlzLmRlYnVnKFwiYWZ0ZXJCaW5kXCIsIHRoaXMuc2NvcGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciBjb21wb25lbnQgYmluZGluZyBpcyBkb25lIGZvciBhbGwgY3VycmVudCBjb21wb25lbnRzLlxuICAgKiBQbGVhc2Ugbm90ZTogdGhpcyBtZXRob2QgaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgYSByb3V0ZSBjaGFuZ2VzLCBzbyBiZSBjYXJlZnVsIHdpdGggdGhpcyBtZXRob2QuXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJBbGxCaW5kKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gdGhpcy5kZWJ1ZyhcImFmdGVyQmluZFwiLCB0aGlzLnNjb3BlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRMaWZlY3ljbGVFdmVudERhdGEoKSB7XG4gICAgY29uc3QgZGF0YTogQ29tcG9uZW50TGlmZWN5Y2xlRXZlbnREYXRhID0ge1xuICAgICAgdGFnTmFtZTogdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAvLyBzY29wZTogdGhpcy5zY29wZSxcbiAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgIC8vIGlkOiB0aGlzLmlkLFxuICAgIH07XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0byBsaXN0ZW4gZm9yIHB1Ymxpc2ggYmluZGVyIGV2ZW50IGZvciB0d28td2F5LWJpbmRpbmcgaW4gd2ViIGNvbXBvbmVudHNcbiAgICovXG4gIC8vIHByb3RlY3RlZCBwdWJsaXNoKG5hbWU6IHN0cmluZywgbmV3VmFsdWU6IGFueSwgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsKSB7XG4gIC8vICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAvLyAgICAgbmV3IEN1c3RvbUV2ZW50KFwicHVibGlzaC1iaW5kZXItY2hhbmdlOlwiICsgbmFtZSwge1xuICAvLyAgICAgICBkZXRhaWw6IHtcbiAgLy8gICAgICAgICBuYW1lLFxuICAvLyAgICAgICAgIG5ld1ZhbHVlLFxuICAvLyAgICAgICAgIG5hbWVzcGFjZTogbnVsbCwgLy8gVE9ET1xuICAvLyAgICAgICB9LFxuICAvLyAgICAgfSlcbiAgLy8gICApO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY3VzdG9tIEVsZW1lbnQgbWV0aG9kXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY3VzdG9tIGVsZW1lbnQgaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIGRvY3VtZW50J3MgRE9NLlxuICAgKi9cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgLy8gSU1QT1JUQU5UIFJPVVRFIEZJWE1FLCBpZiB3ZSB1bmJpbmQgdGhlIGNvbXBvbmVudCB0aGVuIGl0IHdpbGwgbm8gbG9uZ2VyIHdvcmsgaWYgaXQgaXMgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlIGFuZCB0aGUgY29ubmVjdGVkQ2FsbGJhY2sgaXMgY2FsbGVkXG4gICAgICAvLyBiZWNhdXNlIHRoZSByaWJhIGF0dHJpYnV0ZXMgYXJlIHJlbW92ZWQuIFdlIG5lZWQgYSBzb2x1dGlvbiBmb3IgdGhhdCwgbWF5YmUgd2UgZG8gbm90IHJlbW92ZSB0aGUgYXR0cmlidXRlcyBvciB3ZSByZWNyZWF0ZSB0aGUgYXR0cmlidXRlc1xuICAgICAgLy8gU2VlIHZpZXcgYmluZCAvIHVuYmluZCBtZXRob2RzIGZvciB0aGF0LlxuICAgICAgLy8gb25seSB1bmJpbmQgaWYgY2FjaGUgaXMgbm90IGVuYWJsZWQ/XG4gICAgICAvLyBpZiAodGhpcy5fYmluZHMgJiYgdGhpcy52aWV3KSB7XG4gICAgICAvLyAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLmxpZmVjeWNsZUV2ZW50cy50cmlnZ2VyKFxuICAgICAgICBcIkNvbXBvbmVudDpkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgdGhpcy5nZXRMaWZlY3ljbGVFdmVudERhdGEoKVxuICAgICAgKTtcbiAgICAgIHRoaXMubGlmZWN5Y2xlRXZlbnRzLm9mZihcbiAgICAgICAgXCJDb21wb25lbnRMaWZlY3ljbGU6YWxsQm91bmRcIixcbiAgICAgICAgdGhpcy5hZnRlckFsbEJpbmQsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMudGhyb3coZXJyb3IgYXMgRXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGN1c3RvbSBlbGVtZW50IGlzIGZpcnN0IGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLmxpZmVjeWNsZUV2ZW50cy50cmlnZ2VyKFxuICAgICAgICBcIkNvbXBvbmVudDpjb25uZWN0ZWRcIixcbiAgICAgICAgdGhpcy5nZXRMaWZlY3ljbGVFdmVudERhdGEoKVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50aHJvdyhlcnJvciBhcyBFcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY3VzdG9tIEVsZW1lbnQgbWV0aG9kXG4gICAqIEludm9rZWQgd2hlbiBvbmUgb2YgdGhlIGN1c3RvbSBlbGVtZW50J3MgYXR0cmlidXRlcyBpcyBhZGRlZCwgcmVtb3ZlZCwgb3IgY2hhbmdlZC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIG9sZFZhbHVlXG4gICAqIEBwYXJhbSBuZXdWYWx1ZVxuICAgKiBAcGFyYW0gbmFtZXNwYWNlXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHRyeSB7XG4gICAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICAgIG9sZFZhbHVlLFxuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5iaW5kSWZSZWFkeSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnRocm93KGVycm9yIGFzIEVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXh0cmEgY2FsbCBmb3JtYXR0ZXIgdG8gYXZvaWQgdGhlIFwidGhpc1wiIGNvbnRleHQgcHJvYmxlbVxuICAgKi9cbiAgcHJvdGVjdGVkIGNhbGxGb3JtYXR0ZXJIYW5kbGVyKHNlbGY6IHRoaXMpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcImNhbGxcIixcbiAgICAgIHJlYWQ6IChmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGlmICghZm4pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgWyR7c2VsZi50YWdOYW1lfV0gQ2FuIG5vdCB1c2UgXCJjYWxsXCIgZm9ybWF0dGVyOiBmbiBpcyB1bmRlZmluZWQhYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhIGFyZ3MgZm9ybWF0dGVyIHRvIGF2b2lkIHRoZSBcInRoaXNcIiBjb250ZXh0IHByb2JsZW1cbiAgICpcbiAgICogU2V0cyBhcmd1bWVudHMgdG8gYSBmdW5jdGlvbiB3aXRob3V0IGRpcmVjdGx5IGNhbGwgdGhlbVxuICAgKiBAcGFyYW0gZm4gVGhlIGZ1bmN0aW9uIHlvdSB3aXNoIHRvIGNhbGxcbiAgICogQHBhcmFtIGFyZ3MgdGhlIHBhcmFtZXRlcnMgeW91IHdpc2ggdG8gY2FsbCB0aGUgZnVuY3Rpb24gd2l0aFxuICAgKi9cbiAgcHJvdGVjdGVkIGFyZ3NGb3JtYXR0ZXJIYW5kbGVyKHNlbGY6IHRoaXMpOiBGb3JtYXR0ZXIge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcImFyZ3NcIixcbiAgICAgIHJlYWQ6IChmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIC4uLmZuQXJnczogYW55W10pID0+IHtcbiAgICAgICAgcmV0dXJuIChldmVudDogRXZlbnQsIHNjb3BlOiBhbnksIGVsOiBIVE1MRWxlbWVudCwgYmluZGluZzogQmluZGVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFmbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgWyR7c2VsZi50YWdOYW1lfV0gQ2FuIG5vdCB1c2UgXCJhcmdzXCIgZm9ybWF0dGVyOiBmbiBpcyB1bmRlZmluZWQhYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhcHBlbmQgdGhlIGV2ZW50IGhhbmRsZXIgYXJncyB0byBwYXNzZWQgYXJnc1xuICAgICAgICAgIGZuQXJncy5wdXNoKGV2ZW50KTtcbiAgICAgICAgICBmbkFyZ3MucHVzaChzY29wZSk7XG4gICAgICAgICAgZm5BcmdzLnB1c2goZWwpO1xuICAgICAgICAgIGZuQXJncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBmbkFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJpbmQoKSB7XG4gICAgaWYgKHRoaXMuYmluZHMgfHwgdGhpcy5ib3VuZCkge1xuICAgICAgLy8gdGhpcy5kZWJ1ZyhcImNvbXBvbmVudCBhbHJlYWR5IGJvdW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXMudmlldztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZXMoKSkge1xuICAgICAgdGhpcy5kZWJ1ZyhcIk5vdCBhbGwgcmVxdWlyZWQgYXR0cmlidXRlcyBhcmUgc2V0IGZvciBiaW5kXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLl9iZWZvcmVCaW5kKCk7XG4gICAgICBhd2FpdCB0aGlzLmJlZm9yZUJpbmQoKTtcblxuICAgICAgdGhpcy5yaWJhID0gbmV3IFJpYmEoKTtcbiAgICAgIHRoaXMudmlldyA9IHRoaXMuZ2V0VmlldygpO1xuICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICB0aGlzLnNjb3BlID0gdGhpcy52aWV3Lm1vZGVscztcbiAgICAgICAgdGhpcy52aWV3LmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5fYWZ0ZXJCaW5kKCk7XG4gICAgICBhd2FpdCB0aGlzLmFmdGVyQmluZCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLl9iaW5kcyA9IGZhbHNlO1xuICAgICAgdGhpcy5fYm91bmQgPSBmYWxzZTtcbiAgICAgIHRoaXMudGhyb3coZXJyb3IgYXMgRXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnZpZXc7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0VmlldygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgdmlld09wdGlvbnMgPSB0aGlzLnJpYmE/LmdldFZpZXdPcHRpb25zKHtcbiAgICAgICAgaGFuZGxlcjogdGhpcy5ldmVudEhhbmRsZXIodGhpcyksXG4gICAgICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgICBjYWxsOiB0aGlzLmNhbGxGb3JtYXR0ZXJIYW5kbGVyKHRoaXMpLFxuICAgICAgICAgIGFyZ3M6IHRoaXMuYXJnc0Zvcm1hdHRlckhhbmRsZXIodGhpcyksXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKHZpZXdPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVmlldyhcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmNoaWxkTm9kZXMpLFxuICAgICAgICAgIHRoaXMuc2NvcGUsXG4gICAgICAgICAgdmlld09wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50aHJvdyhlcnJvciBhcyBFcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVuYmluZCgpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICB0aGlzLl9iaW5kcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9ib3VuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZpZXcudW5iaW5kKCk7XG4gICAgICAgIHRoaXMudmlldyA9IG51bGw7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMudGhyb3coZXJyb3IgYXMgRXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBidWlsZCgpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICB0aGlzLnZpZXcuYnVpbGQoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50aHJvdyhlcnJvciBhcyBFcnJvcik7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2ljLWNvbXBvbmVudC5qc1wiO1xuIiwiLy8gRG8gbm90IGV4cG9ydCBhYnN0cmFjdCBjb21wb25lbnRzOiBleHBvcnQgeyBUZW1wbGF0ZXNDb21wb25lbnQgfSBmcm9tIFwiLi90ZW1wbGF0ZXMvdGVtcGxhdGVzLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHt9O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQge1xuICBjYW1lbENhc2UsXG4gIHBhcnNlSnNvblN0cmluZyxcbiAgcGFyc2VUeXBlLFxufSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcblxuZXhwb3J0IHR5cGUgQXR0cmlidXRlVHlwZSA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZUF0dHJpYnV0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZT86IEF0dHJpYnV0ZVR5cGU7XG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgVGVtcGxhdGVBdHRyaWJ1dGVzID0gQXJyYXk8VGVtcGxhdGVBdHRyaWJ1dGU+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgaXRlbXM/OiBBcnJheTxhbnk+O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVtcGxhdGVzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHJvdGVjdGVkIHRlbXBsYXRlQXR0cmlidXRlczogVGVtcGxhdGVBdHRyaWJ1dGVzID0gW107XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlUmVhZHkgPSBmYWxzZTtcblxuICBwdWJsaWMgYWJzdHJhY3Qgc2NvcGU6IFNjb3BlO1xuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmFkZEl0ZW1zQnlUZW1wbGF0ZSgpO1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5yZW1vdmVUZW1wbGF0ZXMoKTtcbiAgICB0aGlzLmJpbmRJZlJlYWR5KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVhZHkoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnJlYWR5KCkgJiYgdGhpcy50ZW1wbGF0ZVJlYWR5O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBiZWZvcmUgZ2V0dGluZyBhdHRyaWJ1dGUgdmFsdWUsIHVzZSB0aGlzIG1ldGhvZCB0byB0cmFuc2Zvcm0gdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpZiB5b3Ugd2lzaFxuICAgKiBAcGFyYW0gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAqL1xuICBwcm90ZWN0ZWQgdHJhbnNmb3JtVGVtcGxhdGVBdHRyaWJ1dGUoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBhbnksXG4gICAgdHlwZT86IEF0dHJpYnV0ZVR5cGVcbiAgKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBcInRydWVcIjtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlPy50b1N0cmluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgcmV0dXJuIHBhcnNlSnNvblN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZVR5cGUodmFsdWUpLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBiZWZvcmUgZ2V0dGluZyBhbGwgYXR0cmlidXRlIHZhbHVlcywgdXNlIHRoaXMgbWV0aG9kIHRvIHRyYW5zZm9ybSB0aGUgYXR0cmlidXRlIHZhbHVlcyBpZiB5b3Ugd2lzaFxuICAgKiBAcGFyYW0gYXR0cmlidXRlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBhbnksIGluZGV4OiBudW1iZXIpIHtcbiAgICBhdHRyaWJ1dGVzLmluZGV4ID0gYXR0cmlidXRlcy5pbmRleCB8fCBpbmRleDtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRUZW1wbGF0ZUF0dHJpYnV0ZXMoXG4gICAgdHBsOiBIVE1MVGVtcGxhdGVFbGVtZW50IHwgSFRNTEVsZW1lbnQsXG4gICAgaW5kZXg6IG51bWJlclxuICApIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzOiBhbnkgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLnRlbXBsYXRlQXR0cmlidXRlcykge1xuICAgICAgY29uc3QgYXR0clZhbHVlID0gdHBsLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICBpZiAodHlwZW9mIGF0dHJWYWx1ZSAhPT0gXCJzdHJpbmdcIiAmJiBhdHRyaWJ1dGUucmVxdWlyZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBuZXcgRXJyb3IoYHRlbXBsYXRlIFwiJHthdHRyaWJ1dGUubmFtZX1cIiBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQhYClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbY2FtZWxDYXNlKGF0dHJpYnV0ZS5uYW1lKV0gPSB0aGlzLnRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlKFxuICAgICAgICAgIGF0dHJpYnV0ZS5uYW1lLFxuICAgICAgICAgIHRwbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlLm5hbWUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBpbmRleCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkSXRlbUJ5VGVtcGxhdGUoXG4gICAgdHBsOiBIVE1MVGVtcGxhdGVFbGVtZW50IHwgSFRNTEVsZW1lbnQsXG4gICAgaW5kZXg6IG51bWJlclxuICApIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRUZW1wbGF0ZUF0dHJpYnV0ZXModHBsLCBpbmRleCk7XG4gICAgY29uc3QgY29udGVudCA9IHRwbC5pbm5lckhUTUw7XG4gICAgaWYgKCF0aGlzLnNjb3BlLml0ZW1zKSB7XG4gICAgICB0aGlzLnNjb3BlLml0ZW1zID0gW107XG4gICAgfVxuICAgIHRoaXMuc2NvcGUuaXRlbXMucHVzaCh7IC4uLmF0dHJpYnV0ZXMsIGNvbnRlbnQgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkSXRlbXNCeVRlbXBsYXRlKCkge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbDxIVE1MVGVtcGxhdGVFbGVtZW50IHwgSFRNTEVsZW1lbnQ+KFxuICAgICAgXCJ0ZW1wbGF0ZSwgLnRlbXBsYXRlXCJcbiAgICApO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCB0cGwgPSB0ZW1wbGF0ZXNbaW5kZXhdO1xuXG4gICAgICB0aGlzLmFkZEl0ZW1CeVRlbXBsYXRlKHRwbCwgaW5kZXgpO1xuICAgIH1cbiAgICB0aGlzLnRlbXBsYXRlUmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbW92ZVRlbXBsYXRlcygpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRlbXBsYXRlRWxlbWVudCB8IEhUTUxFbGVtZW50PihcbiAgICAgIFwidGVtcGxhdGUsIC50ZW1wbGF0ZVwiXG4gICAgKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGVtcGxhdGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgdHBsID0gdGVtcGxhdGVzW2luZGV4XTtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQodHBsKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaGFzT25seVRlbXBsYXRlQ2hpbGRzKCkge1xuICAgIHJldHVybiAhQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKS5zb21lKFxuICAgICAgKGNoaWxkKSA9PlxuICAgICAgICBjaGlsZC5ub2RlTmFtZSAhPT0gXCJURU1QTEFURVwiICYmXG4gICAgICAgICFjaGlsZC5jbGFzc0xpc3Q/LmNvbnRhaW5zKFwidGVtcGxhdGVcIikgJiZcbiAgICAgICAgY2hpbGQubm9kZU5hbWUgIT09IFwiI3RleHRcIlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBGT1JNQVRURVJfQVJHUyA9IC9bXlxccyddK3wnKFteJ118J1teXFxzXSkqJ3xcIihbXlwiXXxcIlteXFxzXSkqXCIvZztcbmV4cG9ydCBjb25zdCBGT1JNQVRURVJfU1BMSVQgPSAvXFxzKy87XG4iLCJleHBvcnQgY29uc3QgVEVYVCA9IDA7XG5leHBvcnQgY29uc3QgQklORElORyA9IDE7XG5cbmV4cG9ydCBjb25zdCBERUNMQVJBVElPTl9TUExJVCA9XG4gIC8oKD86J1teJ10qJykqKD86KD86W158J10qKD86J1teJ10qJykrW158J10qKSt8W158XSspKXxeJC9nO1xuIiwiaW1wb3J0IHsgUmliYU1vZHVsZSwgQ29yZU1vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgYmluZGVycyBmcm9tIFwiLi9iaW5kZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBmb3JtYXR0ZXJzIGZyb20gXCIuL2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIHNlcnZpY2VzIGZyb20gXCIuL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBjb21wb25lbnRzIGZyb20gXCIuL2NvbXBvbmVudHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIGFkYXB0ZXJzIGZyb20gXCIuL2FkYXB0ZXJzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBjb3JlTW9kdWxlOiBSaWJhTW9kdWxlPENvcmVNb2R1bGVPcHRpb25zPiA9IHtcbiAgZm9ybWF0dGVycyxcbiAgYmluZGVycyxcbiAgc2VydmljZXMsXG4gIGNvbXBvbmVudHMsXG4gIGFkYXB0ZXJzLFxuICBpbml0KG9wdGlvbnMgPSB7fSkge1xuICAgIHNlcnZpY2VzLkNvcmVTZXJ2aWNlLnNldFNpbmdsZXRvbihvcHRpb25zKTtcblxuICAgIHdpbmRvdy5vbmVycm9yID0gKG1zZywgdXJsLCBsaW5lLCBjb2wsIGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKG1zZywgdXJsLCBsaW5lLCBjb2wsIGVycm9yKTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihldmVudCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG4iLCJpbXBvcnQge1xuICBpc1N0cmluZyxcbiAgaXNPYmplY3QsXG4gIGlzRGVmaW5lZCxcbiAgaXNOdW1iZXIsXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGFuIG9iamVjdCwgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5zIGFuIGluZGV4LCBvYmplY3QsIHByb3BlcnR5IG9yIHN1YnN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBjb250YWluc0Zvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJjb250YWluc1wiLFxuICByZWFkKHZhbHVlOiBzdHJpbmcgfCBhbnkgfCBhbnlbXSwgYXR0cjogc3RyaW5nIHwgbnVtYmVyLCBzZWFyY2g6IHN0cmluZykge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGF0dHIpID4gLTE7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcihhdHRyKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJbY29udGFpbnNGb3JtYXR0ZXJdIFRoZSBzZWNvbmQgcGFyYW1ldGVyIG11c3QgYmUgb2YgdHlwZSBudW1iZXIgZm9yIGFycmF5cyBidXQgaXMgXCIgK1xuICAgICAgICAgICAgdHlwZW9mIGF0dHJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF0dHIgPSBOdW1iZXIoYXR0cik7XG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIpKSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQoc2VhcmNoKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZVthdHRyXSA9PT0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5pbmNsdWRlcyhhdHRyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIpKSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQoc2VhcmNoKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZVthdHRyXSA9PT0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghaXNTdHJpbmcoYXR0cikpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgXCJbY29udGFpbnNGb3JtYXR0ZXJdIFRoZSBzZWNvbmQgcGFyYW1ldGVyIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcgZm9yIG9iamVjdHNcIiArXG4gICAgICAgICAgICAgICAgdHlwZW9mIGF0dHJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5pbmNsdWRlcyhTdHJpbmcoYXR0cikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBzaXplRm9ybWF0dGVyIH0gZnJvbSBcIi4vc2l6ZS5mb3JtYXR0ZXIuanNcIjtcblxuZXhwb3J0IGNvbnN0IGVtcHR5Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImVtcHR5XCIsXG4gIHJlYWQoYTogYW55W10gfCBzdHJpbmcpIHtcbiAgICByZXR1cm4gc2l6ZUZvcm1hdHRlci5yZWFkKGEpIDw9IDA7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZ2V0LmZvcm1hdHRlci5qc1wiO1xuXG4vKipcbiAqIEFycmF5IGZvcm1hdHRlciB0byBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImZpcnN0XCIsXG4gIHJlYWQodmFsdWU6IGFueSB8IGFueVtdIHwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlci5yZWFkKHZhbHVlLCAwKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBpc09iamVjdCwgaXNTdHJpbmcsIGlzTnVtYmVyIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBHZXQgcHJvcGVydHkgb2Ygb2JqZWN0IG9yIGdldCBpdGVtIGJ5IGluZGV4IG9mIGFycmF5XG4gKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Rlci1Pbi9jZGFmZTkwODg0N2UyYjg4MjY5MVxuICovXG5leHBvcnQgY29uc3QgZ2V0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImdldFwiLFxuICByZWFkKHZhbHVlOiBhbnkgfCBhbnlbXSB8IHN0cmluZywga2V5OiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgaWYgKGlzTnVtYmVyKGtleSkpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSBhcyBzdHJpbmcpLmNoYXJBdChrZXkgYXMgbnVtYmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG59O1xuIiwiLy8gcHJvcGVydHkgLyBvYmplY3QgLyBhcnJheSBmb3JtYXR0ZXJzXG5leHBvcnQgeyBjb250YWluc0Zvcm1hdHRlciB9IGZyb20gXCIuL2NvbnRhaW5zLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZW1wdHlGb3JtYXR0ZXIgfSBmcm9tIFwiLi9lbXB0eS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGZpcnN0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZmlyc3QuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBnZXRGb3JtYXR0ZXIgfSBmcm9tIFwiLi9nZXQuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBpc0xhc3RGb3JtYXR0ZXIgfSBmcm9tIFwiLi9pcy1sYXN0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgbGFzdEZvcm1hdHRlciB9IGZyb20gXCIuL2xhc3QuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyByYW5kb21Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9yYW5kb20uZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyByYW5nZUZvcm1hdHRlciB9IGZyb20gXCIuL3JhbmdlLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgc2V0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vc2V0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgc2l6ZUZvcm1hdHRlciB9IGZyb20gXCIuL3NpemUuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBvdmVybGFwc0Zvcm1hdHRlciB9IGZyb20gXCIuL292ZXJsYXBzLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgam9pbkZvcm1hdHRlciB9IGZyb20gXCIuL2pvaW4uZm9ybWF0dGVyLmpzXCI7XG4iLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpbmRleCBpcyB0aGUgbGFzdCBpbmRleCBvZiB0aGUgYXJyYXkuIFJldHVybnMgZmFsc2UgaWYgaXQgaXMgbm90IHRoZSBsYXN0IGluZGV4LlxuICogYGBgXG4gKiAgPGRpdiBydi1lYWNoLWltYWdlPVwicHJvZHVjdC5pbWFnZXNcIiBydi1oaWRlPVwicHJvZHVjdC5pbWFnZXMgfCBsYXN0ICVpbWFnZSVcIj48L2Rpdj5cbiAqIGBgYFxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9vYmplY3RzL2Zvci1sb29wcyNmb3Jsb29wLWxhc3RcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTGFzdEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJpc0xhc3RcIixcbiAgcmVhZChhcnJheTogYW55W10sIGk6IG51bWJlcikge1xuICAgIHJldHVybiBhcnJheS5sZW5ndGggPT09IGkgKyAxO1xuICB9LFxufTtcbiIsIi8qKlxuICogSm9pbnMgdmFsdWUgd2l0aCBhIGdpdmVuIGRlbGltZXRlclxuICovXG5leHBvcnQgY29uc3Qgam9pbkZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJqb2luXCIsXG4gIHJlYWQodmFsdWU6IGFueVtdLCBkZWxpbWV0ZXI6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZS5qb2luKGRlbGltZXRlcik7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZ2V0LmZvcm1hdHRlci5qc1wiO1xuXG4vKipcbiAqIEFycmF5IGZvcm1hdHRlciB0byBnZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheVxuICovXG5leHBvcnQgY29uc3QgbGFzdEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJsYXN0XCIsXG4gIHJlYWQoYXJyYXk6IGFueVtdKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlci5yZWFkKGFycmF5LCBhcnJheS5sZW5ndGggLSAxKTtcbiAgfSxcbn07XG4iLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbiBhcnJheSBvdmVybGFwcyB3aXRoIGFub3RoZXIgYXJyYXkuXG4gKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Rlci1Pbi9jZGFmZTkwODg0N2UyYjg4MjY5MVxuICovXG5leHBvcnQgY29uc3Qgb3ZlcmxhcHNGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwib3ZlcmxhcHNcIixcbiAgcmVhZCh2YWx1ZTogYW55W10sIHNlYXJjaDogYW55W10pIHtcbiAgICBmb3IgKGNvbnN0IGEgb2YgdmFsdWUpIHtcbiAgICAgIGZvciAoY29uc3QgYiBvZiBzZWFyY2gpIHtcbiAgICAgICAgaWYgKGEuZXF1YWxzICYmIGEuZXF1YWxzKGIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIEdldHMgYmFjayByYW5kb20gdmFsdWUgb2YgYXJyYXlcbiAqIEBleGFtcGxlIDxkaXYgcnYtYWRkLWNsYXNzPSdcIltcImNvbC0yXCIsIFwiY29sLTNcIiwgXCJjb2wtNFwiLCBcImNvbC01XCIsIFwiY29sLTZcIl1cIiB8IHBhcnNlIHwgcmFuZG9tJz5cbiAqXG4gKiBPciBnZXRzIGJhY2sgYSByYW5kb24gbnVtYmVyXG4gKiBSYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgNjpcbiAqIEBleGFtcGxlIDxkaXYgcnYtYWRkLWNsYXNzPSc2IHwgcmFuZG9tJz5cbiAqIFJhbmRvbSBudW1iZXIgYmV0d2VlbiAxIGFuZCA2OlxuICogQGV4YW1wbGUgPGRpdiBydi1hZGQtY2xhc3M9JzYgfCByYW5kb20gMSc+XG4gKi9cbmV4cG9ydCBjb25zdCByYW5kb21Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwicmFuZG9tXCIsXG4gIHJlYWQoYXJyYXlPck1heE51bWJlcjogYW55LCBtaW4gPSAwKSB7XG4gICAgLy8gSWYgaXMgYXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheU9yTWF4TnVtYmVyKSkge1xuICAgICAgcmV0dXJuIGFycmF5T3JNYXhOdW1iZXJbXG4gICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5T3JNYXhOdW1iZXIubGVuZ3RoKVxuICAgICAgXTtcbiAgICB9XG4gICAgLy8gSWYgaXMgbnVtYmVyXG4gICAgaWYgKGlzTnVtYmVyKGFycmF5T3JNYXhOdW1iZXIpKSB7XG4gICAgICBjb25zdCBtYXggPSBhcnJheU9yTWF4TnVtYmVyIGFzIG51bWJlcjtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQXJyYXkgZm9ybWF0dGVyIHRvIGdldCBhIHN1YmFycmF5IGZyb20gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmdlRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInJhbmdlXCIsXG4gIHJlYWQoYXJyOiBhbnlbXSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICBzdGFydCA9IE51bWJlcihpc051bWJlcihzdGFydCkgPyBzdGFydCA6IDApO1xuICAgIGVuZCA9IE51bWJlcihpc051bWJlcihlbmQpID8gZW5kIDogYXJyLmxlbmd0aCAtIDEpO1xuICAgIGlmIChlbmQgPiBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGlmIChzdGFydCA+IGVuZCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyLnNsaWNlKE51bWJlcihzdGFydCB8fCAwKSwgMSArIGVuZCk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIFNldHMgcHJvcGVydHkgb2Ygb2JqZWN0LCBhcnJheSBvciB2YWx1ZVxuICogQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kZXItT24vY2RhZmU5MDg4NDdlMmI4ODI2OTFcbiAqL1xuZXhwb3J0IGNvbnN0IHNldEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJzZXRcIixcbiAgcmVhZChvYmo6IGFueSB8IGFueVtdLCBrZXk6IHN0cmluZyB8IG51bWJlciwgdmFsdWU/OiBhbnkpIHtcbiAgICAvLyB0aGUga2V5IGlzIHRoZSB2YWx1ZSBpZiB2YWx1ZSBpcyBub3Qgc2V0XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBrZXk7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KG9iaikgfHwgQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmogPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbn07XG4iLCIvKipcbiAqIFJldHVybnMgdGhlIHNpemUgb2YgYSBzdHJpbmcgKHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycykgb3IgYW4gYXJyYXkgKHRoZSBudW1iZXIgb2YgZWxlbWVudHMpLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL2FycmF5LWZpbHRlcnMjc2l6ZVxuICovXG5leHBvcnQgY29uc3Qgc2l6ZUZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJzaXplXCIsXG4gIHJlYWQodmFsdWU6IGFueVtdIHwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA/IHZhbHVlLmxlbmd0aCA6IDA7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuLyoqXG4gKiBhICYmIGJcbiAqL1xuZXhwb3J0IGNvbnN0IGFuZEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImFuZFwiLFxuICByZWFkKGE6IGJvb2xlYW4sIGI6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gYSAmJiBiO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9mb3JtYXR0ZXIuanNcIjtcbi8qKlxuICogYSA+PSBiICYmIGEgPD0gY1xuICovXG5leHBvcnQgY29uc3QgYmV0d2VlbkZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImJldHdlZW5cIixcbiAgcmVhZChudW06IG51bWJlciwgLi4ubnVtczogYW55W10pIHtcbiAgICByZXR1cm4gbnVtID49IG51bXNbMF0gJiYgbnVtIDw9IG51bXNbMV07XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuLyoqXG4gKiBlcXVhbCBvciBncmVhdGVyIHRoYW5cbiAqIGEgPj0gYlxuICovXG5leHBvcnQgY29uc3QgZWd0Rm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiZWd0XCIsXG4gIHJlYWQoYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcbiAgICByZXR1cm4gYSA+PSBiO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9mb3JtYXR0ZXIuanNcIjtcbi8qKlxuICogZXVxYWwgb3IgbG93ZXIgdGhhblxuICogYSA8PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBlbHRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJlbHRcIixcbiAgcmVhZChhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIHJldHVybiBhIDw9IGI7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuLyoqXG4gKiBhID09PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBlcUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImVxXCIsXG4gIHJlYWQoYTogYW55LCBiOiBhbnkpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZm9ybWF0dGVyLmpzXCI7XG4vKipcbiAqIGdyZWF0ZXIgdGhhblxuICogYSA+IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGd0Rm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiZ3RcIixcbiAgcmVhZChhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIHJldHVybiBhID4gYjtcbiAgfSxcbn07XG4iLCIvKipcbiAqIGNvbXBhcmUgZnVuY3Rpb25zXG4gKiBBZGQgdXNlZnVsIGdlbmVyYWwtcHVycG9zZSBmb3JtYXR0ZXJzIGZvciBSaXZldHMuanNcbiAqIFNvbWUgZm9ybWF0dGVycyBmcm9tIGNhcnQuanMgYW5kIHJpdmV0c2pzLXN0ZGxpYlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGlzY29sYWJzL2NhcnRqcy9cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21hdHRoaWV1cmlvbG8vcml2ZXRzanMtc3RkbGliXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9KdW1wTGlua05ldHdvcmsvc2hvcGlmeS1wcm9kdWN0anNcbiAqL1xuZXhwb3J0IHsgYW5kRm9ybWF0dGVyIH0gZnJvbSBcIi4vYW5kLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgYmV0d2VlbkZvcm1hdHRlciB9IGZyb20gXCIuL2JldHdlZW4uZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBlZ3RGb3JtYXR0ZXIgfSBmcm9tIFwiLi9lZ3QuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBlcUZvcm1hdHRlciB9IGZyb20gXCIuL2VxLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZ3RGb3JtYXR0ZXIgfSBmcm9tIFwiLi9ndC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG5lRm9ybWF0dGVyIH0gZnJvbSBcIi4vbmUuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBsdEZvcm1hdHRlciB9IGZyb20gXCIuL2x0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZWx0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZWx0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgb3JGb3JtYXR0ZXIgfSBmcm9tIFwiLi9vci5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG5vdEZvcm1hdHRlciB9IGZyb20gXCIuL25vdC5mb3JtYXR0ZXIuanNcIjtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9mb3JtYXR0ZXIuanNcIjtcbi8qKlxuICogbG93ZXIgdGhhblxuICogYSA8IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGx0Rm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwibHRcIixcbiAgcmVhZChhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIHJldHVybiBhIDwgYjtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZm9ybWF0dGVyLmpzXCI7XG4vKipcbiAqIGEgIT09IGJcbiAqL1xuZXhwb3J0IGNvbnN0IG5lRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwibmVcIixcbiAgcmVhZChhOiBhbnksIGI6IGFueSkge1xuICAgIHJldHVybiBhICE9PSBiO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9mb3JtYXR0ZXIuanNcIjtcbi8qKlxuICogIWFcbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcIm5vdFwiLFxuICByZWFkKGE6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gIWE7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuLyoqXG4gKiBhIHx8IGJcbiAqL1xuZXhwb3J0IGNvbnN0IG9yRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwib3JcIixcbiAgcmVhZChhOiBib29sZWFuLCBiOiBib29sZWFuKSB7XG4gICAgcmV0dXJuIGEgfHwgYjtcbiAgfSxcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9hcnJheS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcGFyZS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3BlY2lhbC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5nL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlL2luZGV4LmpzXCI7XG4iLCJpbXBvcnQgeyBqdXN0RGlnaXRzLCBpc051bWJlciB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogSnVzdCBnZXQgdGhlIGRpZ2l0cyBvZiBhIHN0cmluZywgdXNlZnVsIHRvIHJlbW92ZSBweCBmcm9tIGNzcyB2YWx1ZVxuICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTAwNjUzLzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpZ2l0c0Zvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJkaWdpdHNcIixcbiAgcmVhZChzdHI6IHN0cmluZykge1xuICAgIGlmIChpc051bWJlcihzdHIpKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4ganVzdERpZ2l0cyhzdHIpO1xuICB9LFxufTtcbiIsIi8qKlxuICogRGl2aWRlcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuIFRoZSBvdXRwdXQgaXMgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI2RpdmlkZWRfYnlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpdmlkZWRCeUZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJkaXZpZGVkQnlcIixcbiAgcmVhZChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikge1xuICAgIHJldHVybiBOdW1iZXIoYSkgLyBOdW1iZXIoYik7XG4gIH0sXG59O1xuIiwiLyoqXG4gKiBDaGVjayBpZiBhIG51bWJlciBpcyBldmVuIG9yIG5vdFxuICovXG5leHBvcnQgY29uc3QgZXZlbkZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJldmVuXCIsXG4gIHJlYWQobnVtOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbnVtICUgMiA9PT0gMDtcbiAgfSxcbn07XG4iLCIvKipcbiAqIEdyZWF0ZXN0IGNvbW1vbiBkaXZpc29yIChHQ0QpIHVzZWZ1bCB0byBjYWxjdWxhdGUgYSByYXRpb1xuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE4NjQ2NS8xNDY1OTE5XG4gKi9cbmNvbnN0IF9nY2QgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gYiA9PT0gMCA/IGEgOiBfZ2NkKGIsIGEgJSBiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnY2RGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiZ2NkXCIsXG4gIHJlYWQ6IF9nY2QsXG59O1xuIiwiLy8gbWF0aCBmb3JtYXR0ZXJzXG5leHBvcnQgeyBwbHVzRm9ybWF0dGVyIH0gZnJvbSBcIi4vcGx1cy5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG1pbnVzRm9ybWF0dGVyIH0gZnJvbSBcIi4vbWludXMuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyB0aW1lc0Zvcm1hdHRlciB9IGZyb20gXCIuL3RpbWVzLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZGl2aWRlZEJ5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZGl2aWRlZC1ieS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG1vZHVsb0Zvcm1hdHRlciB9IGZyb20gXCIuL21vZHVsby5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGdjZEZvcm1hdHRlciB9IGZyb20gXCIuL2djZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGV2ZW5Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9ldmVuLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgdW5ldmVuRm9ybWF0dGVyIH0gZnJvbSBcIi4vdW5ldmVuLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZGlnaXRzRm9ybWF0dGVyIH0gZnJvbSBcIi4vZGlnaXRzLmZvcm1hdHRlci5qc1wiO1xuIiwiLyoqXG4gKiBTdWJ0cmFjdHMgYSBudW1iZXIgZnJvbSBhbiBvdXRwdXQuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI21pbnVzXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51c0Zvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJtaW51c1wiLFxuICByZWFkKGE6IHN0cmluZyB8IG51bWJlciwgYjogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgcmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTtcbiAgfSxcbn07XG4iLCIvKipcbiAqIERpdmlkZXMgYW4gdmFsdWUgYnkgYSBudW1iZXIgYW5kIHJldHVybnMgdGhlIHJlbWFpbmRlci5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9tYXRoLWZpbHRlcnMjbW9kdWxvXG4gKi9cbmV4cG9ydCBjb25zdCBtb2R1bG9Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwibW9kdWxvXCIsXG4gIHJlYWQoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyKGEpICUgTnVtYmVyKGIpO1xuICB9LFxufTtcbiIsIi8qKlxuICogQWRkcyBhIG51bWJlciB0byBhbiB2YWx1ZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9tYXRoLWZpbHRlcnMjcGx1c1xuICovXG5leHBvcnQgY29uc3QgcGx1c0Zvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJwbHVzXCIsXG4gIHJlYWQoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyKGEpICsgTnVtYmVyKGIpO1xuICB9LFxufTtcbiIsIi8qKlxuICogTXVsdGlwbGllcyBhbiB2YWx1ZSBieSBhIG51bWJlci5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9tYXRoLWZpbHRlcnMjdGltZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHRpbWVzRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRpbWVzXCIsXG4gIHJlYWQoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyKGEpICogTnVtYmVyKGIpO1xuICB9LFxufTtcbiIsImV4cG9ydCBjb25zdCB1bmV2ZW5Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwidW5ldmVuXCIsXG4gIHJlYWQobnVtOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbnVtICUgMiAhPT0gMDtcbiAgfSxcbn07XG4iLCJpbXBvcnQgdHlwZSB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgRm9ybWF0dGVyRnVudGlvblBhcmFtIH0gZnJvbSBcIi4vY2FsbC5mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi8uLi9iaW5kZXIuanNcIjtcblxuLyoqXG4gKiBTZXRzIGFyZ3VtZW50cyB0byBhIGZ1bmN0aW9uIHdpdGhvdXQgZGlyZWN0bHkgY2FsbCB0aGVtXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIHJ2LW9uLWNsaWNrPVwic3VtIHwgYXJncyAxIDJcIj48L2J1dHRvbj5cbiAqIGBgYFxuICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0aGUgZXZlbnQgaGFuZGxlciBzaG91bGQgY2FsbFxuICogQHBhcmFtIGZuQXJncyB0aGUgcGFyYW1ldGVycyB5b3Ugd2lzaCB0byBnZXQgY2FsbGVkIHRoZSBmdW5jdGlvbiB3aXRoXG4gKi9cbmV4cG9ydCBjb25zdCBhcmdzRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiYXJnc1wiLFxuICByZWFkKGZuOiBGb3JtYXR0ZXJGdW50aW9uUGFyYW0sIC4uLmZuQXJnczogYW55W10pIHtcbiAgICByZXR1cm4gKGV2ZW50OiBFdmVudCwgc2NvcGU6IGFueSwgZWw6IEhUTUxFbGVtZW50LCBiaW5kZXI6IEJpbmRlcikgPT4ge1xuICAgICAgLy8gYXBwZW5kIHRoZSBldmVudCBoYW5kbGVyIGFyZ3MgdG8gcGFzc2VkIGFyZ3NcbiAgICAgIGZuQXJncy5wdXNoKGV2ZW50KTtcbiAgICAgIGZuQXJncy5wdXNoKHNjb3BlKTtcbiAgICAgIGZuQXJncy5wdXNoKGVsKTtcbiAgICAgIGZuQXJncy5wdXNoKGJpbmRlcik7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgZm5BcmdzKTtcbiAgICB9O1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gYnkgbmFtZSB3aXRoIGFyZ3VtZW50c1xuICogQHBhcmFtIG9iamVjdCBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGZ1bmN0aW9uIHlvdSB3aXNoIHRvIGNhbGxcbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB5b3Ugd2lzaCB0byBjYWxsXG4gKiBAcGFyYW0gYXJncyB0aGUgcGFyYW1ldGVycyB5b3Ugd2lzaCB0byBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxsTmFtZUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImNhbGwtbmFtZVwiLFxuICByZWFkOiBmdW5jdGlvbiAob2JqZWN0OiBhbnksIG5hbWU6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICByZXR1cm4gb2JqZWN0W25hbWVdKC4uLmFyZ3MpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vLyBiYWJlbCBtaXNpbnRlcnByZXRzIHRoZSBcInRoaXNcIiBmYWtlIHBhcmFtZXRlciwgc28gd2UgZGVmaW5lIGl0IGluIHRoaXMgaW50ZXJmYWNlc1xuZXhwb3J0IHR5cGUgRm9ybWF0dGVyRnVudGlvblBhcmFtID0gKHRoaXM6IGFueSwgLi4uYXJnczogYW55W10pID0+IGFueTtcblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIHdpdGggYXJndW1lbnRzXG4gKiBAcGFyYW0gZm4gVGhlIGZ1bmN0aW9uIHlvdSB3aXNoIHRvIGNhbGxcbiAqIEBwYXJhbSBhcmdzIHRoZSBwYXJhbWV0ZXJzIHlvdSB3aXNoIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGhcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGxGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJjYWxsXCIsXG4gIHJlYWQoZm46IEZvcm1hdHRlckZ1bnRpb25QYXJhbSwgLi4uYXJnczogYW55W10pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5leHBvcnQgY29uc3QgZGVidWdGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJkZWJ1Z1wiLFxuICByZWFkKFxuICAgIHRvUHJpbnQ6IGFueSxcbiAgICBsZXZlbDogXCJsb2dcIiB8IFwiZGVidWdcIiB8IFwiaW5mb1wiIHwgXCJlcnJvclwiIHwgXCJ3YXJuXCIgPSBcImRlYnVnXCJcbiAgKSB7XG4gICAgY29uc29sZVtsZXZlbF0odG9QcmludCk7XG4gICAgcmV0dXJuIHRvUHJpbnQ7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcsIGlzRGVmaW5lZCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogU2V0cyBhIGRlZmF1bHQgdmFsdWUgaWYgdGhlIGZpcnN0IHZhbHVlIGlzIG5vdCBzZXRcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImRlZmF1bHRcIixcbiAgcmVhZCh2YWx1ZTogYW55LCBkZWZhdWx0VmFsdWU6IGFueSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9LFxufTtcbiIsIi8vIHNwZWNpYWwgaGVscGVyIGZvcm1hdHRlcnNcbmV4cG9ydCB7IGFyZ3NGb3JtYXR0ZXIgfSBmcm9tIFwiLi9hcmdzLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZGVidWdGb3JtYXR0ZXIgfSBmcm9tIFwiLi9kZWJ1Zy5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHRGb3JtYXR0ZXIgfSBmcm9tIFwiLi9kZWZhdWx0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgaXNEZXNrdG9wRm9ybWF0dGVyIH0gZnJvbSBcIi4vaXMtZGVza3RvcC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGlzTW9iaWxlRm9ybWF0dGVyIH0gZnJvbSBcIi4vaXMtbW9iaWxlLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgY2FsbEZvcm1hdHRlciB9IGZyb20gXCIuL2NhbGwuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBjYWxsTmFtZUZvcm1hdHRlciB9IGZyb20gXCIuL2NhbGwtbmFtZS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG1hcEZvcm1hdHRlciB9IGZyb20gXCIuL21hcC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG9zRm9ybWF0dGVyIH0gZnJvbSBcIi4vb3MuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBwcmVmZXJGb3JtYXR0ZXIgfSBmcm9tIFwiLi9wcmVmZXIuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyB0ZXJuYXJ5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vdGVybmFyeS5mb3JtYXR0ZXIuanNcIjtcbiIsImltcG9ydCB7IGlzRGVza3RvcCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY29uc3QgaXNEZXNrdG9wRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLWRlc2t0b3BcIixcbiAgcmVhZCgpIHtcbiAgICByZXR1cm4gaXNEZXNrdG9wKCk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IGlzTW9iaWxlRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLW1vYmlsZVwiLFxuICByZWFkKCkge1xuICAgIHJldHVybiBpc01vYmlsZSgpO1xuICB9LFxufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1zcHJlYWQgKi9cbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG4vKipcbiAqIENhbGxzIGEgbWV0aG9kIG9uIHRoZSBnaXZlbiBvYmplY3QuIFRoZSBmaXJzdCBwYXJhbWV0ZXJzIGRlZmluZXMgdGhlIG9iamVjdCBhbmQgdGhlIHNlY29uZCB0aGUgbWV0aG9kbmFtZS5cbiAqIFRhcmdldCB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIG1ldGhvZC5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21hdHRoaWV1cmlvbG8vcml2ZXRzanMtc3RkbGliI21hcFxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxzcGFuIHJ2LXRleHQ9XCIxMCB8IG1hcCAnTWF0aCcgJ3NpbidcIj48L3NwYW4+XG4gKiBgYGBcbiAqIEByZXR1cm5zIGUuZy4gYXMgaW4gdGhlIGV4YW1wbGU6IGA8c3Bhbj4tMC41NDQwMjExMTA4ODkzNjk5PC9zcGFuPmBcbiAqL1xuZXhwb3J0IGNvbnN0IG1hcEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcIm1hcFwiLFxuICAvKipcbiAgICogQ2FsbHMgYSBtZXRob2Qgb24gdGhlIGdpdmVuIG9iamVjdC4gVGhlIGZpcnN0IHBhcmFtZXRlcnMgZGVmaW5lcyB0aGUgb2JqZWN0IGFuZCB0aGUgc2Vjb25kIHRoZSBtZXRob2QgbmFtZS5cbiAgICogVGFyZ2V0IHdpbGwgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgbWV0aG9kLlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYiNtYXBcbiAgICogQGV4YW1wbGVcbiAgICogYGBgaHRtbFxuICAgKiA8c3BhbiBydi10ZXh0PVwiMTAgfCBtYXAgJ01hdGgnICdzaW4nXCI+PC9zcGFuPlxuICAgKiBgYGBcbiAgICogQHJldHVybnMgZS5nLiBhcyBpbiB0aGUgZXhhbXBsZTogYDxzcGFuPi0wLjU0NDAyMTExMDg4OTM2OTk8L3NwYW4+YFxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHBhcmFtIHByb3BcbiAgICovXG4gIHJlYWQodGFyZ2V0OiBhbnksIG9iajogYW55LCBwcm9wOiBzdHJpbmcpIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBhcmdzLnNwbGljZSgxLCAyKTtcbiAgICByZXR1cm4gb2JqW3Byb3BdLmFwcGx5KG9iaiwgYXJncyk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0T1MgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IG9zRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcIm9zXCIsXG4gIHJlYWQoKSB7XG4gICAgcmV0dXJuIGdldE9TKCk7XG4gIH0sXG59O1xuIiwiLyoqXG4gKiBQcmVmZXJzIHRoZSBmaXJzdCBmb3JtYXR0ZXIgcGFyYW1ldGVyIGJlZm9yZSBsZWZ0IHBhcmFtZXRlclxuICovXG5leHBvcnQgY29uc3QgcHJlZmVyRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInByZWZlclwiLFxuICByZWFkKHZhbHVlOiBhbnksIHByZWZlclZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gcHJlZmVyVmFsdWUgfHwgdmFsdWU7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuLyoqXG4gKiBhID8gYiA6IGNcbiAqL1xuZXhwb3J0IGNvbnN0IHRlcm5hcnlGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJ0ZXJuYXJ5XCIsXG4gIHJlYWQoY29uZGl0aW9uOiBhbnksIHllcywgbm8pIHtcbiAgICByZXR1cm4gY29uZGl0aW9uID8geWVzIDogbm87XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQXBwZW5kcyBjaGFyYWN0ZXJzIHRvIGEgc3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI2FwcGVuZFxuICovXG5leHBvcnQgY29uc3QgYXBwZW5kRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiYXBwZW5kXCIsXG4gIHJlYWQoYTogc3RyaW5nLCBiOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYSArIGI7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBVcHBlcmNhc2VzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGNhcGl0YWxpemVGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJjYXBpdGFsaXplXCIsXG4gIHJlYWQoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY2FwaXRhbGl6ZShzdHIpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIENhdHMgYSBzdHJpbmdcbiAqIElmIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgLTEgdGhlIHN0cmluZyB3aWxsIG5vdCBiZSB1bmN1dFxuICogQGV4YW1wbGVcbiAqIDxwIHJ2LXRleHQ9XCInYWJjZGVmZ2hpamtsbm1vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xubW9wcXJzdHV2d3h5eicgfCBjdXQgMyAnLi4uJ1wiPjwvcD5cbiAqIC0+IDxwPmFiYy4uLjwvcD5cbiAqXG4gKiA8cCBydi10ZXh0PVwiJ2FiY2RlZmdoaWprbG5tb3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsbm1vcHFyc3R1dnd4eXonIHwgY3V0IDNcIj48L3A+XG4gKiAtPiA8cD5hYmM8L3A+XG4gKi9cbmV4cG9ydCBjb25zdCBjdXRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJjdXRcIixcbiAgcmVhZChzdHI6IHN0cmluZywgY3V0QXQ6IG51bWJlciwgZGVsaW1pdGF0aW9uID0gXCJcIikge1xuICAgIGlmICghc3RyKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltjdXRGb3JtYXR0ZXJdIFZhbHVlIG11c3QgYmUgb2YgdHlwZSBzdHJpbmdcIik7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBpZiAoc3RyLmxlbmd0aCA+IGN1dEF0KSB7XG4gICAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhjdXRBdCwgY3V0QXQgPT09IC0xID8gdW5kZWZpbmVkIDogLTEpICsgZGVsaW1pdGF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIGxvd2VyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNkb3duY2FzZVxuICovXG5leHBvcnQgY29uc3QgZG93bmNhc2VGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJkb3duY2FzZVwiLFxuICByZWFkKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VxdWVuY2Ugb2YgZWxlbWVudHMgb2Ygc2VhcmNoU3RyaW5nIGNvbnZlcnRlZCB0byBhIFN0cmluZyBpcyB0aGUgc2FtZSBhcyB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50cyBvZiB0aGlzIG9iamVjdCAoY29udmVydGVkIHRvIGEgU3RyaW5nKSBzdGFydGluZyBhdCBlbmRQb3NpdGlvbiDigJMgbGVuZ3RoKHRoaXMpLlxuICogT3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxwIHJ2LWlmPVwiJ2FiY2RlZmcnIHwgZW5kcy13aXRoICdlZmcnXCI+SGVsbG8gV29ybGQhPC9wPlxuICogLT4gPHA+SGVsbG8gV29ybGQhPC9wPlxuICovXG5leHBvcnQgY29uc3QgZW5kc1dpdGhGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJlbmRzLXdpdGhcIixcbiAgcmVhZChzdHI6IHN0cmluZywgY2hlY2tTdGFydDogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltlbmRzV2l0aEZvcm1hdHRlcl0gVmFsdWUgbXVzdCBiZSBvZiB0eXBlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHIuZW5kc1dpdGgoY2hlY2tTdGFydCk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBlbXB0eUZvcm1hdHRlciB9IGZyb20gXCIuLi9hcnJheS9lbXB0eS5mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIHN0cmluZyBhbmQgbm90IGVtcHR5XG4gKi9cbmV4cG9ydCBjb25zdCBmaWxsZWRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJmaWxsZWRcIixcbiAgcmVhZChzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBpc1N0cmluZyhzdHIpICYmICFlbXB0eUZvcm1hdHRlci5yZWFkKHN0ci5yZXBsYWNlKC9cXHMvZywgXCJcIikpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGFuZGxlaXplIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBGb3JtYXRzIGEgc3RyaW5nIGludG8gYSBoYW5kbGUuXG4gKiBFLmcuICcxMDAlIE0gJiBNcyEhIScgLT4gMTAwLW0tbXNcbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNoYW5kbGUtaGFuZGxlaXplXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVpemVGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJoYW5kbGVpemVcIixcbiAgcmVhZChzdHI6IHN0cmluZykge1xuICAgIGlmICghc3RyKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbaGFuZGxlaXplRm9ybWF0dGVyXSBzdHIgaXMgbm90IHNldFwiKTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlaXplKHN0cik7XG4gIH0sXG59O1xuIiwiLy8gc3RyaW5nIGZvcm1hdHRlcnNcbmV4cG9ydCB7IGFwcGVuZEZvcm1hdHRlciB9IGZyb20gXCIuL2FwcGVuZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGNhcGl0YWxpemVGb3JtYXR0ZXIgfSBmcm9tIFwiLi9jYXBpdGFsaXplLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgY3V0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vY3V0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZG93bmNhc2VGb3JtYXR0ZXIgfSBmcm9tIFwiLi9kb3duY2FzZS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGVuZHNXaXRoRm9ybWF0dGVyIH0gZnJvbSBcIi4vZW5kcy13aXRoLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgZmlsbGVkRm9ybWF0dGVyIH0gZnJvbSBcIi4vZmlsbGVkLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgaGFuZGxlaXplRm9ybWF0dGVyIH0gZnJvbSBcIi4vaGFuZGxlaXplLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgbWF0Y2hGb3JtYXR0ZXIgfSBmcm9tIFwiLi9tYXRjaC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHBhZFN0YXJ0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vcGFkLXN0YXJ0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgcGFkRW5kRm9ybWF0dGVyIH0gZnJvbSBcIi4vcGFkLWVuZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IG51bWJlckZvcm1hdEZvcm1hdHRlciB9IGZyb20gXCIuL251bWJlci1mb3JtYXQuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBwbHVyYWxpemVGb3JtYXR0ZXIgfSBmcm9tIFwiLi9wbHVyYWxpemUuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBwcmVwZW5kRm9ybWF0dGVyIH0gZnJvbSBcIi4vcHJlcGVuZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHVwY2FzZUZvcm1hdHRlciB9IGZyb20gXCIuL3VwY2FzZS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHJlcGxhY2VGb3JtYXR0ZXIgfSBmcm9tIFwiLi9yZXBsYWNlLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgcmVwbGFjZUZpcnN0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vcmVwbGFjZS1maXJzdC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHNsaWNlRm9ybWF0dGVyIH0gZnJvbSBcIi4vc2xpY2UuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBzdGFydHNXaXRoRm9ybWF0dGVyIH0gZnJvbSBcIi4vc3RhcnRzLXdpdGguZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBzdHJpcEZvcm1hdHRlciB9IGZyb20gXCIuL3N0cmlwLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgc3RyaXBIdG1sRm9ybWF0dGVyIH0gZnJvbSBcIi4vc3RyaXAtaHRtbC5mb3JtYXR0ZXIuanNcIjtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY29uc3QgbWF0Y2hGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJtYXRjaFwiLFxuICByZWFkKGE6IHN0cmluZywgcmVnZXhwOiBzdHJpbmcsIGZsYWdzPzogc3RyaW5nKSB7XG4gICAgaWYgKCFhIHx8ICFyZWdleHApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGEubWF0Y2gobmV3IFJlZ0V4cChyZWdleHAsIGZsYWdzKSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5pbXBvcnQgeyB0b0RlY2ltYWxGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vdHlwZS90by1kZWNpbWFsLmZvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgaXNJbnRlZ2VyRm9ybWF0dGVyIH0gZnJvbSBcIi4uL3R5cGUvaXMtaW50ZWdlci5mb3JtYXR0ZXIuanNcIjtcblxuLy8gVE9ETyBzZXQgYnkgY3VycmVudCBsb2NhbGVcbmNvbnN0IERFRkFVTFRfREVDSU1BTF9TRVBBUkFUT1IgPSBcIi5cIjtcbmNvbnN0IERFRkFVTFRfVEhPVVNBTkRfU0VQQVJBVE9SID0gXCInXCI7XG5jb25zdCBERUZBVUxUX1BSRUNJU0lPTiA9IDI7XG5cbi8qKlxuICogUmV0dXJucyBhIGZvcm1hdHRlZCB2ZXJzaW9uIG9mIHRoZSB0YXJnZXQgYXMgc3RyaW5nLlxuICogVGhlIG51bWJlciB3aWxsIGFsd2F5cyBiZSByb3VuZGVkIGFmdGVyIHRoZSBESU4gMTMzMyAoMS41NSA9PiAxLjYgYW5kIC0xLjU1ID0+IC0xLjYpXG4gKi9cbmV4cG9ydCBjb25zdCBudW1iZXJGb3JtYXRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJudW1iZXJGb3JtYXRcIixcbiAgLyoqXG4gICAqIFJldHVybnMgYSBmb3JtYXR0ZWQgdmVyc2lvbiBvZiB0aGUgdGFyZ2V0IGFzIHN0cmluZy5cbiAgICogVGhlIG51bWJlciB3aWxsIGFsd2F5cyBiZSByb3VuZGVkIGFmdGVyIHRoZSBESU4gMTMzMyAoMS41NSA9PiAxLjYgYW5kIC0xLjU1ID0+IC0xLjYpXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICogQHBhcmFtIHByZWNpc2lvbiAoZGVmYXVsdDogMilcbiAgICogQHBhcmFtIGRlY2ltYWxTZXBhcmF0b3IgKGRlZmF1bHQ6IFwiLlwiKVxuICAgKiBAcGFyYW0gdGhvdXNhbmRTZXBhcmF0b3IgKGRlZmF1bHQ6IFwiJ1wiKVxuICAgKi9cbiAgcmVhZChcbiAgICB0YXJnZXQ6IG51bWJlcixcbiAgICBwcmVjaXNpb24gPSBERUZBVUxUX1BSRUNJU0lPTixcbiAgICBkZWNpbWFsU2VwYXJhdG9yID0gREVGQVVMVF9ERUNJTUFMX1NFUEFSQVRPUixcbiAgICB0aG91c2FuZFNlcGFyYXRvciA9IERFRkFVTFRfVEhPVVNBTkRfU0VQQVJBVE9SXG4gICkge1xuICAgIGlmICghdG9EZWNpbWFsRm9ybWF0dGVyLnJlYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRvRGVjaW1hbEZvcm1hdHRlciBtdXN0IGhhdmUgYSByZWFkIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzSW50ZWdlckZvcm1hdHRlci5yZWFkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpc0ludGVnZXJGb3JtYXR0ZXIgbXVzdCBoYXZlIGEgcmVhZCBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gaXNOdW1iZXIodGFyZ2V0KSA/IHRhcmdldCA6IHRvRGVjaW1hbEZvcm1hdHRlci5yZWFkKHRhcmdldCk7XG5cbiAgICBpZiAoIWlzSW50ZWdlckZvcm1hdHRlci5yZWFkKHByZWNpc2lvbikpIHtcbiAgICAgIHByZWNpc2lvbiA9IERFRkFVTFRfUFJFQ0lTSU9OO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogVGhhbmtzIHRvIHVzZXIyODIzNjcwXG4gICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDAxNTAyNy9qYXZhc2NyaXB0LXRvZml4ZWQtbm90LXJvdW5kaW5nXG4gICAgICovXG4gICAgbGV0IHJldFN0ciA9ICgrKFxuICAgICAgTWF0aC5yb3VuZCgrKE1hdGguYWJzKHRhcmdldCkgKyBcImVcIiArIHByZWNpc2lvbikpICtcbiAgICAgIFwiZVwiICtcbiAgICAgIC1wcmVjaXNpb25cbiAgICApKS50b0ZpeGVkKHByZWNpc2lvbik7XG4gICAgaWYgKHRhcmdldCA8IDApIHJldFN0ciA9IFwiLVwiICsgcmV0U3RyO1xuXG4gICAgLyoqXG4gICAgICogVGhhbmtzIHRvIEVsaWFzIFphbWFyaWFcbiAgICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5MDExMDIvaG93LXRvLXByaW50LWEtbnVtYmVyLXdpdGgtY29tbWFzLWFzLXRob3VzYW5kcy1zZXBhcmF0b3JzLWluLWphdmFzY3JpcHRcbiAgICAgKi9cbiAgICBjb25zdCByZXQgPSByZXRTdHIuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChyZXQubGVuZ3RoID09IDIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJldFswXS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCB0aG91c2FuZFNlcGFyYXRvcikgK1xuICAgICAgICBkZWNpbWFsU2VwYXJhdG9yICtcbiAgICAgICAgcmV0WzFdXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiByZXRbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhvdXNhbmRTZXBhcmF0b3IpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwYWRFbmQgZm9ybWF0dGVycyBwYWRzIHRoZSBjdXJyZW50IHN0cmluZyB3aXRoIGEgZ2l2ZW4gc3RyaW5nIChyZXBlYXRlZCwgaWYgbmVlZGVkKSBzbyB0aGF0IHRoZSByZXN1bHRpbmcgc3RyaW5nIHJlYWNoZXMgYSBnaXZlbiBsZW5ndGguXG4gKiBUaGUgcGFkZGluZyBpcyBhcHBsaWVkIGZyb20gdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzdHJpbmcuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9wYWRFbmRcbiAqL1xuZXhwb3J0IGNvbnN0IHBhZEVuZEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInBhZEVuZFwiLFxuICAvKipcbiAgICpcbiAgICogVGhlIHBhZEVuZCBmb3JtYXR0ZXJzIHBhZHMgdGhlIGN1cnJlbnQgc3RyaW5nIHdpdGggYSBnaXZlbiBzdHJpbmcgKHJlcGVhdGVkLCBpZiBuZWVkZWQpIHNvIHRoYXQgdGhlIHJlc3VsdGluZyBzdHJpbmcgcmVhY2hlcyBhIGdpdmVuIGxlbmd0aC5cbiAgICogVGhlIHBhZGRpbmcgaXMgYXBwbGllZCBmcm9tIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgc3RyaW5nLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9wYWRFbmRcbiAgICpcbiAgICogQHBhcmFtIHRhcmdldFxuICAgKiBAcGFyYW0gbGVuZ3RoIFRoZSBsZW5ndGggb2YgdGhlIHJlc3VsdGluZyBzdHJpbmcgb25jZSB0aGUgY3VycmVudCBgc3RyYCBoYXMgYmVlbiBwYWRkZWQuIElmIHRoZSB2YWx1ZSBpcyBsb3dlciB0aGFuIGBzdHIubGVuZ3RoYCwgdGhlIGN1cnJlbnQgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQgYXMtaXMuXG4gICAqIEBwYXJhbSBwYWRTdHJpbmcgVGhlIHN0cmluZyB0byBwYWQgdGhlIGN1cnJlbnQgYHN0cmAgd2l0aC4gSWYgYHBhZFN0cmluZ2AgaXMgdG9vIGxvbmcgdG8gc3RheSB3aXRoaW4gYHRhcmdldExlbmd0aGAsIGl0IHdpbGwgYmUgdHJ1bmNhdGVkOiBmb3IgbGVmdC10by1yaWdodCBsYW5ndWFnZXMgdGhlIGxlZnQtbW9zdCBwYXJ0IGFuZCBmb3IgcmlnaHQtdG8tbGVmdCBsYW5ndWFnZXMgdGhlIHJpZ2h0LW1vc3Qgd2lsbCBiZSBhcHBsaWVkLiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBwYXJhbWV0ZXIgaXMgXCIgXCIgKGBVKzAwMjBgKS5cbiAgICovXG4gIHJlYWQodGFyZ2V0OiBzdHJpbmcsIGxlbmd0aCA9IDIsIHBhZFN0cmluZyA9IFwiMFwiKSB7XG4gICAgcmV0dXJuIHRhcmdldC5wYWRFbmQobGVuZ3RoLCBwYWRTdHJpbmcpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwYWRTdGFydCBmb3JtYXR0ZXIgcGFkcyB0aGUgY3VycmVudCBzdHJpbmcgd2l0aCBhbm90aGVyIHN0cmluZyAobXVsdGlwbGUgdGltZXMsIGlmIG5lZWRlZCkgdW50aWwgdGhlIHJlc3VsdGluZyBzdHJpbmcgcmVhY2hlcyB0aGUgZ2l2ZW4gbGVuZ3RoLlxuICogVGhlIHBhZGRpbmcgaXMgYXBwbGllZCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgY3VycmVudCBzdHJpbmcuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9wYWRTdGFydFxuICovXG5leHBvcnQgY29uc3QgcGFkU3RhcnRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJwYWRTdGFydFwiLFxuICAvKipcbiAgICogVGhlIHBhZFN0YXJ0IGZvcm1hdHRlciBwYWRzIHRoZSBjdXJyZW50IHN0cmluZyB3aXRoIGFub3RoZXIgc3RyaW5nIChtdWx0aXBsZSB0aW1lcywgaWYgbmVlZGVkKSB1bnRpbCB0aGUgcmVzdWx0aW5nIHN0cmluZyByZWFjaGVzIHRoZSBnaXZlbiBsZW5ndGguXG4gICAqIFRoZSBwYWRkaW5nIGlzIGFwcGxpZWQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGN1cnJlbnQgc3RyaW5nLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9wYWRTdGFydFxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBwYXJhbSBsZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHN0cmluZyBvbmNlIHRoZSBjdXJyZW50IGBzdHJgIGhhcyBiZWVuIHBhZGRlZC4gSWYgdGhlIHZhbHVlIGlzIGxlc3MgdGhhbiBgc3RyLmxlbmd0aGAsIHRoZW4gYHN0cmAgaXMgcmV0dXJuZWQgYXMtaXMuXG4gICAqIEBwYXJhbSBwYWRTdHJpbmcgVGhlIHN0cmluZyB0byBwYWQgdGhlIGN1cnJlbnQgYHN0cmAgd2l0aC4gSWYgYHBhZFN0cmluZ2AgaXMgdG9vIGxvbmcgdG8gc3RheSB3aXRoaW4gdGhlIGB0YXJnZXRMZW5ndGhgLCBpdCB3aWxsIGJlIHRydW5jYXRlZCBmcm9tIHRoZSBlbmQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBcIiBcImAgKGBVKzAwMjAgJ1NQQUNFJ2ApLlxuICAgKi9cbiAgcmVhZCh0YXJnZXQ6IHN0cmluZywgbGVuZ3RoID0gMiwgcGFkU3RyaW5nID0gXCIwXCIpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnBhZFN0YXJ0KGxlbmd0aCwgcGFkU3RyaW5nKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IHBsdXJhbGl6ZUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInBsdXJhbGl6ZVwiLFxuICByZWFkKGlucHV0OiBhbnksIHNpbmd1bGFyOiBzdHJpbmcsIHBsdXJhbDogc3RyaW5nKSB7XG4gICAgaWYgKHBsdXJhbCA9PT0gbnVsbCkge1xuICAgICAgcGx1cmFsID0gc2luZ3VsYXIgKyBcInNcIjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICBpbnB1dCA9IGlucHV0Lmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSAxKSB7XG4gICAgICByZXR1cm4gc2luZ3VsYXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwbHVyYWw7XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFByZXBlbmRzIGNoYXJhY3RlcnMgdG8gYSBzdHJpbmcuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvc3RyaW5nLWZpbHRlcnMjcHJlcGVuZFxuICovXG5leHBvcnQgY29uc3QgcHJlcGVuZEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInByZXBlbmRcIixcbiAgcmVhZChhOiBzdHJpbmcsIGI6IHN0cmluZykge1xuICAgIHJldHVybiBiICsgYTtcbiAgfSxcbn07XG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBSZXBsYWNlcyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhIHN0cmluZyB3aXRoIGEgc3Vic3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vZW4vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI3JlcGxhY2VfZmlyc3RcbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGxhY2VGaXJzdEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInJlcGxhY2VGaXJzdFwiLFxuICByZWFkKHN0cjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCByZXBsYWNlVmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSh2YWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBSZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgYSBzdHJpbmcgd2l0aCBhIHN1YnN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNyZXBsYWNlXG4gKi9cbmV4cG9ydCBjb25zdCByZXBsYWNlRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwicmVwbGFjZVwiLFxuICByZWFkKHN0cjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCByZXBsYWNlVmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKHZhbHVlLCBcImdcIiksIHJlcGxhY2VWYWx1ZSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2luZGV4LmpzXCI7XG5cbi8qKlxuICogVGhlIGBzbGljZWAgZm9ybWF0dGVyIHJldHVybnMgYSBzdWJzdHJpbmcsIHN0YXJ0aW5nIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gKiBBbiBvcHRpb25hbCBzZWNvbmQgcGFyYW1ldGVyIGNhbiBiZSBwYXNzZWQgdG8gc3BlY2lmeSB0aGUgbGVuZ3RoIG9mIHRoZSBzdWJzdHJpbmcuXG4gKiBJZiBubyBzZWNvbmQgcGFyYW1ldGVyIGlzIGdpdmVuLCB0aGUgc3Vic3RyaW5nIGNvbnRpbnVlcyB0byB0aGUgZW5kIG9mIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzbGljZVxuICovXG5leHBvcnQgY29uc3Qgc2xpY2VGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJzbGljZVwiLFxuICByZWFkKHZhbHVlOiBhbnksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VxdWVuY2Ugb2YgZWxlbWVudHMgb2Ygc2VhcmNoU3RyaW5nIGNvbnZlcnRlZCB0byBhIFN0cmluZyBpcyB0aGUgc2FtZSBhcyB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50cyBvZiB0aGlzIG9iamVjdCAoY29udmVydGVkIHRvIGEgU3RyaW5nKSBzdGFydGluZyBhdCBwb3NpdGlvbi5cbiAqIE90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8cCBydi1pZj1cIidhYmNkZWZnJyB8IHN0YXJ0cy13aXRoICdhYmMnXCI+SGVsbG8gV29ybGQhPC9wPlxuICogLT4gPHA+SGVsbG8gV29ybGQhPC9wPlxuICovXG5leHBvcnQgY29uc3Qgc3RhcnRzV2l0aEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInN0YXJ0cy13aXRoXCIsXG4gIHJlYWQoc3RyOiBzdHJpbmcsIGNoZWNrU3RhcnQ6IHN0cmluZykge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbc3RhcnRzV2l0aEZvcm1hdHRlcl0gVmFsdWUgbXVzdCBiZSBvZiB0eXBlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHIuc3RhcnRzV2l0aChjaGVja1N0YXJ0KTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHN0cmlwSHRtbCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogU3RyaXBzIGFsbCBIVE1MIHRhZ3MgZnJvbSBhIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzdHJpcF9odG1sXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpcEh0bWxGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJzdHJpcC1odG1sXCIsXG4gIHJlYWQoaHRtbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmlwSHRtbChodG1sKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBTdHJpcHMgdGFicywgc3BhY2VzLCBhbmQgbmV3bGluZXMgKGFsbCB3aGl0ZXNwYWNlKSBmcm9tIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlIG9mIGEgc3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI3N0cmlwXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpcEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInN0cmlwXCIsXG4gIHJlYWQoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIHVwcGVyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyN1cGNhc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHVwY2FzZUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInVwY2FzZVwiLFxuICByZWFkKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpO1xuICB9LFxufTtcbiIsIi8qKlxuICogQ29udmVydHMgYSB2YXJpYWJsZSB0byBib29sZWFuXG4gKi9cbmV4cG9ydCBjb25zdCBib29sZWFuRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImJvb2xlYW5cIixcbiAgcmVhZCh2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gISF2YWx1ZTtcbiAgICB9XG4gIH0sXG59O1xuIiwiLy8gcHJvcGVydHkgLyBvYmplY3QgZm9ybWF0dGVyc1xuZXhwb3J0IHsgYm9vbGVhbkZvcm1hdHRlciB9IGZyb20gXCIuL2Jvb2xlYW4uZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBpc0FycmF5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vaXMtYXJyYXkuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBpc0Jvb2xlYW5Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9pcy1ib29sZWFuLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgaXNEZWZpbmVkRm9ybWF0dGVyIH0gZnJvbSBcIi4vaXMtZGVmaW5lZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGlzSW50ZWdlckZvcm1hdHRlciB9IGZyb20gXCIuL2lzLWludGVnZXIuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBpc051bWJlckZvcm1hdHRlciB9IGZyb20gXCIuL2lzLW51bWJlci5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGlzT2JqZWN0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vaXMtb2JqZWN0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgaXNTdHJpbmdGb3JtYXR0ZXIgfSBmcm9tIFwiLi9pcy1zdHJpbmcuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyBpc1VuZGVmaW5lZEZvcm1hdHRlciB9IGZyb20gXCIuL2lzLXVuZGVmaW5lZC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IGpzb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9qc29uLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgcGFyc2VGb3JtYXR0ZXIgfSBmcm9tIFwiLi9wYXJzZS5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHRvQmFzZTY0Rm9ybWF0dGVyIH0gZnJvbSBcIi4vdG8tYmFzZTY0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgdG9TdHJpbmdGb3JtYXR0ZXIgfSBmcm9tIFwiLi90by1zdHJpbmcuZm9ybWF0dGVyLmpzXCI7XG5leHBvcnQgeyB0b0RlY2ltYWxGb3JtYXR0ZXIgfSBmcm9tIFwiLi90by1kZWNpbWFsLmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgdG9GbG9hdEZvcm1hdHRlciB9IGZyb20gXCIuL3RvLWZsb2F0LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0IHsgdG9JbnRlZ2VyRm9ybWF0dGVyIH0gZnJvbSBcIi4vdG8taW50ZWdlci5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCB7IHRvTnVtYmVyRm9ybWF0dGVyIH0gZnJvbSBcIi4uL3R5cGUvdG8tbnVtYmVyLmZvcm1hdHRlci5qc1wiO1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBhbiBhcnJheVxuICovXG5leHBvcnQgY29uc3QgaXNBcnJheUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLWFycmF5XCIsXG4gIHJlYWQ6IEFycmF5LmlzQXJyYXksXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgaXNCb29sZWFuIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgaXMgYW4gYm9vbGVhblxuICovXG5leHBvcnQgY29uc3QgaXNCb29sZWFuRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiaXMtYm9vbGVhblwiLFxuICByZWFkOiBpc0Jvb2xlYW4sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgaXMgZGVmaW5lZFxuICovXG5leHBvcnQgY29uc3QgaXNEZWZpbmVkRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiaXMtZGVmaW5lZFwiLFxuICByZWFkOiBpc0RlZmluZWQsXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBhIG51bWJlclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGhpZXVyaW9sby9yaXZldHNqcy1zdGRsaWIvYmxvYi9tYXN0ZXIvc3JjL3JpdmV0c3N0ZGxpYi5qcyNMODJcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSW50ZWdlckZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLWludGVnZXJcIixcbiAgcmVhZChuOiBudW1iZXIpIHtcbiAgICAvKipcbiAgICAgKiBUaGFua3MgYSBsb3QgdG8gRGFnZyBOYWJiaXRcbiAgICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM4ODU4MTcvaG93LXRvLWNoZWNrLWlmLWEtbnVtYmVyLWlzLWZsb2F0LW9yLWludGVnZXJcbiAgICAgKi9cbiAgICByZXR1cm4gbiA9PT0gK24gJiYgbiA9PT0gKG4gfCAwKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGEgbnVtYmVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc051bWJlckZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLW51bWJlclwiLFxuICByZWFkOiBpc051bWJlcixcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGEgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBpc09iamVjdEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLW9iamVjdFwiLFxuICByZWFkOiBpc09iamVjdCxcbn07XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3RyaW5nRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImlzLXN0cmluZ1wiLFxuICByZWFkKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHN0cik7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICovXG5leHBvcnQgY29uc3QgaXNVbmRlZmluZWRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJpcy11bmRlZmluZWRcIixcbiAgcmVhZDogaXNVbmRlZmluZWQsXG59O1xuIiwiaW1wb3J0IHsganNvblN0cmluZ2lmeSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGludG8gYSBKU09OIHN0cmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGpzb25Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwianNvblwiLFxuICByZWFkKG9iamVjdDogYW55LCBzcGFjZSA9IDIsIHJlcGxhY2VTaW5nbGVRdW90ZSA9IHRydWUpIHtcbiAgICByZXR1cm4ganNvblN0cmluZ2lmeShvYmplY3QsIHNwYWNlLCByZXBsYWNlU2luZ2xlUXVvdGUpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGlzT2JqZWN0LCBwYXJzZVR5cGUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIHBhcnNlIGpzb24sIGJhc2U2NCBvciBhbnkgb3RoZXIgdmFsdWUgc3RyaW5nIHRvIHRvIGl0cyByZWFsIHZhbHVlXG4gKiBAZXhhbXBsZSA8ZGl2IHJ2LWFkZC1jbGFzcz0nXCJbXCJjb2wtMlwiLCBcImNvbC0zXCIsIFwiY29sLTRcIiwgXCJjb2wtNVwiLCBcImNvbC02XCJdXCIgfCBwYXJzZSB8IHJhbmRvbSc+XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJwYXJzZVwiLFxuICByZWFkKHN0cj86IGFueSkge1xuICAgIGlmIChcbiAgICAgIGlzT2JqZWN0KHN0ciBhcyBhbnkpIHx8XG4gICAgICBBcnJheS5pc0FycmF5KHN0ciBhcyBhbnkpIHx8XG4gICAgICB0eXBlb2Ygc3RyID09PSBcImJvb2xlYW5cIiB8fFxuICAgICAgdHlwZW9mIHN0ciA9PT0gXCJudW1iZXJcIlxuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIltwYXJzZUZvcm1hdHRlcl0gWW91IGRvIG5vdCBuZWVkIHRvIHBhcnNlIHRoZSB2YWx1ZSBiZWNhdXNlIHNpbmNlIGl0IGFscmVhZHkgYmVlbiBwYXJzZWRcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBwYXJzZVR5cGUoc3RyLCB0cnVlKS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCB7IHRvQmFzZTY0IH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5cbi8qKlxuICogRGVjb2RlcyBhIHN0cmluZyBpbnRvIGEgYmFzZTY0IHN0cmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IHRvQmFzZTY0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRvQmFzZTY0XCIsXG4gIHJlYWQob2JqZWN0OiBhbnkpIHtcbiAgICByZXR1cm4gdG9CYXNlNjQob2JqZWN0KTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyB0b0ludGVnZXJGb3JtYXR0ZXIgfSBmcm9tIFwiLi90by1pbnRlZ2VyLmZvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgdG9GbG9hdEZvcm1hdHRlciB9IGZyb20gXCIuL3RvLWZsb2F0LmZvcm1hdHRlci5qc1wiO1xuXG5leHBvcnQgY29uc3QgdG9EZWNpbWFsRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwidG8tZGVjaW1hbFwiLFxuICByZWFkKHRhcmdldDogYW55KSB7XG4gICAgaWYgKCF0b0ludGVnZXJGb3JtYXR0ZXIucmVhZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9JbnRlZ2VyRm9ybWF0dGVyIG11c3QgaGF2ZSBhIHJlYWQgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGlmICghdG9GbG9hdEZvcm1hdHRlci5yZWFkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b0Zsb2F0Rm9ybWF0dGVyIG11c3QgaGF2ZSBhIHJlYWQgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGNvbnN0IHJldEkgPSB0b0ludGVnZXJGb3JtYXR0ZXIucmVhZCh0YXJnZXQgKiAxKTtcbiAgICBjb25zdCByZXRGID0gdG9GbG9hdEZvcm1hdHRlci5yZWFkKHRhcmdldCk7XG4gICAgcmV0dXJuIHJldEkgPT0gcmV0RiA/IHJldEkgOiByZXRGO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmbG9hdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gdGFyZ2V0XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYi9ibG9iL21hc3Rlci9zcmMvcml2ZXRzc3RkbGliLmpzI0wxMzNcbiAqL1xuZXhwb3J0IGNvbnN0IHRvRmxvYXRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJ0by1mbG9hdFwiLFxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW50ZWdlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gdGFyZ2V0LlxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqL1xuICByZWFkKHRhcmdldDogYW55KSB7XG4gICAgY29uc3QgcmV0ID0gcGFyc2VGbG9hdCgodGFyZ2V0ICogMS4wKSBhcyBhbnkpO1xuICAgIHJldHVybiBpc05hTihyZXQpID8gMC4wIDogcmV0O1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiB0YXJnZXQuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYi9ibG9iL21hc3Rlci9zcmMvcml2ZXRzc3RkbGliLmpzI0wxMjhcbiAqL1xuZXhwb3J0IGNvbnN0IHRvSW50ZWdlckZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRvLWludGVnZXJcIixcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGludGVnZXIgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHRhcmdldC5cbiAgICogQHBhcmFtIHRhcmdldFxuICAgKi9cbiAgcmVhZCh0YXJnZXQ6IGFueSkge1xuICAgIGNvbnN0IHJldCA9IHBhcnNlSW50KCh0YXJnZXQgKiAxKSBhcyBhbnksIDEwKTtcbiAgICByZXR1cm4gaXNOYU4ocmV0KSA/IDAgOiByZXQ7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0TnVtYmVyIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyB0byBudW1iZXIgLyBmbG9hdFxuICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTAwNjUzLzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IHRvTnVtYmVyRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRvLW51bWJlclwiLFxuICByZWFkKHN0cjogc3RyaW5nLCBkZWY6IG51bWJlcikge1xuICAgIGNvbnN0IG51bSA9IGdldE51bWJlcihzdHIpO1xuICAgIC8vIElmIGRlZmF1bHQgdmFsdWUgaXMgc2V0IHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZSBpZiBudW0gaXMgMCwgbnVsbCBvciB1bmRlZmluZWRcbiAgICBpZiAoZGVmKSB7XG4gICAgICByZXR1cm4gbnVtID8gbnVtIDogZGVmO1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGlzT2JqZWN0LCBnZXRTdHJpbmcgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuXG4vKipcbiAqIFBhcnNlcyBhIHZhbHVlIHRvIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwYXJzZSB0byBzdHJpbmdcbiAqIEBwYXJhbSBkZWYgRGVmYXVsdCB2YWx1ZSBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHRvU3RyaW5nRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRvLXN0cmluZ1wiLFxuICByZWFkKHZhbHVlOiBhbnksIGRlZjogc3RyaW5nKSB7XG4gICAgLy8gSWYgdmFsdWUgaXMgYW4gYXJyYXkgY29udmVydCBlYWNoIHZhbHVlIGluIGFycmF5IHRvIHN0cmluZ1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yIChjb25zdCBpIGluIHZhbHVlIGFzIEFycmF5PGFueT4pIHtcbiAgICAgICAgaWYgKHZhbHVlW2ldKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBnZXRTdHJpbmcodmFsdWVbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2tleV0gPSBnZXRTdHJpbmcodmFsdWVba2V5XSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gZ2V0U3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBJZiBkZWZhdWx0IHZhbHVlIGlzIHNldCByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUgaWYgbnVtIGlzIDAsIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgaWYgKGRlZikge1xuICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUgOiBkZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxufTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWRhcHRlcnMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50cy90ZW1wbGF0ZXMvdGVtcGxhdGVzLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZS1kZWNsYXJhdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Utbm9kZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2UtdGVtcGxhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JpYmEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZpZXcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvcmUubW9kdWxlLmpzXCI7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG5pbXBvcnQgdHlwZSB7XG4gIEFkYXB0ZXJzLFxuICBSb290LFxuICBLZXksXG4gIE9ic2VydmVyU3luY0NhbGxiYWNrLFxuICBPYmosXG4gIE9wdGlvbnMsXG59IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZlciB7XG4gIHB1YmxpYyBzdGF0aWMgYWRhcHRlcnM6IEFkYXB0ZXJzO1xuICBwdWJsaWMgc3RhdGljIGludGVyZmFjZXM6IHN0cmluZ1tdID0gW107XG4gIHB1YmxpYyBzdGF0aWMgcm9vdEludGVyZmFjZTogUm9vdDtcblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZU9wdGlvbnMob3B0aW9uczogUGFydGlhbDxPcHRpb25zPik6IHZvaWQge1xuICAgIGlmICghb3B0aW9ucy5hZGFwdGVycykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRhcHRlcnMgYXJlIHJlcXVpcmVkIVwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hZGFwdGVycykge1xuICAgICAgT2JzZXJ2ZXIuYWRhcHRlcnMgPSB7IC4uLk9ic2VydmVyLmFkYXB0ZXJzLCAuLi5vcHRpb25zLmFkYXB0ZXJzIH07XG4gICAgICBPYnNlcnZlci5pbnRlcmZhY2VzID0gT2JqZWN0LmtleXMoT2JzZXJ2ZXIuYWRhcHRlcnMpO1xuICAgIH1cblxuICAgIE9ic2VydmVyLnJvb3RJbnRlcmZhY2UgPSBvcHRpb25zLnJvb3RJbnRlcmZhY2UgfHwgT2JzZXJ2ZXIuaW50ZXJmYWNlc1swXTtcblxuICAgIGlmICghT2JzZXJ2ZXIucm9vdEludGVyZmFjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicm9vdEludGVyZmFjZSBpcyByZXF1aXJlZCFcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRva2VuaXplcyB0aGUgcHJvdmlkZWQga2V5cGF0aCBzdHJpbmcgaW50byBpbnRlcmZhY2UgKyBwYXRoIHRva2VucyBmb3IgdGhlXG4gICAqIG9ic2VydmVyIHRvIHdvcmsgd2l0aC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG9rZW5pemUoa2V5cGF0aDogc3RyaW5nLCByb290OiBSb290KTogYW55W10ge1xuICAgIGNvbnN0IHRva2VuczogYW55W10gPSBbXTtcbiAgICBsZXQgY3VycmVudDogS2V5ID0geyBpOiByb290LCBwYXRoOiBcIlwiIH07XG4gICAgbGV0IGluZGV4OiBudW1iZXI7XG4gICAgbGV0IGNocjogc3RyaW5nO1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwga2V5cGF0aC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNociA9IGtleXBhdGguY2hhckF0KGluZGV4KTtcbiAgICAgIGlmICh+T2JzZXJ2ZXIuaW50ZXJmYWNlcy5pbmRleE9mKGNocikpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSB7IGk6IGNociwgcGF0aDogXCJcIiB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudC5wYXRoICs9IGNocjtcbiAgICAgIH1cbiAgICB9XG4gICAgdG9rZW5zLnB1c2goY3VycmVudCk7XG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm92aWRlZCBrZXkgb24gYW4gb2JqZWN0LlxuICAgKiBAcGFyYW0ga2V5XG4gICAqIEBwYXJhbSBvYmpcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0KGtleTogS2V5LCBvYmo6IE9iaikge1xuICAgIHJldHVybiBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0uZ2V0KG9iaiwga2V5LnBhdGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIG9yIHVub2JzZXJ2ZXMgYSBjYWxsYmFjayBvbiB0aGUgb2JqZWN0IHVzaW5nIHRoZSBwcm92aWRlZCBrZXkuXG4gICAqIEBwYXJhbSBhY3RpdmVcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcGFyYW0gb2JqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzZXQoXG4gICAgYWN0aXZlOiBib29sZWFuLFxuICAgIGtleTogS2V5LFxuICAgIG9iajogT2JqLFxuICAgIGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFja1xuICApIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0ub2JzZXJ2ZShvYmosIGtleS5wYXRoLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9ic2VydmVyLmFkYXB0ZXJzW2tleS5pXS51bm9ic2VydmUob2JqLCBrZXkucGF0aCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBrZXlwYXRoOiBzdHJpbmc7XG4gIHB1YmxpYyBjYWxsYmFjazogT2JzZXJ2ZXJTeW5jQ2FsbGJhY2s7XG4gIHB1YmxpYyBvYmplY3RQYXRoOiBPYmpbXTtcbiAgcHVibGljIG9iajogT2JqO1xuICBwdWJsaWMgdGFyZ2V0OiBPYmo7XG4gIHB1YmxpYyBrZXk6IEtleTtcbiAgcHVibGljIHRva2VuczogS2V5W107XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcga2V5cGF0aCBvYnNlcnZlciBhbmQga2lja3MgdGhpbmdzIG9mZi5cbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0ga2V5cGF0aFxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9iajogT2JqLCBrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFjaykge1xuICAgIHRoaXMua2V5cGF0aCA9IGtleXBhdGg7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMub2JqZWN0UGF0aCA9IFtdO1xuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gdGhpcy5wYXJzZSgpO1xuICAgIHRoaXMua2V5ID0gcGFyc2VSZXN1bHQua2V5O1xuICAgIHRoaXMudG9rZW5zID0gcGFyc2VSZXN1bHQudG9rZW5zO1xuICAgIHRoaXMub2JqID0gdGhpcy5nZXRSb290T2JqZWN0KG9iaik7XG4gICAgdGhpcy50YXJnZXQgPSB0aGlzLnJlYWxpemUoKTtcbiAgICBpZiAoaXNPYmplY3QodGhpcy50YXJnZXQpKSB7XG4gICAgICBPYnNlcnZlci5zZXQodHJ1ZSwgdGhpcy5rZXksIHRoaXMudGFyZ2V0LCB0aGlzLmNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIHRoZSBrZXlwYXRoIHVzaW5nIHRoZSBpbnRlcmZhY2VzIGRlZmluZWQgb24gdGhlIHZpZXcuIFNldHMgdmFyaWFibGVzXG4gICAqIGZvciB0aGUgdG9rZW5pemVkIGtleXBhdGggYXMgd2VsbCBhcyB0aGUgZW5kIGtleS5cbiAgICovXG4gIHB1YmxpYyBwYXJzZSgpIHtcbiAgICBsZXQgcGF0aDogc3RyaW5nO1xuICAgIGxldCByb290OiBSb290O1xuXG4gICAgaWYgKCFPYnNlcnZlci5pbnRlcmZhY2VzIHx8ICFPYnNlcnZlci5pbnRlcmZhY2VzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgW09ic2VydmVyXSBNdXN0IGRlZmluZSBhdCBsZWFzdCBvbmUgYWRhcHRlciBpbnRlcmZhY2UuIGludGVyZmFjZXM6IFwiJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBPYnNlcnZlci5pbnRlcmZhY2VzXG4gICAgICAgICl9XCIgYWRhcHRlcnM6IFwiJHtKU09OLnN0cmluZ2lmeShPYnNlcnZlci5hZGFwdGVycyl9XCJgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh+T2JzZXJ2ZXIuaW50ZXJmYWNlcy5pbmRleE9mKHRoaXMua2V5cGF0aFswXSkpIHtcbiAgICAgIHJvb3QgPSB0aGlzLmtleXBhdGhbMF07XG4gICAgICBwYXRoID0gdGhpcy5rZXlwYXRoLnN1YnN0cigxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdCA9IE9ic2VydmVyLnJvb3RJbnRlcmZhY2U7XG4gICAgICBwYXRoID0gdGhpcy5rZXlwYXRoO1xuICAgIH1cblxuICAgIHRoaXMudG9rZW5zID0gT2JzZXJ2ZXIudG9rZW5pemUocGF0aCwgcm9vdCk7XG5cbiAgICBpZiAoIXRoaXMudG9rZW5zLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW09ic2VydmVyXSBObyB0b2tlbnNcIik7XG4gICAgfVxuXG4gICAgdGhpcy5rZXkgPSB0aGlzLnRva2Vucy5wb3AoKSBhcyBLZXk7XG5cbiAgICByZXR1cm4ge1xuICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgIHRva2VuczogdGhpcy50b2tlbnMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFsaXplcyB0aGUgZnVsbCBrZXlwYXRoLCBhdHRhY2hpbmcgb2JzZXJ2ZXJzIGZvciBldmVyeSBrZXkgYW5kIGNvcnJlY3RpbmdcbiAgICogb2xkIG9ic2VydmVycyB0byBhbnkgY2hhbmdlZCBvYmplY3RzIGluIHRoZSBrZXlwYXRoLlxuICAgKi9cbiAgcHVibGljIHJlYWxpemUoKSB7XG4gICAgbGV0IGN1cnJlbnQ6IE9iaiA9IHRoaXMub2JqO1xuICAgIGxldCB1bnJlYWNoZWQgPSAtMTtcbiAgICBsZXQgcHJldjtcbiAgICBsZXQgdG9rZW47XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB0b2tlbiA9IHRoaXMudG9rZW5zW2luZGV4XTtcbiAgICAgIGlmIChpc09iamVjdChjdXJyZW50KSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0UGF0aFtpbmRleF0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBwcmV2ID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XTtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gcHJldikge1xuICAgICAgICAgICAgT2JzZXJ2ZXIuc2V0KGZhbHNlLCB0b2tlbiwgcHJldiwgdGhpcyk7XG4gICAgICAgICAgICBPYnNlcnZlci5zZXQodHJ1ZSwgdG9rZW4sIGN1cnJlbnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9ic2VydmVyLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IE9ic2VydmVyLmdldCh0b2tlbiwgY3VycmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodW5yZWFjaGVkID09PSAtMSkge1xuICAgICAgICAgIHVucmVhY2hlZCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSB0aGlzLm9iamVjdFBhdGhbaW5kZXhdO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgIE9ic2VydmVyLnNldChmYWxzZSwgdG9rZW4sIHByZXYsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh1bnJlYWNoZWQgIT09IC0xKSB7XG4gICAgICB0aGlzLm9iamVjdFBhdGguc3BsaWNlKHVucmVhY2hlZCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGtleXBhdGguIFRoaXMgaXMgY2FsbGVkIHdoZW4gYW55IGludGVybWVkaWFyeSBrZXkgaXMgY2hhbmdlZC5cbiAgICovXG4gIHB1YmxpYyBzeW5jKCkge1xuICAgIGxldCBvbGRWYWx1ZTtcbiAgICBsZXQgbmV3VmFsdWU7XG4gICAgY29uc3QgbmV4dCA9IHRoaXMucmVhbGl6ZSgpO1xuICAgIGlmIChuZXh0ICE9PSB0aGlzLnRhcmdldCkge1xuICAgICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICBPYnNlcnZlci5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc09iamVjdChuZXh0KSkge1xuICAgICAgICBPYnNlcnZlci5zZXQodHJ1ZSwgdGhpcy5rZXksIG5leHQsIHRoaXMuY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBvbGRWYWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbmV4dDtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSB8fCBBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrLnN5bmMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgIHRoaXMuY2FsbGJhY2suc3luYygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgY3VycmVudCBlbmQgdmFsdWUgb2YgdGhlIG9ic2VydmVkIGtleXBhdGguIFJldHVybnMgdW5kZWZpbmVkIGlmXG4gICAqIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUuXG4gICAqL1xuICBwdWJsaWMgdmFsdWUoKSB7XG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIE9ic2VydmVyLmdldCh0aGlzLmtleSwgdGhpcy50YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IGVuZCB2YWx1ZSBvZiB0aGUgb2JzZXJ2ZWQga2V5cGF0aC4gQ2FsbGluZyBzZXRWYWx1ZSB3aGVuXG4gICAqICB0aGUgZnVsbCBrZXlwYXRoIGlzIHVucmVhY2hhYmxlIGlzIGEgbm8tb3AuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHNldFZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoaXNPYmplY3QodGhpcy50YXJnZXQpKSB7XG4gICAgICBPYnNlcnZlci5hZGFwdGVyc1t0aGlzLmtleS5pXS5zZXQodGhpcy50YXJnZXQsIHRoaXMua2V5LnBhdGgsIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5vYnNlcnZlcyB0aGUgZW50aXJlIGtleXBhdGguXG4gICAqL1xuICBwdWJsaWMgdW5vYnNlcnZlKCkge1xuICAgIGxldCBvYmo6IE9iajtcbiAgICBsZXQgdG9rZW47XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB0b2tlbiA9IHRoaXMudG9rZW5zW2luZGV4XTtcbiAgICAgIG9iaiA9IHRoaXMub2JqZWN0UGF0aFtpbmRleF07XG4gICAgICBpZiAob2JqKSB7XG4gICAgICAgIE9ic2VydmVyLnNldChmYWxzZSwgdG9rZW4sIG9iaiwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgT2JzZXJ2ZXIuc2V0KGZhbHNlLCB0aGlzLmtleSwgdGhpcy50YXJnZXQsIHRoaXMuY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiB0cmF2ZXJzZSB0aGUgc2NvcGUgY2hhaW4gdG8gZmluZCB0aGUgc2NvcGUgd2hpY2ggaGFzIHRoZSByb290IHByb3BlcnR5XG4gICAqIGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQgaW4gY2hhaW4sIHJldHVybnMgdGhlIHJvb3Qgc2NvcGVcbiAgICogQHBhcmFtIG9ialxuICAgKi9cbiAgcHVibGljIGdldFJvb3RPYmplY3Qob2JqOiBPYmopIHtcbiAgICBsZXQgcm9vdFByb3A7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgaWYgKCFvYmouJHBhcmVudCkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoKSB7XG4gICAgICByb290UHJvcCA9IHRoaXMudG9rZW5zWzBdLnBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RQcm9wID0gdGhpcy5rZXkucGF0aDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gb2JqO1xuICAgIHdoaWxlIChjdXJyZW50LiRwYXJlbnQgJiYgY3VycmVudFtyb290UHJvcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBhcnNlZERlY2xhcmF0aW9ucyB9IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBERUNMQVJBVElPTl9TUExJVCB9IGZyb20gXCIuL2NvbnN0YW50cy9wYXJzZXIuanNcIjtcblxuLyoqXG4gKiBQYXJzZXMgYW4gYXR0cmlidXRlIGFyZ3VtZW50IHRvIGhpcyBrZXlwYXRoIGFuZCBzcGxpdHMgdGhlIGZvcm1hdHRlciBuYW1lcyBpbnRvIGEgcGlwZXMgYXJyYXkuXG4gKiBAcGFyYW0gZGVjbGFyYXRpb24gZS5nLiBgb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKlxuICogaWYgZGVjbGFyYXRpb24gaXNcbiAqIGBgYFxuICogb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKiBgYFxuICpcbiAqIHRoZSByZXN1bHQgaXNcbiAqIGBgYFxuICoge1xuICogICAga2V5cGF0aDogXCJvYmplY3QuZGF0YVwiLFxuICogICAgcGlwZXM6IFtcInZhbGlkYXRlXCIsIFwianNvblwiXVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uOiBzdHJpbmcpOiBQYXJzZWREZWNsYXJhdGlvbnMge1xuICBjb25zdCBtYXRjaGVzID0gZGVjbGFyYXRpb24ubWF0Y2goREVDTEFSQVRJT05fU1BMSVQpO1xuICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIltWaWV3XSBObyBtYXRjaGVzXCIpO1xuICB9XG4gIGNvbnN0IHBpcGVzID0gbWF0Y2hlcy5tYXAoKHN0cjogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHN0ci50cmltKCk7XG4gIH0pO1xuICBjb25zdCBrZXlwYXRoID0gcGlwZXMuc2hpZnQoKSB8fCB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIHtcbiAgICBrZXlwYXRoLFxuICAgIHBpcGVzLFxuICB9IGFzIFBhcnNlZERlY2xhcmF0aW9ucztcbn1cbiIsImltcG9ydCB7IERhdGFFbGVtZW50IH0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IE11c3RhY2hlVGV4dEJpbmRlciB9IGZyb20gXCIuL2JpbmRlcnMvbXVzdGFjaGUtdGV4dC5iaW5kZXIuanNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi92aWV3LmpzXCI7XG5pbXBvcnQgeyBCSU5ESU5HIH0gZnJvbSBcIi4vY29uc3RhbnRzL3BhcnNlci5qc1wiO1xuaW1wb3J0IHsgcGFyc2VUZW1wbGF0ZSB9IGZyb20gXCIuL3BhcnNlLXRlbXBsYXRlLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5vZGUoXG4gIHZpZXc6IFZpZXcsXG4gIG5vZGU6IERhdGFFbGVtZW50LFxuICB0ZW1wbGF0ZURlbGltaXRlcnM6IEFycmF5PHN0cmluZz5cbikge1xuICAvKiogSWYgdHJ1ZSBzdG9wIC8gYmxvY2sgdGhlIHBhcnNlTm9kZSAgcmVjdXJzaW9uICovXG4gIGxldCBibG9ja1JlY3Vyc2lvbiA9IGZhbHNlO1xuXG4gIG5vZGUgPSBub2RlIGFzIERhdGFFbGVtZW50O1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICBsZXQgdG9rZW5zID0gbnVsbDtcblxuICAgIGlmIChub2RlLmRhdGEpIHtcbiAgICAgIHRva2VucyA9IHBhcnNlVGVtcGxhdGUobm9kZS5kYXRhLCB0ZW1wbGF0ZURlbGltaXRlcnMpO1xuICAgIH1cblxuICAgIGlmICh0b2tlbnMgJiYgdG9rZW5zLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b2tlbi52YWx1ZSk7XG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgJiYgdGV4dCAmJiBub2RlKSB7XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZXh0LCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gQklORElORykge1xuICAgICAgICAgIC8vIFRPRE8gZml4IGNpcmN1bGFyIGRlcGVuZGVuY3lcbiAgICAgICAgICB2aWV3LmJ1aWxkQmluZGluZyh0ZXh0LCBudWxsLCB0b2tlbi52YWx1ZSwgTXVzdGFjaGVUZXh0QmluZGVyLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGJsb2NrUmVjdXJzaW9uID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIC8vIHRyYXZlcnNlIGJpbmRzIGF0dHJpYnV0ZXMgYW5kIGNvbXBvbmVudHNcbiAgICBibG9ja1JlY3Vyc2lvbiA9IHZpZXcudHJhdmVyc2Uobm9kZSk7XG4gIH1cbiAgaWYgKCFibG9ja1JlY3Vyc2lvbikge1xuICAgIGlmIChub2RlLmNoaWxkTm9kZXMgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgIHBhcnNlTm9kZSh2aWV3LCBjaGlsZE5vZGUgYXMgRGF0YUVsZW1lbnQsIHRlbXBsYXRlRGVsaW1pdGVycyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFRva2VucyB9IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBCSU5ESU5HLCBURVhUIH0gZnJvbSBcIi4vY29uc3RhbnRzL3BhcnNlci5qc1wiO1xuXG4vKipcbiAqIFRlbXBsYXRlIHBhcnNlciBhbmQgdG9rZW5pemVyIGZvciB7eyBtdXN0YWNoZS1zdHlsZSB9fSB0ZXh0IGNvbnRlbnQgYmluZGluZ3MuXG4gKiBQYXJzZXMgdGhlIHRlbXBsYXRlIGFuZCByZXR1cm5zIGEgc2V0IG9mIHRva2Vucywgc2VwYXJhdGluZyBzdGF0aWMgcG9ydGlvbnNcbiAqIG9mIHRleHQgZnJvbSBiaW5kaW5nIGRlY2xhcmF0aW9ucy5cbiAqIEBwYXJhbSB0ZW1wbGF0ZVxuICogQHBhcmFtIGRlbGltaXRlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGVtcGxhdGUodGVtcGxhdGU6IHN0cmluZywgZGVsaW1pdGVyczogc3RyaW5nW10pIHtcbiAgbGV0IHRva2VuczogVG9rZW5zW10gfCBudWxsID0gbnVsbDtcbiAgY29uc3QgbGVuZ3RoID0gdGVtcGxhdGUubGVuZ3RoO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgY29uc3Qgb3BlbiA9IGRlbGltaXRlcnNbMF07XG4gIGNvbnN0IGNsb3NlID0gZGVsaW1pdGVyc1sxXTtcblxuICB3aGlsZSAobGFzdEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgaW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKG9wZW4sIGxhc3RJbmRleCk7XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgIHZhbHVlOiB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRva2VucyA9IHRva2VucyB8fCBbXTtcbiAgICAgIGlmIChpbmRleCA+IDAgJiYgbGFzdEluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFRFWFQsXG4gICAgICAgICAgdmFsdWU6IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyBvcGVuLmxlbmd0aDtcbiAgICAgIGluZGV4ID0gdGVtcGxhdGUuaW5kZXhPZihjbG9zZSwgbGFzdEluZGV4KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBjb25zdCBzdWJzdHJpbmcgPSB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXggLSBvcGVuLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gVEVYVCkge1xuICAgICAgICAgIGxhc3RUb2tlbi52YWx1ZSArPSBzdWJzdHJpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogVEVYVCxcbiAgICAgICAgICAgIHZhbHVlOiBzdWJzdHJpbmcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWUgPSB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXgsIGluZGV4KS50cmltKCk7XG5cbiAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogQklORElORyxcbiAgICAgICAgdmFsdWUsXG4gICAgICB9KTtcblxuICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyBjbG9zZS5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cbiIsImltcG9ydCB7XG4gIEZvcm1hdHRlcnMsXG4gIEJpbmRlcnMsXG4gIEFkYXB0ZXJzLFxuICBSb290LFxuICBDb21wb25lbnRzLFxuICBPcHRpb25zLFxufSBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGFyc2VUZW1wbGF0ZSB9IGZyb20gXCIuL3BhcnNlLXRlbXBsYXRlLmpzXCI7XG5pbXBvcnQgeyBwYXJzZVR5cGUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvaW5kZXguanNcIjtcbmltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuL2JpbmRlci5qc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuL3ZpZXcuanNcIjtcbmltcG9ydCB7IE9ic2VydmVyIH0gZnJvbSBcIi4vb2JzZXJ2ZXIuanNcIjtcbmltcG9ydCB7IE1vZHVsZXNTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvbW9kdWxlLnNlcnZpY2UuanNcIjtcbmltcG9ydCB7IExpZmVjeWNsZVNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9saWZlY3ljbGUuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUmliYSB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXIsIGNhbGxzIHRoZSBmdW5jdGlvbiBkZWZpbmVkIGluIGhpcyBiaW5kZXJcbiAgICogQHNlZSBCaW5kaW5nLmV2ZW50SGFuZGxlclxuICAgKiBAcGFyYW0gZWwgVGhlIGVsZW1lbnQgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgZnJvbVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBoYW5kbGVyKFxuICAgIHRoaXM6IGFueSxcbiAgICBjb250ZXh0OiBhbnksXG4gICAgZXY6IEV2ZW50LFxuICAgIGJpbmRlcjogQmluZGVyLFxuICAgIGVsOiBIVE1MRWxlbWVudFxuICApIHtcbiAgICBpZiAoIXRoaXMgfHwgIXRoaXMuY2FsbCkge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGBbcnYtJHtiaW5kZXIudHlwZX09XCIke2JpbmRlci5rZXlwYXRofVwiXSBFdmVudCBoYW5kbGVyIFwiJHtiaW5kZXIua2V5cGF0aH1cIiBub3QgZm91bmQhXCJgXG4gICAgICApO1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvciwgYmluZGVyLCBlbCwgYmluZGVyLnZpZXcubW9kZWxzKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aGlzLmNhbGwoY29udGV4dCwgZXYsIGJpbmRlci52aWV3Lm1vZGVscywgZWwpO1xuICB9XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUmliYTtcblxuICBwdWJsaWMgbW9kdWxlOiBNb2R1bGVzU2VydmljZTtcblxuICBwdWJsaWMgbGlmZWN5Y2xlID0gTGlmZWN5Y2xlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXG4gIC8qKiBHbG9iYWwgYmluZGVycyAqL1xuICBwdWJsaWMgYmluZGVyczogQmluZGVyczxhbnk+ID0ge307XG5cbiAgLyoqIEdsb2JhbCBjb21wb25lbnRzLiAqL1xuICBwdWJsaWMgY29tcG9uZW50czogQ29tcG9uZW50cyA9IHt9O1xuXG4gIC8qKiBHbG9iYWwgZm9ybWF0dGVycy4gKi9cbiAgcHVibGljIGZvcm1hdHRlcnM6IEZvcm1hdHRlcnMgPSB7fTtcblxuICAvKiogR2xvYmFsIChzaWdodGdsYXNzKSBhZGFwdGVycy4gKi9cbiAgcHVibGljIGFkYXB0ZXJzOiBBZGFwdGVycyA9IHt9O1xuXG4gIHB1YmxpYyBwYXJzZVRlbXBsYXRlID0gcGFyc2VUZW1wbGF0ZTtcblxuICBwdWJsaWMgcGFyc2VUeXBlID0gcGFyc2VUeXBlO1xuXG4gIC8qKiBEZWZhdWx0IHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHB1YmxpYyB0ZW1wbGF0ZURlbGltaXRlcnMgPSBbXCJ7XCIsIFwifVwiXTtcblxuICAvKiogRGVmYXVsdCBzaWdodGdsYXNzIHJvb3QgaW50ZXJmYWNlLiAqL1xuICBwdWJsaWMgcm9vdEludGVyZmFjZSA9IFwiLlwiO1xuXG4gIC8qKiBQcmVsb2FkIGRhdGEgYnkgZGVmYXVsdC4gKi9cbiAgcHVibGljIHByZWxvYWREYXRhID0gdHJ1ZTtcblxuICAvKiogUmVtb3ZlIGJpbmRlciBhdHRyaWJ1dGVzIGFmdGVyIGJpbmRpbmcgKi9cbiAgcHVibGljIHJlbW92ZUJpbmRlckF0dHJpYnV0ZXMgPSB0cnVlOyAvLyBUT0RPIGZpeG1lIG9uIGZhbHNlOiBNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFxuXG4gIC8qKiBTdG9wIGJpbmRpbmcgb24gdGhpcyBub2RlIHR5cGVzICovXG4gIHB1YmxpYyBibG9ja05vZGVOYW1lcyA9IFtcIlNDUklQVFwiLCBcIlNUWUxFXCIsIFwiVEVNUExBVEVcIiwgXCJDT0RFXCJdO1xuXG4gIHB1YmxpYyBibG9ja1Vua25vd25DdXN0b21FbGVtZW50cyA9IHRydWU7XG5cbiAgLyoqIERlZmF1bHQgYXR0cmlidXRlIHByZWZpeC4gKi9cbiAgcHJpdmF0ZSBfcHJlZml4OiBzdHJpbmdbXSA9IFtcInJ2XCJdO1xuXG4gIC8qKiBEZWZhdWx0IGF0dHJpYnV0ZSBmdWxsIHByZWZpeC4gKi9cbiAgcHJpdmF0ZSBfZnVsbFByZWZpeDogc3RyaW5nW10gPSBbXCJydi1cIl07XG5cbiAgc2V0IHByZWZpeCh2YWx1ZTogc3RyaW5nW10pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX3ByZWZpeCA9IFtdO1xuICAgICAgdGhpcy5fZnVsbFByZWZpeCA9IFtdO1xuICAgICAgZm9yIChjb25zdCB2YWwgb2YgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcHJlZml4LnB1c2godmFsKTtcbiAgICAgICAgdGhpcy5fZnVsbFByZWZpeC5wdXNoKHZhbCArIFwiLVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgcHJlZml4KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlZml4O1xuICB9XG5cbiAgZ2V0IGZ1bGxQcmVmaXgoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9mdWxsUHJlZml4O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIFJpYmEuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vZHVsZSA9IG5ldyBNb2R1bGVzU2VydmljZShcbiAgICAgIHRoaXMuYmluZGVycyxcbiAgICAgIHRoaXMuY29tcG9uZW50cyxcbiAgICAgIHRoaXMuZm9ybWF0dGVycyxcbiAgICAgIHRoaXMuYWRhcHRlcnNcbiAgICApO1xuICAgIGlmIChSaWJhLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gUmliYS5pbnN0YW5jZTtcbiAgICB9XG4gICAgUmliYS5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2VzIGFuIG9iamVjdCBsaXRlcmFsIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgY29uZmlndXJlKG9wdGlvbnM6IFBhcnRpYWw8T3B0aW9ucz4pIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtvcHRpb24sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zKSkge1xuICAgICAgc3dpdGNoIChvcHRpb24pIHtcbiAgICAgICAgY2FzZSBcImJpbmRlcnNcIjpcbiAgICAgICAgICB0aGlzLmJpbmRlcnMgPSB7IC4uLnRoaXMuYmluZGVycywgLi4uKHZhbHVlIGFzIEJpbmRlcnMpIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmb3JtYXR0ZXJzXCI6XG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXJzID0geyAuLi50aGlzLmZvcm1hdHRlcnMsIC4uLih2YWx1ZSBhcyBGb3JtYXR0ZXJzKSB9O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY29tcG9uZW50c1wiOlxuICAgICAgICAgIHRoaXMuY29tcG9uZW50cyA9IHsgLi4udGhpcy5jb21wb25lbnRzLCAuLi4odmFsdWUgYXMgQ29tcG9uZW50cykgfTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFkYXB0ZXJzXCI6XG4gICAgICAgICAgdGhpcy5hZGFwdGVycyA9IHsgLi4udGhpcy5hZGFwdGVycywgLi4uKHZhbHVlIGFzIEFkYXB0ZXJzKSB9O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicHJlZml4XCI6XG4gICAgICAgICAgdGhpcy5wcmVmaXggPSB2YWx1ZSBhcyBzdHJpbmdbXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInBhcnNlVGVtcGxhdGVcIjpcbiAgICAgICAgICB0aGlzLnBhcnNlVGVtcGxhdGUgPSB2YWx1ZSBhcyBhbnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJwYXJzZVR5cGVcIjpcbiAgICAgICAgICB0aGlzLnBhcnNlVHlwZSA9IHZhbHVlIGFzIGFueTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRlbXBsYXRlRGVsaW1pdGVyc1wiOlxuICAgICAgICAgIHRoaXMudGVtcGxhdGVEZWxpbWl0ZXJzID0gdmFsdWUgYXMgc3RyaW5nW107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyb290SW50ZXJmYWNlXCI6XG4gICAgICAgICAgdGhpcy5yb290SW50ZXJmYWNlID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicHJlbG9hZERhdGFcIjpcbiAgICAgICAgICB0aGlzLnByZWxvYWREYXRhID0gdmFsdWUgYXMgYm9vbGVhbjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJsb2NrTm9kZU5hbWVzXCI6XG4gICAgICAgICAgdGhpcy5ibG9ja05vZGVOYW1lcyA9IHZhbHVlIGFzIHN0cmluZ1tdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYmxvY2tVbmtub3duQ3VzdG9tRWxlbWVudHNcIjpcbiAgICAgICAgICB0aGlzLmJsb2NrVW5rbm93bkN1c3RvbUVsZW1lbnRzID0gQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiT3B0aW9uIG5vdCBzdXBwb3J0ZWRcIiwgb3B0aW9uLCB2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFZpZXdPcHRpb25zKG9wdGlvbnM/OiBQYXJ0aWFsPE9wdGlvbnM+KSB7XG4gICAgY29uc3Qgdmlld09wdGlvbnM6IFBhcnRpYWw8T3B0aW9ucz4gPSB7XG4gICAgICAvLyBFWFRFTlNJT05TXG4gICAgICBhZGFwdGVyczoge30gYXMgQWRhcHRlcnMsXG4gICAgICBiaW5kZXJzOiB7fSBhcyBCaW5kZXJzPGFueT4sXG4gICAgICBjb21wb25lbnRzOiB7fSBhcyBDb21wb25lbnRzLFxuICAgICAgZm9ybWF0dGVyczoge30gYXMgRm9ybWF0dGVycyxcblxuICAgICAgLy8gb3RoZXJcbiAgICAgIGF0dHJpYnV0ZUJpbmRlcnM6IFtdLFxuXG4gICAgICAvLyBzaWdodGdsYXNzXG4gICAgICByb290SW50ZXJmYWNlOiB7fSBhcyBSb290LFxuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmlld09wdGlvbnMuYmluZGVycyA9IHsgLi4udmlld09wdGlvbnMuYmluZGVycywgLi4ub3B0aW9ucy5iaW5kZXJzIH07XG4gICAgICB2aWV3T3B0aW9ucy5mb3JtYXR0ZXJzID0ge1xuICAgICAgICAuLi52aWV3T3B0aW9ucy5mb3JtYXR0ZXJzLFxuICAgICAgICAuLi5vcHRpb25zLmZvcm1hdHRlcnMsXG4gICAgICB9O1xuICAgICAgdmlld09wdGlvbnMuY29tcG9uZW50cyA9IHtcbiAgICAgICAgLi4udmlld09wdGlvbnMuY29tcG9uZW50cyxcbiAgICAgICAgLi4ub3B0aW9ucy5jb21wb25lbnRzLFxuICAgICAgfTtcbiAgICAgIHZpZXdPcHRpb25zLmFkYXB0ZXJzID0ge1xuICAgICAgICAuLi52aWV3T3B0aW9ucy5hZGFwdGVycyxcbiAgICAgICAgLi4ub3B0aW9ucy5hZGFwdGVycyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUHJlZml4XG4gICAgaWYgKG9wdGlvbnM/LnByZWZpeCAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnM/LnByZWZpeCkpIHtcbiAgICAgIHZpZXdPcHRpb25zLnByZWZpeCA9IFtdO1xuICAgICAgdmlld09wdGlvbnMuZnVsbFByZWZpeCA9IFtdO1xuICAgICAgZm9yIChjb25zdCBwcmVmaXggb2Ygb3B0aW9ucy5wcmVmaXgpIHtcbiAgICAgICAgdmlld09wdGlvbnMucHJlZml4LnB1c2gocHJlZml4KTtcbiAgICAgICAgdmlld09wdGlvbnMuZnVsbFByZWZpeC5wdXNoKHByZWZpeCArIFwiLVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmlld09wdGlvbnMucHJlZml4ID0gdGhpcy5wcmVmaXg7XG4gICAgICB2aWV3T3B0aW9ucy5mdWxsUHJlZml4ID0gdGhpcy5mdWxsUHJlZml4O1xuICAgIH1cblxuICAgIHZpZXdPcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyA9XG4gICAgICBvcHRpb25zPy50ZW1wbGF0ZURlbGltaXRlcnMgfHwgdGhpcy50ZW1wbGF0ZURlbGltaXRlcnM7XG4gICAgdmlld09wdGlvbnMucm9vdEludGVyZmFjZSA9IG9wdGlvbnM/LnJvb3RJbnRlcmZhY2UgfHwgdGhpcy5yb290SW50ZXJmYWNlO1xuICAgIHZpZXdPcHRpb25zLnJlbW92ZUJpbmRlckF0dHJpYnV0ZXMgPVxuICAgICAgdHlwZW9mIG9wdGlvbnM/LnJlbW92ZUJpbmRlckF0dHJpYnV0ZXMgPT09IFwiYm9vbGVhblwiXG4gICAgICAgID8gb3B0aW9ucy5yZW1vdmVCaW5kZXJBdHRyaWJ1dGVzXG4gICAgICAgIDogdGhpcy5yZW1vdmVCaW5kZXJBdHRyaWJ1dGVzO1xuICAgIHZpZXdPcHRpb25zLmJsb2NrTm9kZU5hbWVzID0gb3B0aW9ucz8uYmxvY2tOb2RlTmFtZXMgfHwgdGhpcy5ibG9ja05vZGVOYW1lcztcbiAgICB2aWV3T3B0aW9ucy5wcmVsb2FkRGF0YSA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucz8ucHJlbG9hZERhdGEgPT09IFwiYm9vbGVhblwiXG4gICAgICAgID8gb3B0aW9ucy5wcmVsb2FkRGF0YVxuICAgICAgICA6IHRoaXMucHJlbG9hZERhdGE7XG4gICAgdmlld09wdGlvbnMuaGFuZGxlciA9IG9wdGlvbnM/LmhhbmRsZXIgfHwgUmliYS5oYW5kbGVyO1xuXG4gICAgLy8gbWVyZ2UgZXh0ZW5zaW9uc1xuICAgIHZpZXdPcHRpb25zLmJpbmRlcnMgPSB7IC4uLnRoaXMuYmluZGVycywgLi4udmlld09wdGlvbnMuYmluZGVycyB9O1xuICAgIHZpZXdPcHRpb25zLmZvcm1hdHRlcnMgPSB7IC4uLnRoaXMuZm9ybWF0dGVycywgLi4udmlld09wdGlvbnMuZm9ybWF0dGVycyB9O1xuICAgIHZpZXdPcHRpb25zLmNvbXBvbmVudHMgPSB7IC4uLnRoaXMuY29tcG9uZW50cywgLi4udmlld09wdGlvbnMuY29tcG9uZW50cyB9O1xuICAgIHZpZXdPcHRpb25zLmFkYXB0ZXJzID0geyAuLi50aGlzLmFkYXB0ZXJzLCAuLi52aWV3T3B0aW9ucy5hZGFwdGVycyB9O1xuXG4gICAgaWYgKCF2aWV3T3B0aW9ucy5hdHRyaWJ1dGVCaW5kZXJzKSB7XG4gICAgICB2aWV3T3B0aW9ucy5hdHRyaWJ1dGVCaW5kZXJzID0gW107XG4gICAgfVxuXG4gICAgLy8gZ2V0IGFsbCBhdHRyaWJ1dGVCaW5kZXJzIGZyb20gYXZhaWxhYmxlIGJpbmRlcnNcbiAgICBpZiAodmlld09wdGlvbnMuYmluZGVycykge1xuICAgICAgY29uc3QgYXR0cmlidXRlQmluZGVycyA9IE9iamVjdC5rZXlzKHZpZXdPcHRpb25zLmJpbmRlcnMpLmZpbHRlcihcbiAgICAgICAgKGtleSkgPT4ga2V5LmluZGV4T2YoXCIqXCIpID49IDEgLy8gU2hvdWxkIGNvbnRhaW4sIGJ1dCBub3Qgc3RhcnQgd2l0aCwgKlxuICAgICAgKTtcbiAgICAgIHZpZXdPcHRpb25zLmF0dHJpYnV0ZUJpbmRlcnMucHVzaCguLi5hdHRyaWJ1dGVCaW5kZXJzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmlld09wdGlvbnMgYXMgT3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kcyBzb21lIGRhdGEgdG8gYSB0ZW1wbGF0ZSAvIGVsZW1lbnQuIFJldHVybnMgYSByaWJhLlZpZXcgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBlbFxuICAgKiBAcGFyYW0gbW9kZWxzIFRoZSByb290XG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBwdWJsaWMgYmluZChcbiAgICBlbDogSFRNTEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50IHwgSFRNTFVua25vd25FbGVtZW50W10sXG4gICAgbW9kZWxzOiBhbnkgPSB7fSxcbiAgICBvcHRpb25zPzogT3B0aW9uc1xuICApIHtcbiAgICBjb25zdCB2aWV3T3B0aW9uczogT3B0aW9ucyA9IHRoaXMuZ2V0Vmlld09wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBPYnNlcnZlci51cGRhdGVPcHRpb25zKHZpZXdPcHRpb25zKTtcblxuICAgIGNvbnN0IHZpZXcgPSBuZXcgVmlldyhlbCwgbW9kZWxzLCB2aWV3T3B0aW9ucyk7XG4gICAgdmlldy5iaW5kKCk7XG4gICAgcmV0dXJuIHZpZXc7XG4gIH1cbn1cblxuKHdpbmRvdyBhcyBhbnkpLlJpYmEgPSBSaWJhO1xuIiwiaW1wb3J0IHtcbiAgQWRhcHRlcixcbiAgQWRhcHRlcnMsXG4gIE1vZHVsZUVsZW1lbnRUeXBlLFxuICBBbnlDb25zdHJ1Y3Rvcixcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBNb2R1bGVFbGVtZW50U2VydmljZSB9IGZyb20gXCIuL21vZHVsZS1lbGVtZW50LnNlcnZpY2UuanNcIjtcbmltcG9ydCB7IE9ic2VydmVyIH0gZnJvbSBcIi4uL29ic2VydmVyLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBBZGFwdGVyU2VydmljZVxuICBleHRlbmRzIE1vZHVsZUVsZW1lbnRTZXJ2aWNlXG4gIGltcGxlbWVudHMgQW55Q29uc3RydWN0b3JcbntcbiAgcHJvdGVjdGVkIHR5cGU6IE1vZHVsZUVsZW1lbnRUeXBlID0gXCJhZGFwdGVyXCI7XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhZGFwdGVyczogQWRhcHRlcnMpIHtcbiAgICBzdXBlcihhZGFwdGVycyk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgYWRhcHRlciB3aXRoIGhpcyBuYW1lXG4gICAqIEBwYXJhbSBhZGFwdGVyXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0KFxuICAgIGFkYXB0ZXI6IEFkYXB0ZXIsXG4gICAgZmFsbGJhY2tOYW1lPzogc3RyaW5nLFxuICAgIGZvcmNlRmFsbGJhY2sgPSBmYWxzZVxuICApOiBBZGFwdGVycyB7XG4gICAgY29uc3QgbmFtZSA9IGZvcmNlRmFsbGJhY2tcbiAgICAgID8gZmFsbGJhY2tOYW1lIHx8IGFkYXB0ZXIubmFtZVxuICAgICAgOiBhZGFwdGVyLm5hbWUgfHwgZmFsbGJhY2tOYW1lO1xuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWRhcHRlciBuYW1lIG5vdCBmb3VuZCFcIik7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudHNbbmFtZV0gPSBhZGFwdGVyO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGFkYXB0ZXJzOiB0aGlzLmVsZW1lbnRzIGFzIGFueSBhcyBBZGFwdGVycyB9O1xuICAgIE9ic2VydmVyLnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlcnMsIE1vZHVsZUVsZW1lbnRUeXBlLCBDbGFzc09mQmluZGVyIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBNb2R1bGVFbGVtZW50U2VydmljZSB9IGZyb20gXCIuL21vZHVsZS1lbGVtZW50LnNlcnZpY2UuanNcIjtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQmluZGVyc1NlcnZpY2UgZXh0ZW5kcyBNb2R1bGVFbGVtZW50U2VydmljZTxDbGFzc09mQmluZGVyPiB7XG4gIHByb3RlY3RlZCB0eXBlOiBNb2R1bGVFbGVtZW50VHlwZSA9IFwiYmluZGVyXCI7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBiaW5kZXJzO1xuICAgKi9cbiAgY29uc3RydWN0b3IoYmluZGVyczogQmluZGVycykge1xuICAgIHN1cGVyKGJpbmRlcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGJpbmRlclxuICAgKiBAcGFyYW0gYmluZGVyXG4gICAqIEBwYXJhbSBuYW1lICBPdmVyd3JpdGVzIHRoZSBuYW1lIHRvIGFjY2VzcyB0aGUgYmluZGVyIG92ZXJcbiAgICovXG4gIHB1YmxpYyByZWdpc3QoXG4gICAgQmluZGVyOiBDbGFzc09mQmluZGVyLFxuICAgIGZhbGxiYWNrTmFtZT86IHN0cmluZyxcbiAgICBmb3JjZUZhbGxiYWNrID0gZmFsc2VcbiAgKSB7XG4gICAgaWYgKCFCaW5kZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIEJpbmRlciBwYXNzZWQgdG8gcmVnaXN0ZXIhXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWUgPSBmb3JjZUZhbGxiYWNrXG4gICAgICA/IGZhbGxiYWNrTmFtZSB8fCBCaW5kZXIua2V5XG4gICAgICA6IEJpbmRlci5rZXkgfHwgZmFsbGJhY2tOYW1lO1xuXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCaW5kZXIgbmFtZSBub3QgZm91bmQhXCIpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHNbbmFtZV0gPSBCaW5kZXI7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudHMsIE1vZHVsZUVsZW1lbnRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50L2luZGV4LmpzXCI7XG5pbXBvcnQgeyBNb2R1bGVFbGVtZW50U2VydmljZSB9IGZyb20gXCIuL21vZHVsZS1lbGVtZW50LnNlcnZpY2UuanNcIjtcblxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFNlcnZpY2UgZXh0ZW5kcyBNb2R1bGVFbGVtZW50U2VydmljZSB7XG4gIHByb3RlY3RlZCB0eXBlOiBNb2R1bGVFbGVtZW50VHlwZSA9IFwiY29tcG9uZW50c1wiO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50c1xuICAgKi9cbiAgY29uc3RydWN0b3IoY29tcG9uZW50czogQ29tcG9uZW50cykge1xuICAgIHN1cGVyKGNvbXBvbmVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGNvbXBvbmVudCB3aXRoIGhpcyBuYW1lXG4gICAqIEBwYXJhbSBjb21wb25lbnRcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHB1YmxpYyByZWdpc3QoXG4gICAgY29tcG9uZW50OiB0eXBlb2YgQ29tcG9uZW50LFxuICAgIGZhbGxiYWNrTmFtZT86IHN0cmluZyxcbiAgICBmb3JjZUZhbGxiYWNrID0gZmFsc2VcbiAgKTogQ29tcG9uZW50cyB7XG4gICAgY29uc3QgbmFtZSA9IGZvcmNlRmFsbGJhY2tcbiAgICAgID8gZmFsbGJhY2tOYW1lIHx8IGNvbXBvbmVudC50YWdOYW1lXG4gICAgICA6IGNvbXBvbmVudC50YWdOYW1lIHx8IGZhbGxiYWNrTmFtZTtcblxuICAgIGlmICghbmFtZSkge1xuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcihcIkNvbXBvbmVudCBuYW1lIG5vdCBmb3VuZCFcIiksIGNvbXBvbmVudCk7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50cztcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzW25hbWVdID0gY29tcG9uZW50O1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb3JlTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQ29yZVNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgc3RhdGljIF9vcHRpb25zOiBDb3JlTW9kdWxlT3B0aW9ucyA9IHt9O1xuICBwdWJsaWMgc3RhdGljIGluc3RhbmNlPzogQ29yZVNlcnZpY2U7XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiovXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFNpbmdsZXRvbigpIHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFNpbmdsZXRvbiBvZiBDb3JlU2VydmljZSBub3QgZGVmaW5lZCwgcGxlYXNlIGNhbGwgc2V0U2luZ2xldG9uIGZpcnN0IWBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRTaW5nbGV0b24ob3B0aW9uczogQ29yZU1vZHVsZU9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpbmdsZXRvbiBvZiBDb3JlU2VydmljZSBhbHJlYWR5IGRlZmluZWQhYCk7XG4gICAgfVxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIsIEZvcm1hdHRlcnMgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IE1vZHVsZUVsZW1lbnRTZXJ2aWNlIH0gZnJvbSBcIi4vbW9kdWxlLWVsZW1lbnQuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgRm9ybWF0dGVyU2VydmljZSBleHRlbmRzIE1vZHVsZUVsZW1lbnRTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIHR5cGU6IFwiYmluZGVyXCIgfCBcImZvcm1hdHRlclwiIHwgXCJjb21wb25lbnRzXCIgfCBcInNlcnZpY2VzXCIgPVxuICAgIFwiZm9ybWF0dGVyXCI7XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihmb3JtYXR0ZXJzOiBGb3JtYXR0ZXJzKSB7XG4gICAgc3VwZXIoZm9ybWF0dGVycyk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgZm9ybWF0dGVyIHdpdGggaGlzIG5hbWVcbiAgICogQHBhcmFtIGZvcm1hdHRlclxuICAgKiBAcGFyYW0gbmFtZVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdChcbiAgICBmb3JtYXR0ZXI6IEZvcm1hdHRlcixcbiAgICBmYWxsYmFja05hbWU/OiBzdHJpbmcsXG4gICAgZm9yY2VGYWxsYmFjayA9IGZhbHNlXG4gICk6IEZvcm1hdHRlcnMge1xuICAgIGNvbnN0IG5hbWUgPSBmb3JjZUZhbGxiYWNrXG4gICAgICA/IGZhbGxiYWNrTmFtZSB8fCBmb3JtYXR0ZXIubmFtZVxuICAgICAgOiBmb3JtYXR0ZXIubmFtZSB8fCBmYWxsYmFja05hbWU7XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZvcm1hdHRlciBuYW1lIG5vdCBmb3VuZCFcIik7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50c1tuYW1lXSA9IGZvcm1hdHRlcjtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cztcbiAgfVxufVxuIiwiaW1wb3J0IHsgZXh0ZW5kLCBpc0pzb24gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuaW1wb3J0IHsgSHR0cE1ldGhvZCB9IGZyb20gXCIuLi90eXBlcy9odHRwLW1ldGhvZC5qc1wiO1xuaW1wb3J0IHsgSHR0cFNlcnZpY2VPcHRpb25zLCBIdHRwU2VydmljZVJlc3BvbnNlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBIdHRwU2VydmljZSB7XG4gIC8qKlxuICAgKiBTZXQgaGVhZGVyIGZvciBlYWNoIHJlcXVlc3RcbiAgICogQHBhcmFtIG5hbWUgSGVhZGVyIG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIEhlYWRlciB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzZXRSZXF1ZXN0SGVhZGVyRWFjaFJlcXVlc3QobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fcmVxdWVzdEhlYWRlcnNFYWNoUmVxdWVzdC5wdXNoKHtcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIEpTT04tZW5jb2RlZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEdFVCBIVFRQIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAqIEBwYXJhbSBkYXRhIEEgcGxhaW4gb2JqZWN0IG9yIHN0cmluZyB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSByZXF1ZXN0LlxuICAgKiBAc2VlIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vanF1ZXJ5LmdldGpzb24vXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldEpTT048VCA9IGFueT4oXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgZGF0YT86IGFueSxcbiAgICBoZWFkZXJzOiBhbnkgPSB7fSxcbiAgICBvcHRpb25zOiBIdHRwU2VydmljZU9wdGlvbnMgPSB7fVxuICApIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxUPih1cmwsIFwiR0VUXCIsIGRhdGEsIFwianNvblwiLCBoZWFkZXJzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIGEgSFRUUCBQT1NUIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAqIEBwYXJhbSBkYXRhIEEgcGxhaW4gb2JqZWN0IG9yIHN0cmluZyB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSBleHBlY3RlZCBmcm9tIHRoZSBzZXJ2ZXIuIERlZmF1bHQ6IEludGVsbGlnZW50IEd1ZXNzICh4bWwsIGpzb24sIHNjcmlwdCwgdGV4dCwgaHRtbCkuXG4gICAqIEBzZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9qcXVlcnkucG9zdC9cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgcG9zdDxUID0gYW55PihcbiAgICB1cmw6IHN0cmluZyxcbiAgICBkYXRhPzogYW55LFxuICAgIGRhdGFUeXBlPzogc3RyaW5nLFxuICAgIGhlYWRlcnM6IGFueSA9IHt9LFxuICAgIG9wdGlvbnM6IEh0dHBTZXJ2aWNlT3B0aW9ucyA9IHt9XG4gICkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFQ+KHVybCwgXCJQT1NUXCIsIGRhdGEsIGRhdGFUeXBlLCBoZWFkZXJzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZGVsZXRlPFQgPSBhbnk+KFxuICAgIHVybDogc3RyaW5nLFxuICAgIGRhdGE/OiBhbnksXG4gICAgZGF0YVR5cGU/OiBzdHJpbmcsXG4gICAgaGVhZGVyczogYW55ID0ge30sXG4gICAgb3B0aW9uczogSHR0cFNlcnZpY2VPcHRpb25zID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VD4odXJsLCBcIkRFTEVURVwiLCBkYXRhLCBkYXRhVHlwZSwgaGVhZGVycywgb3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIHB1dDxUID0gYW55PihcbiAgICB1cmw6IHN0cmluZyxcbiAgICBkYXRhPzogYW55LFxuICAgIGRhdGFUeXBlPzogc3RyaW5nLFxuICAgIGhlYWRlcnM6IGFueSA9IHt9LFxuICAgIG9wdGlvbnM6IEh0dHBTZXJ2aWNlT3B0aW9ucyA9IHt9XG4gICkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFQ+KHVybCwgXCJQVVRcIiwgZGF0YSwgZGF0YVR5cGUsIGhlYWRlcnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBIVFRQIEdFVCByZXF1ZXN0LlxuICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgKiBAcGFyYW0gZGF0YSBBIHBsYWluIG9iamVjdCBvciBzdHJpbmcgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIGRhdGFUeXBlIFRoZSB0eXBlIG9mIGRhdGEgZXhwZWN0ZWQgZnJvbSB0aGUgc2VydmVyLiBEZWZhdWx0OiBJbnRlbGxpZ2VudCBHdWVzcyAoeG1sLCBqc29uLCBzY3JpcHQsIHRleHQsIGh0bWwpLlxuICAgKiBAc2VlIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vanF1ZXJ5LmdldC9cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0PFQgPSBhbnk+KFxuICAgIHVybDogc3RyaW5nLFxuICAgIGRhdGE/OiBhbnksXG4gICAgZGF0YVR5cGU/OiBzdHJpbmcsXG4gICAgaGVhZGVyczogYW55ID0ge30sXG4gICAgb3B0aW9uczogSHR0cFNlcnZpY2VPcHRpb25zID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VD4odXJsLCBcIkdFVFwiLCBkYXRhLCBkYXRhVHlwZSwgaGVhZGVycywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRhdGFUeXBlIFRoZSB0eXBlIG9mIGRhdGEgZXhwZWN0ZWQgZnJvbSB0aGUgc2VydmVyLiBEZWZhdWx0OiBJbnRlbGxpZ2VudCBHdWVzcyAoeG1sLCBqc29uLCBzY3JpcHQsIHRleHQsIGh0bWwpLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwYXJzZURhdGFUeXBlKGRhdGFUeXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI/OiBzdHJpbmc7IEFjY2VwdD86IHN0cmluZyB9ID0ge307XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbiAgICBsZXQgYWNjZXB0ID0gXCIqLypcIjtcbiAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgY29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICAgICAgYWNjZXB0ID0gXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwieG1sXCI6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi94bWxcIjtcbiAgICAgICAgYWNjZXB0ID0gXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgY29udGVudFR5cGUgPSBcInRleHQvcGxhaW5cIjtcbiAgICAgICAgYWNjZXB0ID0gXCJ0ZXh0L3BsYWluXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgY29udGVudFR5cGUgPSBcInRleHQvaHRtbFwiO1xuICAgICAgICBhY2NlcHQgPSBcInRleHQvaHRtbFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJmb3JtXCI6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBjYXNlIFwibXVsdGktZm9ybVwiOlxuICAgICAgLy8gICBjb250ZW50VHlwZSA9IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiO1xuICAgICAgLy8gICBicmVhaztcbiAgICB9XG4gICAgaWYgKGNvbnRlbnRUeXBlKSB7XG4gICAgICBoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gY29udGVudFR5cGU7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICAgIGhlYWRlcnNbXCJBY2NlcHRcIl0gPSBhY2NlcHQ7XG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBmZXRjaDxUID0gYW55PihcbiAgICB1cmw6IHN0cmluZyxcbiAgICBtZXRob2Q6IEh0dHBNZXRob2QgPSBcIkdFVFwiLFxuICAgIGRhdGE6IGFueSA9IHt9LFxuICAgIGRhdGFUeXBlPzogc3RyaW5nLFxuICAgIGhlYWRlcnM6IGFueSA9IHt9LFxuICAgIG9wdGlvbnM6IEh0dHBTZXJ2aWNlT3B0aW9ucyA9IHt9XG4gICk6IFByb21pc2U8SHR0cFNlcnZpY2VSZXNwb25zZTxUPj4ge1xuICAgIGlmICghZmV0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgZmV0Y2ggQVBJLCB1c2UgeGhyIGluc3RlYWQgb3IgaW5zdGFsbCBhIHBvbHlmaWxsLlwiXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBib2R5O1xuICAgIC8vIGhlYWRlcnNcbiAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiB0aGlzLl9yZXF1ZXN0SGVhZGVyc0VhY2hSZXF1ZXN0KSB7XG4gICAgICBoZWFkZXJzW2hlYWRlci5uYW1lXSA9IGhlYWRlci52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YVR5cGUpIHtcbiAgICAgIGhlYWRlcnMgPSBleHRlbmQoeyBkZWVwOiBmYWxzZSB9LCBoZWFkZXJzLCB0aGlzLnBhcnNlRGF0YVR5cGUoZGF0YVR5cGUpKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdKSB7XG4gICAgICBoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZSA9IG9wdGlvbnMuY2FjaGUgPyBvcHRpb25zLmNhY2hlIDogXCJkZWZhdWx0XCI7XG5cbiAgICBpZiAobWV0aG9kID09PSBcIkdFVFwiICYmIGRhdGEpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhkYXRhKS50b1N0cmluZygpO1xuICAgICAgaWYgKHF1ZXJ5U3RyKSB7XG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IHVybC5pbmNsdWRlcyhcIj9cIikgPyBcIiZcIiA6IFwiP1wiO1xuICAgICAgICB1cmwgPSB1cmwgKyBzZXBhcmF0b3IgKyBuZXcgVVJMU2VhcmNoUGFyYW1zKGRhdGEpLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YVR5cGUgPT09IFwiZm9ybVwiKSB7XG4gICAgICAgIGJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIixcbiAgICAgIGNhY2hlLFxuICAgICAgbWV0aG9kLFxuICAgICAgYm9keSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtb2RlOiBvcHRpb25zLm1vZGUgfHwgXCJjb3JzXCIsXG4gICAgfSk7XG5cbiAgICBsZXQgYm9keVJlc3VsdCA9IChhd2FpdCByZXNwb25zZS50ZXh0KCkpIGFzIHVua25vd24gYXMgVDtcbiAgICBpZiAodHlwZW9mIGJvZHlSZXN1bHQgPT09IFwic3RyaW5nXCIgJiYgaXNKc29uKGJvZHlSZXN1bHQpKSB7XG4gICAgICBib2R5UmVzdWx0ID0gSlNPTi5wYXJzZShib2R5UmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGJvZHlSZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHN3aXRjaCAoYm9keVJlc3VsdCkge1xuICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgIGJvZHlSZXN1bHQgPSBudWxsIGFzIHVua25vd24gYXMgVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgICBib2R5UmVzdWx0ID0gdHJ1ZSBhcyB1bmtub3duIGFzIFQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgICAgIGJvZHlSZXN1bHQgPSBmYWxzZSBhcyB1bmtub3duIGFzIFQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICBib2R5UmVzdWx0ID0gdW5kZWZpbmVkIGFzIHVua25vd24gYXMgVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQ6IEh0dHBTZXJ2aWNlUmVzcG9uc2U8VD4gPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBvazogcmVzcG9uc2Uub2ssXG4gICAgICByZWRpcmVjdGVkOiByZXNwb25zZS5yZWRpcmVjdGVkLFxuICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgIC8vIHRyYWlsZXI6IHJlc3BvbnNlLnRyYWlsZXIsXG4gICAgICB0eXBlOiByZXNwb25zZS50eXBlLFxuICAgICAgdXJsOiByZXNwb25zZS51cmwsXG4gICAgICBhcnJheUJ1ZmZlcjogcmVzcG9uc2UuYXJyYXlCdWZmZXIsXG4gICAgICBibG9iOiByZXNwb25zZS5ibG9iLFxuICAgICAgYm9keVVzZWQ6IHJlc3BvbnNlLmJvZHlVc2VkLFxuICAgICAgY2xvbmU6IHJlc3BvbnNlLmNsb25lLFxuICAgICAgZm9ybURhdGE6IHJlc3BvbnNlLmZvcm1EYXRhLFxuICAgICAgdGV4dDogcmVzcG9uc2UudGV4dCxcbiAgICAgIGJvZHk6IGJvZHlSZXN1bHQsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEhlYWRlciBuYW1lIHZhbHVlIHBhaXIgdG8gc2VuZCBvbiBlYWNoIHJlcXVlc3RcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgX3JlcXVlc3RIZWFkZXJzRWFjaFJlcXVlc3Q6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgfVtdID0gW107XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9hZGFwdGVyLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2JpbmRlci5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWZlY3ljbGUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50LnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvcmUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybWF0dGVyLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h0dHAuc2VydmljZS5qc1wiO1xuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgeyBDb3JlU2VydmljZSB9IGZyb20gXCIuL2NvcmUuc2VydmljZS5qc1wiO1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSB9IGZyb20gXCJAcmliYWpzL2hpc3Rvcnkvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIENvbXBvbmVudExpZmVjeWNsZUV2ZW50RGF0YSxcbiAgQ29tcG9uZW50TGlmZWN5Y2xlT2JqZWN0LFxuICBDb21wb25lbnRMaWZlY3ljbGVTdGF0ZXMsXG59IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIENvbXBvbmVudCBsaWZlY3ljbGUgY29udHJvbCBzZXJ2aWNlLlxuICogVXNlZnVsIHRvIGNoZWNrIGlmIGFsbCBjdXJyZW50IGNvbXBvbmVudHMgYXJlIGJvdW5kIGFuZCByZWFkeS5cbiAqL1xuZXhwb3J0IGNsYXNzIExpZmVjeWNsZVNlcnZpY2Uge1xuICBwdWJsaWMgZXZlbnRzID0gRXZlbnREaXNwYXRjaGVyLmdldEluc3RhbmNlKFwibGlmZWN5Y2xlXCIpO1xuICBwcm90ZWN0ZWQgZGVidWcgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIHJvdXRlckV2ZW50cyA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuICBwcm90ZWN0ZWQgdGltZW91dDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBzdGF0aWMgaW5zdGFuY2U6IExpZmVjeWNsZVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudHM6IHtcbiAgICBbbmFtZTogc3RyaW5nXTogQ29tcG9uZW50TGlmZWN5Y2xlT2JqZWN0O1xuICB9ID0ge307XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgTGlmZWN5Y2xlU2VydmljZS5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgIGlmIChMaWZlY3ljbGVTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gTGlmZWN5Y2xlU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgTGlmZWN5Y2xlU2VydmljZS5pbnN0YW5jZSA9IG5ldyBMaWZlY3ljbGVTZXJ2aWNlKCk7XG4gICAgcmV0dXJuIExpZmVjeWNsZVNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RW1wdHkoKTogQ29tcG9uZW50TGlmZWN5Y2xlT2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgY29tcG9uZW50czogW10sXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihcbiAgICAgIFwiQ29tcG9uZW50OmNvbm5lY3RlZFwiLFxuICAgICAgKGRhdGE6IENvbXBvbmVudExpZmVjeWNsZUV2ZW50RGF0YSkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0VGltZW91dCgpO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50c1tkYXRhLnRhZ05hbWVdID1cbiAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbZGF0YS50YWdOYW1lXSB8fCB0aGlzLmdldEVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50c1tkYXRhLnRhZ05hbWVdLmNvbXBvbmVudHMucHVzaChkYXRhLmNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuZXZlbnRzLm9uKFwiQ29tcG9uZW50OmRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0VGltZW91dCgpO1xuICAgICAgdGhpcy5jaGVja1N0YXRlcygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5ldmVudHMub24oXCJDb21wb25lbnQ6YWZ0ZXJCaW5kXCIsICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRUaW1lb3V0KCk7XG4gICAgICB0aGlzLmNoZWNrU3RhdGVzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmV2ZW50cy5vbihcbiAgICAgIFwiQ29tcG9uZW50OmVycm9yXCIsXG4gICAgICAoZXJyb3I6IEVycm9yLCBkYXRhOiBDb21wb25lbnRMaWZlY3ljbGVFdmVudERhdGEpID0+IHtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yLCBkYXRhKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUm91dGVyXG5cbiAgICB0aGlzLnJvdXRlckV2ZW50cy5vbihcbiAgICAgIFwibmV3UGFnZVJlYWR5XCIsXG4gICAgICAoXG4gICAgICAgIHZpZXdJZDogc3RyaW5nLFxuICAgICAgICBuZXdTdGF0dXM6IFN0YXRlLFxuICAgICAgICBvbGRTdGF0dXM6IFN0YXRlLFxuICAgICAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgICAgICBjb250YWluZXJIdG1sOiBzdHJpbmcsXG4gICAgICAgIGRhdGFzZXQ6IGFueSxcbiAgICAgICAgZmlyc3RQYWdlTG9hZDogYm9vbGVhblxuICAgICAgKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKVxuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgICBcIm5ld1BhZ2VSZWFkeVwiLFxuICAgICAgICAgICAgdmlld0lkLFxuICAgICAgICAgICAgbmV3U3RhdHVzLFxuICAgICAgICAgICAgb2xkU3RhdHVzLFxuICAgICAgICAgICAgXCJmaXJzdFBhZ2VMb2FkXCIsXG4gICAgICAgICAgICBmaXJzdFBhZ2VMb2FkXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKCFmaXJzdFBhZ2VMb2FkKSB7XG4gICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTdGF0ZSh0YWdOYW1lOiBzdHJpbmcpIHtcbiAgICBsZXQgY29ubmVjdGVkID0gMDtcbiAgICBsZXQgYm91bmQgPSAwO1xuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzW3RhZ05hbWVdLmNvbXBvbmVudHMpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29ubmVjdGVkKSB7XG4gICAgICAgIGNvbm5lY3RlZCsrO1xuXG4gICAgICAgIGlmIChjb21wb25lbnQuYm91bmQpIHtcbiAgICAgICAgICBib3VuZCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3RlZCxcbiAgICAgIGJvdW5kLFxuICAgIH07XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U3RhdGVzKCkge1xuICAgIGNvbnN0IHN0YXRlczoge1xuICAgICAgW3RhZ05hbWU6IHN0cmluZ106IENvbXBvbmVudExpZmVjeWNsZVN0YXRlcztcbiAgICB9ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IHRhZ05hbWUgaW4gdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUodGFnTmFtZSk7XG5cbiAgICAgIHN0YXRlc1t0YWdOYW1lXSA9IHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGNvbXBvbmVudHM6IHRoaXMuY29tcG9uZW50c1t0YWdOYW1lXS5jb21wb25lbnRzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNoZWNrU3RhdGVzKCkge1xuICAgIGxldCBhbGxCb3VuZCA9IHRydWU7XG4gICAgY29uc3Qgc3RhdGVzID0gdGhpcy5nZXRTdGF0ZXMoKTtcbiAgICBmb3IgKGNvbnN0IHRhZ05hbWUgaW4gc3RhdGVzKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHN0YXRlc1t0YWdOYW1lXS5zdGF0ZTtcbiAgICAgIGlmIChzdGF0ZS5jb25uZWN0ZWQgIT09IHN0YXRlLmJvdW5kKSB7XG4gICAgICAgIGFsbEJvdW5kID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWxsQm91bmQpIHtcbiAgICAgIHRoaXMub25BbGxCb3VuZCgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGVzLFxuICAgICAgYWxsQm91bmQsXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkFsbEJvdW5kKCkge1xuICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gICAgdGhpcy5ldmVudHMudHJpZ2dlcihcIkNvbXBvbmVudExpZmVjeWNsZTphbGxCb3VuZFwiLCB0aGlzLmNvbXBvbmVudHMpO1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmRlYnVnKFwiW0NvbXBvbmVudExpZmVjeWNsZV0gQWxsIGNvbXBvbmVudHMgYm91bmQhXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uRXJyb3IoZXJyb3I6IEVycm9yLCBkYXRhOiBDb21wb25lbnRMaWZlY3ljbGVFdmVudERhdGEpIHtcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgVGhlIGNvbXBvbmVudCBcIiR7ZGF0YS50YWdOYW1lfVwiIGhhcyBjYXVzZWQgYW4gZXJyb3I6YCxcbiAgICAgIGVycm9yXG4gICAgKTtcbiAgICB0aGlzLmV2ZW50cy50cmlnZ2VyKFwiQ29tcG9uZW50TGlmZWN5Y2xlOmVycm9yXCIsIGVycm9yLCBkYXRhKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblRpbWVvdXQoKSB7XG4gICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgICBjb25zdCBzdGF0ZXMgPSB0aGlzLmdldFN0YXRlcygpO1xuICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZXMpLmxlbmd0aCA8PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJObyBjb21wb25lbnQgZm91bmRcIik7XG4gICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyKFwiQ29tcG9uZW50TGlmZWN5Y2xlOm5vQ29tcG9uZW50c1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZXJyb3JNZXNzYWdlID1cbiAgICAgIFwiW0NvbXBvbmVudExpZmVjeWNsZV0gVGltZW91dCEge2NvdW50fSBjb21wb25lbnQocykgdGFrZXMgdG9vIGxvbmchXFxuVW5maW5pc2hlZCBjb21wb25lbnRzOlxcblwiO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCB0YWdOYW1lIGluIHN0YXRlcykge1xuICAgICAgY29uc3Qgc3RhdGUgPSBzdGF0ZXNbdGFnTmFtZV0uc3RhdGU7XG4gICAgICBpZiAoc3RhdGUuY29ubmVjdGVkICE9PSBzdGF0ZS5ib3VuZCkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBlcnJvck1lc3NhZ2UgKz0gYCR7dGFnTmFtZX06ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc3RhdGVzW3RhZ05hbWVdLnN0YXRlLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgMlxuICAgICAgICApfSArIFxcbmA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlLnJlcGxhY2UoXCJ7Y291bnR9XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICAgIHRoaXMuZXZlbnRzLnRyaWdnZXIoXG4gICAgICBcIkNvbXBvbmVudExpZmVjeWNsZTplcnJvclwiLFxuICAgICAgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksXG4gICAgICB7fVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2xlYXJUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzZXRUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmRlYnVnKFwiW0NvbXBvbmVudExpZmVjeWNsZV0gcmVzZXQgdGltZW91dC4uXCIpO1xuICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gICAgdGhpcy50aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICB0aGlzLm9uVGltZW91dC5iaW5kKHRoaXMpLFxuICAgICAgQ29yZVNlcnZpY2Uub3B0aW9ucy5saWZlY3ljbGU/LnRpbWVvdXQgfHwgNTAwMFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMudGltZW91dDtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXNldCgpIHtcbiAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5kZWJ1ZyhcIltDb21wb25lbnRMaWZlY3ljbGVdIHJlc2V0IVwiKTtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSB7fTtcbiAgICB0aGlzLnJlc2V0VGltZW91dCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5pbXBvcnQgeyBNb2R1bGVFbGVtZW50VHlwZSwgRWxlbWVudHMgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1vZHVsZUVsZW1lbnRTZXJ2aWNlPFQgPSBhbnk+IHtcbiAgcHJvdGVjdGVkIGVsZW1lbnRzOiBFbGVtZW50czxUPjtcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdHlwZTogTW9kdWxlRWxlbWVudFR5cGU7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50cztcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBFbGVtZW50cykge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBlbGVtZW50XG4gICAqIEBwYXJhbSBlbGVtZW50XG4gICAqIEBwYXJhbSBuYW1lICBPdmVyd3JpdGVzIHRoZSBuYW1lIHRvIGFjY2VzcyB0aGUgZWxlbWVudCBvdmVyXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVnaXN0KGVsZW1lbnQ6IFQsIG5hbWU/OiBzdHJpbmcpOiBFbGVtZW50cztcblxuICAvKipcbiAgICogUmVnaXN0IGEgc2V0IC8gYXJyYXkgb2YgZWxlbWVudHNcbiAgICogQHBhcmFtIGVsZW1lbnRzXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0cyhlbGVtZW50czogRWxlbWVudHMpOiBFbGVtZW50cyB7XG4gICAgaWYgKCFpc09iamVjdChlbGVtZW50cykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnRzIHRvIHJlZ2lzdGVyIG11c3QgYmUgYW4gb2JqZWN0IG9mIGVsZW1lbnRzXCIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBlbGVtZW50cykge1xuICAgICAgaWYgKGVsZW1lbnRzW2tleV0gJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIikge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNba2V5XTtcbiAgICAgICAgdGhpcy5yZWdpc3QoZWxlbWVudCwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEFkYXB0ZXJzLFxuICBCaW5kZXJzLFxuICBGb3JtYXR0ZXJzLFxuICBDb21wb25lbnRzLFxuICBSaWJhTW9kdWxlLFxufSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IEJpbmRlcnNTZXJ2aWNlIH0gZnJvbSBcIi4vYmluZGVyLnNlcnZpY2UuanNcIjtcbmltcG9ydCB7IENvbXBvbmVudFNlcnZpY2UgfSBmcm9tIFwiLi9jb21wb25lbnQuc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgRm9ybWF0dGVyU2VydmljZSB9IGZyb20gXCIuL2Zvcm1hdHRlci5zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBBZGFwdGVyU2VydmljZSB9IGZyb20gXCIuL2FkYXB0ZXIuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgTW9kdWxlc1NlcnZpY2Uge1xuICBwdWJsaWMgYmluZGVyOiBCaW5kZXJzU2VydmljZTtcbiAgcHVibGljIGNvbXBvbmVudDogQ29tcG9uZW50U2VydmljZTtcbiAgcHVibGljIGZvcm1hdHRlcjogRm9ybWF0dGVyU2VydmljZTtcbiAgcHVibGljIGFkYXB0ZXI6IEFkYXB0ZXJTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYmluZGVycztcbiAgICogQHBhcmFtIGNvbXBvbmVudHM7XG4gICAqIEBwYXJhbSBmb3JtYXR0ZXJzO1xuICAgKiBAcGFyYW0gYWRhcHRlcnM7XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBiaW5kZXJzOiBCaW5kZXJzPGFueT4sXG4gICAgY29tcG9uZW50czogQ29tcG9uZW50cyxcbiAgICBmb3JtYXR0ZXJzOiBGb3JtYXR0ZXJzLFxuICAgIGFkYXB0ZXJzOiBBZGFwdGVyc1xuICApIHtcbiAgICB0aGlzLmJpbmRlciA9IG5ldyBCaW5kZXJzU2VydmljZShiaW5kZXJzKTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRTZXJ2aWNlKGNvbXBvbmVudHMpO1xuICAgIHRoaXMuZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlclNlcnZpY2UoZm9ybWF0dGVycyk7XG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IEFkYXB0ZXJTZXJ2aWNlKGFkYXB0ZXJzKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3QobW9kdWxlOiBSaWJhTW9kdWxlKSB7XG4gICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobW9kdWxlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBSaWJhIG1vZHVsZSBpcyBmYWxzeSFcIik7XG4gICAgfVxuICAgIGlmIChtb2R1bGUuYmluZGVycykge1xuICAgICAgdGhpcy5iaW5kZXIucmVnaXN0cyhtb2R1bGUuYmluZGVycyk7XG4gICAgfVxuICAgIGlmIChtb2R1bGUuY29tcG9uZW50cykge1xuICAgICAgdGhpcy5jb21wb25lbnQucmVnaXN0cyhtb2R1bGUuY29tcG9uZW50cyk7XG4gICAgfVxuICAgIGlmIChtb2R1bGUuZm9ybWF0dGVycykge1xuICAgICAgdGhpcy5mb3JtYXR0ZXIucmVnaXN0cyhtb2R1bGUuZm9ybWF0dGVycyk7XG4gICAgfVxuICAgIGlmIChtb2R1bGUuYWRhcHRlcnMpIHtcbiAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RzKG1vZHVsZS5hZGFwdGVycyk7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIFRoZSBkZWZhdWx0IGAuYCBhZGFwdGVyIHRoYXQgY29tZXMgd2l0aCByaWJhLmpzLiBBbGxvd3Mgc3Vic2NyaWJpbmcgdG9cbiAqIHByb3BlcnRpZXMgb24gcGxhaW4gb2JqZWN0cywgaW1wbGVtZW50ZWQgaW4gRVM1IG5hdGl2ZXMgdXNpbmdcbiAqIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgLlxuICovXG5cbmltcG9ydCB7IE9ic2VydmVyU3luY0NhbGxiYWNrIH0gZnJvbSBcIi4vb2JzZXJ2ZXIuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBSZWYge1xuICBjYWxsYmFja3M6IGFueVtdO1xuICBwb2ludGVyczogYW55W107XG59XG5cbi8qKlxuICogVE9ETyBGb3Igd2hhdCBpcyB0aGlzP1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJWQXJyYXkgZXh0ZW5kcyBBcnJheTxhbnk+IHtcbiAgX19ydjogYW55O1xufVxuXG5leHBvcnQgdHlwZSBBZGFwdGVyRnVuY3Rpb24gPSAoLi4uYXJnczogYW55W10pID0+IGFueTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFkYXB0ZXIge1xuICBwdWJsaWMgYWJzdHJhY3QgbmFtZTogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgY291bnRlcj86IG51bWJlcjtcbiAgcHVibGljIGFic3RyYWN0IHdlYWttYXA/OiBhbnk7XG4gIHB1YmxpYyBhYnN0cmFjdCB3ZWFrUmVmZXJlbmNlPzogKG9iajogYW55KSA9PiBhbnk7IC8vID0+IF9fcnYgP1xuICBwdWJsaWMgYWJzdHJhY3QgY2xlYW51cFdlYWtSZWZlcmVuY2U/OiAocmVmOiBSZWYsIGlkOiBudW1iZXIpID0+IHZvaWQ7XG4gIHB1YmxpYyBhYnN0cmFjdCBzdHViRnVuY3Rpb24/OiAob2JqOiBhbnksIGZuOiBzdHJpbmcpID0+IGFueTsgLy8gPT4gcmVzcG9uc2UgP1xuICBwdWJsaWMgYWJzdHJhY3Qgb2JzZXJ2ZU11dGF0aW9ucz86IChcbiAgICBvYmo6IGFueSxcbiAgICByZWY6IHN0cmluZyxcbiAgICBrZXlwYXRoOiBzdHJpbmdcbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgYWJzdHJhY3QgdW5vYnNlcnZlTXV0YXRpb25zPzogKFxuICAgIG9iajogUlZBcnJheSxcbiAgICByZWY6IHN0cmluZyxcbiAgICBrZXlwYXRoOiBzdHJpbmdcbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgYWJzdHJhY3Qgb2JzZXJ2ZTogKFxuICAgIG9iajogYW55LFxuICAgIGtleXBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogT2JzZXJ2ZXJTeW5jQ2FsbGJhY2tcbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgYWJzdHJhY3QgdW5vYnNlcnZlOiAoXG4gICAgb2JqOiBhbnksXG4gICAga2V5cGF0aDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiBPYnNlcnZlclN5bmNDYWxsYmFja1xuICApID0+IHZvaWQ7XG4gIHB1YmxpYyBhYnN0cmFjdCBnZXQ6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nKSA9PiBhbnk7XG4gIHB1YmxpYyBhYnN0cmFjdCBzZXQ6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB2b2lkO1xufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vYWRhcHRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWRhcHRlcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2FueS1jb21wb25lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2FueS1jb25zdHJ1Y3Rvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYW55LXNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2FueS1zaW5nbGV0b24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Fzc2lnbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmluZGFibGUtZWxlbWVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmluZGVyLWF0dHJpYnV0ZS1jaGFuZ2VkLWV2ZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaW5kZXJzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaW5kaW5nLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jbGFzcy1vZi1iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NsYXNzLW9mLWNvbXBvbmVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2xhc3Mtb2YuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudC1saWZlY3ljbGUtZXZlbnQtZGF0YS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50LWxpZmVjeWNsZS1vYmplY3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudC1saWZlY3ljbGUtc3RhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudC1saWZlY3ljbGUtc3RhdGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kYXRhLWVsZW1lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VsZW1lbnRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ldmVudC1oYW5kbGVyLWZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ldmVudC1oYW5kbGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9leHRlbnNpb25zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtYXR0ZXItb2JzZXJ2ZXJzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1hdHRlcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h0dHAtZGF0YS10eXBlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9odHRwLW1ldGhvZC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHR0cC1zZXJ2aWNlLW9wdGlvbnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h0dHAtc2VydmljZS1yZXNwb25zZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kdWxlLWVsZW1lbnQtdHlwZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kdWxlLW9wdGlvbnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZHVsZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb2JzZXJ2ZWQtYXR0cmlidXRlLXRvLWNoZWNrLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9vYnNlcnZlZC1hdHRyaWJ1dGVzLXRvLWNoZWNrLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9vYnNlcnZlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb3B0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2VkLWRlY2xhcmF0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2NvcGUtYmFzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2NvcGUtcm9vdC1iYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXJ2aWNlcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGVtcGxhdGUtZnVuY3Rpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Rva2Vucy5qc1wiO1xuIiwiaW1wb3J0IHtcbiAgT3B0aW9ucyxcbiAgQmluZGFibGVFbGVtZW50LFxuICBDbGFzc09mQmluZGVyLFxuICBDbGFzc09mQ29tcG9uZW50LFxuICBEYXRhRWxlbWVudCxcbn0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHBhcnNlTm9kZSB9IGZyb20gXCIuL3BhcnNlLW5vZGUuanNcIjtcbmltcG9ydCB7IHBhcnNlRGVjbGFyYXRpb24gfSBmcm9tIFwiLi9wYXJzZS1kZWNsYXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgQmFzaWNDb21wb25lbnQsIENvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNDdXN0b21FbGVtZW50IH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiLi9iaW5kZXIuanNcIjtcblxuLyoqXG4gKiBTZXRzIHRoZSBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuIElmIG5vIGJpbmRlciBpcyBtYXRjaGVkIGl0IHdpbGwgZmFsbFxuICogYmFjayB0byB1c2luZyB0aGlzIGJpbmRlci5cbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQmluZGVyIH0gZnJvbSBcIi4vYmluZGVycy9hdHRyaWJ1dGUuYmluZGVyLmpzXCI7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGJpbmRpbmdzIGJ1aWx0IGZyb20gYSBzZXQgb2YgcGFyZW50IG5vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgVmlldyB7XG4gIC8qKiBHbG9iYWwgcm9vdCBzY29wZSAqL1xuICBwdWJsaWMgc3RhdGljICRyb290U2NvcGU6IGFueSA9IHt9O1xuXG4gIHB1YmxpYyBzdGF0aWMgYmluZGluZ0NvbXBhcmF0b3IgPSAoYTogQmluZGVyLCBiOiBCaW5kZXIpID0+IHtcbiAgICBjb25zdCBhUHJpb3JpdHkgPSBhLnByaW9yaXR5IHx8IDA7XG4gICAgY29uc3QgYlByaW9yaXR5ID0gYi5wcmlvcml0eSB8fCAwO1xuICAgIHJldHVybiBiUHJpb3JpdHkgLSBhUHJpb3JpdHk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgdmlldyBpbnNpZGUgb2YgYSBiaW5kaW5nXG4gICAqIEBwYXJhbSBiaW5kaW5nXG4gICAqIEBwYXJhbSBtb2RlbHNcbiAgICogQHBhcmFtIGFuY2hvckVsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICBiaW5kZXI6IEJpbmRlcixcbiAgICBtb2RlbHM6IGFueSxcbiAgICBhbmNob3JFbDogSFRNTEVsZW1lbnQgfCBOb2RlIHwgbnVsbFxuICApIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGJpbmRlci5lbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KHRlbXBsYXRlLCBtb2RlbHMsIGJpbmRlci52aWV3Lm9wdGlvbnMpO1xuICAgIHZpZXcuYmluZCgpO1xuICAgIGlmICghYmluZGVyPy5tYXJrZXI/LnBhcmVudE5vZGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWaWV3XTogTm8gcGFyZW50IG5vZGUgZm9yIGJpbmRpbmchXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiaW5kZXIubWFya2VyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3JFbCk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3O1xuICB9XG5cbiAgcHVibGljIGVsczogSFRNTENvbGxlY3Rpb24gfCBIVE1MRWxlbWVudFtdIHwgTm9kZVtdO1xuICBwdWJsaWMgbW9kZWxzOiBhbnk7XG4gIHB1YmxpYyBvcHRpb25zOiBPcHRpb25zO1xuICBwdWJsaWMgYmluZGluZ3M6IEFycmF5PEJpbmRlcj4gPSBbXTtcbiAgcHVibGljIHdlYkNvbXBvbmVudHM6IEFycmF5PENvbXBvbmVudCB8IEJhc2ljQ29tcG9uZW50PiA9IFtdO1xuICAvLyBwdWJsaWMgY29tcG9uZW50VmlldzogVmlldyB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgRE9NIGVsZW1lbnRzIGFuZCB0aGUgbW9kZWwgb2JqZWN0cyBmb3IgYmluZGluZyBhcmUgcGFzc2VkIGludG8gdGhlXG4gICAqIGNvbnN0cnVjdG9yIGFsb25nIHdpdGggYW55IGxvY2FsIG9wdGlvbnMgdGhhdCBzaG91bGQgYmUgdXNlZCB0aHJvdWdob3V0IHRoZVxuICAgKiBjb250ZXh0IG9mIHRoZSB2aWV3IGFuZCBpdCdzIGJpbmRpbmdzLlxuICAgKiBAcGFyYW0gZWxzXG4gICAqIEBwYXJhbSBtb2RlbHNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsczpcbiAgICAgIHwgSFRNTENvbGxlY3Rpb25cbiAgICAgIHwgSFRNTEVsZW1lbnRcbiAgICAgIHwgTm9kZVxuICAgICAgfCBOb2RlTGlzdE9mPENoaWxkTm9kZT5cbiAgICAgIHwgSFRNTFVua25vd25FbGVtZW50W10sXG4gICAgbW9kZWxzOiBhbnksXG4gICAgb3B0aW9uczogT3B0aW9uc1xuICApIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbHMpKSB7XG4gICAgICB0aGlzLmVscyA9IGVscztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbHMgPSBbZWxzXSBhcyBIVE1MRWxlbWVudFtdIHwgTm9kZVtdO1xuICAgIH1cblxuICAgIHRoaXMubW9kZWxzID0gbW9kZWxzO1xuXG4gICAgLy8gSWYgJHJvb3QgcHJvcGVydHkgZXhpc3RzIGluIG1vZGVsIG1lcmdlIHRoaXMgd2l0aCB0aGUgZ2xvYmFsIHJvb3Qgc2NvcGUgLyBtb2RlbFxuICAgIGlmICh0aGlzLm1vZGVscy4kcm9vdCkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5tb2RlbHMuJHJvb3QpKSB7XG4gICAgICAgIFZpZXcuJHJvb3RTY29wZVtrZXldID0gdGhpcy5tb2RlbHMuJHJvb3Rba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1vZGVscy4kcm9vdCA9IFZpZXcuJHJvb3RTY29wZTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmJ1aWxkKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGFsbCBjb21wb25lbnRzXG4gICAqIFRoaXMgY2FuIHNvbWV0aW1lcyBiZSB1c2VmdWwgc28gdGhhdCB0aGUgYnJvd3NlciBhdXRvbWF0aWNhbGx5IHJlY29nbml6ZXMgd2hldGhlciBhIGNvbXBvbmVudCBpcyBpbnNlcnRlZCBpbnRvIHRoZSBkb20uXG4gICAqIEhvd2V2ZXIsIHRoZSBjb21wb25lbnRzIGFyZSBhbHJlYWR5IHJlZ2lzdGVyZWQgd2hlbiB0aGV5IGFyZSBmb3VuZCBieSByaWJhIGluIHRoZSBET00uXG4gICAqXG4gICAqIFBsZWFzZSBub3RlLCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBicm93c2VyIGZhbGxiYWNrIGZvciBicm93c2VycyB0aGF0IGNhbm5vdCB1c2UgY3VzdG9tIGVsZW1lbnRzLlxuICAgKi9cbiAgcHVibGljIHJlZ2lzdENvbXBvbmVudHMoKSB7XG4gICAgZm9yIChjb25zdCBub2RlTmFtZSBpbiB0aGlzLm9wdGlvbnMuY29tcG9uZW50cykge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wb25lbnRzW25vZGVOYW1lXSkge1xuICAgICAgICAvLyBOb3QgYWxyZWFkeSByZWdpc3RlcmVkP1xuICAgICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldChub2RlTmFtZSkpIHtcbiAgICAgICAgICBjb25zdCBDT01QT05FTlQgPSB0aGlzLm9wdGlvbnMuY29tcG9uZW50c1tub2RlTmFtZV07XG4gICAgICAgICAgdGhpcy5yZWdpc3RDb21wb25lbnQoQ09NUE9ORU5ULCBub2RlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGFsbCBvZiB0aGUgY3VycmVudCBiaW5kaW5ncyBmb3IgdGhpcyB2aWV3LlxuICAgKi9cbiAgcHVibGljIGJpbmQoKSB7XG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBiaW5kaW5nLl9iaW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVW5iaW5kcyBhbGwgb2YgdGhlIGN1cnJlbnQgYmluZGluZ3MgZm9yIHRoaXMgdmlldy5cbiAgICovXG4gIHB1YmxpYyB1bmJpbmQoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5iaW5kaW5ncykpIHtcbiAgICAgIHRoaXMuYmluZGluZ3MuZm9yRWFjaCgoYmluZGluZykgPT4ge1xuICAgICAgICBiaW5kaW5nLl91bmJpbmQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBiaW5kaW5nLmVsICYmIHRoaXMub3B0aW9ucy5yZW1vdmVCaW5kZXJBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgLy8gVE9ETyByZXNldCBhdHRyaWJ1dGUgP1xuICAgICAgICAgIC8vIGJpbmRpbmcuZWwuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETyBmYWxsYmFjayB0byB1bmJpbmQgd2ViIGNvbXBvbmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLndlYkNvbXBvbmVudHMpKSB7XG4gICAgICB0aGlzLndlYkNvbXBvbmVudHMuZm9yRWFjaCgod2ViQ29tcG9uZW50KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgKHdlYkNvbXBvbmVudCBhcyBDb21wb25lbnQpLnVuYmluZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgKHdlYkNvbXBvbmVudCBhcyBDb21wb25lbnQpLnVuYmluZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3luY3MgdXAgdGhlIHZpZXcgd2l0aCB0aGUgbW9kZWwgYnkgcnVubmluZyB0aGUgcm91dGluZXMgb24gYWxsIGJpbmRpbmdzLlxuICAgKi9cbiAgcHVibGljIHN5bmMoKSB7XG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBpZiAoYmluZGluZy5zeW5jKSB7XG4gICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyB0aGUgaW5wdXQgdmFsdWVzIGZyb20gdGhlIHZpZXcgYmFjayB0byB0aGUgbW9kZWwgKHJldmVyc2Ugc3luYykuXG4gICAqL1xuICBwdWJsaWMgcHVibGlzaCgpIHtcbiAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRlcikgPT4ge1xuICAgICAgaWYgKGJpbmRlci5wdWJsaXNoZXMgJiYgYmluZGVyLnB1Ymxpc2gpIHtcbiAgICAgICAgYmluZGVyLnB1Ymxpc2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2aWV3J3MgbW9kZWxzIGFsb25nIHdpdGggYW55IGFmZmVjdGVkIGJpbmRpbmdzLlxuICAgKiBAcGFyYW0gbW9kZWxzXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKG1vZGVsczogYW55ID0ge30pIHtcbiAgICBPYmplY3Qua2V5cyhtb2RlbHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy5tb2RlbHNba2V5XSA9IG1vZGVsc1trZXldO1xuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHRoaXMuYmluZGluZ3MpIHtcbiAgICAgIGlmIChiaW5kaW5nLl91cGRhdGUpIHtcbiAgICAgICAgYmluZGluZy5fdXBkYXRlKG1vZGVscyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgRE9NIHRyZWUgYW5kIGJ1aWxkcyBgQmluZGluZ2AgaW5zdGFuY2VzIGZvciBldmVyeSBtYXRjaGVkXG4gICAqIGJpbmRpbmcgZGVjbGFyYXRpb24uXG4gICAqL1xuICBwdWJsaWMgYnVpbGQoKSB7XG4gICAgdGhpcy5iaW5kaW5ncyA9IFtdOyAvLyB0aGlzLmJpbmRpbmdzIHx8IFtdO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXJzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0ZW1wbGF0ZURlbGltaXRlcnMgcmVxdWlyZWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLmVscztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBwYXJzZU5vZGUoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBlbGVtZW50IGFzIERhdGFFbGVtZW50LFxuICAgICAgICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlcnNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmJpbmRpbmdzLnNvcnQoVmlldy5iaW5kaW5nQ29tcGFyYXRvcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhcnRzV2l0aFByZWZpeChuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBiaW5kaW5nRnVsbFByZWZpeGVzID0gdGhpcy5vcHRpb25zLmZ1bGxQcmVmaXg7XG4gICAgaWYgKCFiaW5kaW5nRnVsbFByZWZpeGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcmVmaXggaXMgcmVxdWlyZWRcIik7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBmdWxsUHJlZml4IG9mIGJpbmRpbmdGdWxsUHJlZml4ZXMpIHtcbiAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoZnVsbFByZWZpeCkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bGxQcmVmaXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBiaW5kZXJSZWdleChpZGVudGlmaWVyOiBzdHJpbmcpIHtcbiAgICBjb25zdCB3aWxkY2FyZHMgPSBpZGVudGlmaWVyLm1hdGNoKC9cXCovZyk/Lmxlbmd0aCB8fCAwO1xuICAgIGxldCByZWdleHA6IFJlZ0V4cDtcbiAgICBpZiAod2lsZGNhcmRzID4gMSkge1xuICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChcbiAgICAgICAgYF4ke2lkZW50aWZpZXIucmVwbGFjZShcIipcIiwgXCIoW14tXSopXCIpLnJlcGxhY2VBbGwoXCItKlwiLCBcIi0oLispXCIpfSRgXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWdleHAgPSBuZXcgUmVnRXhwKGBeJHtpZGVudGlmaWVyLnJlcGxhY2VBbGwoXCIqXCIsIFwiKC4rKVwiKX0kYCk7XG4gICAgfVxuICAgIHJldHVybiByZWdleHA7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHByaXZhdGUgYmluZEJpbmRlcnMoXG4gICAgYXR0cmlidXRlczogTmFtZWROb2RlTWFwLFxuICAgIG5vZGU6IEJpbmRhYmxlRWxlbWVudCxcbiAgICBhdHRyaWJ1dGVCaW5kZXJzID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZUJpbmRlcnNcbiAgKSB7XG4gICAgbGV0IGJsb2NrID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYmluZGVycykge1xuICAgICAgcmV0dXJuIGJsb2NrO1xuICAgIH1cbiAgICBjb25zdCBiaW5kSW5mb3MgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IG5vZGVOYW1lID0gXCJcIjtcbiAgICAgIGxldCBCaW5kZXI6IENsYXNzT2ZCaW5kZXIgfCBudWxsID0gbnVsbDtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAvLyBpZiBhdHRyaWJ1dGUgc3RhcnRzIHdpdGggdGhlIGJpbmRpbmcgcHJlZml4LiBFLmcuIHJ2LVxuICAgICAgY29uc3Qgc3RhcnRpbmdQcmVmaXggPSB0aGlzLnN0YXJ0c1dpdGhQcmVmaXgoYXR0cmlidXRlLm5hbWUpO1xuICAgICAgaWYgKHN0YXJ0aW5nUHJlZml4KSB7XG4gICAgICAgIGxldCBpZGVudGlmaWVyID0gXCJcIjtcbiAgICAgICAgbm9kZU5hbWUgPSBhdHRyaWJ1dGUubmFtZS5zbGljZShzdGFydGluZ1ByZWZpeC5sZW5ndGgpO1xuXG4gICAgICAgIC8vIGlmIGJpbmRlciBpcyBub3QgYSBhdHRyaWJ1dGVCaW5kZXIgYmluZGVyIHNob3VsZCBiZSBzZXRcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iaW5kZXJzW25vZGVOYW1lXSkge1xuICAgICAgICAgIEJpbmRlciA9IHRoaXMub3B0aW9ucy5iaW5kZXJzW25vZGVOYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChCaW5kZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBzZWVtcyB0byBiZSBhIHN0YXIgYmluZGVyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGF0dHJpYnV0ZUJpbmRlciBtYXRjaCdzXG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBhdHRyaWJ1dGVCaW5kZXJzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBpZGVudGlmaWVyID0gYXR0cmlidXRlQmluZGVyc1trXTtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4cCA9IHRoaXMuYmluZGVyUmVnZXgoaWRlbnRpZmllcik7XG4gICAgICAgICAgICBpZiAocmVnZXhwLnRlc3Qobm9kZU5hbWUpKSB7XG4gICAgICAgICAgICAgIEJpbmRlciA9IHRoaXMub3B0aW9ucy5iaW5kZXJzW2lkZW50aWZpZXJdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQmluZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iaW5kZXJzW1wiKlwiXSkge1xuICAgICAgICAgICAgQmluZGVyID0gdGhpcy5vcHRpb25zLmJpbmRlcnNbXCIqXCJdO1xuICAgICAgICAgICAgaWRlbnRpZmllciA9IFwiKlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBCaW5kZXIgPSBBdHRyaWJ1dGVCaW5kZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGJsb2NrIGlzIHNldCwgZG8gbm90IGJpbmQgaXRzIGNoaWxkJ3MgKHRoaXMgbWVhbnMgdGhlIGJpbmRlciBib3VuZCBpdCBieSBpdHNlbGYpXG4gICAgICAgIC8vIGFuZCBidWlsZCBiaW5kaW5nIGRpcmVjdGx5IChkbyBub3QgcHVzaCBpdCB0byBiaW5kSW5mb3MgYXJyYXkpXG4gICAgICAgIGlmIChCaW5kZXIuYmxvY2spIHtcbiAgICAgICAgICB0aGlzLmJ1aWxkQmluZGluZyhcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBub2RlTmFtZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZS52YWx1ZSxcbiAgICAgICAgICAgIEJpbmRlcixcbiAgICAgICAgICAgIGlkZW50aWZpZXJcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChub2RlLnJlbW92ZUF0dHJpYnV0ZSAmJiB0aGlzLm9wdGlvbnMucmVtb3ZlQmluZGVyQXR0cmlidXRlcykge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBibG9jayA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGJsb2NrO1xuICAgICAgICB9XG5cbiAgICAgICAgYmluZEluZm9zLnB1c2goeyBhdHRyOiBhdHRyaWJ1dGUsIEJpbmRlciwgbm9kZU5hbWUsIGlkZW50aWZpZXIgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kSW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJpbmRJbmZvID0gYmluZEluZm9zW2ldO1xuICAgICAgdGhpcy5idWlsZEJpbmRpbmcoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGJpbmRJbmZvLm5vZGVOYW1lLFxuICAgICAgICBiaW5kSW5mby5hdHRyLnZhbHVlLFxuICAgICAgICBiaW5kSW5mby5CaW5kZXIsXG4gICAgICAgIGJpbmRJbmZvLmlkZW50aWZpZXJcbiAgICAgICk7XG4gICAgICBpZiAobm9kZS5yZW1vdmVBdHRyaWJ1dGUgJiYgdGhpcy5vcHRpb25zLnJlbW92ZUJpbmRlckF0dHJpYnV0ZXMpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYmluZEluZm8uYXR0ci5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kQ29tcG9uZW50KG5vZGU6IEJpbmRhYmxlRWxlbWVudCkge1xuICAgIGxldCBibG9jayA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5vcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIHJldHVybiBibG9jaztcbiAgICB9XG5cbiAgICBjb25zdCBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBDT01QT05FTlQgPSB0aGlzLm9wdGlvbnMuY29tcG9uZW50c1tub2RlTmFtZV07XG4gICAgaWYgKENPTVBPTkVOVCkge1xuICAgICAgLy8gdGhpcy5yZWdpc3RDb21wb25lbnRXaXRoRmFsbGJhY2sobm9kZSwgQ09NUE9ORU5ULCBub2RlTmFtZSk7XG4gICAgICB0aGlzLnJlZ2lzdENvbXBvbmVudChDT01QT05FTlQsIG5vZGVOYW1lKTtcbiAgICAgIGJsb2NrID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQWxzbyBibG9jayB1bmtub3duIGN1c3RvbSBlbGVtZW50cyBleGNlcHQgcGFnZSBjb21wb25lbnRzXG4gICAgZWxzZSBpZiAoXG4gICAgICB0aGlzLm9wdGlvbnMuYmxvY2tVbmtub3duQ3VzdG9tRWxlbWVudHMgJiZcbiAgICAgIGlzQ3VzdG9tRWxlbWVudChub2RlKSAmJlxuICAgICAgIW5vZGVOYW1lLmVuZHNXaXRoKFwiLXBhZ2VcIilcbiAgICApIHtcbiAgICAgIGJsb2NrID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgcHVibGljIHRyYXZlcnNlKG5vZGU6IEJpbmRhYmxlRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIC8qKiBJZiB0cnVlIHN0b3AgLyBibG9jayB0aGUgcGFyc2VOb2RlIHJlY3Vyc2lvbiAqL1xuICAgIGxldCBibG9jayA9IHRoaXMub3B0aW9ucy5ibG9ja05vZGVOYW1lcy5pbmNsdWRlcyhub2RlLm5vZGVOYW1lKTtcbiAgICBpZiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jaztcbiAgICB9XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcztcblxuICAgIC8vIGJpbmQgYXR0cmlidXRlIGJpbmRlcnMgaWYgYXZhaWxhYmxlXG4gICAgaWYgKGF0dHJpYnV0ZXMgJiYgdGhpcy5vcHRpb25zLmJpbmRlcnMpIHtcbiAgICAgIGJsb2NrID0gdGhpcy5iaW5kQmluZGVycyhhdHRyaWJ1dGVzLCBub2RlKTtcbiAgICAgIGlmIChibG9jaykge1xuICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYmluZCBjb21wb25lbnRzXG4gICAgaWYgKCFibG9jayAmJiAhbm9kZS5fYm91bmQgJiYgdGhpcy5vcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIGJsb2NrID0gdGhpcy5iaW5kQ29tcG9uZW50KG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2s7XG4gIH1cblxuICBwdWJsaWMgYnVpbGRCaW5kaW5nKFxuICAgIG5vZGU6IEhUTUxVbmtub3duRWxlbWVudCB8IFRleHQsXG4gICAgdHlwZTogc3RyaW5nIHwgbnVsbCxcbiAgICBkZWNsYXJhdGlvbjogc3RyaW5nLFxuICAgIEJpbmRlcjogQ2xhc3NPZkJpbmRlcixcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIGNvbnN0IHBhcnNlZERlY2xhcmF0aW9uID0gcGFyc2VEZWNsYXJhdGlvbihkZWNsYXJhdGlvbik7XG4gICAgY29uc3Qga2V5cGF0aCA9IHBhcnNlZERlY2xhcmF0aW9uLmtleXBhdGg7XG4gICAgY29uc3QgcGlwZXMgPSBwYXJzZWREZWNsYXJhdGlvbi5waXBlcztcbiAgICB0aGlzLmJpbmRpbmdzLnB1c2goXG4gICAgICBuZXcgQmluZGVyKHRoaXMsIG5vZGUsIHR5cGUsIEJpbmRlci5rZXksIGtleXBhdGgsIHBpcGVzLCBpZGVudGlmaWVyKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjdXN0b20gZWxlbWVudCB1c2luZyB0aGUgbmF0aXZlIGN1c3RvbUVsZW1lbnRzIGZlYXR1cmUuXG4gICAqIEBwYXJhbSBDT01QT05FTlRcbiAgICogQHBhcmFtIG5vZGVOYW1lXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVnaXN0Q29tcG9uZW50KENPTVBPTkVOVDogQ2xhc3NPZkNvbXBvbmVudCwgbm9kZU5hbWU/OiBzdHJpbmcpIHtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnRzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiY3VzdG9tRWxlbWVudHMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIhXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY3VzdG9tRWxlbWVudHMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIhXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc29sdmVOb2RlTmFtZSA9IG5vZGVOYW1lIHx8IENPTVBPTkVOVC50YWdOYW1lO1xuICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHJlc29sdmVOb2RlTmFtZSkpIHtcbiAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShDT01QT05FTlQudGFnTmFtZSwgQ09NUE9ORU5UKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2NvbnRyb2xcIjtcblxuY29uc3QgREVGQVVMVF9PRkZTRVQgPSAxMDtcblxuLyoqXG4gKiBydi1kYXRhLXNjcm9sbC1wb3NpdGlvblxuICogU2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIHRoZSBlbGVtZW50IGFzIGEgZGF0YSBhdHRyaWJ1dGUsXG4gKiB1c2VmdWwgaWYgeW91IHdhbnQgdG8gZGVmaW5lIHN0eWxlcyBkZXBlbmRpbmcgb24gdGhlIHNjcm9sbCBwb3NpdGlvbi5cbiAqIGBgYFxuICogaHRtbDpub3QoW1tkYXRhLXNjcm9sbC1wb3NpdGlvbi15PSd0b3AnXSkge1xuICogICAgcGFkZGluZy10b3A6IDNlbTtcbiAqIH1cbiAqIGBgYFxuICogQHNlZSBodHRwczovL2Nzcy10cmlja3MuY29tL3N0eWxpbmctYmFzZWQtb24tc2Nyb2xsLXBvc2l0aW9uL1xuICovXG5leHBvcnQgY2xhc3MgRGF0YVNjcm9sbFBvc2l0aW9uWUJpbmRlciBleHRlbmRzIEJpbmRlcjxcbiAgc3RyaW5nLFxuICBIVE1MSW5wdXRFbGVtZW50XG4+IHtcbiAgc3RhdGljIGtleSA9IFwiZGF0YS1zY3JvbGwtcG9zaXRpb24teVwiO1xuXG4gIHByaXZhdGUgd2F0Y2hTY3JvbGxPbkVsZW1lbnQ/OiBIVE1MRWxlbWVudCB8IFdpbmRvdztcblxuICBwcml2YXRlIG9mZnNldFRvcCA9IDA7XG4gIHByaXZhdGUgb2Zmc2V0Qm90dG9tID0gMDtcbiAgcHJpdmF0ZSBlbGVtZW50U2VsZWN0b3IgPSBcIlwiO1xuXG4gIHByaXZhdGUgX29uU2Nyb2xsKCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRTZWxlY3RvciA9PT0gXCJ3aW5kb3dcIikge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMud2F0Y2hTY3JvbGxPbkVsZW1lbnQgYXMgV2luZG93O1xuICAgICAgaWYgKGVsZW1lbnQuc2Nyb2xsWSA8PSAwICsgdGhpcy5vZmZzZXRUb3ApIHtcbiAgICAgICAgdGhpcy5lbC5kYXRhc2V0LnNjcm9sbFBvc2l0aW9uWSA9IFwidG9wXCI7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBlbGVtZW50LmlubmVySGVpZ2h0ICsgZWxlbWVudC5wYWdlWU9mZnNldCArIHRoaXMub2Zmc2V0Qm90dG9tID49XG4gICAgICAgIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbC5kYXRhc2V0LnNjcm9sbFBvc2l0aW9uWSA9IFwiYm90dG9tXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsLmRhdGFzZXQuc2Nyb2xsUG9zaXRpb25ZID0gXCJzY3JvbGxlZFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50LnNjcm9sbFRvcCA8PSAwICsgdGhpcy5vZmZzZXRUb3ApIHtcbiAgICAgICAgdGhpcy5lbC5kYXRhc2V0LnNjcm9sbFBvc2l0aW9uWSA9IFwidG9wXCI7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCArIHRoaXMub2Zmc2V0Qm90dG9tID49XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVsLmRhdGFzZXQuc2Nyb2xsUG9zaXRpb25ZID0gXCJib3R0b21cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWwuZGF0YXNldC5zY3JvbGxQb3NpdGlvblkgPSBcInNjcm9sbGVkXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblNjcm9sbCA9IGRlYm91bmNlKHRoaXMuX29uU2Nyb2xsLmJpbmQodGhpcykpO1xuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBlbGVtZW50U2VsZWN0b3IgPSBcIndpbmRvd1wiKSB7XG4gICAgLy8gUmVtb3ZlIG9sZCBzY3JvbGwgZXZlbnRcbiAgICBpZiAodGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudCkge1xuICAgICAgdGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpO1xuICAgIH1cblxuICAgIC8vIFNldCBuZXcgZWxlbWVudCB0byB3YXRjaCBmb3IgdGhlIHNjcm9sbCBldmVudFxuICAgIGlmIChlbGVtZW50U2VsZWN0b3IgPT09IFwid2luZG93XCIpIHtcbiAgICAgIHRoaXMud2F0Y2hTY3JvbGxPbkVsZW1lbnQgPSB3aW5kb3c7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50U2VsZWN0b3IgPT09IFwidGhpc1wiKSB7XG4gICAgICB0aGlzLndhdGNoU2Nyb2xsT25FbGVtZW50ID0gdGhpcy5lbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudCA9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KGVsZW1lbnRTZWxlY3RvcikgfHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIG5ldyBlbGVtZW50IGZvciBzY3JvbGwgZXZlbnRcbiAgICBpZiAodGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudCkge1xuICAgICAgdGhpcy53YXRjaFNjcm9sbE9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMub2Zmc2V0VG9wID0gTnVtYmVyKHRoaXMuZWwuZGF0YXNldC5vZmZzZXRUb3ApIHx8IERFRkFVTFRfT0ZGU0VUO1xuICAgIHRoaXMub2Zmc2V0Qm90dG9tID0gTnVtYmVyKHRoaXMuZWwuZGF0YXNldC5vZmZzZXRCb3R0b20pIHx8IERFRkFVTFRfT0ZGU0VUO1xuICAgIHRoaXMuZWxlbWVudFNlbGVjdG9yID0gZWxlbWVudFNlbGVjdG9yO1xuXG4gICAgLy8gaW5pdGFsIHNjcm9sbCBwb3NpdGlvblxuICAgIHRoaXMub25TY3JvbGwoKTtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICAvLyBSZW1vdmUgb2xkIHNjcm9sbCBldmVudFxuICAgIGlmICh0aGlzLndhdGNoU2Nyb2xsT25FbGVtZW50KSB7XG4gICAgICB0aGlzLndhdGNoU2Nyb2xsT25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gXCJpbWFnZXNsb2FkZWRcIjtcblxuLyoqXG4gKiBydi1pbWFnZS1ldmVudHNcbiAqIEFkZGl0aW9uYWwgaW1hZ2UgZXZlbnRzOlxuICogKiBsb2FkLWFsd2F5cyAtIFRyaWdnZXJlZCBhZnRlciBhbGwgaW1hZ2VzIGhhdmUgYmVlbiBlaXRoZXIgbG9hZGVkIG9yIGNvbmZpcm1lZCBicm9rZW4uXG4gKiAqIGxvYWQtZG9uZSAtIFRyaWdnZXJlZCBhZnRlciBhbGwgaW1hZ2VzIGhhdmUgc3VjY2Vzc2Z1bGx5IGxvYWRlZCB3aXRob3V0IGFueSBicm9rZW4gaW1hZ2VzLlxuICogKiBsb2FkLWZhaWwgLSBUcmlnZ2VyZWQgYWZ0ZXIgYWxsIGltYWdlcyBoYXZlIGJlZW4gbG9hZGVkIHdpdGggYXQgbGVhc3Qgb25lIGJyb2tlbiBpbWFnZS5cbiAqICogbG9hZC1wcm9ncmVzcyAtIFRyaWdnZXJlZCBhZnRlciBlYWNoIGltYWdlIGhhcyBiZWVuIGxvYWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEltYWdlRXZlbnRzQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEltYWdlRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJpbWFnZS1ldmVudHNcIjtcblxuICBwcml2YXRlIGV2ZW50cz86IEltYWdlc0xvYWRlZC5JbWFnZXNMb2FkZWQ7XG5cbiAgcHJpdmF0ZSBfb25FdmVudChcbiAgICBjdXN0b21FdmVudE5hbWU6IHN0cmluZyxcbiAgICBsb2FkOiBJbWFnZXNMb2FkZWQuSW1hZ2VzTG9hZGVkLFxuICAgIGltYWdlPzogSW1hZ2VzTG9hZGVkLkxvYWRpbmdJbWFnZVxuICApIHtcbiAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbDogeyBsb2FkLCBpbWFnZSB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkFsd2F5cyA9IHRoaXMuX29uRXZlbnQuYmluZCh0aGlzLCBcImxvYWQtYWx3YXlzXCIpO1xuICBwcml2YXRlIG9uRG9uZSA9IHRoaXMuX29uRXZlbnQuYmluZCh0aGlzLCBcImxvYWQtZG9uZVwiKTtcbiAgcHJpdmF0ZSBvbkZhaWwgPSB0aGlzLl9vbkV2ZW50LmJpbmQodGhpcywgXCJsb2FkLWZhaWxcIik7XG4gIHByaXZhdGUgb25Qcm9ncmVzcyA9IHRoaXMuX29uRXZlbnQuYmluZCh0aGlzLCBcImxvYWQtcHJvZ3Jlc3NcIik7XG5cbiAgYmluZChlbDogSFRNTEltYWdlRWxlbWVudCkge1xuICAgIHRoaXMuZXZlbnRzID0gaW1hZ2VzTG9hZGVkKGVsKTtcblxuICAgIC8vIEZvcndhcmQgdGhlIGV2ZW50cyBhcyBuYXRpdmUgZXZlbnRzXG4gICAgdGhpcy5ldmVudHM/Lm9uKFwiYWx3YXlzXCIsIHRoaXMub25BbHdheXMpO1xuICAgIHRoaXMuZXZlbnRzPy5vbihcImRvbmVcIiwgdGhpcy5vbkRvbmUpO1xuICAgIHRoaXMuZXZlbnRzPy5vbihcImZhaWxcIiwgdGhpcy5vbkZhaWwpO1xuICAgIHRoaXMuZXZlbnRzPy5vbihcInByb2dyZXNzXCIsIHRoaXMub25Qcm9ncmVzcyk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKHRoaXMuZXZlbnRzKSB7XG4gICAgICB0aGlzLmV2ZW50cz8ub2ZmKFwiYWx3YXlzXCIsIHRoaXMub25BbHdheXMpO1xuICAgICAgdGhpcy5ldmVudHM/Lm9mZihcImRvbmVcIiwgdGhpcy5vbkRvbmUpO1xuICAgICAgdGhpcy5ldmVudHM/Lm9mZihcImZhaWxcIiwgdGhpcy5vbkZhaWwpO1xuICAgICAgdGhpcy5ldmVudHM/Lm9mZihcInByb2dyZXNzXCIsIHRoaXMub25Qcm9ncmVzcyk7XG4gICAgfVxuICB9XG5cbiAgcm91dGluZSgpIHtcbiAgICAvLyBub3RoaW5nIHlldFxuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9kYXRhLXNjcm9sbC1wb3NpdGlvbi15LmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW1hZ2UtZXZlbnRzLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG91Y2gtZXZlbnRzLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsLWV2ZW50cy5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Njcm9sbC1wb3NpdGlvbi1hbmdsZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Njcm9sbGJhci1hdXRvc2Nyb2xsLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsYmFyLWRyYWdnYWJsZS5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N5bmMtZWxlbWVudC1wcm9wZXJ0eS5iaW5kZXIuanNcIjtcbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFNjcm9sbEV2ZW50c1NlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvdG91Y2gtZXZlbnRzL3Njcm9sbC1ldmVudHMuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsRXZlbnRzQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwic2Nyb2xsLWV2ZW50c1wiO1xuXG4gIHByaXZhdGUgdG91Y2hFdmVudFNlcnZpY2U/OiBTY3JvbGxFdmVudHNTZXJ2aWNlO1xuXG4gIGJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy50b3VjaEV2ZW50U2VydmljZSA9IG5ldyBTY3JvbGxFdmVudHNTZXJ2aWNlKGVsKTtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy50b3VjaEV2ZW50U2VydmljZSkge1xuICAgICAgKHRoaXMudG91Y2hFdmVudFNlcnZpY2UgYXMgU2Nyb2xsRXZlbnRzU2VydmljZSkuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoKSB7XG4gICAgLy8gbm90aGluZ1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBzY3JvbGxUb1Bvc2l0aW9uIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuXG4vKipcbiAqIHJ2LXNjcm9sbC1wb3NpdGlvbi0qXG4gKlxuICogU2Nyb2xsIHRvIGEgcG9zaXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiA8ZGl2IHJ2LXNjcm9sbC1wb3NpdGlvbi15PVwiJ2VuZCdcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogPGRpdiBydi1zY3JvbGwtcG9zaXRpb24teD1cIidzdGFydCdcIj48L2Rpdj5cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsUG9zaXRpb25BbmdsZUJpbmRlciBleHRlbmRzIEJpbmRlcjxcbiAgbnVtYmVyIHwgXCJlbmRcIiB8IFwic3RhcnRcIixcbiAgSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpIHwgbnVsbFxuPiB7XG4gIHN0YXRpYyBrZXkgPSBcInNjcm9sbC1wb3NpdGlvbi0qXCI7XG5cbiAgcHJpdmF0ZSBwb3NpdGlvbj86IG51bWJlciB8IFwiZW5kXCIgfCBcInN0YXJ0XCI7XG5cbiAgcHJpdmF0ZSBhbmdsZT86IFwieFwiIHwgXCJ5XCIgfCBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcIiB8IFwiYm90aFwiO1xuXG4gIHByaXZhdGUgX29uUmVzaXplKCkge1xuICAgIGlmICghdGhpcy5wb3NpdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicG9zdGlvbiBub3QgZGVmaW5lZCFcIik7XG4gICAgfVxuICAgIGlmICghdGhpcy5hbmdsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYW5nbGUgbm90IGRlZmluZWQhXCIpO1xuICAgIH1cbiAgICBzY3JvbGxUb1Bvc2l0aW9uKFxuICAgICAgdGhpcy5lbCxcbiAgICAgIHRoaXMucG9zaXRpb24sXG4gICAgICB0aGlzLmFuZ2xlIGFzIFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiIHwgXCJib3RoXCJcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBvblJlc2l6ZSA9IHRoaXMuX29uUmVzaXplLmJpbmQodGhpcyk7XG5cbiAgcm91dGluZShcbiAgICBlbDogSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpIHwgbnVsbCxcbiAgICBwb3NpdGlvbjogbnVtYmVyIHwgXCJlbmRcIiB8IFwic3RhcnRcIlxuICApIHtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgdGhpcy5hbmdsZSA9IHRoaXMuYXJnc1swXSBhcyBcInhcIiB8IFwieVwiIHwgXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCIgfCBcImJvdGhcIjtcblxuICAgIGlmICh0aGlzLmFuZ2xlID09PSBcInhcIikge1xuICAgICAgdGhpcy5hbmdsZSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFuZ2xlID09PSBcInlcIikge1xuICAgICAgdGhpcy5hbmdsZSA9IFwidmVydGljYWxcIjtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgc2Nyb2xsVG9Qb3NpdGlvbihlbCwgdGhpcy5wb3NpdGlvbiwgdGhpcy5hbmdsZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcbmltcG9ydCB7XG4gIEF1dG9zY3JvbGwsXG4gIEF1dG9zY3JvbGxPcHRpb25zLFxufSBmcm9tIFwiLi4vc2VydmljZXMvYXV0b3Njcm9sbC5zZXJ2aWNlLmpzXCI7XG5cbi8qKlxuICogU2xpZGVvdXQgY2xpY2sgZXZlbnQgdG8gdG9nZ2xlIHRoZSBzbGlkZW91dFxuICovXG5leHBvcnQgY2xhc3MgQXV0b3Njcm9sbEJpbmRlciBleHRlbmRzIEJpbmRlcjxBdXRvc2Nyb2xsT3B0aW9ucywgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiYXV0b3Njcm9sbFwiO1xuXG4gIGF1dG9zY3JvbGw/OiBBdXRvc2Nyb2xsO1xuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBvcHRpb25zOiBBdXRvc2Nyb2xsT3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMud2lkdGggJiYgaXNTdHJpbmcob3B0aW9ucy53aWR0aCkpIHtcbiAgICAgIGlmIChvcHRpb25zLndpZHRoID09PSBcIjEwMHZ3XCIpIHtcbiAgICAgICAgZWwuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsLmNsYXNzTGlzdC5hZGQoYHJ2LWF1dG9zY3JvbGwtJHtvcHRpb25zLmFuZ2xlfWApO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5hdXRvc2Nyb2xsKSB7XG4gICAgICAgICh0aGlzLmF1dG9zY3JvbGwgYXMgQXV0b3Njcm9sbCkuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdXRvc2Nyb2xsID0gbmV3IEF1dG9zY3JvbGwoZWwsIG9wdGlvbnMpO1xuICAgIH0sIDEwMDApO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGlmICh0aGlzLmF1dG9zY3JvbGwpIHtcbiAgICAgICh0aGlzLmF1dG9zY3JvbGwgYXMgQXV0b3Njcm9sbCkuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHtcbiAgRHJhZ3Njcm9sbCxcbiAgRHJhZ3Njcm9sbE9wdGlvbnMsXG59IGZyb20gXCIuLi9zZXJ2aWNlcy9kcmFnc2Nyb2xsLnNlcnZpY2UuanNcIjtcblxuLyoqXG4gKiBkcmFnc2Nyb2xsXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxiYXJEcmFnZ2FibGVCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8XG4gIERyYWdzY3JvbGxPcHRpb25zLFxuICBIVE1MRWxlbWVudFxuPiB7XG4gIHN0YXRpYyBrZXkgPSBcInNjcm9sbGJhci1kcmFnZ2FibGVcIjtcblxuICBwcml2YXRlIGRyYWdzY3JvbGw/OiBEcmFnc2Nyb2xsO1xuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBvcHRpb25zOiBEcmFnc2Nyb2xsT3B0aW9ucykge1xuICAgIGlmICh0aGlzLmRyYWdzY3JvbGwpIHtcbiAgICAgICh0aGlzLmRyYWdzY3JvbGwgYXMgRHJhZ3Njcm9sbCkuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLmRyYWdzY3JvbGwgPSBuZXcgRHJhZ3Njcm9sbChlbCwgb3B0aW9ucyk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKHRoaXMuZHJhZ3Njcm9sbCkge1xuICAgICAgKHRoaXMuZHJhZ3Njcm9sbCBhcyBEcmFnc2Nyb2xsKS5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9jb250cm9sXCI7XG5cbi8qKlxuICogQmluZHMgYW4gZXZlbnQgaGFuZGxlciBvbiB0aGUgZWxlbWVudC5cbiAqIGVpdGhlciBgc3luYy1lbGVtZW50LXdpZHRoYCBvciBgc3luYy1lbGVtZW50LWhlaWdodGBcbiAqL1xuZXhwb3J0IGNsYXNzIFN5bmNFbGVtZW50UHJvcGVydHlCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJzeW5jLWVsZW1lbnQtKlwiO1xuXG4gIGZ1bmN0aW9uID0gdHJ1ZTtcbiAgcHJpb3JpdHkgPSAxMDAwO1xuXG4gIHByaXZhdGUgZWxUb1N5bmM/OiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIHN5bmNXaWR0aCA9IHRocm90dGxlKCgpID0+IHtcbiAgICB0aGlzLmVsLnN0eWxlLndpZHRoID0gKHRoaXMuZWxUb1N5bmM/LmNsaWVudFdpZHRoIHx8IDApICsgXCJweFwiO1xuICB9KTtcblxuICBwcml2YXRlIHN5bmNIZWlnaHQgPSB0aHJvdHRsZSgoKSA9PiB7XG4gICAgdGhpcy5lbC5zdHlsZS5oZWlnaHQgPSAodGhpcy5lbFRvU3luYz8uY2xpZW50SGVpZ2h0IHx8IDApICsgXCJweFwiO1xuICB9KTtcblxuICB1bmJpbmQoKSB7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gdGhpcy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBpZiAodGhpcy5lbFRvU3luYykge1xuICAgICAgdGhpcy5lbFRvU3luYy5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBcInJlc2l6ZVwiLFxuICAgICAgICBwcm9wZXJ0eU5hbWUgPT09IFwid2lkdGhcIiA/IHRoaXMuc3luY1dpZHRoIDogdGhpcy5zeW5jSGVpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuYXJncyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJncyBpcyBudWxsXCIpO1xuICAgIH1cbiAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSB0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nO1xuXG4gICAgaWYgKHRoaXMuZWxUb1N5bmMpIHtcbiAgICAgIHRoaXMuZWxUb1N5bmMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJyZXNpemVcIixcbiAgICAgICAgcHJvcGVydHlOYW1lID09PSBcIndpZHRoXCIgPyB0aGlzLnN5bmNXaWR0aCA6IHRoaXMuc3luY0hlaWdodFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudFRvU3luYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbHVlKTtcbiAgICBpZiAoZWxlbWVudFRvU3luYykge1xuICAgICAgdGhpcy5lbFRvU3luYyA9IGVsZW1lbnRUb1N5bmM7XG4gICAgICBzd2l0Y2ggKHByb3BlcnR5TmFtZSkge1xuICAgICAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudFRvU3luYy5jbGllbnRIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5zeW5jSGVpZ2h0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndpZHRoXCI6XG4gICAgICAgICAgZWwuc3R5bGUud2lkdGggPSBlbGVtZW50VG9TeW5jLmNsaWVudFdpZHRoICsgXCJweFwiO1xuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuc3luY1dpZHRoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIltzeW5jRWxlbWVudFByb3BlcnR5QmluZGVyXSBVbmtub3duIHByb3BlcnR5OiBcIiArIHByb3BlcnR5TmFtZVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbc3luY0VsZW1lbnRQcm9wZXJ0eUJpbmRlcl0gQ291bGQgbm90IGZpbmQgZWxlbWVudCB3aXRoIGlkOiBcIiArIHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgVG91Y2hFdmVudHNTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3RvdWNoLWV2ZW50cy90b3VjaC1ldmVudHMuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgVG91Y2hFdmVudHNCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8c3RyaW5nLCBIVE1MRWxlbWVudD4ge1xuICBzdGF0aWMga2V5ID0gXCJ0b3VjaC1ldmVudHNcIjtcblxuICB0b3VjaEV2ZW50U2VydmljZT86IFRvdWNoRXZlbnRzU2VydmljZTtcblxuICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMudG91Y2hFdmVudFNlcnZpY2UgPSBuZXcgVG91Y2hFdmVudHNTZXJ2aWNlKGVsKTtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy50b3VjaEV2ZW50U2VydmljZSkge1xuICAgICAgdGhpcy50b3VjaEV2ZW50U2VydmljZS5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcm91dGluZSgpIHtcbiAgICAvLyBub3RoaW5nXG4gIH1cbn1cbiIsImltcG9ydCB7IFJpYmFNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4vaGVscGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBiaW5kZXJzIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbi8vIGltcG9ydCAqIGFzIGZvcm1hdHRlcnMgZnJvbSBcIi4vZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgc2VydmljZXMgZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbi8vIGltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCB7IEV4dHJhc01vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY29uc3QgZXh0cmFzTW9kdWxlOiBSaWJhTW9kdWxlPEV4dHJhc01vZHVsZU9wdGlvbnM+ID0ge1xuICBoZWxwZXIsXG4gIGZvcm1hdHRlcnM6IHt9LFxuICBiaW5kZXJzLFxuICBzZXJ2aWNlcyxcbiAgY29tcG9uZW50czoge30sXG4gIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gICAgc2VydmljZXMuRXh0cmFzU2VydmljZS5zZXRTaW5nbGV0b24ob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuIiwiLy8gZWFzaW5nIG1ldGhvZHMsIHNlZSBodHRwczovL3Bhd2VsZ3J6eWJlay5jb20vcGFnZS1zY3JvbGwtaW4tdmFuaWxsYS1qYXZhc2NyaXB0L1xuXG5leHBvcnQgY29uc3QgbGluZWFyID0gKHQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gdDtcbn07XG5leHBvcnQgY29uc3QgZWFzZUluUXVhZCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgKiB0O1xufTtcbmV4cG9ydCBjb25zdCBlYXNlT3V0UXVhZCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgKiAoMiAtIHQpO1xufTtcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRRdWFkID0gKHQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gdCA8IDAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0O1xufTtcbmV4cG9ydCBjb25zdCBlYXNlSW5DdWJpYyA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn07XG5leHBvcnQgY29uc3QgZWFzZU91dEN1YmljID0gKHQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufTtcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRDdWJpYyA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgPCAwLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxO1xufTtcbmV4cG9ydCBjb25zdCBlYXNlSW5RdWFydCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgKiB0ICogdCAqIHQ7XG59O1xuZXhwb3J0IGNvbnN0IGVhc2VPdXRRdWFydCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIDEgLSAtLXQgKiB0ICogdCAqIHQ7XG59O1xuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1YXJ0ID0gKHQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gdCA8IDAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAtLXQgKiB0ICogdCAqIHQ7XG59O1xuZXhwb3J0IGNvbnN0IGVhc2VJblF1aW50ID0gKHQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG59O1xuZXhwb3J0IGNvbnN0IGVhc2VPdXRRdWludCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIDEgKyAtLXQgKiB0ICogdCAqIHQgKiB0O1xufTtcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRRdWludCA9ICh0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHQgPCAwLjUgPyAxNiAqIHQgKiB0ICogdCAqIHQgKiB0IDogMSArIDE2ICogLS10ICogdCAqIHQgKiB0ICogdDtcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9lYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zY3JvbGwuanNcIjtcbiIsImltcG9ydCB7IFNjcm9sbFBvc2l0aW9uIH0gZnJvbSBcIi4uL3R5cGVzL3Njcm9sbC1wb3NpdGlvbi5qc1wiO1xuXG5leHBvcnQgY29uc3QgZ2V0U2Nyb2xsUG9zaXRpb24gPSAoXG4gIGVsZW1lbnQ6IEhUTUxVbmtub3duRWxlbWVudCB8IFdpbmRvd1xuKTogU2Nyb2xsUG9zaXRpb24gPT4ge1xuICBjb25zdCB3aW5kb3cgPSBlbGVtZW50IGFzIFdpbmRvdztcbiAgY29uc3QgZWwgPSBlbGVtZW50IGFzIEhUTUxVbmtub3duRWxlbWVudDtcbiAgLy8gSWYgZWxlbWVudCBpcyB3aW5kb3dcbiAgaWYgKHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cubG9jYXRpb24pIHtcbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbjogU2Nyb2xsUG9zaXRpb24gPSB7XG4gICAgICAvKiogaG9yaXpvbnRhbDogbGVmdCAvIHJpZ2h0IC8gd2lkdGggKi9cbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIC8qKiB2ZXJ0aWNhbDogdG9wIC8gYm90dG9tIC8gaGVpZ2h0ICovXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAvKiogaG9yaXpvbnRhbDogbGVmdCAvIHJpZ2h0IC8gd2lkdGggKi9cbiAgICAgIG1heFg6XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCAtXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgIC8qKiB2ZXJ0aWNhbDogdG9wIC8gYm90dG9tIC8gaGVpZ2h0ICovXG4gICAgICBtYXhZOlxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC1cbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICB9O1xuICAgIHJldHVybiBzY3JvbGxQb3NpdGlvbjtcbiAgfVxuICBjb25zdCBzY3JvbGxQb3NpdGlvbjogU2Nyb2xsUG9zaXRpb24gPSB7XG4gICAgLyoqIGhvcml6b250YWw6IGxlZnQgLyByaWdodCAvIHdpZHRoICovXG4gICAgeDogZWwuc2Nyb2xsTGVmdCxcbiAgICAvKiogdmVydGljYWw6IHRvcCAvIGJvdHRvbSAvIGhlaWdodCAqL1xuICAgIHk6IGVsLnNjcm9sbFRvcCxcbiAgICAvKiogaG9yaXpvbnRhbDogbGVmdCAvIHJpZ2h0IC8gd2lkdGggKi9cbiAgICBtYXhYOiBlbC5zY3JvbGxXaWR0aCAtIGVsLmNsaWVudFdpZHRoLFxuICAgIC8qKiB2ZXJ0aWNhbDogdG9wIC8gYm90dG9tIC8gaGVpZ2h0ICovXG4gICAgbWF4WTogZWwuc2Nyb2xsSGVpZ2h0IC0gZWwuY2xpZW50SGVpZ2h0LFxuICB9O1xuXG4gIHJldHVybiBzY3JvbGxQb3NpdGlvbjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Njcm9sbGFibGUgPSAoZWxlbWVudDogSFRNTFVua25vd25FbGVtZW50KSA9PiB7XG4gIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oZWxlbWVudCk7XG4gIHJldHVybiBzY3JvbGxQb3NpdGlvbi5tYXhYID4gMCB8fCBzY3JvbGxQb3NpdGlvbi5tYXhZID4gMDtcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9oZWxwZXIvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaW5kZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgZXh0cmFzTW9kdWxlIH0gZnJvbSBcIi4vZXh0cmFzLm1vZHVsZS5qc1wiO1xuIiwiaW1wb3J0IHsgZ2V0U2Nyb2xsUG9zaXRpb24gfSBmcm9tIFwiLi4vaGVscGVyL3Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgR2FtZWxvb3AgfSBmcm9tIFwiLi9nYW1lbG9vcC5zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9jb250cm9sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0b3Njcm9sbE9wdGlvbnMge1xuICBhbmdsZT86IFwidmVydGljYWxcIiB8IFwiaG9yaXpvbnRhbFwiO1xuICBkaXJlY3Rpb24/OiAxIHwgLTE7XG4gIHZlbG9jaXR5PzogbnVtYmVyO1xuICB3aWR0aD86IHN0cmluZztcbiAgcGF1c2VPbkhvdmVyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEF1dG9zY3JvbGwge1xuICBwcm90ZWN0ZWQgdG91Y2hDYXBhYmxlID0gXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3c7XG5cbiAgcHJvdGVjdGVkIGRpcmVjdGlvbiA9IDE7XG5cbiAgcHJvdGVjdGVkIGxpbWl0OiBudW1iZXI7XG5cbiAgcHJvdGVjdGVkIG9wdGlvbnM6IEF1dG9zY3JvbGxPcHRpb25zO1xuXG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgcHJvdGVjdGVkIF9wYXVzZSA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCB2ZWxvY2l0eSA9IDAuMDA4O1xuXG4gIHByb3RlY3RlZCBtb3ZlID0gMDtcblxuICBwcm90ZWN0ZWQgbGFzdE1vdmUgPSAwO1xuXG4gIHByb3RlY3RlZCBhbmdsZTogXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCIgPSBcImhvcml6b250YWxcIjtcblxuICBwcm90ZWN0ZWQgcGF1c2VPbkhvdmVyID0gdHJ1ZTtcblxuICBwcm90ZWN0ZWQgcmVzdW1lVGltZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKGVsOiBIVE1MRWxlbWVudCwgb3B0aW9uczogQXV0b3Njcm9sbE9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbiB8fCB0aGlzLmRpcmVjdGlvbjtcbiAgICB0aGlzLnZlbG9jaXR5ID0gdGhpcy5vcHRpb25zLnZlbG9jaXR5IHx8IHRoaXMudmVsb2NpdHk7XG4gICAgdGhpcy5hbmdsZSA9IHRoaXMub3B0aW9ucy5hbmdsZSB8fCB0aGlzLmFuZ2xlO1xuICAgIHRoaXMucGF1c2VPbkhvdmVyID1cbiAgICAgIHR5cGVvZiB0aGlzLm9wdGlvbnMucGF1c2VPbkhvdmVyID09PSBcImJvb2xlYW5cIlxuICAgICAgICA/IHRoaXMub3B0aW9ucy5wYXVzZU9uSG92ZXJcbiAgICAgICAgOiB0aGlzLnBhdXNlT25Ib3ZlcjtcblxuICAgIHRoaXMubGltaXQgPSB0aGlzLmdldExpbWl0KHRoaXMuZWwpO1xuICAgIHRoaXMubW92ZSA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcblxuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gLTEpIHtcbiAgICAgIC8vIHN0YXJ0IHJpZ2h0XG4gICAgICB0aGlzLmVsLnNjcm9sbExlZnQgPSB0aGlzLmxpbWl0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdGFydCBsZWZ0XG4gICAgICB0aGlzLmVsLnNjcm9sbExlZnQgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIEdhbWVsb29wLnN0YXJ0TG9vcCh7IG1heEZQUzogNjAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5vdGUgdGhpcyBpcyBub3QgdGhlIGdhbWVsb29wIHVwZGF0ZSBtZXRob2QhXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCkge1xuICAgIHRoaXMubGltaXQgPSB0aGlzLmdldExpbWl0KHRoaXMuZWwpO1xuICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXVzZSgpIHtcbiAgICB0aGlzLmVsLnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJcIjtcbiAgICB0aGlzLl9wYXVzZSA9IHRydWU7XG4gIH1cblxuICAvKiogUmVzdW1lIGF1dG9zY3JvbGxpbmcgaWYgdGhpcyBtZXRob2Qgd2FzIG5vdCBjYWxsZWQgdXAgZm9yIFtkZWxheV0gbWlsbGlzZWNvbmRzICovXG4gIHB1YmxpYyByZXN1bWUoZGVsYXkgPSAwKSB7XG4gICAgaWYgKCF0aGlzLl9wYXVzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcFJlc3VtZVRpbWVvdXQoKTtcblxuICAgIHRoaXMucmVzdW1lVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLl9wYXVzZSA9IGZhbHNlO1xuICAgICAgLy8gRGlzYWJsZSBzbW9vdGggc2Nyb2xsaW5nIG9uIGF1dG9zY3JvbGwgaWYgc2V0XG4gICAgICB0aGlzLmVsLnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCI7XG4gICAgfSwgZGVsYXkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZUluID0gdGhpcy5vbk1vdXNlSW4uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VPdXQgPSB0aGlzLm9uTW91c2VPdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VVcCA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNjcm9sbCA9IHRoaXMub25TY3JvbGwuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVNb3ZlID0gdGhpcy51cGRhdGVNb3ZlLmJpbmQodGhpcyk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VJbiwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICB9KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5vbk1vdXNlSW4sIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCB0aGlzLm9uTW91c2VJbiwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICB9KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25Nb3VzZUluLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VPdXQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgdGhpcy5vbk1vdXNlT3V0LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uTW91c2VVcCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICB9KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLm9uTW91c2VVcCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnRvdWNoQ2FwYWJsZSkge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25Nb3VzZVVwLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZFwiLCB0aGlzLm9uTW91c2VVcCwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICAvLyBTZWUgU2Nyb2xsRXZlbnRzU2VydmljZSBmb3IgXCJzY3JvbGxlbmRlZFwiIGV2ZW50XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRlZFwiLCB0aGlzLm9uTW91c2VVcCwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZFwiLCB0aGlzLm9uU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZGVkXCIsIHRoaXMub25TY3JvbGwsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEdhbWVsb29wLmV2ZW50cy5vbihcInJlbmRlclwiLCB0aGlzLnJlbmRlcik7XG4gICAgR2FtZWxvb3AuZXZlbnRzLm9uKFwidXBkYXRlXCIsIHRoaXMudXBkYXRlTW92ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZSk7XG5cbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUluKTtcbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5vbk1vdXNlSW4pO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgdGhpcy5vbk1vdXNlSW4pO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vbk1vdXNlSW4pO1xuXG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VPdXQpO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIHRoaXMub25Nb3VzZU91dCk7XG5cbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLm9uTW91c2VVcCk7XG5cbiAgICBpZiAodGhpcy50b3VjaENhcGFibGUpIHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsZW5kZWRcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRlZFwiLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICB9XG5cbiAgICBHYW1lbG9vcC5ldmVudHMub2ZmKFwicmVuZGVyXCIsIHRoaXMucmVuZGVyKTtcbiAgICBHYW1lbG9vcC5ldmVudHMub2ZmKFwidXBkYXRlXCIsIHRoaXMudXBkYXRlTW92ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25Nb3VzZUluKCkge1xuICAgIGlmICh0aGlzLnBhdXNlT25Ib3Zlcikge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdXNlT3V0KCkge1xuICAgIHRoaXMucmVzdW1lKDIwMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25Nb3VzZVVwKCkge1xuICAgIHRoaXMucmVzdW1lKDEwMDApO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9vblJlc2l6ZSgpIHtcbiAgICB0aGlzLmxpbWl0ID0gdGhpcy5nZXRMaW1pdCh0aGlzLmVsKTtcbiAgICB0aGlzLnJlc3VtZSgyMDApO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uUmVzaXplID0gdGhyb3R0bGUodGhpcy5fb25SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgcHJvdGVjdGVkIF9vblNjcm9sbCgpIHtcbiAgICB0aGlzLnN0b3BSZXN1bWVUaW1lb3V0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TY3JvbGwgPSB0aHJvdHRsZSh0aGlzLl9vblNjcm9sbC5iaW5kKHRoaXMpKTtcblxuICBwcm90ZWN0ZWQgc3RvcFJlc3VtZVRpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMucmVzdW1lVGltZXIgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc3VtZVRpbWVyKTtcbiAgICAgIHRoaXMucmVzdW1lVGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuYW5nbGUgPT09IFwidmVydGljYWxcIiA/IHRoaXMuZWwuc2Nyb2xsVG9wIDogdGhpcy5lbC5zY3JvbGxMZWZ0KSB8fCAwXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRQb3NpdGlvbigpIHtcbiAgICB0aGlzLm1vdmUgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0TGltaXQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuYW5nbGUgPT09IFwidmVydGljYWxcIlxuICAgICAgPyBnZXRTY3JvbGxQb3NpdGlvbihlbCkubWF4WVxuICAgICAgOiBnZXRTY3JvbGxQb3NpdGlvbihlbCkubWF4WDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIEludGVycG9sYXRpb246XG4gICAqIGBgYFxuICAgKiBwcm90ZWN0ZWQgcmVuZGVyKEludGVycG9sYXRpb246IG51bWJlcikge1xuICAgKiAuLi5cbiAgICogdGhpcy5tb3ZlID0gKHRoaXMubGFzdE1vdmUgKyAodGhpcy5tb3ZlIC0gdGhpcy5sYXN0TW92ZSkgKiBJbnRlcnBvbGF0aW9uKTtcbiAgICogYGBgXG4gICAqIGlzIG5vdCB3b3JraW5nIGhlcmUgZm9yIHNvbWUgcmVhc29uXG4gICAqIGxpa2UgaXQgd29ya3MgaW4gdGhlIGRlbW9zL2V4dHJhcy1nYW1lLWxvb3AgZGVtbyBvciBoZXJlOlxuICAgKiBodHRwczovL2lzYWFjc3VraW4uY29tL25ld3MvMjAxNS8wMS9kZXRhaWxlZC1leHBsYW5hdGlvbi1qYXZhc2NyaXB0LWdhbWUtbG9vcHMtYW5kLXRpbWluZ1xuICAgKlxuICAgKiBXaXRob3V0IHRoaXMgdGhlIHNjcm9sbGJhciBzY3JvbGxzIHNtb290aCwgbmVlZCB0byBmaW5kIG91dCB3aHkuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLl9wYXVzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsKHRoaXMubW92ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdXBkYXRlTW92ZShkZWx0YTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX3BhdXNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0TW92ZSA9IHRoaXMubW92ZTtcbiAgICBjb25zdCBhcHBlbmQgPSB0aGlzLnZlbG9jaXR5ICogdGhpcy5kaXJlY3Rpb24gKiBkZWx0YTtcbiAgICB0aGlzLm1vdmUgKz0gYXBwZW5kO1xuXG4gICAgLy8gU3dpdGNoIGRpcmVjdGlvbnMgaWYgd2UgZ28gdG9vIGZhclxuICAgIGlmICh0aGlzLm1vdmUgPD0gMCAmJiB0aGlzLmRpcmVjdGlvbiAhPT0gMSkge1xuICAgICAgdGhpcy5kaXJlY3Rpb24gPSAxO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdmUgPj0gdGhpcy5saW1pdCAmJiB0aGlzLmRpcmVjdGlvbiAhPT0gLTEpIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gLTE7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNjcm9sbChtb3ZlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5hbmdsZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICB0aGlzLmVsLnNjcm9sbFRvcCA9IG1vdmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWwuc2Nyb2xsTGVmdCA9IG1vdmU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBpc1Njcm9sbGFibGUgfSBmcm9tIFwiLi4vaGVscGVyL3Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvY29udHJvbFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyYWdzY3JvbGxPcHRpb25zIHtcbiAgZGV0ZWN0R2xvYmFsTW92ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogU2Nyb2xsIGFuIHNjcm9sbGFibGUgZWxlbWVudCBieSBkcmFnZ2luZyBhbmQgbW92aW5nIHlvdXIgbW91c2UuXG4gKiBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vYXN2ZC9kcmFnc2Nyb2xsXG4gKi9cbmV4cG9ydCBjbGFzcyBEcmFnc2Nyb2xsIHtcbiAgcHJvdGVjdGVkIG9wdGlvbnM6IERyYWdzY3JvbGxPcHRpb25zO1xuICBwcm90ZWN0ZWQgbGFzdENsaWVudFggPSAwO1xuICBwcm90ZWN0ZWQgbGFzdENsaWVudFkgPSAwO1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBwcm90ZWN0ZWQgcHVzaGVkID0gZmFsc2U7XG4gIHByb3RlY3RlZCB0b3VjaENhcGFibGUgPSBcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgb3B0aW9uczogRHJhZ3Njcm9sbE9wdGlvbnMgPSB7IGRldGVjdEdsb2JhbE1vdmU6IHRydWUgfVxuICApIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmICh0aGlzLnRvdWNoQ2FwYWJsZSkge1xuICAgICAgLy8gRG8gbm90aW5nIG9uIHRvdWNoIGRldmljZXNcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlVXAgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGVja0RyYWdnYWJsZSA9IHRoaXMuY2hlY2tEcmFnZ2FibGUuYmluZCh0aGlzKTtcblxuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm9uTW91c2VEb3duLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5jaGVja0RyYWdnYWJsZSk7XG5cbiAgICAvLyBVc2UgZ2xvYmFsIG1vdmUgaWYgeW91ciBlbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgZnVsbCB3aWR0aCAvIGhlaWdodFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGV0ZWN0R2xvYmFsTW92ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmUpO1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXAsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSk7XG5cbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gaW5pdGlhbFxuICAgIHRoaXMuY2hlY2tEcmFnZ2FibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoXCJkcmFnZ2FibGVcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2NoZWNrRHJhZ2dhYmxlKCkge1xuICAgIGlmIChpc1Njcm9sbGFibGUodGhpcy5lbCkpIHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChcImRyYWdnYWJsZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJhZ2dhYmxlXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjaGVja0RyYWdnYWJsZSA9IHRocm90dGxlKHRoaXMuX2NoZWNrRHJhZ2dhYmxlLmJpbmQodGhpcykpO1xuXG4gIHByb3RlY3RlZCBvbk1vdXNlRG93bihlOiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5wdXNoZWQgPSB0cnVlO1xuICAgIHRoaXMubGFzdENsaWVudFggPSBlLmNsaWVudFg7XG4gICAgdGhpcy5sYXN0Q2xpZW50WSA9IGUuY2xpZW50WTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdXNlVXAoKSB7XG4gICAgdGhpcy5wdXNoZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdXNlTW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgbGV0IG5ld1Njcm9sbFggPSAwO1xuICAgIGxldCBuZXdTY3JvbGxZID0gMDtcbiAgICBpZiAodGhpcy5wdXNoZWQpIHtcbiAgICAgIHRoaXMuZWwuc2Nyb2xsTGVmdCAtPSBuZXdTY3JvbGxYID1cbiAgICAgICAgLXRoaXMubGFzdENsaWVudFggKyAodGhpcy5sYXN0Q2xpZW50WCA9IGUuY2xpZW50WCk7XG4gICAgICB0aGlzLmVsLnNjcm9sbFRvcCAtPSBuZXdTY3JvbGxZID1cbiAgICAgICAgLXRoaXMubGFzdENsaWVudFkgKyAodGhpcy5sYXN0Q2xpZW50WSA9IGUuY2xpZW50WSk7XG4gICAgICBpZiAodGhpcy5lbCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsLnNjcm9sbExlZnQgLT0gbmV3U2Nyb2xsWDtcbiAgICAgICAgdGhpcy5lbC5zY3JvbGxUb3AgLT0gbmV3U2Nyb2xsWTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5jaGVja0RyYWdnYWJsZSk7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMub25Nb3VzZURvd24pO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXh0cmFzTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgRXh0cmFzU2VydmljZSB7XG4gIHByb3RlY3RlZCBzdGF0aWMgX29wdGlvbnM6IEV4dHJhc01vZHVsZU9wdGlvbnM7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBFeHRyYXNTZXJ2aWNlO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqL1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTaW5nbGV0b24gb2YgRXh0cmFzU2VydmljZSBub3QgZGVmaW5lZCwgcGxlYXNlIGNhbGwgc2V0U2luZ2xldG9uIGZpcnN0IWBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRTaW5nbGV0b24ob3B0aW9uczogRXh0cmFzTW9kdWxlT3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2luZ2xldG9uIG9mIEV4dHJhc1NlcnZpY2UgYWxyZWFkeSBkZWZpbmVkIWApO1xuICAgIH1cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEZ1bGxzY3JlZW5TZXJ2aWNlIHtcbiAgZW50ZXJLOlxuICAgIHwgXCJyZXF1ZXN0RnVsbHNjcmVlblwiXG4gICAgfCBcIm1velJlcXVlc3RGdWxsU2NyZWVuXCJcbiAgICB8IFwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW5cIlxuICAgIHwgXCJtc1JlcXVlc3RGdWxsc2NyZWVuXCIgPSBcInJlcXVlc3RGdWxsc2NyZWVuXCI7XG4gIGV4aXRLOlxuICAgIHwgXCJleGl0RnVsbHNjcmVlblwiXG4gICAgfCBcIm1vekNhbmNlbEZ1bGxTY3JlZW5cIlxuICAgIHwgXCJ3ZWJraXRFeGl0RnVsbHNjcmVlblwiXG4gICAgfCBcIm1zRXhpdEZ1bGxzY3JlZW5cIiA9IFwiZXhpdEZ1bGxzY3JlZW5cIjtcbiAgZWxlbWVudEs6XG4gICAgfCBcImZ1bGxzY3JlZW5FbGVtZW50XCJcbiAgICB8IFwibW96RnVsbFNjcmVlbkVsZW1lbnRcIlxuICAgIHwgXCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudFwiXG4gICAgfCBcIm1zRnVsbHNjcmVlbkVsZW1lbnRcIiA9IFwiZnVsbHNjcmVlbkVsZW1lbnRcIjtcbiAgZXZlbnRLOlxuICAgIHwgXCJmdWxsc2NyZWVuY2hhbmdlXCJcbiAgICB8IFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiXG4gICAgfCBcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIlxuICAgIHwgXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIiA9IFwiZnVsbHNjcmVlbmNoYW5nZVwiO1xuXG4gIHN0YXRpYyBpbnN0YW5jZT86IEZ1bGxzY3JlZW5TZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBkRSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudCAmIGFueTtcbiAgICBjb25zdCB0RiA9IFwiZnVsbHNjcmVlbmNoYW5nZVwiO1xuXG4gICAgaWYgKGRFLnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICB0aGlzLmVudGVySyA9IFwicmVxdWVzdEZ1bGxzY3JlZW5cIjtcbiAgICAgIHRoaXMuZXhpdEsgPSBcImV4aXRGdWxsc2NyZWVuXCI7XG4gICAgICB0aGlzLmVsZW1lbnRLID0gXCJmdWxsc2NyZWVuRWxlbWVudFwiO1xuICAgICAgdGhpcy5ldmVudEsgPSB0RjtcbiAgICB9IGVsc2UgaWYgKGRFLm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgICB0aGlzLmVudGVySyA9IFwibW96UmVxdWVzdEZ1bGxTY3JlZW5cIjtcbiAgICAgIHRoaXMuZXhpdEsgPSBcIm1vekNhbmNlbEZ1bGxTY3JlZW5cIjtcbiAgICAgIHRoaXMuZWxlbWVudEsgPSBcIm1vekZ1bGxTY3JlZW5FbGVtZW50XCI7XG4gICAgICB0aGlzLmV2ZW50SyA9IChcIm1velwiICsgdEYpIGFzIEZ1bGxzY3JlZW5TZXJ2aWNlW1wiZXZlbnRLXCJdO1xuICAgIH0gZWxzZSBpZiAoZEUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgIHRoaXMuZW50ZXJLID0gXCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlblwiO1xuICAgICAgdGhpcy5leGl0SyA9IFwid2Via2l0RXhpdEZ1bGxzY3JlZW5cIjtcbiAgICAgIHRoaXMuZWxlbWVudEsgPSBcIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XCI7XG4gICAgICB0aGlzLmV2ZW50SyA9IChcIndlYmtpdFwiICsgdEYpIGFzIEZ1bGxzY3JlZW5TZXJ2aWNlW1wiZXZlbnRLXCJdO1xuICAgIH0gZWxzZSBpZiAoZEUubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgdGhpcy5lbnRlcksgPSBcIm1zUmVxdWVzdEZ1bGxzY3JlZW5cIjtcbiAgICAgIHRoaXMuZXhpdEsgPSBcIm1zRXhpdEZ1bGxzY3JlZW5cIjtcbiAgICAgIHRoaXMuZWxlbWVudEsgPSBcIm1zRnVsbHNjcmVlbkVsZW1lbnRcIjtcbiAgICAgIHRoaXMuZXZlbnRLID0gXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFNpbmdsZXRvbigpIHtcbiAgICBpZiAoRnVsbHNjcmVlblNlcnZpY2UuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBGdWxsc2NyZWVuU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgRnVsbHNjcmVlblNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgRnVsbHNjcmVlblNlcnZpY2UoKTtcbiAgICByZXR1cm4gRnVsbHNjcmVlblNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHN1cHBvcnRlZCgpIHtcbiAgICBjb25zdCBkID0gZG9jdW1lbnQgYXMgRG9jdW1lbnQgJiBhbnk7XG4gICAgcmV0dXJuICEhKFxuICAgICAgZC5leGl0RnVsbHNjcmVlbiB8fFxuICAgICAgZC5tb3pDYW5jZWxGdWxsU2NyZWVuIHx8XG4gICAgICBkLndlYmtpdEV4aXRGdWxsc2NyZWVuIHx8XG4gICAgICBkLm1zRXhpdEZ1bGxzY3JlZW5cbiAgICApO1xuICB9XG5cbiAgcHVibGljIGVudGVyKGVsPzogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmVudGVySyA9PT0gXCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlblwiKSB7XG4gICAgICBlbFt0aGlzLmVudGVySyBhcyBcInJlcXVlc3RGdWxsc2NyZWVuXCJdKFxuICAgICAgICAoRWxlbWVudCBhcyBhbnkpLkFMTE9XX0tFWUJPQVJEX0lOUFVUXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbFt0aGlzLmVudGVySyBhcyBcInJlcXVlc3RGdWxsc2NyZWVuXCJdKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGV4aXQoKSB7XG4gICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkpIHtcbiAgICAgIGRvY3VtZW50W3RoaXMuZXhpdEsgYXMgXCJleGl0RnVsbHNjcmVlblwiXSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpc0Z1bGxzY3JlZW4oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50W3RoaXMuZWxlbWVudEsgYXMgXCJmdWxsc2NyZWVuRWxlbWVudFwiXTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoZWw/OiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICB0aGlzLmV4aXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbnRlcihlbCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lbG9vcE9wdGlvbnMge1xuICBtYXhGUFM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL3d3dy5zaXRlcG9pbnQuY29tL3F1aWNrLXRpcC1nYW1lLWxvb3AtaW4tamF2YXNjcmlwdC9cbiAqIEBzZWUgaHR0cHM6Ly9pc2FhY3N1a2luLmNvbS9uZXdzLzIwMTUvMDEvZGV0YWlsZWQtZXhwbGFuYXRpb24tamF2YXNjcmlwdC1nYW1lLWxvb3BzLWFuZC10aW1pbmcjZnBzLWNvbnRyb2xcbiAqL1xuZXhwb3J0IGNsYXNzIEdhbWVsb29wIHtcbiAgcHVibGljIHN0YXRpYyBldmVudHMgPSBuZXcgRXZlbnREaXNwYXRjaGVyKFwiZ2FtZWxvb3BcIik7XG5cbiAgcHVibGljIHN0YXRpYyBtYXhGUFMgPSA2MDtcblxuICBwdWJsaWMgc3RhdGljIGdldEZwcygpIHtcbiAgICByZXR1cm4gdGhpcy5mcHM7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHN0YXJ0TG9vcChvcHRpb25zOiBHYW1lbG9vcE9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGlmICghdGhpcy5sb29wU3RhcnRlZCkge1xuICAgICAgdGhpcy5sb29wU3RhcnRlZCA9IHRydWU7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZwcyA9IDYwO1xuXG4gIC8vIFdlIHdhbnQgdG8gc2ltdWxhdGUgMTAwMCBtcyAvIDYwIEZQUyA9IDE2LjY2NyBtcyBwZXIgZnJhbWUgZXZlcnkgdGltZSB3ZSBydW4gc2Nyb2xsKClcbiAgcHJvdGVjdGVkIHN0YXRpYyB0aW1lc3RlcCA9IDEwMDAgLyA2MDtcblxuICBwcm90ZWN0ZWQgc3RhdGljIGxvb3BTdGFydGVkID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBsYXN0RnJhbWVUaW1lTXMgPSAwO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgZGVsdGEgPSAwO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgZnJhbWVzVGhpc1NlY29uZCA9IDA7XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBsYXN0RnBzVXBkYXRlID0gMDtcblxuICBwcm90ZWN0ZWQgc3RhdGljIGZyYW1lSUQgPSAwO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgc2V0T3B0aW9ucyhvcHRpb25zOiBHYW1lbG9vcE9wdGlvbnMpIHtcbiAgICB0aGlzLm1heEZQUyA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy5tYXhGUFMgPT09IFwibnVtYmVyXCIgPyBvcHRpb25zLm1heEZQUyA6IHRoaXMubWF4RlBTO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIC8gZ2FtZSBsb29wXG4gICAqIEBwYXJhbSB0aW1lc3RhbXBcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgbG9vcCh0aW1lc3RhbXA6IG51bWJlcikge1xuICAgIC8vIFRocm90dGxlIHRoZSBmcmFtZSByYXRlLlxuICAgIGlmICh0aW1lc3RhbXAgPCB0aGlzLmxhc3RGcmFtZVRpbWVNcyArIDEwMDAgLyB0aGlzLm1heEZQUykge1xuICAgICAgdGhpcy5mcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3AuYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB0aW1lc3RhbXAgLSB0aGlzLmxhc3RGcmFtZVRpbWVNcztcbiAgICB0aGlzLmRlbHRhICs9IHByb2dyZXNzO1xuICAgIHRoaXMubGFzdEZyYW1lVGltZU1zID0gdGltZXN0YW1wO1xuXG4gICAgdGhpcy5iZWdpbih0aW1lc3RhbXAsIHRoaXMuZGVsdGEpO1xuXG4gICAgaWYgKHRpbWVzdGFtcCA+IHRoaXMubGFzdEZwc1VwZGF0ZSArIDEwMDApIHtcbiAgICAgIHRoaXMuZnBzID0gMC4yNSAqIHRoaXMuZnJhbWVzVGhpc1NlY29uZCArIDAuNzUgKiB0aGlzLmZwcztcblxuICAgICAgdGhpcy5sYXN0RnBzVXBkYXRlID0gdGltZXN0YW1wO1xuICAgICAgdGhpcy5mcmFtZXNUaGlzU2Vjb25kID0gMDtcbiAgICB9XG4gICAgdGhpcy5mcmFtZXNUaGlzU2Vjb25kKys7XG5cbiAgICBsZXQgbnVtVXBkYXRlU3RlcHMgPSAwO1xuICAgIHdoaWxlICh0aGlzLmRlbHRhID49IHRoaXMudGltZXN0ZXApIHtcbiAgICAgIHRoaXMudXBkYXRlKHRoaXMudGltZXN0ZXApO1xuICAgICAgdGhpcy5kZWx0YSAtPSB0aGlzLnRpbWVzdGVwO1xuICAgICAgaWYgKCsrbnVtVXBkYXRlU3RlcHMgPj0gMjQwKSB7XG4gICAgICAgIHRoaXMucGFuaWMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIodGhpcy5kZWx0YSAvIHRoaXMudGltZXN0ZXApO1xuXG4gICAgdGhpcy5lbmQodGhpcy5mcHMpO1xuXG4gICAgdGhpcy5mcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3AuYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIGJlZ2luKHRpbWVzdGFtcDogbnVtYmVyLCBkZWx0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5ldmVudHMudHJpZ2dlcihcImJlZ2luXCIsIHRpbWVzdGFtcCwgZGVsdGEpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyByZW5kZXIoaW50ZXJwOiBudW1iZXIpIHtcbiAgICB0aGlzLmV2ZW50cy50cmlnZ2VyKFwicmVuZGVyXCIsIGludGVycCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIHVwZGF0ZShkZWx0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5ldmVudHMudHJpZ2dlcihcInVwZGF0ZVwiLCBkZWx0YSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIGVuZChkZWx0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5ldmVudHMudHJpZ2dlcihcImVuZFwiLCBkZWx0YSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIHBhbmljKCkge1xuICAgIHRoaXMuZGVsdGEgPSAwOyAvLyBkaXNjYXJkIHRoZSB1bnNpbXVsYXRlZCB0aW1lXG4gIH1cblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBHYW1lbG9vcE9wdGlvbnMgPSB7fSkge1xuICAgIEdhbWVsb29wLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL2F1dG9zY3JvbGwuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZHJhZ3Njcm9sbC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9leHRyYXMuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZnVsbHNjcmVlbi5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nYW1lbG9vcC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b3VjaC1ldmVudHMvc2Nyb2xsLWV2ZW50cy5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b3VjaC1ldmVudHMvdG91Y2gtZXZlbnRzLnNlcnZpY2UuanNcIjtcbiIsImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRXZlbnRzU2VydmljZSB7XG4gIHByb3RlY3RlZCB0b3VjaENhcGFibGUgPSBcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdztcbiAgLyoqIFRoZSBlbGVtZW50IHRvIHRyaWdnZXIgdGhlIGV2ZW50cyBvbiAqL1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxVbmtub3duRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgV2luZG93O1xuICBwdWJsaWMgZ2V0IGlzVG91Y2hDYXBhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnRvdWNoQ2FwYWJsZTtcbiAgfVxuICBjb25zdHJ1Y3RvcihlbDogSFRNTFVua25vd25FbGVtZW50IHwgSFRNTEVsZW1lbnQgfCBXaW5kb3cpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gIH1cblxuICBwcm90ZWN0ZWQgdHJpZ2dlckN1c3RvbUV2ZW50KFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIG9yaWdpbmFsRXZlbnQ6IEV2ZW50LFxuICAgIGV4dHJhUGFyYW1ldGVyczogYW55ID0ge31cbiAgKSB7XG4gICAgZXh0cmFQYXJhbWV0ZXJzLm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgIGV4dHJhUGFyYW1ldGVycy50YXJnZXQgPSBvcmlnaW5hbEV2ZW50LnRhcmdldDtcbiAgICAvLyBjcmVhdGUgYW5kIGRpc3BhdGNoIHRoZSBldmVudFxuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgZGV0YWlsOiBleHRyYVBhcmFtZXRlcnMsXG4gICAgfSk7XG4gICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2Nyb2xsUG9zaXRpb24sIFNjcm9sbEV2ZW50c09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldFNjcm9sbFBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2hlbHBlci9zY3JvbGwuanNcIjtcbmltcG9ydCB7IEJhc2VFdmVudHNTZXJ2aWNlIH0gZnJvbSBcIi4vYmFzZS1ldmVudHMuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsRXZlbnRzU2VydmljZSBleHRlbmRzIEJhc2VFdmVudHNTZXJ2aWNlIHtcbiAgcHVibGljIGlzU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIF9zY3JvbGxFdmVudDogQXJyYXk8XCJ0b3VjaG1vdmVcIiB8IFwic2Nyb2xsXCIgfCBcInNjcm9sbGVuZFwiPjtcblxuICBwcm90ZWN0ZWQgZGVsYXkgPSAzMDA7XG5cbiAgcHJvdGVjdGVkIHN0YXJ0UG9zaXRpb246IFNjcm9sbFBvc2l0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIGVuZFBvc2l0aW9uOiBTY3JvbGxQb3NpdGlvbiB8IG51bGwgPSBudWxsO1xuXG4gIHByb3RlY3RlZCBzY3JvbGxUaW1lcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEhUTUxVbmtub3duRWxlbWVudCB8IFdpbmRvdyxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFNjcm9sbEV2ZW50c09wdGlvbnM+ID0ge31cbiAgKSB7XG4gICAgc3VwZXIoZWwpO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmRlbGF5ID0gb3B0aW9ucy5kZWxheSB8fCB0aGlzLmRlbGF5O1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKHRoaXMuZWwpO1xuICAgIC8vIFdhdGNoIGFsc28gbmF0aXZlIHNjcm9sbGVuZCB0byBub3QgdHJpZ2dlciBzY3JvbGxlbmRlZCBiZWZvcmUgc2Nyb2xsZW5kIHdhcyB0cmlnZ2VyZWRcbiAgICB0aGlzLl9zY3JvbGxFdmVudCA9IHRoaXMudG91Y2hDYXBhYmxlXG4gICAgICA/IFtcInRvdWNobW92ZVwiLCBcInNjcm9sbGVuZFwiLCBcInNjcm9sbFwiXVxuICAgICAgOiBbXCJzY3JvbGxcIiwgXCJzY3JvbGxlbmRcIl07XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc2Nyb2xsRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEV2ZW50O1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNjcm9sbERpcihcbiAgICBzdGFydDogU2Nyb2xsUG9zaXRpb24gfCBudWxsLFxuICAgIGVuZDogU2Nyb2xsUG9zaXRpb24gfCBudWxsXG4gICkge1xuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICAgIH1cbiAgICBpZiAoc3RhcnQueCA+IGVuZC54KSB7XG4gICAgICByZXR1cm4gXCJyaWdodFwiO1xuICAgIH1cbiAgICBpZiAoc3RhcnQueCA8IGVuZC54KSB7XG4gICAgICByZXR1cm4gXCJsZWZ0XCI7XG4gICAgfVxuICAgIGlmIChzdGFydC55ID4gZW5kLnkpIHtcbiAgICAgIHJldHVybiBcImRvd25cIjtcbiAgICB9XG4gICAgaWYgKHN0YXJ0LnkgPCBlbmQueSkge1xuICAgICAgcmV0dXJuIFwidXBcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGZvciAoY29uc3QgZXZlbnROYW1lIG9mIHRoaXMuX3Njcm9sbEV2ZW50KSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLm9uU2Nyb2xsRXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50TmFtZSBvZiB0aGlzLl9zY3JvbGxFdmVudCkge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5vblNjcm9sbEV2ZW50LCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX29uU2Nyb2xsRXZlbnQoZXZlbnQ6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKCFldmVudC50YXJnZXQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY3JvbGxUaW1lciAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2Nyb2xsVGltZXIpO1xuICAgICAgdGhpcy5zY3JvbGxUaW1lciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICB0aGlzLnNjcm9sbHN0YXJ0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1Njcm9sbGluZykge1xuICAgICAgdGhpcy5zY3JvbGwoZXZlbnQpO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNjcm9sbGVuZGVkKGV2ZW50KTtcbiAgICB9LCB0aGlzLmRlbGF5KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2Nyb2xsRXZlbnQgPSB0aGlzLl9vblNjcm9sbEV2ZW50LmJpbmQoXG4gICAgdGhpc1xuICApIGFzIGFueSBhcyBFdmVudExpc3RlbmVyO1xuXG4gIC8qKlxuICAgKiBzY3JvbGxlbmRlZCBFdmVudFxuICAgKi9cbiAgcHJvdGVjdGVkIHNjcm9sbGVuZGVkKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24odGhpcy5lbCk7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5nZXRTY3JvbGxEaXIodGhpcy5zdGFydFBvc2l0aW9uLCB0aGlzLmVuZFBvc2l0aW9uKTtcbiAgICB0aGlzLnRyaWdnZXJDdXN0b21FdmVudChcInNjcm9sbGVuZGVkXCIsIGV2ZW50LCB7XG4gICAgICBzdGFydFBvc2l0aW9uOiB0aGlzLnN0YXJ0UG9zaXRpb24sXG4gICAgICBlbmRQb3NpdGlvbjogdGhpcy5lbmRQb3NpdGlvbixcbiAgICAgIGRpcmVjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzY3JvbGxzdGFydCBFdmVudFxuICAgKi9cbiAgcHJvdGVjdGVkIHNjcm9sbHN0YXJ0KGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKHRoaXMuZWwpO1xuICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KFwic2Nyb2xsc3RhcnRcIiwgZXZlbnQsIHtcbiAgICAgIHN0YXJ0UG9zaXRpb246IHRoaXMuc3RhcnRQb3NpdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzY3JvbGxpbmcsIHNjcm9sbHVwLCBzY3JvbGxkb3duLCBzY3JvbGxsZWZ0IGFuZCBzY3JvbGxyaWdodCBFdmVudHNcbiAgICovXG4gIHByb3RlY3RlZCBfc2Nyb2xsKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKHRoaXMuZWwpO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZ2V0U2Nyb2xsRGlyKHRoaXMuc3RhcnRQb3NpdGlvbiwgY3VycmVudFBvc2l0aW9uKTtcbiAgICB0aGlzLnRyaWdnZXJDdXN0b21FdmVudChcInNjcm9sbFwiICsgZGlyZWN0aW9uLCBldmVudCwge1xuICAgICAgc3RhcnRQb3NpdGlvbjogdGhpcy5zdGFydFBvc2l0aW9uLFxuICAgICAgY3VycmVudFBvc2l0aW9uLFxuICAgICAgZGlyZWN0aW9uLFxuICAgIH0pO1xuICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KFwic2Nyb2xsaW5nXCIsIGV2ZW50LCB7XG4gICAgICBzdGFydFBvc2l0aW9uOiB0aGlzLnN0YXJ0UG9zaXRpb24sXG4gICAgICBjdXJyZW50UG9zaXRpb24sXG4gICAgICBkaXJlY3Rpb24sXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2Nyb2xsID0gdGhpcy5fc2Nyb2xsLmJpbmQodGhpcyk7XG59XG4iLCJpbXBvcnQgeyBnZXRFbGVtZW50SW5kZXggfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQge1xuICBQb3NpdGlvbixcbiAgVG91Y2hEYXRhLFxuICBUb3VjaE9mZnNldCxcbiAgVG91Y2hTZXR0aW5ncyxcbiAgVG91Y2hUeXBlLFxuICBUb3VjaFN3aXBlRGF0YSxcbiAgVG91Y2hEaXJlY3Rpb24sXG59IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG5pbXBvcnQgeyBCYXNlRXZlbnRzU2VydmljZSB9IGZyb20gXCIuL2Jhc2UtZXZlbnRzLnNlcnZpY2UuanNcIjtcblxuLyoqXG4gKiBWYW5pbGxhIHZlcnNpb24gb2YgalF1ZXJ5IE1vYmlsZSBFdmVudHNcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Jlbm1ham9yL2pRdWVyeS1Ub3VjaC1FdmVudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE5LCBCZW4gTWFqb3JcbiAqIENvcHlyaWdodCAyMDE5LTIwMjEsIFBhc2NhbCBHYXJiZXJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZTpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5leHBvcnQgY2xhc3MgVG91Y2hFdmVudHNTZXJ2aWNlIGV4dGVuZHMgQmFzZUV2ZW50c1NlcnZpY2Uge1xuICAvLyBHRVRURVJTOlxuXG4gIHB1YmxpYyBnZXQgaXNUb3VjaENhcGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudG91Y2hDYXBhYmxlO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGFydEV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnN0YXJ0ZXZlbnQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGVuZEV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmVuZGV2ZW50O1xuICB9XG5cbiAgcHVibGljIGdldCBtb3ZlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MubW92ZWV2ZW50O1xuICB9XG5cbiAgcHVibGljIGdldCB0YXBFdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy50YXBldmVudDtcbiAgfVxuXG4gIC8vIHB1YmxpYyBnZXQgc2Nyb2xsRXZlbnQoKSB7XG4gIC8vICAgcmV0dXJuIHRoaXMuc2Nyb2xsRXZlbnRzLnNjcm9sbEV2ZW50O1xuICAvLyB9XG5cbiAgLy8gU0VUVEVSUzpcblxuICAvKiogU2V0IHRoZSBYIHRocmVzaG9sZCBvZiBzd2lwZSBldmVudHMgKi9cbiAgcHVibGljIHNldCBzd2lwZVRocmVzaG9sZFgodGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBpZiAodHlwZW9mIHRocmVzaG9sZCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhyZXNob2xkIHBhcmFtZXRlciBtdXN0IGJlIGEgdHlwZSBvZiBudW1iZXJcIik7XG4gICAgfVxuICAgIHRoaXMuc2V0dGluZ3Muc3dpcGVIVGhyZXNob2xkID0gdGhyZXNob2xkO1xuICB9XG5cbiAgLyoqIFNldCB0aGUgWSB0aHJlc2hvbGQgb2Ygc3dpcGUgZXZlbnRzICovXG4gIHB1YmxpYyBzZXQgc3dpcGVUaHJlc2hvbGRZKHRocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiB0aHJlc2hvbGQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRocmVzaG9sZCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyXCIpO1xuICAgIH1cbiAgICB0aGlzLnNldHRpbmdzLnN3aXBlVlRocmVzaG9sZCA9IHRocmVzaG9sZDtcbiAgfVxuXG4gIC8qKiBTZXQgdGhlIGRvdWJsZSB0YXAgaW50ZXJ2YWwgKi9cbiAgcHVibGljIHNldCBkb3VibGVUYXBJbnQoaW50ZXJ2YWw6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludGVydmFsIHBhcmFtZXRlciBtdXN0IGJlIGEgdHlwZSBvZiBudW1iZXJcIik7XG4gICAgfVxuICAgIHRoaXMuc2V0dGluZ3MuZG91YmxldGFwSW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgfVxuXG4gIC8qKiBTZXQgdGhlIHRhcGhvbGQgdGhyZXNob2xkICovXG4gIHB1YmxpYyBzZXQgdGFwSG9sZFRocmVzaG9sZCh0aHJlc2hvbGQ6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdGhyZXNob2xkICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaHJlc2hvbGQgcGFyYW1ldGVyIG11c3QgYmUgYSB0eXBlIG9mIG51bWJlclwiKTtcbiAgICB9XG4gICAgdGhpcy5zZXR0aW5ncy50YXBob2xkVGhyZXNob2xkID0gdGhyZXNob2xkO1xuICB9XG5cbiAgLyoqIFNldCB0aGUgcGl4ZWwgcmFuZ2UgZm9yIHRhcGFzICovXG4gIHB1YmxpYyBzZXQgdGFwUmFuZ2UocmFuZ2U6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgcmFuZ2UgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlciBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyXCIpO1xuICAgIH1cbiAgICB0aGlzLnNldHRpbmdzLnRhcFBpeGVsUmFuZ2UgPSByYW5nZTtcbiAgfVxuXG4gIC8vIFBST1BFUlRJRVM6XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYHRhcGhvbGRgICovXG4gIHByb3RlY3RlZCBzdGFydFBvc2l0aW9uOiBQb3NpdGlvbiA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gIH07XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYHRhcGhvbGRgICovXG4gIHByb3RlY3RlZCBlbmRQb3NpdGlvbjogUG9zaXRpb24gPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICB9O1xuXG4gIC8qKiBVc2VkIGludGVybmFsbHkgZm9yIGBzd2lwZWAgKi9cbiAgcHJvdGVjdGVkIG9yaWdpbmFsQ29vcmQ6IFBvc2l0aW9uID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgfTtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgc3dpcGVgICovXG4gIHByb3RlY3RlZCBmaW5hbENvb3JkOiBQb3NpdGlvbiA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gIH07XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYHN3aXBlYCAqL1xuICBwcm90ZWN0ZWQgc3RhcnRFdm50OiBUb3VjaERhdGEgfCBudWxsID0gbnVsbDtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgdGFwaG9sZGAgYW5kIGBzaW5nbGV0YXBgICovXG4gIHByb3RlY3RlZCB0YXBoZWxkID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYGRvdWJsZXRhcGAgKi9cbiAgcHJvdGVjdGVkIGZpcnN0VGFwOiBUb3VjaERhdGEgfCBudWxsID0gbnVsbDtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgZG91YmxldGFwYCAqL1xuICBwcm90ZWN0ZWQgY29vbGluZyA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIGludGVybmFsbHkgZm9yIGBkb3VibGV0YXBgIGFuZCBgc2luZ2xldGFwYCAqL1xuICBwcm90ZWN0ZWQgZG91YmxldGFwcGVkID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYGRvdWJsZXRhcGAgKi9cbiAgcHJvdGVjdGVkIGxhc3RUb3VjaCA9IDA7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYHN3aXBlYCAqL1xuICBwcm90ZWN0ZWQgaGFzU3dpcGVkID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSBmb3IgYHRhcGAgKi9cbiAgcHJvdGVjdGVkIHRhcFN0YXJ0ZWQgPSBmYWxzZTtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgc3dpcGVgICovXG4gIHByb3RlY3RlZCBzd2lwZVN0YXJ0ZWQgPSBmYWxzZTtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgdGFwYCwgYHRhcGhvbGRgIGFuZCBgc2luZ2xldGFwYCAqL1xuICBwcm90ZWN0ZWQgc3RhcnRUaW1lID0gMDtcblxuICAvLyBUSU1FUlM6XG5cbiAgcHJvdGVjdGVkIGhvbGRUaW1lciA9IC0xO1xuICBwcm90ZWN0ZWQgdGFwVGltZXIgPSAtMTtcblxuICAvKiogVXNlZCBpbnRlcm5hbGx5IGZvciBgZG91YmxldGFwYCAqL1xuICBwcm90ZWN0ZWQgYWN0aW9uVGltZXIgPSAtMTtcblxuICBwcm90ZWN0ZWQgc2V0dGluZ3M6IFRvdWNoU2V0dGluZ3M7XG5cbiAgLy8gcHJvdGVjdGVkIHNjcm9sbEV2ZW50czogU2Nyb2xsRXZlbnRzU2VydmljZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgc2V0dGluZ3M6IFRvdWNoU2V0dGluZ3MgPSB7XG4gICAgICB0YXBQaXhlbFJhbmdlOiA1LFxuICAgICAgc3dpcGVIVGhyZXNob2xkOiA1MCxcbiAgICAgIHN3aXBlVlRocmVzaG9sZDogNTAsXG4gICAgICB0YXBob2xkVGhyZXNob2xkOiA3NTAsXG4gICAgICBkb3VibGV0YXBJbnRlcnZhbDogNTAwLFxuICAgICAgc2hha2VUaHJlc2hvbGQ6IDE1LFxuICAgICAgdG91Y2hDYXBhYmxlOiBcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdyxcblxuICAgICAgc3RhcnRldmVudDogW1widG91Y2hzdGFydFwiXSxcbiAgICAgIGVuZGV2ZW50OiBbXCJ0b3VjaGVuZFwiXSxcbiAgICAgIG1vdmVldmVudDogW1widG91Y2htb3ZlXCJdLFxuICAgICAgdGFwZXZlbnQ6IFtcInRhcFwiXSxcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKGVsKTtcbiAgICB0aGlzLmVsID0gZWw7XG5cbiAgICAvLyBTZXQgc2V0dGluZ3MgYnkgZGV2aWNlIHR5cGUgKGlmIGRldmljZSBpcyB0b3VjaCBjYXBhYmxlKVxuICAgIHNldHRpbmdzLnN0YXJ0ZXZlbnQgPSBzZXR0aW5ncy50b3VjaENhcGFibGVcbiAgICAgID8gW1widG91Y2hzdGFydFwiXVxuICAgICAgOiBbXCJtb3VzZWRvd25cIl07XG4gICAgc2V0dGluZ3MuZW5kZXZlbnQgPSBzZXR0aW5ncy50b3VjaENhcGFibGUgPyBbXCJ0b3VjaGVuZFwiXSA6IFtcIm1vdXNldXBcIl07XG4gICAgc2V0dGluZ3MubW92ZWV2ZW50ID0gc2V0dGluZ3MudG91Y2hDYXBhYmxlID8gW1widG91Y2htb3ZlXCJdIDogW1wibW91c2Vtb3ZlXCJdO1xuICAgIHNldHRpbmdzLnRhcGV2ZW50ID0gc2V0dGluZ3MudG91Y2hDYXBhYmxlID8gW1widGFwXCJdIDogW1wiY2xpY2tcIl07XG5cbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICAvLyB0aGlzLnNjcm9sbEV2ZW50cyA9IG5ldyBTY3JvbGxFdmVudHNTZXJ2aWNlKHRoaXMuZWwpO1xuICAgIHRoaXMub25TdGFydEV2ZW50ID0gdGhpcy5vblN0YXJ0RXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW92ZUV2ZW50ID0gdGhpcy5vbk1vdmVFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FbmRFdmVudCA9IHRoaXMub25FbmRFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAvLyB0aGlzLnNjcm9sbEV2ZW50cy5kZXN0cm95KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgdGhpcy5zZXR0aW5ncy5zdGFydGV2ZW50KSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgdGhpcy5vblN0YXJ0RXZlbnQgYXMgYW55IGFzIEV2ZW50TGlzdGVuZXJcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZXZlbnROYW1lIG9mIHRoaXMuc2V0dGluZ3MubW92ZWV2ZW50KSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgdGhpcy5vbk1vdmVFdmVudCBhcyBhbnkgYXMgRXZlbnRMaXN0ZW5lclxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgdGhpcy5zZXR0aW5ncy5lbmRldmVudCkge1xuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHRoaXMub25FbmRFdmVudCBhcyBhbnkgYXMgRXZlbnRMaXN0ZW5lclxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gdGhpcy5zY3JvbGxFdmVudHMuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gSEVMUEVSIE1FVEhPRFM6XG5cbiAgcHJvdGVjdGVkIGdldFN3aXBlRGlyKFxuICAgIHN0YXJ0UG9zaXRpb246IFBvc2l0aW9uLFxuICAgIGVuZFBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBoVGhyZXNob2xkOiBudW1iZXIgPSB0aGlzLnNldHRpbmdzLnN3aXBlSFRocmVzaG9sZCxcbiAgICB2VGhyZXNob2xkOiBudW1iZXIgPSB0aGlzLnNldHRpbmdzLnN3aXBlVlRocmVzaG9sZFxuICApIHtcbiAgICBsZXQgc3dpcGVEaXIgPSBcIlwiO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0UG9zaXRpb24ueSA+IGVuZFBvc2l0aW9uLnkgJiZcbiAgICAgIHN0YXJ0UG9zaXRpb24ueSAtIGVuZFBvc2l0aW9uLnkgPiB2VGhyZXNob2xkXG4gICAgKSB7XG4gICAgICBzd2lwZURpciA9IFwic3dpcGV1cFwiO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBzdGFydFBvc2l0aW9uLnggPCBlbmRQb3NpdGlvbi54ICYmXG4gICAgICBlbmRQb3NpdGlvbi54IC0gc3RhcnRQb3NpdGlvbi54ID4gaFRocmVzaG9sZFxuICAgICkge1xuICAgICAgc3dpcGVEaXIgPSBcInN3aXBlcmlnaHRcIjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgc3RhcnRQb3NpdGlvbi55IDwgZW5kUG9zaXRpb24ueSAmJlxuICAgICAgZW5kUG9zaXRpb24ueSAtIHN0YXJ0UG9zaXRpb24ueSA+IHZUaHJlc2hvbGRcbiAgICApIHtcbiAgICAgIHN3aXBlRGlyID0gXCJzd2lwZWRvd25cIjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgc3RhcnRQb3NpdGlvbi54ID4gZW5kUG9zaXRpb24ueCAmJlxuICAgICAgc3RhcnRQb3NpdGlvbi54IC0gZW5kUG9zaXRpb24ueCA+IGhUaHJlc2hvbGRcbiAgICApIHtcbiAgICAgIHN3aXBlRGlyID0gXCJzd2lwZWxlZnRcIjtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlRGlyO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFBvc2l0aW9uKFxuICAgIGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCxcbiAgICB0eXBlOiBUb3VjaFR5cGUgPSBUb3VjaFR5cGUuREVGQVVMVCxcbiAgICBpbmRleCA9IDBcbiAgKTogUG9zaXRpb24ge1xuICAgIGxldCB0b3VjaGVzVHlwZXM6IFRvdWNoTGlzdDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVG91Y2hUeXBlLkNIQU5HRUQ6XG4gICAgICAgIHRvdWNoZXNUeXBlcyA9IChldmVudCBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRvdWNoVHlwZS5UQVJHRVQ6XG4gICAgICAgIHRvdWNoZXNUeXBlcyA9IChldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRvdWNoZXNUeXBlcyA9IChldmVudCBhcyBUb3VjaEV2ZW50KS50b3VjaGVzO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICB4OiB0aGlzLnNldHRpbmdzLnRvdWNoQ2FwYWJsZVxuICAgICAgICA/IHRvdWNoZXNUeXBlc1tpbmRleF0ucGFnZVhcbiAgICAgICAgOiAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVgsXG4gICAgICB5OiB0aGlzLnNldHRpbmdzLnRvdWNoQ2FwYWJsZVxuICAgICAgICA/IHRvdWNoZXNUeXBlc1tpbmRleF0ucGFnZVlcbiAgICAgICAgOiAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVksXG4gICAgfTtcbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T2Zmc2V0KFxuICAgIGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCxcbiAgICB0eXBlOiBUb3VjaFR5cGUgPSBUb3VjaFR5cGUuREVGQVVMVCxcbiAgICBpbmRleCA9IDBcbiAgKTogVG91Y2hPZmZzZXQge1xuICAgIGNvbnN0IGJvdW5kaW5nQ2xpZW50UmVjdCA9ICh0aGlzLmVsIGFzIEhUTUxFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgdG91Y2hlc1R5cGVzOiBUb3VjaExpc3Q7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFRvdWNoVHlwZS5DSEFOR0VEOlxuICAgICAgICB0b3VjaGVzVHlwZXMgPSAoZXZlbnQgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUb3VjaFR5cGUuVEFSR0VUOlxuICAgICAgICB0b3VjaGVzVHlwZXMgPSAoZXZlbnQgYXMgVG91Y2hFdmVudCkudGFyZ2V0VG91Y2hlcztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0b3VjaGVzVHlwZXMgPSAoZXZlbnQgYXMgVG91Y2hFdmVudCkudG91Y2hlcztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IG9mZnNldCA9IHtcbiAgICAgIHg6IHRoaXMuc2V0dGluZ3MudG91Y2hDYXBhYmxlXG4gICAgICAgID8gTWF0aC5yb3VuZChcbiAgICAgICAgICAgIHRvdWNoZXNUeXBlc1tpbmRleF0ucGFnZVggLVxuICAgICAgICAgICAgICAoYm91bmRpbmdDbGllbnRSZWN0ID8gYm91bmRpbmdDbGllbnRSZWN0LmxlZnQgOiAwKVxuICAgICAgICAgIClcbiAgICAgICAgOiBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgKGV2ZW50IGFzIGFueSBhcyBNb3VzZUV2ZW50KS5wYWdlWCAtXG4gICAgICAgICAgICAgIChib3VuZGluZ0NsaWVudFJlY3QgPyBib3VuZGluZ0NsaWVudFJlY3QubGVmdCA6IDApXG4gICAgICAgICAgKSxcbiAgICAgIHk6IHRoaXMuc2V0dGluZ3MudG91Y2hDYXBhYmxlXG4gICAgICAgID8gTWF0aC5yb3VuZChcbiAgICAgICAgICAgIHRvdWNoZXNUeXBlc1tpbmRleF0ucGFnZVkgLVxuICAgICAgICAgICAgICAoYm91bmRpbmdDbGllbnRSZWN0ID8gYm91bmRpbmdDbGllbnRSZWN0LnRvcCA6IDApXG4gICAgICAgICAgKVxuICAgICAgICA6IE1hdGgucm91bmQoXG4gICAgICAgICAgICAoZXZlbnQgYXMgYW55IGFzIE1vdXNlRXZlbnQpLnBhZ2VZIC1cbiAgICAgICAgICAgICAgKGJvdW5kaW5nQ2xpZW50UmVjdCA/IGJvdW5kaW5nQ2xpZW50UmVjdC50b3AgOiAwKVxuICAgICAgICAgICksXG4gICAgfTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFRvdWNoRGF0YShcbiAgICBldmVudDogVG91Y2hFdmVudCB8IE1vdXNlRXZlbnQsXG4gICAgd2l0aEluZGV4ID0gZmFsc2UsXG4gICAgcG9zaXRpb25UeXBlID0gVG91Y2hUeXBlLkRFRkFVTFQsXG4gICAgb2Zmc2V0VHlwZSA9IFRvdWNoVHlwZS5DSEFOR0VEXG4gICk6IFRvdWNoRGF0YSB7XG4gICAgY29uc3QgdG91Y2hEYXRhOiBUb3VjaERhdGEgPSB7XG4gICAgICBwb3NpdGlvbjogdGhpcy5nZXRQb3NpdGlvbihldmVudCwgcG9zaXRpb25UeXBlKSxcbiAgICAgIG9mZnNldDogdGhpcy5nZXRPZmZzZXQoZXZlbnQsIG9mZnNldFR5cGUpLFxuICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICB9O1xuICAgIGlmICh3aXRoSW5kZXgpIHtcbiAgICAgIHRvdWNoRGF0YS5pbmRleCA9IGdldEVsZW1lbnRJbmRleChldmVudC50YXJnZXQgYXMgRWxlbWVudCB8IG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdG91Y2hEYXRhO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGZvciAoY29uc3QgZXZlbnROYW1lIG9mIHRoaXMuc2V0dGluZ3Muc3RhcnRldmVudCkge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHRoaXMub25TdGFydEV2ZW50IGFzIGFueSBhcyBFdmVudExpc3RlbmVyLFxuICAgICAgICB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgdGhpcy5zZXR0aW5ncy5tb3ZlZXZlbnQpIHtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICB0aGlzLm9uTW92ZUV2ZW50IGFzIGFueSBhcyBFdmVudExpc3RlbmVyLFxuICAgICAgICB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgdGhpcy5zZXR0aW5ncy5lbmRldmVudCkge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHRoaXMub25FbmRFdmVudCBhcyBhbnkgYXMgRXZlbnRMaXN0ZW5lcixcbiAgICAgICAge1xuICAgICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gRVZFTlQgSEFORExFUlM6XG5cbiAgcHJvdGVjdGVkIG9uU3RhcnRFdmVudChldmVudDogVG91Y2hFdmVudCB8IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggJiYgZXZlbnQud2hpY2ggIT09IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGFydFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbihldmVudCwgVG91Y2hUeXBlLlRBUkdFVCk7XG4gICAgdGhpcy5lbmRQb3NpdGlvbiA9IHtcbiAgICAgIHg6IHRoaXMuc3RhcnRQb3NpdGlvbi54LFxuICAgICAgeTogdGhpcy5zdGFydFBvc2l0aW9uLnksXG4gICAgfTtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAvLyBGb3IgYGRvdWJsZXRhcGBcbiAgICB0aGlzLmRvdWJsZXRhcHBlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5maXJzdFRhcCkge1xuICAgICAgdGhpcy5maXJzdFRhcCA9IHRoaXMuZ2V0VG91Y2hEYXRhKFxuICAgICAgICBldmVudCxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgVG91Y2hUeXBlLkRFRkFVTFQsXG4gICAgICAgIFRvdWNoVHlwZS5DSEFOR0VEXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZvciBgdGFwYCwgYHN3aXBlYFxuICAgIHRoaXMudGFwU3RhcnRlZCA9IHRydWU7XG4gICAgdGhpcy5zd2lwZVN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgLy8gRm9yIGBzd2lwZWBcbiAgICB0aGlzLm9yaWdpbmFsQ29vcmQgPSB0aGlzLmdldFBvc2l0aW9uKGV2ZW50LCBUb3VjaFR5cGUuVEFSR0VUKTtcbiAgICB0aGlzLmZpbmFsQ29vcmQgPSB0aGlzLmdldFBvc2l0aW9uKGV2ZW50LCBUb3VjaFR5cGUuVEFSR0VUKTtcbiAgICB0aGlzLnN0YXJ0RXZudCA9IHRoaXMuZ2V0VG91Y2hEYXRhKFxuICAgICAgZXZlbnQsXG4gICAgICBmYWxzZSxcbiAgICAgIFRvdWNoVHlwZS5ERUZBVUxULFxuICAgICAgVG91Y2hUeXBlLkNIQU5HRURcbiAgICApO1xuXG4gICAgdGhpcy50YXBzdGFydChldmVudCk7XG4gICAgdGhpcy50YXBob2xkKGV2ZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkVuZEV2ZW50KGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMuZW5kUG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKGV2ZW50LCBUb3VjaFR5cGUuQ0hBTkdFRCk7XG4gICAgdGhpcy50YXBoZWxkID0gZmFsc2U7XG5cbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuaG9sZFRpbWVyKTtcbiAgICB0aGlzLnRhcGVuZChldmVudCk7XG4gICAgdGhpcy5zd2lwZWVuZChldmVudCk7XG4gICAgdGhpcy50YXAoZXZlbnQpO1xuICAgIHRoaXMuZG91YmxldGFwKGV2ZW50KTtcbiAgICB0aGlzLnNpbmdsZXRhcChldmVudCk7XG5cbiAgICB0aGlzLnRhcFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN3aXBlU3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaGFzU3dpcGVkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbk1vdmVFdmVudChldmVudDogVG91Y2hFdmVudCB8IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbihldmVudCwgVG91Y2hUeXBlLlRBUkdFVCk7XG4gICAgdGhpcy5maW5hbENvb3JkID0gdGhpcy5nZXRQb3NpdGlvbihldmVudCwgVG91Y2hUeXBlLlRBUkdFVCk7XG4gICAgdGhpcy50YXBtb3ZlKGV2ZW50KTtcbiAgICB0aGlzLnN3aXBlKGV2ZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENVU1RPTSBFVkVOVCBNRVRIT0RTOlxuXG4gIC8qKiB0YXBzdGFydCBFdmVudCAqL1xuICBwcm90ZWN0ZWQgdGFwc3RhcnQoZXZlbnQ6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoXG4gICAgICBcInRhcHN0YXJ0XCIsXG4gICAgICBldmVudCxcbiAgICAgIHRoaXMuZ2V0VG91Y2hEYXRhKGV2ZW50LCBmYWxzZSwgVG91Y2hUeXBlLkRFRkFVTFQsIFRvdWNoVHlwZS5DSEFOR0VEKVxuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiogdGFwbW92ZSBFdmVudCAqL1xuICBwcm90ZWN0ZWQgdGFwbW92ZShldmVudDogVG91Y2hFdmVudCB8IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLnRyaWdnZXJDdXN0b21FdmVudChcbiAgICAgIFwidGFwbW92ZVwiLFxuICAgICAgZXZlbnQsXG4gICAgICB0aGlzLmdldFRvdWNoRGF0YShldmVudCwgZmFsc2UsIFRvdWNoVHlwZS5ERUZBVUxULCBUb3VjaFR5cGUuQ0hBTkdFRClcbiAgICApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqIHRhcGVuZCBFdmVudCAqL1xuICBwcm90ZWN0ZWQgdGFwZW5kKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KFxuICAgICAgXCJ0YXBlbmRcIixcbiAgICAgIGV2ZW50LFxuICAgICAgdGhpcy5nZXRUb3VjaERhdGEoZXZlbnQsIGZhbHNlLCBUb3VjaFR5cGUuQ0hBTkdFRCwgVG91Y2hUeXBlLkNIQU5HRUQpXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKiB0YXBob2xkIEV2ZW50ICovXG4gIHByb3RlY3RlZCB0YXBob2xkKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMuaG9sZFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgZGlmZlBvc2l0aW9uOiBQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogdGhpcy5zdGFydFBvc2l0aW9uLnggLSB0aGlzLmVuZFBvc2l0aW9uLngsXG4gICAgICAgIHk6IHRoaXMuc3RhcnRQb3NpdGlvbi55IC0gdGhpcy5lbmRQb3NpdGlvbi55LFxuICAgICAgfTtcblxuICAgICAgLy8gaGVsZGVkP1xuICAgICAgaWYgKFxuICAgICAgICAodGhpcy5zdGFydFBvc2l0aW9uLnggPT09IHRoaXMuZW5kUG9zaXRpb24ueCAmJlxuICAgICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbi55ID09PSB0aGlzLmVuZFBvc2l0aW9uLnkpIHx8XG4gICAgICAgIChkaWZmUG9zaXRpb24ueCA+PSAtdGhpcy5zZXR0aW5ncy50YXBQaXhlbFJhbmdlICYmXG4gICAgICAgICAgZGlmZlBvc2l0aW9uLnggPD0gdGhpcy5zZXR0aW5ncy50YXBQaXhlbFJhbmdlICYmXG4gICAgICAgICAgZGlmZlBvc2l0aW9uLnkgPj0gLXRoaXMuc2V0dGluZ3MudGFwUGl4ZWxSYW5nZSAmJlxuICAgICAgICAgIGRpZmZQb3NpdGlvbi55IDw9IHRoaXMuc2V0dGluZ3MudGFwUGl4ZWxSYW5nZSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLnRhcGhlbGQgPSB0cnVlO1xuICAgICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBlbmRUaW1lIC0gdGhpcy5zdGFydFRpbWU7XG4gICAgICAgIGNvbnN0IHRvdWNoZXNMZW5ndGg6IG51bWJlciA9IChldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzXG4gICAgICAgICAgPyAoZXZlbnQgYXMgVG91Y2hFdmVudCkudGFyZ2V0VG91Y2hlcy5sZW5ndGhcbiAgICAgICAgICA6IDE7XG4gICAgICAgIGNvbnN0IHRvdWNoZXMgPSBuZXcgQXJyYXk8UGFydGlhbDxUb3VjaERhdGE+PigpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG91Y2hlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZWxPZmZzZXQgPSAodGhpcy5lbCBhcyBIVE1MRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3QgdG91Y2ggPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICB4OiB0aGlzLnNldHRpbmdzLnRvdWNoQ2FwYWJsZVxuICAgICAgICAgICAgICAgID8gKGV2ZW50IGFzIFRvdWNoRXZlbnQpLmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYXG4gICAgICAgICAgICAgICAgOiAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVgsXG4gICAgICAgICAgICAgIHk6IHRoaXMuc2V0dGluZ3MudG91Y2hDYXBhYmxlXG4gICAgICAgICAgICAgICAgPyAoZXZlbnQgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVlcbiAgICAgICAgICAgICAgICA6IChldmVudCBhcyBNb3VzZUV2ZW50KS5wYWdlWSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgeDogdGhpcy5zZXR0aW5ncy50b3VjaENhcGFibGVcbiAgICAgICAgICAgICAgICA/IE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAgIChldmVudCBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWCAtXG4gICAgICAgICAgICAgICAgICAgICAgKGVsT2Zmc2V0ID8gZWxPZmZzZXQubGVmdCA6IDApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVggLSAoZWxPZmZzZXQgPyBlbE9mZnNldC5sZWZ0IDogMClcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHk6IHRoaXMuc2V0dGluZ3MudG91Y2hDYXBhYmxlXG4gICAgICAgICAgICAgICAgPyBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAoZXZlbnQgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVkgLVxuICAgICAgICAgICAgICAgICAgICAgIChlbE9mZnNldCA/IGVsT2Zmc2V0LnRvcCA6IDApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVkgLSAoZWxPZmZzZXQgPyBlbE9mZnNldC50b3AgOiAwKVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRvdWNoZXMucHVzaCh0b3VjaCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnROYW1lID1cbiAgICAgICAgICB0b3VjaGVzTGVuZ3RoID4gMSA/IFwidGFwaG9sZFwiICsgdG91Y2hlc0xlbmd0aCA6IFwidGFwaG9sZFwiO1xuXG4gICAgICAgIGNvbnN0IHRvdWNoRGF0YSA9IHtcbiAgICAgICAgICB0b3VjaGVzLFxuICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCBldmVudCwgdG91Y2hEYXRhKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLnNldHRpbmdzLnRhcGhvbGRUaHJlc2hvbGQpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiogZG91YmxldGFwIEV2ZW50ICovXG4gIHByb3RlY3RlZCBkb3VibGV0YXAoZXZlbnQ6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBsYXN0VG91Y2ggPSBOdW1iZXIodGhpcy5sYXN0VG91Y2gpIHx8IG5vdyArIDE7XG4gICAgY29uc3QgZGVsdGEgPSBub3cgLSBsYXN0VG91Y2g7XG4gICAgaWYgKHRoaXMuYWN0aW9uVGltZXIgIT09IC0xKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuYWN0aW9uVGltZXIpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGRlbHRhIDwgdGhpcy5zZXR0aW5ncy5kb3VibGV0YXBJbnRlcnZhbCAmJlxuICAgICAgZGVsdGEgPiAxMDAgJiZcbiAgICAgIHRoaXMuZmlyc3RUYXAgJiZcbiAgICAgIGdldEVsZW1lbnRJbmRleChldmVudC50YXJnZXQgYXMgRWxlbWVudCB8IG51bGwpID09PSB0aGlzLmZpcnN0VGFwLmluZGV4XG4gICAgKSB7XG4gICAgICB0aGlzLmRvdWJsZXRhcHBlZCA9IHRydWU7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudGFwVGltZXIpO1xuICAgICAgY29uc3QgbGFzdFRhcDogVG91Y2hEYXRhID0gdGhpcy5nZXRUb3VjaERhdGEoXG4gICAgICAgIGV2ZW50LFxuICAgICAgICB0cnVlLFxuICAgICAgICBUb3VjaFR5cGUuQ0hBTkdFRCxcbiAgICAgICAgVG91Y2hUeXBlLkNIQU5HRURcbiAgICAgICk7XG4gICAgICBjb25zdCB0b3VjaERhdGEgPSB7XG4gICAgICAgIGZpcnN0VGFwOiB0aGlzLmZpcnN0VGFwLFxuICAgICAgICBzZWNvbmRUYXA6IGxhc3RUYXAsXG4gICAgICAgIGludGVydmFsOiBsYXN0VGFwLnRpbWUgLSB0aGlzLmZpcnN0VGFwLnRpbWUsXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGlzLmNvb2xpbmcpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoXCJkb3VibGV0YXBcIiwgZXZlbnQsIHRvdWNoRGF0YSk7XG4gICAgICAgIHRoaXMuZmlyc3RUYXAgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5jb29saW5nID0gdHJ1ZTtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5jb29saW5nID0gZmFsc2U7XG4gICAgICB9LCB0aGlzLnNldHRpbmdzLmRvdWJsZXRhcEludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3Rpb25UaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5maXJzdFRhcCA9IG51bGw7XG4gICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmFjdGlvblRpbWVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5kb3VibGV0YXBJbnRlcnZhbCxcbiAgICAgICAgW2V2ZW50XVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sYXN0VG91Y2ggPSBub3c7XG4gIH1cblxuICAvKipcbiAgICogc2luZ2xldGFwIEV2ZW50XG4gICAqIFRoaXMgaXMgdXNlZCBpbiBjb25qdWN0aW9uIHdpdGggZG91YmxldGFwIHdoZW4gYm90aCBldmVudHMgYXJlIG5lZWRlZCBvbiB0aGUgc2FtZSBlbGVtZW50XG4gICAqL1xuICBwcm90ZWN0ZWQgc2luZ2xldGFwKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIHRoaXMudGFwVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBkaWZmUG9zaXRpb246IFBvc2l0aW9uID0ge1xuICAgICAgICB4OiB0aGlzLnN0YXJ0UG9zaXRpb24ueCAtIHRoaXMuZW5kUG9zaXRpb24ueCxcbiAgICAgICAgeTogdGhpcy5zdGFydFBvc2l0aW9uLnkgLSB0aGlzLmVuZFBvc2l0aW9uLnksXG4gICAgICB9O1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5kb3VibGV0YXBwZWQgJiZcbiAgICAgICAgIXRoaXMudGFwaGVsZCAmJlxuICAgICAgICAoKHRoaXMuc3RhcnRQb3NpdGlvbi54ID09PSB0aGlzLmVuZFBvc2l0aW9uLnggJiZcbiAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24ueSA9PT0gdGhpcy5lbmRQb3NpdGlvbi55KSB8fFxuICAgICAgICAgIChkaWZmUG9zaXRpb24ueCA+PSAtdGhpcy5zZXR0aW5ncy50YXBQaXhlbFJhbmdlICYmXG4gICAgICAgICAgICBkaWZmUG9zaXRpb24ueCA8PSB0aGlzLnNldHRpbmdzLnRhcFBpeGVsUmFuZ2UgJiZcbiAgICAgICAgICAgIGRpZmZQb3NpdGlvbi55ID49IC10aGlzLnNldHRpbmdzLnRhcFBpeGVsUmFuZ2UgJiZcbiAgICAgICAgICAgIGRpZmZQb3NpdGlvbi55IDw9IHRoaXMuc2V0dGluZ3MudGFwUGl4ZWxSYW5nZSkpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdG91Y2hEYXRhOiBUb3VjaERhdGEgPSB0aGlzLmdldFRvdWNoRGF0YShcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBUb3VjaFR5cGUuQ0hBTkdFRCxcbiAgICAgICAgICBUb3VjaFR5cGUuQ0hBTkdFRFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFdhcyBpdCBhIHRhcGhvbGQ/XG4gICAgICAgIGlmICh0b3VjaERhdGEudGltZSAtIHRoaXMuc3RhcnRUaW1lIDwgdGhpcy5zZXR0aW5ncy50YXBob2xkVGhyZXNob2xkKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoXCJzaW5nbGV0YXBcIiwgZXZlbnQsIHRvdWNoRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzLnNldHRpbmdzLmRvdWJsZXRhcEludGVydmFsKTtcbiAgfVxuXG4gIC8qKiB0YXAgRXZlbnQgKi9cbiAgcHJvdGVjdGVkIHRhcChldmVudDogVG91Y2hFdmVudCB8IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCBkaWZmUG9zaXRpb246IFBvc2l0aW9uID0ge1xuICAgICAgeDogdGhpcy5zdGFydFBvc2l0aW9uLnggLSB0aGlzLmVuZFBvc2l0aW9uLngsXG4gICAgICB5OiB0aGlzLnN0YXJ0UG9zaXRpb24ueSAtIHRoaXMuZW5kUG9zaXRpb24ueSxcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy50YXBTdGFydGVkICYmXG4gICAgICBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUgPCB0aGlzLnNldHRpbmdzLnRhcGhvbGRUaHJlc2hvbGQgJiZcbiAgICAgICgodGhpcy5zdGFydFBvc2l0aW9uLnggPT09IHRoaXMuZW5kUG9zaXRpb24ueCAmJlxuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24ueSA9PT0gdGhpcy5lbmRQb3NpdGlvbi55KSB8fFxuICAgICAgICAoZGlmZlBvc2l0aW9uLnggPj0gLXRoaXMuc2V0dGluZ3MudGFwUGl4ZWxSYW5nZSAmJlxuICAgICAgICAgIGRpZmZQb3NpdGlvbi54IDw9IHRoaXMuc2V0dGluZ3MudGFwUGl4ZWxSYW5nZSAmJlxuICAgICAgICAgIGRpZmZQb3NpdGlvbi55ID49IC10aGlzLnNldHRpbmdzLnRhcFBpeGVsUmFuZ2UgJiZcbiAgICAgICAgICBkaWZmUG9zaXRpb24ueSA8PSB0aGlzLnNldHRpbmdzLnRhcFBpeGVsUmFuZ2UpKVxuICAgICkge1xuICAgICAgY29uc3QgdG91Y2hlc0xlbmd0aDogbnVtYmVyID0gKGV2ZW50IGFzIFRvdWNoRXZlbnQpLnRhcmdldFRvdWNoZXNcbiAgICAgICAgPyAoZXZlbnQgYXMgVG91Y2hFdmVudCkudGFyZ2V0VG91Y2hlcy5sZW5ndGhcbiAgICAgICAgOiAxO1xuICAgICAgY29uc3QgdG91Y2hlcyA9IG5ldyBBcnJheTxQYXJ0aWFsPFRvdWNoRGF0YT4+KCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG91Y2hlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVsT2Zmc2V0ID0gKHRoaXMuZWwgYXMgSFRNTEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCB0b3VjaCA9IHtcbiAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeDogdGhpcy5zZXR0aW5ncy50b3VjaENhcGFibGVcbiAgICAgICAgICAgICAgPyAoZXZlbnQgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVhcbiAgICAgICAgICAgICAgOiAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVgsXG4gICAgICAgICAgICB5OiB0aGlzLnNldHRpbmdzLnRvdWNoQ2FwYWJsZVxuICAgICAgICAgICAgICA/IChldmVudCBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWVxuICAgICAgICAgICAgICA6IChldmVudCBhcyBNb3VzZUV2ZW50KS5wYWdlWSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgeDogdGhpcy5zZXR0aW5ncy50b3VjaENhcGFibGVcbiAgICAgICAgICAgICAgPyBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgKGV2ZW50IGFzIFRvdWNoRXZlbnQpLmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYIC1cbiAgICAgICAgICAgICAgICAgICAgKGVsT2Zmc2V0ID8gZWxPZmZzZXQubGVmdCA6IDApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVggLSAoZWxPZmZzZXQgPyBlbE9mZnNldC5sZWZ0IDogMClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgeTogdGhpcy5zZXR0aW5ncy50b3VjaENhcGFibGVcbiAgICAgICAgICAgICAgPyBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgKGV2ZW50IGFzIFRvdWNoRXZlbnQpLmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VZIC1cbiAgICAgICAgICAgICAgICAgICAgKGVsT2Zmc2V0ID8gZWxPZmZzZXQudG9wIDogMClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgIChldmVudCBhcyBNb3VzZUV2ZW50KS5wYWdlWSAtIChlbE9mZnNldCA/IGVsT2Zmc2V0LnRvcCA6IDApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHRvdWNoZXMucHVzaCh0b3VjaCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvdWNoRGF0YSA9IHtcbiAgICAgICAgdG91Y2hlcyxcbiAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRvdWNoZXNMZW5ndGggPiAxID8gXCJ0YXBcIiArIHRvdWNoZXNMZW5ndGggOiBcInRhcFwiO1xuICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCBldmVudCwgdG91Y2hEYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogc3dpcGUgRXZlbnRcbiAgICogKGFsc28gaGFuZGxlcyBzd2lwZXVwLCBzd2lwZXJpZ2h0LCBzd2lwZWRvd24gYW5kIHN3aXBlbGVmdClcbiAgICpcbiAgICogKHNpbWlsYXIgdG8gYHRvdWNoTW92ZWAgbWV0aG9kIGluIGpxdWVyeSB0b3VjaCBldmVudHMpXG4gICAqL1xuICBwcm90ZWN0ZWQgc3dpcGUoZXZlbnQ6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KSB7XG4gICAgY29uc3Qgc3dpcGVEaXIgPSB0aGlzLmdldFN3aXBlRGlyKHRoaXMub3JpZ2luYWxDb29yZCwgdGhpcy5maW5hbENvb3JkKTtcblxuICAgIGlmIChzd2lwZURpciAmJiB0aGlzLnN3aXBlU3RhcnRlZCAmJiB0aGlzLnN0YXJ0RXZudCkge1xuICAgICAgdGhpcy5vcmlnaW5hbENvb3JkLnggPSAwO1xuICAgICAgdGhpcy5vcmlnaW5hbENvb3JkLnkgPSAwO1xuICAgICAgdGhpcy5maW5hbENvb3JkLnggPSAwO1xuICAgICAgdGhpcy5maW5hbENvb3JkLnkgPSAwO1xuICAgICAgdGhpcy5zd2lwZVN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgY29uc3QgZW5kRXZudDogVG91Y2hEYXRhID0gdGhpcy5nZXRUb3VjaERhdGEoXG4gICAgICAgIGV2ZW50LFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgVG91Y2hUeXBlLkRFRkFVTFQsXG4gICAgICAgIFRvdWNoVHlwZS5DSEFOR0VEXG4gICAgICApO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIHN3aXBlIGFtb3VudCAobm9ybWFsaXplZCk6XG4gICAgICBjb25zdCB4QW1vdW50ID0gTWF0aC5hYnModGhpcy5zdGFydEV2bnQucG9zaXRpb24ueCAtIGVuZEV2bnQucG9zaXRpb24ueCk7XG4gICAgICBjb25zdCB5QW1vdW50ID0gTWF0aC5hYnModGhpcy5zdGFydEV2bnQucG9zaXRpb24ueSAtIGVuZEV2bnQucG9zaXRpb24ueSk7XG5cbiAgICAgIGNvbnN0IHRvdWNoRGF0YTogVG91Y2hTd2lwZURhdGEgPSB7XG4gICAgICAgIHN0YXJ0RXZudDogdGhpcy5zdGFydEV2bnQsXG4gICAgICAgIGVuZEV2bnQsXG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVEaXIucmVwbGFjZShcInN3aXBlXCIsIFwiXCIpIGFzIFRvdWNoRGlyZWN0aW9uLFxuICAgICAgICB4QW1vdW50LFxuICAgICAgICB5QW1vdW50LFxuICAgICAgICBkdXJhdGlvbjogZW5kRXZudC50aW1lIC0gdGhpcy5zdGFydEV2bnQudGltZSxcbiAgICAgIH07XG4gICAgICB0aGlzLmhhc1N3aXBlZCA9IHRydWU7XG4gICAgICB0aGlzLnRyaWdnZXJDdXN0b21FdmVudChcInN3aXBlXCIsIGV2ZW50LCB0b3VjaERhdGEpO1xuICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoc3dpcGVEaXIsIGV2ZW50LCB0b3VjaERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBzd2lwZWVuZCBFdmVudFxuICAgKiAoc2ltaWxhciBgdG91Y2hFbmRgIG1ldGhvZCBpbiBqcXVlcnkgdG91Y2ggZXZlbnRzKVxuICAgKi9cbiAgcHJvdGVjdGVkIHN3aXBlZW5kKGV2ZW50OiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCkge1xuICAgIGNvbnN0IGVuZEV2bnQ6IFRvdWNoRGF0YSA9IHRoaXMuZ2V0VG91Y2hEYXRhKFxuICAgICAgZXZlbnQsXG4gICAgICBmYWxzZSxcbiAgICAgIFRvdWNoVHlwZS5DSEFOR0VELFxuICAgICAgVG91Y2hUeXBlLkNIQU5HRURcbiAgICApO1xuICAgIGlmICh0aGlzLmhhc1N3aXBlZCAmJiB0aGlzLnN0YXJ0RXZudCkge1xuICAgICAgY29uc3Qgc3dpcGVEaXIgPSB0aGlzLmdldFN3aXBlRGlyKFxuICAgICAgICB0aGlzLnN0YXJ0RXZudC5wb3NpdGlvbixcbiAgICAgICAgZW5kRXZudC5wb3NpdGlvblxuICAgICAgKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzd2lwZSBhbW91bnQgKG5vcm1hbGl6ZWQpOlxuICAgICAgY29uc3QgeEFtb3VudCA9IE1hdGguYWJzKHRoaXMuc3RhcnRFdm50LnBvc2l0aW9uLnggLSBlbmRFdm50LnBvc2l0aW9uLngpO1xuICAgICAgY29uc3QgeUFtb3VudCA9IE1hdGguYWJzKHRoaXMuc3RhcnRFdm50LnBvc2l0aW9uLnkgLSBlbmRFdm50LnBvc2l0aW9uLnkpO1xuXG4gICAgICBjb25zdCB0b3VjaERhdGE6IFRvdWNoU3dpcGVEYXRhID0ge1xuICAgICAgICBzdGFydEV2bnQ6IHRoaXMuc3RhcnRFdm50LFxuICAgICAgICBlbmRFdm50LFxuICAgICAgICBkaXJlY3Rpb246IHN3aXBlRGlyLnJlcGxhY2UoXCJzd2lwZVwiLCBcIlwiKSBhcyBUb3VjaERpcmVjdGlvbixcbiAgICAgICAgeEFtb3VudCxcbiAgICAgICAgeUFtb3VudCxcbiAgICAgICAgZHVyYXRpb246IGVuZEV2bnQudGltZSAtIHRoaXMuc3RhcnRFdm50LnRpbWUsXG4gICAgICB9O1xuICAgICAgdGhpcy50cmlnZ2VyQ3VzdG9tRXZlbnQoXCJzd2lwZWVuZFwiLCBldmVudCwgdG91Y2hEYXRhKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL21lZGlhLXJlYWR5LXN0YXRlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGUtb3B0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcG9zaXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Njcm9sbC1ldmVudHMtb3B0aW9ucy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsLXBvc2l0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b3VjaC1kYXRhLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b3VjaC1kaXJlY3Rpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvdWNoLW9mZnNldC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG91Y2gtc2V0dGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvdWNoLXN3aXBlLWRhdGEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvdWNoLXR5cGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZpZGVvLWNvbXBvbmVudC1zY29wZS5qc1wiO1xuIiwiLyoqXG4gKiBSZXByZXNlbnRzIHRoZSByZWFkeSBzdGF0ZSBvZiB0aGUgYXVkaW8vdmlkZW8gZWxlbWVudFxuICogQHNlZSBodHRwczovL3d3dy53M3NjaG9vbHMuY29tL1RBZ3MvYXZfcHJvcF9yZWFkeXN0YXRlLmFzcFxuICovXG5leHBvcnQgZW51bSBNZWRpYVJlYWR5U3RhdGUge1xuICAvKiogbm8gaW5mb3JtYXRpb24gd2hldGhlciBvciBub3QgdGhlIGF1ZGlvL3ZpZGVvIGlzIHJlYWR5ICovXG4gIEhBVkVfTk9USElORyxcbiAgLyoqIG1ldGFkYXRhIGZvciB0aGUgYXVkaW8vdmlkZW8gaXMgcmVhZHkgKi9cbiAgSEFWRV9NRVRBREFUQSxcbiAgLyoqIGRhdGEgZm9yIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGlzIGF2YWlsYWJsZSwgYnV0IG5vdCBlbm91Z2ggZGF0YSB0byBwbGF5IG5leHQgZnJhbWUvbWlsbGlzZWNvbmQgKi9cbiAgSEFWRV9DVVJSRU5UX0RBVEEsXG4gIC8qKiBkYXRhIGZvciB0aGUgY3VycmVudCBhbmQgYXQgbGVhc3QgdGhlIG5leHQgZnJhbWUgaXMgYXZhaWxhYmxlICovXG4gIEhBVkVfRlVUVVJFX0RBVEEsXG4gIC8qKiBlbm91Z2ggZGF0YSBhdmFpbGFibGUgdG8gc3RhcnQgcGxheWluZyAqL1xuICBIQVZFX0VOT1VHSF9EQVRBLFxufVxuIiwiZXhwb3J0IGVudW0gVG91Y2hUeXBlIHtcbiAgREVGQVVMVCxcbiAgVEFSR0VULFxuICBDSEFOR0VELFxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG4iLCJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi90eXBlcy9zdGF0ZS5qc1wiO1xuLyoqXG4gKiBIaXN0b3J5TWFuYWdlciBoZWxwcyB0byBrZWVwIHRyYWNrIG9mIHRoZSBuYXZpZ2F0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBIaXN0b3J5TWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBIaXN0b3J5TWFuYWdlcjtcblxuICAvKipcbiAgICogS2VlcCB0cmFjayBvZiB0aGUgc3RhdHVzIGluIGhpc3RvcmljIG9yZGVyXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGhpc3Rvcnk6IFN0YXRlW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoSGlzdG9yeU1hbmFnZXIuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBIaXN0b3J5TWFuYWdlci5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBIaXN0b3J5TWFuYWdlci5pbnN0YW5jZSA9IHRoaXM7XG4gICAgcmV0dXJuIEhpc3RvcnlNYW5hZ2VyLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGF0dXNcbiAgICovXG4gIHB1YmxpYyBjdXJyZW50U3RhdHVzKCk6IFN0YXRlIHtcbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByZXZpb3VzIHN0YXR1c1xuICAgKi9cbiAgcHVibGljIHByZXZTdGF0dXMoKTogU3RhdGUgfCBudWxsIHtcbiAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpc3RvcnlbaGlzdG9yeS5sZW5ndGggLSAyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgc2V0IG9mIHVybCBhbmQgbmFtZXNwYWNlXG4gICAqL1xuICBwdWJsaWMgYWRkKHVybDogc3RyaW5nLCBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2goe1xuICAgICAgbmFtZXNwYWNlLFxuICAgICAgdXJsLFxuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9oaXN0b3J5LW1hbmFnZXIuc2VydmljZS5qc1wiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vc3RhdGUuanNcIjtcbiIsImltcG9ydCB7IEJpbmRlciwgQmluZGVyQXR0cmlidXRlQ2hhbmdlZEV2ZW50IH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2kxOG4uc2VydmljZS5qc1wiO1xuaW1wb3J0IHtcbiAgTG9jYWxlc1NlcnZpY2UsXG4gIExvY2FsVmFyLFxuICBMb2NhbFBsdXJhbGl6YXRpb24sXG59IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBJMThuU3RhckJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwiaTE4bi0qXCI7XG4gIHByaW9yaXR5ID0gMDtcblxuICBwcml2YXRlIGNvbnRlbnRlZGl0YWJsZSA9IGZhbHNlO1xuXG4gIHByaXZhdGUgdmFyczogTG9jYWxWYXIgPSB7fTtcbiAgcHJpdmF0ZSBsYW5nVmFyczogTG9jYWxWYXIgPSB7fTtcbiAgcHJpdmF0ZSBwcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIGF0dHJpYnV0ZU5hbWUgPSBcIlwiO1xuICBwcml2YXRlIHRyYW5zbGF0ZU1lUGF0aFN0cmluZz86IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIHByaXZhdGUgaTE4bj86IExvY2FsZXNTZXJ2aWNlO1xuXG4gIHByaXZhdGUgYXBwbHlUcmFuc2xhdGlvbihsb2NhbGU6IHN0cmluZyB8IExvY2FsUGx1cmFsaXphdGlvbiB8IG51bGwpIHtcbiAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgaWYgKCh0aGlzLmkxOG4gYXMgTG9jYWxlc1NlcnZpY2UpLnNob3dNaXNzaW5nVHJhbnNsYXRpb24pIHtcbiAgICAgICAgbG9jYWxlID0gYHRyYW5zbGF0aW9uIG1pc3Npbmc6IFwiJHt0aGlzLnByb3BlcnRpZXMuam9pbihcIi5cIil9XCJgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGxvY2FsZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc29sZS53YXJuKFwiVE9ET1wiLCBsb2NhbGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVOYW1lID09PSBcImh0bWxcIikge1xuICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSBsb2NhbGU7XG4gICAgfSBlbHNlIGlmICh0aGlzLmF0dHJpYnV0ZU5hbWUgPT09IFwidGV4dFwiKSB7XG4gICAgICB0aGlzLmVsLmlubmVyVGV4dCA9IGxvY2FsZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cmlidXRlTmFtZSA9PT0gXCJ2YWx1ZVwiKSB7XG4gICAgICAvLyBUT0RPIHN1cHBvcnQgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL0p1bXBMaW5rTmV0d29yay90aW55YmluZC9ibG9iL21hc3Rlci9zcmMvYmluZGVycy9iYXNpYy92YWx1ZS5iaW5kZXIudHMjTDUxXG4gICAgICBpZiAodGhpcy5jb250ZW50ZWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSBsb2NhbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsLnZhbHVlID0gbG9jYWxlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUsIGxvY2FsZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVZhcnMoX2VsOiBIVE1MRWxlbWVudCkge1xuICAgIC8vIHBhcnNlIHRlbXBsYXRlcyB0byA6IExvY2FsVmFyXG4gICAgaWYgKCF0aGlzLmkxOG4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2FsZXNTZXJ2aWNlIGlzIG5vdCBkZWZpbmVkIVwiKTtcbiAgICB9XG4gICAgY29uc3QgbmV3VmFycyA9IHRoaXMuaTE4bi5wYXJzZVRlbXBsYXRlVmFycyhfZWwpO1xuICAgIHRoaXMudmFycyA9IGV4dGVuZCh7IGRlZXA6IHRydWUgfSwgdGhpcy52YXJzLCBuZXdWYXJzKTtcblxuICAgIC8vIHBhcnNlIGRhdGEgYXR0cmlidXRlcyB0byB2YXJzXG4gICAgdGhpcy52YXJzID0gZXh0ZW5kKHsgZGVlcDogZmFsc2UgfSwgdGhpcy52YXJzLCBfZWwuZGF0YXNldCk7XG4gICAgLy8gUGFyc2UgdGVtcGxhdGVzIHdoaWNoIGhhdmUgaGlzIG93biB0cmFuc2xhdGlvbnNcbiAgICB0aGlzLmxhbmdWYXJzID0gdGhpcy5pMThuLnBhcnNlTG9jYWxWYXJzKF9lbCk7XG4gIH1cblxuICBwcml2YXRlIHRyYW5zbGF0ZShsYW5nY29kZT86IHN0cmluZykge1xuICAgIC8vIElmIGxhbmd1YWdlIHNlcnZpY2UgaXMgbm90IHJlYWR5IGRvIG5vdGhpbmdcbiAgICBpZiAoISh0aGlzLmkxOG4gYXMgTG9jYWxlc1NlcnZpY2UpLnJlYWR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbGFuZ2NvZGUpIHtcbiAgICAgIGxhbmdjb2RlID0gKHRoaXMuaTE4biBhcyBMb2NhbGVzU2VydmljZSkuZ2V0TGFuZ2NvZGUoKTtcbiAgICAgIGlmICghbGFuZ2NvZGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkxhbmdjb2RlIGlzIHJlcXVpcmVkXCIsIGxhbmdjb2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRyYW5zbGF0ZSBieSB1c2luZyB0aGUgYWxyZWFkeSB0cmFuc2xhdGVkIGxhbmd1YWdlIHZhcmlhYmxlXG4gICAgaWYgKHRoaXMubGFuZ1ZhcnMgJiYgdGhpcy5sYW5nVmFyc1tsYW5nY29kZV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5VHJhbnNsYXRpb24odGhpcy5sYW5nVmFyc1tsYW5nY29kZV0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzIHx8IHRoaXMucHJvcGVydGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIGdldCB0aGUgZGVmYXVsdCB0cmFuc2xhdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgIGlmICh0aGlzLmxhbmdWYXJzICYmIHRoaXMubGFuZ1ZhcnMuZGVmYXVsdCkge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oJ1RyYW5zbGF0ZSBieSBkZWZhdWx0JywgdGhpcy5sYW5nVmFycy5kZWZhdWx0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUcmFuc2xhdGlvbih0aGlzLmxhbmdWYXJzLmRlZmF1bHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRyYW5zbGF0ZSBieSBwcm9wZXJ0aWVzLCBlLmcuIGRlLmNhcnQuYWRkXG4gICAgcmV0dXJuICh0aGlzLmkxOG4gYXMgTG9jYWxlc1NlcnZpY2UpXG4gICAgICAuZ2V0KFtsYW5nY29kZSwgLi4udGhpcy5wcm9wZXJ0aWVzXSwgdGhpcy52YXJzKVxuICAgICAgLnRoZW4oKGxvY2FsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGxvY2FsICYmIHR5cGVvZiBsb2NhbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIC8vIGNvbnNvbGUud2FybignVHJhbnNsYXRlIGJ5IHByb3BlcnRpZXMnLCBbbGFuZ2NvZGUsIC4uLnRoaXMucHJvcGVydGllc10sIGxvY2FsKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRyYW5zbGF0aW9uKGxvY2FsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBnZXQgdGhlIGRlZmF1bHQgdHJhbnNsYXRpb24gaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmICh0aGlzLmxhbmdWYXJzICYmIHRoaXMubGFuZ1ZhcnMuZGVmYXVsdCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUud2FybignVHJhbnNsYXRlIGJ5IGRlZmF1bHQgYXMgZmFsbGJhY2snLCB0aGlzLmxhbmdWYXJzLmRlZmF1bHQpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VHJhbnNsYXRpb24odGhpcy5sYW5nVmFycy5kZWZhdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5VHJhbnNsYXRpb24obnVsbCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX29uQXR0cmlidXRlQ2hhbmdlZChkYXRhOiBCaW5kZXJBdHRyaWJ1dGVDaGFuZ2VkRXZlbnQpIHtcbiAgICBpZiAoZGF0YS5kZXRhaWwubmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikpIHtcbiAgICAgIGNvbnN0IHZhck5hbWUgPSBkYXRhLmRldGFpbC5uYW1lLnNsaWNlKDUpO1xuICAgICAgY29uc3QgbmV3VmFyOiBhbnkgPSB7fTtcbiAgICAgIG5ld1Zhclt2YXJOYW1lXSA9IGRhdGEuZGV0YWlsLm5ld1ZhbHVlO1xuICAgICAgdGhpcy52YXJzID0gZXh0ZW5kKHsgZGVlcDogdHJ1ZSB9LCB0aGlzLnZhcnMsIG5ld1Zhcik7XG4gICAgICB0aGlzLnRyYW5zbGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25BdHRyaWJ1dGVDaGFuZ2VkID0gdGhpcy5fb25BdHRyaWJ1dGVDaGFuZ2VkLmJpbmQodGhpcyk7XG5cbiAgcHJpdmF0ZSBvbkxhbmd1YWdlQ2hhbmdlZChsYW5nY29kZTogc3RyaW5nLCBpbml0aWFsOiBib29sZWFuKSB7XG4gICAgLy8gRG8gbm90IHRyYW5zbGF0ZSBvbiBpbml0aWFsIGxhbmd1YWdlIGNoYW5nZSwgd2UgdXNlIHRoZSByZWFkeSBldmVudCBmb3IgdGhpc1xuICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgdGhpcy50cmFuc2xhdGUobGFuZ2NvZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsIHN0dWZmIHdlZSBuZWVkIHRvIGRvIGFmdGVyIHRoZSBsYW5ndWFnZSBzZXJ2aWNlIGlzIHJlYWR5XG4gICAqL1xuICBwcml2YXRlIGluaXRPblJlYWR5KGxhbmdjb2RlOiBzdHJpbmcsIHRyYW5zbGF0aW9uTmVlZGVkOiBib29sZWFuKSB7XG4gICAgLy8gVHJhbnNsYXRlIG9uIHRyYW5zbGF0aW9uIHNlcnZpY2UgcmVhZHkgaWYgbmVlZGVkXG4gICAgaWYgKHRyYW5zbGF0aW9uTmVlZGVkKSB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZShsYW5nY29kZSk7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGlmIGxhbmd1YWdlIGNoYW5nZXNcbiAgICAodGhpcy5pMThuIGFzIExvY2FsZXNTZXJ2aWNlKS5ldmVudC5vbihcImNoYW5nZWRcIiwgdGhpcy5vbkxhbmd1YWdlQ2hhbmdlZCk7XG5cbiAgICAvLyBUcmFuc2xhdGUgaWYgYmluZGVyIGF0dHJpYnV0ZSBldmVudCBpcyBjaGFuZ2VkXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiYmluZGVyLWNoYW5nZWRcIiBhcyBhbnksIHRoaXMub25BdHRyaWJ1dGVDaGFuZ2VkKTtcbiAgfVxuXG4gIGJpbmQoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbnRlbnRlZGl0YWJsZSA9ICEhZWwuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IEkxOG5TZXJ2aWNlLm9wdGlvbnM7XG4gICAgdGhpcy5pMThuID0gb3B0aW9ucy5sb2NhbGVzU2VydmljZTtcbiAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLmFyZ3NbMF0udG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB0cmFuc2xhdGVNZVBhdGhTdHJpbmc/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBvcHRpb25zID0gSTE4blNlcnZpY2Uub3B0aW9ucztcbiAgICBpZiAodGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcgPT09IG51bGwpIHtcbiAgICAgIC8vIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgdGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcgPSB0cmFuc2xhdGVNZVBhdGhTdHJpbmc7XG4gICAgICBpZiAodGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcuc3BsaXQoXCIuXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhcnNlVmFycyhlbCk7XG5cbiAgICAgIC8vIFRyYW5zbGF0ZSBpZiBsYW5ndWFnZSBpcyByZWFkeVxuICAgICAgaWYgKHRoaXMuaTE4bj8ucmVhZHkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudExhbmdjb2RlID0gdGhpcy5pMThuLmdldExhbmdjb2RlKCk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxMYW5nY29kZSA9IHRoaXMuaTE4bi5nZXRJbml0aWFsTGFuZ2NvZGUoKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRMYW5nY29kZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGxhbmd1YWdlIGNvZGUgZm91bmQhXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0T25SZWFkeShcbiAgICAgICAgICBjdXJyZW50TGFuZ2NvZGUsXG4gICAgICAgICAgY3VycmVudExhbmdjb2RlICE9PSBpbml0aWFsTGFuZ2NvZGUgfHxcbiAgICAgICAgICAgICFvcHRpb25zLmxvY2FsZXNTZXJ2aWNlLmRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAodGhpcy5pMThuIGFzIExvY2FsZXNTZXJ2aWNlKS5ldmVudC5vbihcInJlYWR5XCIsIHRoaXMuaW5pdE9uUmVhZHkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcgIT09IHRyYW5zbGF0ZU1lUGF0aFN0cmluZykge1xuICAgICAgLy8gSWYgdHJhbnNsYXRlIHN0cmluZyB3YXMgY2hhbmdlZFxuICAgICAgdGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcgPSB0cmFuc2xhdGVNZVBhdGhTdHJpbmc7XG4gICAgICBpZiAodGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy50cmFuc2xhdGVNZVBhdGhTdHJpbmcuc3BsaXQoXCIuXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJzZVZhcnMoZWwpO1xuICAgICAgdGhpcy50cmFuc2xhdGUoKTtcbiAgICB9XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgXCJiaW5kZXItY2hhbmdlZFwiIGFzIGFueSxcbiAgICAgIHRoaXMub25BdHRyaWJ1dGVDaGFuZ2VkXG4gICAgKTtcbiAgICB0aGlzLmkxOG4/LmV2ZW50Lm9mZihcImNoYW5nZWRcIiwgdGhpcy5vbkxhbmd1YWdlQ2hhbmdlZCk7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL2kxOG4tc3Rhci5iaW5kZXIuanNcIjtcbiIsImV4cG9ydCB7IEkxOG5Td2l0Y2hlckNvbXBvbmVudCB9IGZyb20gXCIuL3N3aXRjaGVyL3N3aXRjaGVyLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgSTE4blNoYXJlQ29tcG9uZW50IH0gZnJvbSBcIi4vc2hhcmUvc2hhcmUuY29tcG9uZW50LmpzXCI7XG4iLCJpbXBvcnQgeyBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQge1xuICBCczRTaGFyZUNvbXBvbmVudCxcbiAgU2NvcGUgYXMgQnM0U2hhcmVTY29wZSxcbn0gZnJvbSBcIkByaWJhanMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1zaGFyZS9iczQtc2hhcmUuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIkByaWJhanMvYnM0L3NyYy9jb21wb25lbnRzL2JzNC1zaGFyZS9iczQtc2hhcmUuY29tcG9uZW50Lmh0bWxcIjtcbmltcG9ydCBsYWJlbFRlbXBsYXRlIGZyb20gXCIuL3NoYXJlLmxhYmVsLmh0bWxcIjtcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMb2NhbGVzU2VydmljZSB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBCczRTaGFyZVNjb3BlIHtcbiAgdGV4dEkxOG4/OiBzdHJpbmc7XG4gIGxhYmVsSTE4bj86IHN0cmluZztcbiAgc2VydmljZUxhYmVsSTE4bj86IHN0cmluZztcbn1cblxuLy8gaW50ZXJmYWNlIE5hdmlnYXRvclNoYXJlUGFyYW0gZXh0ZW5kcyBTaGFyZURhdGEge1xuLy8gICB1cmw6IHN0cmluZztcbi8vICAgdGV4dDogc3RyaW5nO1xuLy8gICB0aXRsZTogc3RyaW5nO1xuLy8gfVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBOYXZpZ2F0b3Ige1xuICAgIHNoYXJlOiAoZGF0YT86IFNoYXJlRGF0YSkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgfVxufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byBzaGFyZSB0aGUgYSBsaW5rIChpMThuIHZlcnNpb24pXG4gKi9cbmV4cG9ydCBjbGFzcyBJMThuU2hhcmVDb21wb25lbnQgZXh0ZW5kcyBCczRTaGFyZUNvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwiaTE4bi1zaGFyZVwiO1xuXG4gIHB1YmxpYyBfZGVidWcgPSBmYWxzZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLkJzNFNoYXJlQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyxcbiAgICAgIFwidGV4dC1pMThuXCIsXG4gICAgICBcImxhYmVsLWkxOG5cIixcbiAgICAgIFwic2VydmljZS1sYWJlbC1pMThuXCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2NhbGVzU2VydmljZT86IExvY2FsZXNTZXJ2aWNlO1xuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSBzdXBlci5zY29wZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2NvcGUgPSB0aGlzLmdldFNjb3BlRGVmYXVsdHMoKTtcbiAgICB0aGlzLnNjb3BlLmxhYmVsVGVtcGxhdGUgPSBsYWJlbFRlbXBsYXRlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KEJzNFNoYXJlQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGluaXRJMThuKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmxvY2FsZXNTZXJ2aWNlPy5ldmVudC5vbihcImNoYW5nZWRcIiwgYXN5bmMgKGxhbmdjb2RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobGFuZ2NvZGUpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5sb2NhbGVzU2VydmljZT8ucmVhZHkpIHtcbiAgICAgICAgY29uc3QgbGFuZ2NvZGUgPSB0aGlzLmxvY2FsZXNTZXJ2aWNlPy5nZXRMYW5nY29kZSgpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShsYW5nY29kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvY2FsZXNTZXJ2aWNlPy5ldmVudC5vbihcInJlYWR5XCIsIGFzeW5jIChsYW5nY29kZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobGFuZ2NvZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBpMThuKGxhbmdjb2RlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9jYWxlc1NlcnZpY2VcbiAgICAgID8uZ2V0KFtsYW5nY29kZSwgLi4udmFsdWUuc3BsaXQoXCIuXCIpXSlcbiAgICAgIC50aGVuKChsb2NhbGU6IHN0cmluZykgPT4ge1xuICAgICAgICAvLyB0aGlzLmRlYnVnKCdjaGFuZ2VkIGxvY2FsJywgbG9jYWwpO1xuICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gICAgdGhpcy5sb2NhbGVzU2VydmljZSA9IEkxOG5TZXJ2aWNlLm9wdGlvbnMubG9jYWxlc1NlcnZpY2U7XG4gICAgY29uc3QgbGFuZ2NvZGUgPSBhd2FpdCB0aGlzLmluaXRJMThuKCk7XG5cbiAgICBpZiAodGhpcy5zY29wZS50ZXh0STE4biAmJiBsYW5nY29kZSkge1xuICAgICAgdGhpcy5zY29wZS50ZXh0ID1cbiAgICAgICAgKGF3YWl0IHRoaXMuaTE4bihsYW5nY29kZSwgdGhpcy5zY29wZS50ZXh0STE4bikpIHx8IHRoaXMuc2NvcGUudGV4dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY29wZS5zZXJ2aWNlTGFiZWxJMThuICYmIGxhbmdjb2RlKSB7XG4gICAgICBmb3IgKGNvbnN0IHNoYXJlSXRlbSBvZiB0aGlzLnNjb3BlLnNoYXJlSXRlbXMpIHtcbiAgICAgICAgc2hhcmVJdGVtLmxhYmVsID1cbiAgICAgICAgICAoYXdhaXQgdGhpcy5pMThuKFxuICAgICAgICAgICAgbGFuZ2NvZGUsXG4gICAgICAgICAgICB0aGlzLnNjb3BlLnNlcnZpY2VMYWJlbEkxOG4gKyBcIi5cIiArIHNoYXJlSXRlbS5pZFxuICAgICAgICAgICkpIHx8IHNoYXJlSXRlbS5sYWJlbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHRoaXMuZGVidWcoXCJ0ZW1wbGF0ZVwiLCB0aGlzLCBoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSk7XG4gICAgaWYgKHRoaXMgJiYgaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIC8vIElmIGEgY2hpbGQgaXMgc2V0LCB0aGlzIGlzIGEgY3VzdG9tIGxhYmVsIHRlbXBsYXRlXG4gICAgICB0aGlzLnNjb3BlLmxhYmVsVGVtcGxhdGUgPSB0aGlzLmlubmVySFRNTDtcbiAgICAgIHRoaXMuZGVidWcoXCJDdXN0b20gbGFiZWwgdGVtcGxhdGU6IFwiLCB0aGlzLnNjb3BlLmxhYmVsVGVtcGxhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbn1cbiIsImltcG9ydCB7IFRlbXBsYXRlRnVuY3Rpb24sIENvbXBvbmVudCwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IExvY2FsZXNTZXJ2aWNlLCBMYW5nY29kZSB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgbGFuZ2NvZGVzOiBMYW5nY29kZVtdO1xuICBzd2l0Y2g6IEkxOG5Td2l0Y2hlckNvbXBvbmVudFtcInN3aXRjaFwiXTtcbiAgdG9nZ2xlOiBJMThuU3dpdGNoZXJDb21wb25lbnRbXCJ0b2dnbGVcIl07XG4gIHJlYWR5OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgSTE4blN3aXRjaGVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJpMThuLXN3aXRjaGVyXCI7XG5cbiAgcHVibGljIF9kZWJ1ZyA9IHRydWU7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2NhbGVzU2VydmljZT86IExvY2FsZXNTZXJ2aWNlO1xuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgbGFuZ2NvZGVzOiBbXSxcbiAgICBzd2l0Y2g6IHRoaXMuc3dpdGNoLFxuICAgIHRvZ2dsZTogdGhpcy50b2dnbGUsXG4gICAgcmVhZHk6IGZhbHNlLFxuICB9O1xuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChJMThuU3dpdGNoZXJDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRMYW5nY29kZShsYW5nY29kZTogc3RyaW5nKSB7XG4gICAgdGhpcy5sb2NhbGVzU2VydmljZT8uc2V0TGFuZ2NvZGUobGFuZ2NvZGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG5cbiAgICB0aGlzLmxvY2FsZXNTZXJ2aWNlID0gSTE4blNlcnZpY2Uub3B0aW9ucy5sb2NhbGVzU2VydmljZTtcblxuICAgIGlmICghdGhpcy5sb2NhbGVzU2VydmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTG9jYWxlc1NlcnZpY2Ugbm90IGRlZmluZWQhXCIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvY2FsZXNTZXJ2aWNlLnJlYWR5KSB7XG4gICAgICBjb25zdCBsYW5nY29kZSA9IHRoaXMubG9jYWxlc1NlcnZpY2UuZ2V0TGFuZ2NvZGUoKTtcbiAgICAgIGlmIChsYW5nY29kZSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbml0TG9jYWxlcyhsYW5nY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYWxlc1NlcnZpY2U/LmV2ZW50Lm9uKFxuICAgICAgICBcInJlYWR5XCIsXG4gICAgICAgIGFzeW5jIChsYW5nY29kZTogc3RyaW5nIC8qLCB0cmFuc2xhdGlvbk5lZWRlZDogYm9vbGVhbiovKSA9PiB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5pbml0TG9jYWxlcyhsYW5nY29kZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaCB0byBsYW5ndWFnZSBieSBsYW5nY29kZVxuICAgKiBAcGFyYW0gbGFuZ2NvZGVcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgc3dpdGNoKGxhbmdjb2RlOiBMYW5nY29kZSwgZXZlbnQ/OiBFdmVudCkge1xuICAgIGlmIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBpZiAoIWxhbmdjb2RlLmFjdGl2ZSkge1xuICAgICAgdGhpcy5zZXRMYW5nY29kZShsYW5nY29kZS5jb2RlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIGxhbmd1YWdlLCBtYWtlcyBvbmx5IHNlbnNlIGlmIHlvdSBoYXZlIG9ubHkgdHdvIGxhbmd1YWdlc1xuICAgKiBAcGFyYW0gbGFuZ2NvZGVcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgdG9nZ2xlKGV2ZW50PzogRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuc2NvcGUubGFuZ2NvZGVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuc2NvcGUubGFuZ2NvZGVzLCBpKSkge1xuICAgICAgICBpZiAodGhpcy5zY29wZS5sYW5nY29kZXNbaV0uYWN0aXZlICE9PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRMYW5nY29kZSh0aGlzLnNjb3BlLmxhbmdjb2Rlc1tpXS5jb2RlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgaW5pdExvY2FsZXMobGFuZ2NvZGU6IHN0cmluZykge1xuICAgIC8vIHNldCBhdmFpbGFibGUgbGFuZ2NvZGVzXG4gICAgY29uc3QgbGFuZ2NvZGVzID0gYXdhaXQgdGhpcy5sb2NhbGVzU2VydmljZT8uZ2V0QXZhaWxhYmxlTGFuZ2NvZGVzKCk7XG5cbiAgICBpZiAoIWxhbmdjb2Rlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbGFuY29kZXMgZm91bmQhXCIpO1xuICAgIH1cblxuICAgIHRoaXMuc2NvcGUubGFuZ2NvZGVzID0gbGFuZ2NvZGVzO1xuICAgIC8vIHNldCBhY3RpdmUgbGFuZ2NvZGVzXG4gICAgdGhpcy5zY29wZS5sYW5nY29kZXMuZm9yRWFjaCgobGFuZ0NvZGUpID0+IHtcbiAgICAgIGxhbmdDb2RlLmFjdGl2ZSA9IGxhbmdDb2RlLmNvZGUgPT09IGxhbmdjb2RlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5sb2NhbGVzU2VydmljZT8uZXZlbnQub24oXG4gICAgICBcImNoYW5nZWRcIixcbiAgICAgIChjaGFuZ2VkTGFuZ2NvZGU6IHN0cmluZyAvKiwgaW5pdGlhbDogYm9vbGVhbiovKSA9PiB7XG4gICAgICAgIC8vIEFjdGl2YXRlIGxvY2FsY29kZSBhbmQgZGlzYWJsZSB0aGUgb3RoZXJcbiAgICAgICAgdGhpcy5zY29wZS5sYW5nY29kZXMuZm9yRWFjaCgobGFuZ0NvZGUpID0+IHtcbiAgICAgICAgICBsYW5nQ29kZS5hY3RpdmUgPSBsYW5nQ29kZS5jb2RlID09PSBjaGFuZ2VkTGFuZ2NvZGU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnNjb3BlLnJlYWR5ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5zY29wZS5sYW5nY29kZXM7XG4gIH1cbn1cbiIsImV4cG9ydCB7IHRGb3JtYXR0ZXIgfSBmcm9tIFwiLi90LmZvcm1hdHRlci5qc1wiO1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvaTE4bi5zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBMb2NhbGVzU2VydmljZSB9IGZyb20gXCIuLi90eXBlcy9sb2NhbGVzLXNlcnZpY2UuanNcIjtcblxuY29uc3QgdHJhbnNsYXRlID0gYXN5bmMgKFxuICB0cmFuc2xhdGVNZVBhdGhTdHJpbmc6IHN0cmluZyxcbiAgbG9jYWxlc1NlcnZpY2U6IExvY2FsZXNTZXJ2aWNlLFxuICBsYW5nY29kZT86IHN0cmluZ1xuKSA9PiB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSB0cmFuc2xhdGVNZVBhdGhTdHJpbmcuc3BsaXQoXCIuXCIpO1xuICBpZiAoIWxhbmdjb2RlKSB7XG4gICAgbGFuZ2NvZGUgPSBsb2NhbGVzU2VydmljZS5nZXRMYW5nY29kZSgpO1xuICAgIGlmICghbGFuZ2NvZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbG9jYWxlc1NlcnZpY2VcbiAgICAuZ2V0KFtsYW5nY29kZSwgLi4ucHJvcGVydGllc10gLyosIHZhcnMgKi8pXG4gICAgLnRoZW4oKGxvY2FsZTogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gbG9jYWxlO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJ0XCIsXG4gIHJlYWQoXG4gICAgdHJhbnNsYXRlTWVQYXRoU3RyaW5nOiBzdHJpbmcsXG4gICAgbGFuZ2NvZGU6IHN0cmluZyAvKiwgLi4udmFyczogc3RyaW5nW10qL1xuICApIHtcbiAgICBjb25zdCBsb2NhbGVzU2VydmljZSA9IEkxOG5TZXJ2aWNlLm9wdGlvbnMubG9jYWxlc1NlcnZpY2U7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxvY2FsZXNTZXJ2aWNlLmV2ZW50Lm9uKFwiY2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgICAgIHRyYW5zbGF0ZSh0cmFuc2xhdGVNZVBhdGhTdHJpbmcsIGxvY2FsZXNTZXJ2aWNlLCBsYW5nY29kZSlcbiAgICAgICAgICAudGhlbigobG9jYWxlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGxvY2FsZSBhcyBhbnkpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgbG9jYWxlc1NlcnZpY2UuZXZlbnQub24oXCJyZWFkeVwiLCAoKSA9PiB7XG4gICAgICAgIHRyYW5zbGF0ZSh0cmFuc2xhdGVNZVBhdGhTdHJpbmcsIGxvY2FsZXNTZXJ2aWNlLCBsYW5nY29kZSlcbiAgICAgICAgICAudGhlbigobG9jYWxlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGxvY2FsZSBhcyBhbnkpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxvY2FsZXNTZXJ2aWNlLnJlYWR5KSB7XG4gICAgICAgIHRyYW5zbGF0ZSh0cmFuc2xhdGVNZVBhdGhTdHJpbmcsIGxvY2FsZXNTZXJ2aWNlLCBsYW5nY29kZSkudGhlbihcbiAgICAgICAgICAobG9jYWxlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGxvY2FsZSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxufTtcbiIsImltcG9ydCB7IFJpYmFNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBJMThuTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBiaW5kZXJzIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIGZvcm1hdHRlcnMgZnJvbSBcIi4vZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgY29tcG9uZW50cyBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlcyBmcm9tIFwiLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY29uc3QgaTE4bk1vZHVsZTogUmliYU1vZHVsZTxJMThuTW9kdWxlT3B0aW9ucz4gPSB7XG4gIGJpbmRlcnMsXG4gIGNvbXBvbmVudHMsXG4gIGZvcm1hdHRlcnMsXG4gIHNlcnZpY2VzLFxuICBpbml0KG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIltpMThuTW9kdWxlXSBNb2R1bGUgb3B0aW9ucyByZXF1aXJlZCFcIik7XG4gICAgfVxuICAgIHNlcnZpY2VzLkkxOG5TZXJ2aWNlLnNldFNpbmdsZXRvbihvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9iaW5kZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2kxOG4ubW9kdWxlLmpzXCI7XG4iLCJpbXBvcnQgeyBJMThuTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgSTE4blNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgc3RhdGljIF9vcHRpb25zOiBJMThuTW9kdWxlT3B0aW9ucztcbiAgcHVibGljIHN0YXRpYyBpbnN0YW5jZT86IEkxOG5TZXJ2aWNlO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqL1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTaW5nbGV0b24gb2YgSTE4blNlcnZpY2Ugbm90IGRlZmluZWQsIHBsZWFzZSBjYWxsIHNldFNpbmdsZXRvbiBmaXJzdCFgXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0U2luZ2xldG9uKG9wdGlvbnM6IEkxOG5Nb2R1bGVPcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2luZ2xldG9uIG9mIEkxOG5TZXJ2aWNlIGFscmVhZHkgZGVmaW5lZCFgKTtcbiAgICB9XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL2kxOG4uc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbG9jYWxlcy1yZXN0LnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xvY2FsZXMtc3RhdGljLnNlcnZpY2UuanNcIjtcbiIsImltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgTG9jYWxlc1NlcnZpY2UgfSBmcm9tIFwiLi4vdHlwZXMvbG9jYWxlcy1zZXJ2aWNlLmpzXCI7XG5cbi8qKlxuICogTG9jYWxlc1Jlc3RTZXJ2aWNlIGdldCBsb2NhbGVzIG9iamVjdCBmcm9tIHVybFxuICovXG5leHBvcnQgY2xhc3MgTG9jYWxlc1Jlc3RTZXJ2aWNlIGV4dGVuZHMgTG9jYWxlc1NlcnZpY2Uge1xuICBwdWJsaWMgc3RhdGljIGluc3RhbmNlczoge1xuICAgIFt1cmw6IHN0cmluZ106IExvY2FsZXNSZXN0U2VydmljZTtcbiAgfSA9IHt9O1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UodXJsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gTG9jYWxlc1Jlc3RTZXJ2aWNlLmluc3RhbmNlc1t1cmxdO1xuICB9XG5cbiAgcHVibGljIGxvY2FsZXM6IGFueSA9IHt9O1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBkZWZpbmVkIGxhbmdjb2RlXG4gICAqL1xuICBwcm90ZWN0ZWQgY3VycmVudExhbmdjb2RlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB0aGVtZSBsYW5nY29kZSBiZWZvcmUgYW55IGxhbmd1YWdlIHdhcyBjaG9zZW5cbiAgICovXG4gIHByb3RlY3RlZCBpbml0aWFsTGFuZ2NvZGU/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVybDogc3RyaW5nLFxuICAgIGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlID0gZmFsc2UsXG4gICAgc2hvd01pc3NpbmdUcmFuc2xhdGlvbiA9IGZhbHNlXG4gICkge1xuICAgIHN1cGVyKGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlLCBzaG93TWlzc2luZ1RyYW5zbGF0aW9uKTtcblxuICAgIHRoaXMudXJsID0gdXJsO1xuXG4gICAgaWYgKCF0aGlzLnVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVcmwgaXMgcmVxdWlyZWQhYCk7XG4gICAgfVxuXG4gICAgaWYgKExvY2FsZXNSZXN0U2VydmljZS5pbnN0YW5jZXNbdGhpcy51cmxdKSB7XG4gICAgICByZXR1cm4gTG9jYWxlc1Jlc3RTZXJ2aWNlLmluc3RhbmNlc1t0aGlzLnVybF07XG4gICAgfVxuXG4gICAgdGhpcy5pbml0KCk7XG4gICAgTG9jYWxlc1Jlc3RTZXJ2aWNlLmluc3RhbmNlc1t0aGlzLnVybF0gPSB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmaWxlIHdpdGggYWxsIGxhbmd1YWdlc1xuICAgKiBAcGFyYW0gdGhlbWVJRFxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGdldEFsbCh1cmw/OiBzdHJpbmcpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdXJsID0gdGhpcy51cmw7XG4gICAgfVxuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVXJsIGlzIHJlcXVpcmVkIWApO1xuICAgIH1cblxuICAgIGlmICgod2luZG93IGFzIGFueSkuU2hvcGlmeS5zaG9wKSB7XG4gICAgICB1cmwgPSB1cmwgKyBgP3Nob3A9JHsod2luZG93IGFzIGFueSkuU2hvcGlmeS5zaG9wfWA7XG4gICAgfVxuICAgIGlmICh0aGlzLmxvY2FsZXNbdXJsXSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYWxlc1t1cmxdO1xuICAgIH1cbiAgICBjb25zdCByZXNwID0gYXdhaXQgSHR0cFNlcnZpY2UuZ2V0SlNPTjxzdHJpbmdbXT4odXJsKTtcbiAgICB0aGlzLmxvY2FsZXNbdXJsIGFzIHN0cmluZ10gPSByZXNwLmJvZHk7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlc1t1cmwgYXMgc3RyaW5nXTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTG9jYWxlc1NlcnZpY2UgfSBmcm9tIFwiLi4vdHlwZXMvbG9jYWxlcy1zZXJ2aWNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBMb2NhbGVzU3RhdGljU2VydmljZSBleHRlbmRzIExvY2FsZXNTZXJ2aWNlIHtcbiAgcHVibGljIHN0YXRpYyBpbnN0YW5jZXM6IHtcbiAgICBbaWQ6IHN0cmluZ106IExvY2FsZXNTdGF0aWNTZXJ2aWNlO1xuICB9ID0ge307XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShpZCA9IFwibWFpblwiKSB7XG4gICAgcmV0dXJuIExvY2FsZXNTdGF0aWNTZXJ2aWNlLmluc3RhbmNlc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgZGVmaW5lZCBsYW5nY29kZVxuICAgKi9cbiAgcHJvdGVjdGVkIGN1cnJlbnRMYW5nY29kZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdGhlbWUgbGFuZ2NvZGUgYmVmb3JlIGFueSBsYW5ndWFnZSB3YXMgY2hvc2VuXG4gICAqL1xuICBwcm90ZWN0ZWQgaW5pdGlhbExhbmdjb2RlPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBsb2NhbGVzOiBhbnksXG4gICAgcHJvdGVjdGVkIGlkPzogc3RyaW5nLFxuICAgIGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlID0gZmFsc2UsXG4gICAgc2hvd01pc3NpbmdUcmFuc2xhdGlvbiA9IGZhbHNlXG4gICkge1xuICAgIHN1cGVyKGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlLCBzaG93TWlzc2luZ1RyYW5zbGF0aW9uKTtcbiAgICBpZiAoIWlkKSB7XG4gICAgICBpZCA9IFwibWFpblwiO1xuICAgIH1cblxuICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXM7XG5cbiAgICBpZiAoTG9jYWxlc1N0YXRpY1NlcnZpY2UuaW5zdGFuY2VzW2lkXSkge1xuICAgICAgcmV0dXJuIExvY2FsZXNTdGF0aWNTZXJ2aWNlLmluc3RhbmNlc1tpZF07XG4gICAgfVxuXG4gICAgdGhpcy5pbml0KCk7XG4gICAgTG9jYWxlc1N0YXRpY1NlcnZpY2UuaW5zdGFuY2VzW2lkXSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGZpbGUgd2l0aCBhbGwgbGFuZ3VhZ2VzXG4gICAqIEBwYXJhbSB0aGVtZUlEXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0QWxsKC8qdGhlbWVJRD86IG51bWJlciovKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlcztcbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vbGFuZ2NvZGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xvY2FsLXZhci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbG9jYWxlcy1zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGUtb3B0aW9ucy5qc1wiO1xuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5pbXBvcnQgeyBMYW5nY29kZSwgTG9jYWxQbHVyYWxpemF0aW9uLCBMb2NhbFZhciB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMb2NhbGVzU2VydmljZSB7XG4gIHB1YmxpYyBnZXQgcmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWR5O1xuICB9XG5cbiAgcHVibGljIGV2ZW50ID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcImkxOG5cIik7XG5cbiAgcHVibGljIHNob3dNaXNzaW5nVHJhbnNsYXRpb24gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgX3JlYWR5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGRlZmluZWQgbGFuZ2NvZGVcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjdXJyZW50TGFuZ2NvZGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIC8gZGVmYXVsdCB0aGVtZSBsYW5nY29kZSBiZWZvcmUgYW55IGxhbmd1YWdlIHdhcyBjaG9zZW5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBpbml0aWFsTGFuZ2NvZGU/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlOiBib29sZWFuLFxuICAgIHNob3dNaXNzaW5nVHJhbnNsYXRpb246IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5kb05vdFRyYW5zbGF0ZURlZmF1bHRMYW5ndWFnZSA9IGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlO1xuICAgIHRoaXMuc2hvd01pc3NpbmdUcmFuc2xhdGlvbiA9IHNob3dNaXNzaW5nVHJhbnNsYXRpb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRyYW5zbGF0aW9uIGJ5IHByb3BlcnRpZXMsIGUuZy4gYGRlLmZvcm0ubmV3c2xldHRlcl9sYWJlbGBcbiAgICogUHJvcGVydGllcyBvYmplY3QgbXVzdCBpbmNsdWRlIHRoZSBsYW5ndWFnZSBjb2RlLCBlLmcuIGBkZWAuXG4gICAqIEBwYXJhbSBwcm9wZXJ0aWVzIHByb3BlcnRpZXMsIGUuZy4gYFsnZGUnLCAnZm9ybScsICduZXdzbGV0dGVyJywgJ2xhYmVsJ11gXG4gICAqIEBwYXJhbSBmb3JjZSBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGZvcmNlIHRoZSByZXF1ZXN0IGFsc28gaWYgdGhlIHNlcnZpY2UgaXMgbm90IHJlYWR5LCB5b3Ugc2hvdWxkIHVzZSB0aGlzIG9ubHkgb25lIHRoZSB0aW1lXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0KFxuICAgIHByb3BlcnRpZXM/OiBzdHJpbmdbXSxcbiAgICB2YXJzPzogTG9jYWxWYXIsXG4gICAgZm9yY2UgPSBmYWxzZVxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghdGhpcy5yZWFkeSAmJiAhZm9yY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCByZWFkeVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZ2V0QWxsKClcbiAgICAgICAgLy8gZXh0cmFjdCBwcm9wZXJ0aWVzXG4gICAgICAgIC50aGVuKChsb2NhbHMpID0+IHtcbiAgICAgICAgICBpZiAocHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGxvY2FsOiBhbnkgPSBjbG9uZSh0cnVlLCBsb2NhbHMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobG9jYWxbcHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgbG9jYWwgPSBsb2NhbFtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsb2NhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxvY2FscztcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKGxvY2FsKSA9PiB7XG4gICAgICAgICAgaWYgKGxvY2FsID09PSBudWxsICYmIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgYFdBUk5JTkcgdHJhbnNsYXRpb24gbWlzc2luZzogXCIke3Byb3BlcnRpZXMuam9pbihcIi5cIil9XCJgLFxuICAgICAgICAgICAgICBsb2NhbCxcbiAgICAgICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxvY2FsO1xuICAgICAgICB9KVxuICAgICAgICAvLyBSZXBsYWNlIHZhcmlhYmxlcyBpbiBsb2NhbCBzdHJpbmcgaWYgdmFycyBhcmUgc2V0XG4gICAgICAgIC50aGVuKChsb2NhbCkgPT4ge1xuICAgICAgICAgIGlmICh2YXJzKSB7XG4gICAgICAgICAgICBsb2NhbCA9IHRoaXMuc2V0VHJhbnNsYXRlU3RyaW5nUGx1cmFsaXphdGlvbihsb2NhbCwgdmFycyk7XG4gICAgICAgICAgICBsb2NhbCA9IHRoaXMuc2V0VHJhbnNsYXRlU3RyaW5nVmFycyhsb2NhbCwgdmFycyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsb2NhbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRyYW5zbGF0aW9uIGJ5IHByb3BlcnRpZXMsIGUuZy4gYGZvcm0ubmV3c2xldHRlcl9sYWJlbGBcbiAgICogUHJvcGVydGllcyBvYmplY3QgbXVzdCBub3QgaW5jbHVkZSB0aGUgbGFuZ3VhZ2UgY29kZS5cbiAgICogQHBhcmFtIHByb3BlcnRpZXMgcHJvcGVydGllcywgZS5nLiBgW2Zvcm0nLCAnbmV3c2xldHRlcicsICdsYWJlbCddYFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEJ5Q3VycmVudExhbmcocHJvcGVydGllczogc3RyaW5nW10gPSBbXSwgdmFycz86IExvY2FsVmFyKSB7XG4gICAgY29uc3QgbGFuZ2NvZGUgPSB0aGlzLmdldExhbmdjb2RlKCk7XG4gICAgaWYgKCFsYW5nY29kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGFuZ2NvZGUgbm90IGZvdW5kIGluIGh0bWwgdGFnXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXQoW2xhbmdjb2RlLCAuLi5wcm9wZXJ0aWVzXSwgdmFycyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QnJvd3Nlckxhbmdjb2RlKCkge1xuICAgIGNvbnN0IGxhbmcgPSBuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgKG5hdmlnYXRvciBhcyBhbnkpLnVzZXJMYW5ndWFnZTtcbiAgICBjb25zdCBzaW1wbGlmaWVkID0gbGFuZy5zcGxpdChcIi1cIilbMF0udG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gc2ltcGxpZmllZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRIVE1MTGFuZ2NvZGUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5nY29kZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZ1xuICAgICAgOiBcImVuXCI7XG4gICAgcmV0dXJuIGxhbmdjb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBsYW5nY29kZSxcbiAgICogaWYgbGFuZyB3YXMgbm90IGNob3NlbiB0aGlzIGlzIHRoZSBsYW5nY29kZSBvZiB0aGUgbGFuZyBhdHRyaWJ1dGUgb2YgdGhlIGh0bWwgZWxlbWVudC5cbiAgICogSWYgdGhlIGxhbmd1YWdlIHdhcyBjaGFuZ2VkIHRoaXMgcmV0dXJucyB0aGUgY2hhbmdlZCBsYW5ndWFnZVxuICAgKi9cbiAgcHVibGljIGdldExhbmdjb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRMYW5nY29kZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJbml0aWFsTGFuZ2NvZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbExhbmdjb2RlO1xuICB9XG5cbiAgcHVibGljIHNldExhbmdjb2RlKGxhbmdjb2RlOiBzdHJpbmcsIGluaXRpYWwgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRMYW5nY29kZSAhPT0gbGFuZ2NvZGUpIHtcbiAgICAgIHRoaXMuY3VycmVudExhbmdjb2RlID0gbGFuZ2NvZGU7XG5cbiAgICAgIC8vICQoJ2h0bWwnKS5hdHRyKCdsYW5nJywgbGFuZ2NvZGUpO1xuICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IGxhbmdjb2RlO1xuICAgICAgfVxuICAgICAgdGhpcy5ldmVudC50cmlnZ2VyKFwiY2hhbmdlZFwiLCBsYW5nY29kZSwgaW5pdGlhbCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEF2YWlsYWJsZUxhbmdjb2RlcygpIHtcbiAgICBjb25zdCBhY3RpdmVDb2RlID0gdGhpcy5nZXRMYW5nY29kZSgpO1xuICAgIGNvbnN0IGxvY2FscyA9IGF3YWl0IHRoaXMuZ2V0KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICBjb25zdCBsYW5nY29kZXM6IExhbmdjb2RlW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGxhbmdjb2RlIG9mIE9iamVjdC5rZXlzKGxvY2FscykpIHtcbiAgICAgIGxhbmdjb2Rlcy5wdXNoKHtcbiAgICAgICAgY29kZTogbGFuZ2NvZGUsXG4gICAgICAgIGFjdGl2ZTogbGFuZ2NvZGUgPT09IGFjdGl2ZUNvZGUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxhbmdjb2RlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0ZW1wbGF0ZXMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc2V0IHZhcmlhYmxlcyBvbiBsYW5ndWFnZSBzdHJpbmdzXG4gICAqL1xuICBwdWJsaWMgcGFyc2VUZW1wbGF0ZVZhcnMoZWw6IEhUTUxFbGVtZW50KTogTG9jYWxWYXIge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRlbXBsYXRlRWxlbWVudD4oXCJ0ZW1wbGF0ZVwiKTtcbiAgICBjb25zdCB2YXJzOiBMb2NhbFZhciA9IHt9O1xuICAgIHRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgY29uc3QgbmFtZTogc3RyaW5nIHwgbnVsbCA9IHRlbXBsYXRlLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xuICAgICAgICB2YXJzW25hbWVdID0gdGVtcGxhdGUuaW5uZXJIVE1MLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0ZW1wbGF0ZXMgd2hpY2ggaGF2ZSBoaXMgb3duIHRyYW5zbGF0aW9uc1xuICAgKi9cbiAgcHVibGljIHBhcnNlTG9jYWxWYXJzKGVsOiBIVE1MRWxlbWVudCk6IExvY2FsVmFyIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxUZW1wbGF0ZUVsZW1lbnQ+KFwidGVtcGxhdGVcIik7XG4gICAgY29uc3QgdmFyczogTG9jYWxWYXIgPSB7fTtcbiAgICB0ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGUpID0+IHtcbiAgICAgIGNvbnN0IGxhbmc6IHN0cmluZyB8IG51bGwgPSB0ZW1wbGF0ZS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpO1xuICAgICAgaWYgKGxhbmcgIT09IG51bGwpIHtcbiAgICAgICAgdmFyc1tsYW5nXSA9IHRlbXBsYXRlLmlubmVySFRNTC50cmltKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSB2YXJpYWJsZXMgb24gdHJhbnNsYXRlZCBzdHJpbmdcbiAgICogQHBhcmFtIHRyYW5zbGF0ZVN0cmluZ1xuICAgKiBAcGFyYW0gdmFyc1xuICAgKi9cbiAgcHVibGljIHNldFRyYW5zbGF0ZVN0cmluZ1ZhcnModHJhbnNsYXRlU3RyaW5nOiBzdHJpbmcsIHZhcnM6IExvY2FsVmFyKSB7XG4gICAgaWYgKFxuICAgICAgIXRyYW5zbGF0ZVN0cmluZyB8fFxuICAgICAgT2JqZWN0LmtleXModmFycykubGVuZ3RoID09PSAwIHx8XG4gICAgICB0eXBlb2YgdHJhbnNsYXRlU3RyaW5nLm1hdGNoICE9PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGVTdHJpbmc7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZXMgPSB0cmFuc2xhdGVTdHJpbmcubWF0Y2goL3t7XFxzKj9bQS1aYS16MC05Xy1dK1xccyo/fX0vZ20pO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgY29uc3QgdmFyTmFtZSA9IG1hdGNoLnJlcGxhY2UoL3t7XFxzKnxcXHMqfX0vZ20sIFwiXCIpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiB2YXJzW3Zhck5hbWVdID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICB0eXBlb2YgdmFyc1t2YXJOYW1lXSA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdHJhbnNsYXRlU3RyaW5nID0gdHJhbnNsYXRlU3RyaW5nLnJlcGxhY2UoXG4gICAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgICB2YXJzW3Zhck5hbWVdIGFzIHN0cmluZ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zbGF0ZVN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZmlsZSB3aXRoIGFsbCBsYW5ndWFnZXNcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRBbGwoKTogUHJvbWlzZTxhbnk+O1xuXG4gIHByb3RlY3RlZCBhc3luYyBpbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbExhbmdjb2RlID0gdGhpcy5nZXRIVE1MTGFuZ2NvZGUoKTtcbiAgICB0aGlzLmN1cnJlbnRMYW5nY29kZSA9IHRoaXMuaW5pdGlhbExhbmdjb2RlO1xuICAgIGlmICghdGhpcy5pbml0aWFsTGFuZ2NvZGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRoZSBsYW5nIGF0dHJpYnV0ZSBvbiB0aGUgaHRtbCBlbGVtZW50IGlzIHJlcXVpcmVkIHRvIGRldGVjdCB0aGUgZGVmYXVsdCB0aGVtZSBsYW5ndWFnZTogJHt0aGlzLmluaXRpYWxMYW5nY29kZX1gXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBEZXRlY3QgYnJvd3NlciBsYW5ndWFnZSBhbmQgc3dpdGNoIHRvIHRoaXMgbGFuZ3VhZ2Ugd2hlbiBhdmFpbGFibGVcbiAgICBjb25zdCBicm93c2VyTGFuZ2NvZGUgPSB0aGlzLmdldEJyb3dzZXJMYW5nY29kZSgpO1xuICAgIHJldHVybiB0aGlzLmdldEF2YWlsYWJsZUxhbmdjb2RlcygpXG4gICAgICAudGhlbigoYXZhaWxhYmxlTGFuZ2NvZGVzKSA9PiB7XG4gICAgICAgIGxldCBicm93c2VyTGFuZ0ZvdW5kID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgYXZhaWxhYmxlTGFuZ2NvZGVPYmogb2YgYXZhaWxhYmxlTGFuZ2NvZGVzKSB7XG4gICAgICAgICAgaWYgKGF2YWlsYWJsZUxhbmdjb2RlT2JqLmNvZGUgPT09IGJyb3dzZXJMYW5nY29kZSkge1xuICAgICAgICAgICAgYnJvd3NlckxhbmdGb3VuZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG9ubHkgc3dpdGNoIGxhbmd1YWdlIGlmIHRoZSBicm93c2VyIGxhbmd1YWdlIGlzIG5vdCB0aGUgZGVmYXVsdCBsYW5ndWFnZSAoaWYgZG9Ob3RUcmFuc2xhdGVEZWZhdWx0TGFuZ3VhZ2UgaXMgdHJ1ZSlcbiAgICAgICAgaWYgKFxuICAgICAgICAgICF0aGlzLmRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlIHx8XG4gICAgICAgICAgKGJyb3dzZXJMYW5nRm91bmQgJiYgYnJvd3Nlckxhbmdjb2RlICE9PSB0aGlzLmN1cnJlbnRMYW5nY29kZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5zZXRMYW5nY29kZShicm93c2VyTGFuZ2NvZGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdmFpbGFibGVMYW5nY29kZXM7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKC8qYXZhaWxhYmxlTGFuZ2NvZGVzKi8pID0+IHtcbiAgICAgICAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBsYW5nY29kZSBpcyBub3QgdGhlIGluaXRpYWwgbGFuZ2NvZGUgdGhlbiB0cmFuc2xhdGlvbiBpcyBuZWVkZWRcbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb25OZWVkZWQgPVxuICAgICAgICAgIHRoaXMuY3VycmVudExhbmdjb2RlICE9PSB0aGlzLmluaXRpYWxMYW5nY29kZSB8fFxuICAgICAgICAgICF0aGlzLmRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlO1xuICAgICAgICB0aGlzLmV2ZW50LnRyaWdnZXIoXCJyZWFkeVwiLCB0aGlzLmN1cnJlbnRMYW5nY29kZSwgdHJhbnNsYXRpb25OZWVkZWQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vZW4vdGhlbWVzL2RldmVsb3BtZW50L3RoZW1lLXN0b3JlLXJlcXVpcmVtZW50cy9pbnRlcm5hdGlvbmFsaXppbmcvdHJhbnNsYXRpb24tZmlsdGVyI3BsdXJhbGl6YXRpb24taW4tdHJhbnNsYXRpb24ta2V5c1xuICAgKiBAcGFyYW0gdHJhbnNsYXRlU3RyaW5nXG4gICAqIEBwYXJhbSB2YXJzXG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0VHJhbnNsYXRlU3RyaW5nUGx1cmFsaXphdGlvbihcbiAgICB0cmFuc2xhdGVPYmo6IExvY2FsUGx1cmFsaXphdGlvbiB8IHN0cmluZyxcbiAgICB2YXJzOiBMb2NhbFZhclxuICApIHtcbiAgICBpZiAoXG4gICAgICB2YXJzLmNvdW50ICYmXG4gICAgICB0eXBlb2YgdHJhbnNsYXRlT2JqID09PSBcIm9iamVjdFwiICYmXG4gICAgICB0cmFuc2xhdGVPYmogIT09IG51bGxcbiAgICApIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gTnVtYmVyKHZhcnMuY291bnQpO1xuICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGVPYmouemVybykge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVPYmouemVybztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICBpZiAodHJhbnNsYXRlT2JqLm9uZSkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVPYmoub25lO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvdW50ID09PSAyKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGVPYmoudHdvKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZU9iai50d287XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdHJhbnNsYXRlT2JqID09PSBcIm9iamVjdFwiICYmXG4gICAgICB0cmFuc2xhdGVPYmogIT09IG51bGwgJiZcbiAgICAgIHRyYW5zbGF0ZU9iai5vdGhlclxuICAgICkge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZU9iai5vdGhlcjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zbGF0ZU9iaiBhcyBzdHJpbmc7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBqc3hNb2R1bGUgfSBmcm9tIFwiLi9tb2R1bGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWZyYWdtZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtcmF3LmpzXCI7XG4iLCJleHBvcnQgY29uc3QgSnN4RnJhZ21lbnQgPSBTeW1ib2woKTtcbiIsIi8qKlxuICogVXNlZCB0byBpbmplY3QgSFRNTCBkaXJlY3RseSBpbnRvIHRoZSBkb2N1bWVudC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZXhwb3J0IGZ1bmN0aW9uIFJhdyhfcHJvcHM6IHsgaHRtbDogc3RyaW5nIH0pIHtcbiAgLy8gVGhpcyBpcyBoYW5kbGVkIHNwZWNpYWxseSBieSB0aGUgcmVuZGVyRWxlbWVudCBmdW5jdGlvbi4gSW5zdGVhZCBvZiBiZWluZ1xuICAvLyBjYWxsZWQsIHRoZSB0YWcgaXMgY29tcGFyZWQgdG8gdGhpcyBmdW5jdGlvbiBhbmQgdGhlIGBodG1sYCBwcm9wIHdpbGwgYmVcbiAgLy8gcmV0dXJuZWQgZGlyZWN0bHkuXG4gIHJldHVybiBudWxsO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktaW50ZXJmYWNlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlICovXG4vKipcbiAqIEN1c3RvbSBKU1ggbW9kdWxlIGRlc2lnbmVkIHNwZWNpZmljYWxseSBmb3IgUmliYWpzJ3MgbmVlZHMuXG4gKiBXaGVuIG92ZXJyaWRpbmcgYSBkZWZhdWx0IFR5cGVEb2MgdGhlbWUgb3V0cHV0LCB5b3VyIGltcGxlbWVudGF0aW9uIG11c3QgY3JlYXRlIHZhbGlkIHtAbGluayBFbGVtZW50fVxuICogaW5zdGFuY2VzLCB3aGljaCBjYW4gYmUgbW9zdCBlYXNpbHkgZG9uZSBieSB1c2luZyBUeXBlRG9jJ3MgSlNYIGltcGxlbWVudGF0aW9uLiBUbyB1c2UgaXQsIHNldCB1cFxuICogeW91ciB0c2NvbmZpZyB3aXRoIHRoZSBmb2xsb3dpbmcgY29tcGlsZXIgb3B0aW9uczpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgICBcImpzeFwiOiBcInJlYWN0XCIsXG4gKiAgICAgXCJqc3hGYWN0b3J5XCI6IFwiSlNYLmNyZWF0ZUVsZW1lbnRcIixcbiAqICAgICBcImpzeEZyYWdtZW50RmFjdG9yeVwiOiBcIkpTWC5GcmFnbWVudFwiXG4gKiB9XG4gKiBgYGBcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1R5cGVTdHJvbmcvdHlwZWRvYy9ibG9iL21hc3Rlci9zcmMvbGliL3V0aWxzL2pzeC50c1xuICogQG1vZHVsZVxuICovXG5cbmltcG9ydCB0eXBlIHtcbiAgSnN4RWxlbWVudCxcbiAgSnN4Q2hpbGRyZW4sXG4gIEpzeENvbXBvbmVudCxcbiAgQmFzaWNJbnRyaW5zaWNFbGVtZW50cyxcbn0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7XG4gIGlzQ3VzdG9tRWxlbWVudCxcbiAganNvblN0cmluZ2lmeSxcbiAgZXNjYXBlSHRtbCxcbn0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBKc3hGcmFnbWVudCB9IGZyb20gXCIuL2pzeC1mcmFnbWVudC5qc1wiO1xuaW1wb3J0IHsgUmF3IH0gZnJvbSBcIi4vanN4LXJhdy5qc1wiO1xuXG5leHBvcnQgY29uc3QgaHRtbFZvaWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICBcImFyZWFcIixcbiAgXCJiYXNlXCIsXG4gIFwiYnJcIixcbiAgXCJjb2xcIixcbiAgXCJlbWJlZFwiLFxuICBcImhyXCIsXG4gIFwiaW1nXCIsXG4gIFwiaW5wdXRcIixcbiAgXCJsaW5rXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIixcbl0pO1xuXG4vKipcbiAqIEpTWCBmYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhbiBcImVsZW1lbnRcIiB0aGF0IGNhbiBsYXRlciBiZSByZW5kZXJlZCB3aXRoIHtAbGluayByZW5kZXJFbGVtZW50fVxuICogQHBhcmFtIHRhZ1xuICogQHBhcmFtIHByb3BzXG4gKiBAcGFyYW0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoXG4gIHRhZzogdHlwZW9mIEpzeEZyYWdtZW50IHwgc3RyaW5nIHwgSnN4Q29tcG9uZW50PGFueT4sXG4gIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBKc3hDaGlsZHJlbltdXG4pOiBKc3hFbGVtZW50IHtcbiAgcmV0dXJuIHsgdGFnLCBwcm9wcywgY2hpbGRyZW4gfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoZWxlbWVudDogSnN4RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGNvbnN0IHsgdGFnLCBwcm9wcywgY2hpbGRyZW4gfSA9IGVsZW1lbnQ7XG5cbiAgaWYgKHR5cGVvZiB0YWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGlmICh0YWcgPT09IFJhdykge1xuICAgICAgcmV0dXJuIFN0cmluZygocHJvcHMgYXMgYW55KS5odG1sKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlckVsZW1lbnQodGFnKE9iamVjdC5hc3NpZ24oeyBjaGlsZHJlbiB9LCBwcm9wcykpKTtcbiAgfVxuXG4gIGNvbnN0IGh0bWw6IHN0cmluZ1tdID0gW107XG5cbiAgaWYgKHRhZyAhPT0gSnN4RnJhZ21lbnQpIHtcbiAgICBodG1sLnB1c2goXCI8XCIsIHRhZyk7XG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMgPz8ge30pKSB7XG4gICAgICBpZiAodmFsID09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbCA9PSBcImJvb2xlYW5cIiAmJiAhaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIGh0bWwucHVzaChcIiBcIiwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHRtbC5wdXNoKFwiIFwiLCBrZXksIFwiPVwiLCBqc29uU3RyaW5naWZ5KHZhbCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBoYXNDaGlsZHJlbiA9IGZhbHNlO1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgaGFzQ2hpbGRyZW4gPSB0cnVlO1xuICAgIGlmICh0YWcgIT09IEpzeEZyYWdtZW50KSBodG1sLnB1c2goXCI+XCIpO1xuICAgIHJlbmRlckNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmICh0YWcgIT09IEpzeEZyYWdtZW50KSB7XG4gICAgaWYgKCFoYXNDaGlsZHJlbikge1xuICAgICAgaWYgKGh0bWxWb2lkRWxlbWVudHMuaGFzKHRhZykpIHtcbiAgICAgICAgaHRtbC5wdXNoKFwiLz5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sLnB1c2goXCI+PC9cIiwgdGFnLCBcIj5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGh0bWwucHVzaChcIjwvXCIsIHRhZywgXCI+XCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sLmpvaW4oXCJcIik7XG5cbiAgZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oY2hpbGRyZW46IEpzeENoaWxkcmVuW10pIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIHJlbmRlckNoaWxkcmVuKGNoaWxkKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBjaGlsZCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBodG1sLnB1c2goZXNjYXBlSHRtbChjaGlsZC50b1N0cmluZygpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sLnB1c2gocmVuZGVyRWxlbWVudChjaGlsZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBqc3hDcmVhdGVFbGVtZW50OiB0eXBlb2YgY3JlYXRlRWxlbWVudDtcbiAgdmFyIGpzeEZyYWdtZW50OiB0eXBlb2YgSnN4RnJhZ21lbnQ7XG4gIC8qKlxuICAgKiBUeXBlU2NyaXB0J3MgcnVsZXMgZm9yIGxvb2tpbmcgdXAgdGhlIEpTWC5JbnRyaW5zaWNFbGVtZW50cyBhbmQgSlNYLkVsZW1lbnRcbiAgICogaW50ZXJmYWNlcyBhcmUgaW5jcmVkaWJseSBzdHJhbmdlLiBJdCB3aWxsIGZpbmQgdGhlbSBpZiB0aGV5IGFyZSBpbmNsdWRlZCBhc1xuICAgKiBhIG5hbWVzcGFjZSB1bmRlciB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiwgb3IgZ2xvYmFsbHksIG9yLCBhcHBhcmVudGx5LCBpZlxuICAgKiBhIEpTWCBuYW1lc3BhY2UgaXMgZGVjbGFyZWQgYXQgdGhlIHNhbWUgc2NvcGUgYXMgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAqIEhpZGUgdGhpcyBpbiB0aGUgZG9jcywgaG9wZWZ1bGx5IHNvbWVkYXkgVHlwZVNjcmlwdCBpbXByb3ZlcyB0aGlzIGFuZCBhbGxvd3NcbiAgICogbG9va2luZyBhZGphY2VudCB0byB0aGUgZmFjdG9yeSBmdW5jdGlvbiBhbmQgd2UgY2FuIGdldCByaWQgb2YgdGhpcyBwaGFudG9tIG5hbWVzcGFjZS5cbiAgICpcbiAgICogV2UgYXJlIHVzaW5nIHRoZSBnbG9iYWwgbmFtZXNwYWNlIHRvIGJlIGFibGUgdG8gZXh0ZW5kIHRoZSBJbnRyaW5zaWNFbGVtZW50cyBpbnRlcmZhY2UgaW4gb3RoZXIgUmliYWpzIE1vZHVsZXNcbiAgICogQGhpZGRlblxuICAgKi9cbiAgbmFtZXNwYWNlIEpTWCB7XG4gICAgLy8gVGhpcyBtdXN0IGJlIGFuIGludGVyZmFjZSB0byBiZSBhYmxlIHRvIGV4dGVuZCB0aGlzIGludGVyZmFjZSBpbiBvdGhlciBSaWJhanMgTW9kdWxlc1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMgZXh0ZW5kcyBCYXNpY0ludHJpbnNpY0VsZW1lbnRzIHt9XG4gICAgZXhwb3J0IHsgSnN4RWxlbWVudCBhcyBFbGVtZW50IH07XG4gIH1cbn1cbmRlY2xhcmUgY29uc3QgZ2xvYmFsOiBhbnk7XG5cbi8vIFNldCBhcyBnbG9iYWwgdmFyaWFibGUgaW4gQnJvd3NlciwgRGVubyBvciBOb2RlXG4oZ2xvYmFsIHx8IHdpbmRvdykuanN4Q3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG4oZ2xvYmFsIHx8IHdpbmRvdykuanN4RnJhZ21lbnQgPSBKc3hGcmFnbWVudDtcbiIsImltcG9ydCB7IFJpYmFNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBKU1hNb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IGpzeE1vZHVsZTogUmliYU1vZHVsZTxKU1hNb2R1bGVPcHRpb25zPiA9IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBpbml0KG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxufTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2pzeC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LW1vZHVsZS1vcHRpb25zLmpzXCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9pbnRyaW5zaWMtZWxlbWVudHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1hLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1hcmVhLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1hdWRpby1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtYmFzZS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtYmxvY2txdW90ZS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtYnItZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWJ1dHRvbi1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtY2FudmFzLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1jaGlsZHJlbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWNvbC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtY29sZ3JvdXAtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWNvbXBvbmVudC1ib29sZWFuLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtY29tcG9uZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtZGF0YS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtZGVsLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1kZXRhaWxzLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1kaWFsb2ctZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWRpdi1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtZWxlbWVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWVtYmVkLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1maWVsZHNldC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtZm9ybS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtaHRtbC1jdXN0b20tZ2xvYmFsLXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtaHRtbC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtaHRtbC1nbG9iYWwtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1pZnJhbWUtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWltZy1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtaW5wdXQtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWlucy1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtbGFiZWwtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LWxpLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1saW5rLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1tYXAtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LW1ldGEtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LW1ldGVyLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1vYmplY3QtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LW9sLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1vcHRncm91cC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtb3B0aW9uLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1vdXRwdXQtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXBhcmFtLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1wb3J0YWwtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXByb2dyZXNzLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1xLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1zY3JpcHQtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXNlbGVjdC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtc2xvdC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtc291cmNlLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC1zdHlsZS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtc3ZnLXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtdGQtZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXRleHRhcmVhLWVsZW1lbnQtcHJvcHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzeC10aC1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtdGltZS1lbGVtZW50LXByb3BzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc3gtdHJhY2stZWxlbWVudC1wcm9wcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXZpZGVvLWVsZW1lbnQtcHJvcHMuanNcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL3ZpZXctc3RhdGljLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGUuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yb3V0ZS1jbGFzcy1zdGFyLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGUtcHJlbG9hZC5iaW5kZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcmVudC1yb3V0ZS1jbGFzcy1zdGFyLmJpbmRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGUtYmFjay1vbi1zdGFyLmJpbmRlci5qc1wiO1xuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgeyBvblBhcmVudFJvdXRlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3VybFwiO1xuXG5leHBvcnQgY2xhc3MgUGFyZW50Um91dGVDbGFzc1N0YXJCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8XG4gIHN0cmluZyxcbiAgSFRNTEFuY2hvckVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50XG4+IHtcbiAgc3RhdGljIGNsYXNzID0gXCJwYXJlbnQtcm91dGUtY2xhc3MtKlwiO1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBFdmVudERpc3BhdGNoZXIoXCJtYWluXCIpO1xuXG4gIHByaXZhdGUgY2xhc3NOYW1lPzogc3RyaW5nO1xuXG4gIHByaXZhdGUgdXJsPzogc3RyaW5nO1xuXG4gIHByaXZhdGUgX29uVXJsQ2hhbmdlKCkge1xuICAgIGlmICghdGhpcy51cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVybCBpcyBub3QgZGVmaW5lZCFcIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNsYXNzTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xhc3NOYW1lIGlzIG5vdCBkZWZpbmVkIVwiKTtcbiAgICB9XG5cbiAgICBpZiAob25QYXJlbnRSb3V0ZSh0aGlzLnVybCkpIHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSk7XG4gICAgICAvLyBjaGVjayBpZiBlbGVtZW50IGlzIHJhZGlvIGlucHV0XG4gICAgICBpZiAodGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgKHRoaXMuZWwgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgIC8vIHVuY2hlY2sgaWYgZWxlbWVudCBpcyByYWRpbyBpbnB1dFxuICAgICAgaWYgKHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICAgICh0aGlzLmVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBvblVybENoYW5nZSA9IHRoaXMuX29uVXJsQ2hhbmdlLmJpbmQodGhpcyk7XG5cbiAgLyoqXG4gICAqIFRlc3RzIHRoZSB1cmwgd2l0aCB0aGUgY3VycmVudCBsb2NhdGlvbiwgaWYgdGhlIGN1cnJlbnQgbG9jYXRpb24gc3RhcnRzIHdpdGggdGhlIHVybCB0aGlzIGVsZW1lbnQgZ2V0cyB0aGUgYFtjbGFzc25hbWVdYCBjbGFzc1xuICAgKiBAcGFyYW0gZWwgQmluZGVyIEhUTUwgRWxlbWVudFxuICAgKiBAcGFyYW0gdXJsIFVybCB0byBjb21wYXJlIHdpdGggdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICovXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB1cmw/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuYXJnc1swXS50b1N0cmluZygpIHx8IFwiYWN0aXZlXCI7XG4gICAgY29uc3QgaXNBbmtlckhUTUxFbGVtZW50ID0gZWwudGFnTmFtZSA9PT0gXCJBXCI7XG4gICAgaWYgKCF0aGlzLnVybCAmJiBpc0Fua2VySFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGhyZWYgPSBlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgdGhpcy51cmwgPSBocmVmO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm9uVXJsQ2hhbmdlKCk7XG4gIH1cblxuICBiaW5kKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5vbihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uVXJsQ2hhbmdlKTtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIub2ZmKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMub25VcmxDaGFuZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIsIGV2ZW50SGFuZGxlckZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5jb25zdCBnb0JhY2sgPSAoKSA9PiB7XG4gIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbn07XG5cbi8qKlxuICogQ2FsbHMgYHdpbmRvdy5oaXN0b3J5LmJhY2soKWAgb24gZXZlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZUJhY2tPblN0YXJCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8ZXZlbnRIYW5kbGVyRnVuY3Rpb24+IHtcbiAgc3RhdGljIGtleSA9IFwicm91dGUtYmFjay1vbi0qXCI7XG4gIHByaW9yaXR5ID0gMzAwMDtcblxuICBwcml2YXRlIGV2ZW50TmFtZT86IHN0cmluZztcblxuICB1bmJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuZXZlbnROYW1lKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCBnb0JhY2spO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50IC8qLCBvcHRpb25zOiBhbnkqLykge1xuICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFyZ3MgaXMgbnVsbFwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXZlbnROYW1lKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCBnb0JhY2spO1xuICAgIH1cbiAgICB0aGlzLmV2ZW50TmFtZSA9IHRoaXMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmFyZ3NbMF0gYXMgc3RyaW5nLCBnb0JhY2spO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IG9uUm91dGUgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdXJsXCI7XG5cbmV4cG9ydCBjbGFzcyBSb3V0ZUNsYXNzU3RhckJpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwicm91dGUtY2xhc3MtKlwiO1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBFdmVudERpc3BhdGNoZXIoXCJtYWluXCIpO1xuICBwcml2YXRlIHVybD86IHN0cmluZztcbiAgcHJpdmF0ZSBjbGFzc05hbWUgPSBcIlwiO1xuXG4gIHByaXZhdGUgX29uVXJsQ2hhbmdlKCkge1xuICAgIGlmICh0aGlzLnVybCkge1xuICAgICAgaWYgKG9uUm91dGUodGhpcy51cmwpKSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSk7XG4gICAgICAgIC8vIGNoZWNrIGlmIGVsZW1lbnQgaXMgcmFkaW8gaW5wdXRcbiAgICAgICAgaWYgKHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICAgICAgdGhpcy5lbC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZSk7XG4gICAgICAgIC8vIHVuY2hlY2sgaWYgZWxlbWVudCBpcyByYWRpbyBpbnB1dFxuICAgICAgICBpZiAodGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgICB0aGlzLmVsLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIG9uVXJsQ2hhbmdlID0gdGhpcy5fb25VcmxDaGFuZ2UuYmluZCh0aGlzKTtcblxuICBiaW5kKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5vbihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uVXJsQ2hhbmdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0cyB0aGUgdXJsIHdpdGggdGhlIGN1cnJlbnQgbG9jYXRpb24sIGlmIHRoZSB1cmwgaXMgZXF1YWwgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gdGhpcyBlbGVtZW50IGdldHMgdGhlIGBbY2xhc3NuYW1lXWAgY2xhc3NcbiAgICogQHBhcmFtIGVsIEJpbmRlciBIVE1MIEVsZW1lbnRcbiAgICogQHBhcmFtIHVybCBVcmwgdG8gY29tcGFyZSB3aXRoIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAqL1xuICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdXJsPzogc3RyaW5nKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmFyZ3NbMF0udG9TdHJpbmcoKSB8fCBcImFjdGl2ZVwiO1xuICAgIGNvbnN0IGlzQW5jaG9yRWxlbWVudCA9IGVsLnRhZ05hbWUgPT09IFwiQVwiO1xuICAgIGlmICghdGhpcy51cmwgJiYgaXNBbmNob3JFbGVtZW50KSB7XG4gICAgICBjb25zdCBocmVmID0gZWwuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIGlmIChocmVmKSB7XG4gICAgICAgIHRoaXMudXJsID0gaHJlZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9uVXJsQ2hhbmdlKCk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5kaXNwYXRjaGVyLm9mZihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uVXJsQ2hhbmdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgUGpheCB9IGZyb20gXCJAcmliYWpzL3JvdXRlclwiO1xuXG5leHBvcnQgY2xhc3MgUm91dGVQcmVsb2FkQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEFuY2hvckVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwicm91dGUtcHJlbG9hZFwiO1xuXG4gIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCB1cmw/OiBzdHJpbmcpIHtcbiAgICBpZiAod2luZG93LnNzcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc0FuY2hvckVsZW1lbnQgPSBlbC50YWdOYW1lID09PSBcIkFcIjtcbiAgICBpZiAoIXVybCAmJiBpc0FuY2hvckVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGhyZWYgPSBlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgdXJsID0gaHJlZjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVybCkge1xuICAgICAgUGpheC5nZXRJbnN0YW5jZSgpPy5wcmVmZXRjaExpbmsodXJsKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFBqYXgsIFByZWZldGNoIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBpc09iamVjdCwgaXNTdHJpbmcgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuaW1wb3J0IHsgb25Sb3V0ZSwgbm9ybWFsaXplVXJsLCBpc0V4dGVybmFsVXJsIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3VybFwiO1xuaW1wb3J0IHsgUm91dGVPcHRpb25zIH0gZnJvbSBcIi4uL3R5cGVzL3JvdXRlLW9wdGlvbnMuanNcIjtcblxuLyoqXG4gKiBPcGVuIGxpbmsgd2l0aCBwYWpheCBpZiB0aGUgcm91dGUgaXMgbm90IHRoZSBhY3RpdmUgcm91dGVcbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEFuY2hvckVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwicm91dGVcIjtcblxuICBwcml2YXRlIHByZWZldGNoPzogUHJlZmV0Y2g7XG5cbiAgcHJpdmF0ZSBvcHRpb25zOiBSb3V0ZU9wdGlvbnMgPSB7XG4gICAgdXJsOiBcIlwiLFxuICAgIHZpZXdJZDogXCJtYWluXCIsXG4gICAgcmVtb3ZlQWZ0ZXJBY3RpdmF0aW9uOiBmYWxzZSxcbiAgICBuZXdUYWI6IGZhbHNlLFxuICAgIG5ld1RhYk9uRXh0ZXJuOiB0cnVlLFxuICB9O1xuXG4gIHByaXZhdGUgX29uQ2xpY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5vcHRpb25zLnVybCk7XG4gICAgY29uc3QgcGpheCA9IFBqYXguZ2V0SW5zdGFuY2UodGhpcy5vcHRpb25zLnZpZXdJZCk7XG4gICAgaWYgKG9uUm91dGUodGhpcy5vcHRpb25zLnVybCwgdHJ1ZSkpIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcImFscmVhZHkgb24gdGhpcyBzaXRlLCBkbyBub3RoaW5nXCIpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAoaXNFeHRlcm5hbFVybCh0aGlzLm9wdGlvbnMudXJsKSkge1xuICAgICAgaWYgKCFwamF4KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIElzIGV4dGVyblxuICAgICAgY29uc3QgbmV3VGFiID0gdGhpcy5vcHRpb25zLm5ld1RhYiB8fCB0aGlzLm9wdGlvbnMubmV3VGFiT25FeHRlcm47XG4gICAgICBwamF4LmdvVG8odGhpcy5vcHRpb25zLnVybCwgbmV3VGFiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy51cmwpIHtcbiAgICAgICAgaWYgKCFwamF4KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHBqYXgub25MaW5rQ2xpY2soZXZlbnQsIHRoaXMuZWwsIHRoaXMub3B0aW9ucy51cmwsIHRoaXMub3B0aW9ucy5uZXdUYWIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZUFmdGVyQWN0aXZhdGlvbiAmJiB0aGlzLmVsICYmIHRoaXMuZWwucGFyZW50Tm9kZSkge1xuICAgICAgLy8gdGhpcy51bmJpbmQoKTsgVE9ETz9cbiAgICAgIHRoaXMuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG5cbiAgYmluZChlbDogSFRNTEFuY2hvckVsZW1lbnQpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKFwicm91dGVcIik7XG4gICAgaWYgKHdpbmRvdy5zc3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25DbGljayk7XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MQW5jaG9yRWxlbWVudCwgb3B0aW9uc09yVXJsPzogc3RyaW5nIHwgUm91dGVPcHRpb25zKSB7XG4gICAgaWYgKGlzU3RyaW5nKG9wdGlvbnNPclVybCkpIHtcbiAgICAgIHRoaXMub3B0aW9ucy51cmwgPSBvcHRpb25zT3JVcmwgYXMgc3RyaW5nO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9uc09yVXJsIGFzIFJvdXRlT3B0aW9ucykpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNPclVybCBhcyBSb3V0ZU9wdGlvbnM7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy52aWV3SWQgPSB0aGlzLm9wdGlvbnMudmlld0lkIHx8IFwibWFpblwiO1xuICAgIHRoaXMucHJlZmV0Y2ggPSBuZXcgUHJlZmV0Y2godGhpcy5vcHRpb25zLnZpZXdJZCk7XG5cbiAgICB0aGlzLm9wdGlvbnMubmV3VGFiID0gZmFsc2U7XG4gICAgY29uc3QgaXNBbmNob3JIVE1MRWxlbWVudCA9IGVsLnRhZ05hbWUgPT09IFwiQVwiO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXJsICYmIGlzQW5jaG9ySFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHVybCA9IGVsLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy51cmwgPSB1cmw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZShcInRhcmdldFwiKSA9PT0gXCJfYmxhbmtcIikge1xuICAgICAgdGhpcy5vcHRpb25zLm5ld1RhYiA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gbm9ybWFsaXplIHVybFxuICAgIHRoaXMub3B0aW9ucy51cmwgPSBub3JtYWxpemVVcmwodGhpcy5vcHRpb25zLnVybCkudXJsO1xuXG4gICAgLy8gc2V0IGhyZWYgaWYgbm90IHNldFxuICAgIGlmIChcbiAgICAgIGlzQW5jaG9ySFRNTEVsZW1lbnQgJiZcbiAgICAgICghKGVsIGFzIEhUTUxBbmNob3JFbGVtZW50KS5ocmVmIHx8ICFlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSAmJlxuICAgICAgdGhpcy5vcHRpb25zLnVybFxuICAgICkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCB0aGlzLm9wdGlvbnMudXJsKTtcbiAgICAgIChlbCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaHJlZiA9IHRoaXMub3B0aW9ucy51cmw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubmV3VGFiKSB7XG4gICAgICB0aGlzLnByZWZldGNoLmluaXRCaW5kZXIoZWwsIHRoaXMub3B0aW9ucy51cmwpO1xuICAgIH1cbiAgICAvLyB0aGlzLmNoZWNrVVJMLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLnVybCk7XG4gIH1cblxuICB1bmJpbmQoZWw6IEhUTUxBbmNob3JFbGVtZW50KSB7XG4gICAgdGhpcy5wcmVmZXRjaD8uZGVJbml0QmluZGVyKGVsLCB0aGlzLm9wdGlvbnMudXJsKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGVyLCBWaWV3LCBoYW5kbGVpemVGb3JtYXR0ZXIsIEZvcm1hdHRlckZuIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuaW1wb3J0IHsgUGpheCwgSGlkZVNob3dUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5cbmNvbnN0IGhhbmRsZWl6ZSA9IGhhbmRsZWl6ZUZvcm1hdHRlci5yZWFkIGFzIEZvcm1hdHRlckZuO1xuXG4vKipcbiAqIExvYWRzIGEgdXJsIHdpdGggcGpheCBhbmQgc2hvdyB0aGVtIGluc2lkZSB0aGUgZWxlbWVudCB0aGlzIGJpbmRlciBpcyB1c2VkIG9uXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3U3RhdGljQmluZGVyIGV4dGVuZHMgQmluZGVyPHN0cmluZywgSFRNTEFuY2hvckVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwidmlldy1zdGF0aWNcIjtcbiAgc3RhdGljIGJsb2NrID0gdHJ1ZTtcblxuICBwcml2YXRlIG5lc3RlZDogVmlldyB8IG51bGwgPSBudWxsO1xuXG4gIGFzeW5jIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBvcHRpb25zOiBhbnkpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gZWw7XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5saXN0ZW5BbGxMaW5rcyA9IGZhbHNlO1xuICAgIG9wdGlvbnMubGlzdGVuUG9wc3RhdGUgPSBmYWxzZTtcbiAgICBvcHRpb25zLnBhcnNlVGl0bGUgPSBmYWxzZTtcbiAgICBvcHRpb25zLnRyYW5zaXRpb24gPSBvcHRpb25zLnRyYW5zaXRpb24gfHwgbmV3IEhpZGVTaG93VHJhbnNpdGlvbigpO1xuICAgIG9wdGlvbnMudmlld0lkID1cbiAgICAgIG9wdGlvbnMudmlld0lkIHx8IGVsLmdldEF0dHJpYnV0ZShcImlkXCIpIHx8IGhhbmRsZWl6ZShvcHRpb25zLnVybCk7XG4gICAgb3B0aW9ucy5jb250YWluZXJTZWxlY3RvciA9IG9wdGlvbnMuY29udGFpbmVyU2VsZWN0b3IgfHwgXCJbZGF0YS1uYW1lc3BhY2VdXCI7XG4gICAgb3B0aW9ucy5jaGFuZ2VCcm93c2VyVXJsID0gZmFsc2U7XG5cbiAgICBjb25zdCBwamF4ID0gbmV3IFBqYXgob3B0aW9ucyk7XG5cbiAgICBjb25zdCB7IHJlc3BvbnNlUHJvbWlzZSB9ID0gYXdhaXQgcGpheC5sb2FkUmVzcG9uc2VDYWNoZWQoXG4gICAgICBvcHRpb25zLnVybCxcbiAgICAgIGZhbHNlLFxuICAgICAgZmFsc2VcbiAgICApO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZVByb21pc2U7XG5cbiAgICB3cmFwcGVyLnJlcGxhY2VXaXRoKHJlc3BvbnNlLmNvbnRhaW5lcik7XG5cbiAgICByZXNwb25zZS5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXG4gICAgLy8gYWRkIHRoZSBkYXRhc2V0IHRvIHRoZSBtb2RlbFxuICAgIGlmICghaXNPYmplY3QodGhpcy52aWV3Lm1vZGVscykpIHtcbiAgICAgIHRoaXMudmlldy5tb2RlbHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZXN0ZWQpIHtcbiAgICAgIHRoaXMubmVzdGVkLnVuYmluZCgpO1xuICAgIH1cbiAgICB0aGlzLm5lc3RlZCA9IG5ldyBWaWV3KFxuICAgICAgcmVzcG9uc2UuY29udGFpbmVyLFxuICAgICAgdGhpcy52aWV3Lm1vZGVscyxcbiAgICAgIHRoaXMudmlldy5vcHRpb25zXG4gICAgKTtcbiAgICB0aGlzLm5lc3RlZC5iaW5kKCk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKHRoaXMubmVzdGVkKSB7XG4gICAgICB0aGlzLm5lc3RlZC51bmJpbmQoKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCB7IFJvdXRlckxvYWRTY3JpcHRDb21wb25lbnQgfSBmcm9tIFwiLi9sb2FkLXNjcmlwdC9sb2FkLXNjcmlwdC5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFJvdXRlclZpZXdDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3L3ZpZXcuY29tcG9uZW50LmpzXCI7XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGxvYWRTY3JpcHQsIGdldFVJRCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgc3JjOiBzdHJpbmc7XG4gIGlkOiBzdHJpbmc7XG4gIGFzeW5jOiBib29sZWFuO1xuICBkZWZlcjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJvdXRlckxvYWRTY3JpcHRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInJvdXRlci1sb2FkLXNjcmlwdFwiO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IGZhbHNlO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wic3JjXCIsIFwiaWRcIiwgXCJhc3luY1wiLCBcImRlZmVyXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBzcmM6IFwiXCIsXG4gICAgaWQ6IFwiXCIsXG4gICAgYXN5bmM6IHRydWUsXG4gICAgZGVmZXI6IHRydWUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHN1cGVyLmluaXQoUm91dGVyTG9hZFNjcmlwdENvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIG9uUmVhZHkoKSB7XG4gICAgYXdhaXQgc3VwZXIub25SZWFkeSgpO1xuICAgIGlmICghdGhpcy5zY29wZS5pZCkge1xuICAgICAgdGhpcy5zY29wZS5pZCA9IGdldFVJRChcInNjcmlwdC1cIik7XG4gICAgfVxuICAgIGxvYWRTY3JpcHQodGhpcy5zY29wZS5zcmMsIHRoaXMuc2NvcGUuaWQsIHRoaXMuc2NvcGUuYXN5bmMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcInNyY1wiXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IHNjcm9sbFRvLCBzY3JvbGxUb1Bvc2l0aW9uIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiQHJpYmFqcy9oaXN0b3J5L3NyYy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgUGpheCwgUHJlZmV0Y2gsIFJvdXRlclNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvaW5kZXguanNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUm91dGVyVmlld09wdGlvbnMsXG4gIFBqYXhPcHRpb25zLFxuICBKc3hSb3V0ZXJWaWV3UHJvcHMsXG59IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuXG5pbnRlcmZhY2UgUm91dGVyVmlld1Njb3BlIGV4dGVuZHMgUm91dGVyVmlld09wdGlvbnMsIFNjb3BlQmFzZSB7fVxuXG5leHBvcnQgY2xhc3MgUm91dGVyVmlld0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwicm91dGVyLXZpZXdcIjtcbiAgcHJvdGVjdGVkIGV2ZW50cyA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZShcIm1haW5cIik7XG4gIHByb3RlY3RlZCBuZXN0ZWQ6IFZpZXcgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIHdyYXBwZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBwamF4OiBQamF4IHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBwcmVmZXRjaDogUHJlZmV0Y2ggfCBudWxsID0gbnVsbDtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiAoa2V5b2YgSnN4Um91dGVyVmlld1Byb3BzKVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJpZFwiLFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIFwiY29udGFpbmVyLXNlbGVjdG9yXCIsXG4gICAgICBcInNjcm9sbC10by10b3BcIixcbiAgICAgIFwibGlzdGVuLWFsbC1saW5rc1wiLFxuICAgICAgXCJsaXN0ZW4tcG9wc3RhdGVcIixcbiAgICAgIFwic2Nyb2xsLXRvLWFuY2hvci1oYXNoXCIsXG4gICAgICBcInNjcm9sbC10by1hbmNob3Itb2Zmc2V0XCIsXG4gICAgICBcImRhdGFzZXQtdG8tcm9vdC1zY29wZVwiLFxuICAgICAgXCJwYXJzZS10aXRsZVwiLFxuICAgICAgXCJjaGFuZ2UtYnJvd3Nlci11cmxcIixcbiAgICAgIFwicHJlZmV0Y2gtbGlua3NcIixcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBSb3V0ZXJWaWV3U2NvcGUgPSB7XG4gICAgaWQ6IFwibWFpblwiLFxuICAgIGFjdGlvbjogXCJyZXBsYWNlXCIsXG4gICAgc2Nyb2xsVG9Ub3A6IHRydWUsXG4gICAgbGlzdGVuQWxsTGlua3M6IHRydWUsXG4gICAgbGlzdGVuUG9wc3RhdGU6IHRydWUsXG4gICAgc2Nyb2xsVG9BbmNob3JIYXNoOiB0cnVlLFxuICAgIHNjcm9sbFRvQW5jaG9yT2Zmc2V0OiBSb3V0ZXJTZXJ2aWNlLm9wdGlvbnMuc2Nyb2xsVG9BbmNob3JPZmZzZXQsXG4gICAgZGF0YXNldFRvUm9vdFNjb3BlOiB0cnVlLFxuICAgIHBhcnNlVGl0bGU6IHRydWUsXG4gICAgY2hhbmdlQnJvd3NlclVybDogdHJ1ZSxcbiAgICBwcmVmZXRjaExpbmtzOiB0cnVlLFxuICAgIHRyYW5zaXRpb246IFJvdXRlclNlcnZpY2Uub3B0aW9ucy5kZWZhdWx0VHJhbnNpdGlvbixcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KFJvdXRlclZpZXdDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uUGFnZVJlYWR5LCB0aGlzKTtcbiAgICB0aGlzLmV2ZW50cy5vbihcImluaXRTdGF0ZUNoYW5nZVwiLCB0aGlzLm9uVHJhbnNpdGlvbkluaXQsIHRoaXMpO1xuICAgIHRoaXMuZXZlbnRzLm9uKFwidHJhbnNpdGlvbkNvbXBsZXRlZFwiLCB0aGlzLm9uVHJhbnNpdGlvbkNvbXBsZXRlZCwgdGhpcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5ldmVudHMub2ZmKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMub25QYWdlUmVhZHksIHRoaXMpO1xuICAgIHRoaXMuZXZlbnRzLm9mZihcImluaXRTdGF0ZUNoYW5nZVwiLCB0aGlzLm9uVHJhbnNpdGlvbkluaXQsIHRoaXMpO1xuICAgIHRoaXMuZXZlbnRzLm9mZihcInRyYW5zaXRpb25Db21wbGV0ZWRcIiwgdGhpcy5vblRyYW5zaXRpb25Db21wbGV0ZWQsIHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldENvbnRhaW5lclNlbGVjdG9yKCkge1xuICAgIGlmICh0aGlzLnNjb3BlLmlkID09PSBcIm1haW5cIikge1xuICAgICAgcmV0dXJuIGAke1JvdXRlclZpZXdDb21wb25lbnQudGFnTmFtZX0gPiAqOmZpcnN0LWNoaWxkYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke1JvdXRlclZpZXdDb21wb25lbnQudGFnTmFtZX0jJHt0aGlzLnNjb3BlLmlkfSA+ICo6Zmlyc3QtY2hpbGRgO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0QW5kU3RhcnRQamF4KCkge1xuICAgIGlmICghdGhpcy5zY29wZS5pZCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIklkIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCFcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGpheE9wdGlvbnM6IFBqYXhPcHRpb25zID0ge1xuICAgICAgaWQ6IHRoaXMuc2NvcGUuaWQsXG4gICAgICBhY3Rpb246IHRoaXMuc2NvcGUuYWN0aW9uLFxuICAgICAgd3JhcHBlcjogdGhpcyxcbiAgICAgIGNvbnRhaW5lclNlbGVjdG9yOiB0aGlzLmdldENvbnRhaW5lclNlbGVjdG9yKCksXG4gICAgICBsaXN0ZW5BbGxMaW5rczogISF0aGlzLnNjb3BlLmxpc3RlbkFsbExpbmtzLFxuICAgICAgbGlzdGVuUG9wc3RhdGU6ICEhdGhpcy5zY29wZS5saXN0ZW5Qb3BzdGF0ZSxcbiAgICAgIHRyYW5zaXRpb246IHRoaXMuc2NvcGUudHJhbnNpdGlvbixcbiAgICAgIHBhcnNlVGl0bGU6ICEhdGhpcy5zY29wZS5wYXJzZVRpdGxlLFxuICAgICAgY2hhbmdlQnJvd3NlclVybDogISF0aGlzLnNjb3BlLmNoYW5nZUJyb3dzZXJVcmwsXG4gICAgICBwcmVmZXRjaExpbmtzOiAhIXRoaXMuc2NvcGUucHJlZmV0Y2hMaW5rcyxcbiAgICAgIHNjcm9sbFRvVG9wOiAhIXRoaXMuc2NvcGUuc2Nyb2xsVG9Ub3AsXG4gICAgfTtcbiAgICB0aGlzLnBqYXggPSBuZXcgUGpheChwamF4T3B0aW9ucyk7XG4gICAgdGhpcy5wamF4LnNldEFjdGl2ZVdyYXBwZXIodGhpcyk7XG4gICAgdGhpcy5wcmVmZXRjaCA9IG5ldyBQcmVmZXRjaCh0aGlzLnNjb3BlLmlkKTtcbiAgICB0aGlzLnByZWZldGNoLmluaXQocGpheE9wdGlvbnMucHJlZmV0Y2hMaW5rcyk7XG4gICAgdGhpcy5wamF4LnN0YXJ0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25QYWdlUmVhZHkoXG4gICAgdmlld0lkOiBzdHJpbmcsXG4gICAgY3VycmVudFN0YXR1czogU3RhdGUsXG4gICAgcHJldlN0YXR1czogU3RhdGUsXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBuZXdQYWdlUmF3SFRNTDogc3RyaW5nLFxuICAgIGRhdGFzZXQ6IGFueSxcbiAgICBpc0luaXQ6IGJvb2xlYW5cbiAgKSB7XG4gICAgLy8gT25seSBjb250aW51ZSBpZiB0aGUgdmlld0lEIGlzIGVxdWFsIChpbiB0aGlzIHdheSBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIG11bHRpcGxlIHZpZXdzKVxuICAgIGlmICh2aWV3SWQgIT09IHRoaXMuc2NvcGUuaWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIm5vdCB0aGUgcmlnaHQgdmlld1wiLCB0aGlzLnNjb3BlLmlkLCB2aWV3SWQsIGRhdGFzZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZGVidWcoXCJOZXcgcGFnZSByZWFkeSFcIiwgdGhpcy5pbm5lckhUTUwpO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUuZGF0YXNldFRvUm9vdFNjb3BlKSB7XG4gICAgICBpZiAoIXRoaXMuc2NvcGUuJHJvb3QpIHtcbiAgICAgICAgdGhpcy5zY29wZS4kcm9vdCA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5zY29wZS4kcm9vdC5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgcmVzdCBvbiBmaXJzdCBwYWdlIHJlcXVlc3RzXG4gICAgaWYgKGlzSW5pdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudmlldyA9IHRoaXMuZ2V0VmlldygpO1xuXG4gICAgaWYgKCF0aGlzLnZpZXcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlZpZXcgaXN0IG5vdCByZWFkeSFcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy52aWV3LmJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBvblRyYW5zaXRpb25Jbml0KHZpZXdJZDogc3RyaW5nKSB7XG4gICAgaWYgKHZpZXdJZCAhPT0gdGhpcy5zY29wZS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFRyYW5zaXRpb25DbGFzcyhcImluaXRcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgb25UcmFuc2l0aW9uQ29tcGxldGVkKHZpZXdJZDogc3RyaW5nKSB7XG4gICAgLy8gT25seSB0byBhbnl0aGluZyBpZiB0aGUgdmlld0lEIGlzIGVxdWFsIChpbiB0aGlzIHdheSBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIG11bHRpcGxlIHZpZXdzKVxuICAgIGlmICh2aWV3SWQgIT09IHRoaXMuc2NvcGUuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFRyYW5zaXRpb25DbGFzcyhcImNvbXBsZXRlXCIpO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUuc2Nyb2xsVG9BbmNob3JIYXNoKSB7XG4gICAgICBsZXQgc2Nyb2xsVG9FbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtcbiAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgIHNjcm9sbFRvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKVxuICAgICAgICApO1xuICAgICAgICAvLyBTY3JvbGwgdG8gQW5jaG9yIG9mIGhhc2hcbiAgICAgICAgaWYgKHNjcm9sbFRvRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBzY3JvbGxUbyhcbiAgICAgICAgICAgIHNjcm9sbFRvRWxlbWVudCxcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuc2Nyb2xsVG9BbmNob3JPZmZzZXQsXG4gICAgICAgICAgICB3aW5kb3dcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2NvcGUuc2Nyb2xsVG9Ub3ApIHtcbiAgICAgIHJldHVybiBhd2FpdCBzY3JvbGxUb1Bvc2l0aW9uKHdpbmRvdywgXCJzdGFydFwiLCBcInZlcnRpY2FsXCIsIFwic21vb3RoXCIpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRUcmFuc2l0aW9uQ2xhc3Moc3RhdGU6IFwiaW5pdFwiIHwgXCJjb21wbGV0ZVwiKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwidHJhbnNpdGlvbi1pbml0XCIpO1xuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcInRyYW5zaXRpb24tY29tcGxldGVcIik7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGB0cmFuc2l0aW9uLSR7c3RhdGV9YCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgICBzd2l0Y2ggKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgIGNhc2UgXCJpZFwiOlxuICAgICAgICB0aGlzLmV2ZW50cyA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSh0aGlzLnNjb3BlLmlkKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmJlZm9yZUJpbmQoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5pbml0QW5kU3RhcnRQamF4KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsIi8qKlxuICogQ2xhc3MgYXBwZW5kIHRvIGxpbmtzIHdoaWNoIGhhdmUgY2F1c2VkIGFuIGVycm9yXG4gKi9cbmV4cG9ydCBjb25zdCBST1VURV9FUlJPUl9DTEFTUyA9IFwicm91dGVyLWVycm9yXCI7XG4vKipcbiAqIENsYXNzIG5hbWUgdXNlZCB0byBpZ25vcmUgbGlua3NcbiAqL1xuZXhwb3J0IGNvbnN0IElHTk9SRV9DTEFTU19MSU5LID0gXCJuby1iYXJiYVwiO1xuLyoqXG4gKiBDbGFzcyBuYW1lIHVzZWQgdG8gaWdub3JlIHByZWZldGNoIG9uIGxpbmtzXG4gKi9cbmV4cG9ydCBjb25zdCBJR05PUkVfQ0xBU1NfUFJFRkVUQ0ggPSBcIm5vLWJhcmJhLXByZWZldGNoXCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiQHJpYmFqcy9oaXN0b3J5L3NyYy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaW5kZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JvdXRlci5tb2R1bGUuanNcIjtcbiIsImltcG9ydCB7IFJpYmFNb2R1bGUgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgKiBhcyBiaW5kZXJzIGZyb20gXCIuL2JpbmRlcnMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSBcIi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgc2VydmljZXMgZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IFJvdXRlck1vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY29uc3Qgcm91dGVyTW9kdWxlOiBSaWJhTW9kdWxlPFBhcnRpYWw8Um91dGVyTW9kdWxlT3B0aW9ucz4+ID0ge1xuICBiaW5kZXJzLFxuICBjb21wb25lbnRzLFxuICBzZXJ2aWNlcyxcbiAgZm9ybWF0dGVyczoge30sXG4gIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gICAgc2VydmljZXMuUm91dGVyU2VydmljZS5zZXRTaW5nbGV0b24ob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vdHlwZXMvcmVzcG9uc2UuanNcIjtcblxuLyoqXG4gKiBPYmplY3QgdGhhdCBpcyBnb2luZyB0byBkZWFsIHdpdGggRE9NIHBhcnNpbmcvbWFuaXB1bGF0aW9uXG4gKiBUT0RPIG1vdmUgdG8gQHJpYmFqcy9jb3JlIGRvbSB1dGlsc1xuICovXG5jbGFzcyBEb20ge1xuICBwdWJsaWMgc3RhdGljIGdldFByZWZldGNoTGlua0VsZW1lbnRzKGNvbnRlbnQ6IERvY3VtZW50RnJhZ21lbnQgfCBEb2N1bWVudCkge1xuICAgIC8vIHJvdXRlci1wcmVsb2FkIGlzIGEgY3VzdG9tIHByZWxvYWRlclxuICAgIHJldHVybiBjb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAnbGlua1tocmVmXVtyZWw9XCJkbnMtcHJlZmV0Y2hcIl0sIGxpbmtbaHJlZl1bcmVsPVwicHJlY29ubmVjdFwiXSwgbGlua1tocmVmXVtyZWw9XCJwcmVmZXRjaFwiXSwgbGlua1tocmVmXVtyZWw9XCJzdWJyZXNvdXJjZVwiXSwgbGlua1tocmVmXVtyZWw9XCJwcmVsb2FkXCJdLCBsaW5rW2hyZWZdW3JlbD1cInJvdXRlci1wcmVsb2FkXCJdJ1xuICAgICkgYXMgTm9kZUxpc3RPZjxIVE1MTGlua0VsZW1lbnQ+O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZVRpdGxlKGNvbnRlbnQ6IERvY3VtZW50RnJhZ21lbnQgfCBEb2N1bWVudCkge1xuICAgIGxldCB0aXRsZSA9IFwiXCI7XG4gICAgLy8gdGl0bGUgPSBEb20uZmluZEhUTUxUYWdDb250ZW50KCd0aXRsZScsIHRlbXBsYXRlLmlubmVySFRNTCkgfHwgJyc7XG4gICAgY29uc3QgdGl0bGVFbGVtZW50ID0gY29udGVudC5xdWVyeVNlbGVjdG9yKFwidGl0bGVcIik7XG4gICAgaWYgKHRpdGxlRWxlbWVudCAmJiB0aXRsZUVsZW1lbnQuaW5uZXJUZXh0KSB7XG4gICAgICB0aXRsZSA9IHRpdGxlRWxlbWVudC5pbm5lclRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0aXRsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVzcG9uc2VUZXh0IG9idGFpbmVkIGZyb20gdGhlIGZldGNoIGNhbGxcbiAgICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDEwMzgxOTcvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwYXJzZVJlc3BvbnNlKFxuICAgIHJlc3BvbnNlVGV4dDogc3RyaW5nLFxuICAgIHBhcnNlVGl0bGU6IGJvb2xlYW4sXG4gICAgY29udGFpbmVyU2VsZWN0b3I6IHN0cmluZyxcbiAgICBwcmVmZXRjaExpbmtzID0gdHJ1ZVxuICApOiBSZXNwb25zZSB7XG4gICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICBsZXQgcHJlZmV0Y2hMaW5rRWxlbWVudHM6XG4gICAgICB8IE5vZGVMaXN0T2Y8SFRNTExpbmtFbGVtZW50PlxuICAgICAgfCBBcnJheTxIVE1MTGlua0VsZW1lbnQ+ID0gW107XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIikgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSByZXNwb25zZVRleHQ7XG5cbiAgICBpZiAocGFyc2VUaXRsZSkge1xuICAgICAgdGl0bGUgPSB0aGlzLnBhcnNlVGl0bGUodGVtcGxhdGUuY29udGVudCk7XG4gICAgfVxuXG4gICAgaWYgKHByZWZldGNoTGlua3MpIHtcbiAgICAgIHByZWZldGNoTGlua0VsZW1lbnRzID0gdGhpcy5nZXRQcmVmZXRjaExpbmtFbGVtZW50cyh0ZW1wbGF0ZS5jb250ZW50KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmdldENvbnRhaW5lcih0ZW1wbGF0ZSwgY29udGFpbmVyU2VsZWN0b3IpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHRpdGxlLFxuICAgICAgcHJlZmV0Y2hMaW5rczogcHJlZmV0Y2hMaW5rRWxlbWVudHMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2Qgb25seSBvbiB0aGUgZmlyc3QgcGFnZSBsb2FkXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHBhcnNlSW5pdGlhbChcbiAgICBwYXJzZVRpdGxlOiBib29sZWFuLFxuICAgIGNvbnRhaW5lclNlbGVjdG9yOiBzdHJpbmcsXG4gICAgcHJlZmV0Y2hMaW5rcyA9IHRydWVcbiAgKSB7XG4gICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICBsZXQgcHJlZmV0Y2hMaW5rRWxlbWVudHM6XG4gICAgICB8IE5vZGVMaXN0T2Y8SFRNTExpbmtFbGVtZW50PlxuICAgICAgfCBBcnJheTxIVE1MTGlua0VsZW1lbnQ+ID0gW107XG5cbiAgICAvLyBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICAgIC8vIHRlbXBsYXRlLmlubmVySFRNTCA9IGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MO1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5nZXRDb250YWluZXIoZG9jdW1lbnQsIGNvbnRhaW5lclNlbGVjdG9yKTtcblxuICAgIGlmIChwYXJzZVRpdGxlKSB7XG4gICAgICB0aXRsZSA9IHRoaXMucGFyc2VUaXRsZShkb2N1bWVudCk7XG4gICAgfVxuXG4gICAgaWYgKHByZWZldGNoTGlua3MpIHtcbiAgICAgIHByZWZldGNoTGlua0VsZW1lbnRzID0gdGhpcy5nZXRQcmVmZXRjaExpbmtFbGVtZW50cyhkb2N1bWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgdGl0bGUsXG4gICAgICBwcmVmZXRjaExpbmtzOiBwcmVmZXRjaExpbmtFbGVtZW50cyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY29udGFpbmVyIG9uIHRoZSBjdXJyZW50IERPTSxcbiAgICogb3IgZnJvbSBhbiBFbGVtZW50IHBhc3NlZCB2aWEgYXJndW1lbnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q29udGFpbmVyKFxuICAgIGVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQgfCBIVE1MRWxlbWVudCB8IERvY3VtZW50LFxuICAgIGNvbnRhaW5lclNlbGVjdG9yOiBzdHJpbmdcbiAgKTogSFRNTEVsZW1lbnQge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkJhcmJhLmpzOiBbZ2V0Q29udGFpbmVyXSBObyBlbGVtZW50IHRvIGdldCBjb250YWluZXIgZnJvbSwgbWF5YmUgdGhlIERPTSBpcyBub3QgcmVhZHkhXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5wYXJzZUNvbnRhaW5lcihlbGVtZW50LCBjb250YWluZXJTZWxlY3Rvcik7XG5cbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW0RPTV0gTm8gY29udGFpbmVyIGZvdW5kXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXROYW1lc3BhY2UoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmRhdGFzZXQgJiYgZWxlbWVudC5kYXRhc2V0Lm5hbWVzcGFjZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZGF0YXNldC5uYW1lc3BhY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdXQgdGhlIGNvbnRhaW5lciBvbiB0aGUgcGFnZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwdXRDb250YWluZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIHdyYXBwZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb250YWluZXIgc2VsZWN0b3JcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgcGFyc2VDb250YWluZXIoXG4gICAgbmV3UGFnZTogSFRNTFRlbXBsYXRlRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQsXG4gICAgY29udGFpbmVyU2VsZWN0b3I6IHN0cmluZ1xuICApOiBIVE1MRWxlbWVudCB7XG4gICAgaWYgKCFuZXdQYWdlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIk5ldyBwYWdlIG5vdCBsb2FkZWQhXCIpO1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvciwgbmV3UGFnZSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0OiBIVE1MRWxlbWVudCB8IG51bGw7XG5cbiAgICBpZiAoKG5ld1BhZ2UgYXMgSFRNTFRlbXBsYXRlRWxlbWVudCkuY29udGVudCkge1xuICAgICAgcmVzdWx0ID0gKG5ld1BhZ2UgYXMgSFRNTFRlbXBsYXRlRWxlbWVudCkuY29udGVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBjb250YWluZXJTZWxlY3RvclxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gbmV3UGFnZS5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGBObyBjb250YWluZXIgd2l0aCBzZWxlY3RvciBcIiR7Y29udGFpbmVyU2VsZWN0b3J9XCIgZm91bmQhYFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IsIG5ld1BhZ2UpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5leHBvcnQgeyBEb20gfTtcbiIsImltcG9ydCB7IFBqYXggfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21FdmVudCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVVybCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy91cmxcIjtcbmltcG9ydCB7IElHTk9SRV9DTEFTU19QUkVGRVRDSCwgUk9VVEVfRVJST1JfQ0xBU1MgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlZmV0Y2hJbnN0YW5jZXMge1xuICBba2V5OiBzdHJpbmddOiBQcmVmZXRjaDtcbn1cblxuLyoqXG4gKiBQcmVmZXRjaFxuICovXG5jbGFzcyBQcmVmZXRjaCB7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoaWQgPSBcIm1haW5cIik6IFByZWZldGNoIHtcbiAgICBjb25zdCByZXN1bHQgPSBQcmVmZXRjaC5pbnN0YW5jZXNbaWRdO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlczogUHJlZmV0Y2hJbnN0YW5jZXMgPSB7fTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgUHJlZmV0Y2guXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSB2aWV3SWQ6IHN0cmluZykge1xuICAgIHRoaXMudmlld0lkID0gdmlld0lkO1xuICAgIGlmIChQcmVmZXRjaC5pbnN0YW5jZXNbdGhpcy52aWV3SWRdKSB7XG4gICAgICByZXR1cm4gUHJlZmV0Y2guaW5zdGFuY2VzW3RoaXMudmlld0lkXTtcbiAgICB9XG4gICAgUHJlZmV0Y2guaW5zdGFuY2VzW3RoaXMudmlld0lkXSA9IHRoaXM7XG4gICAgdGhpcy5vbkxpbmtFbnRlckludGVybiA9IHRoaXMub25MaW5rRW50ZXJJbnRlcm4uYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0IHRoZSBldmVudCBsaXN0ZW5lciBvbiBtb3VzZW92ZXIgYW5kIHRvdWNoc3RhcnQgZm9yIGFsbCBsaW5rcyBvbiB0aGUgZG9jdW1lbnRcbiAgICogZm9yIHRoZSBwcmVmZXRjaFxuICAgKlxuICAgKi9cbiAgcHVibGljIGluaXQoYXV0b2JpbmRMaW5rcyA9IGZhbHNlKSB7XG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGF1dG9iaW5kTGlua3MpIHtcbiAgICAgIHRoaXMuZGVJbml0KCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5vbkxpbmtFbnRlckludGVybiwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25MaW5rRW50ZXJJbnRlcm4sIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZUluaXQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIHRoaXMub25MaW5rRW50ZXJJbnRlcm4pO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vbkxpbmtFbnRlckludGVybik7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCBmcm9tIHRoZSBydi1yb3V0ZSBiaW5kZXJcbiAgICogQHBhcmFtIGVsXG4gICAqL1xuICBwdWJsaWMgaW5pdEJpbmRlcihlbDogSFRNTEFuY2hvckVsZW1lbnQsIHVybDogc3RyaW5nKSB7XG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5kZUluaXRCaW5kZXIoZWwsIHVybCk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCB0aGlzLm9uTGlua0VudGVyLmJpbmQodGhpcywgdXJsLCBlbCksIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vbkxpbmtFbnRlci5iaW5kKHRoaXMsIHVybCwgZWwpLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGRlSW5pdEJpbmRlcihlbDogSFRNTEFuY2hvckVsZW1lbnQsIHVybDogc3RyaW5nKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCB0aGlzLm9uTGlua0VudGVyLmJpbmQodGhpcywgdXJsLCBlbCkpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25MaW5rRW50ZXIuYmluZCh0aGlzLCB1cmwsIGVsKSk7XG4gIH1cblxuICBwdWJsaWMgb25MaW5rRW50ZXIoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgZWw6IEhUTUxBbmNob3JFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50LFxuICAgIGV2dDogRXZlbnRcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgZWwuY2xhc3NMaXN0ICYmXG4gICAgICAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKElHTk9SRV9DTEFTU19QUkVGRVRDSCkgfHxcbiAgICAgICAgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFJPVVRFX0VSUk9SX0NMQVNTKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cmwgPSBub3JtYWxpemVVcmwodXJsKS51cmw7XG5cbiAgICBjb25zdCBwcmV2ZW50Q2hlY2sgPSBQamF4LnByZXZlbnRDaGVjayh1cmwsIGVsLCBldnQpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGxpbmsgaXMgZWxpZ2libGUgZm9yIFBqYXhcbiAgICBpZiAodXJsICYmIHByZXZlbnRDaGVjaykge1xuICAgICAgY29uc3QgcGpheCA9IFBqYXguZ2V0SW5zdGFuY2UodGhpcy52aWV3SWQpO1xuICAgICAgaWYgKHBqYXgpIHtcbiAgICAgICAgcGpheC5sb2FkUmVzcG9uc2VDYWNoZWQodXJsLCBmYWxzZSwgZmFsc2UpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoUk9VVEVfRVJST1JfQ0xBU1MpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IodXJsKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtQcmVmZXRjaC5vbkxpbmtFbnRlcl0gTm8gcGpheCBpbnN0YW5jZSBmb3Igdmlld0lkIFwiJHt0aGlzLnZpZXdJZH1cIiBmb3VuZCFgXG4gICAgICAgICk7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoUk9VVEVfRVJST1JfQ0xBU1MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cmwodXJsOiBzdHJpbmcpIHtcbiAgICB1cmwgPSBub3JtYWxpemVVcmwodXJsKS51cmw7XG5cbiAgICBjb25zdCBwcmV2ZW50Q2hlY2sgPSBQamF4LnByZXZlbnRDaGVjayh1cmwpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGxpbmsgaXMgZWxpZ2libGUgZm9yIFBqYXhcbiAgICBpZiAodXJsICYmIHByZXZlbnRDaGVjaykge1xuICAgICAgY29uc3QgcGpheCA9IFBqYXguZ2V0SW5zdGFuY2UodGhpcy52aWV3SWQpO1xuICAgICAgaWYgKHBqYXgpIHtcbiAgICAgICAgcGpheC5sb2FkUmVzcG9uc2VDYWNoZWQodXJsLCBmYWxzZSwgZmFsc2UpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1ByZWZldGNoLnVybF0gTm8gcGpheCBpbnN0YW5jZSBmb3Igdmlld0lkIFwiJHt0aGlzLnZpZXdJZH1cIiBmb3VuZCFgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB0aGUgbW91c2VvdmVyL3RvdWNoc3RhcnQsIHBsZWFzZSB1c2UgdGhlIHJ2LXJvdXRlIGJpbmRlciBpbnN0ZWFkXG4gICAqXG4gICAqL1xuICBwcm90ZWN0ZWQgb25MaW5rRW50ZXJJbnRlcm4oZXZ0OiBFdmVudCkge1xuICAgIGxldCBlbCA9IGdldEVsZW1lbnRGcm9tRXZlbnQoZXZ0KTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUTUwgRWxlbWVudCBub3Qgc2V0XCIpO1xuICAgIH1cblxuICAgIHdoaWxlIChlbCAmJiAhUGpheC5nZXRIcmVmKGVsKSkge1xuICAgICAgZWwgPSBlbC5wYXJlbnROb2RlIGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgIH1cblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwubm9kZU5hbWUgIT09IFwiQVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IFBqYXguZ2V0SHJlZihlbCk7XG5cbiAgICAvLyBBbHJlYWR5IG1hbmFnZWQgYnkgdGhlIHJ2LXJvdXRlIGJpbmRlclxuICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJyb3V0ZVwiKSB8fCBlbC5oYXNBdHRyaWJ1dGUoXCJydi1yb3V0ZVwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaHJlZikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgVXJsIGlzIG5vdCBkZWZpbmVkLCB5b3UgY2FuJ3QgY2FjaGUgdGhlIGxpbmsgd2l0aG91dCB0aGUgdXJsLiBQbGVhc2UgbWFrZSBzdXJlIHlvdXIgZWxlbWVudCBoYXMgdGhlIGhyZWYgYXR0cmlidXRlIG9yIHBhc3MgdGhlIHVybCBkaXJlY3RseSB0byB0aGlzIGZ1bmN0aW9uLmAsXG4gICAgICAgIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9uTGlua0VudGVyKGhyZWYsIGVsLCBldnQpO1xuICB9XG59XG5cbmV4cG9ydCB7IFByZWZldGNoIH07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9Eb20uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1ByZWZldGNoLmpzXCI7XG5cbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIEh0dHBTZXJ2aWNlT3B0aW9ucyB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7XG4gIGNsZWFuTGluayxcbiAgZ2V0UG9ydCxcbiAgbm9ybWFsaXplVXJsLFxuICBnZXRVcmwsXG4gIGlzQm9vbGVhbixcbiAgZ2V0RWxlbWVudEZyb21FdmVudCxcbiAgZ2V0RGF0YXNldCxcbiAgc2Nyb2xsVG8sXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG5pbXBvcnQgeyBCYXNlQ2FjaGUgfSBmcm9tIFwiQHJpYmFqcy9jYWNoZVwiO1xuaW1wb3J0IHsgSGlkZVNob3dUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL1RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCB7IFRyYW5zaXRpb24sIFJlc3BvbnNlLCBQamF4T3B0aW9ucyB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgRG9tIH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5pbXBvcnQgeyBIaXN0b3J5TWFuYWdlciB9IGZyb20gXCJAcmliYWpzL2hpc3Rvcnkvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBST1VURV9FUlJPUl9DTEFTUywgSUdOT1JFX0NMQVNTX0xJTksgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBSb3V0ZXJTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGpheEluc3RhbmNlcyB7XG4gIFtrZXk6IHN0cmluZ106IFBqYXg7XG59XG5cbi8qKlxuICogUGpheCBpcyBhIHN0YXRpYyBvYmplY3Qgd2l0aCBtYWluIGZ1bmN0aW9uXG4gKlxuICogQGJvcnJvd3MgRG9tIGFzIERvbVxuICovXG5jbGFzcyBQamF4IHtcbiAgcHVibGljIHN0YXRpYyBjYWNoZSA9IG5ldyBCYXNlQ2FjaGU8UHJvbWlzZTxSZXNwb25zZT4+KCk7XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShpZCA9IFwibWFpblwiKTogUGpheCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gUGpheC5pbnN0YW5jZXNbaWRdO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbUGpheC5nZXRJbnN0YW5jZV0gTm8gcGpheCBpbnN0YW5jZSBmb3Igdmlld0lkIFwiJHtpZH1cIiBmb3VuZCFgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGUgbGluayBzaG91bGQgYmUgZm9sbG93ZWRcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgcHJldmVudENoZWNrVXJsKGhyZWY6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBmYWtlIGh0bWwgZWxlbWVudFxuICAgICAqL1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImhyZWZcIiwgaHJlZik7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWhyZWYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJbiBjYXNlIHlvdSdyZSB0cnlpbmcgdG8gbG9hZCB0aGUgc2FtZSBwYWdlXG4gICAgaWYgKGNsZWFuTGluayhocmVmKSA9PT0gY2xlYW5MaW5rKGxvY2F0aW9uLmhyZWYpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgaXQncyB0aGUgc2FtZSBkb21haW5cbiAgICBpZiAoXG4gICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IChlbGVtZW50IGFzIEhUTUxBbmNob3JFbGVtZW50KS5wcm90b2NvbCB8fFxuICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICE9PSAoZWxlbWVudCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaG9zdG5hbWVcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcG9ydCBpcyB0aGUgc2FtZVxuICAgIGlmIChnZXRQb3J0KCkgIT09IGdldFBvcnQoKGVsZW1lbnQgYXMgSFRNTEFuY2hvckVsZW1lbnQpLnBvcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBsaW5rIHNob3VsZCBiZSBmb2xsb3dlZFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcmV2ZW50Q2hlY2soXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgZWxlbWVudD86IEhUTUxBbmNob3JFbGVtZW50IHwgSFRNTExpbmtFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50LFxuICAgIGV2dD86IEV2ZW50XG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByZXZlbnRDaGVja1VybCh1cmwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGV2dCkge1xuICAgICAgLy8gTWlkZGxlIGNsaWNrLCBjbWQgY2xpY2ssIGN0cmwgY2xpY2sgb3IgcHJlZmV0Y2ggbG9hZCBldmVudFxuICAgICAgaWYgKFxuICAgICAgICAoZXZ0ICYmIChldnQgYXMgYW55KS53aGljaCAmJiAoZXZ0IGFzIGFueSkud2hpY2ggPiAxKSB8fFxuICAgICAgICAoZXZ0IGFzIGFueSkubWV0YUtleSB8fFxuICAgICAgICAoZXZ0IGFzIGFueSkuY3RybEtleSB8fFxuICAgICAgICAoZXZ0IGFzIGFueSkuc2hpZnRLZXkgfHxcbiAgICAgICAgKGV2dCBhcyBhbnkpLmFsdEtleVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgLy8gSWdub3JlIHRhcmdldCB3aXRoIF9ibGFuayB0YXJnZXRcbiAgICAgIGlmIChcbiAgICAgICAgKGVsZW1lbnQgYXMgSFRNTEFuY2hvckVsZW1lbnQpLnRhcmdldCAmJlxuICAgICAgICAoZWxlbWVudCBhcyBIVE1MQW5jaG9yRWxlbWVudCkudGFyZ2V0ID09PSBcIl9ibGFua1wiXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZ25vcmUgY2FzZSB3aGVyZSB0aGVyZSBpcyBkb3dubG9hZCBhdHRyaWJ1dGVcbiAgICAgIGlmIChcbiAgICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUgJiZcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIikgPT09IFwic3RyaW5nXCJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhJR05PUkVfQ0xBU1NfTElOSykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgLmhyZWYgcGFyYW1ldGVyIG91dCBvZiBhbiBlbGVtZW50XG4gICAqIGFuZCBoYW5kbGUgc3BlY2lhbCBjYXNlcyAobGlrZSB4bGluazpocmVmKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRIcmVmKFxuICAgIGVsOiBIVE1MQW5jaG9yRWxlbWVudCB8IFNWR0FFbGVtZW50IHwgSFRNTExpbmtFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50XG4gICk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoZWwuZ2V0QXR0cmlidXRlICYmIHR5cGVvZiBlbC5nZXRBdHRyaWJ1dGUoXCJ4bGluazpocmVmXCIpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwieGxpbms6aHJlZlwiKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIChlbCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaHJlZiA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgKGVsLmhhc0F0dHJpYnV0ZSAmJiBlbC5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpKVxuICAgICkge1xuICAgICAgY29uc3QgaHJlZiA9IChlbCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaHJlZiB8fCBlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgaWYgKCFocmVmKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJocmVmIGF0dHJpYnV0ZSBub3QgZm91bmQgZm9yIGVsZW1lbnQ6IFwiLCBlbCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhyZWYgYXR0cmlidXRlIG5vdCBmb3VuZCFcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2VzOiBQamF4SW5zdGFuY2VzID0ge307XG5cbiAgcHVibGljIGhpc3RvcnkgPSBuZXcgSGlzdG9yeU1hbmFnZXIoKTtcblxuICAvKipcbiAgICogSW5kaWNhdGUgd2V0aGVyIG9yIG5vdCB1c2UgdGhlIGNhY2hlXG4gICAqL1xuICBwdWJsaWMgY2FjaGVFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogSW5kaWNhdGUgaWYgdGhlcmUgaXMgYW4gYW5pbWF0aW9uIGluIHByb2dyZXNzXG4gICAqL1xuICBwdWJsaWMgdHJhbnNpdGlvblByb2dyZXNzID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIGxpc3RlbkFsbExpbmtzOiBib29sZWFuO1xuXG4gIHByb3RlY3RlZCBsaXN0ZW5Qb3BzdGF0ZTogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgcGFyc2VUaXRsZTogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgY2hhbmdlQnJvd3NlclVybDogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgZGlzcGF0Y2hlcjogRXZlbnREaXNwYXRjaGVyO1xuXG4gIHByb3RlY3RlZCB0cmFuc2l0aW9uPzogVHJhbnNpdGlvbjtcblxuICBwcm90ZWN0ZWQgd3JhcHBlcj86IEhUTUxFbGVtZW50O1xuXG4gIHByb3RlY3RlZCB2aWV3SWQgPSBcIm1haW5cIjtcblxuICBwcm90ZWN0ZWQgY29udGFpbmVyU2VsZWN0b3I6IHN0cmluZztcblxuICAvKipcbiAgICogRmluZHMgZWxlbWVudHMgaW4gdGhlIGhlYWQgbGlrZSA8bGluayByZWw9XCJwcmVsb2FkXCIgaHJlZj1cIi4uLlwiIGFzPVwiZmV0Y2hcIj4gYWRkIHRoZW0gdG8gdGhlIG5ldyBoZWFkIChhbmQgcmVtb3ZlcyB0aGUgb2xkKVxuICAgKi9cbiAgcHJvdGVjdGVkIHByZWZldGNoTGlua3M6IGJvb2xlYW47XG5cbiAgcHJvdGVjdGVkIHNjcm9sbFRvQW5jaG9yT2Zmc2V0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIFBqYXguXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaWQsXG4gICAgYWN0aW9uID0gXCJyZXBsYWNlXCIsXG4gICAgd3JhcHBlcixcbiAgICBjb250YWluZXJTZWxlY3RvciA9IFwiW2RhdGEtbmFtZXNwYWNlXVwiLFxuICAgIGxpc3RlbkFsbExpbmtzID0gZmFsc2UsXG4gICAgbGlzdGVuUG9wc3RhdGUgPSB0cnVlLFxuICAgIHBhcnNlVGl0bGUgPSB0cnVlLFxuICAgIGNoYW5nZUJyb3dzZXJVcmwgPSB0cnVlLFxuICAgIHByZWZldGNoTGlua3MgPSB0cnVlLFxuICAgIHNjcm9sbFRvVG9wID0gdHJ1ZSxcbiAgICBzY3JvbGxUb0FuY2hvck9mZnNldCA9IFJvdXRlclNlcnZpY2Uub3B0aW9ucy5zY3JvbGxUb0FuY2hvck9mZnNldCxcbiAgfTogUGpheE9wdGlvbnMpIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRoaXMudmlld0lkID0gaWQ7XG4gICAgfVxuXG4gICAgbGV0IGluc3RhbmNlID0gdGhpcyBhcyBQamF4O1xuXG4gICAgdGhpcy5zY3JvbGxUb0FuY2hvck9mZnNldCA9IHNjcm9sbFRvQW5jaG9yT2Zmc2V0IHx8IDA7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIgPSBuZXcgRXZlbnREaXNwYXRjaGVyKHRoaXMudmlld0lkKTtcblxuICAgIHRoaXMubGlzdGVuQWxsTGlua3MgPSBsaXN0ZW5BbGxMaW5rcztcbiAgICB0aGlzLmxpc3RlblBvcHN0YXRlID0gbGlzdGVuUG9wc3RhdGU7XG4gICAgdGhpcy5wYXJzZVRpdGxlID0gcGFyc2VUaXRsZTtcbiAgICB0aGlzLmNoYW5nZUJyb3dzZXJVcmwgPSBjaGFuZ2VCcm93c2VyVXJsO1xuICAgIHRoaXMuY29udGFpbmVyU2VsZWN0b3IgPSBjb250YWluZXJTZWxlY3RvcjtcbiAgICB0aGlzLnByZWZldGNoTGlua3MgPSBwcmVmZXRjaExpbmtzO1xuXG4gICAgaWYgKFBqYXguaW5zdGFuY2VzW3RoaXMudmlld0lkXSkge1xuICAgICAgaW5zdGFuY2UgPSBQamF4Lmluc3RhbmNlc1t0aGlzLnZpZXdJZF07XG4gICAgfVxuXG4gICAgaW5zdGFuY2UudHJhbnNpdGlvbiA9XG4gICAgICBpbnN0YW5jZS50cmFuc2l0aW9uIHx8IG5ldyBIaWRlU2hvd1RyYW5zaXRpb24oYWN0aW9uLCBzY3JvbGxUb1RvcCk7XG4gICAgaW5zdGFuY2Uud3JhcHBlciA9IGluc3RhbmNlLndyYXBwZXIgfHwgd3JhcHBlcjtcbiAgICBpbnN0YW5jZS5jb250YWluZXJTZWxlY3RvciA9XG4gICAgICBpbnN0YW5jZS5jb250YWluZXJTZWxlY3RvciB8fCBjb250YWluZXJTZWxlY3RvcjtcblxuICAgIGluc3RhbmNlLmxpc3RlbkFsbExpbmtzID0gaXNCb29sZWFuKGluc3RhbmNlLmxpc3RlbkFsbExpbmtzKVxuICAgICAgPyBpbnN0YW5jZS5saXN0ZW5BbGxMaW5rc1xuICAgICAgOiBsaXN0ZW5BbGxMaW5rcztcbiAgICBpbnN0YW5jZS5saXN0ZW5Qb3BzdGF0ZSA9IGlzQm9vbGVhbihpbnN0YW5jZS5saXN0ZW5Qb3BzdGF0ZSlcbiAgICAgID8gaW5zdGFuY2UubGlzdGVuUG9wc3RhdGVcbiAgICAgIDogbGlzdGVuUG9wc3RhdGU7XG4gICAgaW5zdGFuY2UucGFyc2VUaXRsZSA9IGlzQm9vbGVhbihpbnN0YW5jZS5wYXJzZVRpdGxlKVxuICAgICAgPyBpbnN0YW5jZS5wYXJzZVRpdGxlXG4gICAgICA6IHBhcnNlVGl0bGU7XG4gICAgaW5zdGFuY2UuY2hhbmdlQnJvd3NlclVybCA9IGlzQm9vbGVhbihpbnN0YW5jZS5jaGFuZ2VCcm93c2VyVXJsKVxuICAgICAgPyBpbnN0YW5jZS5jaGFuZ2VCcm93c2VyVXJsXG4gICAgICA6IGNoYW5nZUJyb3dzZXJVcmw7XG4gICAgaW5zdGFuY2UucHJlZmV0Y2hMaW5rcyA9IGlzQm9vbGVhbihpbnN0YW5jZS5wcmVmZXRjaExpbmtzKVxuICAgICAgPyBpbnN0YW5jZS5wcmVmZXRjaExpbmtzXG4gICAgICA6IHByZWZldGNoTGlua3M7XG5cbiAgICBpZiAoaW5zdGFuY2Uud3JhcHBlcikge1xuICAgICAgaW5zdGFuY2Uud3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIiwgXCJwb2xpdGVcIik7XG4gICAgfVxuXG4gICAgUGpheC5pbnN0YW5jZXNbdGhpcy52aWV3SWRdID0gaW5zdGFuY2U7XG4gICAgcmV0dXJuIFBqYXguaW5zdGFuY2VzW3RoaXMudmlld0lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVU2UgdGhpcyBpZiB5b3UgaGF2ZSBhIHZpZXcgY29tcG9uZW50XG4gICAqL1xuICBwdWJsaWMgc2V0QWN0aXZlV3JhcHBlcih3cmFwcGVyOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMud3JhcHBlciA9IHdyYXBwZXI7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IFBqYXhcbiAgICovXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICBpZiAodGhpcy53cmFwcGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmluaXQodGhpcy53cmFwcGVyLCB0aGlzLmxpc3RlbkFsbExpbmtzLCB0aGlzLmxpc3RlblBvcHN0YXRlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBDYW4ndCBpbml0IHBqYXggd2l0aG91dCB3cmFwcGVyYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY3VycmVudFVSTCBjbGVhbmVkXG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFVybCgpIHtcbiAgICByZXR1cm4gY2xlYW5MaW5rKGdldFVybCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIFVSTCB3aXRoIHB1c2ggc3RhdGUgYW5kIHRyaWdnZXIgdGhlIHN0YXRlIGNoYW5nZVxuICAgKi9cbiAgcHVibGljIGdvVG8odXJsOiBzdHJpbmcsIG5ld1RhYiA9IGZhbHNlKSB7XG4gICAgaWYgKG5ld1RhYikge1xuICAgICAgY29uc3Qgd2luID0gd2luZG93Lm9wZW4odXJsLCBcIl9ibGFua1wiKTtcbiAgICAgIGlmICh3aW4pIHtcbiAgICAgICAgcmV0dXJuIHdpbi5mb2N1cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh1cmwuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgIHVybCA9IG5vcm1hbGl6ZVVybCh1cmwpLnVybDtcbiAgICB9XG5cbiAgICBpZiAoIXVybC5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgaWYgKHRoaXMuY2hhbmdlQnJvd3NlclVybCkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgXCJcIiwgdXJsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9uU3RhdGVDaGFuZ2UodW5kZWZpbmVkLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmYWxsYmFja1xuICAgICAgdGhpcy5mb3JjZUdvVG8odXJsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgdHJhbnNpdGlvbiBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc2l0aW9uKCk6IFRyYW5zaXRpb24ge1xuICAgIC8vIFVzZXIgY3VzdG9taXphYmxlXG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbiB8fCBuZXcgSGlkZVNob3dUcmFuc2l0aW9uKCk7XG4gIH1cblxuICBwdWJsaWMgcHJlZmV0Y2hMaW5rKGhyZWY6IHN0cmluZykge1xuICAgIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZikudXJsO1xuICAgIGNvbnN0IGZvbGxvdyA9IFBqYXgucHJldmVudENoZWNrVXJsKGhyZWYpO1xuICAgIGlmIChmb2xsb3cpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRSZXNwb25zZUNhY2hlZChocmVmLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgYSBwcmVmZXRjaCBsaW5rIHRvIHRoZSBoZWFkIGFuZCBjYWNoZXMgdGhlIHJlc3VsdFxuICAgKi9cbiAgcHJvdGVjdGVkIHByZWZldGNoTGlua0VsZW1lbnQoXG4gICAgbGlua0VsZW1lbnQ6IEhUTUxMaW5rRWxlbWVudCxcbiAgICBoZWFkOiBIVE1MSGVhZEVsZW1lbnRcbiAgKSB7XG4gICAgY29uc3QgcmVsID0gbGlua0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwicmVsXCIpO1xuICAgIGNvbnN0IGhyZWYgPSBQamF4LmdldEhyZWYobGlua0VsZW1lbnQpO1xuICAgIGlmIChcbiAgICAgIHJlbCA9PT0gXCJyb3V0ZXItcHJlbG9hZFwiICYmXG4gICAgICBocmVmICYmXG4gICAgICB0aGlzLmNhY2hlRW5hYmxlZCAmJlxuICAgICAgIWxpbmtFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhST1VURV9FUlJPUl9DTEFTUylcbiAgICApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMucHJlZmV0Y2hMaW5rKGhyZWYpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbGlua0VsZW1lbnQuY2xhc3NMaXN0LmFkZChST1VURV9FUlJPUl9DTEFTUyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBcHBlbmQgVGhlIGxpbmsgZWxlbWVudHMgdG8gdGhlIGhlYWQgZm9yIG5hdGl2ZSBwcmVmZXRjaCBieSB0aGUgYnJvd3NlclxuICAgIGhlYWQuYXBwZW5kQ2hpbGQobGlua0VsZW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbW92ZVByZWZldGNoTGlua3MoaGVhZDogSFRNTEhlYWRFbGVtZW50KSB7XG4gICAgY29uc3QgcmVtb3ZlUHJlZmV0Y2hMaW5rRWxlbWVudHMgPSBoZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAnbGlua1tocmVmXVtyZWw9XCJkbnMtcHJlZmV0Y2hcIl0sIGxpbmtbaHJlZl1bcmVsPVwicHJlY29ubmVjdFwiXSwgbGlua1tocmVmXVtyZWw9XCJwcmVmZXRjaFwiXSwgbGlua1tocmVmXVtyZWw9XCJzdWJyZXNvdXJjZVwiXSwgbGlua1tocmVmXVtyZWw9XCJwcmVsb2FkXCJdLCBsaW5rW2hyZWZdW3JlbD1cInJvdXRlci1wcmVsb2FkXCJdJ1xuICAgICkgYXMgTm9kZUxpc3RPZjxIVE1MTGlua0VsZW1lbnQ+O1xuICAgIC8vIFJlbW92ZSB0aGUgb2xkIHByZWZldGNoIGxpbmsgZWxlbWVudHNcbiAgICByZW1vdmVQcmVmZXRjaExpbmtFbGVtZW50cy5mb3JFYWNoKChsaW5rRWxlbWVudDogSFRNTExpbmtFbGVtZW50KSA9PiB7XG4gICAgICBpZiAobGlua0VsZW1lbnQgJiYgbGlua0VsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICBsaW5rRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcHJlZmV0Y2ggbGlua3MgaW4gdGhlIGhlYWQgd2l0aCB0aGUgbmV3IG9uZS5cbiAgICogVGhlIGN1c3RvbSBsaW5rW2hyZWZdW3JlbD1cInJvdXRlci1wcmVsb2FkXCJdIGVsZW1lbnRzIHdpbGwgYmUgbm90IHJlYWRkIHRvIHRoZSBoZWFkXG4gICAqIGJlY2F1c2Ugd2UgcHJlbG9hZCB0aGVtIHdpdGggamF2YXNjcmlwdCwgdGhlIG90aGVycyBhcmUgcHJlbG9hZGVkIGJ5IHRoZSBicm93c2VyXG4gICAqIGJlY2F1c2UgaXQgaGFzIG5hdGl2ZSBzdXBwb3J0IGZvciB0aGVtIGFuZCBmb3IgdGhhdCB0aGV5IG11c3QgZXhpc3QgaW4gdGhlIGhlYWRcbiAgICogQHBhcmFtIHByZWZldGNoTGlua3NcbiAgICovXG4gIHByb3RlY3RlZCByZXBsYWNlUHJlZmV0Y2hMaW5rRWxlbWVudHMoXG4gICAgcHJlZmV0Y2hMaW5rczogTm9kZUxpc3RPZjxIVE1MTGlua0VsZW1lbnQ+IHwgSFRNTExpbmtFbGVtZW50W11cbiAgKSB7XG4gICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICAgIHRoaXMucmVtb3ZlUHJlZmV0Y2hMaW5rcyhoZWFkKTtcblxuICAgIHByZWZldGNoTGlua3MuZm9yRWFjaCgobGlua0VsZW1lbnQ6IEhUTUxMaW5rRWxlbWVudCkgPT4ge1xuICAgICAgdGhpcy5wcmVmZXRjaExpbmtFbGVtZW50KGxpbmtFbGVtZW50LCBoZWFkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGFuIHVybCwgd2lsbCBzdGFydCBhbiBmZXRjaCByZXF1ZXN0IG9yIGxvYWQgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGNhY2hlIGFuZCByZXR1cm5zIHRoZSBjb250YWluZXJcbiAgICogQWxzbyBwdXRzIHRoZSBjb250YWluZXIgdG8gdGhlIERPTSBhbmQgc2V0cyB0aGUgdGl0bGUgKGlmIHRoaXMgb3B0aW9uIGlzIGFjdGl2ZSlcbiAgICovXG4gIHB1YmxpYyBhc3luYyBsb2FkQ2FjaGVkKHVybDogc3RyaW5nKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHJlc3BvbnNlUHJvbWlzZSB9ID0gYXdhaXQgdGhpcy5sb2FkUmVzcG9uc2VDYWNoZWQoXG4gICAgICAgIHVybCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgICBpZiAoIXRoaXMud3JhcHBlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbUGpheF0geW91IG5lZWQgYSB3cmFwcGVyIVwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgICAgRG9tLnB1dENvbnRhaW5lcihyZXNwb25zZS5jb250YWluZXIsIHRoaXMud3JhcHBlcik7XG4gICAgICBpZiAodGhpcy5wYXJzZVRpdGxlID09PSB0cnVlICYmIHJlc3BvbnNlLnRpdGxlKSB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gcmVzcG9uc2UudGl0bGU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcmVmZXRjaExpbmtzID09PSB0cnVlICYmIHJlc3BvbnNlLnByZWZldGNoTGlua3MpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlUHJlZmV0Y2hMaW5rRWxlbWVudHMocmVzcG9uc2UucHJlZmV0Y2hMaW5rcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwb25zZS5jb250YWluZXI7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3JvbmcgKHRpbWVvdXQsIDQwNCwgNTA1Li4uKVxuICAgICAgdGhpcy5mb3JjZUdvVG8odXJsKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGFuIHVybCwgd2lsbCBzdGFydCBhbiBmZXRjaCByZXF1ZXN0IG9yIGxvYWQgZnJvbSB0aGUgY2FjaGUgKGFuZCBzZXQgaXQgdG8gdGhlIGNhY2hlKSBhbmQgd2lsbCByZXR1cm4gYSBgUmVzcG9uc2VgIG9iamVjdFxuICAgKiBAcGFyYW0gdXJsIFVybCB0byBnZXQgZnJvbSBjYWNoZSBvciB0byBtYWtlIHRoZSByZXF1ZXN0IGZvclxuICAgKiBAcGFyYW0gZm9yY2VDYWNoZSBGb3JjZSB0byB1c2UgdGhlIGJyb3dzZXIgYnVpbGQgaW4gY2FjaGUsIGZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBgZm9yY2UtY2FjaGVgIG9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9SZXF1ZXN0L2NhY2hlXG4gICAqIEBwYXJhbSBmYWxsYmFjayBJZiB0aGVyZSBpcyBhbiBlcnJvciwgbWFrZSBhIG5vcm1hbCBicm93c2VyIHJlcXVlc3QgYW5kIHJlbG9hZCB0aGUgcGFnZSB5b3Ugc2hvdWxkIG5vdCB1c2UgdGhpcyBvbiBwcmVmZXRjaCB1cmxzXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbG9hZFJlc3BvbnNlQ2FjaGVkKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGZvcmNlQ2FjaGUgPSBmYWxzZSxcbiAgICBmYWxsYmFjayA9IHRydWVcbiAgKSB7XG4gICAgbGV0IHJlc3BvbnNlUHJvbWlzZTogUHJvbWlzZTxSZXNwb25zZT4gfCB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmNhY2hlRW5hYmxlZCkge1xuICAgICAgICByZXNwb25zZVByb21pc2UgPSBQamF4LmNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAocmVzcG9uc2VQcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb21DYWNoZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXNwb25zZVByb21pc2UgPSB0aGlzLmxvYWRSZXNwb25zZSh1cmwsIGZvcmNlQ2FjaGUpO1xuICAgICAgaWYgKHRoaXMuY2FjaGVFbmFibGVkICYmIHJlc3BvbnNlUHJvbWlzZSkge1xuICAgICAgICBQamF4LmNhY2hlLnNldCh1cmwsIHJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQamF4LmNhY2hlLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZm9yY2VHb1RvKHVybCk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZnJvbUNhY2hlOiBmYWxzZSxcbiAgICAgIHJlc3BvbnNlUHJvbWlzZSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgYW4gdXJsLCB3aWxsIHN0YXJ0IGFuIGZldGNoIHJlcXVlc3QgYW5kIHdpbGwgcmV0dXJuIGEgYFJlc3BvbnNlYCBvYmplY3RcbiAgICogQHBhcmFtIHVybCBVcmwgdG8gZ2V0IGZyb20gY2FjaGUgb3IgdG8gbWFrZSB0aGUgcmVxdWVzdCBmb3JcbiAgICogQHBhcmFtIGZvcmNlQ2FjaGUgRm9yY2UgdG8gdXNlIHRoZSBicm93c2VyIGJ1aWxkIGluIGNhY2hlLCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgYGZvcmNlLWNhY2hlYCBvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVxdWVzdC9jYWNoZVxuICAgKi9cbiAgcHVibGljIGFzeW5jIGxvYWRSZXNwb25zZSh1cmw6IHN0cmluZywgZm9yY2VDYWNoZSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgb3B0aW9uczogSHR0cFNlcnZpY2VPcHRpb25zID0gZm9yY2VDYWNoZVxuICAgICAgPyB7IGNhY2hlOiBcImZvcmNlLWNhY2hlXCIgfVxuICAgICAgOiB7fTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgSHR0cFNlcnZpY2UuZ2V0PHN0cmluZz4oXG4gICAgICB1cmwsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBcImh0bWxcIixcbiAgICAgIHt9LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGJvZHkhXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IERvbS5wYXJzZVJlc3BvbnNlKFxuICAgICAgZGF0YS5ib2R5LFxuICAgICAgdGhpcy5wYXJzZVRpdGxlLFxuICAgICAgdGhpcy5jb250YWluZXJTZWxlY3RvcixcbiAgICAgIHRoaXMucHJlZmV0Y2hMaW5rc1xuICAgICk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAqL1xuICBwcm90ZWN0ZWQgYmluZEV2ZW50cyhsaXN0ZW5BbGxMaW5rczogYm9vbGVhbiwgbGlzdGVuUG9wc3RhdGU6IGJvb2xlYW4pIHtcbiAgICAvLyB5b3UgY2FuIGFsc28gdXNlIHRoZSBydi1yb3V0ZXIgZm9yIHRoaXNcbiAgICBpZiAobGlzdGVuQWxsTGlua3MpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uTGlua0NsaWNrSW50ZXJuLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBpZiAobGlzdGVuUG9wc3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgYnJvd3NlciB0byBnbyB0byBhIGNlcnRhaW4gdXJsXG4gICAqL1xuICBwdWJsaWMgZm9yY2VHb1RvKHVybDogTG9jYXRpb24gfCBzdHJpbmcpIHtcbiAgICBjb25zb2xlLndhcm4oXCJmb3JjZUdvVG9cIiwgdXJsKTtcbiAgICBpZiAodXJsICYmICh1cmwgYXMgTG9jYXRpb24pLmhyZWYpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybCBhcyBMb2NhdGlvbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbkxpbmtDbGlja0ludGVybihldnQ6IEV2ZW50KSB7XG4gICAgbGV0IGVsID0gZ2V0RWxlbWVudEZyb21FdmVudChldnQpO1xuXG4gICAgd2hpbGUgKGVsICYmICFQamF4LmdldEhyZWYoZWwpKSB7XG4gICAgICBlbCA9IGVsLnBhcmVudE5vZGUgYXMgSFRNTEFuY2hvckVsZW1lbnQ7IC8vIFRPRE8gdGVzdCBtZVxuICAgIH1cblxuICAgIGlmICghZWwgfHwgZWwubm9kZU5hbWUgIT09IFwiQVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IFBqYXguZ2V0SHJlZihlbCk7XG5cbiAgICAvLyBBbHJlYWR5IG1hbmFnZWQgYnkgdGhlIHJ2LXJvdXRlIGJpbmRlclxuICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJyb3V0ZVwiKSB8fCBlbC5oYXNBdHRyaWJ1dGUoXCJydi1yb3V0ZVwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaHJlZikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVXJsIGlzIG5vdCBkZWZpbmVkLCB5b3UgY2FuJ3QgY2FjaGUgdGhlIGxpbmsgd2l0aG91dCB0aGUgdXJsLiBQbGVhc2UgbWFrZSBzdXJlIHlvdXIgZWxlbWVudCBoYXMgdGhlIGhyZWYgYXR0cmlidXRlIG9yIHBhc3MgdGhlIHVybCBkaXJlY3RseSB0byB0aGlzIGZ1bmN0aW9uLmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBtYW5hZ2VkIGJ5IHRoZSBydi1yb3V0ZSBiaW5kZXJcbiAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwicm91dGVcIikgfHwgZWwuaGFzQXR0cmlidXRlKFwicnYtcm91dGVcIikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbkxpbmtDbGljayhldnQsIGVsIGFzIEhUTUxBbmNob3JFbGVtZW50LCBocmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgZnJvbSBjbGljayBldmVudFxuICAgKi9cbiAgcHVibGljIG9uTGlua0NsaWNrKFxuICAgIGV2dDogRXZlbnQsXG4gICAgZWw6IEhUTUxBbmNob3JFbGVtZW50LFxuICAgIGhyZWY6IHN0cmluZyxcbiAgICBuZXdUYWIgPSBmYWxzZVxuICApIHtcbiAgICAvLyBub3JtYWxpemUgdXJsLCByZXR1cm5zIHRoZSByZWxhdGl2ZSB1cmwgZm9yIGludGVybmFsIHVybHMgYW5kIHRoZSBmdWxsIHVybCBmb3IgZXh0ZXJuYWwgdXJsc1xuICAgIGNvbnN0IHsgdXJsLCBsb2NhdGlvbiB9ID0gbm9ybWFsaXplVXJsKGhyZWYpO1xuXG4gICAgY29uc3QgeyBsb2NhdGlvbjogY3VyckxvY2F0aW9uIH0gPSBub3JtYWxpemVVcmwoKTtcblxuICAgIC8vIElzIHRoaXMgYSBsb2NhbCBzY3JvbGwgbGluayB0byBhbiB0aXRsZSBhbmNob3I/XG4gICAgaWYgKGxvY2F0aW9uLmhhc2ggJiYgY3VyckxvY2F0aW9uLnBhdGhuYW1lID09PSBsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbGV0IGlkID0gbG9jYXRpb24uaGFzaC5zbGljZSgxKTtcbiAgICAgIGlkID0gZGVjb2RlVVJJKGlkKTsgLy8gV29ya2Fyb3VuZCBmb3IgbWFya2Rvd24gZ2VuZXJhdGVkIGlkcyB3aXRoIHVtbGF1dHNcbiAgICAgIGNvbnN0IHNjcm9sbFRvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgIGlmIChzY3JvbGxUb0VsZW1lbnQpIHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhbmdlQnJvd3NlclVybCkge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcIlwiLCB1cmwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY3JvbGxUbyhzY3JvbGxUb0VsZW1lbnQsIHRoaXMuc2Nyb2xsVG9BbmNob3JPZmZzZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1cmwgaXMgZmFsc3lcIik7XG4gICAgfVxuICAgIGNvbnN0IGZvbGxvdyA9IFBqYXgucHJldmVudENoZWNrKHVybCwgZWwsIGV2dCk7XG5cbiAgICBpZiAoZm9sbG93KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoXCJsaW5rQ2xpY2tlZFwiLCBlbCwgZXZ0KTtcblxuICAgICAgdGhpcy5nb1RvKHVybCwgbmV3VGFiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIGNhbGxlZCBhZnRlciBhICdwb3BzdGF0ZScgb3IgZnJvbSAuZ29UbygpXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgb25TdGF0ZUNoYW5nZShcbiAgICBldmVudD86IEV2ZW50LFxuICAgIG5ld1VybDogc3RyaW5nID0gdGhpcy5nZXRDdXJyZW50VXJsKClcbiAgKSB7XG4gICAgLy8gbm9ybWFsaXplIHVybCwgcmV0dXJucyB0aGUgcmVsYXRpdmUgdXJsIGZvciBpbnRlcm5hbCB1cmxzIGFuZCB0aGUgZnVsbCB1cmwgZm9yIGV4dGVybmFsIHVybHNcbiAgICBuZXdVcmwgPSBub3JtYWxpemVVcmwobmV3VXJsKS51cmw7XG4gICAgY29uc3Qgb2xkVXJsID0gbm9ybWFsaXplVXJsKHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCkudXJsKS51cmw7XG5cbiAgICBpZiAodGhpcy5jaGFuZ2VCcm93c2VyVXJsICYmIG9sZFVybCA9PT0gbmV3VXJsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oaXN0b3J5LmFkZChuZXdVcmwpO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICBcImluaXRTdGF0ZUNoYW5nZVwiLFxuICAgICAgdGhpcy52aWV3SWQsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAgdGhpcy5oaXN0b3J5LnByZXZTdGF0dXMoKVxuICAgICk7XG5cbiAgICBjb25zdCBvbGRDb250YWluZXIgPSBEb20uZ2V0Q29udGFpbmVyKGRvY3VtZW50LCB0aGlzLmNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICBjb25zdCBuZXdDb250YWluZXJQcm9taXNlID0gdGhpcy5sb2FkQ2FjaGVkKG5ld1VybCk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uID0gdGhpcy5nZXRUcmFuc2l0aW9uKCk7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uUmVzdWx0ID0gdHJhbnNpdGlvbi5pbml0KG9sZENvbnRhaW5lciwgbmV3Q29udGFpbmVyUHJvbWlzZSk7XG5cbiAgICB0aGlzLm9uTmV3Q29udGFpbmVyTG9hZGVkKGF3YWl0IG5ld0NvbnRhaW5lclByb21pc2UpO1xuXG4gICAgYXdhaXQgdHJhbnNpdGlvblJlc3VsdDtcbiAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCBhcyBzb29uIHRoZSBuZXcgY29udGFpbmVyIGlzIHJlYWR5XG4gICAqL1xuICBwcm90ZWN0ZWQgb25OZXdDb250YWluZXJMb2FkZWQoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpO1xuXG4gICAgY3VycmVudFN0YXR1cy5uYW1lc3BhY2UgPSBEb20uZ2V0TmFtZXNwYWNlKGNvbnRhaW5lcik7XG5cbiAgICBjb25zdCBkYXRhc2V0ID0gZ2V0RGF0YXNldChjb250YWluZXIpO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICBcIm5ld1BhZ2VSZWFkeVwiLFxuICAgICAgdGhpcy52aWV3SWQsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAgdGhpcy5oaXN0b3J5LnByZXZTdGF0dXMoKSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwsXG4gICAgICBkYXRhc2V0LFxuICAgICAgZmFsc2UgLy8gdHJ1ZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIG5ld1BhZ2VSZWFkeSBpcyB0cmlnZ2VyZWQgLyB0cnVlIG9uIGluaXRpYWxpemF0aW9uXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgYXMgc29vbiB0aGUgdHJhbnNpdGlvbiBpcyBmaW5pc2hlZFxuICAgKi9cbiAgcHJvdGVjdGVkIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICB0aGlzLnRyYW5zaXRpb25Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICBcInRyYW5zaXRpb25Db21wbGV0ZWRcIixcbiAgICAgIHRoaXMudmlld0lkLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmV2U3RhdHVzKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIGV2ZW50c1xuICAgKi9cbiAgcHJvdGVjdGVkIGluaXQoXG4gICAgd3JhcHBlcjogSFRNTEVsZW1lbnQsXG4gICAgbGlzdGVuQWxsTGlua3M6IGJvb2xlYW4sXG4gICAgbGlzdGVuUG9wc3RhdGU6IGJvb2xlYW5cbiAgKSB7XG4gICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlID0gRG9tLnBhcnNlSW5pdGlhbChcbiAgICAgIHRoaXMucGFyc2VUaXRsZSxcbiAgICAgIHRoaXMuY29udGFpbmVyU2VsZWN0b3IsXG4gICAgICB0aGlzLnByZWZldGNoTGlua3NcbiAgICApO1xuICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAvLyBSZWxvYWQgdGhlIGN1cnJlbnQgc2l0ZSB3aXRoIHBqYXggdG8gY2FjaGUgdGhlIGluaXRpYWwgcGFnZVxuICAgIGlmICh0aGlzLmNhY2hlRW5hYmxlZCkge1xuICAgICAgY29uc3QgY3VycmVudFVybCA9IG5vcm1hbGl6ZVVybCh3aW5kb3cubG9jYXRpb24uaHJlZikudXJsO1xuICAgICAgaWYgKCFQamF4LmNhY2hlLmdldCh1cmwpKSB7XG4gICAgICAgIHRoaXMubG9hZFJlc3BvbnNlQ2FjaGVkKGN1cnJlbnRVcmwsIGZhbHNlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZXBsYWNlUHJlZmV0Y2hMaW5rRWxlbWVudHMoaW5pdGlhbFJlc3BvbnNlLnByZWZldGNoTGlua3MpO1xuXG4gICAgdGhpcy53cmFwcGVyID0gd3JhcHBlcjtcblxuICAgIHRoaXMuaGlzdG9yeS5hZGQoXG4gICAgICB0aGlzLmdldEN1cnJlbnRVcmwoKSxcbiAgICAgIERvbS5nZXROYW1lc3BhY2UoaW5pdGlhbFJlc3BvbnNlLmNvbnRhaW5lcilcbiAgICApO1xuXG4gICAgLy8gRmlyZSBmb3IgdGhlIGN1cnJlbnQgdmlldy5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcihcbiAgICAgIFwiaW5pdFN0YXRlQ2hhbmdlXCIsXG4gICAgICB0aGlzLnZpZXdJZCxcbiAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKClcbiAgICApO1xuXG4gICAgY29uc3QgZGF0YXNldCA9IGdldERhdGFzZXQoaW5pdGlhbFJlc3BvbnNlLmNvbnRhaW5lcik7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcihcbiAgICAgIFwibmV3UGFnZVJlYWR5XCIsXG4gICAgICB0aGlzLnZpZXdJZCxcbiAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCksXG4gICAgICB7fSxcbiAgICAgIGluaXRpYWxSZXNwb25zZS5jb250YWluZXIsXG4gICAgICBpbml0aWFsUmVzcG9uc2UuY29udGFpbmVyLmlubmVySFRNTCxcbiAgICAgIGRhdGFzZXQsXG4gICAgICB0cnVlIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBuZXdQYWdlUmVhZHkgaXMgdHJpZ2dlcmVkIC8gdHJ1ZSBvbiBpbml0aWFsaXphdGlvblxuICAgICk7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcihcbiAgICAgIFwidHJhbnNpdGlvbkNvbXBsZXRlZFwiLFxuICAgICAgdGhpcy52aWV3SWQsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpXG4gICAgKTtcblxuICAgIHRoaXMuYmluZEV2ZW50cyhsaXN0ZW5BbGxMaW5rcywgbGlzdGVuUG9wc3RhdGUpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBqYXggfTtcbiIsImltcG9ydCB7IGRlZmVycmVkIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3RyYW5zaXRpb24uanNcIjtcblxuLyoqXG4gKiBCYXNlVHJhbnNpdGlvbiB0byBleHRlbmRcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUcmFuc2l0aW9uIGltcGxlbWVudHMgVHJhbnNpdGlvbiB7XG4gIHByb3RlY3RlZCBvbGRDb250YWluZXI/OiBIVE1MRWxlbWVudDtcblxuICBwcm90ZWN0ZWQgbmV3Q29udGFpbmVyPzogSFRNTEVsZW1lbnQ7XG5cbiAgcHJvdGVjdGVkIG5ld0NvbnRhaW5lckxvYWRpbmc/OiBQcm9taXNlPEhUTUxFbGVtZW50PjtcblxuICBwcm90ZWN0ZWQgZGVmZXJyZWQgPSBkZWZlcnJlZCgpO1xuXG4gIHByb3RlY3RlZCBhY3Rpb246IFwicmVwbGFjZVwiIHwgXCJhcHBlbmRcIjtcblxuICBjb25zdHJ1Y3RvcihhY3Rpb246IFwicmVwbGFjZVwiIHwgXCJhcHBlbmRcIiA9IFwicmVwbGFjZVwiKSB7XG4gICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZnJvbSBQamF4IG1vZHVsZSB0byBpbml0aWFsaXplXG4gICAqIHRoZSB0cmFuc2l0aW9uLlxuICAgKlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGluaXQoXG4gICAgb2xkQ29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBuZXdDb250YWluZXI6IFByb21pc2U8SFRNTEVsZW1lbnQ+XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMub2xkQ29udGFpbmVyID0gb2xkQ29udGFpbmVyO1xuXG4gICAgdGhpcy5kZWZlcnJlZCA9IGRlZmVycmVkKCk7XG4gICAgY29uc3QgbmV3Q29udGFpbmVyTG9hZGluZyA9IGRlZmVycmVkPEhUTUxFbGVtZW50PigpO1xuICAgIHRoaXMubmV3Q29udGFpbmVyTG9hZGluZyA9IG5ld0NvbnRhaW5lckxvYWRpbmcucHJvbWlzZTtcblxuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIHRoaXMubmV3Q29udGFpbmVyID0gYXdhaXQgbmV3Q29udGFpbmVyO1xuICAgIG5ld0NvbnRhaW5lckxvYWRpbmcucmVzb2x2ZSh0aGlzLm5ld0NvbnRhaW5lcik7XG4gICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGNhbGxlZCBhcyBzb29uIHRoZSBUcmFuc2l0aW9uIGlzIGZpbmlzaGVkXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZG9uZSgpIHtcbiAgICBpZiAoIXRoaXMub2xkQ29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCByZW1vdmUgb2xkIGNvbnRhaW5lclwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwicmVwbGFjZVwiKSB7XG4gICAgICB0aGlzLm9sZENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubmV3Q29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzaG93IG5ldyBjb250YWluZXJcIik7XG4gICAgfVxuICAgIHRoaXMubmV3Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICByZXR1cm4gdGhpcy5kZWZlcnJlZC5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIHlvdXIgVHJhbnNpdGlvblxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHN0YXJ0KCk6IHZvaWQ7XG59XG4iLCJpbXBvcnQgeyBCYXNlVHJhbnNpdGlvbiB9IGZyb20gXCIuL0Jhc2VUcmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3RyYW5zaXRpb24uanNcIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgbW9kZWw6IGFueTtcbiAgfVxufVxuXG4vKipcbiAqIEJhc2ljIFRyYW5zaXRpb24gb2JqZWN0LCB3YWl0IGZvciB0aGUgbmV3IENvbnRhaW5lciB0byBiZSByZWFkeSxcbiAqIHNjcm9sbCB0b3AsIGFuZCBmaW5pc2ggdGhlIHRyYW5zaXRpb24gKHJlbW92aW5nIHRoZSBvbGQgY29udGFpbmVyIGFuZCBkaXNwbGF5aW5nIHRoZSBuZXcgb25lKVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEN1c3RvbVRyYW5zaXRpb24gZXh0ZW5kcyBCYXNlVHJhbnNpdGlvbiBpbXBsZW1lbnRzIFRyYW5zaXRpb24ge1xuICBwdWJsaWMgYXN5bmMgc3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRoaXMubmV3Q29udGFpbmVyTG9hZGluZyBpcyBub3Qgc2V0XCIpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmc7XG4gICAgdGhpcy5maW5pc2goKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluaXNoKCkge1xuICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgICByZXR1cm4gdGhpcy5kb25lKCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ3VzdG9tVHJhbnNpdGlvbiB9O1xuIiwiaW1wb3J0IHsgQmFzZVRyYW5zaXRpb24gfSBmcm9tIFwiLi9CYXNlVHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy90cmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgeyBzY3JvbGxUb1Bvc2l0aW9uIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQmFzaWMgVHJhbnNpdGlvbiBvYmplY3QsIHdhaXQgZm9yIHRoZSBuZXcgQ29udGFpbmVyIHRvIGJlIHJlYWR5LFxuICogc2Nyb2xsIHRvcCwgYW5kIGZpbmlzaCB0aGUgdHJhbnNpdGlvbiAocmVtb3ZpbmcgdGhlIG9sZCBjb250YWluZXIgYW5kIGRpc3BsYXlpbmcgdGhlIG5ldyBvbmUpXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEZhZGVUcmFuc2l0aW9uIGV4dGVuZHMgQmFzZVRyYW5zaXRpb24gaW1wbGVtZW50cyBUcmFuc2l0aW9uIHtcbiAgcHJvdGVjdGVkIHNjcm9sbFRvVG9wOiBib29sZWFuO1xuICBwcm90ZWN0ZWQgZHVyYXRpb25NcyA9IDIwMDtcblxuICBjb25zdHJ1Y3RvcihzY3JvbGxUb1RvcCA9IHRydWUpIHtcbiAgICBzdXBlcihcInJlcGxhY2VcIik7XG4gICAgdGhpcy5zY3JvbGxUb1RvcCA9IHNjcm9sbFRvVG9wO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5uZXdDb250YWluZXJMb2FkaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgaXMgbm90IHNldFwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vbGRDb250YWluZXIpIHtcbiAgICAgIHRoaXMub2xkQ29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSBgb3BhY2l0eSAke3RoaXMuZHVyYXRpb25Nc31tc2A7XG4gICAgICB0aGlzLm9sZENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsVG9Ub3ApIHtcbiAgICAgIGF3YWl0IHNjcm9sbFRvUG9zaXRpb24od2luZG93LCBcInN0YXJ0XCIsIFwidmVydGljYWxcIiwgXCJzbW9vdGhcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3Q29udGFpbmVyID0gYXdhaXQgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nO1xuXG4gICAgbmV3Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBuZXdDb250YWluZXIuc3R5bGUudHJhbnNpdGlvbiA9IGBvcGFjaXR5ICR7dGhpcy5kdXJhdGlvbk1zfW1zYDtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5maW5pc2gobmV3Q29udGFpbmVyKTtcbiAgICB9LCB0aGlzLmR1cmF0aW9uTXMpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGZpbmlzaChuZXdDb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgbmV3Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcbiAgICByZXR1cm4gdGhpcy5kb25lKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2VUcmFuc2l0aW9uIH0gZnJvbSBcIi4vQmFzZVRyYW5zaXRpb24uanNcIjtcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vdHlwZXMvdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHsgc2Nyb2xsVG9Qb3NpdGlvbiB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEJhc2ljIFRyYW5zaXRpb24gb2JqZWN0LCB3YWl0IGZvciB0aGUgbmV3IENvbnRhaW5lciB0byBiZSByZWFkeSxcbiAqIHNjcm9sbCB0b3AsIGFuZCBmaW5pc2ggdGhlIHRyYW5zaXRpb24gKHJlbW92aW5nIHRoZSBvbGQgY29udGFpbmVyIGFuZCBkaXNwbGF5aW5nIHRoZSBuZXcgb25lKVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBIaWRlU2hvd1RyYW5zaXRpb24gZXh0ZW5kcyBCYXNlVHJhbnNpdGlvbiBpbXBsZW1lbnRzIFRyYW5zaXRpb24ge1xuICBwcm90ZWN0ZWQgYWN0aW9uOiBcInJlcGxhY2VcIiB8IFwiYXBwZW5kXCI7XG5cbiAgcHJvdGVjdGVkIHNjcm9sbFRvVG9wOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGFjdGlvbjogXCJyZXBsYWNlXCIgfCBcImFwcGVuZFwiID0gXCJyZXBsYWNlXCIsIHNjcm9sbFRvVG9wID0gdHJ1ZSkge1xuICAgIHN1cGVyKGFjdGlvbik7XG4gICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgdGhpcy5zY3JvbGxUb1RvcCA9IHNjcm9sbFRvVG9wO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5uZXdDb250YWluZXJMb2FkaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgaXMgbm90IHNldFwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub2xkQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLm9sZENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsVG9Ub3ApIHtcbiAgICAgIGF3YWl0IHNjcm9sbFRvUG9zaXRpb24od2luZG93LCBcInN0YXJ0XCIsIFwidmVydGljYWxcIiwgXCJzbW9vdGhcIik7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nO1xuXG4gICAgYXdhaXQgdGhpcy5maW5pc2goKTtcblxuICAgIGlmICh0aGlzLm9sZENvbnRhaW5lcikge1xuICAgICAgdGhpcy5vbGRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGZpbmlzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb25lKCk7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL0Jhc2VUcmFuc2l0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9DdXN0b21UcmFuc2l0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9GYWRlVHJhbnNpdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vSGlkZVNob3dUcmFuc2l0aW9uLmpzXCI7XG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIkByaWJhanMvaGlzdG9yeS9zcmMvaW5kZXguanNcIjtcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQmFzZVZpZXcgdG8gYmUgZXh0ZW5kZWRcbiAqL1xuYWJzdHJhY3QgY2xhc3MgQmFzZVZpZXcge1xuICAvKipcbiAgICogTmFtZXNwYWNlIG9mIHRoZSB2aWV3LlxuICAgKiAobmVlZCB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGEtbmFtZXNwYWNlIG9mIHRoZSBjb250YWluZXIpXG4gICAqL1xuICBwcm90ZWN0ZWQgbmFtZXNwYWNlPzogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBjb250YWluZXI/OiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBFdmVudERpc3BhdGNoZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAvKipcbiAgICogSGVscGVyIHRvIGV4dGVuZCB0aGUgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgZXh0ZW5kKG9iajogYW55KSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7IGRlZXA6IGZhbHNlIH0sIHRoaXMsIG9iaik7XG4gIH1cblxuICAvKipcbiAgICogSW5pdCB0aGUgdmlldy5cbiAgICogUC5TLiBJcyBzdWdnZXN0ZWQgdG8gaW5pdCB0aGUgdmlldyBiZWZvcmUgc3RhcnRpbmcgQmFyYmEuUGpheC5zdGFydCgpLFxuICAgKiBpbiB0aGlzIHdheSAub25FbnRlcigpIGFuZCAub25FbnRlckNvbXBsZXRlZCgpIHdpbGwgYmUgZmlyZWQgZm9yIHRoZSBjdXJyZW50XG4gICAqIGNvbnRhaW5lciB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAgICovXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5vbihcbiAgICAgIFwiaW5pdFN0YXRlQ2hhbmdlXCIsXG4gICAgICAodmlld0lkOiBzdHJpbmcsIG5ld1N0YXR1czogU3RhdGUsIG9sZFN0YXR1czogU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKG9sZFN0YXR1cyAmJiBvbGRTdGF0dXMubmFtZXNwYWNlID09PSB0aGlzLm5hbWVzcGFjZSkge1xuICAgICAgICAgIHRoaXMub25MZWF2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbihcbiAgICAgIFwibmV3UGFnZVJlYWR5XCIsXG4gICAgICAoXG4gICAgICAgIHZpZXdJZDogc3RyaW5nLFxuICAgICAgICBuZXdTdGF0dXM6IFN0YXRlLFxuICAgICAgICBvbGRTdGF0dXM6IFN0YXRlLFxuICAgICAgICBjb250YWluZXI6IEhUTUxFbGVtZW50IC8qLCBodG1sOiBzdHJpbmcsIGlzSW5pdDogYm9vbGVhbiovXG4gICAgICApID0+IHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIGlmIChuZXdTdGF0dXMubmFtZXNwYWNlID09PSB0aGlzLm5hbWVzcGFjZSkge1xuICAgICAgICAgIHRoaXMub25FbnRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbihcbiAgICAgIFwidHJhbnNpdGlvbkNvbXBsZXRlZFwiLFxuICAgICAgKHZpZXdJZDogc3RyaW5nLCBuZXdTdGF0dXM6IFN0YXRlLCBvbGRTdGF0dXM6IFN0YXRlKSA9PiB7XG4gICAgICAgIGlmIChuZXdTdGF0dXMubmFtZXNwYWNlID09PSB0aGlzLm5hbWVzcGFjZSkge1xuICAgICAgICAgIHRoaXMub25FbnRlckNvbXBsZXRlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9sZFN0YXR1cyAmJiBvbGRTdGF0dXMubmFtZXNwYWNlID09PSB0aGlzLm5hbWVzcGFjZSkge1xuICAgICAgICAgIHRoaXMub25MZWF2ZUNvbXBsZXRlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgY29udGFpbmVyXG4gICAqIGlzIHJlYWR5IGFuZCBhdHRhY2hlZCB0byB0aGUgRE9NLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG9uRW50ZXIoKTogYW55O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvblxuICAgKiB0byB0aGlzIGNvbnRhaW5lciBoYXMganVzdCBmaW5pc2hlZC5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkVudGVyQ29tcGxldGVkKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb25cbiAgICogdG8gYSBuZXcgY29udGFpbmVyIGhhcyBqdXN0IHN0YXJ0ZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25MZWF2ZSgpOiBhbnk7XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBjb250YWluZXJcbiAgICogaGFzIGp1c3QgYmVlbiByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkxlYXZlQ29tcGxldGVkKCk6IGFueTtcbn1cblxuZXhwb3J0IHsgQmFzZVZpZXcgfTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL1RyYW5zaXRpb24vaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1ZpZXcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1BqYXgvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JvdXRlci5zZXJ2aWNlLmpzXCI7XG4iLCJpbXBvcnQgeyBSb3V0ZXJNb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBIaWRlU2hvd1RyYW5zaXRpb24gfSBmcm9tIFwiLi9UcmFuc2l0aW9uL0hpZGVTaG93VHJhbnNpdGlvbi5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUm91dGVyU2VydmljZSB7XG4gIHByb3RlY3RlZCBzdGF0aWMgX29wdGlvbnM6IFJvdXRlck1vZHVsZU9wdGlvbnM7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBSb3V0ZXJTZXJ2aWNlO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqL1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTaW5nbGV0b24gb2YgUm91dGVyU2VydmljZSBub3QgZGVmaW5lZCwgcGxlYXNlIGNhbGwgc2V0U2luZ2xldG9uIGZpcnN0IWBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRTaW5nbGV0b24ob3B0aW9uczogUGFydGlhbDxSb3V0ZXJNb2R1bGVPcHRpb25zPiA9IHt9KSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIGNvbnNvbGUud2FybihgU2luZ2xldG9uIG9mIFJvdXRlclNlcnZpY2UgYWxyZWFkeSBkZWZpbmVkIWApO1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuICAgIG9wdGlvbnMuZGVmYXVsdFRyYW5zaXRpb24gPVxuICAgICAgb3B0aW9ucy5kZWZhdWx0VHJhbnNpdGlvbiA/PyBuZXcgSGlkZVNob3dUcmFuc2l0aW9uKCk7XG4gICAgb3B0aW9ucy5zY3JvbGxUb0FuY2hvck9mZnNldCA9IG9wdGlvbnMuc2Nyb2xsVG9BbmNob3JPZmZzZXQgPz8gMDtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucyBhcyBSb3V0ZXJNb2R1bGVPcHRpb25zO1xuICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9qc3gvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZHVsZS1vcHRpb25zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wamF4LW9wdGlvbnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Jlc3BvbnNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yb3V0ZS1vcHRpb25zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi92aWV3LW9wdGlvbnMuanNcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2ludHJpbnNpYy1lbGVtZW50cy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanN4LXJvdXRlci12aWV3LXByb3BzLmpzXCI7XG4iLCJleHBvcnQge307XG4iLCJleHBvcnQgeyBTaG9waWZ5VGRhSW5zdGFncmFtQ29tcG9uZW50IH0gZnJvbSBcIi4vaW5zdGFncmFtL2luc3RhZ3JhbS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlUZGFJbnN0YWdyYW1TY3JvbGxiYXJDb21wb25lbnQgfSBmcm9tIFwiLi9pbnN0YWdyYW0tc2Nyb2xsYmFyL2luc3RhZ3JhbS1zY3JvbGxiYXIuY29tcG9uZW50LmpzXCI7XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFBqYXggfSBmcm9tIFwiQHJpYmFqcy9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIGdldFZpZXdwb3J0RGltZW5zaW9ucyxcbiAgaGFzQ2hpbGROb2Rlc1RyaW0sXG59IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB0eXBlIHsgSW5zdGFncmFtTWVkaWEgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbnN0YWdyYW0tYXBpXCI7XG5pbXBvcnQgeyBJbnN0YWdyYW1BcGlTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2luc3RhZ3JhbS1hcGkuc2VydmljZS5qc1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2luc3RhZ3JhbS1zY3JvbGxiYXIuY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGluc3RhZ3JhbUlkPzogc3RyaW5nO1xuICBvcGVuTGlua3M6IGJvb2xlYW47XG4gIG9wZW5Vcmw/OiBzdHJpbmc7XG4gIGxpbWl0OiBudW1iZXI7XG4gIG9uU2Nyb2xsOiBTaG9waWZ5VGRhSW5zdGFncmFtU2Nyb2xsYmFyQ29tcG9uZW50W1wib25TY3JvbGxcIl07XG4gIG9uVGFwOiBTaG9waWZ5VGRhSW5zdGFncmFtU2Nyb2xsYmFyQ29tcG9uZW50W1wib25UYXBcIl07XG4gIG1lZGlhPzogSW5zdGFncmFtTWVkaWE7XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5VGRhSW5zdGFncmFtU2Nyb2xsYmFyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LXRkYS1pbnN0YWdyYW0tc2Nyb2xsYmFyXCI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJpbnN0YWdyYW0taWRcIiwgXCJvcGVuLWxpbmtzXCIsIFwibGltaXRcIiwgXCJvcGVuLXVybFwiXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgaW5zdGFncmFtSWQ6IHVuZGVmaW5lZCxcbiAgICBvcGVuTGlua3M6IGZhbHNlLFxuICAgIG9wZW5Vcmw6IHVuZGVmaW5lZCxcbiAgICBsaW1pdDogMCxcbiAgICBvblNjcm9sbDogdGhpcy5vblNjcm9sbCxcbiAgICBvblRhcDogdGhpcy5vblRhcCxcbiAgICBtZWRpYTogdW5kZWZpbmVkLFxuICB9O1xuXG4gIHByb3RlY3RlZCBzY29sbFdpdGg6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIGluc3RhZ3JhbSA9IEluc3RhZ3JhbUFwaVNlcnZpY2UuZ2V0U2luZ2xldG9uKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5VGRhSW5zdGFncmFtU2Nyb2xsYmFyQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogSnVzdCBvcGVuIHRoZSBpbnN0YWdyYW0gdXJsXG4gICAqL1xuICBwdWJsaWMgb25UYXAoZXZlbnQ6IEV2ZW50LCBzY29wZTogYW55LCBldmVudEVsOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHBqYXggPSBQamF4LmdldEluc3RhbmNlKFwibWFpblwiKTtcbiAgICBpZiAoIXBqYXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2NvcGUub3BlblVybCAmJiB0aGlzLnNjb3BlLm9wZW5VcmwubGVuZ3RoID4gMCkge1xuICAgICAgcGpheC5nb1RvKHRoaXMuc2NvcGUub3BlblVybCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNjb3BlLm9wZW5MaW5rcykge1xuICAgICAgY29uc3QgdXJsID0gKGV2ZW50RWwuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCk/LmRhdGFzZXQudXJsO1xuICAgICAgaWYgKHVybCkge1xuICAgICAgICBwamF4LmdvVG8odXJsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGluc3RhZ3JhbSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBzY3JvbGxiYXIgZWxlbWVudGlubmVyV2lkdGhcbiAgICogVE9ETyBub3QgdXNlZFxuICAgKi9cbiAgcHVibGljIG9uU2Nyb2xsKGV2ZW50OiBFdmVudCwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5zY29sbFdpdGgpIHtcbiAgICAgIGNvbnN0IGZhY3RvciA9IDM7XG4gICAgICB0aGlzLnNjb2xsV2l0aC5zY3JvbGxMZWZ0ID0gZXZlbnRFbC5zY3JvbGxMZWZ0IC8gZmFjdG9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2lkdGggaW5zaXRlIHRoZSBzY3JvbGxiYXIgb2YgdGhlIGF1dG9zY29sbGluZyB0aXRsZVxuICAgKiBUT0RPIG5vdCB1c2VkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0VGl0bGVXaWR0aCgpIHtcbiAgICBpZiAoIXRoaXMuc2NvbGxXaXRoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2NvbGxXaXRoLnF1ZXJ5U2VsZWN0b3IoXCIudGl0bGUtY29sXCIpPy5jbGllbnRXaWR0aCB8fCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aWR0aCBpbnNpdGUgdGhlIHNjcm9sbGJhciBvZiB0aGUgZHJhZ2FibGxlIC8gc2Nyb2xsYWJsZSBhcmVhXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0SW5zdGFncmFtV2lkdGgoKSB7XG4gICAgaWYgKCF0aGlzLnNjb3BlLm1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID1cbiAgICAgIChnZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53IC8gMykgKiB0aGlzLnNjb3BlLm1lZGlhLmRhdGEubGVuZ3RoO1xuICAgIHJldHVybiB3aWR0aDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBsb2FkTWVkaWEoKSB7XG4gICAgaWYgKCF0aGlzLnNjb3BlLmluc3RhZ3JhbUlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnN0YWdyYW0gaWQgaXMgcmVxdWlyZWQhXCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmluc3RhZ3JhbS5tZWRpYShcbiAgICAgICAgdGhpcy5zY29wZS5pbnN0YWdyYW1JZCxcbiAgICAgICAgdGhpcy5zY29wZS5saW1pdFxuICAgICAgKTtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICB0aGlzLnNjb3BlLm1lZGlhID0gcmVzcG9uc2UubWVkaWE7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJyZXNwb25zZVwiLCByZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoYEVycm9yOiBDYW4ndCBsb2FkIGluc3RhZ3JhbSBtZWRpYWAsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gICAgdGhpcy5zY29sbFdpdGggPSB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwiLnRpdGxlLXJvd1wiKTtcbiAgICByZXR1cm4gdGhpcy5sb2FkTWVkaWEoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJpbnN0YWdyYW1JZFwiLCBcImxpbWl0XCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFBqYXggfSBmcm9tIFwiQHJpYmFqcy9yb3V0ZXJcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9pbnN0YWdyYW0uY29tcG9uZW50Lmh0bWxcIjtcbmltcG9ydCB7IEluc3RhZ3JhbU1lZGlhLCBJbnN0YWdyYW1BcGlTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvc2hvcGlmeS10ZGFcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIG1lZGlhPzogSW5zdGFncmFtTWVkaWE7XG4gIGluc3RhZ3JhbUlkPzogc3RyaW5nO1xuICBvcGVuTGlua3M6IGJvb2xlYW47XG4gIGxpbWl0OiBudW1iZXI7XG4gIG9uVGFwOiBTaG9waWZ5VGRhSW5zdGFncmFtQ29tcG9uZW50W1wib25UYXBcIl07XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5VGRhSW5zdGFncmFtQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LXRkYS1pbnN0YWdyYW1cIjtcblxuICBwcm90ZWN0ZWQgaW5zdGFncmFtOiBJbnN0YWdyYW1BcGlTZXJ2aWNlO1xuXG4gIHB1YmxpYyBfZGVidWcgPSBmYWxzZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImluc3RhZ3JhbS1pZFwiLCBcIm9wZW4tbGlua3NcIiwgXCJsaW1pdFwiXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgbWVkaWE6IHVuZGVmaW5lZCxcbiAgICBvcGVuTGlua3M6IGZhbHNlLFxuICAgIGxpbWl0OiAwLFxuICAgIGluc3RhZ3JhbUlkOiB1bmRlZmluZWQsXG4gICAgb25UYXA6IHRoaXMub25UYXAsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluc3RhZ3JhbSA9IEluc3RhZ3JhbUFwaVNlcnZpY2UuZ2V0U2luZ2xldG9uKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeVRkYUluc3RhZ3JhbUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEp1c3Qgb3BlbiB0aGUgaW5zdGFncmFtIHVybFxuICAgKi9cbiAgcHVibGljIG9uVGFwKGV2ZW50OiBFdmVudCwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMuc2NvcGUub3BlbkxpbmtzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBqYXggPSBQamF4LmdldEluc3RhbmNlKFwibWFpblwiKTtcbiAgICBpZiAoIXBqYXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gZXZlbnRFbC5kYXRhc2V0LnVybDtcbiAgICBpZiAodXJsKSB7XG4gICAgICBwamF4LmdvVG8odXJsLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9hZE1lZGlhKCkge1xuICAgIGlmICghdGhpcy5zY29wZS5pbnN0YWdyYW1JZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgfVxuICAgIHRoaXMuaW5zdGFncmFtXG4gICAgICAubWVkaWEodGhpcy5zY29wZS5pbnN0YWdyYW1JZCwgdGhpcy5zY29wZS5saW1pdClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICB0aGlzLnNjb3BlLm1lZGlhID0gcmVzcG9uc2UubWVkaWEgfHwgW107XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGBFcnJvcjogQ2FuJ3QgbG9hZCBpbnN0YWdyYW0gbWVkaWFgLCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRNZWRpYSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImluc3RhZ3JhbUlkXCIsIFwibGltaXRcIl07XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmICh0aGlzICYmIHRoaXMuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEJBU0VfSE9TVF9VUkwgPSBcImh0dHBzOi8vdGhlLWRldmVsb3Blci1hcHAuYXJ0YW5kY29kZS5zdHVkaW9cIjtcbmV4cG9ydCBjb25zdCBCQVNFX0hPU1RfREVWX1VSTCA9IFwiaHR0cHM6Ly90ZGEtZGV2LmFydGFuZGNvZGUuc3R1ZGlvXCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9zb2NrZXQtaW8tY2xpZW50LmpzXCI7XG4iLCJleHBvcnQgeyBTb2NrZXQgfSBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xuaW1wb3J0ICogYXMgSW8gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcbmNvbnN0IGlvID0gSW8uaW87XG5leHBvcnQgeyBJbywgaW8gfTtcbiIsImV4cG9ydCB7fTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2RlcGVuZGVuY2llcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmluZGVycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nob3BpZnktdGRhLm1vZHVsZS5qc1wiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFnZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Bvc3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VzZXIuanNcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2ZhY2Vib29rLWFwaS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5zdGFncmFtLWFwaS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hvcGlmeS1hcGkvaW5kZXguanNcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL2RhdGEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lZGlhLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYWdpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lZGlhLXJlc3BvbnNlLmpzXCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9hcnRpY2xlLWltYWdlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hcnRpY2xlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hc3NldC1sb2NhbGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Fzc2V0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ibG9nLWNvbW1lbnRhYmxlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ibG9nLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZXRhZmllbGQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb2R1Y3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb2R1Y3RfaW1hZ2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb2R1Y3Rfb3B0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wcm9kdWN0X3ZhcmlhbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RoZW1lLmpzXCI7XG4iLCJpbXBvcnQgeyBCQVNFX0hPU1RfVVJMIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQmFzZUFwaVNlcnZpY2Uge1xuICBwdWJsaWMgaG9zdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGhvc3QgPSBCQVNFX0hPU1RfVVJMKSB7XG4gICAgaWYgKGhvc3Q/LmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgaG9zdCA9IGhvc3Quc3Vic3RyaW5nKDAsIGhvc3QubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gIH1cbn1cbiIsImltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgSUZiUmVxdWVzdCB9IGZyb20gXCIuLy4uL2ludGVyZmFjZXMvZmFjZWJvb2stYXBpL2Jhc2UuanNcIjtcbmltcG9ydCB7IEZiUGFnZSB9IGZyb20gXCIuLy4uL2ludGVyZmFjZXMvZmFjZWJvb2stYXBpL3BhZ2VzLmpzXCI7XG5pbXBvcnQgeyBJRmJQb3N0RGF0YSB9IGZyb20gXCIuLy4uL2ludGVyZmFjZXMvZmFjZWJvb2stYXBpL3Bvc3QuanNcIjtcbmltcG9ydCB7IEJhc2VBcGlTZXJ2aWNlIH0gZnJvbSBcIi4vYmFzZS5zZXJ2aWNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWNlYm9va0FwaVNlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBGYWNlYm9va0FwaVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGJhc2VVcmw6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoaG9zdD86IHN0cmluZykge1xuICAgIHN1cGVyKGhvc3QpO1xuICAgIHRoaXMuYmFzZVVybCA9IHRoaXMuaG9zdCArIFwiL2ZhY2Vib29rL2FwaVwiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oaG9zdD86IHN0cmluZykge1xuICAgIGlmIChGYWNlYm9va0FwaVNlcnZpY2UuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBGYWNlYm9va0FwaVNlcnZpY2UuaW5zdGFuY2U7XG4gICAgfVxuICAgIEZhY2Vib29rQXBpU2VydmljZS5pbnN0YW5jZSA9IG5ldyBGYWNlYm9va0FwaVNlcnZpY2UoaG9zdCk7XG4gICAgcmV0dXJuIEZhY2Vib29rQXBpU2VydmljZS5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgeW91ciBmYWNlYm9vayB1c2VyIHBhZ2VzIHlvdXIgdXNlciBoYXMgYWNjZXNzIHRvXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcGFnZXMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgSHR0cFNlcnZpY2UuZ2V0SlNPTjxJRmJSZXF1ZXN0PEZiUGFnZT4+KFxuICAgICAgYCR7dGhpcy5iYXNlVXJsfS91c2VyL3BhZ2VzYFxuICAgICk7XG4gICAgY29uc3QgcGFnZXMgPSByZXMuYm9keTtcbiAgICBjb25zb2xlLmRlYnVnKFwiW3NlcnZpY2VzOkZhY2Vib29rQXBpU2VydmljZV0gcGFnZXNcIiwgcGFnZXMpO1xuICAgIHJldHVybiBwYWdlcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwb3N0cygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXRKU09OPElGYlJlcXVlc3Q8SUZiUG9zdERhdGE+PihcbiAgICAgIGAke3RoaXMuYmFzZVVybH0vcG9zdHMvdXNlcmBcbiAgICApO1xuICAgIGNvbnN0IHBvc3RzID0gcmVzLmJvZHk7XG4gICAgY29uc29sZS5kZWJ1ZyhcIltzZXJ2aWNlczpGYWNlYm9va0FwaVNlcnZpY2VdIHBvc3RzXCIsIHBvc3RzKTtcbiAgICByZXR1cm4gcG9zdHM7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL2Jhc2Uuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmFjZWJvb2stYXBpLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2luc3RhZ3JhbS1hcGkuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbG9jYWxlcy5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hvcGlmeS1hcGktYXJ0aWNsZS5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5LWFwaS1ibG9nLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nob3BpZnktYXBpLXByb2R1Y3Quc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hvcGlmeS1hcGktdGhlbWUuc2VydmljZS5qc1wiO1xuIiwiaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBCYXNlQXBpU2VydmljZSB9IGZyb20gXCIuL2Jhc2Uuc2VydmljZS5qc1wiO1xuaW1wb3J0IHsgSW5zdGFncmFtTWVkaWFSZXNwb25zZSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2luc3RhZ3JhbS1hcGkvbWVkaWEtcmVzcG9uc2UuanNcIjtcblxuZXhwb3J0IGNsYXNzIEluc3RhZ3JhbUFwaVNlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBJbnN0YWdyYW1BcGlTZXJ2aWNlO1xuICBwdWJsaWMgYmFzZVVybDogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihob3N0Pzogc3RyaW5nKSB7XG4gICAgc3VwZXIoaG9zdCk7XG4gICAgdGhpcy5iYXNlVXJsID0gdGhpcy5ob3N0ICsgXCIvaW5zdGFncmFtL2FwaVwiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oaG9zdD86IHN0cmluZykge1xuICAgIGlmIChJbnN0YWdyYW1BcGlTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gSW5zdGFncmFtQXBpU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgSW5zdGFncmFtQXBpU2VydmljZS5pbnN0YW5jZSA9IG5ldyBJbnN0YWdyYW1BcGlTZXJ2aWNlKGhvc3QpO1xuICAgIHJldHVybiBJbnN0YWdyYW1BcGlTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIG1lZGlhKFxuICAgIGluc3RhZ3JhbUJ1c2luZXNzQWNjb3VudElEOiBzdHJpbmcsXG4gICAgbGltaXQgPSAwLFxuICAgIGZpZWxkcyA9IFwiY2FwdGlvbixjb21tZW50c19jb3VudCxpc19jb21tZW50X2VuYWJsZWQsbGlrZV9jb3VudCxtZWRpYV90eXBlLG1lZGlhX3VybCxwZXJtYWxpbmssdGltZXN0YW1wLGNoaWxkcmVue21lZGlhX3R5cGUsbWVkaWFfdXJsfVwiXG4gICkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVybH0vbWVkaWEvJHtpbnN0YWdyYW1CdXNpbmVzc0FjY291bnRJRH1gO1xuICAgIGNvbnN0IGRhdGE6IGFueSA9IHtcbiAgICAgIGZpZWxkcyxcbiAgICAgIGxpbWl0LFxuICAgIH07XG4gICAgaWYgKCh3aW5kb3cgYXMgYW55KS5TaG9waWZ5LnNob3ApIHtcbiAgICAgIGRhdGEuc2hvcCA9ICh3aW5kb3cgYXMgYW55KS5TaG9waWZ5LnNob3A7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgSHR0cFNlcnZpY2UuZ2V0SlNPTjxJbnN0YWdyYW1NZWRpYVJlc3BvbnNlPih1cmwsIGRhdGEpO1xuICAgIHJldHVybiByZXMuYm9keTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTG9jYWxlc1Jlc3RTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvaTE4blwiO1xuaW1wb3J0IHsgQkFTRV9IT1NUX1VSTCB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIExvY2FsZXNTZXJ2aWNlIGV4dGVuZHMgTG9jYWxlc1Jlc3RTZXJ2aWNlIHtcbiAgcHVibGljIHN0YXRpYyBpbnN0YW5jZTogTG9jYWxlc1NlcnZpY2U7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIGJhc2VVcmwgPSBCQVNFX0hPU1RfVVJMLFxuICAgIGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlID0gZmFsc2UsXG4gICAgc2hvd01pc3NpbmdUcmFuc2xhdGlvbiA9IGZhbHNlXG4gICkge1xuICAgIGxldCB1cmwgPSBgJHtiYXNlVXJsfS9zaG9waWZ5L2FwaS90aGVtZXMvJHtcbiAgICAgICh3aW5kb3cgYXMgYW55KS5TaG9waWZ5LnRoZW1lLmlkXG4gICAgfS9sb2NhbGVzYDtcbiAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLlNob3BpZnkuc2hvcCkge1xuICAgICAgdXJsICs9IGA/c2hvcD0keyh3aW5kb3cgYXMgYW55KS5TaG9waWZ5LnNob3B9YDtcbiAgICB9XG4gICAgc3VwZXIodXJsLCBkb05vdFRyYW5zbGF0ZURlZmF1bHRMYW5ndWFnZSwgc2hvd01pc3NpbmdUcmFuc2xhdGlvbik7XG4gICAgaWYgKExvY2FsZXNTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gTG9jYWxlc1NlcnZpY2UuaW5zdGFuY2U7XG4gICAgfVxuICAgIExvY2FsZXNTZXJ2aWNlLmluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U2luZ2xldG9uKFxuICAgIGJhc2VVcmwgPSBCQVNFX0hPU1RfVVJMLFxuICAgIGRvTm90VHJhbnNsYXRlRGVmYXVsdExhbmd1YWdlID0gZmFsc2UsXG4gICAgc2hvd01pc3NpbmdUcmFuc2xhdGlvbiA9IGZhbHNlXG4gICkge1xuICAgIGlmIChMb2NhbGVzU2VydmljZS5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIExvY2FsZXNTZXJ2aWNlLmluc3RhbmNlO1xuICAgIH1cbiAgICBMb2NhbGVzU2VydmljZS5pbnN0YW5jZSA9IG5ldyBMb2NhbGVzU2VydmljZShcbiAgICAgIGJhc2VVcmwsXG4gICAgICBkb05vdFRyYW5zbGF0ZURlZmF1bHRMYW5ndWFnZSxcbiAgICAgIHNob3dNaXNzaW5nVHJhbnNsYXRpb25cbiAgICApO1xuICAgIHJldHVybiBMb2NhbGVzU2VydmljZS5pbnN0YW5jZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2hvcGlmeVREQU1vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIE1vZHVsZVNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgc3RhdGljIF9vcHRpb25zOiBTaG9waWZ5VERBTW9kdWxlT3B0aW9ucztcbiAgcHVibGljIHN0YXRpYyBpbnN0YW5jZT86IE1vZHVsZVNlcnZpY2U7XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiovXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFNpbmdsZXRvbigpIHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFNpbmdsZXRvbiBvZiBNb2R1bGVTZXJ2aWNlIG5vdCBkZWZpbmVkLCBwbGVhc2UgY2FsbCBzZXRTaW5nbGV0b24gZmlyc3QhYFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNldFNpbmdsZXRvbihvcHRpb25zOiBTaG9waWZ5VERBTW9kdWxlT3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2luZ2xldG9uIG9mIE1vZHVsZVNlcnZpY2UgYWxyZWFkeSBkZWZpbmVkIWApO1xuICAgIH1cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBBcnRpY2xlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvc2hvcGlmeS1hcGkvaW5kZXguanNcIjtcbmltcG9ydCB7IEJhc2VBcGlTZXJ2aWNlIH0gZnJvbSBcIi4vYmFzZS5zZXJ2aWNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5QXBpQXJ0aWNsZVNlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBTaG9waWZ5QXBpQXJ0aWNsZVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGJhc2VVcmw6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoaG9zdD86IHN0cmluZykge1xuICAgIHN1cGVyKGhvc3QpO1xuICAgIHRoaXMuYmFzZVVybCA9IHRoaXMuaG9zdCArIFwiL3Nob3BpZnkvYXBpL2Jsb2dzXCI7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFNpbmdsZXRvbihob3N0Pzogc3RyaW5nKSB7XG4gICAgaWYgKFNob3BpZnlBcGlBcnRpY2xlU2VydmljZS5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIFNob3BpZnlBcGlBcnRpY2xlU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgU2hvcGlmeUFwaUFydGljbGVTZXJ2aWNlLmluc3RhbmNlID0gbmV3IFNob3BpZnlBcGlBcnRpY2xlU2VydmljZShob3N0KTtcbiAgICByZXR1cm4gU2hvcGlmeUFwaUFydGljbGVTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYXJ0aWNsZXNcbiAgICogQHBhcmFtIGJsb2dJZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGxpc3QoYmxvZ0lkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gSHR0cFNlcnZpY2UuZ2V0SlNPTjxBcnRpY2xlW10+KFxuICAgICAgYCR7dGhpcy5iYXNlVXJsfS8ke2Jsb2dJZH0vYXJ0aWNsZXNgXG4gICAgKS50aGVuKChyZXMpID0+IHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJbU2hvcGlmeUFwaUFydGljbGVTZXJ2aWNlXSBhcnRpY2xlc1wiLCByZXMuYm9keSk7XG4gICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFydGljbGVcbiAgICogQHBhcmFtIGJsb2dJZFxuICAgKiBAcGFyYW0gYXJ0aWNsZUlkXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0KGJsb2dJZDogbnVtYmVyLCBhcnRpY2xlSWQ6IG51bWJlcikge1xuICAgIHJldHVybiBIdHRwU2VydmljZS5nZXRKU09OPEFydGljbGU+KFxuICAgICAgYCR7dGhpcy5iYXNlVXJsfS8ke2Jsb2dJZH0vYXJ0aWNsZXMvJHthcnRpY2xlSWR9YFxuICAgICkudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiW1Nob3BpZnlBcGlBcnRpY2xlU2VydmljZV0gZ2V0IGFydGljbGVcIiwgcmVzKTtcbiAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBCbG9nIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvc2hvcGlmeS1hcGkvYmxvZy5qc1wiO1xuaW1wb3J0IHsgQmFzZUFwaVNlcnZpY2UgfSBmcm9tIFwiLi9iYXNlLnNlcnZpY2UuanNcIjtcblxuZXhwb3J0IGNsYXNzIFNob3BpZnlBcGlCbG9nc1NlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBTaG9waWZ5QXBpQmxvZ3NTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBiYXNlVXJsOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGhvc3Q/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihob3N0KTtcbiAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLmhvc3QgKyBcIi9zaG9waWZ5L2FwaS9ibG9nc1wiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oaG9zdD86IHN0cmluZykge1xuICAgIGlmIChTaG9waWZ5QXBpQmxvZ3NTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gU2hvcGlmeUFwaUJsb2dzU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgU2hvcGlmeUFwaUJsb2dzU2VydmljZS5pbnN0YW5jZSA9IG5ldyBTaG9waWZ5QXBpQmxvZ3NTZXJ2aWNlKGhvc3QpO1xuICAgIHJldHVybiBTaG9waWZ5QXBpQmxvZ3NTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYmxvZ3NcbiAgICovXG4gIHB1YmxpYyBhc3luYyBsaXN0KCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IEh0dHBTZXJ2aWNlLmdldEpTT048QmxvZ1tdPihgJHt0aGlzLmJhc2VVcmx9YCk7XG4gICAgY29uc3QgYmxvZ3MgPSByZXMuYm9keTtcbiAgICBjb25zb2xlLmRlYnVnKFwiW1Nob3BpZnlBcGlCbG9nc1NlcnZpY2VdIGJsb2dzXCIsIGJsb2dzKTtcbiAgICByZXR1cm4gYmxvZ3M7XG4gIH1cbn1cbiIsImltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIkByaWJhanMvZXZlbnRzXCI7XG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSBcIi4vLi4vaW50ZXJmYWNlcy9zaG9waWZ5LWFwaS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaW8sIFNvY2tldCB9IGZyb20gXCIuLi9kZXBlbmRlbmNpZXMvc29ja2V0LWlvLWNsaWVudC5qc1wiO1xuaW1wb3J0IHsgQmFzZUFwaVNlcnZpY2UgfSBmcm9tIFwiLi9iYXNlLnNlcnZpY2UuanNcIjtcblxuZXhwb3J0IGNsYXNzIFNob3BpZnlBcGlQcm9kdWN0U2VydmljZSBleHRlbmRzIEJhc2VBcGlTZXJ2aWNlIHtcbiAgcHVibGljIHN0YXRpYyBpbnN0YW5jZT86IFNob3BpZnlBcGlQcm9kdWN0U2VydmljZTtcblxuICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBzb2NrZXQ/OiBTb2NrZXQ7XG4gIHByb3RlY3RlZCBldmVudHMgPSBuZXcgRXZlbnREaXNwYXRjaGVyKFwic2hvcGlmeS1hcGktcHJvZHVjdC1zZXJ2aWNlXCIpO1xuICBwdWJsaWMgb246IEV2ZW50RGlzcGF0Y2hlcltcIm9uXCJdO1xuICBwdWJsaWMgb25jZTogRXZlbnREaXNwYXRjaGVyW1wib25jZVwiXTtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoaG9zdD86IHN0cmluZykge1xuICAgIHN1cGVyKGhvc3QpO1xuICAgIHRoaXMub24gPSB0aGlzLmV2ZW50cy5vbi5iaW5kKHRoaXMuZXZlbnRzKTtcbiAgICB0aGlzLm9uY2UgPSB0aGlzLmV2ZW50cy5vbmNlLmJpbmQodGhpcy5ldmVudHMpO1xuXG4gICAgdGhpcy5iYXNlVXJsID0gYCR7dGhpcy5ob3N0fS9zaG9waWZ5L2FwaS9wcm9kdWN0c2A7XG5cbiAgICBjb25zb2xlLmRlYnVnKFwiW1Nob3BpZnlBcGlQcm9kdWN0U2VydmljZV0gY29uc3RydWN0b3JcIik7XG4gICAgdGhpcy5zb2NrZXQgPSBpbyh7XG4gICAgICBwYXRoOiBgL3NvY2tldC5pby9zaG9waWZ5L2FwaS9wcm9kdWN0c2AsXG4gICAgICB0cmFuc3BvcnRzOiBbXCJ3ZWJzb2NrZXRcIiwgXCJwb2xsaW5nXCJdLFxuICAgIH0pO1xuICAgIHRoaXMuc29ja2V0Py5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpUHJvZHVjdFNlcnZpY2VdIGNvbm5lY3RcIik7XG4gICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyKFwiY29ubmVjdFwiKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc29ja2V0Py5vbihcImV4Y2VwdGlvblwiLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZXhjZXB0aW9uXCIsIGRhdGEpO1xuICAgICAgdGhpcy5ldmVudHMudHJpZ2dlcihcImV4Y2VwdGlvblwiLCBkYXRhKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc29ja2V0Py5vbihcImFsbFwiLCAocHJvZHVjdDogYW55KSA9PiB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiW1Nob3BpZnlBcGlQcm9kdWN0U2VydmljZV0gYWxsXCIsIHByb2R1Y3QpO1xuICAgICAgdGhpcy5ldmVudHMudHJpZ2dlcihcImFsbFwiLCBwcm9kdWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U2luZ2xldG9uKGhvc3Q/OiBzdHJpbmcpIHtcbiAgICBpZiAoU2hvcGlmeUFwaVByb2R1Y3RTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gU2hvcGlmeUFwaVByb2R1Y3RTZXJ2aWNlLmluc3RhbmNlO1xuICAgIH1cbiAgICBTaG9waWZ5QXBpUHJvZHVjdFNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgU2hvcGlmeUFwaVByb2R1Y3RTZXJ2aWNlKGhvc3QpO1xuICAgIHJldHVybiBTaG9waWZ5QXBpUHJvZHVjdFNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgbGlzdCBvZiBwcm9kdWN0cyBkaXJlY3RseSBmcm9tIHNob3BpZnkuXG4gICAqIEBwYXJhbSBsaW1pdFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGxpc3QobGltaXQ/OiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBsZXQgdXJsID0gYCR7dGhpcy5iYXNlVXJsfWA7XG4gICAgaWYgKGxpbWl0KSB7XG4gICAgICB1cmwgKz0gXCI/bGltaXQ9XCIgKyBsaW1pdDtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgSHR0cFNlcnZpY2UuZ2V0SlNPTjxQcm9kdWN0W10+KHVybCk7XG4gICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpUHJvZHVjdFNlcnZpY2VdIHByb2R1Y3RzXCIsIHJlcy5ib2R5KTtcbiAgICByZXR1cm4gcmVzLmJvZHk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYWxsKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0aGlzLnNvY2tldCkge1xuICAgICAgdGhpcy5zb2NrZXQuZW1pdChcImFsbFwiLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgSVRoZW1lIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvc2hvcGlmeS1hcGkvdGhlbWUuanNcIjtcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvc2hvcGlmeS1hcGkvYXNzZXQuanNcIjtcbmltcG9ydCB7IEFzc2V0TG9jYWxlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvc2hvcGlmeS1hcGkvYXNzZXQtbG9jYWxlLmpzXCI7XG5pbXBvcnQgeyBCYXNlQXBpU2VydmljZSB9IGZyb20gXCIuL2Jhc2Uuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2hvcGlmeUFwaVRoZW1lc1NlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBTaG9waWZ5QXBpVGhlbWVzU2VydmljZTtcblxuICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihob3N0Pzogc3RyaW5nKSB7XG4gICAgc3VwZXIoaG9zdCk7XG4gICAgdGhpcy5iYXNlVXJsID0gdGhpcy5ob3N0ICsgXCIvc2hvcGlmeS9hcGkvYmxvZ3NcIjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U2luZ2xldG9uKGhvc3Q/OiBzdHJpbmcpIHtcbiAgICBpZiAoU2hvcGlmeUFwaVRoZW1lc1NlcnZpY2UuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBTaG9waWZ5QXBpVGhlbWVzU2VydmljZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgU2hvcGlmeUFwaVRoZW1lc1NlcnZpY2UuaW5zdGFuY2UgPSBuZXcgU2hvcGlmeUFwaVRoZW1lc1NlcnZpY2UoaG9zdCk7XG4gICAgcmV0dXJuIFNob3BpZnlBcGlUaGVtZXNTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgdGhlbWVzXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbGlzdCgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXRKU09OPElUaGVtZVtdPihgL3Nob3BpZnkvYXBpL3RoZW1lc2ApO1xuICAgIGNvbnN0IHRoZW1lcyA9IHJlcy5ib2R5O1xuXG4gICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpVGhlbWVzU2VydmljZV0gdGhlbWVzXCIsIHRoZW1lcyk7XG4gICAgcmV0dXJuIHRoZW1lcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2NhbGVzKGlkOiBzdHJpbmcgfCBudW1iZXIsIHByb3BlcnR5UGF0aD86IHN0cmluZykge1xuICAgIGxldCB1cmwgPSBgL3Nob3BpZnkvYXBpL3RoZW1lcy8ke2lkfS9sb2NhbGVzYDtcbiAgICBpZiAocHJvcGVydHlQYXRoKSB7XG4gICAgICB1cmwgKz0gXCIvXCIgKyBwcm9wZXJ0eVBhdGg7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IEh0dHBTZXJ2aWNlLmdldEpTT04odXJsKTtcbiAgICBjb25zdCBsb2NhbGVzID0gcmVzLmJvZHk7XG4gICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpVGhlbWVzU2VydmljZV0gbG9jYWxlc1wiLCBsb2NhbGVzKTtcbiAgICByZXR1cm4gbG9jYWxlcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhc3NldHMoaWQ6IHN0cmluZyB8IG51bWJlciwga2V5Pzogc3RyaW5nKSB7XG4gICAgbGV0IHVybCA9IGAvc2hvcGlmeS9hcGkvdGhlbWVzLyR7aWR9L2Fzc2V0c2A7XG4gICAgaWYgKGtleSkge1xuICAgICAgdXJsICs9IFwiL1wiICsga2V5O1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXRKU09OPEFzc2V0W10+KHVybCk7XG4gICAgY29uc3QgYXNzZXRzID0gcmVzLmJvZHk7XG4gICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpVGhlbWVzU2VydmljZV0gYXNzZXRzXCIsIGFzc2V0cyk7XG4gICAgcmV0dXJuIGFzc2V0cztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhc3NldExvY2FsZXNMaXN0KGlkOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXRKU09OPEFzc2V0TG9jYWxlW10+KFxuICAgICAgYC9zaG9waWZ5L2FwaS90aGVtZXMvJHtpZH0vbG9jYWxlcy9saXN0YFxuICAgICk7XG4gICAgY29uc3QgYXNzZXRzID0gcmVzLmJvZHk7XG4gICAgY29uc29sZS5kZWJ1ZyhcIltTaG9waWZ5QXBpVGhlbWVzU2VydmljZV0gYXNzZXRzXCIsIGFzc2V0cyk7XG4gICAgcmV0dXJuIGFzc2V0cztcbiAgfVxufVxuIiwiaW1wb3J0IHsgUmliYU1vZHVsZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCAqIGFzIGJpbmRlcnMgZnJvbSBcIi4vYmluZGVycy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgZm9ybWF0dGVycyBmcm9tIFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlcyBmcm9tIFwiLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgY29tcG9uZW50cyBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBTaG9waWZ5VERBTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuL3R5cGVzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBzaG9waWZ5VERBTW9kdWxlOiBSaWJhTW9kdWxlPFNob3BpZnlUREFNb2R1bGVPcHRpb25zPiA9IHtcbiAgYmluZGVycyxcbiAgc2VydmljZXMsXG4gIGZvcm1hdHRlcnMsXG4gIGNvbXBvbmVudHMsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgaW5pdChvcHRpb25zID0ge30pIHtcbiAgICBzZXJ2aWNlcy5Nb2R1bGVTZXJ2aWNlLnNldFNpbmdsZXRvbihvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5LWNhcnQtY291bnQuYmluZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5LWltZy5iaW5kZXIuanNcIjtcbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFNob3BpZnlDYXJ0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU2hvcGlmeUNhcnRPYmplY3QgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFNldHMgdGhlIHNob3BpZnkgaXRlbXMgY291bnRcbiAqL1xuZXhwb3J0IGNsYXNzIFNob3BpZnlDYXJ0Q291bnRCaW5kZXIgZXh0ZW5kcyBCaW5kZXI8dm9pZCwgSFRNTEVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwic2hvcGlmeS1jYXJ0LWNvdW50XCI7XG5cbiAgcHJpdmF0ZSBfb25DYXJ0UmVxdWVzdENvbXBsZXRlKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgdGhpcy5lbC50ZXh0Q29udGVudCA9IFN0cmluZyhjYXJ0Lml0ZW1fY291bnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkNhcnRSZXF1ZXN0Q29tcGxldGUgPSB0aGlzLl9vbkNhcnRSZXF1ZXN0Q29tcGxldGUuYmluZCh0aGlzKTtcblxuICBwcml2YXRlIF9vbkNhcnRSZXF1ZXN0Q2hhbmdlZChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkge1xuICAgIHRoaXMuZWwudGV4dENvbnRlbnQgPSBTdHJpbmcoY2FydC5pdGVtX2NvdW50KTtcbiAgfVxuXG4gIHByaXZhdGUgb25DYXJ0UmVxdWVzdENoYW5nZWQgPSB0aGlzLl9vbkNhcnRSZXF1ZXN0Q2hhbmdlZC5iaW5kKHRoaXMpO1xuXG4gIHJvdXRpbmUoKSB7XG4gICAgLy9cbiAgfVxuXG4gIGJpbmQoKSB7XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9uKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlXCIsXG4gICAgICB0aGlzLm9uQ2FydFJlcXVlc3RDb21wbGV0ZVxuICAgICk7XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9uKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNoYW5nZWRcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdENoYW5nZWRcbiAgICApO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIFNob3BpZnlDYXJ0U2VydmljZS5zaG9waWZ5Q2FydEV2ZW50RGlzcGF0Y2hlci5vZmYoXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6Y29tcGxldGVcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdENvbXBsZXRlXG4gICAgKTtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub2ZmKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNoYW5nZWRcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdENoYW5nZWRcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBnZXRWaWV3cG9ydERpbWVuc2lvbnMsIHRocm90dGxlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpbWdVcmxGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vZm9ybWF0dGVycy9pbWctdXJsLmZvcm1hdHRlci5qc1wiO1xuXG5jb25zdCBQWF9PRkZTRVQgPSAxMDtcbmNvbnN0IE9WRVJXUklURV9PUklHSU5BTF9TUkMgPSB0cnVlO1xuXG4vKipcbiAqIHNob3BpZnktaW1nXG4gKiBMb2FkcyBhbiBzaG9waWZ5IGltYWdlIHdpdGggdGhlIGV4YWN0IHNpemUgZm9yIHRoZSBjdXJyZW50IGBpbWdgIGVsZW1lbnRcbiAqIHdpdGhvdXQgdGhlIG5lZWQgdG8gZ2V0IHRoZSByaWdodCBzaXplIG1hbnVhbGx5IG92ZXIgdGhlIGBpbWdfdXJsYCBmaWx0ZXIgLyBmb3JtYXR0ZXIuXG4gKiBUaGUgaW1hZ2Ugc291cmNlIHBhdGggaXMgc2V0IGJ5IHRoZSBgc3Jjc2V0YCBhbmQgYHNpemVzYCBhdHRyaWJ1dGVzIHRvIG1ha2UgdGhlbSByZXNwb25zaXZlLlxuICovXG5leHBvcnQgY2xhc3MgU2hvcGlmeUltZ0JpbmRlciBleHRlbmRzIEJpbmRlcjxzdHJpbmcsIEhUTUxJbWFnZUVsZW1lbnQ+IHtcbiAgc3RhdGljIGtleSA9IFwic2hvcGlmeS1pbWdcIjtcblxuICBwcml2YXRlIGluaXRpYWxTcmM/OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBvbGRJbWFnZVdpZHRoID0gKFBYX09GRlNFVCArIDEpICogLTE7XG5cbiAgcHJpdmF0ZSByZXNpemVPYnNlcnZlcj86IFJlc2l6ZU9ic2VydmVyO1xuXG4gIHByaXZhdGUgc2V0U3Jjc2V0KHdpZHRoOiBudW1iZXIpIHtcbiAgICAvLyBNYXggd2lkdGhcbiAgICBpZiAod2lkdGggPiA1NzYwKSB7XG4gICAgICB3aWR0aCA9IDU3NjA7XG4gICAgfVxuICAgIGxldCBjdXJyZW50U3Jjc2V0ID0gdGhpcy5lbC5zcmNzZXQ7XG4gICAgbGV0IGN1cnJlbnRTaXplcyA9IHRoaXMuZWwuc2l6ZXM7XG4gICAgaWYgKCFpbWdVcmxGb3JtYXR0ZXIucmVhZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hvcGlmeSBpbWdVcmxGb3JtYXR0ZXIgcmVhZCBtZXRob2QgaXMgbWlzc2luZyFcIik7XG4gICAgfVxuICAgIGNvbnN0IHZ3ID0gZ2V0Vmlld3BvcnREaW1lbnNpb25zKCkudztcbiAgICBjb25zdCBmaWx0ZXJTY2FsZSA9IE1hdGgucm91bmQod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSk7XG4gICAgY29uc3QgZmlsdGVyU2l6ZSA9IHdpZHRoICsgXCJ4XCI7XG4gICAgY29uc3QgbmV3U3JjID0gaW1nVXJsRm9ybWF0dGVyLnJlYWQoXG4gICAgICB0aGlzLmluaXRpYWxTcmMsXG4gICAgICBmaWx0ZXJTaXplLFxuICAgICAgZmlsdGVyU2NhbGUsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0aGlzLmVsXG4gICAgKTtcbiAgICBpZiAodHlwZW9mIGN1cnJlbnRTcmNzZXQgPT09IFwic3RyaW5nXCIgJiYgY3VycmVudFNyY3NldC5sZW5ndGggPiAwKSB7XG4gICAgICBjdXJyZW50U3Jjc2V0ID0gY3VycmVudFNyY3NldCArIFwiLCBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFNyY3NldCA9IFwiXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY3VycmVudFNpemVzID09PSBcInN0cmluZ1wiICYmIGN1cnJlbnRTaXplcy5sZW5ndGggPiAwKSB7XG4gICAgICBjdXJyZW50U2l6ZXMgPSBjdXJyZW50U2l6ZXMgKyBcIiwgXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRTaXplcyA9IFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IG5ld1NyY3NldCA9IGAke2N1cnJlbnRTcmNzZXR9JHtuZXdTcmN9ICR7d2lkdGh9d2A7XG4gICAgY29uc3QgbmV3U2l6ZXMgPSBgJHtjdXJyZW50U2l6ZXN9ICh3aWR0aDogJHt2d31weCkgJHt3aWR0aH1weGA7XG4gICAgdGhpcy5lbC5zcmNzZXQgPSBuZXdTcmNzZXQ7XG4gICAgdGhpcy5lbC5zaXplcyA9IG5ld1NpemVzO1xuICAgIGlmIChPVkVSV1JJVEVfT1JJR0lOQUxfU1JDKSB7XG4gICAgICB0aGlzLmVsLnNyYyA9IG5ld1NyYztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vblJlc2l6ZSgpIHtcbiAgICBjb25zdCBjdXJyZW50SW1hZ2VXaWR0aCA9IHRoaXMuZWwub2Zmc2V0V2lkdGg7XG4gICAgY29uc3QgY3VycmVudFNyY3NldCA9IHRoaXMuZWwuc3Jjc2V0O1xuICAgIGlmIChcbiAgICAgIHRoaXMub2xkSW1hZ2VXaWR0aCArIFBYX09GRlNFVCA8IGN1cnJlbnRJbWFnZVdpZHRoICYmXG4gICAgICBjdXJyZW50SW1hZ2VXaWR0aCA+IDAgJiZcbiAgICAgICFjdXJyZW50U3Jjc2V0LmluY2x1ZGVzKGAke2N1cnJlbnRJbWFnZVdpZHRofXdgKVxuICAgICkge1xuICAgICAgdGhpcy5zZXRTcmNzZXQoY3VycmVudEltYWdlV2lkdGgpO1xuICAgICAgdGhpcy5vbGRJbWFnZVdpZHRoID0gY3VycmVudEltYWdlV2lkdGg7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblJlc2l6ZSA9IHRocm90dGxlKHRoaXMuX29uUmVzaXplLmJpbmQodGhpcykpO1xuXG4gIGJpbmQoZWw6IEhUTUxJbWFnZUVsZW1lbnQpIHtcbiAgICB0aGlzLmluaXRpYWxTcmMgPSBlbC5zcmM7XG5cbiAgICBpZiAod2luZG93LlJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgdW5iaW5kKGVsOiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZSk7XG4gICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIgJiYgdGhpcy5yZXNpemVPYnNlcnZlci51bm9ic2VydmUpIHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGVsKTtcbiAgICB9XG4gIH1cblxuICByb3V0aW5lKGVsOiBIVE1MSW1hZ2VFbGVtZW50LCBzcmM6IHN0cmluZykge1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICBpZiAoIWltZ1VybEZvcm1hdHRlci5yZWFkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaG9waWZ5IGltZ1VybEZvcm1hdHRlciByZWFkIG1ldGhvZCBpcyBtaXNzaW5nIVwiKTtcbiAgICB9XG4gICAgaWYgKHNyYykge1xuICAgICAgdGhpcy5fb25SZXNpemUoKTtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5vblJlc2l6ZSwgMjAwKTtcbiAgICAgIC8vIFNldCBzcmMgYXR0cmlidXRlIGlmIGl0IGlzIG5vdCBzZXQgc3RhdGljYWxseVxuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5pbml0aWFsU3JjIHx8XG4gICAgICAgIHR5cGVvZiB0aGlzLmluaXRpYWxTcmMgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgdGhpcy5pbml0aWFsU3JjLmxlbmd0aCA8PSAwXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5pbml0aWFsU3JjID0gc3JjO1xuICAgICAgICBlbC5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFRlbXBsYXRlRnVuY3Rpb24sXG4gIEh0dHBTZXJ2aWNlLFxuICBTY29wZUJhc2UsXG59IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2FkZHJlc3Nlcy1mb3JtLmNvbXBvbmVudC5odG1sXCI7XG5cbi8vIFRPRE8gbW92ZSB0byBnZW5lcmFsIHZhbGlkYXRpb24gY29tcG9uZW50IGNsYXNzIHdlIGNhbiBleHRlbmQgZnJvbVxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUnVsZSB7XG4gIHJlcXVpcmVkOiBib29sZWFuO1xuICBtaW5sZW5ndGg/OiBudW1iZXI7XG4gIG1heGxlbmd0aD86IG51bWJlcjtcbiAgbWF4PzogbnVtYmVyO1xuICBtaW4/OiBudW1iZXI7XG4gIGVycm9yOiBzdHJpbmc7XG4gIGlzRW1haWw/OiBib29sZWFuO1xuICBpc1Bob25lPzogYm9vbGVhbjtcbiAgb25seU51bWJlcnM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25PYmplY3Qge1xuICB2YWxpZDogYm9vbGVhbjtcbiAgcnVsZXM/OiB7XG4gICAgW2tleTogc3RyaW5nXTogVmFsaWRhdGlvblJ1bGU7XG4gIH07XG59XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIC8vIGZvcm06IHtcbiAgLy8gICBjdXN0b21lcjoge1xuICAvLyAgICAgZW1haWw6IHN0cmluZztcbiAgLy8gICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gIC8vICAgfTtcbiAgLy8gfTtcblxuICBlZGl0QWRkcmVzczoge1xuICAgIFthZGRyZXNzSUQ6IHN0cmluZ106IHtcbiAgICAgIHZhbGlkYXRpb246IFZhbGlkYXRpb25PYmplY3Q7XG4gICAgfTtcbiAgfTtcblxuICBzaG93Rm9ybUlkOiBzdHJpbmc7XG5cbiAgY3JlYXRlQWRkcmVzczoge1xuICAgIHZhbGlkYXRpb246IFZhbGlkYXRpb25PYmplY3Q7XG4gIH07XG5cbiAgZWRpdDogU2hvcGlmeUFkZHJlc3Nlc0NvbXBvbmVudFtcImVkaXRcIl07XG4gIGNyZWF0ZTogU2hvcGlmeUFkZHJlc3Nlc0NvbXBvbmVudFtcImNyZWF0ZVwiXTtcbiAgZGVsZXRlOiBTaG9waWZ5QWRkcmVzc2VzQ29tcG9uZW50W1wiZGVsZXRlXCJdO1xufVxuXG5leHBvcnQgY2xhc3MgU2hvcGlmeUFkZHJlc3Nlc0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwic2hvcGlmeS1hZGRyZXNzZXMtZm9ybVwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgZWRpdEFkZHJlc3NGb3JtOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIGNyZWF0ZUFkZHJlc3NGb3JtOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGNyZWF0ZUFkZHJlc3M6IHtcbiAgICAgIHZhbGlkYXRpb246IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHNob3dGb3JtSWQ6IFwiXCIsXG4gICAgZWRpdEFkZHJlc3M6IHt9LFxuICAgIGVkaXQ6IHRoaXMuZWRpdCxcbiAgICBjcmVhdGU6IHRoaXMuY3JlYXRlLFxuICAgIGRlbGV0ZTogdGhpcy5kZWxldGUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5QWRkcmVzc2VzQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwdWJsaWMgZWRpdChpZDogc3RyaW5nLCBldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBmb3JtID0gdGhpcy5xdWVyeVNlbGVjdG9yKFxuICAgICAgYGZvcm1bYWN0aW9uPVwiL2FjY291bnQvYWRkcmVzc2VzLyR7aWR9XWBcbiAgICApIGFzIEhUTUxGb3JtRWxlbWVudDtcblxuICAgIGlmICghZm9ybSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0b3AgbmF0aXZlIHN1Ym1pdFxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnZhbGlkYXRlKGZvcm0sIHRoaXMuc2NvcGUuZWRpdEFkZHJlc3NbaWRdLnZhbGlkYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUuZWRpdEFkZHJlc3NbaWRdLnZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgIGZvcm0uc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1Ym1pdCBhbiBuZXcgYWRkcmVzc1xuICAgKi9cbiAgcHVibGljIGNyZWF0ZShldmVudDogRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuY3JlYXRlQWRkcmVzc0Zvcm0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzdG9wIG5hdGl2ZSBzdWJtaXRcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy52YWxpZGF0ZSh0aGlzLmNyZWF0ZUFkZHJlc3NGb3JtLCB0aGlzLnNjb3BlLmNyZWF0ZUFkZHJlc3MudmFsaWRhdGlvbik7XG5cbiAgICBpZiAodGhpcy5zY29wZS5jcmVhdGVBZGRyZXNzLnZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgIHRoaXMuY3JlYXRlQWRkcmVzc0Zvcm0uc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL2FwaS9yZWZlcmVuY2UvY3VzdG9tZXJzL2N1c3RvbWVyX2FkZHJlc3NcbiAgLy8gL2FjY291bnQvYWRkcmVzc2VzL3tpZH1cbiAgcHVibGljIGFzeW5jIGRlbGV0ZShpZDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IEh0dHBTZXJ2aWNlLmRlbGV0ZShgL2FjY291bnQvYWRkcmVzc2VzLyR7aWR9YCwge30sIFwianNvblwiKTtcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZGVsZXRlIGVycm9yXCIsIGVycm9yKTtcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0VmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLmVkaXRBZGRyZXNzRm9ybSA9IHRoaXMucXVlcnlTZWxlY3RvcihcbiAgICAgICdmb3JtW2FjdGlvbl49XCIvYWNjb3VudC9hZGRyZXNzZXMvXCJdJ1xuICAgICkgYXMgSFRNTEZvcm1FbGVtZW50O1xuICAgIHRoaXMuZWRpdEFkZHJlc3NGb3JtLmF0dHIoXCJub3ZhbGlkYXRlXCIsIFwiXCIpO1xuICAgIHRoaXMuZWRpdEFkZHJlc3NGb3JtLmFkZENsYXNzKFwibmVlZHMtdmFsaWRhdGlvblwiKTtcblxuICAgIHRoaXMuY3JlYXRlQWRkcmVzc0Zvcm0gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnZm9ybVthY3Rpb249XCIvYWNjb3VudC9hZGRyZXNzZXNcIl0nXG4gICAgKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5jcmVhdGVBZGRyZXNzRm9ybS5hdHRyKFwibm92YWxpZGF0ZVwiLCBcIlwiKTtcbiAgICB0aGlzLmNyZWF0ZUFkZHJlc3NGb3JtLmFkZENsYXNzKFwibmVlZHMtdmFsaWRhdGlvblwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZShmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIHZhbGlkYXRpb25TY29wZTogVmFsaWRhdGlvbk9iamVjdCkge1xuICAgIHZhbGlkYXRpb25TY29wZS52YWxpZCA9IGZvcm0uY2hlY2tWYWxpZGl0eSgpO1xuICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcIndhcy12YWxpZGF0ZWRcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMuaW5pdFZhbGlkYXRpb24oKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICAvLyBPbmx5IHNldCB0aGUgY29tcG9uZW50IHRlbXBsYXRlIGlmIHRoZXJlIG5vIGNoaWxkcyBhbHJlYWR5XG4gICAgaWYgKHRoaXMgJiYgaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFBqYXggfSBmcm9tIFwiQHJpYmFqcy9yb3V0ZXJcIjtcbmltcG9ydCB7IFNob3BpZnlDYXJ0U2VydmljZSwgU2hvcGlmeUNhcnRPYmplY3QgfSBmcm9tIFwiQHJpYmFqcy9zaG9waWZ5XCI7XG5pbXBvcnQgeyBvblJvdXRlIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3VybFwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vY2FydC1idXR0b24uY29tcG9uZW50Lmh0bWxcIjtcblxuaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgY2FydEl0ZW1Db3VudDogbnVtYmVyO1xuICB0b2dnbGU6IFNob3BpZnlDYXJ0QnV0dG9uQ29tcG9uZW50W1widG9nZ2xlXCJdO1xuICBwZW5kaW5nOiBib29sZWFuO1xuICBzdGFydEFkZEFuaW1hdGlvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFNob3BpZnlDYXJ0QnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LWNhcnQtYnV0dG9uXCI7XG5cbiAgcHVibGljIHN0YXRpYyBjYXJ0VXJsID0gXCIvY2FydFwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGNhcnRJdGVtQ291bnQ6IDAsXG4gICAgdG9nZ2xlOiB0aGlzLnRvZ2dsZSxcbiAgICBwZW5kaW5nOiBmYWxzZSxcbiAgICBzdGFydEFkZEFuaW1hdGlvbjogZmFsc2UsXG4gIH07XG5cbiAgcHJvdGVjdGVkIHNldCBjYXJ0KGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgdGhpcy5zY29wZS5jYXJ0SXRlbUNvdW50ID0gY2FydC5pdGVtX2NvdW50O1xuICAgIHRoaXMuc2NvcGUuc3RhcnRBZGRBbmltYXRpb24gPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zY29wZS5zdGFydEFkZEFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIH0sIDMwMDApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5Q2FydEJ1dHRvbkNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZShldmVudDogRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKG9uUm91dGUoU2hvcGlmeUNhcnRCdXR0b25Db21wb25lbnQuY2FydFVybCkpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFNob3BpZnlDYXJ0QnV0dG9uQ29tcG9uZW50LmNhcnRVcmwpIHtcbiAgICAgICAgY29uc3QgcGpheCA9IFBqYXguZ2V0SW5zdGFuY2UoXCJtYWluXCIpO1xuICAgICAgICBpZiAoIXBqYXgpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFNob3BpZnlDYXJ0QnV0dG9uQ29tcG9uZW50LmNhcnRVcmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGpheC5nb1RvKFNob3BpZnlDYXJ0QnV0dG9uQ29tcG9uZW50LmNhcnRVcmwsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmJlZm9yZUJpbmQoKTtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub24oXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6c3RhcnRcIixcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5zY29wZS5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9uKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlXCIsXG4gICAgICAoY2FydDogU2hvcGlmeUNhcnRPYmplY3QpID0+IHtcbiAgICAgICAgaWYgKGNhcnQpIHtcbiAgICAgICAgICB0aGlzLmNhcnQgPSBjYXJ0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NvcGUucGVuZGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICAgIHJldHVybiBTaG9waWZ5Q2FydFNlcnZpY2UuZ2V0KCkuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihcIltTaG9waWZ5Q2FydEJ1dHRvbkNvbXBvbmVudF1cIiwgZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHtcbiAgU2hvcGlmeUNhcnRMaW5lSXRlbSxcbiAgU2hvcGlmeUNhcnRPYmplY3QsXG59IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBTaG9waWZ5Q2FydFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvaW5kZXguanNcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9jYXJ0LWl0ZW0uY29tcG9uZW50Lmh0bWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGlkOiBTaG9waWZ5Q2FydExpbmVJdGVtW1wiaWRcIl07XG4gIHRpdGxlPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcInRpdGxlXCJdO1xuICBwcmljZT86IFNob3BpZnlDYXJ0TGluZUl0ZW1bXCJpZFwiXTtcbiAgbGluZVByaWNlPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcImxpbmVfcHJpY2VcIl07XG4gIGxpbmVOdW1iZXI/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wibGluZV9udW1iZXJcIl07XG4gIHF1YW50aXR5OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wicXVhbnRpdHlcIl07XG4gIHNrdT86IFNob3BpZnlDYXJ0TGluZUl0ZW1bXCJza3VcIl07XG4gIGdyYW1zPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcImdyYW1zXCJdO1xuICB2ZW5kb3I/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1widmVuZG9yXCJdO1xuICBwcm9wZXJ0aWVzPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcInByb3BlcnRpZXNcIl07XG4gIGdpZnRDYXJkPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcImdpZnRfY2FyZFwiXTtcbiAgdXJsPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcInVybFwiXTtcbiAgaW1hZ2U/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wiaW1hZ2VcIl07XG4gIGhhbmRsZT86IFNob3BpZnlDYXJ0TGluZUl0ZW1bXCJoYW5kbGVcIl07XG4gIHJlcXVpcmVzU2hpcHBpbmc/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wicmVxdWlyZXNfc2hpcHBpbmdcIl07XG4gIHByb2R1Y3RUaXRsZT86IFNob3BpZnlDYXJ0TGluZUl0ZW1bXCJwcm9kdWN0X3RpdGxlXCJdO1xuICBwcm9kdWN0RGVzY3JpcHRpb24/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wicHJvZHVjdF9kZXNjcmlwdGlvblwiXTtcbiAgcHJvZHVjdFR5cGU/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wicHJvZHVjdF90eXBlXCJdO1xuICBwcm9kdWN0SWQ/OiBTaG9waWZ5Q2FydExpbmVJdGVtW1wicHJvZHVjdF9pZFwiXTtcbiAgdmFyaWFudFRpdGxlPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcInZhcmlhbnRfdGl0bGVcIl07XG4gIHZhcmlhbnRPcHRpb25zPzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcInZhcmlhbnRfb3B0aW9uc1wiXTtcbiAgdmFyaWFudElkOiBTaG9waWZ5Q2FydExpbmVJdGVtW1widmFyaWFudF9pZFwiXTtcbiAga2V5PzogU2hvcGlmeUNhcnRMaW5lSXRlbVtcImtleVwiXTtcblxuICByZW1vdmU6IFNob3BpZnlDYXJ0SXRlbUNvbXBvbmVudFtcInJlbW92ZVwiXTtcbiAgaW5jcmVhc2U6IFNob3BpZnlDYXJ0SXRlbUNvbXBvbmVudFtcImluY3JlYXNlXCJdO1xuICBkZWNyZWFzZTogU2hvcGlmeUNhcnRJdGVtQ29tcG9uZW50W1wiZGVjcmVhc2VcIl07XG4gIG9uSW5wdXRRdWFudGl0eUNoYW5nZWQ6IFNob3BpZnlDYXJ0SXRlbUNvbXBvbmVudFtcIm9uSW5wdXRRdWFudGl0eUNoYW5nZWRcIl07XG5cbiAgcGVuZGluZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFNob3BpZnlDYXJ0SXRlbUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwic2hvcGlmeS1jYXJ0LWl0ZW1cIjtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiaWRcIixcbiAgICAgIFwidGl0bGVcIixcbiAgICAgIFwicHJpY2VcIixcbiAgICAgIFwibGluZS1wcmljZVwiLFxuICAgICAgXCJsaW5lLW51bWJlclwiLFxuICAgICAgXCJxdWFudGl0eVwiLFxuICAgICAgXCJza3VcIixcbiAgICAgIFwiZ3JhbXNcIixcbiAgICAgIFwidmVuZG9yXCIsXG4gICAgICBcInByb3BlcnRpZXNcIixcbiAgICAgIFwiZ2lmdC1jYXJkXCIsXG4gICAgICBcInVybFwiLFxuICAgICAgXCJpbWFnZVwiLFxuICAgICAgXCJoYW5kbGVcIixcbiAgICAgIFwicmVxdWlyZXMtc2hpcHBpbmdcIixcbiAgICAgIFwicHJvZHVjdC10aXRsZVwiLFxuICAgICAgXCJwcm9kdWN0LWRlc2NyaXB0aW9uXCIsXG4gICAgICBcInByb2R1Y3QtdHlwZVwiLFxuICAgICAgXCJwcm9kdWN0LWlkXCIsXG4gICAgICBcInZhcmlhbnQtdGl0bGVcIixcbiAgICAgIFwidmFyaWFudC1vcHRpb25zXCIsXG4gICAgICBcInZhcmlhbnQtaWRcIixcbiAgICAgIFwia2V5XCIsXG4gICAgXTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJpZFwiLCBcInZhcmlhbnRJZFwiLCBcInF1YW50aXR5XCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHRoaXMuZ2V0U2NvcGVEZWZhdWx0cygpO1xuXG4gIHByb3RlY3RlZCBnZXRTY29wZURlZmF1bHRzKCk6IFNjb3BlIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IDAsXG4gICAgICBwcm9kdWN0SWQ6IDAsXG4gICAgICB2YXJpYW50SWQ6IDAsXG4gICAgICBwcm9wZXJ0aWVzOiBbXSxcbiAgICAgIHF1YW50aXR5OiAwLFxuICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZSxcbiAgICAgIGluY3JlYXNlOiB0aGlzLmluY3JlYXNlLFxuICAgICAgZGVjcmVhc2U6IHRoaXMuZGVjcmVhc2UsXG4gICAgICBvbklucHV0UXVhbnRpdHlDaGFuZ2VkOiB0aGlzLm9uSW5wdXRRdWFudGl0eUNoYW5nZWQsXG4gICAgICBwZW5kaW5nOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5Q2FydEl0ZW1Db21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmUoKSB7XG4gICAgdGhpcy5kZWJ1ZyhcImRlY3JlYXNlXCIsIHRoaXMuc2NvcGUudmFyaWFudElkKTtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2UuY2hhbmdlKHRoaXMuc2NvcGUudmFyaWFudElkLCAwKVxuICAgICAgLnRoZW4oKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSA9PiB7XG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCBmb3IgYSBxdWFudGl0eSBpbmNyZWFzZSArIGJ1dHRvbiBpbiB0aGUgdGVtcGxhdGVcbiAgICovXG4gIHB1YmxpYyBpbmNyZWFzZSgpIHtcbiAgICB0aGlzLmRlYnVnKFwiaW5jcmVhc2VcIiwgdGhpcy5zY29wZS5xdWFudGl0eSk7XG4gICAgdGhpcy5zY29wZS5xdWFudGl0eSsrO1xuICAgIFNob3BpZnlDYXJ0U2VydmljZS5jaGFuZ2UodGhpcy5zY29wZS52YXJpYW50SWQsIHRoaXMuc2NvcGUucXVhbnRpdHkpXG4gICAgICAudGhlbigoY2FydDogU2hvcGlmeUNhcnRPYmplY3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhcnQ7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIGZvciBhIHF1YW50aXR5IGRlY3JlYXNlIC0gYnV0dG9uIGluIHRoZSB0ZW1wbGF0ZVxuICAgKi9cbiAgcHVibGljIGRlY3JlYXNlKCkge1xuICAgIHRoaXMuZGVidWcoXCJkZWNyZWFzZVwiLCB0aGlzLnNjb3BlLnF1YW50aXR5KTtcbiAgICB0aGlzLnNjb3BlLnF1YW50aXR5LS07XG4gICAgaWYgKHRoaXMuc2NvcGUucXVhbnRpdHkgPCAwKSB7XG4gICAgICB0aGlzLnNjb3BlLnF1YW50aXR5ID0gMDtcbiAgICB9XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLmNoYW5nZSh0aGlzLnNjb3BlLnZhcmlhbnRJZCwgdGhpcy5zY29wZS5xdWFudGl0eSlcbiAgICAgIC50aGVuKChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmRlYnVnKFwiU2hvcGlmeUNhcnRTZXJ2aWNlIGNoYW5nZWRcIiwgY2FydCk7XG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCBmb3IgYSBjaGFuZ2VhYmxlIHF1YW50aXR5IGlucHV0IGZpZWxkXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGh0bWxcbiAgICogIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgcnYtb24tY2hhbmdlPVwib25JbnB1dFF1YW50aXR5Q2hhbmdlZFwiIHJ2LXZhbHVlPVwicXVhbnRpdHlcIiAvPlxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBvbklucHV0UXVhbnRpdHlDaGFuZ2VkKCkge1xuICAgIHRoaXMuZGVidWcoXCJvbklucHV0UXVhbnRpdHlDaGFuZ2VkXCIpO1xuICAgIFNob3BpZnlDYXJ0U2VydmljZS5jaGFuZ2UodGhpcy5zY29wZS52YXJpYW50SWQsIHRoaXMuc2NvcGUucXVhbnRpdHkpXG4gICAgICAudGhlbigoY2FydDogU2hvcGlmeUNhcnRPYmplY3QpID0+IHtcbiAgICAgICAgdGhpcy5kZWJ1ZyhcIlNob3BpZnlDYXJ0U2VydmljZSBjaGFuZ2VkXCIsIGNhcnQpO1xuICAgICAgICByZXR1cm4gY2FydDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DYXJ0VXBkYXRlKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbUZyb21DYXJ0KGNhcnQpO1xuICAgIGlmICghaXRlbSkge1xuICAgICAgdGhpcy5kZWJ1ZyhcIkl0ZW0gbm90IGZvdW5kLCBwcm9iYWJseSBpdGVtIHdhcyByZW1vdmVkLlwiKTtcbiAgICAgIHN1cGVyLnJlbW92ZSgpOyAvLyBSZW1vdmUgZWxlbWVudFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZGVidWcoXCJ1cGRhdGUgaXRlbSBmcm9tIGNhcnRcIik7XG5cbiAgICAvLyB0aGlzLnNjb3BlLmlkID0gaXRlbS5pZDtcbiAgICB0aGlzLnNjb3BlLnRpdGxlID0gaXRlbS50aXRsZTtcbiAgICB0aGlzLnNjb3BlLnByaWNlID0gaXRlbS5wcmljZTtcbiAgICB0aGlzLnNjb3BlLmxpbmVQcmljZSA9IGl0ZW0ubGluZV9wcmljZTtcbiAgICB0aGlzLnNjb3BlLmxpbmVOdW1iZXIgPSBpdGVtLmxpbmVfbnVtYmVyO1xuICAgIHRoaXMuc2NvcGUucXVhbnRpdHkgPSBpdGVtLnF1YW50aXR5O1xuICAgIHRoaXMuc2NvcGUuc2t1ID0gaXRlbS5za3U7XG4gICAgdGhpcy5zY29wZS5ncmFtcyA9IGl0ZW0uZ3JhbXM7XG4gICAgdGhpcy5zY29wZS52ZW5kb3IgPSBpdGVtLnZlbmRvcjtcbiAgICB0aGlzLnNjb3BlLnByb3BlcnRpZXMgPSBpdGVtLnByb3BlcnRpZXM7XG4gICAgdGhpcy5zY29wZS5naWZ0Q2FyZCA9IGl0ZW0uZ2lmdF9jYXJkO1xuICAgIHRoaXMuc2NvcGUudXJsID0gaXRlbS51cmw7XG4gICAgdGhpcy5zY29wZS5pbWFnZSA9IGl0ZW0uaW1hZ2U7XG4gICAgdGhpcy5zY29wZS5oYW5kbGUgPSBpdGVtLmhhbmRsZTtcbiAgICB0aGlzLnNjb3BlLnJlcXVpcmVzU2hpcHBpbmcgPSBpdGVtLnJlcXVpcmVzX3NoaXBwaW5nO1xuICAgIHRoaXMuc2NvcGUucHJvZHVjdFRpdGxlID0gaXRlbS5wcm9kdWN0X3RpdGxlO1xuICAgIHRoaXMuc2NvcGUucHJvZHVjdERlc2NyaXB0aW9uID0gaXRlbS5wcm9kdWN0X2Rlc2NyaXB0aW9uO1xuICAgIHRoaXMuc2NvcGUucHJvZHVjdFR5cGUgPSBpdGVtLnByb2R1Y3RfdHlwZTtcbiAgICB0aGlzLnNjb3BlLnByb2R1Y3RJZCA9IGl0ZW0ucHJvZHVjdF9pZDtcbiAgICB0aGlzLnNjb3BlLnZhcmlhbnRUaXRsZSA9IGl0ZW0udmFyaWFudF90aXRsZTtcbiAgICB0aGlzLnNjb3BlLnZhcmlhbnRPcHRpb25zID0gaXRlbS52YXJpYW50X29wdGlvbnM7XG4gICAgLy8gdGhpcy5zY29wZS52YXJpYW50SWQgPSBpdGVtLnZhcmlhbnRfaWQ7XG4gICAgdGhpcy5zY29wZS5rZXkgPSBpdGVtLmtleTtcblxuICAgIGlmICh0aGlzLnNjb3BlLnF1YW50aXR5ID09PSAwKSB7XG4gICAgICBzdXBlci5yZW1vdmUoKTsgLy8gUmVtb3ZlIGVsZW1lbnRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SXRlbUZyb21DYXJ0KGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGNhcnQuaXRlbXMpIHtcbiAgICAgIC8vIENvbXBhcmUga2V5XG4gICAgICBpZiAoaXRlbS5rZXkgJiYgdGhpcy5zY29wZS5rZXkpIHtcbiAgICAgICAgaWYgKGl0ZW0ua2V5ID09PSB0aGlzLnNjb3BlLmtleSkge1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDb21wYXJlIGlkIGFuZCB2YXJpYW50SWRcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGl0ZW0uaWQgPT09IHRoaXMuc2NvcGUuaWQgJiZcbiAgICAgICAgICBpdGVtLnZhcmlhbnRfaWQgPT09IHRoaXMuc2NvcGUudmFyaWFudElkXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIC8vIGNvbnN0IGNhcnQgPSBhd2FpdCBTaG9waWZ5Q2FydFNlcnZpY2UuZ2V0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DYXJ0UmVxdWVzdFN0YXJ0KCkge1xuICAgIHRoaXMuc2NvcGUucGVuZGluZyA9IHRydWU7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DYXJ0UmVxdWVzdENvbXBsZXRlKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgdGhpcy5kZWJ1ZyhcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6Y29tcGxldGVcIiwgY2FydCk7XG4gICAgdGhpcy5vbkNhcnRVcGRhdGUoY2FydCk7XG4gICAgdGhpcy5zY29wZS5wZW5kaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIGNhcnQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMuZGVidWcoXCJhZnRlckJpbmRcIiwgdGhpcy5zY29wZSk7XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9uKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OnN0YXJ0XCIsXG4gICAgICB0aGlzLm9uQ2FydFJlcXVlc3RTdGFydCxcbiAgICAgIHRoaXNcbiAgICApO1xuXG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9uKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlXCIsXG4gICAgICB0aGlzLm9uQ2FydFJlcXVlc3RDb21wbGV0ZSxcbiAgICAgIHRoaXNcbiAgICApO1xuXG4gICAgY29uc3QgY2FydCA9IGF3YWl0IFNob3BpZnlDYXJ0U2VydmljZS5nZXQoKTtcbiAgICB0aGlzLm9uQ2FydFVwZGF0ZShjYXJ0KTtcbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIFNob3BpZnlDYXJ0U2VydmljZS5zaG9waWZ5Q2FydEV2ZW50RGlzcGF0Y2hlci5vZmYoXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6c3RhcnRcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdFN0YXJ0LFxuICAgICAgdGhpc1xuICAgICk7XG5cbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub2ZmKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlXCIsXG4gICAgICB0aGlzLm9uQ2FydFJlcXVlc3RDb21wbGV0ZSxcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7XG4gIFNob3BpZnlDYXJ0TGluZUl0ZW0sXG4gIFNob3BpZnlDYXJ0T2JqZWN0LFxuICBTaG9waWZ5Q3VzdG9tZXJBZGRyZXNzLFxuICBTaG9waWZ5U2hpcHBpbmdSYXRlcyxcbiAgU2hvcGlmeVNoaXBwaW5nUmF0ZXNOb3JtYWxpemVkLFxufSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU2hvcGlmeUNhcnRTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRJbnB1dFZhbHVlLCBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9jYXJ0LmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCB8IG51bGw7XG4gIHNoaXBwaW5nQWRkcmVzczogU2hvcGlmeUN1c3RvbWVyQWRkcmVzcyB8IG51bGw7XG4gIGVzdGltYXRlU2hpcHBpbmdSYXRlOiBib29sZWFuO1xuICBzaGlwcGluZ1JhdGVzOiBTaG9waWZ5U2hpcHBpbmdSYXRlc05vcm1hbGl6ZWQ7XG4gIHJlbW92ZUl0ZW06IFNob3BpZnlDYXJ0Q29tcG9uZW50W1wicmVtb3ZlSXRlbVwiXTtcbiAgaW5jcmVhc2VJdGVtOiBTaG9waWZ5Q2FydENvbXBvbmVudFtcImluY3JlYXNlSXRlbVwiXTtcbiAgZGVjcmVhc2VJdGVtOiBTaG9waWZ5Q2FydENvbXBvbmVudFtcImRlY3JlYXNlSXRlbVwiXTtcbiAgZ2V0SXRlbTogU2hvcGlmeUNhcnRDb21wb25lbnRbXCJnZXRJdGVtXCJdO1xuICBvbkl0ZW1RdWFudGl0eUNoYW5nZWQ6IFNob3BpZnlDYXJ0Q29tcG9uZW50W1wib25JdGVtUXVhbnRpdHlDaGFuZ2VkXCJdO1xuICBwZW5kaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgU2hvcGlmeUNhcnRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInNob3BpZnktY2FydFwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wic2hpcHBpbmctYWRkcmVzc1wiLCBcImVzdGltYXRlLXNoaXBwaW5nLXJhdGVcIl07XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0gdGhpcy5nZXRTY29wZURlZmF1bHRzKCk7XG5cbiAgcHJvdGVjdGVkIGdldFNjb3BlRGVmYXVsdHMoKTogU2NvcGUge1xuICAgIHJldHVybiB7XG4gICAgICBjYXJ0OiBTaG9waWZ5Q2FydFNlcnZpY2UuY2FydCxcbiAgICAgIHNoaXBwaW5nQWRkcmVzczogbnVsbCxcbiAgICAgIGVzdGltYXRlU2hpcHBpbmdSYXRlOiBmYWxzZSxcbiAgICAgIHNoaXBwaW5nUmF0ZXM6IFtdLFxuICAgICAgcmVtb3ZlSXRlbTogdGhpcy5yZW1vdmVJdGVtLFxuICAgICAgaW5jcmVhc2VJdGVtOiB0aGlzLmluY3JlYXNlSXRlbSxcbiAgICAgIGRlY3JlYXNlSXRlbTogdGhpcy5kZWNyZWFzZUl0ZW0sXG4gICAgICBnZXRJdGVtOiB0aGlzLmdldEl0ZW0sXG4gICAgICBvbkl0ZW1RdWFudGl0eUNoYW5nZWQ6IHRoaXMub25JdGVtUXVhbnRpdHlDaGFuZ2VkLFxuICAgICAgcGVuZGluZzogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgY2FydChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCB8IG51bGwpIHtcbiAgICAvLyBUT0RPIGNoZWNrIGlmIGNhcnQgdmFsdWVzIGFyZSBjaGFuZ2VkXG4gICAgdGhpcy5zY29wZS5jYXJ0ID0gY2FydDtcblxuICAgIGlmICh0aGlzLnNjb3BlLnNoaXBwaW5nQWRkcmVzcyAmJiB0aGlzLnNjb3BlLmVzdGltYXRlU2hpcHBpbmdSYXRlKSB7XG4gICAgICBTaG9waWZ5Q2FydFNlcnZpY2UuZ2V0U2hpcHBpbmdSYXRlcyh0aGlzLnNjb3BlLnNoaXBwaW5nQWRkcmVzcywgdHJ1ZSwge1xuICAgICAgICB0cmlnZ2VyT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICB0cmlnZ2VyT25Db21wbGV0ZTogZmFsc2UsXG4gICAgICAgIHRyaWdnZXJPblN0YXJ0OiBmYWxzZSxcbiAgICAgIH0pLnRoZW4oXG4gICAgICAgIChcbiAgICAgICAgICBzaGlwcGluZ1JhdGVzOiBTaG9waWZ5U2hpcHBpbmdSYXRlcyB8IFNob3BpZnlTaGlwcGluZ1JhdGVzTm9ybWFsaXplZFxuICAgICAgICApID0+IHtcbiAgICAgICAgICB0aGlzLnNjb3BlLnNoaXBwaW5nUmF0ZXMgPVxuICAgICAgICAgICAgc2hpcHBpbmdSYXRlcyBhcyBTaG9waWZ5U2hpcHBpbmdSYXRlc05vcm1hbGl6ZWQ7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBjYXJ0KCk6IFNob3BpZnlDYXJ0T2JqZWN0IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2NvcGUuY2FydCB8fCBudWxsO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5Q2FydENvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUl0ZW0obGluZUl0ZW06IFNob3BpZnlDYXJ0TGluZUl0ZW0pIHtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2UuY2hhbmdlKGxpbmVJdGVtLnZhcmlhbnRfaWQsIDApXG4gICAgICAudGhlbigoY2FydDogU2hvcGlmeUNhcnRPYmplY3QpID0+IHtcbiAgICAgICAgLy8gdGhpcy5jYXJ0ID0gY2FydDtcbiAgICAgICAgcmV0dXJuIGNhcnQ7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGluY3JlYXNlSXRlbShsaW5lSXRlbTogU2hvcGlmeUNhcnRMaW5lSXRlbSkge1xuICAgIGxpbmVJdGVtLnF1YW50aXR5Kys7XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLmNoYW5nZShsaW5lSXRlbS52YXJpYW50X2lkLCBsaW5lSXRlbS5xdWFudGl0eSlcbiAgICAgIC50aGVuKChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkgPT4ge1xuICAgICAgICAvLyB0aGlzLmNhcnQgPSBjYXJ0O1xuICAgICAgICByZXR1cm4gY2FydDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZGVjcmVhc2VJdGVtKGxpbmVJdGVtOiBTaG9waWZ5Q2FydExpbmVJdGVtKSB7XG4gICAgbGluZUl0ZW0ucXVhbnRpdHktLTtcbiAgICBpZiAobGluZUl0ZW0ucXVhbnRpdHkgPCAwKSB7XG4gICAgICBsaW5lSXRlbS5xdWFudGl0eSA9IDA7XG4gICAgfVxuICAgIFNob3BpZnlDYXJ0U2VydmljZS5jaGFuZ2UobGluZUl0ZW0udmFyaWFudF9pZCwgbGluZUl0ZW0ucXVhbnRpdHkpXG4gICAgICAudGhlbigoY2FydDogU2hvcGlmeUNhcnRPYmplY3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhcnQ7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIGZvciBhIGNoYW5nZWFibGUgcXVhbnRpdHkgaW5wdXQgZmllbGRcbiAgICogQGV4YW1wbGVcbiAgICogYGBgaHRtbFxuICAgKiAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBydi1vbi1jaGFuZ2U9XCJvbkl0ZW1RdWFudGl0eUNoYW5nZWRcIiBydi12YWx1ZT1cInF1YW50aXR5XCIgLz5cbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgb25JdGVtUXVhbnRpdHlDaGFuZ2VkKFxuICAgIGxpbmVJdGVtOiBTaG9waWZ5Q2FydExpbmVJdGVtLFxuICAgIGV2ZW50OiBFdmVudCxcbiAgICBzY29wZTogU2NvcGUsXG4gICAgaHRtbEVsOiBIVE1MSW5wdXRFbGVtZW50XG4gICkge1xuICAgIGlmICghaHRtbEVsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJJbnB1dCBlbGVtZW50IG5vdCBmb3VuZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV3VmFsdWUgPSBOdW1iZXIoZ2V0SW5wdXRWYWx1ZShodG1sRWwpKTtcbiAgICBpZiAobmV3VmFsdWUgPT09IGxpbmVJdGVtLnF1YW50aXR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxpbmVJdGVtLnF1YW50aXR5ID0gbmV3VmFsdWU7XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLmNoYW5nZShsaW5lSXRlbS52YXJpYW50X2lkLCBsaW5lSXRlbS5xdWFudGl0eSlcbiAgICAgIC50aGVuKChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmRlYnVnKFwiU2hvcGlmeUNhcnRTZXJ2aWNlIGNoYW5nZWRcIiwgY2FydCk7XG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbGluZSBpdGVtIGJ5IGlkXG4gICAqIEBwYXJhbSBpZFxuICAgKi9cbiAgcHVibGljIGdldEl0ZW0oaWQ6IG51bWJlciB8IHN0cmluZyk6IFNob3BpZnlDYXJ0TGluZUl0ZW0gfCBudWxsIHtcbiAgICBpZCA9IE51bWJlcihpZCk7XG4gICAgY29uc3QgaXRlbSA9XG4gICAgICB0aGlzLnNjb3BlLmNhcnQ/Lml0ZW1zLmZpbmQoKGl0ZW0pID0+IE51bWJlcihpdGVtLmlkKSA9PT0gaWQpIHx8IG51bGw7XG4gICAgdGhpcy5kZWJ1ZyhcImdldEl0ZW1cIiwgaWQsIGl0ZW0sIHRoaXMuc2NvcGUuY2FydD8uaXRlbXMpO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQ2FydFJlcXVlc3RTdGFydCgpIHtcbiAgICB0aGlzLnNjb3BlLnBlbmRpbmcgPSB0cnVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQ2FydFJlcXVlc3RDb21wbGV0ZShjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkge1xuICAgIGlmIChjYXJ0KSB7XG4gICAgICB0aGlzLmNhcnQgPSBjYXJ0O1xuICAgIH1cbiAgICB0aGlzLnNjb3BlLnBlbmRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBiZWZvcmVCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmJlZm9yZUJpbmQoKTtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub24oXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6c3RhcnRcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdFN0YXJ0LFxuICAgICAgdGhpc1xuICAgICk7XG5cbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub24oXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6Y29tcGxldGVcIixcbiAgICAgIHRoaXMub25DYXJ0UmVxdWVzdENvbXBsZXRlLFxuICAgICAgdGhpc1xuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIub2ZmKFxuICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OnN0YXJ0XCIsXG4gICAgICB0aGlzLm9uQ2FydFJlcXVlc3RTdGFydCxcbiAgICAgIHRoaXNcbiAgICApO1xuXG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLm9mZihcbiAgICAgIFwiU2hvcGlmeUNhcnQ6cmVxdWVzdDpjb21wbGV0ZVwiLFxuICAgICAgdGhpcy5vbkNhcnRSZXF1ZXN0Q29tcGxldGUsXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBhZnRlckJpbmQoKSB7XG4gICAgdGhpcy5kZWJ1ZyhcImFmdGVyQmluZFwiLCB0aGlzLnNjb3BlKTtcbiAgICBpZiAoIXRoaXMuY2FydCkge1xuICAgICAgdGhpcy5jYXJ0ID0gYXdhaXQgU2hvcGlmeUNhcnRTZXJ2aWNlLmdldCgpO1xuICAgIH1cbiAgICBhd2FpdCBzdXBlci5hZnRlckJpbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICAvLyBPbmx5IHNldCB0aGUgY29tcG9uZW50IHRlbXBsYXRlIGlmIHRoZXJlIG5vIGNoaWxkcyBhbHJlYWR5XG4gICAgaWYgKGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9jb21tZW50cy1mb3JtLmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvblJ1bGUge1xuICByZXF1aXJlZDogYm9vbGVhbjtcbiAgbWlubGVuZ3RoPzogbnVtYmVyO1xuICBtYXhsZW5ndGg/OiBudW1iZXI7XG4gIG1heD86IG51bWJlcjtcbiAgbWluPzogbnVtYmVyO1xuICBlcnJvcjogc3RyaW5nO1xuICBpc0VtYWlsPzogYm9vbGVhbjtcbiAgaXNQaG9uZT86IGJvb2xlYW47XG4gIG9ubHlOdW1iZXJzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uT2JqZWN0IHtcbiAgdmFsaWQ6IGJvb2xlYW47XG4gIHJ1bGVzPzoge1xuICAgIFtrZXk6IHN0cmluZ106IFZhbGlkYXRpb25SdWxlO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBmb3JtOiB7XG4gICAgY3VzdG9tZXI6IHtcbiAgICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIGxvZ2luQ3VzdG9tZXI6IHtcbiAgICB2YWxpZGF0aW9uOiBWYWxpZGF0aW9uT2JqZWN0O1xuICB9O1xuICBjcmVhdGVDdXN0b21lcjoge1xuICAgIHZhbGlkYXRpb246IFZhbGlkYXRpb25PYmplY3Q7XG4gIH07XG4gIHJlY292ZXJDdXN0b21lcjoge1xuICAgIHZhbGlkYXRpb246IFZhbGlkYXRpb25PYmplY3Q7XG4gIH07XG4gIHBvc3Q6IFNob3BpZnlDb21tZW50c0Zvcm1Db21wb25lbnRbXCJwb3N0XCJdO1xufVxuXG5leHBvcnQgY2xhc3MgU2hvcGlmeUNvbW1lbnRzRm9ybUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwic2hvcGlmeS1jb21tZW50cy1mb3JtXCI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBuZXdDb21tZW50Rm9ybTogSFRNTEZvcm1FbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICBmb3JtOiB7XG4gICAgICBjdXN0b21lcjoge1xuICAgICAgICBlbWFpbDogXCJcIixcbiAgICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbG9naW5DdXN0b21lcjoge1xuICAgICAgdmFsaWRhdGlvbjoge1xuICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlQ3VzdG9tZXI6IHtcbiAgICAgIHZhbGlkYXRpb246IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHJlY292ZXJDdXN0b21lcjoge1xuICAgICAgdmFsaWRhdGlvbjoge1xuICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgcG9zdDogdGhpcy5wb3N0LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeUNvbW1lbnRzRm9ybUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QgY29tbWVudFxuICAgKi9cbiAgcHVibGljIHBvc3QoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLm5ld0NvbW1lbnRGb3JtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTm8gY29tbWVudCBmb3JtIGZvdW5kXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0b3AgbmF0aXZlIHN1Ym1pdFxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnZhbGlkYXRlKHRoaXMubmV3Q29tbWVudEZvcm0sIHRoaXMuc2NvcGUubG9naW5DdXN0b21lci52YWxpZGF0aW9uKTtcblxuICAgIGlmICh0aGlzLnNjb3BlLmxvZ2luQ3VzdG9tZXIudmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgdGhpcy5uZXdDb21tZW50Rm9ybS5zdWJtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5pdFZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5uZXdDb21tZW50Rm9ybSA9IHRoaXMucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2NvbW1lbnRfZm9ybVwiXG4gICAgKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5uZXdDb21tZW50Rm9ybS5zZXRBdHRyaWJ1dGUoXCJub3ZhbGlkYXRlXCIsIFwiXCIpO1xuICAgIHRoaXMubmV3Q29tbWVudEZvcm0uY2xhc3NMaXN0LmFkZChcIm5lZWRzLXZhbGlkYXRpb25cIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGUoZm9ybTogSFRNTEZvcm1FbGVtZW50LCB2YWxpZGF0aW9uU2NvcGU6IFZhbGlkYXRpb25PYmplY3QpIHtcbiAgICB2YWxpZGF0aW9uU2NvcGUudmFsaWQgPSBmb3JtLmNoZWNrVmFsaWRpdHkoKTtcbiAgICBmb3JtLmNsYXNzTGlzdC5hZGQoXCJ3YXMtdmFsaWRhdGVkXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGFmdGVyQmluZCgpIHtcbiAgICB0aGlzLmluaXRWYWxpZGF0aW9uKCk7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmICh0aGlzICYmIGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vY29udGFjdC1mb3JtLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgeyBzZWxlY3RBbGwsIGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHsgc3RyaXBIdG1sIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL3R5cGUuanNcIjtcblxuLy8gVE9ETyBtb3ZlIHRvIGdlbmVyYWwgdmFsaWRhdGlvbiBjb21wb25lbnQgY2xhc3Mgd2UgY2FuIGV4dGVuZCBmcm9tXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25PYmplY3Qge1xuICBmaWVsZHM6IHtcbiAgICBbbmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuICB2YWxpZDogYm9vbGVhbjtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGZvcm06IFZhbGlkYXRpb25PYmplY3Q7XG4gIHNlbmQ6IFNob3BpZnlDb250YWN0Rm9ybUNvbXBvbmVudFtcInNlbmRcIl07XG4gIHNlbGVjdEFsbDogU2hvcGlmeUNvbnRhY3RGb3JtQ29tcG9uZW50W1wic2VsZWN0QWxsXCJdO1xufVxuXG5leHBvcnQgY2xhc3MgU2hvcGlmeUNvbnRhY3RGb3JtQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LWNvbnRhY3QtZm9ybVwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgZm9ybT86IEhUTUxGb3JtRWxlbWVudDtcblxuICBwdWJsaWMgc2NvcGU6IFNjb3BlID0ge1xuICAgIGZvcm06IHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBmaXJzdE5hbWU6IFwiXCIsXG4gICAgICAgIGxhc3ROYW1lOiBcIlwiLFxuICAgICAgICBmdWxsTmFtZTogXCJcIixcbiAgICAgICAgY29tcGFueTogXCJcIixcbiAgICAgICAgcGhvbmU6IFwiXCIsXG4gICAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgICBtZXNzYWdlOiBcIlwiLFxuICAgICAgfSxcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgICAvKiogc2VuZCBmb3JtIGZ1bmN0aW9uICovXG4gICAgc2VuZDogdGhpcy5zZW5kLFxuICAgIC8qKiBzZWxlY3QgYWxsIHRleHQgZnVuY3Rpb24gKi9cbiAgICBzZWxlY3RBbGw6IHRoaXMuc2VsZWN0QWxsLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeUNvbnRhY3RGb3JtQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCB0aGUgY29udGFjdCBmb3JtIHVzaW5nIGEgZm9ybSBzdWJtaXQgcmVxdWVzdCB3aXRoIGJlc3Qgc2hvcGlmeSBmb3JtIHN1cHBvcnRcbiAgICovXG4gIHB1YmxpYyBzZW5kKGV2ZW50OiBFdmVudCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc2NvcGUuZm9ybS5maWVsZHMpIHtcbiAgICAgIGlmICh0aGlzLnNjb3BlLmZvcm0uZmllbGRzW2tleV0pIHtcbiAgICAgICAgdGhpcy5zY29wZS5mb3JtLmZpZWxkc1trZXldID0gc3RyaXBIdG1sKHRoaXMuc2NvcGUuZm9ybS5maWVsZHNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3RvcCBuYXRpdmUgc3VibWl0XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy52YWxpZGF0ZSh0aGlzLmZvcm0sIHRoaXMuc2NvcGUuZm9ybSk7XG5cbiAgICBpZiAodGhpcy5zY29wZS5mb3JtLnZhbGlkKSB7XG4gICAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlbGVjdEFsbChldmVudDogRXZlbnQsIHNjb3BlOiBhbnksIGV2ZW50RWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICBzZWxlY3RBbGwoZXZlbnRFbCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGUoZm9ybTogSFRNTEZvcm1FbGVtZW50LCB2YWxpZGF0aW9uU2NvcGU6IFZhbGlkYXRpb25PYmplY3QpIHtcbiAgICB2YWxpZGF0aW9uU2NvcGUudmFsaWQgPSBmb3JtLmNoZWNrVmFsaWRpdHkoKTtcbiAgICB2YWxpZGF0aW9uU2NvcGUuZXJyb3IgPSBmb3JtLnZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcIndhcy12YWxpZGF0ZWRcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICB0aGlzLmZvcm0gPSB0aGlzLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZm9ybVwiKVswXTtcblxuICAgIC8vIEZvciBjdXN0b20gc3R5bGUgZm9ybSB2YWxpZGF0aW9uLCBzZWUgaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4xL2NvbXBvbmVudHMvZm9ybXMvI2N1c3RvbS1zdHlsZXNcbiAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChcIm5lZWRzLXZhbGlkYXRpb25cIik7XG4gICAgdGhpcy5mb3JtLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIiwgXCJcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmICh0aGlzICYmIGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgZWxlbWVudElzVmlzaWJsZSwgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vZGVidWctYmFyLmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5RGVidWdCYXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInNob3BpZnktZGVidWctYmFyXCI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJ0aGVtZS1uYW1lXCJdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBhbnkgPSB7XG4gICAgaGFzUHJldmlld0JhcjogZmFsc2UsXG4gICAgaGFzQWRtaW5CYXI6IGZhbHNlLFxuICAgIHRvZ2dsZUJhcjogdGhpcy50b2dnbGVCYXIsXG4gICAgaGlkZTogdGhpcy5oaWRlLFxuICAgIGhpZGRlbjogZmFsc2UsXG4gIH07XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBwcm90ZWN0ZWQgcHJldmlld0JhcjogSFRNTElGcmFtZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIGFkbWluQmFyOiBIVE1MSUZyYW1lRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeURlYnVnQmFyQ29tcG9uZW50Lm9ic2VydmVkQXR0cmlidXRlcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHRoaXMuZGVidWcoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIiwgbmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlLCBuYW1lc3BhY2UpO1xuICAgIC8vIGluamVjdHMgdGhlIGNoYW5nZWQgYXR0cmlidXRlcyB0byBzY29wZVxuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSk7XG4gIH1cblxuICBwdWJsaWMgaGlkZSgpIHtcbiAgICB0aGlzLnNjb3BlLmhpZGRlbiA9ICF0aGlzLnNjb3BlLmhpZGRlbjtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGVCYXIoZm9yY2VIaWRlID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5wcmV2aWV3QmFyKSB7XG4gICAgICBpZiAoZm9yY2VIaWRlID09PSB0cnVlIHx8IGVsZW1lbnRJc1Zpc2libGUodGhpcy5wcmV2aWV3QmFyKSkge1xuICAgICAgICAvLyB0aGlzLmRlYnVnKCdoaWRlIHByZXZpZXdiYXInKTtcbiAgICAgICAgdGhpcy5wcmV2aWV3QmFyLnNldEF0dHJpYnV0ZShcImhpZGRlblwiLCBcIlwiKTtcbiAgICAgICAgLy8gdGhpcy4kcHJldmlld0Jhci5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzLmRlYnVnKCdzaG93IHByZXZpZXdiYXInKTtcbiAgICAgICAgdGhpcy5wcmV2aWV3QmFyLnJlbW92ZUF0dHJpYnV0ZShcImhpZGRlblwiKTtcbiAgICAgICAgLy8gdGhpcy4kcHJldmlld0Jhci5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRtaW5CYXIpIHtcbiAgICAgIGlmIChmb3JjZUhpZGUgPT09IHRydWUgfHwgZWxlbWVudElzVmlzaWJsZSh0aGlzLmFkbWluQmFyKSkge1xuICAgICAgICAvLyB0aGlzLmRlYnVnKCdoaWRlIGFkbWluYmFyJyk7XG4gICAgICAgIHRoaXMuYWRtaW5CYXIuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIFwiXCIpO1xuICAgICAgICAvLyB0aGlzLiRhZG1pbkJhci5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzLmRlYnVnKCdzaG93IGFkbWluYmFyJyk7XG4gICAgICAgIHRoaXMuYWRtaW5CYXIucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICAgICAgICAvLyB0aGlzLiRhZG1pbkJhci5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyB0aGlzLmRlYnVnKCdiZWZvcmVCaW5kJyk7XG4gICAgdGhpcy5wcmV2aWV3QmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICBcInByZXZpZXctYmFyLWlmcmFtZVwiXG4gICAgKSBhcyBIVE1MSUZyYW1lRWxlbWVudCB8IG51bGw7XG4gICAgdGhpcy5hZG1pbkJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgXCJhZG1pbi1iYXItaWZyYW1lXCJcbiAgICApIGFzIEhUTUxJRnJhbWVFbGVtZW50IHwgbnVsbDtcblxuICAgIGlmICh0aGlzLnByZXZpZXdCYXIpIHtcbiAgICAgIHRoaXMuc2NvcGUuaGFzUHJldmlld0JhciA9IHRydWU7XG4gICAgICB0aGlzLnRvZ2dsZUJhcih0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmV2aWV3QmFyID0gbnVsbDtcbiAgICAgIHRoaXMuc2NvcGUuaGFzUHJldmlld0JhciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFkbWluQmFyKSB7XG4gICAgICB0aGlzLnNjb3BlLmhhc0FkbWluQmFyID0gdHJ1ZTtcbiAgICAgIHRoaXMudG9nZ2xlQmFyKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkbWluQmFyID0gbnVsbDtcbiAgICAgIHRoaXMuc2NvcGUuaGFzQWRtaW5CYXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmICh0aGlzICYmIGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gZXhwb3J0ICogZnJvbSAnLi9zaG9waWZ5LXNlY3Rpb24uY29tcG9uZW50JztcbmV4cG9ydCB7IFNob3BpZnlBZGRyZXNzZXNDb21wb25lbnQgfSBmcm9tIFwiLi9hZGRyZXNzZXMtZm9ybS9hZGRyZXNzZXMtZm9ybS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlDYXJ0Q29tcG9uZW50IH0gZnJvbSBcIi4vY2FydC9jYXJ0LmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgU2hvcGlmeUNhcnRCdXR0b25Db21wb25lbnQgfSBmcm9tIFwiLi9jYXJ0LWJ1dHRvbi9jYXJ0LWJ1dHRvbi5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlDYXJ0SXRlbUNvbXBvbmVudCB9IGZyb20gXCIuL2NhcnQtaXRlbS9jYXJ0LWl0ZW0uY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBTaG9waWZ5Q29tbWVudHNGb3JtQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tbWVudHMtZm9ybS9jb21tZW50cy1mb3JtLmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IHsgU2hvcGlmeUNvbnRhY3RGb3JtQ29tcG9uZW50IH0gZnJvbSBcIi4vY29udGFjdC1mb3JtL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlEZWJ1Z0JhckNvbXBvbmVudCB9IGZyb20gXCIuL2RlYnVnLWJhci9kZWJ1Zy1iYXIuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBTaG9waWZ5TGlua2xpc3RDb21wb25lbnQgfSBmcm9tIFwiLi9saW5rbGlzdC9saW5rbGlzdC5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlMb2dpbkZvcm1Db21wb25lbnQgfSBmcm9tIFwiLi9sb2dpbi1mb3JtL2xvZ2luLWZvcm0uY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBTaG9waWZ5UHJvZHVjdENvbXBvbmVudCB9IGZyb20gXCIuL3Byb2R1Y3QvcHJvZHVjdC5jb21wb25lbnQuanNcIjtcbmV4cG9ydCB7IFNob3BpZnlQcm9kdWN0SXRlbUNvbXBvbmVudCB9IGZyb20gXCIuL3Byb2R1Y3QtaXRlbS9wcm9kdWN0LWl0ZW0uY29tcG9uZW50LmpzXCI7XG5leHBvcnQgeyBTaG9waWZ5UHJvZHVjdFNjcm9sbGJhckNvbXBvbmVudCB9IGZyb20gXCIuL3Byb2R1Y3Qtc2Nyb2xsYmFyL3Byb2R1Y3Qtc2Nyb2xsYmFyLmNvbXBvbmVudC5qc1wiO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiQHJpYmFqcy9ldmVudHNcIjtcbmltcG9ydCB7IGhhc0NoaWxkTm9kZXNUcmltIH0gZnJvbSBcIkByaWJhanMvdXRpbHMvc3JjL2RvbS5qc1wiO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuL2xpbmtsaXN0LmNvbXBvbmVudC5odG1sXCI7XG5cbmltcG9ydCB7IExpbmtsaXN0LCBMaW5rbGlzdExpbmsgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgLy8gUHJvcGVydGllc1xuICAvKiogVGhlIGxpbmtsaXN0IGFzIGEganNvbiBzdHJpbmcgKi9cbiAgbGlua2xpc3Q/OiBMaW5rbGlzdDtcbiAgLyoqIFNldHMgdGhlIGxpbmtsaXN0IGJ5IGhpcyBuYW1lICovXG4gIGhhbmRsZT86IHN0cmluZztcbiAgLyoqIElmIHRoZSBuYXZpZ2F0aW9uIHNob3VsZCBiZSBkaXNwbGF5ZWQgYXMgcGlsbHMgKi9cbiAgcGlsbHM6IGJvb2xlYW47XG4gIC8qKiBJZiB0aGUgbmF2aWdhdGlvbiBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHZlcnRpY2FsbHkgKi9cbiAgdmVydGljYWw6IGJvb2xlYW47XG4gIC8qKiBTZXQgdGhpcyBvcHRpb24gdG8gdHJ1ZSBpZiB0b2dnbGVhYmxlIGxpbmtzIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGNvbGxhcHNlIHdoZW4gYSBwYWdlIGNoYW5nZXMgKi9cbiAgY29sbGFwc2VPbk5ld1BhZ2U6IGJvb2xlYW47XG4gIC8qKiBTZXQgdGhpcyBvcHRpb24gdG8gdHJ1ZSBpZiB0b2dnbGVhYmxlIGxpbmtzIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IG9wZW4gd2hlbiBhIGNoaWxkIGxpbmsgaXMgYWN0aXZlICovXG4gIHNob3dPbkFjdGl2ZUNoaWxkOiBib29sZWFuO1xuXG4gIC8vIE1ldGhvZHNcbiAgdG9nZ2xlOiBTaG9waWZ5TGlua2xpc3RDb21wb25lbnRbXCJ0b2dnbGVcIl07XG4gIGNvbGxhcHNlOiBTaG9waWZ5TGlua2xpc3RDb21wb25lbnRbXCJjb2xsYXBzZVwiXTtcbiAgY29sbGFwc2VBbGw6IFNob3BpZnlMaW5rbGlzdENvbXBvbmVudFtcImNvbGxhcHNlQWxsXCJdO1xuICBzaG93OiBTaG9waWZ5TGlua2xpc3RDb21wb25lbnRbXCJzaG93XCJdO1xuICBzaG93QWxsOiBTaG9waWZ5TGlua2xpc3RDb21wb25lbnRbXCJzaG93QWxsXCJdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcbiAgdXJsOiBzdHJpbmc7XG4gIG5hbWVzcGFjZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBzaG9waWZ5LWZpbHRlclxuICovXG5leHBvcnQgY2xhc3MgU2hvcGlmeUxpbmtsaXN0Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LWxpbmtsaXN0XCI7XG5cbiAgcHJvdGVjdGVkIG1haW5EaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIm1haW5cIik7XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwibGlua2xpc3RcIixcbiAgICAgIFwiaGFuZGxlXCIsXG4gICAgICBcIm5hbWVcIixcbiAgICAgIFwicGlsbHNcIixcbiAgICAgIFwidmVydGljYWxcIixcbiAgICAgIFwiY29sbGFwc2Utb24tbmV3LXBhZ2VcIixcbiAgICAgIFwic2hvdy1vbi1jaGlsZC11cmxcIixcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIHNjb3BlOiBTY29wZSA9IHtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgcGlsbHM6IGZhbHNlLFxuICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICBjb2xsYXBzZU9uTmV3UGFnZTogdHJ1ZSxcbiAgICBzaG93T25BY3RpdmVDaGlsZDogdHJ1ZSxcbiAgICAvLyBtZXRob2RzXG4gICAgdG9nZ2xlOiB0aGlzLnRvZ2dsZSxcbiAgICBjb2xsYXBzZTogdGhpcy5jb2xsYXBzZSxcbiAgICBjb2xsYXBzZUFsbDogdGhpcy5jb2xsYXBzZUFsbCxcbiAgICBzaG93OiB0aGlzLnNob3csXG4gICAgc2hvd0FsbDogdGhpcy5zaG93QWxsLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tYWluRGlzcGF0Y2hlci5vbihcIm5ld1BhZ2VSZWFkeVwiLCB0aGlzLm9uTmV3UGFnZVJlYWR5LCB0aGlzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuaW5pdChTaG9waWZ5TGlua2xpc3RDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMubWFpbkRpc3BhdGNoZXIub2ZmKFwibmV3UGFnZVJlYWR5XCIsIHRoaXMub25OZXdQYWdlUmVhZHksIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZShsaW5rOiBMaW5rbGlzdExpbmspIHtcbiAgICBsaW5rLmNvbGxhcHNlZCA9ICFsaW5rLmNvbGxhcHNlZDtcbiAgfVxuXG4gIHB1YmxpYyBjb2xsYXBzZShsaW5rOiBMaW5rbGlzdExpbmspIHtcbiAgICBsaW5rLmNvbGxhcHNlZCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgc2hvdyhsaW5rOiBMaW5rbGlzdExpbmspIHtcbiAgICBsaW5rLmNvbGxhcHNlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIHNob3dBbGwoKSB7XG4gICAgaWYgKHRoaXMuc2NvcGUubGlua2xpc3QpIHtcbiAgICAgIHRoaXMuc2hvd0FsbEJ5TGlua3ModGhpcy5zY29wZS5saW5rbGlzdC5saW5rcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNvbGxhcHNlQWxsKCkge1xuICAgIGlmICh0aGlzLnNjb3BlLmxpbmtsaXN0ICYmIHRoaXMuc2NvcGUubGlua2xpc3QubGlua3MpIHtcbiAgICAgIHRoaXMuY29sbGFwc2VBbGxCeUxpbmtzKHRoaXMuc2NvcGUubGlua2xpc3QubGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93ICh1bmNvbGxhcHNlKSBsaW5rIGJ5IGNoaWxkIHVybFxuICAgKi9cbiAgcHVibGljIHNob3dCeUNoaWxkVXJsKHVybDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuc2NvcGUubGlua2xpc3QgJiYgdGhpcy5zY29wZS5saW5rbGlzdC5saW5rcykge1xuICAgICAgZm9yIChjb25zdCBsaW5rIG9mIHRoaXMuc2NvcGUubGlua2xpc3QubGlua3MpIHtcbiAgICAgICAgZm9yIChjb25zdCBzdWJsaW5rIG9mIGxpbmsubGlua3MpIHtcbiAgICAgICAgICBpZiAoc3VibGluay51cmwgPT09IHVybCkge1xuICAgICAgICAgICAgdGhpcy5zaG93KGxpbmspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoY29uc3Qgc3Vic3VibGluayBvZiBzdWJsaW5rLmxpbmtzKSB7XG4gICAgICAgICAgICBpZiAoc3Vic3VibGluay51cmwgPT09IHVybCkge1xuICAgICAgICAgICAgICB0aGlzLnNob3cobGluayk7XG4gICAgICAgICAgICAgIHRoaXMuc2hvdyhzdWJsaW5rKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb2xkVmFsdWU6IGFueSxcbiAgICBuZXdWYWx1ZTogYW55LFxuICAgIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICAvLyBpbmplY3RzIHRoZSBjaGFuZ2VkIGF0dHJpYnV0ZXMgdG8gc2NvcGVcbiAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlLCBuYW1lc3BhY2UpO1xuXG4gICAgLy8gc2V0IGxpbmtsaXN0IGJ5IGhhbmRsZVxuICAgIGlmIChuYW1lID09PSBcImhhbmRsZVwiIHx8IG5hbWUgPT09IFwibmFtZVwiKSB7XG4gICAgICBpZiAoXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5tb2RlbCAmJlxuICAgICAgICAod2luZG93IGFzIGFueSkubW9kZWwuc3lzdGVtICYmXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5tb2RlbC5zeXN0ZW0ubGlua2xpc3RzICYmXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5tb2RlbC5zeXN0ZW0ubGlua2xpc3RzW25ld1ZhbHVlXVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2NvcGUubGlua2xpc3QgPSAod2luZG93IGFzIGFueSkubW9kZWwuc3lzdGVtLmxpbmtsaXN0c1tuZXdWYWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYExpbmtsaXN0IG5vdCBmb3VuZCEgXFxuTm90ZTogVGhlIGxpbmtsaXN0IG11c3QgYmUgYXZhaWxhYmxlIHVuZGVyIFwid2luZG93Lm1vZGVsLnN5c3RlbS5saW5rbGlzdHNbJyR7bmV3VmFsdWV9J11cIiB0byBzZXQgaXQgdXNpbmcgaGlzIGhhbmRsZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IFwibGlua2xpc3RcIikge1xuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAvLyBpZiBvYmplY3QgaXMgaW4gZm9ybSBvZiBcIm1haW4tbWVudVwiOiB7Li4ufVxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobmV3VmFsdWUpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWVbT2JqZWN0LmtleXMobmV3VmFsdWUpWzBdXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNjb3BlLmxpbmtsaXN0ID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNvbGxhcHNlQWxsQnlMaW5rcyhsaW5rczogTGlua2xpc3RMaW5rW10pIHtcbiAgICBpZiAodGhpcy5zY29wZS5saW5rbGlzdCAmJiB0aGlzLnNjb3BlLmxpbmtsaXN0LmxpbmtzKSB7XG4gICAgICBmb3IgKGNvbnN0IGxpbmsgb2YgbGlua3MpIHtcbiAgICAgICAgaWYgKGxpbmsuY29sbGFwc2VhYmxlKSB7XG4gICAgICAgICAgbGluay5jb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5rLmxpbmtzKSB7XG4gICAgICAgICAgdGhpcy5jb2xsYXBzZUFsbEJ5TGlua3MobGluay5saW5rcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc2hvd0FsbEJ5TGlua3MobGlua3M6IExpbmtsaXN0TGlua1tdKSB7XG4gICAgaWYgKHRoaXMuc2NvcGUubGlua2xpc3QgJiYgdGhpcy5zY29wZS5saW5rbGlzdC5saW5rcykge1xuICAgICAgZm9yIChjb25zdCBsaW5rIG9mIGxpbmtzKSB7XG4gICAgICAgIGlmIChsaW5rLmNvbGxhcHNlYWJsZSkge1xuICAgICAgICAgIGxpbmsuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmsubGlua3MpIHtcbiAgICAgICAgICB0aGlzLmNvbGxhcHNlQWxsQnlMaW5rcyhsaW5rLmxpbmtzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbk5ld1BhZ2VSZWFkeShcbiAgICB2aWV3SWQ6IHN0cmluZyxcbiAgICBjdXJyZW50U3RhdHVzOiBTdGF0ZSAvKiwgcHJldlN0YXR1czogU3RhdGUsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG5ld1BhZ2VSYXdIVE1MOiBzdHJpbmcsIGRhdGFzZXQ6IGFueSwgaXNGaXJzdFBhZ2VMb2FkOiBib29sZWFuICovXG4gICkge1xuICAgIGNvbnN0IHVybCA9IGN1cnJlbnRTdGF0dXMudXJsO1xuICAgIGlmICh0aGlzLnNjb3BlLmNvbGxhcHNlT25OZXdQYWdlKSB7XG4gICAgICB0aGlzLmNvbGxhcHNlQWxsKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNjb3BlLnNob3dPbkFjdGl2ZUNoaWxkKSB7XG4gICAgICB0aGlzLnNob3dCeUNoaWxkVXJsKHVybCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gICAgaWYgKHRoaXMuc2NvcGUubGlua2xpc3QgJiYgdGhpcy5zY29wZS5saW5rbGlzdC5saW5rcykge1xuICAgICAgdGhpcy50cmFuc2Zvcm1MaW5rcyh0aGlzLnNjb3BlLmxpbmtsaXN0LmxpbmtzKTtcbiAgICAgIGlmICh0aGlzLnNjb3BlLmNvbGxhcHNlT25OZXdQYWdlKSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2VBbGwoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuc2NvcGUuc2hvd09uQWN0aXZlQ2hpbGQpIHtcbiAgICAgIHRoaXMuc2hvd0J5Q2hpbGRVcmwod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGxpbmsgYXJlIGNvbGxhcHNlYWJsZSBhbmQgc2V0IGluaXRpYWxpemVzIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybUxpbmtzKGxpbmtzOiBMaW5rbGlzdExpbmtbXSkge1xuICAgIGZvciAoY29uc3QgbGluayBvZiBsaW5rcykge1xuICAgICAgaWYgKGxpbmsudXJsID09PSBcIiNjb2xsYXBzZVwiKSB7XG4gICAgICAgIGxpbmsuY29sbGFwc2VhYmxlID0gdHJ1ZTtcbiAgICAgICAgbGluay5jb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluay5jb2xsYXBzZWFibGUgPSBmYWxzZTtcbiAgICAgICAgbGluay5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChsaW5rLmxpbmtzKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtTGlua3MobGluay5saW5rcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImxpbmtsaXN0XCJdO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICovXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICBpZiAoaGFzQ2hpbGROb2Rlc1RyaW0odGhpcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlRnVuY3Rpb24sIFNjb3BlQmFzZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9sb2dpbi1mb3JtLmNvbXBvbmVudC5odG1sXCI7XG5pbXBvcnQgeyBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUnVsZSB7XG4gIHJlcXVpcmVkOiBib29sZWFuO1xuICBtaW5sZW5ndGg/OiBudW1iZXI7XG4gIG1heGxlbmd0aD86IG51bWJlcjtcbiAgbWF4PzogbnVtYmVyO1xuICBtaW4/OiBudW1iZXI7XG4gIGVycm9yOiBzdHJpbmc7XG4gIGlzRW1haWw/OiBib29sZWFuO1xuICBpc1Bob25lPzogYm9vbGVhbjtcbiAgb25seU51bWJlcnM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25PYmplY3Qge1xuICB2YWxpZDogYm9vbGVhbjtcbiAgcnVsZXM/OiB7XG4gICAgW2tleTogc3RyaW5nXTogVmFsaWRhdGlvblJ1bGU7XG4gIH07XG59XG5cbmludGVyZmFjZSBTY29wZSBleHRlbmRzIFNjb3BlQmFzZSB7XG4gIGZvcm06IHtcbiAgICBjdXN0b21lcjoge1xuICAgICAgZW1haWw6IHN0cmluZztcbiAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgbG9naW5DdXN0b21lcjoge1xuICAgIHZhbGlkYXRpb246IFZhbGlkYXRpb25PYmplY3Q7XG4gIH07XG4gIGNyZWF0ZUN1c3RvbWVyOiB7XG4gICAgdmFsaWRhdGlvbjogVmFsaWRhdGlvbk9iamVjdDtcbiAgfTtcbiAgcmVjb3ZlckN1c3RvbWVyOiB7XG4gICAgdmFsaWRhdGlvbjogVmFsaWRhdGlvbk9iamVjdDtcbiAgfTtcbiAgbG9naW46IFNob3BpZnlMb2dpbkZvcm1Db21wb25lbnRbXCJsb2dpblwiXTtcbiAgY3JlYXRlOiBTaG9waWZ5TG9naW5Gb3JtQ29tcG9uZW50W1wiY3JlYXRlXCJdO1xuICByZWNvdmVyOiBTaG9waWZ5TG9naW5Gb3JtQ29tcG9uZW50W1wicmVjb3ZlclwiXTtcbiAgcmVjb3ZlckJhY2s6IFNob3BpZnlMb2dpbkZvcm1Db21wb25lbnRbXCJyZWNvdmVyQmFja1wiXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNob3BpZnlMb2dpbkZvcm1Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWUgPSBcInNob3BpZnktbG9naW4tZm9ybVwiO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9naW5DdXN0b21lckZvcm06IEhUTUxGb3JtRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgY3JlYXRlQ3VzdG9tZXJGb3JtOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJvdGVjdGVkIHJlY292ZXJDdXN0b21lckZvcm06IEhUTUxGb3JtRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgZm9ybToge1xuICAgICAgY3VzdG9tZXI6IHtcbiAgICAgICAgZW1haWw6IFwiXCIsXG4gICAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxvZ2luQ3VzdG9tZXI6IHtcbiAgICAgIHZhbGlkYXRpb246IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZUN1c3RvbWVyOiB7XG4gICAgICB2YWxpZGF0aW9uOiB7XG4gICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICByZWNvdmVyQ3VzdG9tZXI6IHtcbiAgICAgIHZhbGlkYXRpb246IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxvZ2luOiB0aGlzLmxvZ2luLFxuICAgIGNyZWF0ZTogdGhpcy5jcmVhdGUsXG4gICAgcmVjb3ZlcjogdGhpcy5yZWNvdmVyLFxuICAgIHJlY292ZXJCYWNrOiB0aGlzLnJlY292ZXJCYWNrLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeUxvZ2luRm9ybUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ2luIHN1Ym1pdCB1c2luZyB0aGUgbG9naW4gZm9ybVxuICAgKi9cbiAgcHVibGljIGxvZ2luKGV2ZW50OiBFdmVudCkge1xuICAgIGlmICghdGhpcy5sb2dpbkN1c3RvbWVyRm9ybSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk5vIGxvZ2luIGZvcm0gZm91bmRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gc3RvcCBuYXRpdmUgc3VibWl0XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMudmFsaWRhdGUodGhpcy5sb2dpbkN1c3RvbWVyRm9ybSwgdGhpcy5zY29wZS5sb2dpbkN1c3RvbWVyLnZhbGlkYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUubG9naW5DdXN0b21lci52YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICB0aGlzLmxvZ2luQ3VzdG9tZXJGb3JtLnN1Ym1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gYWNjb3VudCBzdWJtaXQgdXNpbmcgdGhlIGxvZ2luIGZvcm1cbiAgICovXG4gIHB1YmxpYyBjcmVhdGUoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmNyZWF0ZUN1c3RvbWVyRm9ybSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk5vIGNyZWF0ZSBmb3JtIGZvdW5kXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0b3AgbmF0aXZlIHN1Ym1pdFxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnZhbGlkYXRlKFxuICAgICAgdGhpcy5jcmVhdGVDdXN0b21lckZvcm0sXG4gICAgICB0aGlzLnNjb3BlLmNyZWF0ZUN1c3RvbWVyLnZhbGlkYXRpb25cbiAgICApO1xuXG4gICAgaWYgKHRoaXMuc2NvcGUuY3JlYXRlQ3VzdG9tZXIudmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgdGhpcy5jcmVhdGVDdXN0b21lckZvcm0uc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHBhc3N3b3JkIHN1Ym1pdCB1c2luZyB0aGUgKGhpZGRlbikgcmVzZXQgZm9ybVxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIHB1YmxpYyByZWNvdmVyKGV2ZW50OiBFdmVudCkge1xuICAgIGlmICghdGhpcy5yZWNvdmVyQ3VzdG9tZXJGb3JtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTm8gcmVjb3ZlciBmb3JtIGZvdW5kXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2dpbkN1c3RvbWVyRm9ybSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk5vIGxvZ2luIGZvcm0gZm91bmRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gc3RvcCBuYXRpdmUgc3VibWl0XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMudmFsaWRhdGUoXG4gICAgICB0aGlzLnJlY292ZXJDdXN0b21lckZvcm0sXG4gICAgICB0aGlzLnNjb3BlLnJlY292ZXJDdXN0b21lci52YWxpZGF0aW9uXG4gICAgKTtcblxuICAgIGlmICh0aGlzLnNjb3BlLnJlY292ZXJDdXN0b21lci52YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICB0aGlzLnJlY292ZXJDdXN0b21lckZvcm0uc3VibWl0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLmxvZ2luQ3VzdG9tZXJGb3JtLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQgfCBudWxsKT8uc2V0QXR0cmlidXRlKFxuICAgICAgICBcImhpZGRlblwiLFxuICAgICAgICBcIlwiXG4gICAgICApO1xuICAgICAgKFxuICAgICAgICB0aGlzLnJlY292ZXJDdXN0b21lckZvcm0ucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCB8IG51bGxcbiAgICAgICk/LnJlbW92ZUF0dHJpYnV0ZShcImhpZGRlblwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVjb3ZlckJhY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnJlY292ZXJDdXN0b21lckZvcm0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyByZWNvdmVyIGZvcm0gZm91bmRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmxvZ2luQ3VzdG9tZXJGb3JtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTm8gbG9naW4gZm9ybSBmb3VuZFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzdG9wIG5hdGl2ZSBzdWJtaXRcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgKHRoaXMubG9naW5DdXN0b21lckZvcm0ucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCB8IG51bGwpPy5yZW1vdmVBdHRyaWJ1dGUoXG4gICAgICBcImhpZGRlblwiXG4gICAgKTtcbiAgICAodGhpcy5yZWNvdmVyQ3VzdG9tZXJGb3JtLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQgfCBudWxsKT8uc2V0QXR0cmlidXRlKFxuICAgICAgXCJoaWRkZW5cIixcbiAgICAgIFwiXCJcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuY3JlYXRlQ3VzdG9tZXJGb3JtID0gdGhpcy5xdWVyeVNlbGVjdG9yKFxuICAgICAgJ2Zvcm1bYWN0aW9uPVwiL2FjY291bnRcIl0nXG4gICAgKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5jcmVhdGVDdXN0b21lckZvcm0uc2V0QXR0cmlidXRlKFwibm92YWxpZGF0ZVwiLCBcIlwiKTtcbiAgICB0aGlzLmNyZWF0ZUN1c3RvbWVyRm9ybS5jbGFzc0xpc3QuYWRkKFwibmVlZHMtdmFsaWRhdGlvblwiKTtcblxuICAgIHRoaXMubG9naW5DdXN0b21lckZvcm0gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnZm9ybVthY3Rpb249XCIvYWNjb3VudC9sb2dpblwiXSdcbiAgICApIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICB0aGlzLmxvZ2luQ3VzdG9tZXJGb3JtLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIiwgXCJcIik7XG4gICAgdGhpcy5sb2dpbkN1c3RvbWVyRm9ybS5jbGFzc0xpc3QuYWRkKFwibmVlZHMtdmFsaWRhdGlvblwiKTtcblxuICAgIHRoaXMucmVjb3ZlckN1c3RvbWVyRm9ybSA9IHRoaXMucXVlcnlTZWxlY3RvcihcbiAgICAgICdmb3JtW2FjdGlvbj1cIi9hY2NvdW50L3JlY292ZXJcIl0nXG4gICAgKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5yZWNvdmVyQ3VzdG9tZXJGb3JtLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIiwgXCJcIik7XG4gICAgdGhpcy5yZWNvdmVyQ3VzdG9tZXJGb3JtLmNsYXNzTGlzdC5hZGQoXCJuZWVkcy12YWxpZGF0aW9uXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlKGZvcm06IEhUTUxGb3JtRWxlbWVudCwgdmFsaWRhdGlvblNjb3BlOiBWYWxpZGF0aW9uT2JqZWN0KSB7XG4gICAgdmFsaWRhdGlvblNjb3BlLnZhbGlkID0gZm9ybS5jaGVja1ZhbGlkaXR5KCk7XG4gICAgZm9ybS5jbGFzc0xpc3QuYWRkKFwid2FzLXZhbGlkYXRlZFwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBhZnRlckJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gICAgdGhpcy5pbml0VmFsaWRhdGlvbigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAodGhpcyAmJiBoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVGdW5jdGlvbiwgU2NvcGVCYXNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHtcbiAgU2hvcGlmeVByb2R1Y3RWYXJpYW50LFxuICBTaG9waWZ5UHJvZHVjdCxcbiAgU2hvcGlmeVByb2R1Y3RWYXJpYW50T3B0aW9uLFxuICBTaG9waWZ5Q2FydFNlcnZpY2UsXG4gIFNob3BpZnlQcm9kdWN0U2VydmljZSxcbn0gZnJvbSBcIkByaWJhanMvc2hvcGlmeVwiO1xuaW1wb3J0IHsgaGFzQ2hpbGROb2Rlc1RyaW0gfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvZG9tLmpzXCI7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vcHJvZHVjdC1pdGVtLmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgZXh0ZW5kcyBTY29wZUJhc2Uge1xuICBoYW5kbGU6IHN0cmluZyB8IG51bGw7XG4gIHByb2R1Y3Q6IFNob3BpZnlQcm9kdWN0IHwgbnVsbDtcbiAgdmFyaWFudDogU2hvcGlmeVByb2R1Y3RWYXJpYW50IHwgbnVsbDtcbiAgcXVhbnRpdHk6IG51bWJlcjtcbiAgc2hvd0RldGFpbE1lbnU6IGJvb2xlYW47XG4gIGRldGFpbE1lbnVQYWRkaW5nOiBzdHJpbmc7XG4gIC8vIHNob3dBZGRUb0NhcnRCdXR0b246IGJvb2xlYW47XG4gIGNob29zZU9wdGlvbjogU2hvcGlmeVByb2R1Y3RJdGVtQ29tcG9uZW50W1wiY2hvb3NlT3B0aW9uXCJdO1xuICBhZGRUb0NhcnQ6IFNob3BpZnlQcm9kdWN0SXRlbUNvbXBvbmVudFtcImFkZFRvQ2FydFwiXTtcbiAgdG9nZ2xlRGV0YWlsTWVudTogU2hvcGlmeVByb2R1Y3RJdGVtQ29tcG9uZW50W1widG9nZ2xlRGV0YWlsTWVudVwiXTtcbiAgZGVjcmVhc2U6IFNob3BpZnlQcm9kdWN0SXRlbUNvbXBvbmVudFtcImRlY3JlYXNlXCJdO1xuICBpbmNyZWFzZTogU2hvcGlmeVByb2R1Y3RJdGVtQ29tcG9uZW50W1wiaW5jcmVhc2VcIl07XG4gIGNvbG9yT3B0aW9uOiBTaG9waWZ5UHJvZHVjdFZhcmlhbnRPcHRpb24gfCBudWxsO1xuICBzaXplT3B0aW9uOiBTaG9waWZ5UHJvZHVjdFZhcmlhbnRPcHRpb24gfCBudWxsO1xuICBhdmFpbGFibGU6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVE9ETyBtaW5pZnkgdGhpcywgY3JlYXRlIGEgZ2VuZXJhbCBwcm9kdWN0IHNlcnZpY2UgaW5zdGVhZCBvZiBleHRlbmQgZnJvbSBTaG9waWZ5UHJvZHVjdEl0ZW1Db21wb25lbnRcbiAqIG9yIGNyZWF0ZSBhIHByb2R1Y3QgbGlzdCBmb3IgYWxsIHByb2R1Y3RzXG4gKiBvciBqdXN0IGdldCB0aGUgYXR0cmlidXRlcyB3ZSBuZWVkIGxpa2UgdGhlIG9wdGlvbnNcbiAqIG9yIHJlbmRlciB0aGUgbW9zdCB3aXRoIGxpcXVpZFxuICovXG5leHBvcnQgY2xhc3MgU2hvcGlmeVByb2R1Y3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LXByb2R1Y3QtaXRlbVwiO1xuXG4gIHByb3RlY3RlZCBhdXRvYmluZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIGhhbmRsZSBpcyB0aGUgcHJvZHVjdCBoYW5kbGUgdG8gZ2V0IHRoZSBwcm9kdWN0IGpzb24gb2JqZWN0XG4gICAqIGV4dHJhcyBhcmUgcHJvZHVjdCBkYXRhIHdoaWNoIGlzIG9ubHkgYXZhaWxhYmxlIG92ZXIgbGlxdWlkIGFuZCBub3Qgb3ZlciB0aGUgcHJvZHVjdCBqc29uIG9iamVjdFxuICAgKiBwcm9kdWN0IGlzIHRoZSBwcm9kdWN0IG9iamVjdCBpdHNlbGYgaWYgeW91IHdhbnQgdG8gcGFzcyBpdCBkaXJlY3RseVxuICAgKi9cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXCJoYW5kbGVcIiwgXCJleHRyYXNcIiwgXCJwcm9kdWN0XCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImhhbmRsZVwiXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgaGFuZGxlOiBudWxsLFxuICAgIHByb2R1Y3Q6IG51bGwsXG4gICAgdmFyaWFudDogbnVsbCxcbiAgICBxdWFudGl0eTogMSxcbiAgICBzaG93RGV0YWlsTWVudTogZmFsc2UsXG4gICAgZGV0YWlsTWVudVBhZGRpbmc6IFwiNjBweFwiLFxuICAgIC8vIHNob3dBZGRUb0NhcnRCdXR0b246IGZhbHNlLFxuICAgIGNob29zZU9wdGlvbjogdGhpcy5jaG9vc2VPcHRpb24sXG4gICAgYWRkVG9DYXJ0OiB0aGlzLmFkZFRvQ2FydCxcbiAgICB0b2dnbGVEZXRhaWxNZW51OiB0aGlzLnRvZ2dsZURldGFpbE1lbnUsXG4gICAgZGVjcmVhc2U6IHRoaXMuZGVjcmVhc2UsXG4gICAgaW5jcmVhc2U6IHRoaXMuaW5jcmVhc2UsXG4gICAgY29sb3JPcHRpb246IG51bGwsXG4gICAgc2l6ZU9wdGlvbjogbnVsbCxcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBpcyBhdmFpbGFibGUsIHVzZWQgdG8gZGlzYWJsZSB0aGUgYWRkIHRvIGNhcnQgYnV0dG9uXG4gICAgICovXG4gICAgYXZhaWxhYmxlOiBmYWxzZSxcbiAgfTtcblxuICAvKipcbiAgICogQXJyYXkgd2l0aCBhbGwgc2VsZWN0ZWQgcHJvZHVjdCBvcHRpb25zXG4gICAqL1xuICBwcml2YXRlIHNlbGVjdGVkT3B0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIGRldGFpbCBtZW7DvCBwYWRkaW5nIHdpdGhvdXQgcHhcbiAgICovXG4gIHByaXZhdGUgX21lbnVQYWRkaW5nID0gNjA7XG5cbiAgLyoqXG4gICAqIElzIHRydWUgaWYgdGhlIHVzZXIgaGFzIGNob3NlbiBhbiBvcHRpb25cbiAgICovXG4gIHByaXZhdGUgb3B0aW9uQ2hvc2VuID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIHNldCBtZW51UGFkZGluZyhwYWRkaW5nOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tZW51UGFkZGluZyA9IHBhZGRpbmc7XG4gICAgdGhpcy5zY29wZS5kZXRhaWxNZW51UGFkZGluZyA9IHRoaXMuX21lbnVQYWRkaW5nICsgXCJweFwiO1xuICB9XG5cbiAgLyoqXG4gICAqIGF2YWlsYWJsZSBpcyBvbmx5IHRydWUgaWYgdGhlIHZhcmlhbnQgaXMgYXZhaWxhYmxlIGFuZCB0aGUgdXNlciBoYXMgY2xpY2tlZCBvbiBhbiBvcHRpb25cbiAgICovXG4gIHByb3RlY3RlZCBzZXQgYXZhaWxhYmxlKGF2YWlsYWJsZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2NvcGUuYXZhaWxhYmxlID0gYXZhaWxhYmxlICYmIHRoaXMub3B0aW9uQ2hvc2VuO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBzaG93TWVudShzaG93OiBib29sZWFuKSB7XG4gICAgaWYgKHNob3cpIHtcbiAgICAgIHRoaXMubWVudVBhZGRpbmcgPSAyMTU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVudVBhZGRpbmcgPSA2MDtcbiAgICB9XG4gICAgdGhpcy5zY29wZS5zaG93RGV0YWlsTWVudSA9IHNob3c7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHNob3dNZW51KCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlLnNob3dEZXRhaWxNZW51O1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBwcm9kdWN0KHByb2R1Y3Q6IFNob3BpZnlQcm9kdWN0IHwgbnVsbCkge1xuICAgIGlmIChwcm9kdWN0KSB7XG4gICAgICB0aGlzLnNjb3BlLnByb2R1Y3QgPSBTaG9waWZ5UHJvZHVjdFNlcnZpY2UucHJlcGFyZShwcm9kdWN0KTtcblxuICAgICAgdGhpcy5zY29wZS5oYW5kbGUgPSB0aGlzLnNjb3BlLnByb2R1Y3QuaGFuZGxlO1xuXG4gICAgICB0aGlzLnNjb3BlLmNvbG9yT3B0aW9uID1cbiAgICAgICAgU2hvcGlmeVByb2R1Y3RTZXJ2aWNlLmdldE9wdGlvbih0aGlzLnNjb3BlLnByb2R1Y3QsIFwiY29sb3JcIikgfHwgbnVsbDtcbiAgICAgIHRoaXMuc2NvcGUuc2l6ZU9wdGlvbiA9XG4gICAgICAgIFNob3BpZnlQcm9kdWN0U2VydmljZS5nZXRPcHRpb24odGhpcy5zY29wZS5wcm9kdWN0LCBcInNpemVcIikgfHwgbnVsbDtcblxuICAgICAgLy8gc2V0IHRoZSBmaXJzdCB2YXJpYW50IHRvIHRoZSBzZWxlY3RlZCBvbmVcbiAgICAgIHRoaXMudmFyaWFudCA9IHRoaXMuc2NvcGUucHJvZHVjdC52YXJpYW50c1swXTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHByb2R1Y3QoKTogU2hvcGlmeVByb2R1Y3QgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5zY29wZS5wcm9kdWN0O1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCB2YXJpYW50KHZhcmlhbnQ6IFNob3BpZnlQcm9kdWN0VmFyaWFudCB8IG51bGwpIHtcbiAgICBpZiAodmFyaWFudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNjb3BlLnZhcmlhbnQgPSB2YXJpYW50O1xuICAgIGlmICh0aGlzLnNjb3BlLnZhcmlhbnQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gdGhpcy5zY29wZS52YXJpYW50Lm9wdGlvbnMuc2xpY2UoKTtcbiAgICAgIHRoaXMuYXZhaWxhYmxlID0gdGhpcy5zY29wZS52YXJpYW50LmF2YWlsYWJsZTtcbiAgICAgIHRoaXMuYWN0aXZhdGVPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldCB2YXJpYW50KCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlLnZhcmlhbnQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5pbml0KFNob3BpZnlQcm9kdWN0SXRlbUNvbXBvbmVudC5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHVibGljIGNob29zZU9wdGlvbihcbiAgICBvcHRpb25WYWx1ZTogc3RyaW5nIHwgbnVtYmVyLFxuICAgIHBvc2l0aW9uMTogbnVtYmVyLFxuICAgIG9wdGlvbk5hbWU6IHN0cmluZyxcbiAgICBldmVudDogTW91c2VFdmVudFxuICApIHtcbiAgICBvcHRpb25WYWx1ZSA9IG9wdGlvblZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoIXRoaXMuc2NvcGUucHJvZHVjdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvZHVjdCBub3Qgc2V0IVwiKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uc1twb3NpdGlvbjEgLSAxXSA9IG9wdGlvblZhbHVlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgdmFyaWFudCA9IFNob3BpZnlQcm9kdWN0U2VydmljZS5nZXRWYXJpYW50T2ZPcHRpb25zKFxuICAgICAgdGhpcy5zY29wZS5wcm9kdWN0LFxuICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnNcbiAgICApO1xuICAgIGlmICh2YXJpYW50KSB7XG4gICAgICAvLyBPcHRpb24gY2hvc2VuIC0+IHNvIGVuYWJsZSBhZGQgdG8gY2FydCBidXR0b25cbiAgICAgIHRoaXMub3B0aW9uQ2hvc2VuID0gdHJ1ZTtcblxuICAgICAgdGhpcy52YXJpYW50ID0gdmFyaWFudCBhcyBTaG9waWZ5UHJvZHVjdFZhcmlhbnQ7XG4gICAgfVxuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBwdWJsaWMgYWRkVG9DYXJ0KCkge1xuICAgIGlmICghdGhpcy52YXJpYW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFNob3BpZnlDYXJ0U2VydmljZS5hZGQodGhpcy52YXJpYW50LmlkLCB0aGlzLnNjb3BlLnF1YW50aXR5KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBhbnkgLyoqIFRPRE8gbm90IGFueSAqLykgPT4ge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiYWRkVG9DYXJ0IHJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiYWRkVG9DYXJ0IGVycm9yXCIsIGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZURldGFpbE1lbnUoKSB7XG4gICAgdGhpcy5zaG93TWVudSA9ICF0aGlzLnNob3dNZW51O1xuICB9XG5cbiAgcHVibGljIGluY3JlYXNlKCkge1xuICAgIHRoaXMuc2NvcGUucXVhbnRpdHkrKztcbiAgfVxuXG4gIHB1YmxpYyBkZWNyZWFzZSgpIHtcbiAgICB0aGlzLnNjb3BlLnF1YW50aXR5LS07XG4gICAgaWYgKHRoaXMuc2NvcGUucXVhbnRpdHkgPD0gMCkge1xuICAgICAgdGhpcy5zY29wZS5xdWFudGl0eSA9IDE7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdvcmthcm91bmQgYmVjYXVzZSBgcnYtY2xhc3MtYWN0aXZlPVwiaXNPcHRpb25BY3RpdmUgfCBjYWxsIHNpemVcImAgaXMgbm90IHVwZGF0aW5nIGlmIHNlbGVjdGVkT3B0aW9ucyBjaGFuZ2VzXG4gICAqIEBwYXJhbSBvcHRpb25WYWx1ZVxuICAgKiBAcGFyYW0gb3B0aW9uTmFtZVxuICAgKi9cbiAgcHJvdGVjdGVkIGFjdGl2YXRlT3B0aW9uKG9wdGlvblZhbHVlOiBzdHJpbmcsIG9wdGlvbk5hbWU6IHN0cmluZykge1xuICAgIG9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuICAgICAgYC5vcHRpb24tJHtvcHRpb25OYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCl9YFxuICAgICk/LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcbiAgICAgIGAub3B0aW9uLSR7b3B0aW9uTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpfS0ke29wdGlvblZhbHVlfWBcbiAgICApPy5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlIG9wdGlvbiBieSBzZWxlY3RlZCBvcHRpb25zIChzY29wZS5zZWxlY3RlZE9wdGlvbnMpXG4gICAqIFRoaXMgbWV0aG9kIHNldHMgdGhlIGFjdGl2ZSBjbGFzcyB0byB0aGUgb3B0aW9ucyBlbGVtZW50c1xuICAgKi9cbiAgcHJvdGVjdGVkIGFjdGl2YXRlT3B0aW9ucygpIHtcbiAgICBmb3IgKGNvbnN0IHBvc2l0aW9uMCBpbiB0aGlzLnNlbGVjdGVkT3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25zW3Bvc2l0aW9uMF0pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSB0aGlzLnNlbGVjdGVkT3B0aW9uc1twb3NpdGlvbjBdO1xuICAgICAgICBpZiAodGhpcy5zY29wZS5wcm9kdWN0KSB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9uTmFtZSA9IHRoaXMuc2NvcGUucHJvZHVjdC5vcHRpb25zW3Bvc2l0aW9uMF0ubmFtZTtcbiAgICAgICAgICAvLyBPbmx5IGFjdGl2YXRlIHNpemUgaWYgaXQgd2FzIGNsaWNrZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICBpZiAob3B0aW9uTmFtZSA9PT0gXCJzaXplXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbkNob3Nlbikge1xuICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlT3B0aW9uKG9wdGlvblZhbHVlLCBvcHRpb25OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZU9wdGlvbihvcHRpb25WYWx1ZSwgb3B0aW9uTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGJlZm9yZUJpbmQoKSB7XG4gICAgYXdhaXQgc3VwZXIuYmVmb3JlQmluZCgpO1xuICAgIGlmICh0aGlzLnNjb3BlLmhhbmRsZSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvZHVjdCBoYW5kbGUgbm90IHNldFwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByb2R1Y3QpIHtcbiAgICAgIHRoaXMuZmV0Y2hQcm9kdWN0KHRoaXMuc2NvcGUuaGFuZGxlKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZmV0Y2hQcm9kdWN0KGhhbmRsZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFNob3BpZnlQcm9kdWN0U2VydmljZS5nZXQoaGFuZGxlKTtcbiAgICBpZiAocHJvZHVjdCkge1xuICAgICAgdGhpcy5wcm9kdWN0ID0gcHJvZHVjdDtcbiAgICB9XG4gICAgcmV0dXJuIHByb2R1Y3Q7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VkQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgICBvbGRWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyLnBhcnNlZEF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgICBzd2l0Y2ggKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgIGNhc2UgXCJwcm9kdWN0XCI6XG4gICAgICAgIHRoaXMucHJvZHVjdCA9IG5ld1ZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIGF3YWl0IHN1cGVyLmFmdGVyQmluZCgpO1xuICAgIHRoaXMuYWN0aXZhdGVPcHRpb25zKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogUmV0dXJuVHlwZTxUZW1wbGF0ZUZ1bmN0aW9uPiB7XG4gICAgLy8gT25seSBzZXQgdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSBpZiB0aGVyZSBubyBjaGlsZHMgYWxyZWFkeVxuICAgIGlmICh0aGlzICYmIGhhc0NoaWxkTm9kZXNUcmltKHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuaW1wb3J0IHsgUGpheCwgUHJlZmV0Y2ggfSBmcm9tIFwiQHJpYmFqcy9yb3V0ZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNob3BpZnlQcm9kdWN0U2Nyb2xsYmFyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lID0gXCJzaG9waWZ5LXByb2R1Y3Qtc2Nyb2xsYmFyXCI7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogYW55ID0ge1xuICAgIG9uU2Nyb2xsOiB0aGlzLm9uU2Nyb2xsLFxuICAgIG9uUHJvZHVjdFRhcDogdGhpcy5vblByb2R1Y3RUYXAsXG4gICAgb25Qcm9kdWN0TW91c2VlbnRlcjogdGhpcy5vblByb2R1Y3RNb3VzZWVudGVyLFxuICAgIHRpdGxlOiBcIlwiLFxuICB9O1xuXG4gIHByb3RlY3RlZCBwcm9kdWN0czogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4gfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY3VzdG9tIEVsZW1lbnQgbWV0aG9kXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY3VzdG9tIGVsZW1lbnQgaXMgZmlyc3QgY29ubmVjdGVkIHRvIHRoZSBkb2N1bWVudCdzIERPTS5cbiAgICovXG4gIHByb3RlY3RlZCBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMucHJvZHVjdHMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZW1iZWQtcmVzcG9uc2l2ZVwiKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeVByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKdXN0IG9wZW4gdGhlIHByb2R1Y3QgdXJsXG4gICAqL1xuICBwdWJsaWMgb25Qcm9kdWN0VGFwKGV2ZW50OiBFdmVudCwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCB1cmwgPSBldmVudEVsLmRhdGFzZXQudXJsO1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBqYXggPSBQamF4LmdldEluc3RhbmNlKFwibWFpblwiKTtcbiAgICBpZiAoIXBqYXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGpheC5nb1RvKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogUHJlbG9hZCBwcm9kdWN0IG9uIG1vdXNlIG92ZXJcbiAgICovXG4gIHB1YmxpYyBvblByb2R1Y3RNb3VzZWVudGVyKGV2ZW50OiBFdmVudCwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCB1cmwgPSBldmVudEVsLmRhdGFzZXQudXJsO1xuICAgIGNvbnN0IHByZWZldGNoID0gUHJlZmV0Y2guZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoIXByZWZldGNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByZWZldGNoLm9uTGlua0VudGVyKHVybCwgZXZlbnRFbCBhcyBIVE1MQW5jaG9yRWxlbWVudCwgZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBwcm9kdWN0IGluIHRoZSBtaWRkbGUgb2YgdGhlIHNjcm9sbGJhciBlbGVtZW50XG4gICAqL1xuICBwdWJsaWMgb25TY3JvbGwoZXZlbnQ6IEV2ZW50LCBzY29wZTogYW55LCBldmVudEVsOiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh0aGlzLnByb2R1Y3RzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvZHVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IHRoaXMucHJvZHVjdHNbaV07XG4gICAgICAgIGNvbnN0IHByb2R1Y3REYXRhID0gcHJvZHVjdC5kYXRhc2V0O1xuICAgICAgICBjb25zdCBwYXJlbnRSZWN0ID0gZXZlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudFJlY3QgPSBwcm9kdWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBlbGVtZW50TWlkZGxlID0gZWxlbWVudFJlY3Qud2lkdGggLyAyO1xuICAgICAgICAvKiogY2VudGVyWCBpcyAwIGlmIHRoZSBwcm9kdWN0IGlzIGluIHRoZSBtaWRkbGUgKi9cbiAgICAgICAgY29uc3QgY2VudGVyWCA9XG4gICAgICAgICAgZWxlbWVudFJlY3QubGVmdCAtIChwYXJlbnRSZWN0LndpZHRoIC8gMiAtIGVsZW1lbnRNaWRkbGUpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50TWlkZGxlO1xuXG4gICAgICAgIGlmIChjZW50ZXJYID4gb2Zmc2V0ICogLTEgJiYgY2VudGVyWCA8IG9mZnNldCkge1xuICAgICAgICAgIHRoaXMuc2NvcGUudGl0bGUgPSBwcm9kdWN0RGF0YS50aXRsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0ZW1wbGF0ZSgpOiBSZXR1cm5UeXBlPFRlbXBsYXRlRnVuY3Rpb24+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZUZ1bmN0aW9uLCBTY29wZUJhc2UgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQge1xuICBTaG9waWZ5UHJvZHVjdFZhcmlhbnQsXG4gIFNob3BpZnlQcm9kdWN0LFxuICBTaG9waWZ5UHJvZHVjdFZhcmlhbnRPcHRpb24sXG4gIFNob3BpZnlDYXJ0U2VydmljZSxcbiAgU2hvcGlmeVByb2R1Y3RTZXJ2aWNlLFxufSBmcm9tIFwiQHJpYmFqcy9zaG9waWZ5XCI7XG5pbXBvcnQgeyBoYXNDaGlsZE5vZGVzVHJpbSB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy9kb20uanNcIjtcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9wcm9kdWN0LmNvbXBvbmVudC5odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlcGFyZWRQcm9kdWN0VmFyaWFudCBleHRlbmRzIFNob3BpZnlQcm9kdWN0VmFyaWFudCB7XG4gIGltYWdlcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjb3BlIGV4dGVuZHMgU2NvcGVCYXNlIHtcbiAgaGFuZGxlOiBzdHJpbmcgfCBudWxsO1xuICBwcm9kdWN0OiBTaG9waWZ5UHJvZHVjdCB8IG51bGw7XG4gIHZhcmlhbnQ6IFByZXBhcmVkUHJvZHVjdFZhcmlhbnQgfCBudWxsO1xuICBxdWFudGl0eTogbnVtYmVyO1xuICBzaG93RGV0YWlsTWVudTogYm9vbGVhbjtcbiAgLy8gc2hvd0FkZFRvQ2FydEJ1dHRvbjogYm9vbGVhbjtcbiAgY2hvb3NlT3B0aW9uOiBTaG9waWZ5UHJvZHVjdENvbXBvbmVudFtcImNob29zZU9wdGlvblwiXTtcbiAgYWRkVG9DYXJ0OiBTaG9waWZ5UHJvZHVjdENvbXBvbmVudFtcImFkZFRvQ2FydFwiXTtcbiAgdG9nZ2xlRGV0YWlsTWVudTogU2hvcGlmeVByb2R1Y3RDb21wb25lbnRbXCJ0b2dnbGVEZXRhaWxNZW51XCJdO1xuICBkZWNyZWFzZTogU2hvcGlmeVByb2R1Y3RDb21wb25lbnRbXCJkZWNyZWFzZVwiXTtcbiAgaW5jcmVhc2U6IFNob3BpZnlQcm9kdWN0Q29tcG9uZW50W1wiaW5jcmVhc2VcIl07XG4gIC8qKlxuICAgKiBJZiB0aGUgdmFyaWFudCBpcyBhdmFpbGFibGUsIHVzZWQgdG8gZGlzYWJsZSB0aGUgYWRkIHRvIGNhcnQgYnV0dG9uXG4gICAqL1xuICBhdmFpbGFibGU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5UHJvZHVjdENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZSA9IFwic2hvcGlmeS1wcm9kdWN0XCI7XG5cbiAgcHJvdGVjdGVkIGF1dG9iaW5kID0gdHJ1ZTtcblxuICAvKipcbiAgICogaGFuZGxlIGlzIHRoZSBwcm9kdWN0IGhhbmRsZSB0byBnZXQgdGhlIHByb2R1Y3QganNvbiBvYmplY3RcbiAgICogZXh0cmFzIGFyZSBwcm9kdWN0IGRhdGEgd2hpY2ggaXMgb25seSBhdmFpbGFibGUgb3ZlciBsaXF1aWQgYW5kIG5vdCBvdmVyIHRoZSBwcm9kdWN0IGpzb24gb2JqZWN0XG4gICAqL1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcImhhbmRsZVwiLCBcImV4dHJhc1wiXTtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZTogU2NvcGUgPSB7XG4gICAgaGFuZGxlOiBudWxsLFxuICAgIHByb2R1Y3Q6IG51bGwsXG4gICAgdmFyaWFudDogbnVsbCxcbiAgICBxdWFudGl0eTogMSxcbiAgICBzaG93RGV0YWlsTWVudTogZmFsc2UsXG4gICAgLy8gc2hvd0FkZFRvQ2FydEJ1dHRvbjogZmFsc2UsXG4gICAgY2hvb3NlT3B0aW9uOiB0aGlzLmNob29zZU9wdGlvbixcbiAgICBhZGRUb0NhcnQ6IHRoaXMuYWRkVG9DYXJ0LFxuICAgIHRvZ2dsZURldGFpbE1lbnU6IHRoaXMudG9nZ2xlRGV0YWlsTWVudSxcbiAgICBkZWNyZWFzZTogdGhpcy5kZWNyZWFzZSxcbiAgICBpbmNyZWFzZTogdGhpcy5pbmNyZWFzZSxcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBpcyBhdmFpbGFibGUsIHVzZWQgdG8gZGlzYWJsZSB0aGUgYWRkIHRvIGNhcnQgYnV0dG9uXG4gICAgICovXG4gICAgYXZhaWxhYmxlOiBmYWxzZSxcbiAgfTtcblxuICBwcml2YXRlIGNvbG9yT3B0aW9uOiBTaG9waWZ5UHJvZHVjdFZhcmlhbnRPcHRpb24gfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIHNlbGVjdGVkT3B0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogSXMgdHJ1ZSBpZiB0aGUgdXNlciBoYXMgY2hvc2VuIGFuIG9wdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBvcHRpb25DaG9zZW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgc2V0IHByb2R1Y3QocHJvZHVjdDogU2hvcGlmeVByb2R1Y3QgfCBudWxsKSB7XG4gICAgaWYgKHByb2R1Y3QpIHtcbiAgICAgIHRoaXMuc2NvcGUucHJvZHVjdCA9IFNob3BpZnlQcm9kdWN0U2VydmljZS5wcmVwYXJlKHByb2R1Y3QpO1xuICAgICAgdGhpcy5jb2xvck9wdGlvbiA9XG4gICAgICAgIFNob3BpZnlQcm9kdWN0U2VydmljZS5nZXRPcHRpb24odGhpcy5zY29wZS5wcm9kdWN0LCBcImNvbG9yXCIpIHx8IG51bGw7XG4gICAgICB0aGlzLnZhcmlhbnQgPSB0aGlzLnNjb3BlLnByb2R1Y3QudmFyaWFudHNbMF07XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBwcm9kdWN0KCk6IFNob3BpZnlQcm9kdWN0IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2NvcGUucHJvZHVjdDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgdmFyaWFudCh2YXJpYW50OiBTaG9waWZ5UHJvZHVjdFZhcmlhbnQgfCBudWxsKSB7XG4gICAgaWYgKHZhcmlhbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zY29wZS52YXJpYW50ID0gdGhpcy5wcmVwYXJlVmFyaWFudCh2YXJpYW50KTtcbiAgICBpZiAodGhpcy5zY29wZS52YXJpYW50KSB7XG4gICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IHRoaXMuc2NvcGUudmFyaWFudC5vcHRpb25zLnNsaWNlKCk7XG4gICAgICB0aGlzLmF2YWlsYWJsZSA9IHRoaXMuc2NvcGUudmFyaWFudC5hdmFpbGFibGU7XG4gICAgICB0aGlzLmFjdGl2YXRlT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgdmFyaWFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY29wZS52YXJpYW50O1xuICB9XG5cbiAgLyoqXG4gICAqIGF2YWlsYWJsZSBpcyBvbmx5IHRydWUgaWYgdGhlIHZhcmlhbnQgaXMgYXZhaWxhYmxlIGFuZCB0aGUgdXNlciBoYXMgY2xpY2tlZCBvbiBhbiBvcHRpb25cbiAgICovXG4gIHByb3RlY3RlZCBzZXQgYXZhaWxhYmxlKGF2YWlsYWJsZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2NvcGUuYXZhaWxhYmxlID0gYXZhaWxhYmxlICYmIHRoaXMub3B0aW9uQ2hvc2VuO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXQoU2hvcGlmeVByb2R1Y3RDb21wb25lbnQub2JzZXJ2ZWRBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHB1YmxpYyBjaG9vc2VPcHRpb24oXG4gICAgb3B0aW9uVmFsdWU6IHN0cmluZyB8IG51bWJlcixcbiAgICBwb3NpdGlvbjE6IG51bWJlcixcbiAgICBvcHRpb25OYW1lOiBzdHJpbmcsXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnRcbiAgKSB7XG4gICAgaWYgKCF0aGlzLnNjb3BlLnByb2R1Y3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb2R1Y3Qgbm90IHNldCFcIik7XG4gICAgfVxuXG4gICAgb3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZS50b1N0cmluZygpO1xuXG4gICAgdGhpcy5zZWxlY3RlZE9wdGlvbnNbcG9zaXRpb24xIC0gMV0gPSBvcHRpb25WYWx1ZS50b1N0cmluZygpO1xuICAgIGNvbnN0IHZhcmlhbnQgPSBTaG9waWZ5UHJvZHVjdFNlcnZpY2UuZ2V0VmFyaWFudE9mT3B0aW9ucyhcbiAgICAgIHRoaXMuc2NvcGUucHJvZHVjdCxcbiAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zXG4gICAgKTtcbiAgICBpZiAodmFyaWFudCkge1xuICAgICAgLy8gT3B0aW9uIGNob3NlbiBzbyBlbmFibGUgYWRkIHRvIGNhcnQgYnV0dG9uXG4gICAgICB0aGlzLm9wdGlvbkNob3NlbiA9IHRydWU7XG5cbiAgICAgIHRoaXMudmFyaWFudCA9IHZhcmlhbnQgYXMgU2hvcGlmeVByb2R1Y3RWYXJpYW50O1xuICAgIH1cblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgcHVibGljIGFkZFRvQ2FydCgpIHtcbiAgICBpZiAoIXRoaXMudmFyaWFudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTaG9waWZ5Q2FydFNlcnZpY2UuYWRkKHRoaXMudmFyaWFudC5pZCwgdGhpcy5zY29wZS5xdWFudGl0eSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiYWRkVG9DYXJ0IHJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJhZGRUb0NhcnQgZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlRGV0YWlsTWVudSgpIHtcbiAgICB0aGlzLnNjb3BlLnNob3dEZXRhaWxNZW51ID0gIXRoaXMuc2NvcGUuc2hvd0RldGFpbE1lbnU7XG4gIH1cblxuICBwdWJsaWMgaW5jcmVhc2UoKSB7XG4gICAgdGhpcy5zY29wZS5xdWFudGl0eSsrO1xuICB9XG5cbiAgcHVibGljIGRlY3JlYXNlKCkge1xuICAgIHRoaXMuc2NvcGUucXVhbnRpdHktLTtcbiAgICBpZiAodGhpcy5zY29wZS5xdWFudGl0eSA8PSAwKSB7XG4gICAgICB0aGlzLnNjb3BlLnF1YW50aXR5ID0gMTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV29ya2Fyb3VuZCBiZWNhdXNlIGBydi1jbGFzcy1hY3RpdmU9XCJpc09wdGlvbkFjdGl2ZSB8IGNhbGwgc2l6ZVwiYCBpcyBub3QgdXBkYXRpbmcgaWYgc2VsZWN0ZWRPcHRpb25zIGNoYW5nZXNcbiAgICogQHBhcmFtIG9wdGlvblZhbHVlXG4gICAqIEBwYXJhbSBvcHRpb25OYW1lXG4gICAqL1xuICBwcm90ZWN0ZWQgYWN0aXZhdGVPcHRpb24ob3B0aW9uVmFsdWU6IHN0cmluZywgb3B0aW9uTmFtZTogc3RyaW5nKSB7XG4gICAgb3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZS50b1N0cmluZygpLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXG4gICAgICBgLm9wdGlvbi0ke29wdGlvbk5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKX1gXG4gICAgKT8uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuICAgICAgYC5vcHRpb24tJHtvcHRpb25OYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCl9LSR7b3B0aW9uVmFsdWV9YFxuICAgICk/LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gIH1cblxuICAvKipcbiAgICogQWN0aXZhdGUgb3B0aW9uIGJ5IHNlbGVjdGVkIG9wdGlvbnMgKHNjb3BlLnNlbGVjdGVkT3B0aW9ucylcbiAgICogVGhpcyBtZXRob2Qgc2V0cyB0aGUgYWN0aXZlIGNsYXNzIHRvIHRoZSBvcHRpb25zIGVsZW1lbnRzXG4gICAqL1xuICBwcm90ZWN0ZWQgYWN0aXZhdGVPcHRpb25zKCkge1xuICAgIGZvciAoY29uc3QgcG9zaXRpb24wIGluIHRoaXMuc2VsZWN0ZWRPcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbnNbcG9zaXRpb24wXSkge1xuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IHRoaXMuc2VsZWN0ZWRPcHRpb25zW3Bvc2l0aW9uMF07XG4gICAgICAgIGlmICh0aGlzLnNjb3BlLnByb2R1Y3QpIHtcbiAgICAgICAgICBjb25zdCBvcHRpb25OYW1lID0gdGhpcy5zY29wZS5wcm9kdWN0Lm9wdGlvbnNbcG9zaXRpb24wXS5uYW1lO1xuICAgICAgICAgIC8vIE9ubHkgYWN0aXZhdGUgc2l6ZSBpZiBpdCB3YXMgY2xpY2tlZCBieSB0aGUgdXNlclxuICAgICAgICAgIGlmIChvcHRpb25OYW1lID09PSBcInNpemVcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uQ2hvc2VuKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVPcHRpb24ob3B0aW9uVmFsdWUsIG9wdGlvbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlT3B0aW9uKG9wdGlvblZhbHVlLCBvcHRpb25OYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYmVmb3JlQmluZCgpIHtcbiAgICBhd2FpdCBzdXBlci5iZWZvcmVCaW5kKCk7XG4gICAgaWYgKHRoaXMuc2NvcGUuaGFuZGxlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9kdWN0IGhhbmRsZSBub3Qgc2V0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gU2hvcGlmeVByb2R1Y3RTZXJ2aWNlLmdldCh0aGlzLnNjb3BlLmhhbmRsZSkudGhlbihcbiAgICAgIChwcm9kdWN0OiBTaG9waWZ5UHJvZHVjdCkgPT4ge1xuICAgICAgICB0aGlzLnByb2R1Y3QgPSBwcm9kdWN0O1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgYWZ0ZXJCaW5kKCkge1xuICAgIHRoaXMuYWN0aXZhdGVPcHRpb25zKCk7XG4gICAgYXdhaXQgc3VwZXIuYWZ0ZXJCaW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVxdWlyZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiaGFuZGxlXCJdO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IFJldHVyblR5cGU8VGVtcGxhdGVGdW5jdGlvbj4ge1xuICAgIC8vIE9ubHkgc2V0IHRoZSBjb21wb25lbnQgdGVtcGxhdGUgaWYgdGhlcmUgbm8gY2hpbGRzIGFscmVhZHlcbiAgICBpZiAodGhpcyAmJiBoYXNDaGlsZE5vZGVzVHJpbSh0aGlzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogY3VzdG9tIHZlcnNpb24gb2YgaW1hZ2VzLmluZGV4T2YgYnV0IGNvbXBhcmVzIHdpdGhvdXQgcHJvdG9jb2wgYW5kIHF1ZXJ5IHN0cmluZyBpbiB1cmxcbiAgICogQHBhcmFtIGltYWdlc1xuICAgKiBAcGFyYW0gZmluZEltYWdlXG4gICAqL1xuICBwcml2YXRlIGluZGV4T2ZVcmwoaW1hZ2VzOiBzdHJpbmdbXSwgZmluZEltYWdlOiBzdHJpbmcpIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBjb25zdCBjbGVhckZpbmRJbWFnZSA9IGZpbmRJbWFnZVxuICAgICAgLnNwbGl0KFwiP1wiKVswXSAvLyByZW1vdmUgcXVlcnkgc3RyaW5nXG4gICAgICAucmVwbGFjZSgvKF5cXHcrOnxeKVxcL1xcLy8sIFwiLy9cIik7IC8vIHJlbW92ZSBwcm90b2NvbFxuICAgIGltYWdlcy5mb3JFYWNoKChpbWFnZSwgaSkgPT4ge1xuICAgICAgY29uc3QgY2xlYXJJbWFnZSA9IGltYWdlXG4gICAgICAgIC5zcGxpdChcIj9cIilbMF0gLy8gcmVtb3ZlIHF1ZXJ5IHN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvKF5cXHcrOnxeKVxcL1xcLy8sIFwiLy9cIik7IC8vIHJlbW92ZSBwcm90b2NvbFxuICAgICAgaWYgKGNsZWFySW1hZ2UgPT09IGNsZWFyRmluZEltYWdlKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGltYWdlcyB3aGljaCBhcmUgbm90IGxpbmtlZCB0byBhbnkgdmFyaWFudFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRHZW5lcmFsSW1hZ2VzKG9wdGlvbk5hbWUgPSBcImNvbG9yXCIpIHtcbiAgICBvcHRpb25OYW1lID0gb3B0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGdlbmVyYWxJbWFnZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAodGhpcy5zY29wZS5wcm9kdWN0KSB7XG4gICAgICAvLyBhZGQgaW1hZ2VzIHdpdGhvdXQgb3B0aW9uTmFtZSBpbiBmaWxlbmFtZVxuICAgICAgdGhpcy5zY29wZS5wcm9kdWN0LmltYWdlcy5mb3JFYWNoKChpbWFnZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICghaW1hZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhgJHtvcHRpb25OYW1lfS1gKSkge1xuICAgICAgICAgIGdlbmVyYWxJbWFnZXMucHVzaChpbWFnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyByZW1vdmUgdmFyaWFudCBpbWFnZXMgZnJvbSBjb3BpZWQgYXJyYXlcbiAgICAgIHRoaXMuc2NvcGUucHJvZHVjdC52YXJpYW50cy5mb3JFYWNoKCh2YXJpYW50OiBTaG9waWZ5UHJvZHVjdFZhcmlhbnQpID0+IHtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGlmICh2YXJpYW50LmZlYXR1cmVkX2ltYWdlICE9PSBudWxsICYmIHZhcmlhbnQuZmVhdHVyZWRfaW1hZ2Uuc3JjKSB7XG4gICAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2ZVcmwoZ2VuZXJhbEltYWdlcywgdmFyaWFudC5mZWF0dXJlZF9pbWFnZS5zcmMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgZ2VuZXJhbEltYWdlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuZXJhbEltYWdlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3B0aW9ucyBpbWFnZXMgKHdpdGhvdXQgZmVhdHVyZWQgaW1hZ2UpIGZpbHRlcmVkIGJ5IGZpbGVuYW1lLlxuICAgKiBTaG9waWZ5IG9ubHkgc3VwcG9ydHMgb25lIGltYWdlIHBlciB2YXJpYW50LCB3aXRoIHRoaXMgZnVuY3Rpb24gbW9yZSBpbWFnZXMgZm9yIGVhY2ggdmFyaWFudCBhcmUgcG9zc2libGUuXG4gICAqIFRoZSBpbWFnZSBmaWxlbmFtZSBtdXN0IGluY2x1ZGUge29wdGlvbk5hbWV9LXtvcHRpb25WYWx1ZX0gZm9yIHRoYXQuXG4gICAqL1xuICBwcml2YXRlIGdldE9wdGlvbkltYWdlcyhcbiAgICBvcHRpb246IFNob3BpZnlQcm9kdWN0VmFyaWFudE9wdGlvbixcbiAgICBvcHRpb25WYWx1ZTogc3RyaW5nXG4gICkge1xuICAgIG9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKFwiI1wiLCBcIl9cIik7XG4gICAgY29uc3Qgb3B0aW9uTmFtZSA9IG9wdGlvbi5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3Qgb3B0aW9uSW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICh0aGlzLnNjb3BlLnByb2R1Y3QpIHtcbiAgICAgIHRoaXMuc2NvcGUucHJvZHVjdC5pbWFnZXMuZm9yRWFjaCgoaW1hZ2U6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoaW1hZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhgJHtvcHRpb25OYW1lfS0ke29wdGlvblZhbHVlfWApKSB7XG4gICAgICAgICAgb3B0aW9uSW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uSW1hZ2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmZWF0dXJlZCBpbWFnZXMgb2YgdmFyaWFudCwgdXNlIHRoZSBmaXJzdCBvcHRpb24gaW1hZ2Ugb3IgdGhlIGZlYXR1cmVkIHByb2R1Y3QgaW1hZ2UgYXMgZmFsbGJhY2tcbiAgICovXG4gIHByaXZhdGUgZ2V0RmVhdHVyZWRJbWFnZSh2YXJpYW50OiBQcmVwYXJlZFByb2R1Y3RWYXJpYW50KSB7XG4gICAgaWYgKHZhcmlhbnQuZmVhdHVyZWRfaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgIHZhcmlhbnQuZmVhdHVyZWRfaW1hZ2Uuc3JjID0gdmFyaWFudC5mZWF0dXJlZF9pbWFnZS5zcmMucmVwbGFjZShcbiAgICAgICAgLyheXFx3Kzp8XilcXC9cXC8vLFxuICAgICAgICBcIi8vXCJcbiAgICAgICk7IC8vIHJlbW92ZSBwcm90b2NvbFxuICAgICAgcmV0dXJuIHZhcmlhbnQuZmVhdHVyZWRfaW1hZ2U7XG4gICAgfVxuXG4gICAgbGV0IGZhbGxiYWNrSW1hZ2VTcmMgPSBcIlwiO1xuXG4gICAgaWYgKHZhcmlhbnQuaW1hZ2VzICYmIHZhcmlhbnQuaW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZhbGxiYWNrSW1hZ2VTcmMgPSB2YXJpYW50LmltYWdlc1swXTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NvcGUucHJvZHVjdCkge1xuICAgICAgZmFsbGJhY2tJbWFnZVNyYyA9IHRoaXMuc2NvcGUucHJvZHVjdC5mZWF0dXJlZF9pbWFnZTtcbiAgICB9XG5cbiAgICBpZiAoIWZhbGxiYWNrSW1hZ2VTcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBwcm90b2NvbCBmb3Igbm9ybWFsaXphdGlvblxuICAgIGZhbGxiYWNrSW1hZ2VTcmMgPSBmYWxsYmFja0ltYWdlU3JjLnJlcGxhY2UoLyheXFx3Kzp8XilcXC9cXC8vLCBcIi8vXCIpO1xuXG4gICAgLy8gSWYgdmFyaWFudCBoYXMgbm8gaW1hZ2UgdXNlIHRoZSBkZWZhdWx0IHByb2R1Y3QgaW1hZ2VcbiAgICBpZiAodGhpcy5zY29wZS5wcm9kdWN0KSB7XG4gICAgICBjb25zdCBmZWF0dXJlZEltYWdlID0ge1xuICAgICAgICBzcmM6IGZhbGxiYWNrSW1hZ2VTcmMsXG4gICAgICAgIHBvc2l0aW9uOiAwLFxuICAgICAgICBwcm9kdWN0X2lkOiB0aGlzLnNjb3BlLnByb2R1Y3QuaWQsXG4gICAgICAgIHZhcmlhbnRfaWRzOiBbXSBhcyBQcmVwYXJlZFByb2R1Y3RWYXJpYW50W1wiaWRcIl1bXSxcbiAgICAgICAgYWx0OiB0aGlzLnNjb3BlLnByb2R1Y3QudGl0bGUsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IHRoaXMuc2NvcGUucHJvZHVjdC5jcmVhdGVkX2F0LFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBpZDogMCxcbiAgICAgICAgdXBkYXRlZF9hdDogdGhpcy5zY29wZS5wcm9kdWN0LmNyZWF0ZWRfYXQsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZlYXR1cmVkSW1hZ2U7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW1hZ2Ugbm90IGZvdW5kXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXBhcmUgdmFyaWFudCwgZS5nLiBmaXggbWlzc2luZyBpbWFnZSBldGNcbiAgICogQHBhcmFtIHZhcmlhbnRcbiAgICovXG4gIHByaXZhdGUgcHJlcGFyZVZhcmlhbnQodmFyaWFudDogUHJlcGFyZWRQcm9kdWN0VmFyaWFudCkge1xuICAgIGlmICh2YXJpYW50ID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJXYXJuOiBWYXJpYW50IGlzIG51bGwhXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3JPcHRpb24pIHtcbiAgICAgIHZhcmlhbnQuaW1hZ2VzID0gdGhpcy5nZXRPcHRpb25JbWFnZXMoXG4gICAgICAgIHRoaXMuY29sb3JPcHRpb24sXG4gICAgICAgIHZhcmlhbnQub3B0aW9uc1t0aGlzLmNvbG9yT3B0aW9uLnBvc2l0aW9uIC0gMV1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldhcm46IGNvbG9yT3B0aW9uIG5vdCBkZWZpbmVkXCIpO1xuICAgICAgdmFyaWFudC5pbWFnZXMgPSBbXTtcbiAgICB9XG5cbiAgICB2YXJpYW50LmZlYXR1cmVkX2ltYWdlID0gdGhpcy5nZXRGZWF0dXJlZEltYWdlKHZhcmlhbnQpO1xuXG4gICAgaWYgKHZhcmlhbnQuaW1hZ2VzICYmIHZhcmlhbnQuZmVhdHVyZWRfaW1hZ2UpIHtcbiAgICAgIC8vIFJlbW92ZSBmZWF0dXJlZCBpbWFnZSBzbyB0aGF0IGl0IGRvZXMgbm90IGFwcGVhciB0d2ljZVxuICAgICAgY29uc3QgaSA9IHRoaXMuaW5kZXhPZlVybCh2YXJpYW50LmltYWdlcywgdmFyaWFudC5mZWF0dXJlZF9pbWFnZS5zcmMpO1xuICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICB2YXJpYW50LmltYWdlcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBnZW5lcmFsIGltYWdlc1xuICAgICAgdmFyaWFudC5pbWFnZXMgPSB2YXJpYW50LmltYWdlcy5jb25jYXQodGhpcy5nZXRHZW5lcmFsSW1hZ2VzKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJpYW50O1xuICB9XG59XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5cbi8qKlxuICogUmV0dXJuIGEgcmVzaXplZCBzaG9waWZ5IGltYWdlIFVSTFxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vZW4vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3VybC1maWx0ZXJzI2ltZ191cmxcbiAqXG4gKiBAcGFyYW0gdXJsXG4gKiBAcGFyYW0gc2l6ZVxuICogQHBhcmFtIHNjYWxlIFRPRE9cbiAqIEBwYXJhbSBjcm9wIFRPRE9cbiAqIEBwYXJhbSBleHRlbnNpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGltZ1VybEZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImltZ191cmxcIixcbiAgcmVhZChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBzaXplOiBzdHJpbmcsXG4gICAgc2NhbGU/OiBudW1iZXIsXG4gICAgY3JvcD86IHN0cmluZyxcbiAgICBleHRlbnNpb24/OiBzdHJpbmdcbiAgICAvLyBlbGVtZW50PzogSFRNTEltYWdlRWxlbWVudFxuICApIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHNpemUgPT09IFwib3JpZ2luYWxcIiB8fCBzaXplID09PSBcIm1hc3RlclwiKSB7XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgICB9XG4gICAgICBpZiAoc2NhbGUgJiYgc2NhbGUgIT09IDEpIHtcbiAgICAgICAgc2l6ZSArPSBcIkBcIiArIHNjYWxlICsgXCJ4XCI7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSB1cmwubWF0Y2goLyguKlxcL1tcXHdcXC1fLl0rKVxcLihcXHd7Miw0fSkvKTtcblxuICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdFsxXSB8fCAhcmVzdWx0WzJdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgbWF0Y2ggdXJsICR7dXJsfWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXRoID0gcmVzdWx0WzFdO1xuICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uIHx8IHJlc3VsdFsyXTtcbiAgICAgIHJldHVybiBwYXRoICsgXCJfXCIgKyBzaXplICsgXCIuXCIgKyBleHRlbnNpb247XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH0sXG59O1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vaW1nLXVybC5mb3JtYXR0ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vbmV5LmZvcm1hdHRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9uZXktd2l0aC1jdXJyZW5jeS5mb3JtYXR0ZXIuanNcIjtcblxuLy8gQWRkIFNob3BpZnktc3BlY2lmaWMgZm9ybWF0dGVycyBmb3IgUml2ZXRzLmpzLlxuLy8gZXhwb3J0IGNvbnN0IG1vbmV5ID0gKHZhbHVlLCBjdXJyZW5jeSkgPT4ge1xuLy8gICByZXR1cm4gVXRpbHMuZm9ybWF0TW9uZXkodmFsdWUsIFByb2R1Y3RKUy5zZXR0aW5ncy5tb25leUZvcm1hdCwgJ21vbmV5X2Zvcm1hdCcsIGN1cnJlbmN5KTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCBtb25leVdpdGhDdXJyZW5jeSA9ICh2YWx1ZSwgY3VycmVuY3kpID0+IHtcbi8vICAgcmV0dXJuIFV0aWxzLmZvcm1hdE1vbmV5KHZhbHVlLCBQcm9kdWN0SlMuc2V0dGluZ3MubW9uZXlXaXRoQ3VycmVuY3lGb3JtYXQsICdtb25leV93aXRoX2N1cnJlbmN5X2Zvcm1hdCcsIGN1cnJlbmN5KTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCB3ZWlnaHQgPSAoZ3JhbXMpID0+IHtcbi8vICAgc3dpdGNoIChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0VW5pdCkge1xuLy8gICAgIGNhc2UgJ2tnJzpcbi8vICAgICAgIHJldHVybiAoZ3JhbXMgLyAxMDAwKS50b0ZpeGVkKENhcnRKUy5zZXR0aW5ncy53ZWlnaHRQcmVjaXNpb24pO1xuLy8gICAgIGNhc2UgJ296Jzpcbi8vICAgICAgIHJldHVybiAoZ3JhbXMgKiAwLjAzNTI3NCkudG9GaXhlZChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0UHJlY2lzaW9uKTtcbi8vICAgICBjYXNlICdsYic6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zICogMC4wMDIyMDQ2MikudG9GaXhlZChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0UHJlY2lzaW9uKTtcbi8vICAgICBkZWZhdWx0OlxuLy8gICAgICAgcmV0dXJuIGdyYW1zLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgIH1cbi8vIH07XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgcHJvZHVjdCB2YXJpYW50J3Mgd2VpZ2h0LiBUaGUgd2VpZ2h0IHVuaXQgaXMgc2V0IGluIEdlbmVyYWwgU2V0dGluZ3MuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvYWRkaXRpb25hbC1maWx0ZXJzI3dlaWdodFdpdGhVbml0XG4gKi9cbi8vIGV4cG9ydCBjb25zdCB3ZWlnaHRXaXRoVW5pdCA9IChncmFtcykgPT4ge1xuLy8gICByZXR1cm4gZXhwb3J0IGNvbnN0IHdlaWdodChncmFtcykgKyBDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0VW5pdDtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCBwcm9kdWN0SW1hZ2VTaXplID0gKHNyYywgc2l6ZSkgPT4ge1xuLy8gICByZXR1cm4gQ2FydEpTLlV0aWxzLmdldFNpemVkSW1hZ2VVcmwoc3JjLCBzaXplKTtcbi8vIH07XG4iLCJpbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiQHJpYmFqcy9jb3JlXCI7XG5pbXBvcnQgeyBtb25leUZvcm1hdHRlciB9IGZyb20gXCIuL21vbmV5LmZvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgU2hvcGlmeVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvc2hvcGlmeS5zZXJ2aWNlLmpzXCI7XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgcHJpY2UgYmFzZWQgb24gdGhlIHNob3AncyBIVE1MIHdpdGggY3VycmVuY3kgc2V0dGluZyAoaWYgdGhlIGZvcm1hdCBpcyBub3Qgb3ZlcndyaXR0ZW4gYnkgcGFzc2luZyBhIGZvcm1hdCBwYXJhbWV0ZXIpLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vZW4vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21vbmV5LWZpbHRlcnNcbiAqL1xuZXhwb3J0IGNvbnN0IG1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwibW9uZXlfd2l0aF9jdXJyZW5jeVwiLFxuICByZWFkKGNlbnRzOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdD86IHN0cmluZykge1xuICAgIGNvbnN0IGZvcm1hdFN0cmluZyA9IGZvcm1hdCB8fCBTaG9waWZ5U2VydmljZS5tb25leVdpdGhDdXJyZW5jeUZvcm1hdDtcbiAgICBpZiAoIW1vbmV5Rm9ybWF0dGVyLnJlYWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBtb25leUZvcm1hdHRlcidzIHJlYWQgbWV0aG9kIVwiKSk7XG4gICAgICByZXR1cm4gY2VudHM7XG4gICAgfVxuICAgIHJldHVybiBtb25leUZvcm1hdHRlci5yZWFkKGNlbnRzLCBmb3JtYXRTdHJpbmcpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IFNob3BpZnlTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3Nob3BpZnkuc2VydmljZS5qc1wiO1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIHByaWNlIGJhc2VkIG9uIHRoZSBzaG9wJ3MgSFRNTCB3aXRoIGN1cnJlbmN5IHNldHRpbmcgKGlmIHRoZSBmb3JtYXQgaXMgbm90IG92ZXJ3cml0dGVuIGJ5IHBhc3NpbmcgYSBmb3JtYXQgcGFyYW1ldGVyKS5cbiAqIEBwYXJhbSBjZW50c1xuICogQHBhcmFtIGZvcm1hdFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL05hdGhhblBKRi9kZXBsb3lib3Qtc2hvcGlmeS9ibG9iL21hc3Rlci9hc3NldHMvYWpheGlmeS5qcy5saXF1aWRcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzLmNvZmZlZVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vSnVtcExpbmtOZXR3b3JrL3Nob3BpZnktcHJvZHVjdGpzL2Jsb2IvbWFzdGVyL3NyYy91dGlsaXRpZXMuanNcbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9saXF1aWQvZmlsdGVycy9tb25leS1maWx0ZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBtb25leUZvcm1hdHRlcjogRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcIm1vbmV5XCIsXG4gIHJlYWQoY2VudHM6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0Pzogc3RyaW5nKSB7XG4gICAgbGV0IHZhbHVlID0gXCJcIjtcbiAgICBjb25zdCBwbGFjZWhvbGRlclJlZ2V4ID0gL1xce1xce1xccyooXFx3KylcXHMqXFx9XFx9LztcbiAgICBjb25zdCBmb3JtYXRTdHJpbmcgPSBmb3JtYXQgfHwgdGhpcy5tb25leUZvcm1hdDtcblxuICAgIGlmICghZm9ybWF0U3RyaW5nKSB7XG4gICAgICBjb25zb2xlLndhcm4oYENhbid0IHBhcnNlIGZvcm1hdDogJHtmb3JtYXRTdHJpbmd9YCk7XG4gICAgICByZXR1cm4gXCIwXCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjZW50cyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY2VudHMgPSBjZW50cy5yZXBsYWNlKFwiLlwiLCBcIlwiKTtcbiAgICAgIC8vIGNlbnRzIHRvIGZsb2F0IG51bWJlclxuICAgICAgY2VudHMgPSBwYXJzZUZsb2F0KGNlbnRzLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGNvbnN0IG1hdGNoZWRGb3JtYXQgPSBmb3JtYXRTdHJpbmcubWF0Y2gocGxhY2Vob2xkZXJSZWdleCk7XG5cbiAgICBpZiAobWF0Y2hlZEZvcm1hdCAhPT0gbnVsbCAmJiBtYXRjaGVkRm9ybWF0Lmxlbmd0aCA+PSAxKSB7XG4gICAgICBzd2l0Y2ggKG1hdGNoZWRGb3JtYXRbMV0pIHtcbiAgICAgICAgY2FzZSBcImFtb3VudFwiOlxuICAgICAgICAgIHZhbHVlID0gU2hvcGlmeVNlcnZpY2UuZm9ybWF0TW9uZXlXaXRoRGVsaW1pdGVycyhjZW50cywgMik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhbW91bnRfbm9fZGVjaW1hbHNcIjpcbiAgICAgICAgICB2YWx1ZSA9IFNob3BpZnlTZXJ2aWNlLmZvcm1hdE1vbmV5V2l0aERlbGltaXRlcnMoY2VudHMsIDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYW1vdW50X3dpdGhfY29tbWFfc2VwYXJhdG9yXCI6XG4gICAgICAgICAgdmFsdWUgPSBTaG9waWZ5U2VydmljZS5mb3JtYXRNb25leVdpdGhEZWxpbWl0ZXJzKGNlbnRzLCAyLCBcIi5cIiwgXCIsXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYW1vdW50X25vX2RlY2ltYWxzX3dpdGhfY29tbWFfc2VwYXJhdG9yXCI6XG4gICAgICAgICAgdmFsdWUgPSBTaG9waWZ5U2VydmljZS5mb3JtYXRNb25leVdpdGhEZWxpbWl0ZXJzKGNlbnRzLCAwLCBcIi5cIiwgXCIsXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdFN0cmluZy5yZXBsYWNlKHBsYWNlaG9sZGVyUmVnZXgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLndhcm4oYENhbid0IHBhcnNlIGZvcm1hdDogJHtmb3JtYXRTdHJpbmd9YCk7XG4gICAgcmV0dXJuIFwiMFwiO1xuICB9LFxufTtcbiIsImV4cG9ydCAqIGZyb20gXCIuL3NlcnZpY2VzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaW5kZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5Lm1vZHVsZVwiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vYWRkcmVzc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2FydFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3VzdG9tZXIuXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kaXNjb3VudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vb3JkZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpbmtsaXN0LWxpbmtcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpbmtsaXN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZXRhZmllbGRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb2R1Y3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ltYWdlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaGlwcGluZy1yYXRlc1wiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vbW9kdWxlLnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3AtcXVldWUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJpb3JpdHktcXVldWUuc2VydmljZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hvcGlmeS1jYXJ0LnNlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nob3BpZnktcHJvZHVjdC5zZXJ2aWNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zaG9waWZ5LnNlcnZpY2UuanNcIjtcbiIsImltcG9ydCB7IFNob3BpZnlNb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBNb2R1bGVTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIHN0YXRpYyBfb3B0aW9uczogU2hvcGlmeU1vZHVsZU9wdGlvbnM7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U/OiBNb2R1bGVTZXJ2aWNlO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqL1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTaW5nbGV0b24oKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTaW5nbGV0b24gb2YgTW9kdWxlU2VydmljZSBub3QgZGVmaW5lZCwgcGxlYXNlIGNhbGwgc2V0U2luZ2xldG9uIGZpcnN0IWBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRTaW5nbGV0b24ob3B0aW9uczogU2hvcGlmeU1vZHVsZU9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpbmdsZXRvbiBvZiBNb2R1bGVTZXJ2aWNlIGFscmVhZHkgZGVmaW5lZCFgKTtcbiAgICB9XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cbn1cbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1xdWV1ZVxuXG5pbXBvcnQgeyBQcmlvcml0eVF1ZXVlIH0gZnJvbSBcIi4vcHJpb3JpdHktcXVldWUuc2VydmljZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUFF1ZXVlIHtcbiAgcHVibGljIHF1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cbiAgcHJpdmF0ZSBfY2FycnlvdmVyQ29uY3VycmVuY3lDb3VudDogbnVtYmVyO1xuICBwcml2YXRlIF9pc0ludGVydmFsSWdub3JlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfaW50ZXJ2YWxDb3VudCA9IDA7XG4gIHByaXZhdGUgX2ludGVydmFsQ2FwOiB0eXBlb2YgSW5maW5pdHk7XG4gIHByaXZhdGUgX2ludGVydmFsOiBudW1iZXI7XG4gIHByaXZhdGUgX2ludGVydmFsSWQ/OiBhbnk7XG4gIHByaXZhdGUgX2ludGVydmFsRW5kID0gMDtcbiAgcHJpdmF0ZSBfdGltZW91dElkOiBhbnkgfCBudWxsO1xuXG4gIHByaXZhdGUgX3BlbmRpbmdDb3VudCA9IDA7XG4gIHByaXZhdGUgX2NvbmN1cnJlbmN5OiB0eXBlb2YgSW5maW5pdHk7XG4gIHByaXZhdGUgX2lzUGF1c2VkOiBib29sZWFuO1xuXG4gIHByaXZhdGUgX3Jlc29sdmVFbXB0eTogKCkgPT4gYW55O1xuICBwcml2YXRlIF9yZXNvbHZlSWRsZTogKCkgPT4gYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFueSkge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBjYXJyeW92ZXJDb25jdXJyZW5jeUNvdW50OiBmYWxzZSxcbiAgICAgICAgaW50ZXJ2YWxDYXA6IEluZmluaXR5LFxuICAgICAgICBpbnRlcnZhbDogMCxcbiAgICAgICAgY29uY3VycmVuY3k6IEluZmluaXR5LFxuICAgICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICAgIHF1ZXVlQ2xhc3M6IFByaW9yaXR5UXVldWUsXG4gICAgICB9LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG5cbiAgICBpZiAoXG4gICAgICAhKHR5cGVvZiBvcHRpb25zLmNvbmN1cnJlbmN5ID09PSBcIm51bWJlclwiICYmIG9wdGlvbnMuY29uY3VycmVuY3kgPj0gMSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCBcXGBjb25jdXJyZW5jeVxcYCB0byBiZSBhIG51bWJlciBmcm9tIDEgYW5kIHVwLCBnb3QgXFxgJHtcbiAgICAgICAgICBvcHRpb25zLmNvbmN1cnJlbmN5XG4gICAgICAgIH1cXGAgKCR7dHlwZW9mIG9wdGlvbnMuY29uY3VycmVuY3l9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgISh0eXBlb2Ygb3B0aW9ucy5pbnRlcnZhbENhcCA9PT0gXCJudW1iZXJcIiAmJiBvcHRpb25zLmludGVydmFsQ2FwID49IDEpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgXFxgaW50ZXJ2YWxDYXBcXGAgdG8gYmUgYSBudW1iZXIgZnJvbSAxIGFuZCB1cCwgZ290IFxcYCR7XG4gICAgICAgICAgb3B0aW9ucy5pbnRlcnZhbENhcFxuICAgICAgICB9XFxgICgke3R5cGVvZiBvcHRpb25zLmludGVydmFsQ2FwfSlgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmludGVydmFsID09PSBcIm51bWJlclwiICYmXG4gICAgICAgIE51bWJlci5pc0Zpbml0ZShvcHRpb25zLmludGVydmFsKSAmJlxuICAgICAgICBvcHRpb25zLmludGVydmFsID49IDBcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCBcXGBpbnRlcnZhbFxcYCB0byBiZSBhIGZpbml0ZSBudW1iZXIgPj0gMCwgZ290IFxcYCR7XG4gICAgICAgICAgb3B0aW9ucy5pbnRlcnZhbFxuICAgICAgICB9XFxgICgke3R5cGVvZiBvcHRpb25zLmludGVydmFsfSlgXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX2NhcnJ5b3ZlckNvbmN1cnJlbmN5Q291bnQgPSBvcHRpb25zLmNhcnJ5b3ZlckNvbmN1cnJlbmN5Q291bnQ7XG4gICAgdGhpcy5faXNJbnRlcnZhbElnbm9yZWQgPVxuICAgICAgb3B0aW9ucy5pbnRlcnZhbENhcCA9PT0gSW5maW5pdHkgfHwgb3B0aW9ucy5pbnRlcnZhbCA9PT0gMDtcbiAgICB0aGlzLl9pbnRlcnZhbENvdW50ID0gMDtcbiAgICB0aGlzLl9pbnRlcnZhbENhcCA9IG9wdGlvbnMuaW50ZXJ2YWxDYXA7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBvcHRpb25zLmludGVydmFsO1xuICAgIHRoaXMuX2ludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5faW50ZXJ2YWxFbmQgPSAwO1xuICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XG5cbiAgICB0aGlzLnF1ZXVlID0gbmV3IG9wdGlvbnMucXVldWVDbGFzcygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgICB0aGlzLl9wZW5kaW5nQ291bnQgPSAwO1xuICAgIHRoaXMuX2NvbmN1cnJlbmN5ID0gb3B0aW9ucy5jb25jdXJyZW5jeTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IG9wdGlvbnMuYXV0b1N0YXJ0ID09PSBmYWxzZTtcbiAgICB0aGlzLl9yZXNvbHZlRW1wdHkgPSAoKSA9PiB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3Jlc29sdmVJZGxlID0gKCkgPT4ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIHB1YmxpYyBhZGQoZm46IGFueSwgb3B0aW9ucz86IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJ1biA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0NvdW50Kys7XG4gICAgICAgIHRoaXMuX2ludGVydmFsQ291bnQrKztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZShmbigpKS50aGVuKFxuICAgICAgICAgICAgKHZhbCkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKHZhbCk7XG4gICAgICAgICAgICAgIHRoaXMuX25leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICB0aGlzLl9uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgdGhpcy5fbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnF1ZXVlLmVucXVldWUocnVuLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3RyeVRvU3RhcnRBbm90aGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYWRkQWxsKGZuczogYW55LCBvcHRpb25zOiBhbnkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZm5zLm1hcCgoZm46IGFueSkgPT4gdGhpcy5hZGQoZm4sIG9wdGlvbnMpKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgd2hpbGUgKHRoaXMuX3RyeVRvU3RhcnRBbm90aGVyKCkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIHB1YmxpYyBwYXVzZSgpIHtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG4gIH1cblxuICBwdWJsaWMgb25FbXB0eSgpIHtcbiAgICAvLyBJbnN0YW50bHkgcmVzb2x2ZSBpZiB0aGUgcXVldWUgaXMgZW1wdHlcbiAgICBpZiAodGhpcy5xdWV1ZS5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZ1Jlc29sdmUgPSB0aGlzLl9yZXNvbHZlRW1wdHk7XG4gICAgICB0aGlzLl9yZXNvbHZlRW1wdHkgPSAoKSA9PiB7XG4gICAgICAgIGV4aXN0aW5nUmVzb2x2ZSgpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG9uSWRsZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBJbnN0YW50bHkgcmVzb2x2ZSBpZiBub25lIHBlbmRpbmcgYW5kIGlmIG5vdGhpbmcgZWxzZSBpcyBxdWV1ZWRcbiAgICBpZiAodGhpcy5fcGVuZGluZ0NvdW50ID09PSAwICYmIHRoaXMucXVldWUuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgZXhpc3RpbmdSZXNvbHZlID0gdGhpcy5fcmVzb2x2ZUlkbGU7XG4gICAgICB0aGlzLl9yZXNvbHZlSWRsZSA9ICgpID0+IHtcbiAgICAgICAgZXhpc3RpbmdSZXNvbHZlKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBwcml2YXRlIF9yZXNvbHZlRW1wdHkgPSAoKSA9PiB7IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLy8gcHJpdmF0ZSBfcmVzb2x2ZUlkbGUgPSAoKSA9PiB7IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBnZXQgX2RvZXNJbnRlcnZhbEFsbG93QW5vdGhlcigpIHtcbiAgICByZXR1cm4gdGhpcy5faXNJbnRlcnZhbElnbm9yZWQgfHwgdGhpcy5faW50ZXJ2YWxDb3VudCA8IHRoaXMuX2ludGVydmFsQ2FwO1xuICB9XG5cbiAgZ2V0IF9kb2VzQ29uY3VycmVudEFsbG93QW5vdGhlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGVuZGluZ0NvdW50IDwgdGhpcy5fY29uY3VycmVuY3k7XG4gIH1cblxuICBwcml2YXRlIF9uZXh0KCkge1xuICAgIHRoaXMuX3BlbmRpbmdDb3VudC0tO1xuICAgIHRoaXMuX3RyeVRvU3RhcnRBbm90aGVyKCk7XG4gIH1cblxuICBwcml2YXRlIF9yZXNvbHZlUHJvbWlzZXMoKSB7XG4gICAgdGhpcy5fcmVzb2x2ZUVtcHR5KCk7XG4gICAgdGhpcy5fcmVzb2x2ZUVtcHR5ID0gKCkgPT4ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nQ291bnQgPT09IDApIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVJZGxlKCk7XG4gICAgICB0aGlzLl9yZXNvbHZlSWRsZSA9ICgpID0+IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfb25SZXN1bWVJbnRlcnZhbCgpIHtcbiAgICB0aGlzLl9vbkludGVydmFsKCk7XG4gICAgdGhpcy5faW5pdGlhbGl6ZUludGVydmFsSWZOZWVkZWQoKTtcbiAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW50ZXJ2YWxQYXVzZWQoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5faW50ZXJ2YWxJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWxheSA9IHRoaXMuX2ludGVydmFsRW5kIC0gbm93O1xuICAgICAgaWYgKGRlbGF5IDwgMCkge1xuICAgICAgICAvLyBBY3QgYXMgdGhlIGludGVydmFsIHdhcyBkb25lXG4gICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcmVzdW1lIGl0IGhlcmUsXG4gICAgICAgIC8vIGJlY2F1c2UgaXQnbGwgYmUgcmVzdW1lZCBvbiBsaW5lIDE2MFxuICAgICAgICB0aGlzLl9pbnRlcnZhbENvdW50ID0gdGhpcy5fY2FycnlvdmVyQ29uY3VycmVuY3lDb3VudFxuICAgICAgICAgID8gdGhpcy5fcGVuZGluZ0NvdW50XG4gICAgICAgICAgOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWN0IGFzIHRoZSBpbnRlcnZhbCBpcyBwZW5kaW5nXG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0SWQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX29uUmVzdW1lSW50ZXJ2YWwoKSwgZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBfdHJ5VG9TdGFydEFub3RoZXIoKSB7XG4gICAgaWYgKHRoaXMucXVldWUuc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gV2UgY2FuIGNsZWFyIHRoZSBpbnRlcnZhbCAoXCJwYXVzZVwiKVxuICAgICAgLy8gYmVjYXVzZSB3ZSBjYW4gcmVkbyBpdCBsYXRlciAoXCJyZXN1bWVcIilcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxJZCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLl9yZXNvbHZlUHJvbWlzZXMoKTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIGNvbnN0IGNhbkluaXRpYWxpemVJbnRlcnZhbCA9ICF0aGlzLl9pbnRlcnZhbFBhdXNlZCgpO1xuICAgICAgaWYgKHRoaXMuX2RvZXNJbnRlcnZhbEFsbG93QW5vdGhlciAmJiB0aGlzLl9kb2VzQ29uY3VycmVudEFsbG93QW5vdGhlcikge1xuICAgICAgICB0aGlzLnF1ZXVlLmRlcXVldWUoKSgpO1xuICAgICAgICBpZiAoY2FuSW5pdGlhbGl6ZUludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUludGVydmFsSWZOZWVkZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRpYWxpemVJbnRlcnZhbElmTmVlZGVkKCkge1xuICAgIGlmICh0aGlzLl9pc0ludGVydmFsSWdub3JlZCB8fCB0aGlzLl9pbnRlcnZhbElkICE9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHRoaXMuX29uSW50ZXJ2YWwoKSwgdGhpcy5faW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFsRW5kID0gRGF0ZS5ub3coKSArIHRoaXMuX2ludGVydmFsO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25JbnRlcnZhbCgpIHtcbiAgICBpZiAodGhpcy5faW50ZXJ2YWxDb3VudCA9PT0gMCAmJiB0aGlzLl9wZW5kaW5nQ291bnQgPT09IDApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxJZCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuX2ludGVydmFsQ291bnQgPSB0aGlzLl9jYXJyeW92ZXJDb25jdXJyZW5jeUNvdW50XG4gICAgICA/IHRoaXMuX3BlbmRpbmdDb3VudFxuICAgICAgOiAwO1xuICAgIHdoaWxlICh0aGlzLl90cnlUb1N0YXJ0QW5vdGhlcigpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZS5zaXplO1xuICB9XG5cbiAgZ2V0IHBlbmRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcbiAgfVxuXG4gIGdldCBpc1BhdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNQYXVzZWQ7XG4gIH1cbn1cbiIsIi8vIFBvcnQgb2YgbG93ZXJfYm91bmQgZnJvbSBodHRwOi8vZW4uY3BwcmVmZXJlbmNlLmNvbS93L2NwcC9hbGdvcml0aG0vbG93ZXJfYm91bmRcbi8vIFVzZWQgdG8gY29tcHV0ZSBpbnNlcnRpb24gaW5kZXggdG8ga2VlcCBxdWV1ZSBzb3J0ZWQgYWZ0ZXIgaW5zZXJ0aW9uXG5leHBvcnQgZnVuY3Rpb24gbG93ZXJCb3VuZChhcnJheTogYW55LCB2YWx1ZTogYW55LCBjb21wOiBhbnkpIHtcbiAgbGV0IGZpcnN0ID0gMDtcbiAgbGV0IGNvdW50ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChjb3VudCA+IDApIHtcbiAgICBjb25zdCBzdGVwID0gKGNvdW50IC8gMikgfCAwO1xuICAgIGxldCBpdCA9IGZpcnN0ICsgc3RlcDtcblxuICAgIGlmIChjb21wKGFycmF5W2l0XSwgdmFsdWUpIDw9IDApIHtcbiAgICAgIGZpcnN0ID0gKytpdDtcbiAgICAgIGNvdW50IC09IHN0ZXAgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IHN0ZXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpcnN0O1xufVxuXG5leHBvcnQgY2xhc3MgUHJpb3JpdHlRdWV1ZSB7XG4gIHByaXZhdGUgX3F1ZXVlOiBBcnJheTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3F1ZXVlID0gW107XG4gIH1cblxuICBwdWJsaWMgZW5xdWV1ZShydW46IGFueSwgb3B0aW9uczogYW55KSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgfSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuXG4gICAgY29uc3QgZWxlbWVudCA9IHsgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHksIHJ1biB9O1xuXG4gICAgaWYgKHRoaXMuc2l6ZSAmJiB0aGlzLl9xdWV1ZVt0aGlzLnNpemUgLSAxXS5wcmlvcml0eSA+PSBvcHRpb25zLnByaW9yaXR5KSB7XG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKGVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gbG93ZXJCb3VuZChcbiAgICAgIHRoaXMuX3F1ZXVlLFxuICAgICAgZWxlbWVudCxcbiAgICAgIChhOiBhbnksIGI6IGFueSkgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHlcbiAgICApO1xuICAgIHRoaXMuX3F1ZXVlLnNwbGljZShpbmRleCwgMCwgZWxlbWVudCk7XG4gIH1cblxuICBwdWJsaWMgZGVxdWV1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWUuc2hpZnQoKS5ydW47XG4gIH1cblxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWUubGVuZ3RoO1xuICB9XG59XG4iLCJpbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJAcmliYWpzL2V2ZW50c1wiO1xuaW1wb3J0IHsgaXNPYmplY3QsIGNsb25lLCBnZXROdW1iZXIgfSBmcm9tIFwiQHJpYmFqcy91dGlscy9zcmMvdHlwZS5qc1wiO1xuaW1wb3J0IHsgUFF1ZXVlIH0gZnJvbSBcIi4vcC1xdWV1ZS5zZXJ2aWNlLmpzXCI7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1xdWV1ZVxuXG5pbXBvcnQge1xuICBTaG9waWZ5Q2FydExpbmVJdGVtLFxuICBTaG9waWZ5Q2FydFVwZGF0ZVByb3BlcnR5LFxuICBTaG9waWZ5Q2FydEFkZEVycm9yLFxuICBTaG9waWZ5Q2FydE9iamVjdCxcbiAgU2hvcGlmeUN1c3RvbWVyQWRkcmVzcyxcbiAgU2hvcGlmeVNoaXBwaW5nUmF0ZXMsXG4gIFNob3BpZnlTaGlwcGluZ1JhdGUsXG4gIFNob3BpZnlTaGlwcGluZ1JhdGVzTm9ybWFsaXplZCxcbn0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTaG9waWZ5Q2FydFJlcXVlc3RPcHRpb25zIHtcbiAgdHJpZ2dlck9uU3RhcnQ6IGJvb2xlYW47XG4gIHRyaWdnZXJPbkNvbXBsZXRlOiBib29sZWFuO1xuICB0cmlnZ2VyT25DaGFuZ2U6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5Q2FydFNlcnZpY2Uge1xuICBwdWJsaWMgc3RhdGljIHF1ZXVlID0gbmV3IFBRdWV1ZSh7IGNvbmN1cnJlbmN5OiAxIH0pO1xuXG4gIHB1YmxpYyBzdGF0aWMgY2FydDogU2hvcGlmeUNhcnRPYmplY3QgfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgc3RhdGljIHNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihcIlNob3BpZnlDYXJ0XCIpO1xuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gZm9yY2UgYW4gdXBkYXRlIG9mIHRoZSBzaG9wcGluZyBjYXJ0IG9iamVjdCwgZS5nLiBpZiB0aGUgc2hvcHBpbmcgY2FydCB3YXMgdXBkYXRlZCBvdXRzaWRlIFJpYmEuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFzeW5jIHVwZGF0ZUV4dGVybihcbiAgICBvcHRpb25zOiBTaG9waWZ5Q2FydFJlcXVlc3RPcHRpb25zID0gdGhpcy5yZXF1ZXN0T3B0aW9uRGVmYXVsdHNcbiAgKSB7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uU3RhcnQpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uU3RhcnQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdDYXJ0ID0gYXdhaXQgdGhpcy5yZWZyZXNoKCk7XG4gICAgY29uc3Qgb2xkQ2FydCA9IHRoaXMuY2FydDtcbiAgICB0aGlzLmNhcnQgPSBuZXdDYXJ0O1xuXG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uQ2hhbmdlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIG9sZENhcnQ/LnRvdGFsX3ByaWNlICE9PSBuZXdDYXJ0Py50b3RhbF9wcmljZSB8fFxuICAgICAgICBvbGRDYXJ0Py5pdGVtX2NvdW50ICE9PSBvbGRDYXJ0Py5pdGVtX2NvdW50XG4gICAgICApIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jYXJ0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25Db21wbGV0ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyT25Db21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byBhZGQgYSB2YXJpYW50IHRvIHRoZSBjYXJ0LlxuICAgKiBAcGFyYW0gaWQgVmFyaWFudCBpZFxuICAgKiBAcGFyYW0gcXVhbnRpdHkgUXVhbnRpdHlcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgQWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4gUmVzcG9uc2UgaWYgc3VjY2Vzc2Z1bCwgdGhlIEpTT04gb2YgdGhlIGxpbmUgaXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIGFkZGVkIHZhcmlhbnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9kZXZlbG9wbWVudC9nZXR0aW5nLXN0YXJ0ZWQvdXNpbmctYWpheC1hcGkjYWRkLXRvLWNhcnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgYWRkKFxuICAgIGlkOiBudW1iZXIsXG4gICAgcXVhbnRpdHkgPSAxLFxuICAgIHByb3BlcnRpZXMgPSB7fSxcbiAgICBvcHRpb25zOiBTaG9waWZ5Q2FydFJlcXVlc3RPcHRpb25zID0gdGhpcy5yZXF1ZXN0T3B0aW9uRGVmYXVsdHNcbiAgKTogUHJvbWlzZTxTaG9waWZ5Q2FydExpbmVJdGVtIHwgU2hvcGlmeUNhcnRBZGRFcnJvcj4ge1xuICAgIGlmIChvcHRpb25zLnRyaWdnZXJPblN0YXJ0KSB7XG4gICAgICB0aGlzLnRyaWdnZXJPblN0YXJ0KCk7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnF1ZXVlLmFkZChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBib2R5OiBhbnkgPSB7IGlkLCBxdWFudGl0eSB9O1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBib2R5LnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgICAgfVxuICAgICAgY29uc3QgbGluZUl0ZW1SZXMgPSBhd2FpdCBIdHRwU2VydmljZS5wb3N0PFxuICAgICAgICBTaG9waWZ5Q2FydExpbmVJdGVtIHwgU2hvcGlmeUNhcnRBZGRFcnJvclxuICAgICAgPih0aGlzLkNBUlRfUE9TVF9BRERfVVJMLCBib2R5LCBcImpzb25cIik7XG5cbiAgICAgIGlmIChsaW5lSXRlbVJlcy5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgIHRocm93IGxpbmVJdGVtUmVzLmJvZHkgYXMgU2hvcGlmeUNhcnRBZGRFcnJvcjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGluZUl0ZW0gPSBsaW5lSXRlbVJlcy5ib2R5O1xuXG4gICAgICAvLyBGb3JjZSB1cGRhdGUgY2FydCBvYmplY3RcbiAgICAgIGNvbnN0IGNhcnRSZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXQ8U2hvcGlmeUNhcnRPYmplY3Q+KFxuICAgICAgICB0aGlzLkNBUlRfR0VUX1VSTCxcbiAgICAgICAge30sXG4gICAgICAgIFwianNvblwiXG4gICAgICApO1xuXG4gICAgICBpZiAoY2FydFJlcy5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgIHRocm93IGxpbmVJdGVtUmVzLmJvZHkgYXMgU2hvcGlmeUNhcnRBZGRFcnJvcjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FydCA9IGNhcnRSZXMuYm9keTtcbiAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNoYW5nZSkge1xuICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZShjYXJ0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlckFkZChpZCwgcXVhbnRpdHksIHByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIGxpbmVJdGVtOyAvLyByZXR1cm4gb3JpZ2luYWwgcmVzcG9uc2VcbiAgICB9KTtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25Db21wbGV0ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyT25Db21wbGV0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgcmVmcmVzaCgpOiBQcm9taXNlPFNob3BpZnlDYXJ0T2JqZWN0PiB7XG4gICAgY29uc3QgY2FydFJlcyA9IGF3YWl0IEh0dHBTZXJ2aWNlLmdldDxTaG9waWZ5Q2FydE9iamVjdD4oXG4gICAgICB0aGlzLkNBUlRfR0VUX1VSTCxcbiAgICAgIHt9LFxuICAgICAgXCJqc29uXCJcbiAgICApO1xuXG4gICAgbGV0IGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0O1xuXG4gICAgaWYgKHR5cGVvZiBjYXJ0UmVzLmJvZHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNhcnQgPSBKU09OLnBhcnNlKGNhcnRSZXMuYm9keSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhcnQgPSBjYXJ0UmVzLmJvZHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhcnQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIF9nZXQoKTogUHJvbWlzZTxTaG9waWZ5Q2FydE9iamVjdD4ge1xuICAgIGlmIChTaG9waWZ5Q2FydFNlcnZpY2UuY2FydCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlIC8qLCByZWplY3QqLykgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoU2hvcGlmeUNhcnRTZXJ2aWNlLmNhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFNob3BpZnlDYXJ0U2VydmljZS5jYXJ0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFNob3BpZnlDYXJ0U2VydmljZS5yZWZyZXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRoaXMgdG8gZ2V0IHRoZSBjYXJ0IGFzIEpTT04uXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEByZXR1cm4gVGhlIEpTT04gb2YgdGhlIGNhcnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9kZXZlbG9wbWVudC9nZXR0aW5nLXN0YXJ0ZWQvdXNpbmctYWpheC1hcGkjZ2V0LWNhcnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0KFxuICAgIG9wdGlvbnM6IFNob3BpZnlDYXJ0UmVxdWVzdE9wdGlvbnMgPSB0aGlzLnJlcXVlc3RPcHRpb25EZWZhdWx0c1xuICApOiBQcm9taXNlPFNob3BpZnlDYXJ0T2JqZWN0PiB7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uU3RhcnQpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uU3RhcnQoKTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucXVldWUuYWRkKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXQoKTtcbiAgICB9KTtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25Db21wbGV0ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyT25Db21wbGV0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byBjaGFuZ2UgY2FydCBhdHRyaWJ1dGVzLCB0aGUgY2FydCBub3RlLCBhbmQgcXVhbnRpdGllcyBvZiBsaW5lIGl0ZW1zIGluIHRoZSBjYXJ0LlxuICAgKiBAcGFyYW0gaWQgVmFyaWFudCBJRFxuICAgKiBAcGFyYW0gcXVhbnRpdHkgUXVhbnRpdHlcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgQWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4gUmVzcG9uc2UgVGhlIEpTT04gb2YgdGhlIGNhcnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9kZXZlbG9wbWVudC9nZXR0aW5nLXN0YXJ0ZWQvdXNpbmctYWpheC1hcGkjdXBkYXRlLWNhcnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdXBkYXRlKFxuICAgIGlkOiBudW1iZXIgfCBudW1iZXIsXG4gICAgcXVhbnRpdHk6IG51bWJlcixcbiAgICBwcm9wZXJ0aWVzID0ge30sXG4gICAgb3B0aW9uczogU2hvcGlmeUNhcnRSZXF1ZXN0T3B0aW9ucyA9IHRoaXMucmVxdWVzdE9wdGlvbkRlZmF1bHRzXG4gICk6IFByb21pc2U8U2hvcGlmeUNhcnRPYmplY3Q+IHtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25TdGFydCkge1xuICAgICAgdGhpcy50cmlnZ2VyT25TdGFydCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5xdWV1ZVxuICAgICAgLmFkZCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHk6IGFueSA9IHsgaWQsIHF1YW50aXR5IH07XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBib2R5LnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBIdHRwU2VydmljZS5wb3N0KHRoaXMuQ0FSVF9QT1NUX1VQREFURV9VUkwsIGJvZHksIFwiZm9ybVwiKTtcbiAgICAgIH0pXG4gICAgICAvLyBiZWNhdXNlIHR5cGUgaXMgZm9ybSB3ZSBuZWVkIHRvIHBhcnNlIHRoZSBqc29uIHJlc3BvbnNlIGJ5IHNlbGZcbiAgICAgIC50aGVuKChjYXJ0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY2FydCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNoYW5nZSkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKGNhcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgICAgfSk7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uQ29tcGxldGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRoaXMgdG8gY2hhbmdlIGNhcnQgYXR0cmlidXRlcywgdGhlIGNhcnQgbm90ZSwgYW5kIHF1YW50aXRpZXMgb2YgbGluZSBpdGVtcyBpbiB0aGUgY2FydC5cbiAgICogQHBhcmFtIGlkIFZhcmlhbnQgSURcbiAgICogQHBhcmFtIHF1YW50aXR5IFF1YW50aXR5XG4gICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFkZGl0aW9uYWwgcHJvcGVydGllc1xuICAgKiBAcmV0dXJuIFJlc3BvbnNlIFRoZSBKU09OIG9mIHRoZSBjYXJ0LlxuICAgKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS9lbi90aGVtZXMvZGV2ZWxvcG1lbnQvZ2V0dGluZy1zdGFydGVkL3VzaW5nLWFqYXgtYXBpI3VwZGF0ZS1jYXJ0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHVwZGF0ZXMoXG4gICAgdXBkYXRlczogU2hvcGlmeUNhcnRVcGRhdGVQcm9wZXJ0eSB8IEFycmF5PG51bWJlcj4sXG4gICAgb3B0aW9uczogU2hvcGlmeUNhcnRSZXF1ZXN0T3B0aW9ucyA9IHRoaXMucmVxdWVzdE9wdGlvbkRlZmF1bHRzXG4gICk6IFByb21pc2U8U2hvcGlmeUNhcnRPYmplY3Q+IHtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25TdGFydCkge1xuICAgICAgdGhpcy50cmlnZ2VyT25TdGFydCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5xdWV1ZVxuICAgICAgLmFkZCgoKSA9PiB7XG4gICAgICAgIHJldHVybiBIdHRwU2VydmljZS5wb3N0KFxuICAgICAgICAgIHRoaXMuQ0FSVF9QT1NUX1VQREFURV9VUkwsXG4gICAgICAgICAge1xuICAgICAgICAgICAgdXBkYXRlcyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZm9ybVwiXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICAgLy8gYmVjYXVzZSB0eXBlIGlzIGZvcm0gd2UgbmVlZCB0byBwYXJzZSB0aGUganNvbiByZXNwb25zZSBieSBzZWxmXG4gICAgICAudGhlbigoY2FydDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNhcnQpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChjYXJ0OiBTaG9waWZ5Q2FydE9iamVjdCkgPT4ge1xuICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25DaGFuZ2UpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZShjYXJ0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FydDtcbiAgICAgIH0pO1xuICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLnRyaWdnZXJPbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FsbCBzZXRzIHRoZSBxdWFudGl0eSBvZiBhbiBpdGVtIGFscmVhZHkgaW4gdGhlIGNhcnQuXG4gICAqXG4gICAqIEFsdGhvdWdoIC9jYXJ0L3VwZGF0ZS5qcyBhbmQgL2NhcnQvY2hhbmdlLmpzIG1heSBzZWVtIGxpa2UgdGhleSBhY2NvbXBsaXNoIHRoZSBzYW1lIGZ1bmN0aW9uLFxuICAgKiB0aGV5IHRydWx5IGFyZSBxdWl0ZSBkaWZmZXJlbnQuIFRoZSAvY2FydC91cGRhdGUuanMgY29udHJvbGxlciBhbGxvd3MgdXBkYXRlcyB0byBzZXZlcmFsIGl0ZW1zXG4gICAqIGF0IG9uY2UsIGluY2x1ZGluZyBpdGVtcyB0aGF0IG1heSBub3QgeWV0IGJlIGluIHRoZSBjYXJ0IChpdCB3aWxsIGFkZCB0aGVtKSwgYW5kIGl0IGFsc28gYWxsb3dzXG4gICAqIHVwZGF0ZXMgb2YgY2FydCBhdHRyaWJ1dGVzIGFuZCB0aGUgY2FydCBub3RlLiBUaGUgL2NhcnQvY2hhbmdlLmpzIGNvbnRyb2xsZXIgaXMgb25seSBhYmxlIHRvXG4gICAqIHVwZGF0ZSB0aGUgcXVhbnRpdHkgb2Ygb25lIGl0ZW0gYXQgYSB0aW1lLCBhbmQgdGhhdCBpdGVtIG11c3QgYmUgaW4gdGhlIGNhcnQgYWxyZWFkeS4gSWYgdGhlXG4gICAqIGl0ZW0gaXMgbm90IGluIHRoZSBjYXJ0LCAvY2FydC9jaGFuZ2UuanMgd2lsbCBub3QgYWRkIGl0IGFuZCBpdCB3aWxsIHRoZW4gcmV0dXJuIGEgNDA0IGVycm9yLlxuICAgKiBXaGVyZWFzIHRoZSAvY2FydC91cGRhdGUuanMgY29udHJvbGxlciB1cGRhdGVzIG5vIHF1YW50aXR5IHdoZW4gYW55IG9mIHRoZSByZXF1ZXN0ZWQgdXBkYXRlXG4gICAqIGNhbm5vdCBiZSBtZXQsIHRoZSAvY2FydC9jaGFuZ2UuanMgY29udHJvbGxlciwgb24gdGhlIG90aGVyIGhhbmQsIHdpbGwgYWRqdXN0IHRoZSBxdWFudGl0eSB0b1xuICAgKiBhZGQgYWxsIGl0ZW1zIGluIHN0b2NrIGlmIHdoYXQgaXMgcmVxdWVzdGVkIGlzIGdyZWF0ZXIgdGhhbiB3aGF0J3MgYXZhaWxhYmxlLiBVc2UgeW91ciBicm93c2VyJ3NcbiAgICogSmF2YVNjcmlwdCBjb25zb2xlIHRvIHRlc3QgdGhpbmdzIG91dCBpZiB5b3UncmUgbm90IHN1cmUgYWJvdXQgdGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgcmVxdWVzdCBVUkxzLlxuICAgKlxuICAgKiBAcGFyYW0gaWQgVmFyaWFudCBJRFxuICAgKiBAcGFyYW0gcXVhbnRpdHkgUXVhbnRpdHlcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgQWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4gUmVzcG9uc2UgVGhlIEpTT04gb2YgdGhlIGNhcnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2VuL3RoZW1lcy9kZXZlbG9wbWVudC9nZXR0aW5nLXN0YXJ0ZWQvdXNpbmctYWpheC1hcGkjY2hhbmdlLWNhcnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgY2hhbmdlKFxuICAgIGlkOiBudW1iZXIgfCBudW1iZXIsXG4gICAgcXVhbnRpdHk6IG51bWJlcixcbiAgICBwcm9wZXJ0aWVzID0ge30sXG4gICAgb3B0aW9uczogU2hvcGlmeUNhcnRSZXF1ZXN0T3B0aW9ucyA9IHRoaXMucmVxdWVzdE9wdGlvbkRlZmF1bHRzXG4gICk6IFByb21pc2U8U2hvcGlmeUNhcnRPYmplY3Q+IHtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25TdGFydCkge1xuICAgICAgdGhpcy50cmlnZ2VyT25TdGFydCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5xdWV1ZS5hZGQoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYm9keTogYW55ID0geyBpZCwgcXVhbnRpdHkgfTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgYm9keS5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FydFJlcyA9IGF3YWl0IEh0dHBTZXJ2aWNlLnBvc3Q8U2hvcGlmeUNhcnRPYmplY3QgfCBzdHJpbmc+KFxuICAgICAgICB0aGlzLkNBUlRfUE9TVF9DSEFOR0VfVVJMLFxuICAgICAgICBib2R5LFxuICAgICAgICBcImZvcm1cIlxuICAgICAgKTtcblxuICAgICAgbGV0IGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0O1xuXG4gICAgICAvLyBCZWNhdXNlIHR5cGUgaXMgZm9ybSB3ZSBuZWVkIHRvIHBhcnNlIHRoZSBqc29uIHJlc3BvbnNlIGJ5IHNlbGZcbiAgICAgIGlmICh0eXBlb2YgY2FydFJlcy5ib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNhcnQgPSBKU09OLnBhcnNlKGNhcnRSZXMuYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJ0ID0gY2FydFJlcy5ib2R5O1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UoY2FydCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYXJ0O1xuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLnRyaWdnZXJPbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHlvdSB1c2UgTGluZSBJdGVtIFByb3BlcnRpZXMgeW91IG1heSBlbmQgdXAgd2l0aCBzZXZlcmFsIGl0ZW1zIGluIHRoZSBjYXJ0IHRoYXQgc2hhcmUgdGhlIHNhbWUgdmFyaWFudCBJRC5cbiAgICogSG93IGRvIHlvdSB1cGRhdGUgdGhlIHF1YW50aXR5IG9mIGFuIGl0ZW0gaW4gdGhlIGNhcnQgdGhhdCBoYXMgc3BlY2lmaWMgbGluZSBpdGVtIHByb3BlcnRpZXM/XG4gICAqIE9uY2UgeW91IGhhdmUgaWRlbnRpZmllZCB0aGUgMS1iYXNlZCBpbmRleCBvZiB0aGUgaXRlbSBpbiB0aGUgY2FydCwgeW91IGNhbiB1c2UgdGhlIGxpbmUgcHJvcGVydHkgaW5zdGVhZCBvZiBpZC5cbiAgICogQHBhcmFtIGxpbmUgLWJhc2VkIGluZGV4IG9mIHRoZSBpdGVtIGluIHRoZSBjYXJ0XG4gICAqIEBwYXJhbSBxdWFudGl0eSBRdWFudGl0eVxuICAgKiBAcGFyYW0gcHJvcGVydGllcyBBZGRpdGlvbmFsIHByb3BlcnRpZXNcbiAgICogQHJldHVybiBSZXNwb25zZSBUaGUgSlNPTiBvZiB0aGUgY2FydC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgY2hhbmdlTGluZShcbiAgICBsaW5lOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgcXVhbnRpdHk6IG51bWJlcixcbiAgICBwcm9wZXJ0aWVzID0ge30sXG4gICAgb3B0aW9uczogU2hvcGlmeUNhcnRSZXF1ZXN0T3B0aW9ucyA9IHRoaXMucmVxdWVzdE9wdGlvbkRlZmF1bHRzXG4gICk6IFByb21pc2U8U2hvcGlmeUNhcnRPYmplY3Q+IHtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25TdGFydCkge1xuICAgICAgdGhpcy50cmlnZ2VyT25TdGFydCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5xdWV1ZS5hZGQoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYm9keTogYW55ID0geyBsaW5lLCBxdWFudGl0eSB9O1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBib2R5LnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgICAgfVxuICAgICAgY29uc3QgY2FydFJlcyA9IGF3YWl0IEh0dHBTZXJ2aWNlLnBvc3Q8U2hvcGlmeUNhcnRPYmplY3QgfCBzdHJpbmc+KFxuICAgICAgICB0aGlzLkNBUlRfUE9TVF9DSEFOR0VfVVJMLFxuICAgICAgICBib2R5LFxuICAgICAgICBcImZvcm1cIlxuICAgICAgKTtcblxuICAgICAgbGV0IGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0O1xuXG4gICAgICAvLyBCZWNhdXNlIHR5cGUgaXMgZm9ybSB3ZSBuZWVkIHRvIHBhcnNlIHRoZSBqc29uIHJlc3BvbnNlIGJ5IHNlbGZcbiAgICAgIGlmICh0eXBlb2YgY2FydFJlcy5ib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNhcnQgPSBKU09OLnBhcnNlKGNhcnRSZXMuYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJ0ID0gY2FydFJlcy5ib2R5O1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UoY2FydCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYXJ0O1xuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLnRyaWdnZXJPbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlIGFzIFByb21pc2U8U2hvcGlmeUNhcnRPYmplY3Q+O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FsbCBzZXRzIGFsbCBxdWFudGl0aWVzIG9mIGFsbCBsaW5lIGl0ZW1zIGluIHRoZSBjYXJ0IHRvIHplcm8uXG4gICAqIEByZXR1cm4gVGhlIEpTT04gb2YgYW4gZW1wdHkgY2FydC4gVGhpcyBkb2VzIG5vdCByZW1vdmUgY2FydCBhdHRyaWJ1dGVzIG5vciB0aGUgY2FydCBub3RlLlxuICAgKiBAcmV0dXJuIFJlc3BvbnNlIFRoZSBKU09OIG9mIGFuIGVtcHR5IGNhcnQuIFRoaXMgZG9lcyBub3QgcmVtb3ZlIGNhcnQgYXR0cmlidXRlcyBub3IgdGhlIGNhcnQgbm90ZS5cbiAgICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vZW4vdGhlbWVzL2RldmVsb3BtZW50L2dldHRpbmctc3RhcnRlZC91c2luZy1hamF4LWFwaSNjbGVhci1jYXJ0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFzeW5jIGNsZWFyKFxuICAgIG9wdGlvbnM6IFNob3BpZnlDYXJ0UmVxdWVzdE9wdGlvbnMgPSB0aGlzLnJlcXVlc3RPcHRpb25EZWZhdWx0c1xuICApOiBQcm9taXNlPFNob3BpZnlDYXJ0T2JqZWN0PiB7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uU3RhcnQpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uU3RhcnQoKTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucXVldWUuYWRkKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNhcnRSZXMgPSBhd2FpdCBIdHRwU2VydmljZS5wb3N0PFNob3BpZnlDYXJ0T2JqZWN0PihcbiAgICAgICAgdGhpcy5DQVJUX1BPU1RfQ0xFQVJfVVJMLFxuICAgICAgICB7fSxcbiAgICAgICAgXCJmb3JtXCJcbiAgICAgICk7XG4gICAgICBsZXQgY2FydDogU2hvcGlmeUNhcnRPYmplY3Q7XG5cbiAgICAgIC8vIEJlY2F1c2UgdHlwZSBpcyBmb3JtIHdlIG5lZWQgdG8gcGFyc2UgdGhlIGpzb24gcmVzcG9uc2UgYnkgc2VsZlxuICAgICAgaWYgKHR5cGVvZiBjYXJ0UmVzLmJvZHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY2FydCA9IEpTT04ucGFyc2UoY2FydFJlcy5ib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnQgPSBjYXJ0UmVzLmJvZHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJPbkNoYW5nZSkge1xuICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZShjYXJ0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhcnQ7XG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uQ29tcGxldGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIF9nZXRTaGlwcGluZ1JhdGVzKFxuICAgIHNoaXBwaW5nQWRkcmVzczogU2hvcGlmeUN1c3RvbWVyQWRkcmVzcyxcbiAgICBub3JtYWxpemUgPSB0cnVlXG4gICk6IFByb21pc2U8U2hvcGlmeVNoaXBwaW5nUmF0ZXMgfCBTaG9waWZ5U2hpcHBpbmdSYXRlc05vcm1hbGl6ZWQ+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBIdHRwU2VydmljZS5nZXQ8eyBzaGlwcGluZ19yYXRlczogU2hvcGlmeVNoaXBwaW5nUmF0ZXMgfT4oXG4gICAgICB0aGlzLkNBUlRfR0VUX1NISVBQSU5HX1JBVEVTX1VSTCxcbiAgICAgIHsgc2hpcHBpbmdfYWRkcmVzczogc2hpcHBpbmdBZGRyZXNzIH0sXG4gICAgICBcImpzb25cIlxuICAgICk7XG5cbiAgICBjb25zdCBzaGlwcGluZ1JhdGVzID0gcmVzLmJvZHk7XG5cbiAgICBpZiAoaXNPYmplY3Qoc2hpcHBpbmdSYXRlcykgJiYgaXNPYmplY3Qoc2hpcHBpbmdSYXRlcy5zaGlwcGluZ19yYXRlcykpIHtcbiAgICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplU2hpcHBpbmdSYXRlcyhzaGlwcGluZ1JhdGVzLnNoaXBwaW5nX3JhdGVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaGlwcGluZ1JhdGVzLnNoaXBwaW5nX3JhdGVzIGFzIFNob3BpZnlTaGlwcGluZ1JhdGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwic2hpcHBpbmdfcmF0ZXMgcHJvcGVydHkgbm90IGZvdW5kOiBcIiArIEpTT04uc3RyaW5naWZ5KHNoaXBwaW5nUmF0ZXMpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZXN0aW1hdGVkIHNoaXBwaW5nIHJhdGVzLlxuICAgKiBAcGFyYW0gc2hpcHBpbmdBZGRyZXNzIFRPRE86IC9jYXJ0L3NoaXBwaW5nX3JhdGVzLmpzb24/c2hpcHBpbmdfYWRkcmVzc1t6aXBdPUsxTiA1VDImc2hpcHBpbmdfYWRkcmVzc1tjb3VudHJ5XT1DYW5hZGEmc2hpcHBpbmdfYWRkcmVzc1twcm92aW5jZV09T250YXJpb1xuICAgKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS9lbi90aGVtZXMvZGV2ZWxvcG1lbnQvZ2V0dGluZy1zdGFydGVkL3VzaW5nLWFqYXgtYXBpI2dldC1zaGlwcGluZy1yYXRlc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRTaGlwcGluZ1JhdGVzKFxuICAgIHNoaXBwaW5nQWRkcmVzczogU2hvcGlmeUN1c3RvbWVyQWRkcmVzcyxcbiAgICBub3JtYWxpemUgPSB0cnVlLFxuICAgIG9wdGlvbnM6IFNob3BpZnlDYXJ0UmVxdWVzdE9wdGlvbnMgPSB0aGlzLnJlcXVlc3RPcHRpb25EZWZhdWx0c1xuICApOiBQcm9taXNlPFNob3BpZnlTaGlwcGluZ1JhdGVzIHwgU2hvcGlmeVNoaXBwaW5nUmF0ZXNOb3JtYWxpemVkPiB7XG4gICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uU3RhcnQpIHtcbiAgICAgIHRoaXMudHJpZ2dlck9uU3RhcnQoKTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucXVldWUuYWRkKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRTaGlwcGluZ1JhdGVzKHNoaXBwaW5nQWRkcmVzcywgbm9ybWFsaXplKTtcbiAgICB9KTtcbiAgICBpZiAob3B0aW9ucy50cmlnZ2VyT25Db21wbGV0ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyT25Db21wbGV0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdGF0aWMgQ0FSVF9QT1NUX0FERF9VUkwgPSBcIi9jYXJ0L2FkZC5qc1wiO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgQ0FSVF9HRVRfVVJMID0gXCIvY2FydC5qc1wiO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgQ0FSVF9QT1NUX1VQREFURV9VUkwgPSBcIi9jYXJ0L3VwZGF0ZS5qc1wiO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgQ0FSVF9QT1NUX0NIQU5HRV9VUkwgPSBcIi9jYXJ0L2NoYW5nZS5qc1wiO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgQ0FSVF9QT1NUX0NMRUFSX1VSTCA9IFwiL2NhcnQvY2xlYXIuanNcIjtcblxuICBwcm90ZWN0ZWQgc3RhdGljIENBUlRfR0VUX1NISVBQSU5HX1JBVEVTX1VSTCA9IFwiL2NhcnQvc2hpcHBpbmdfcmF0ZXMuanNvblwiO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVxdWVzdE9wdGlvbkRlZmF1bHRzID0ge1xuICAgIHRyaWdnZXJPblN0YXJ0OiB0cnVlLFxuICAgIHRyaWdnZXJPbkNvbXBsZXRlOiB0cnVlLFxuICAgIHRyaWdnZXJPbkNoYW5nZTogdHJ1ZSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgc3RhdGljIHdhaXRGb3JDb21wbGV0ZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGBTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlYCwgaWYgcXVldWUgaXMgYWxyZWFkeSBwZW5kaW5nIG5vIG5vdGluZyAoaW4gdGhpcyBjYXNlIHdlIGFscmVhZHkgbG9va2luZyBmb3Igb25JZGxlKVxuICAgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyB0cmlnZ2VyT25Db21wbGV0ZSgpIHtcbiAgICBpZiAoIXRoaXMud2FpdEZvckNvbXBsZXRlKSB7XG4gICAgICB0aGlzLndhaXRGb3JDb21wbGV0ZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5vbklkbGUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICAgICAgXCJTaG9waWZ5Q2FydDpyZXF1ZXN0OmNvbXBsZXRlXCIsXG4gICAgICAgICAgdGhpcy5jYXJ0XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2FpdEZvckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVE9ETyBjaGVjayBpZiBjYXJ0IHZhbHVlcyBhcmUgY2hhbmdlZFxuICAgKiBAcGFyYW0gY2FydCBUaGUgY2FydCBvYmplY3RcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgdHJpZ2dlck9uQ2hhbmdlKGNhcnQ6IFNob3BpZnlDYXJ0T2JqZWN0KSB7XG4gICAgdGhpcy5jYXJ0ID0gY2FydDtcbiAgICBTaG9waWZ5Q2FydFNlcnZpY2Uuc2hvcGlmeUNhcnRFdmVudERpc3BhdGNoZXIudHJpZ2dlcihcbiAgICAgIFwiU2hvcGlmeUNhcnQ6cmVxdWVzdDpjaGFuZ2VkXCIsXG4gICAgICB0aGlzLmNhcnRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYFNob3BpZnlDYXJ0OnJlcXVlc3Q6c3RhcnRgLCBpZiBub3QgYWxyZWFkeSB0cmlnZ2VyZWRcbiAgICovXG4gIHByb3RlY3RlZCBzdGF0aWMgdHJpZ2dlck9uU3RhcnQoKSB7XG4gICAgaWYgKHRoaXMucXVldWUucGVuZGluZyA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgU2hvcGlmeUNhcnRTZXJ2aWNlLnNob3BpZnlDYXJ0RXZlbnREaXNwYXRjaGVyLnRyaWdnZXIoXG4gICAgICBcIlNob3BpZnlDYXJ0OnJlcXVlc3Q6c3RhcnRcIlxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciBgU2hvcGlmeUNhcnQ6YWRkYFxuICAgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyB0cmlnZ2VyQWRkKGlkOiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIsIHByb3BlcnRpZXM6IGFueSkge1xuICAgIFNob3BpZnlDYXJ0U2VydmljZS5zaG9waWZ5Q2FydEV2ZW50RGlzcGF0Y2hlci50cmlnZ2VyKFwiU2hvcGlmeUNhcnQ6YWRkXCIsIHtcbiAgICAgIGlkLFxuICAgICAgcXVhbnRpdHksXG4gICAgICBwcm9wZXJ0aWVzLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBub3JtYWxpemVTaGlwcGluZ1JhdGVzKFxuICAgIHNoaXBwaW5nUmF0ZXM6IFNob3BpZnlTaGlwcGluZ1JhdGVzXG4gICk6IFNob3BpZnlTaGlwcGluZ1JhdGVzTm9ybWFsaXplZCB7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IG5ldyBBcnJheTxhbnk+KHNoaXBwaW5nUmF0ZXMubGVuZ3RoKTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gc2hpcHBpbmdSYXRlcykge1xuICAgICAgaWYgKHNoaXBwaW5nUmF0ZXNbaV0pIHtcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdSYXRlID0gc2hpcHBpbmdSYXRlc1tpXTtcbiAgICAgICAgbm9ybWFsaXplZFtpXSA9IGNsb25lPFNob3BpZnlTaGlwcGluZ1JhdGU+KGZhbHNlLCBzaGlwcGluZ1JhdGUpO1xuICAgICAgICBpZiAobm9ybWFsaXplZFtpXSAmJiBub3JtYWxpemVkW2ldLnByaWNlKSB7XG4gICAgICAgICAgbm9ybWFsaXplZFtpXS5wcmljZSA9IGdldE51bWJlcihub3JtYWxpemVkW2ldLnByaWNlKTtcbiAgICAgICAgICBpZiAobm9ybWFsaXplZFtpXS5wcmljZSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFtpXS5wcmljZSAqPSAxMDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgQ2FuJ3QgcGFyc2UgXCIke25vcm1hbGl6ZWRbaV0ucHJpY2V9XCIgdG8gbnVtYmVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgcHJpY2UgcHJvcGVydHkgbm90IGRlZmluZWRgLCBub3JtYWxpemVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZCBhcyBTaG9waWZ5U2hpcHBpbmdSYXRlc05vcm1hbGl6ZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkByaWJhanMvY29yZVwiO1xuXG5pbXBvcnQgeyBTaG9waWZ5UHJvZHVjdCwgU2hvcGlmeVByb2R1Y3RWYXJpYW50IH0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9kdWN0c0NhY2hlIHtcbiAgW2hhbmRsZTogc3RyaW5nXTogU2hvcGlmeVByb2R1Y3Q7XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9waWZ5UHJvZHVjdFNlcnZpY2Uge1xuICAvKipcbiAgICogR2V0IHByb2R1Y3Qgb2JqZWN0IGJ5IGhhbmRsZVxuICAgKiBAcGFyYW0gaGFuZGxlIHByb2R1Y3QgaGFuZGxlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldChoYW5kbGU6IHN0cmluZyk6IFByb21pc2U8U2hvcGlmeVByb2R1Y3Q+IHtcbiAgICBpZiAodGhpcy5jYWNoZVtoYW5kbGVdKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0aGlzLmNhY2hlW2hhbmRsZV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBIdHRwU2VydmljZS5nZXRKU09OPFNob3BpZnlQcm9kdWN0PihgL3Byb2R1Y3RzLyR7aGFuZGxlfS5qc2ApLnRoZW4oXG4gICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICBjb25zdCBwcm9kdWN0ID0gcmVzLmJvZHk7XG4gICAgICAgICAgdGhpcy5jYWNoZVtoYW5kbGVdID0gcHJvZHVjdDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtoYW5kbGVdO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgb3B0aW9uIHZhbHVlcyBmaXRzIHRvIHRoZSBjdXJyZW50IHZhcmlhbnQuXG4gICAqIEBwYXJhbSB2YXJpYW50XG4gICAqIEBwYXJhbSBvcHRpb25WYWx1ZXNcbiAgICogQHJldHVybiBSZXR1cm5zIHRydWUgaWYgdGhlIG9wdGlvbiB2YWx1ZXMgZml0dGluZyB0byB0aGUgdmFyaWFudFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmaXRzVmFyaWFudE9wdGlvbnMoXG4gICAgdmFyaWFudDogU2hvcGlmeVByb2R1Y3RWYXJpYW50LFxuICAgIG9wdGlvblZhbHVlczogc3RyaW5nW11cbiAgKSB7XG4gICAgbGV0IGZpdCA9IHRydWU7XG4gICAgLy8gcG9zaXRpb24wIGlzIHRoZSBvcHRpb24gaW5kZXggc3RhcnRpbmcgb24gMFxuICAgIGZvciAoY29uc3QgcG9zaXRpb24wIGluIG9wdGlvblZhbHVlcykge1xuICAgICAgaWYgKG9wdGlvblZhbHVlc1twb3NpdGlvbjBdKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWVzW3Bvc2l0aW9uMF07XG4gICAgICAgIGZpdCA9IGZpdCAmJiB2YXJpYW50Lm9wdGlvbnMuaW5kZXhPZihvcHRpb25WYWx1ZS50b1N0cmluZygpKSA+IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZml0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwcm9kdWN0IHZhcmlhbnQgb2YgKHNlbGVjdGVkKSBvcHRpb24gdmFsdWVzXG4gICAqIEBwYXJhbSBvcHRpb25WYWx1ZXMgKHNlbGVjdGVkKSBvcHRpb24gdmFsdWVzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldFZhcmlhbnRPZk9wdGlvbnMoXG4gICAgcHJvZHVjdDogU2hvcGlmeVByb2R1Y3QsXG4gICAgb3B0aW9uVmFsdWVzOiBzdHJpbmdbXVxuICApIHtcbiAgICBsZXQgcmVzdWx0OiBTaG9waWZ5UHJvZHVjdFZhcmlhbnQgfCBudWxsID0gbnVsbDtcbiAgICBpZiAocHJvZHVjdCkge1xuICAgICAgZm9yIChjb25zdCBpIGluIHByb2R1Y3QudmFyaWFudHMpIHtcbiAgICAgICAgaWYgKHByb2R1Y3QudmFyaWFudHNbaV0pIHtcbiAgICAgICAgICByZXN1bHQgPSBudWxsO1xuICAgICAgICAgIGNvbnN0IHZhcmlhbnQgPSBwcm9kdWN0LnZhcmlhbnRzW2ldO1xuICAgICAgICAgIGNvbnN0IGZpdHMgPSB0aGlzLmZpdHNWYXJpYW50T3B0aW9ucyh2YXJpYW50LCBvcHRpb25WYWx1ZXMpO1xuICAgICAgICAgIGlmIChmaXRzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YXJpYW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHZhcmlhbnQgb2JqZWN0IGJ5IHZhcmlhbnQgaWRcbiAgICogQHBhcmFtIGlkIFZhcmlhbnQgaWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VmFyaWFudChwcm9kdWN0OiBTaG9waWZ5UHJvZHVjdCwgaWQ6IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICBwcm9kdWN0LnZhcmlhbnRzLmZpbmQoKHZhcmlhbnQpID0+IHZhcmlhbnQuaWQgPT09IGlkKSB8fCBudWxsO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHByb2R1Y3Qgb3B0aW9uIGJ5IG5hbWVcbiAgICogQHBhcmFtIHByb2R1Y3QgcHJvZHVjdCB3aGljaCBob2xkcyB0aGUgb3B0aW9uc1xuICAgKiBAcGFyYW0gbmFtZSBvcHRpb24gbmFtZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRPcHRpb24ocHJvZHVjdDogU2hvcGlmeVByb2R1Y3QsIG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHByb2R1Y3Qub3B0aW9ucy5maW5kKFxuICAgICAgKG9wdGlvbikgPT4gb3B0aW9uLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwcm9kdWN0IG9wdGlvbiB3aGljaCBpbmNsdWRlcyBhIHN1YnN0cmluZ1xuICAgKiBAcGFyYW0gcHJvZHVjdCBwcm9kdWN0IHdoaWNoIGhvbGRzIHRoZSBvcHRpb25zXG4gICAqIEBwYXJhbSBuYW1lIG9wdGlvbiBuYW1lXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldE9wdGlvbkluY2x1ZGVzKFxuICAgIHByb2R1Y3Q6IFNob3BpZnlQcm9kdWN0LFxuICAgIHNlYXJjaFN1YnN0cjogc3RyaW5nXG4gICkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHByb2R1Y3Qub3B0aW9ucy5maW5kKChvcHRpb24pID0+XG4gICAgICBvcHRpb24ubmFtZS5pbmNsdWRlcyhzZWFyY2hTdWJzdHIpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgcHJvZHVjdCwgcmVtb3ZlIHByb3RvY29sIGZyb20gZmVhdHVyZWRfaW1hZ2UsIGxvd2VyY2FzZSB0aGUgb3B0aW9uIG5hbWVzXG4gICAqIEBwYXJhbSBwcm9kdWN0IHByb2R1Y3Qgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByZXBhcmUocHJvZHVjdDogU2hvcGlmeVByb2R1Y3QpIHtcbiAgICAvLyByZW1vdmUgcHJvdG9jb2xcbiAgICBwcm9kdWN0LmZlYXR1cmVkX2ltYWdlLnJlcGxhY2UoLyheXFx3Kzp8XilcXC9cXC8vLCBcIi8vXCIpO1xuXG4gICAgLy8gYWxsIG9wdGlvbiBuYW1lcyB0byBsb3dlciBjYXNlXG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgcHJvZHVjdC5vcHRpb25zKSB7XG4gICAgICBvcHRpb24ubmFtZSA9IG9wdGlvbi5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2R1Y3Q7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIGNhY2hlOiBQcm9kdWN0c0NhY2hlID0ge307XG59XG4iLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gXCJAcmliYWpzL3V0aWxzL3NyYy90eXBlLmpzXCI7XG5cbi8qKlxuICogQ3VzdG9tIHZlcnNpb24gb2Ygc2hvcGlmeSB0b29scyBsaWtlIGFwaS5qcXVlcnkuanMgLyBvcHRpb24tc2VsZWN0aW9uLmpzXG4gKiBAc2VlIGh0dHBzOi8vbWF5ZXJ0LWRvdWdsYXM0OTM1Lm15c2hvcGlmeS5jb20vcGFnZXMvYXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBTaG9waWZ5U2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9ybWF0TW9uZXlXaXRoRGVsaW1pdGVycyhcbiAgICBudW06IG51bWJlcixcbiAgICBwcmVjaXNpb24gPSAyLFxuICAgIHRob3VzYW5kcyA9IFwiLFwiLFxuICAgIGRlY2ltYWwgPSBcIi5cIlxuICApOiBzdHJpbmcge1xuICAgIGlmICghaXNOdW1iZXIobnVtKSB8fCBudW0gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIjBcIjtcbiAgICB9XG5cbiAgICBjb25zdCBudW1TdHI6IHN0cmluZyA9IChudW0gLyAxMDAuMCkudG9GaXhlZChwcmVjaXNpb24pO1xuXG4gICAgY29uc3QgcGFydHMgPSBudW1TdHIuc3BsaXQoXCIuXCIpO1xuICAgIGNvbnN0IGRvbGxhcnMgPSBwYXJ0c1swXS5yZXBsYWNlKFxuICAgICAgLyhcXGQpKD89KFxcZFxcZFxcZCkrKD8hXFxkKSkvZyxcbiAgICAgIFwiJDFcIiArIHRob3VzYW5kc1xuICAgICk7XG4gICAgY29uc3QgY2VudHMgPSBwYXJ0c1sxXSA/IGRlY2ltYWwgKyBwYXJ0c1sxXSA6IFwiXCI7XG5cbiAgICByZXR1cm4gZG9sbGFycyArIGNlbnRzO1xuICB9XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlOiBTaG9waWZ5U2VydmljZTtcbiAgcHJvdGVjdGVkIG1vbmV5Rm9ybWF0Pzogc3RyaW5nO1xuICBwcm90ZWN0ZWQgbW9uZXlXaXRoQ3VycmVuY3lGb3JtYXQ/OiBzdHJpbmc7XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgbW9uZXlXaXRoQ3VycmVuY3lGb3JtYXQoKSB7XG4gICAgaWYgKFxuICAgICAgKHdpbmRvdyBhcyBhbnkpLm1vZGVsICYmXG4gICAgICAod2luZG93IGFzIGFueSkubW9kZWwuc3lzdGVtICYmXG4gICAgICAod2luZG93IGFzIGFueSkubW9kZWwuc3lzdGVtLnNob3BTZXR0aW5nc1xuICAgICkge1xuICAgICAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5tb2RlbC5zeXN0ZW0uc2hvcFNldHRpbmdzLm1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG1vbmV5Rm9ybWF0KCkge1xuICAgIGlmIChcbiAgICAgICh3aW5kb3cgYXMgYW55KS5tb2RlbCAmJlxuICAgICAgKHdpbmRvdyBhcyBhbnkpLm1vZGVsLnN5c3RlbSAmJlxuICAgICAgKHdpbmRvdyBhcyBhbnkpLm1vZGVsLnN5c3RlbS5zaG9wU2V0dGluZ3NcbiAgICApIHtcbiAgICAgIHJldHVybiAod2luZG93IGFzIGFueSkubW9kZWwuc3lzdGVtLnNob3BTZXR0aW5ncy5tb25leUZvcm1hdDtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcigvKnNob3BTZXR0aW5ncz86IGFueSovKSB7XG4gICAgaWYgKFNob3BpZnlTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gU2hvcGlmeVNlcnZpY2UuaW5zdGFuY2U7XG4gICAgfVxuICAgIFNob3BpZnlTZXJ2aWNlLmluc3RhbmNlID0gdGhpcztcbiAgfVxufVxuIiwiaW1wb3J0IHsgUmliYU1vZHVsZSB9IGZyb20gXCJAcmliYWpzL2NvcmVcIjtcbmltcG9ydCAqIGFzIGJpbmRlcnMgZnJvbSBcIi4vYmluZGVycy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgZm9ybWF0dGVycyBmcm9tIFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBNb2R1bGVTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IFNob3BpZnlNb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IHNob3BpZnlNb2R1bGU6IFJpYmFNb2R1bGU8U2hvcGlmeU1vZHVsZU9wdGlvbnM+ID0ge1xuICBiaW5kZXJzLFxuICBmb3JtYXR0ZXJzLFxuICBzZXJ2aWNlczoge30sXG4gIGNvbXBvbmVudHM6IHt9LFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gICAgTW9kdWxlU2VydmljZS5zZXRTaW5nbGV0b24ob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuIiwiLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gY29sb3JcbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0ODQ1MTQvMTQ2NTkxOVxuICovXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tQ29sb3IgPSAoKSA9PiB7XG4gIGNvbnN0IGxldHRlcnMgPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgbGV0IGNvbG9yID0gXCIjXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgY29sb3IgKz0gbGV0dGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNildO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlQ29sb3VyZWQgPSAoXG4gIG9wdGlvbnM6IHtcbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgY29sb3I/OiBzdHJpbmc7XG4gICAgbW9kZTogXCJkZWJ1Z1wiIHwgXCJpbmZvXCIgfCBcImxvZ1wiIHwgXCJlcnJvclwiO1xuICB9LFxuICAuLi5hcmdzOiB1bmtub3duW11cbikgPT4ge1xuICBjb25zdCBwcmludEFyZ3M6IHVua25vd25bXSA9IFtdO1xuICBpZiAob3B0aW9ucy5jb2xvcikge1xuICAgIGlmIChvcHRpb25zLm5hbWVzcGFjZSkge1xuICAgICAgcHJpbnRBcmdzLnB1c2goXG4gICAgICAgIGAlY1ske29wdGlvbnMubmFtZXNwYWNlfV0gJHtvcHRpb25zLm1vZGUudG9VcHBlckNhc2UoKX06IGBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW50QXJncy5wdXNoKGAlYyR7b3B0aW9ucy5tb2RlLnRvVXBwZXJDYXNlKCl9OiBgKTtcbiAgICB9XG4gICAgcHJpbnRBcmdzLnB1c2goYGNvbG9yOiAke29wdGlvbnMuY29sb3J9YCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZXNwYWNlKSB7XG4gICAgICBwcmludEFyZ3MucHVzaChgWyR7b3B0aW9ucy5uYW1lc3BhY2V9XSAke29wdGlvbnMubW9kZS50b1VwcGVyQ2FzZSgpfTogYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW50QXJncy5wdXNoKGAke29wdGlvbnMubW9kZS50b1VwcGVyQ2FzZSgpfTogYCk7XG4gICAgfVxuICB9XG5cbiAgcHJpbnRBcmdzLnB1c2goLi4uYXJncyk7XG5cbiAgY29uc29sZVtvcHRpb25zLm1vZGVdKC4uLnByaW50QXJncyk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IEJBU0U2NF9QUkVGSVggPSBcImJhc2U2NDpcIjtcblxuZXhwb3J0IGNvbnN0IFBSSU1JVElWRSA9IDA7XG5leHBvcnQgY29uc3QgS0VZUEFUSCA9IDE7XG5cbmV4cG9ydCBjb25zdCBRVU9URURfU1RSID0gL14nLionJHxeXCIuKlwiJC87IC8vIHJlZ2V4IHRvIHRlc3QgaWYgc3RyaW5nIGlzIHdyYXBwZWQgaW4gXCIgb3IgJ1xuIiwiaW1wb3J0IHsgRGVmZXJyZWQsIFRpbWVvdXRQcm9taXNlIH0gZnJvbSBcIi4vdHlwZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IG5vb3AgPSAoKSA9PiB7XG4gIC8qKiBkbyBub3RoaW5nICovXG59O1xuXG5leHBvcnQgY29uc3QgdGltZXMgPSAobjogbnVtYmVyLCBjYjogKCkgPT4gdm9pZCkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGNiKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzbGVlcCA9ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpKTtcbn07XG5cbmV4cG9ydCBjb25zdCB3YWl0Rm9yUHJvcCA9IGFzeW5jIDxUID0gYW55PihcbiAgcHJvcE5hbWU6IHN0cmluZyxcbiAgb2JqOiBhbnkgPSB3aW5kb3csXG4gIGRlbGF5ID0gMTAwMFxuKSA9PiB7XG4gIHdoaWxlICghb2JqW3Byb3BOYW1lXSkge1xuICAgIGF3YWl0IHNsZWVwKGRlbGF5KTtcbiAgfVxuICByZXR1cm4gb2JqW3Byb3BOYW1lXSBhcyBUO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYSBuZXcgXCJEZWZlcnJlZFwiIG9iamVjdFxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Nb3ppbGxhL0phdmFTY3JpcHRfY29kZV9tb2R1bGVzL1Byb21pc2UuanNtL0RlZmVycmVkXG4gKlxuICogQHJldHVyblxuICovXG5leHBvcnQgY29uc3QgZGVmZXJyZWQgPSA8VCA9IGFueT4oKSA9PiB7XG4gIGNvbnN0IG9iajogUGFydGlhbDxEZWZlcnJlZDxUPj4gPSB7fTtcbiAgY29uc3QgcHJvbSA9IG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBvYmoucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgb2JqLnJlamVjdCA9IHJlamVjdDtcbiAgfSk7XG4gIG9iai5wcm9taXNlID0gcHJvbTtcbiAgcmV0dXJuIG9iaiBhcyBEZWZlcnJlZDxUPjtcbn07XG5cbi8qKlxuICogZGVib3VuY2UgKFRpbWVvdXQgKyBDYWxsYmFjayBlZGl0aW9uKVxuICogVGhlIGRlYm91bmNlIGZ1bmN0aW9uIHJlY2VpdmVzIG91ciBmdW5jdGlvbiBhcyBhIHBhcmFtZXRlclxuICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgbWV0aG9kIGZvciBzY3JvbGwgZXZlbnRzLCBidXQgdGhlIGV2ZW50IHNob3VsZCBzdGlsbCBiZSBwYXNzaXZlLlxuICogSW4gdGhlIGRlYm91bmNpbmcgdGVjaG5pcXVlLCBubyBtYXR0ZXIgaG93IG1hbnkgdGltZXMgdGhlIHVzZXIgZmlyZXMgdGhlIGV2ZW50LFxuICogdGhlIGF0dGFjaGVkIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgb25seSBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWUgb25jZSB0aGUgdXNlciBzdG9wcyBmaXJpbmcgdGhlIGV2ZW50LlxuICogVGhpcyBtZXRob2QgdXNlcyBpbnRlcm5hbGx5IHRoZSBzZXRUaW1lb3V0IG1ldGhvZFxuICogQHNlZSBodHRwczovL2Nzcy10cmlja3MuY29tL3N0eWxpbmctYmFzZWQtb24tc2Nyb2xsLXBvc2l0aW9uL1xuICogQHNlZSBodHRwczovL3d3dy50ZWxlcmlrLmNvbS9ibG9ncy9kZWJvdW5jaW5nLWFuZC10aHJvdHRsaW5nLWluLWphdmFzY3JpcHRcbiAqL1xuZXhwb3J0IGNvbnN0IGRlYm91bmNlQ2IgPSA8VCA9IGFueT4oZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gVCwgd2FpdCA9IDEwMCkgPT4ge1xuICBsZXQgdGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XG4gIHJldHVybiAoLi4ucGFyYW1zOiBhbnlbXSkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBmbiguLi5wYXJhbXMpLCB3YWl0KTtcbiAgfTtcbn07XG5cbi8qKlxuICogZGVib3VuY2UgKFRpbWVvdXQgKyBQcm9taXNlIGVkaXRpb24pXG4gKiBUaGUgZGVib3VuY2UgZnVuY3Rpb24gcmVjZWl2ZXMgb3VyIGZ1bmN0aW9uIGFzIGEgcGFyYW1ldGVyXG4gKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBtZXRob2QgZm9yIHNjcm9sbCBldmVudHMsIGJ1dCB0aGUgZXZlbnQgc2hvdWxkIHN0aWxsIGJlIHBhc3NpdmUuXG4gKiBJbiB0aGUgZGVib3VuY2luZyB0ZWNobmlxdWUsIG5vIG1hdHRlciBob3cgbWFueSB0aW1lcyB0aGUgdXNlciBmaXJlcyB0aGUgZXZlbnQsXG4gKiB0aGUgYXR0YWNoZWQgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCBvbmx5IGFmdGVyIHRoZSBzcGVjaWZpZWQgdGltZSBvbmNlIHRoZSB1c2VyIHN0b3BzIGZpcmluZyB0aGUgZXZlbnQuXG4gKiBUaGlzIG1ldGhvZCB1c2VzIGludGVybmFsbHkgdGhlIHNldFRpbWVvdXQgbWV0aG9kXG4gKi9cbmV4cG9ydCBjb25zdCBkZWJvdW5jZVQgPSA8VCA9IGFueT4oZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55LCB3YWl0ID0gMTAwKSA9PiB7XG4gIGxldCByZXNvbHZlOiAodmFsOiBhbnkpID0+IGFueTtcbiAgbGV0IHJlamVjdDogKGVycm9yOiBhbnkpID0+IHZvaWQ7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzLCByZWopID0+IHtcbiAgICByZXNvbHZlID0gcmVzO1xuICAgIHJlamVjdCA9IHJlajtcbiAgfSk7XG4gIGxldCBkZWJvdW5jZTogdW5kZWZpbmVkIHwgKCguLi5wYXJhbXM6IGFueVtdKSA9PiB2b2lkKSA9IHVuZGVmaW5lZDtcblxuICByZXR1cm4gKC4uLnBhcmFtczogYW55W10pID0+IHtcbiAgICBpZiAoIWRlYm91bmNlKVxuICAgICAgZGVib3VuY2UgPSBkZWJvdW5jZUNiKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNvbHZlKGZuKC4uLnBhcmFtcykpO1xuICAgICAgICAgIC8vIFJlc2V0XG4gICAgICAgICAgZGVib3VuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgd2FpdCk7XG4gICAgZGVib3VuY2UoLi4ucGFyYW1zKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xufTtcblxuLyoqXG4gKiBkZWJvdW5jZSAoUmVxdWVzdEFuaW1hdGlvbkZyYW1lICsgUHJvbWlzZSBlZGl0aW9uKVxuICogVGhlIGRlYm91bmNlIGZ1bmN0aW9uIHJlY2VpdmVzIG91ciBmdW5jdGlvbiBhcyBhIHBhcmFtZXRlclxuICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgbWV0aG9kIGZvciBzY3JvbGwgZXZlbnRzLCBidXQgdGhlIGV2ZW50IHNob3VsZCBzdGlsbCBiZSBwYXNzaXZlLlxuICogSW4gdGhlIGRlYm91bmNpbmcgdGVjaG5pcXVlLCBubyBtYXR0ZXIgaG93IG1hbnkgdGltZXMgdGhlIHVzZXIgZmlyZXMgdGhlIGV2ZW50LFxuICogdGhlIGF0dGFjaGVkIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgb25seSBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWUgb25jZSB0aGUgdXNlciBzdG9wcyBmaXJpbmcgdGhlIGV2ZW50LlxuICogVGhpcyBtZXRob2QgdXNlcyBpbnRlcm5hbGx5IHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbWV0aG9kXG4gKiBAc2VlIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc3R5bGluZy1iYXNlZC1vbi1zY3JvbGwtcG9zaXRpb24vXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRlbGVyaWsuY29tL2Jsb2dzL2RlYm91bmNpbmctYW5kLXRocm90dGxpbmctaW4tamF2YXNjcmlwdFxuICovXG5leHBvcnQgY29uc3QgZGVib3VuY2VGID0gKGZuOiAoLi4ucGFyYW1zOiBhbnkpID0+IGFueSkgPT4ge1xuICAvLyBUaGlzIGhvbGRzIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcmVmZXJlbmNlLCBzbyB3ZSBjYW4gY2FuY2VsIGl0IGlmIHdlIHdpc2hcbiAgbGV0IGZyYW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgbGV0IHJlc29sdmU6ICh2YWw6IGFueSkgPT4gYW55O1xuICBsZXQgcmVqZWN0OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIHJlc29sdmUgPSByZXM7XG4gICAgcmVqZWN0ID0gcmVqO1xuICB9KTtcblxuICAvLyBUaGUgZGVib3VuY2UgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0IGNhbiByZWNlaXZlIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50c1xuICByZXR1cm4gKC4uLnBhcmFtczogYW55KSA9PiB7XG4gICAgLy8gSWYgdGhlIGZyYW1lIHZhcmlhYmxlIGhhcyBiZWVuIGRlZmluZWQsIGNsZWFyIGl0IG5vdywgYW5kIHF1ZXVlIGZvciBuZXh0IGZyYW1lXG4gICAgaWYgKGZyYW1lKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZSk7XG4gICAgfVxuXG4gICAgLy8gUXVldWUgb3VyIGZ1bmN0aW9uIGNhbGwgZm9yIHRoZSBuZXh0IGZyYW1lXG4gICAgZnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIC8vIENhbGwgb3VyIGZ1bmN0aW9uIGFuZCBwYXNzIGFueSBwYXJhbXMgd2UgcmVjZWl2ZWRcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmUoZm4oLi4ucGFyYW1zKSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IgYXMgRXJyb3IpO1xuICAgICAgfVxuICAgICAgLy8gcmVzZXQgZnJhbWUgYW5kIGluaXRpYWxpemUgbmV3IHByb21pc2UgZm9yIG5leHQgY2FsbFxuICAgICAgZnJhbWUgPSBudWxsO1xuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICByZXNvbHZlID0gcmVzO1xuICAgICAgICByZWplY3QgPSByZWo7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xufTtcblxuLyoqXG4gKiBkZWJvdW5jZSAoUmVxdWVzdEFuaW1hdGlvbkZyYW1lICsgUHJvbWlzZSBlZGl0aW9uKVxuICogVGhlIGRlYm91bmNlIGZ1bmN0aW9uIHJlY2VpdmVzIG91ciBmdW5jdGlvbiBhcyBhIHBhcmFtZXRlclxuICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgbWV0aG9kIGZvciBzY3JvbGwgZXZlbnRzLCBidXQgdGhlIGV2ZW50IHNob3VsZCBzdGlsbCBiZSBwYXNzaXZlLlxuICogSW4gdGhlIGRlYm91bmNpbmcgdGVjaG5pcXVlLCBubyBtYXR0ZXIgaG93IG1hbnkgdGltZXMgdGhlIHVzZXIgZmlyZXMgdGhlIGV2ZW50LFxuICogdGhlIGF0dGFjaGVkIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgb25seSBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWUgb25jZSB0aGUgdXNlciBzdG9wcyBmaXJpbmcgdGhlIGV2ZW50LlxuICogVGhpcyBtZXRob2QgdXNlcyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbWV0aG9kIGlmIG5vIGRlbGF5IGlzIHBhc3NlZCwgb3RoZXJ3aXNlIGEgdGltZW91dFxuICovXG5leHBvcnQgY29uc3QgZGVib3VuY2UgPSAoZm46ICguLi5wYXJhbXM6IGFueSkgPT4gYW55LCB3YWl0PzogbnVtYmVyKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2FpdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBkZWJvdW5jZVQoZm4sIHdhaXQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWJvdW5jZUYoZm4pO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSB0aHJvdHRsZSBmdW5jdGlvbiByZWNlaXZlcyBvdXIgZnVuY3Rpb24gYXMgYSBwYXJhbWV0ZXJcbiAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIG1ldGhvZCBmb3IgcmVzaXplIGV2ZW50c1xuICogVGhyb3R0bGluZyBpcyBhIHRlY2huaXF1ZSBpbiB3aGljaCwgbm8gbWF0dGVyIGhvdyBtYW55IHRpbWVzIHRoZSB1c2VyIGZpcmVzIHRoZSBldmVudCxcbiAqIHRoZSBhdHRhY2hlZCBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIG9ubHkgb25jZSBpbiBhIGdpdmVuIHRpbWUgaW50ZXJ2YWwuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRlbGVyaWsuY29tL2Jsb2dzL2RlYm91bmNpbmctYW5kLXRocm90dGxpbmctaW4tamF2YXNjcmlwdFxuICogQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wZWR1YXJ0ZS85NjkyMTdlYWM0NTY1Mzg3ODllOGZhYzhmNDUxNDNiNFxuICovXG5leHBvcnQgY29uc3QgdGhyb3R0bGUgPSAoZm46ICguLi5wYXJhbXM6IGFueVtdKSA9PiBhbnksIHdhaXQgPSAxMDApID0+IHtcbiAgbGV0IHRpbWVySWQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBsZXQgcmVzb2x2ZTogKHZhbDogYW55KSA9PiBhbnk7XG4gIGxldCByZWplY3Q6IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgcmVzb2x2ZSA9IHJlcztcbiAgICByZWplY3QgPSByZWo7XG4gIH0pO1xuXG4gIHJldHVybiAoLi4ucGFyYW1zOiBhbnlbXSkgPT4ge1xuICAgIGlmICh0aW1lcklkID09PSBudWxsKSB7XG4gICAgICB0aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyByZXNldCB0aW1lcklkIGFuZCBpbml0aWFsaXplIG5ldyBwcm9taXNlIGZvciBuZXh0IGNhbGxcbiAgICAgICAgdGltZXJJZCA9IG51bGw7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgICByZXNvbHZlID0gcmVzO1xuICAgICAgICAgIHJlamVjdCA9IHJlajtcbiAgICAgICAgfSk7XG4gICAgICB9LCB3YWl0KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmUoZm4oLi4ucGFyYW1zKSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IgYXMgRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FuY2VsIHByb21pc2Ugb24gdGltZW91dC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBUaW1lb3V0ID0gPFQ+KHZhbHVlOiBQcm9taXNlPFQ+LCBtczogbnVtYmVyLCBlcnJvcj86IEVycm9yKSA9PiB7XG4gIGNvbnN0IGRlZiA9IGRlZmVycmVkPFQ+KCk7XG5cbiAgY29uc3QgcDogVGltZW91dFByb21pc2U8VD4gPSB7XG4gICAgX3RpbWVvdXQ6IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZGVmLnJlamVjdChlcnJvciB8fCBuZXcgRXJyb3IoYFRpbWVvdXQgYWZ0ZXIgJHttc31tc2ApKTtcbiAgICB9LCBtcyksXG4gICAgcHJvbWlzZTogZGVmLnByb21pc2UsXG4gICAgY2FuY2VsOiAoKSA9PiB7XG4gICAgICBkZWYucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICBpZiAocC5fdGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQocC5fdGltZW91dCk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YWx1ZVxuICAgIC50aGVuKCh2YWx1ZTogVCkgPT4ge1xuICAgICAgcC5jYW5jZWwoKTtcbiAgICAgIGRlZi5yZXNvbHZlKHZhbHVlKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHAuY2FuY2VsKCk7XG4gICAgICBkZWYucmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICByZXR1cm4gcC5wcm9taXNlO1xufTtcbiIsImltcG9ydCB7IGNsb25lLCBqdXN0RGlnaXRzLCBqc29uU3RyaW5naWZ5LCBwYXJzZVR5cGUgfSBmcm9tIFwiLi90eXBlLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBNQVhfVUlEID0gMTAwMDtcblxuLyoqXG4gKiBTZXRzIGFuIGF0dHJpYnV0ZS4gVGhlIHBlY3VsaWFyaXR5IG9mIHRoaXMgY3VzdG9tIG1ldGhvZCBpcyB0aGF0IHdoZW4gYW4gb2JqZWN0IGlzIHBhc3NlZCwgaXQgaXMgY29udmVydGVkIHRvIGEganNvbiBzdHJpbmcuXG4gKiBUaGlzIGlzIHVzZWZ1bCBpZiwgZm9yIGV4YW1wbGUsIGFuIG9iamVjdCBpcyB0byBiZSBwYXNzZWQgdG8gYSBjdXN0b20gZWxlbWVudCB2aWEgYW4gYXR0cmlidXRlLlxuICogQG5vdGUgVGhpcyBtZXRob2QgaXMgdXNlZCBieSB0aGUgQXR0cmlidXRlQmluZGVyLlxuICogQHBhcmFtIGVsXG4gKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICogQHBhcmFtIG5ld1ZhbHVlXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlID0gKFxuICBlbDogSFRNTEVsZW1lbnQsXG4gIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgbmV3VmFsdWU6IGFueVxuKSA9PiB7XG4gIGlmICghYXR0cmlidXRlTmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNldCBhdHRyaWJ1dGUgb2YgXCIgKyBhdHRyaWJ1dGVOYW1lKTtcbiAgfVxuXG4gIGNvbnN0IG9sZFZhbHVlID0gZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICBsZXQgbmV3VmFsdWVGb3JtYXR0ZWQ6IGFueTtcbiAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgc3dpdGNoICh0eXBlb2YgbmV3VmFsdWUpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICBuZXdWYWx1ZUZvcm1hdHRlZCA9IFN0cmluZyhuZXdWYWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBuZXdWYWx1ZUZvcm1hdHRlZCA9IHVuZGVmaW5lZDtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBpZiAobmV3VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgbmV3VmFsdWVGb3JtYXR0ZWQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWVGb3JtYXR0ZWQgPSBqc29uU3RyaW5naWZ5KG5ld1ZhbHVlLCAwKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBuZXdWYWx1ZUZvcm1hdHRlZCA9IFN0cmluZyhuZXdWYWx1ZSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChuZXdWYWx1ZUZvcm1hdHRlZCA9PT0gbnVsbCB8fCBuZXdWYWx1ZUZvcm1hdHRlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIGNoYW5nZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWVGb3JtYXR0ZWQpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBuZXdWYWx1ZUZvcm1hdHRlZCk7XG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBhdHRyaWJ1dGVOYW1lLFxuICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZUZvcm1hdHRlZCxcbiAgICBvbGRWYWx1ZSxcbiAgICBjaGFuZ2VkLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERhdGFzZXQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcbiAgY29uc3QgZGF0YXNldCA9IGNsb25lKGZhbHNlLCBlbGVtZW50LmRhdGFzZXQpO1xuICBmb3IgKGNvbnN0IGF0dHIgaW4gZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2F0dHJdKSB7XG4gICAgICBkYXRhc2V0W2F0dHJdID0gcGFyc2VUeXBlKGRhdGFzZXRbYXR0cl0sIHRydWUpLnZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YXNldDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWwuaGFzQ2hpbGROb2RlcyBidXQgaWdub3JlcyBlbXB0eSBzdHJpbmdzLCB0aGUgZGVmYXVsdCBoYXNDaGlsZE5vZGVzIHdvdWxkIHJldHVybiB0cnVlIG9uIGA8ZGl2PiA8L2Rpdj5gLlxuICogVmVyeSB1c2VmdWwgdG8gY2hlY2sgd2l0aGluIGEgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgaGFzIHNldCBjaGlsZCBlbGVtZW50cyB0byBsb2FkIG9yIG92ZXJ3cml0ZSB0aGUgY29tcG9uZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0gZWxcbiAqL1xuZXhwb3J0IGNvbnN0IGhhc0NoaWxkTm9kZXNUcmltID0gKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQpID0+IHtcbiAgaWYgKCFlbC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgY2hpbGROb2RlcyA9IGVsLmNoaWxkTm9kZXM7XG4gIGlmIChjaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBjaGlsZE5vZGVzWzBdLm5vZGVUeXBlID09PSAzKSB7XG4gICAgaWYgKCFjaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZSB8fCBjaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZT8udHJpbSgpID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgZ2V0SW5wdXRWYWx1ZSA9IChcbiAgZWw6XG4gICAgfCBIVE1MVW5rbm93bkVsZW1lbnRcbiAgICB8IEhUTUxFbGVtZW50XG4gICAgfCBIVE1MU2VsZWN0RWxlbWVudFxuICAgIHwgSFRNTElucHV0RWxlbWVudFxuICAgIHwgSFRNTE9wdGlvbnNDb2xsZWN0aW9uXG4pID0+IHtcbiAgY29uc3QgcmVzdWx0czogc3RyaW5nW10gPSBbXTtcbiAgaWYgKChlbCBhcyBIVE1MU2VsZWN0RWxlbWVudCkudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgcmV0dXJuIChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkO1xuICB9IGVsc2UgaWYgKChlbCBhcyBIVE1MU2VsZWN0RWxlbWVudCkudHlwZSA9PT0gXCJzZWxlY3QtbXVsdGlwbGVcIikge1xuICAgIGNvbnN0IG9wdGlvbnM6IEhUTUxPcHRpb25zQ29sbGVjdGlvbiA9IChlbCBhcyBIVE1MU2VsZWN0RWxlbWVudCkub3B0aW9ucztcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zW2tleV0pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uc1trZXldO1xuICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSBlbHNlIGlmIChcbiAgICAoZWwgYXMgSFRNTEVsZW1lbnQpLmhhc0F0dHJpYnV0ZSAmJlxuICAgIChlbCBhcyBIVE1MRWxlbWVudCkuaGFzQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpXG4gICkge1xuICAgIHJldHVybiAoZWwgYXMgSFRNTEVsZW1lbnQpLmlubmVySFRNTDsgLy8gVE9ETyB3cml0ZSB0ZXN0IGZvciBjb250ZW50ZWRpdGFibGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZWxlbWVudElzSGlkZGVuID0gKGVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICByZXR1cm4gKFxuICAgIGVsLmhhc0F0dHJpYnV0ZShcImhpZGRlblwiKSB8fFxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG4gICAgZWwuc3R5bGUudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIiB8fFxuICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS52aXNpYmlsaXR5ID09PSBcImhpZGRlblwiXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZWxlbWVudElzVmlzaWJsZSA9IChlbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgcmV0dXJuICFlbGVtZW50SXNIaWRkZW4oZWwpO1xufTtcblxuLyoqXG4gKiBPYnNlcnZlIHNjcm9sbCBldmVudFxuICogQHBhcmFtIHNjcm9sbEVsZW1lbnQgVGhlIGVsZW1lbnQgb3Igd2luZG93IHlvdSB3YW50IHRvIG9ic2VydmVcbiAqIEByZXR1cm5zIFJldHVybnMgYSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gYW4gZWxlbWVudCBzdG9wcyBzY3JvbGxpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHNjcm9sbGluZyA9IGFzeW5jIChcbiAgc2Nyb2xsRWxlbWVudDogSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpXG4pID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgbGV0IHNjcm9sbFRpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IGNoZWNrU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgaWYgKHNjcm9sbFRpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9O1xuICAgIHNjcm9sbEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBjaGVja1Njcm9sbCk7XG4gICAgc2Nyb2xsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGNoZWNrU2Nyb2xsKTtcbiAgICBjaGVja1Njcm9sbCgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogU2Nyb2xscyB0byBhbiBlbGVtZW50XG4gKlxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzE5ODczMzBcbiAqIEBzZWUgaHR0cHM6Ly9wYXdlbGdyenliZWsuY29tL3BhZ2Utc2Nyb2xsLWluLXZhbmlsbGEtamF2YXNjcmlwdC9cbiAqIEBwYXJhbSBlbGVtZW50XG4gKiBAcGFyYW0gdG9cbiAqIEBwYXJhbSBkdXJhdGlvblxuICovXG5leHBvcnQgY29uc3Qgc2Nyb2xsVG8gPSBhc3luYyAoXG4gIHRvOiBIVE1MRWxlbWVudCxcbiAgb2Zmc2V0ID0gMCxcbiAgc2Nyb2xsRWxlbWVudDogSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpIHwgbnVsbCA9IHdpbmRvdyxcbiAgYW5nbGU6IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiID0gXCJ2ZXJ0aWNhbFwiLFxuICBiZWhhdmlvcjogXCJhdXRvXCIgfCBcInNtb290aFwiIHwgdW5kZWZpbmVkID0gXCJzbW9vdGhcIlxuKSA9PiB7XG4gIGlmICghc2Nyb2xsRWxlbWVudCkge1xuICAgIHNjcm9sbEVsZW1lbnQgPSB3aW5kb3c7XG4gIH1cblxuICBjb25zdCBzY3JvbGxQcm9taXNlID0gc2Nyb2xsaW5nKHNjcm9sbEVsZW1lbnQpO1xuXG4gIGxldCB0b3AgPSAwO1xuICBsZXQgbGVmdCA9IDA7XG5cbiAgLy8gSWYgZWxlbWVudCBpcyB3aW5kb3dcbiAgaWYgKChzY3JvbGxFbGVtZW50IGFzIFdpbmRvdykuZG9jdW1lbnQpIHtcbiAgICBpZiAoYW5nbGUgPT09IFwidmVydGljYWxcIikge1xuICAgICAgY29uc3Qgc2Nyb2xsWSA9XG4gICAgICAgIChzY3JvbGxFbGVtZW50IGFzIFdpbmRvdykuc2Nyb2xsWSB8fFxuICAgICAgICAoc2Nyb2xsRWxlbWVudCBhcyBXaW5kb3cpLnBhZ2VZT2Zmc2V0O1xuICAgICAgdG9wID0gTWF0aC5yb3VuZCh0by5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBzY3JvbGxZIC0gb2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2Nyb2xsWCA9XG4gICAgICAgIChzY3JvbGxFbGVtZW50IGFzIFdpbmRvdykuc2Nyb2xsWCB8fFxuICAgICAgICAoc2Nyb2xsRWxlbWVudCBhcyBXaW5kb3cpLnBhZ2VYT2Zmc2V0O1xuICAgICAgbGVmdCA9IE1hdGgucm91bmQodG8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIHNjcm9sbFggLSBvZmZzZXQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYW5nbGUgPT09IFwidmVydGljYWxcIikge1xuICAgICAgY29uc3QgbWFyZ2luVG9wID0ganVzdERpZ2l0cyhcbiAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2Nyb2xsRWxlbWVudCBhcyBIVE1MRWxlbWVudCkubWFyZ2luVG9wXG4gICAgICApO1xuICAgICAgdG9wID0gTWF0aC5yb3VuZCh0by5vZmZzZXRUb3AgLSBvZmZzZXQgLSBtYXJnaW5Ub3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYXJnaW5MZWZ0ID0ganVzdERpZ2l0cyhcbiAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2Nyb2xsRWxlbWVudCBhcyBIVE1MRWxlbWVudCkubWFyZ2luTGVmdFxuICAgICAgKTtcbiAgICAgIGxlZnQgPSBNYXRoLnJvdW5kKHRvLm9mZnNldExlZnQgLSBvZmZzZXQgLSBtYXJnaW5MZWZ0KTtcbiAgICB9XG4gIH1cblxuICBzY3JvbGxFbGVtZW50LnNjcm9sbCh7XG4gICAgYmVoYXZpb3IsXG4gICAgbGVmdCxcbiAgICB0b3AsXG4gIH0pO1xuXG4gIHJldHVybiBzY3JvbGxQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNjcm9sbEhlaWdodCA9IChcbiAgc2Nyb2xsRWxlbWVudDogSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpXG4pOiBudW1iZXIgPT4ge1xuICAvLyBpZiBlbGVtZW50IGlzIHdpbmRvd1xuICBpZiAoKHNjcm9sbEVsZW1lbnQgYXMgV2luZG93KS5kb2N1bWVudCkge1xuICAgIGNvbnN0IHdpbiA9IHNjcm9sbEVsZW1lbnQgYXMgV2luZG93O1xuICAgIGNvbnN0IGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgICByZXR1cm4gKFxuICAgICAgKHdpbiBhcyBhbnkpLnNjcm9sbE1heFkgfHxcbiAgICAgIE1hdGgubWF4KFxuICAgICAgICBkb2MuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGRvYy5ib2R5Lm9mZnNldEhlaWdodCxcbiAgICAgICAgZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgMFxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChzY3JvbGxFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5zY3JvbGxIZWlnaHQ7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2Nyb2xsV2lkdGggPSAoXG4gIHNjcm9sbEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgKFdpbmRvdyAmIHR5cGVvZiBnbG9iYWxUaGlzKVxuKTogbnVtYmVyID0+IHtcbiAgLy8gaWYgZWxlbWVudCBpcyB3aW5kb3dcbiAgaWYgKChzY3JvbGxFbGVtZW50IGFzIFdpbmRvdykuZG9jdW1lbnQpIHtcbiAgICBjb25zdCB3aW4gPSBzY3JvbGxFbGVtZW50IGFzIFdpbmRvdztcbiAgICBjb25zdCBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgcmV0dXJuIChcbiAgICAgICh3aW4gYXMgYW55KS5zY3JvbGxNYXhYIHx8XG4gICAgICBNYXRoLm1heChcbiAgICAgICAgZG9jLmJvZHkuc2Nyb2xsV2lkdGgsXG4gICAgICAgIGRvYy5ib2R5Lm9mZnNldFdpZHRoLFxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoLFxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gKHNjcm9sbEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLnNjcm9sbFdpZHRoO1xufTtcblxuZXhwb3J0IGNvbnN0IHNjcm9sbFRvUG9zaXRpb24gPSBhc3luYyAoXG4gIHNjcm9sbEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgKFdpbmRvdyAmIHR5cGVvZiBnbG9iYWxUaGlzKSB8IG51bGwsXG4gIHBvc2l0aW9uOiBudW1iZXIgfCBcImVuZFwiIHwgXCJzdGFydFwiIHwgXCJjZW50ZXJcIixcbiAgYW5nbGU6IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiIHwgXCJib3RoXCIgPSBcInZlcnRpY2FsXCIsXG4gIGJlaGF2aW9yOiBcImF1dG9cIiB8IFwic21vb3RoXCIgfCB1bmRlZmluZWQgPSBcInNtb290aFwiXG4pID0+IHtcbiAgbGV0IHRvcDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBsZXQgbGVmdDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIGlmICghc2Nyb2xsRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNjcm9sbFByb21pc2UgPSBzY3JvbGxpbmcoc2Nyb2xsRWxlbWVudCk7XG5cbiAgaWYgKGFuZ2xlID09PSBcInZlcnRpY2FsXCIgfHwgYW5nbGUgPT09IFwiYm90aFwiKSB7XG4gICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgY2FzZSBcInN0YXJ0XCI6XG4gICAgICAgIHRvcCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICB0b3AgPSBnZXRTY3JvbGxIZWlnaHQoc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNlbnRlclwiOlxuICAgICAgICB0b3AgPSBnZXRTY3JvbGxIZWlnaHQoc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICB0b3AgLz0gMjtcbiAgICAgICAgICAvLyBpZiBlbGVtZW50IGlzIHdpbmRvd1xuICAgICAgICAgIGlmICgoc2Nyb2xsRWxlbWVudCBhcyBXaW5kb3cpLmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0b3AgLT0gKHNjcm9sbEVsZW1lbnQgYXMgV2luZG93KS52aXN1YWxWaWV3cG9ydC5oZWlnaHQgLyAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b3AgLT0gKHNjcm9sbEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsaWVudEhlaWdodCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdG9wID0gcG9zaXRpb247XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhbmdsZSA9PT0gXCJob3Jpem9udGFsXCIgfHwgYW5nbGUgPT09IFwiYm90aFwiKSB7XG4gICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgY2FzZSBcInN0YXJ0XCI6XG4gICAgICAgIGxlZnQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgbGVmdCA9IGdldFNjcm9sbFdpZHRoKHNjcm9sbEVsZW1lbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjZW50ZXJcIjpcbiAgICAgICAgbGVmdCA9IGdldFNjcm9sbFdpZHRoKHNjcm9sbEVsZW1lbnQpO1xuICAgICAgICBpZiAobGVmdCkge1xuICAgICAgICAgIGxlZnQgLz0gMjtcbiAgICAgICAgICAvLyBpZiBlbGVtZW50IGlzIHdpbmRvd1xuICAgICAgICAgIGlmICgoc2Nyb2xsRWxlbWVudCBhcyBXaW5kb3cpLmRvY3VtZW50KSB7XG4gICAgICAgICAgICBsZWZ0IC09IChzY3JvbGxFbGVtZW50IGFzIFdpbmRvdykudmlzdWFsVmlld3BvcnQud2lkdGggLyAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZWZ0IC09IChzY3JvbGxFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGllbnRXaWR0aCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVmdCA9IHBvc2l0aW9uO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzY3JvbGxFbGVtZW50LnNjcm9sbCh7XG4gICAgYmVoYXZpb3IsXG4gICAgdG9wLFxuICAgIGxlZnQsXG4gIH0pO1xuXG4gIHJldHVybiBzY3JvbGxQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEVsZW1lbnRGcm9tRXZlbnQgPSA8VCA9IEhUTUxBbmNob3JFbGVtZW50IHwgSFRNTFVua25vd25FbGVtZW50PihcbiAgZXZlbnQ6IEV2ZW50IHwgTW91c2VFdmVudCB8IFRvdWNoRXZlbnRcbikgPT4ge1xuICBjb25zdCBlbCA9XG4gICAgKChldmVudCBhcyBFdmVudCkudGFyZ2V0IGFzIHVua25vd24gYXMgVCB8IG51bGwpIHx8XG4gICAgKChldmVudCBhcyBhbnkpLmN1cnJlbnRUYXJnZXQgYXMgVCB8IG51bGwpIHx8XG4gICAgKChldmVudCBhcyBNb3VzZUV2ZW50KS5yZWxhdGVkVGFyZ2V0IGFzIHVua25vd24gYXMgVCB8IG51bGwpIHx8XG4gICAgLy8gSlF1ZXJ5IGV2ZW50XG4gICAgKChldmVudCBhcyBhbnkpLmRlbGVnYXRlVGFyZ2V0IGFzIFQpIHx8XG4gICAgKChldmVudCBhcyBhbnkpLmZyb21FbGVtZW50IGFzIFQpO1xuICByZXR1cm4gZWw7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Vmlld3BvcnREaW1lbnNpb25zID0gKCkgPT4ge1xuICBjb25zdCB3ID0gTWF0aC5tYXgoXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDogMCxcbiAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwXG4gICk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCxcbiAgICB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMFxuICApO1xuICByZXR1cm4ge1xuICAgIGgsXG4gICAgdyxcbiAgfTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudFxuICogQHBhcmFtIG9mZnNldFRvcCAoRGVmYXVsdCAgRGlzdGFuY2UgdG8gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLCBpZiB0aGlzIGlzIDAsIHRoZSBlbGVtZW50IG11c3QgYmUgc2Nyb2xsZWQgdW50aWwgdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICogQHBhcmFtIG9mZnNldEJvdHRvbSBEaXN0YW5jZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4sIGlmIHRoaXMgaXMgMCwgdGhlIHNjcm9sbCBwb3NpdGlvbiBtdXN0IGJlIG92ZXIgdGhlIGVsZW1lbnRcbiAqIEByZXR1cm4gUmV0dXJucyB0cnVlIGlmIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBpc0luVmlld3BvcnQgPSAoXG4gIGVsZW06IEVsZW1lbnQsXG4gIG9mZnNldFRvcD86IG51bWJlcixcbiAgb2Zmc2V0Qm90dG9tID0gMFxuKSA9PiB7XG4gIGlmICghZWxlbSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGRpc3RhbmNlID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBpZiAoIW9mZnNldFRvcCkge1xuICAgIGNvbnN0IHZwID0gZ2V0Vmlld3BvcnREaW1lbnNpb25zKCk7XG4gICAgb2Zmc2V0VG9wID0gdnAuaCAtIGRpc3RhbmNlLmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgZGlzdGFuY2UudG9wICsgZGlzdGFuY2UuaGVpZ2h0ID49IG9mZnNldEJvdHRvbSAmJlxuICAgIGRpc3RhbmNlLmJvdHRvbSAtIGRpc3RhbmNlLmhlaWdodCA8PSBvZmZzZXRUb3BcbiAgKTtcbn07XG5cbi8qKlxuICogU2VsZWN0IGFsbCBvZiBhbiBjb250ZW50ZWRpdGFibGUgb3IgaW5wdXQgZWxlbWVudFxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgeW91IHdhbnQgdG8gc2VsZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBzZWxlY3RBbGwgPSAoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCkgPT4ge1xuICAvLyBuZWVkIHNldFRpbWVvdXQgZm9yIHNhZmFyaVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgZWxlbWVudC5zZWxlY3Rpb25FbmQgPSA5OTk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LnNlbGVjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBlbGVtZW50LnNlbGVjdCgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIDk5OSk7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbGVtZW50KTtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICBzZWxlY3Rpb24uc2VsZWN0QWxsQ2hpbGRyZW4oZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKChkb2N1bWVudCBhcyBhbnkpLmJvZHkuY3JlYXRlVGV4dFJhbmdlKSB7XG4gICAgICBjb25zdCByYW5nZTogYW55ID0gKGRvY3VtZW50LmJvZHkgYXMgYW55KS5jcmVhdGVUZXh0UmFuZ2UoKTsgLy8gQ3JlYXRlcyBUZXh0UmFuZ2Ugb2JqZWN0XG4gICAgICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChlbGVtZW50KTsgLy8gc2V0cyBSYW5nZVxuICAgICAgcmFuZ2Uuc2VsZWN0KCk7IC8vIG1ha2Ugc2VsZWN0aW9uLlxuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5leGVjQ29tbWFuZCkge1xuICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJzZWxlY3RBbGxcIiwgZmFsc2UsIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9LCAwKTtcbn07XG5cbi8qKlxuICogQ3Jvc3MtYnJvd3NlciBEb2N1bWVudCBSZWFkeSBjaGVja1xuICogQHNlZSBodHRwczovL3d3dy5jb21wZXRhLmNvbS9ibG9nL2Nyb3NzLWJyb3dzZXItZG9jdW1lbnQtcmVhZHktd2l0aC12YW5pbGxhLWphdmFzY3JpcHQvXG4gKiBAcGFyYW0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWR5ID0gKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XG4gIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIGNhbGxiYWNrIGlzIHJlcXVpcmVkIVwiKTtcbiAgfVxuXG4gIGNvbnN0IGNoZWNrUmVhZHkgPSAoKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgaWYgKChkb2N1bWVudCBhcyBhbnkpLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmRldGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGNoZWNrUmVhZHkpO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY2hlY2tSZWFkeSk7XG4gICAgfVxuICB9O1xuXG4gIGlmICgoZG9jdW1lbnQgYXMgYW55KS5hdHRhY2hFdmVudCkge1xuICAgIChkb2N1bWVudCBhcyBhbnkpLmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGNoZWNrUmVhZHkpO1xuICB9XG4gIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY2hlY2tSZWFkeSk7XG4gIH1cbiAgY2hlY2tSZWFkeSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRTY3JpcHQgPSBhc3luYyAoXG4gIHNyYzogc3RyaW5nLFxuICBpZDogc3RyaW5nLFxuICBhc3luYyA9IHRydWUsXG4gIGRlZmVyID0gdHJ1ZVxuKSA9PiB7XG4gIGNvbnN0IHNjcmlwdCA9IGF3YWl0IG5ldyBQcm9taXNlPEhUTUxTY3JpcHRFbGVtZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IHNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MU2NyaXB0RWxlbWVudCB8IG51bGw7XG4gICAgaWYgKHNjcmlwdCkge1xuICAgICAgY29uc29sZS53YXJuKFwic2NyaXB0IGFscmVhZHkgbG9hZGVkLCBkbyBub3RoaW5nLlwiKTtcbiAgICAgIGlmIChzY3JpcHQuaGFzQXR0cmlidXRlKFwibG9hZGVkXCIpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHNjcmlwdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICBzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICBzY3JpcHQuaWQgPSBpZDtcbiAgICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZlcikge1xuICAgICAgICBzY3JpcHQuZGVmZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cblxuICAgIC8vIElFXG4gICAgaWYgKChzY3JpcHQgYXMgYW55KS5yZWFkeVN0YXRlKSB7XG4gICAgICAoc2NyaXB0IGFzIGFueSkub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHNjcmlwdCBhcyBhbnkpLnJlYWR5U3RhdGUgPT09IFwibG9hZGVkXCIgfHxcbiAgICAgICAgICAoc2NyaXB0IGFzIGFueSkucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiXG4gICAgICAgICkge1xuICAgICAgICAgIChzY3JpcHQgYXMgYW55KS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgIHNjcmlwdD8uc2V0QXR0cmlidXRlKFwibG9hZGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICByZXNvbHZlKHNjcmlwdCBhcyBIVE1MU2NyaXB0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gT3RoZXIgYnJvd3NlcnNcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgc2NyaXB0Py5zZXRBdHRyaWJ1dGUoXCJsb2FkZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgcmVzb2x2ZShzY3JpcHQgYXMgSFRNTFNjcmlwdEVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiRXJyb3Igb24gbG9hZCBzY3JpcHQgXCIgKyBzY3JpcHQ/LnNyYyk7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gc2NyaXB0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFVJRCA9IChwcmVmaXg6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGRvIHtcbiAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpO1xuXG4gIHJldHVybiBwcmVmaXg7XG59O1xuXG4vKipcbiAqIERldGVjdHMgaWYgZG9tIGVsZW1lbnQgaXMgY3VzdG9tIGVsZW1lbnQgYW5kIGEgcmVnaXN0ZXJlZCByaWJhIGNvbXBvbmVudFxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc3Mzc3NjUvMTQ2NTkxOVxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgb3IgdGFnIG5hbWUgeW91IHdhbnQgdG8gdGVzdFxuICogQHBhcmFtIGlzUmVnaXN0ZXJlZCBJZiB0cnVlIHRoZSBlbGVtZW50IG11c3QgYWxzbyBiZSBhIHJlZ2lzdGVyZWQgYXMgYSBjdXN0b20gZWxlbWVudCxcbiAqIEBwYXJhbSBpc1VwZ3JhZGVkXG4gKi9cbmV4cG9ydCBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSAoXG4gIGVsZW1lbnQ6IEhUTUxVbmtub3duRWxlbWVudCB8IHN0cmluZyxcbiAgaXNSZWdpc3RlcmVkID0gZmFsc2UsXG4gIGlzVXBncmFkZWQgPSBmYWxzZVxuKSA9PiB7XG4gIC8vIEEgY3VzdG9tIGVsZW1lbnQncyBuYW1lIGlzIHJlcXVpcmVkIHRvIGNvbnRhaW4gYSAtLCB3aGVyZWFzIGFuIEhUTUwtZGVmaW5lZCBlbGVtZW50IHdpbGwgbm90LiBTbzpcbiAgY29uc3QgbG9jYWxOYW1lID0gdHlwZW9mIGVsZW1lbnQgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50IDogZWxlbWVudC5sb2NhbE5hbWU7XG4gIGNvbnN0IGlzQ3VzdG9tRWxlbWVudCA9IGxvY2FsTmFtZS5pbmNsdWRlcyhcIi1cIik7XG4gIGlmIChpc0N1c3RvbUVsZW1lbnQgJiYgaXNSZWdpc3RlcmVkICYmIGN1c3RvbUVsZW1lbnRzKSB7XG4gICAgY29uc3QgY3VzdG9tQ29uc3RydWN0b3IgPSBjdXN0b21FbGVtZW50cy5nZXQobG9jYWxOYW1lKTtcbiAgICBpZiAoIWN1c3RvbUNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIG5vdCB5ZXQgdXBncmFkZWQgdGhlIGNvbnN0cnVjdG9yIGlzIHN0aWxsIGVxdWFsIHRvIEhUTUxFbGVtZW50XG4gICAgaWYgKGlzVXBncmFkZWQpIHtcbiAgICAgIHJldHVybiBjdXN0b21Db25zdHJ1Y3RvciA9PT0gZWxlbWVudC5jb25zdHJ1Y3RvcjtcbiAgICB9XG4gICAgLy8gSWYgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayBmb3IgdXBncmFkZWQgc3RhdHVzXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzQ3VzdG9tRWxlbWVudDtcbn07XG5cbi8qKlxuICogV2FpdHMgZm9yIEN1c3RvbUVsZW1lbnQgdG8gYmUgdXBncmFkZWQsIHJldHVybnMgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgY3VzdG9tIEVsZW1lbnQgd2FpdGluZyBmb3IgYW4gdXBncmFkZS5cbiAqIEByZXR1cm5zIHRoZSBlbGVtZW50IGFmdGVyIHRoZSB1cGdyYWRlXG4gKi9cbmV4cG9ydCBjb25zdCB3YWl0Rm9yQ3VzdG9tRWxlbWVudCA9IGFzeW5jIChlbGVtZW50OiBIVE1MVW5rbm93bkVsZW1lbnQpID0+IHtcbiAgYXdhaXQgY3VzdG9tRWxlbWVudHMud2hlbkRlZmluZWQoZWxlbWVudC5sb2NhbE5hbWUpO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbi8qKlxuICogQ3JlYXRpbmcgYSBuZXcgRE9NIGVsZW1lbnQgZnJvbSBhbiBIVE1MIHN0cmluZ1xuICogQHBhcmFtIGh0bWwgcmVwcmVzZW50aW5nIGEgc2luZ2xlIGVsZW1lbnRcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogICBjb25zdCB0ZCA9IGh0bWxUb0VsZW1lbnQoXCI8dGQ+Zm9vPC90ZD5cIik7XG4gKiAgIGNvbnN0IGRpdiA9IGh0bWxUb0VsZW1lbnQoXCI8ZGl2PjxzcGFuPm5lc3RlZDwvc3Bhbj4gPHNwYW4+c3R1ZmY8L3NwYW4+PC9kaXY+XCIpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sVG9FbGVtZW50ID0gKGh0bWw6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgaHRtbCA9IGh0bWwudHJpbSgpOyAvLyBOZXZlciByZXR1cm4gYSB0ZXh0IG5vZGUgb2Ygd2hpdGVzcGFjZSBhcyB0aGUgcmVzdWx0XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0Q2hpbGQ7XG59O1xuXG4vKipcbiAqIENyZWF0aW5nIGEgbmV3IERPTSBlbGVtZW50cyBmcm9tIGFuIEhUTUwgc3RyaW5nXG4gKiBAcGFyYW0gaHRtbCByZXByZXNlbnRpbmcgYW55IG51bWJlciBvZiBzaWJsaW5nIGVsZW1lbnRzXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqICAgdmFyIHJvd3MgPSBodG1sVG9FbGVtZW50cygnPHRyPjx0ZD5mb288L3RkPjwvdHI+PHRyPjx0ZD5iYXI8L3RkPjwvdHI+Jyk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxUb0VsZW1lbnRzID0gKGh0bWw6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGROb2Rlcztcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBOb2RlTGlzdCBvciBIVE1MQ29sbGVjdGlvbiB0byBhbiBBcnJheVxuICogQHBhcmFtIG5vZGVMaXN0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgY29uc3QgdG9BcnJheSA9IChub2RlTGlzdDogTm9kZUxpc3QgfCBIVE1MQ29sbGVjdGlvbik6IEhUTUxFbGVtZW50W10gPT4ge1xuICBpZiAoIW5vZGVMaXN0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwobm9kZUxpc3QpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbnkgaHRtbCBlbGVtZW50IGlzIHZpc2libGUgaW4gdGhlIGRvbVxuICogQHBhcmFtIGVsZW1lbnRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBjb25zdCBpc1Zpc2libGUgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFxuICAgIGVsZW1lbnQuc3R5bGUgJiZcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgJiZcbiAgICAoZWxlbWVudC5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50KS5zdHlsZVxuICApIHtcbiAgICBjb25zdCBlbGVtZW50U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHBhcmVudE5vZGVTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudC5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50KTtcblxuICAgIHJldHVybiAoXG4gICAgICBlbGVtZW50U3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIgJiZcbiAgICAgIHBhcmVudE5vZGVTdHlsZS5kaXNwbGF5ICE9PSBcIm5vbmVcIiAmJlxuICAgICAgZWxlbWVudFN0eWxlLnZpc2liaWxpdHkgIT09IFwiaGlkZGVuXCJcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIEpRdWVyeSdzIGAkKGVsKS5pbmRleCgpO2BcbiAqIEBwYXJhbSBlbFxuICovXG5leHBvcnQgY29uc3QgZ2V0RWxlbWVudEluZGV4ID0gKGVsOiBFbGVtZW50IHwgbnVsbCkgPT4ge1xuICBpZiAoIWVsKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGxldCBpID0gMDtcbiAgZG8ge1xuICAgIGkrKztcbiAgICBlbCA9IChlbCBhcyBIVE1MRWxlbWVudCkucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfSB3aGlsZSAoZWwpO1xuICByZXR1cm4gaTtcbn07XG4iLCIvLyBDcmVkaXRzIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZVxuXG4vLyBGb3IgcmVhbCB0eXBlcyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vYmxvYi9tYWluL2NvcmUvbGliLmRlbm9fY29yZS5kLnRzXG5kZWNsYXJlIGNvbnN0IERlbm86IGFueTtcbmRlY2xhcmUgY29uc3QgcHJvY2VzczogYW55O1xuXG5jb25zdCBpc0Jyb3dzZXIgPVxuICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5cbmNvbnN0IGlzTm9kZSA9XG4gIHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHByb2Nlc3MudmVyc2lvbnMgIT0gbnVsbCAmJlxuICBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbDtcblxuY29uc3QgaXNXZWJXb3JrZXIgPVxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJlxuICBzZWxmLmNvbnN0cnVjdG9yICYmXG4gIHNlbGYuY29uc3RydWN0b3IubmFtZSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiO1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL3JlbGVhc2VzL3RhZy8xMi4wLjBcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8xNTM3XG4gKi9cbmNvbnN0IGlzSnNEb20gPVxuICAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubmFtZSA9PT0gXCJub2RlanNcIikgfHxcbiAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIk5vZGUuanNcIikgfHxcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJqc2RvbVwiKSkpO1xuXG5jb25zdCBpc0Rlbm8gPSB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgRGVuby5jb3JlICE9PSBcInVuZGVmaW5lZFwiO1xuXG5leHBvcnQgeyBpc0Jyb3dzZXIsIGlzV2ViV29ya2VyLCBpc05vZGUsIGlzSnNEb20sIGlzRGVubyB9O1xuIiwiLyoqXG4gKiBTaW1wbGlmaWVkIHZlcnNpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL1l1enVKUy9zZXRJbW1lZGlhdGVcbiAqIFRPRE8gUG9ydCB0ZXN0c1xuICovXG5cbmludGVyZmFjZSBUYXNrIHtcbiAgY2FsbGJhY2s6ICguLi5hcmdzOiBhbnkpID0+IGFueTtcbiAgYXJnczogYW55W107XG59XG5cbmxldCBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG5jb25zdCB0YXNrc0J5SGFuZGxlOiB7IFtrZXk6IHN0cmluZ106IFRhc2sgfSA9IHt9O1xubGV0IGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuY29uc3QgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuXG5jb25zdCBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xuICBpZiAoXG4gICAgZXZlbnQuc291cmNlID09PSB3aW5kb3cgJiZcbiAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMFxuICApIHtcbiAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgfVxufTtcblxuaWYgKHdpbmRvdykge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW1tZWRpYXRlKGhhbmRsZTogbnVtYmVyKSB7XG4gIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG59XG5cbmZ1bmN0aW9uIF9zZXRJbW1lZGlhdGUoY2FsbGJhY2s6ICguLi5hcmdzOiBhbnkpID0+IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgY29uc29sZS5kZWJ1ZyhcIlVzZSBzZXRJbW1lZGlhdGUgcG9seWZpbGxcIik7XG4gIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spIGFzICguLi5hcmdzOiBhbnkpID0+IGFueTtcbiAgfVxuICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgY29uc3QgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzIH07XG4gIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgcmV0dXJuIG5leHRIYW5kbGUrKztcbn1cblxuZnVuY3Rpb24gX2NsZWFySW1tZWRpYXRlKGhhbmRsZTogbnVtYmVyKSB7XG4gIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG59XG5cbmZ1bmN0aW9uIHJ1bih0YXNrOiBUYXNrKSB7XG4gIGNvbnN0IGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgY29uc3QgYXJncyA9IHRhc2suYXJncztcbiAgY2FsbGJhY2soLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGU6IGFueSkge1xuICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICBpZiAodGFzaykge1xuICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJ1bih0YXNrKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9jbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNldEltbWVkaWF0ZTogdHlwZW9mIF9zZXRJbW1lZGlhdGUgPVxuICAod2luZG93IGFzIGFueSk/LnNldEltbWVkaWF0ZSB8fCBfc2V0SW1tZWRpYXRlO1xuZXhwb3J0IGNvbnN0IGNsZWFySW1tZWRpYXRlOiB0eXBlb2YgX2NsZWFySW1tZWRpYXRlID1cbiAgKHdpbmRvdyBhcyBhbnkpPy5jbGVhckltbWVkaWF0ZSB8fCBfY2xlYXJJbW1lZGlhdGU7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi90eXBlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29sb3IuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29udHJvbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZG9tLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnYuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ltbWVkaWF0ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9vbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VybC5qc1wiO1xuIiwiY29uc3QgZmFsbGJhY2tDb3B5VGV4dFRvQ2xpcGJvYXJkID0gKHRleHQ6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZXh0QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgdGV4dEFyZWEudmFsdWUgPSB0ZXh0O1xuXG4gIC8vIEF2b2lkIHNjcm9sbGluZyB0byBib3R0b21cbiAgdGV4dEFyZWEuc3R5bGUudG9wID0gXCIwXCI7XG4gIHRleHRBcmVhLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgdGV4dEFyZWEuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0QXJlYSk7XG4gIHRleHRBcmVhLmZvY3VzKCk7XG4gIHRleHRBcmVhLnNlbGVjdCgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgc3VjY2Vzc2Z1bCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICBjb25zdCBtc2cgPSBzdWNjZXNzZnVsID8gXCJzdWNjZXNzZnVsXCIgOiBcInVuc3VjY2Vzc2Z1bFwiO1xuICAgIGNvbnNvbGUubG9nKGBGYWxsYmFjazogQ29weWluZyB0ZXh0IGNvbW1hbmQgd2FzICR7bXNnfTogJHt0ZXh0fWApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFsbGJhY2s6IE9vcHMsIHVuYWJsZSB0byBjb3B5XCIsIGVycik7XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRleHRBcmVhKTtcbn07XG5cbi8qKlxuICogQ29weSB0ZXh0IHRvIGNsaXBib2FyZFxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzA4MTAzMjJcbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHlUZXh0VG9DbGlwYm9hcmQgPSBhc3luYyAodGV4dDogc3RyaW5nKSA9PiB7XG4gIGlmICghbmF2aWdhdG9yLmNsaXBib2FyZCkge1xuICAgIGZhbGxiYWNrQ29weVRleHRUb0NsaXBib2FyZCh0ZXh0KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KTtcbiAgICBjb25zb2xlLmxvZyhcIkNvcHlpbmcgdG8gY2xpcGJvYXJkIHdhcyBzdWNjZXNzZnVsOiBcIiArIHRleHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgY29weSB0ZXh0OiBcIiwgZXJyb3IpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgT3BlcmF0aW5nIHN5c3RlbSB0aGUgYnJvd3NlciBpcyBydW5uaW5nIG9uXG4gKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5ODc3OTI0L3doYXQtaXMtdGhlLWxpc3Qtb2YtcG9zc2libGUtdmFsdWVzLWZvci1uYXZpZ2F0b3ItcGxhdGZvcm0tYXMtb2YtdG9kYXlcbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTAzODYyNS9kZXRlY3QtaWYtZGV2aWNlLWlzLWlvc1xuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9kbG92ZS9wb2Rsb3ZlLXN1YnNjcmliZS1idXR0b24vYmxvYi9tYXN0ZXIvc3JjL2NvZmZlZS91c2VyX2FnZW50LmNvZmZlZVxuICovXG5leHBvcnQgY29uc3QgZ2V0T1MgPSAoKSA9PiB7XG4gIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuXG4gIGNvbnN0IHVBcyA9IHtcbiAgICB3aW5kb3dzNzogL1dpbmRvd3MgTlQgNi4xLyxcbiAgICB3aW5kb3dzODogL1dpbmRvd3MgTlQgNi4yLyxcbiAgICB3aW5kb3dzODE6IC9XaW5kb3dzIE5UIDYuMy8sXG4gICAgd2luZG93czEwOiAvV2luZG93cyBOVCAxMC4wLyxcbiAgICB3aW5kb3dzOiAvd2luZG93cy9pLFxuICAgIHdpbmRvd3NQaG9uZTogL3RyaWRlbnQvaSxcbiAgICBhbmRyb2lkOiAvYW5kcm9pZC9pLFxuICAgIGlvczogLyhpcGFkfGlwaG9uZXxpcG9kKS9pLFxuICAgIGxpbnV4OiAvKGxpbnV4KS9pLFxuICAgIHVuaXg6IC8ob3BlbmJzZHxmcmVlYnNkfG5ldGJzZCkvaSxcbiAgICBvc3hDYXRhbGluYTogL21hY2ludG9zaC4rMTAoX3xcXC4pMTUvaSxcbiAgICBvc3hCaWdTdXI6IC9tYWNpbnRvc2guKygoMTAoX3xcXC4pMTYpfCgxMShffFxcLikpKS9pLFxuICAgIG9zeDogL21hY2ludG9zaC9pLFxuICAgIG1hYzogL21hYy9pLFxuICB9O1xuXG4gIGNvbnN0IHBsYXRmb3JtcyA9IHtcbiAgICBsaW51eDogL0xpbnV4L2ksXG5cbiAgICB1bml4OiAvKEZyZWVCU0R8T3BlbkJTRHxYMTF8U3VuT1MpL2ksXG4gICAgd2ViT1M6IC93ZWJPUy9pLFxuXG4gICAgcGxheXN0YXRpb24zOiAvcGxheXN0YXRpb24gMy9pLFxuICAgIHBsYXlzdGF0aW9uNDogL3BsYXlzdGF0aW9uIDQvaSxcbiAgICBQbGF5c3RhdGlvblBvcnRhYmxlOiAvcHNwL2ksXG5cbiAgICBuZXdOaW50ZW5kbzNEczogL25ldyBuaW50ZW5kbyAzZHMvaSxcbiAgICBuaW50ZW5kb0RzaTogL25pbnRlbmRvIGRzaS9pLFxuICAgIG5pbnRlbmRvM0RzOiAvbmludGVuZG8gM2RzL2ksXG4gICAgbmludGVuZG9XaWk6IC9uaW50ZW5kbyB3aWkvaSxcbiAgICBuaW50ZW5kb1dpaVU6IC9uaW50ZW5kbyB3aWl1L2ksXG5cbiAgICBwYWxtb3M6IC9wYWxtb3MvaSxcblxuICAgIHN5bWJpYW46IC8obm9raWFfc2VyaWVzXzQwfHM2MHxzeW1iaWFuKS9pLFxuICB9O1xuXG4gIGZvciAoY29uc3QgdUFLZXkgb2YgT2JqZWN0LmtleXModUFzKSBhcyBBcnJheTxrZXlvZiB0eXBlb2YgdUFzPikge1xuICAgIGNvbnN0IHJlZ2V4ID0gdUFzW3VBS2V5XTtcbiAgICBpZiAocmVnZXgudGVzdCh1YSkpIHtcbiAgICAgIC8vIGlQYWQgb24gaU9TIDEzIGRldGVjdGlvblxuICAgICAgaWYgKHVBS2V5ID09PSBcIm1hY1wiICYmIFwib250b3VjaGVuZFwiIGluIGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBcImlvc1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVBS2V5O1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgcGxhdGZvcm1LZXkgb2YgT2JqZWN0LmtleXMocGxhdGZvcm1zKSBhcyBBcnJheTxcbiAgICBrZXlvZiB0eXBlb2YgcGxhdGZvcm1zXG4gID4pIHtcbiAgICBjb25zdCByZWdleCA9IHBsYXRmb3Jtc1twbGF0Zm9ybUtleV07XG4gICAgaWYgKHJlZ2V4LnRlc3QocGxhdGZvcm0pKSB7XG4gICAgICByZXR1cm4gcGxhdGZvcm1LZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwiVW5rbm93blwiO1xufTtcblxuLy8gVE9ETyB0ZXN0IFRWXG5leHBvcnQgY29uc3QgZ2V0T1NUeXBlID0gKCkgPT4ge1xuICBjb25zdCBvcyA9IGdldE9TKCk7XG5cbiAgbGV0IGlzTW9iaWxlID0gZmFsc2U7XG4gIGxldCBpc0Rlc2t0b3AgPSBmYWxzZTtcbiAgbGV0IGlzR2FtZUNvbnNvbGUgPSBmYWxzZTtcblxuICBzd2l0Y2ggKG9zKSB7XG4gICAgY2FzZSBcIndpbmRvd3NcIjpcbiAgICBjYXNlIFwid2luZG93czEwXCI6XG4gICAgY2FzZSBcIndpbmRvd3M3XCI6XG4gICAgY2FzZSBcIndpbmRvd3M4XCI6XG4gICAgY2FzZSBcIndpbmRvd3M4MVwiOlxuICAgIGNhc2UgXCJvc3hCaWdTdXJcIjpcbiAgICBjYXNlIFwib3N4Q2F0YWxpbmFcIjpcbiAgICBjYXNlIFwib3N4XCI6XG4gICAgY2FzZSBcIm1hY1wiOlxuICAgIGNhc2UgXCJsaW51eFwiOlxuICAgIGNhc2UgXCJ1bml4XCI6XG4gICAgICBpc0Rlc2t0b3AgPSB0cnVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiaW9zXCI6XG4gICAgY2FzZSBcImFuZHJvaWRcIjpcbiAgICBjYXNlIFwid2luZG93c1Bob25lXCI6XG4gICAgY2FzZSBcInN5bWJpYW5cIjpcbiAgICAgIGlzTW9iaWxlID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKG9zLmluY2x1ZGVzKFwicGxheXN0YXRpb25cIikgfHwgb3MuaW5jbHVkZXMoXCJuaW50ZW5kb1wiKSkge1xuICAgIGlzR2FtZUNvbnNvbGUgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc01vYmlsZSxcbiAgICBpc0Rlc2t0b3AsXG4gICAgaXNHYW1lQ29uc29sZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc01vYmlsZSA9ICgpID0+IHtcbiAgcmV0dXJuIGdldE9TVHlwZSgpLmlzTW9iaWxlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRGVza3RvcCA9ICgpID0+IHtcbiAgcmV0dXJuIGdldE9TVHlwZSgpLmlzRGVza3RvcDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0dhbWVDb25zb2xlID0gKCkgPT4ge1xuICByZXR1cm4gZ2V0T1NUeXBlKCkuaXNHYW1lQ29uc29sZTtcbn07XG4iLCJpbXBvcnQgeyBCQVNFNjRfUFJFRklYLCBLRVlQQVRILCBQUklNSVRJVkUsIFFVT1RFRF9TVFIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBGaXhlZCB2ZXJzaW9uIG9mIHR5cGVvZiBvcGVyYXRvclxuICogQHBhcmFtIG9ialxuICogQHNlZSBodHRwczovL2dvby5nbC9weHdRR3BcbiAqL1xuZXhwb3J0IGNvbnN0IHRvVHlwZSA9IChvYmo6IGFueSkgPT4ge1xuICBjb25zdCBtYXRjaGVzID0ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGFuIG9iamVjdCB0byBhIGpzb24gc3RyaW5nIHdpdGggdGhlIHNwZWNpYWwgZmVhdHVyZSB0aGF0IHNpbmdsZSBxdW90ZXMgYXJlIHJlcGxhY2VkLlxuICogVGhpcyB3YXkgdGhlcmUgYXJlIG5vIGNvbmZsaWN0cyB3aGVuIHRoaXMganNvbiBzdHJpbmcgaXMgdXNlZCBhcyBhdHRyaWJ1dGUgdmFsdWUgYWZ0ZXJ3YXJkcy5cbiAqIEBub3RlIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSB0aGUgSnNvbkZvcm1hdHRlclxuICogQHNlZSBwYXJzZUpzb25TdHJpbmdcbiAqIEBwYXJhbSBvYmplY3RcbiAqIEBwYXJhbSBzcGFjZVxuICogQHBhcmFtIHJlcGxhY2VTaW5nbGVRdW90ZVxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzb25TdHJpbmdpZnkgPSAoXG4gIG9iamVjdDogYW55LFxuICBzcGFjZSA9IDIsXG4gIHJlcGxhY2VTaW5nbGVRdW90ZSA9IHRydWVcbikgPT4ge1xuICBjb25zdCByZXN1bHQgPSBKU09OLnN0cmluZ2lmeShvYmplY3QsIG51bGwsIHNwYWNlKTtcbiAgaWYgKHJlcGxhY2VTaW5nbGVRdW90ZSAmJiByZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoLycvZywgYCYjMzk7YCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEganNvbiBzdHJpbmcgd2l0aCB0aGUgc3BlY2lhbCBmZWF0dXJlIHRoYXQganNvbiBzdHJpbmdzXG4gKiBjYW4gYWxzbyBoYXZlIHNpbmdsZSBxdW90YXRpb25zIGZvciBkZWZpbmluZyB0aGUgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gKiBAc2VlIGpzb25TdHJpbmdpZnlcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlSnNvblN0cmluZyA9ICh2YWx1ZT86IHN0cmluZyB8IG51bGwpID0+IHtcbiAgbGV0IG9iamVjdCA9IG51bGw7XG5cbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICBpZiAoIWNvdWxkQmVKc29uKHZhbHVlKSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgaWYgKGlzSnNvbih2YWx1ZSkpIHtcbiAgICBvYmplY3QgPSBKU09OLnBhcnNlKHZhbHVlKSB8fCBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gYW4gaW52YWxpZCBqc29uIHN0cmluZyB3aXRoIHNpbmdsZSBxdW90YXRpb24gdG8gYSB2YWxpZCBqc29uIHN0cmluZyB3aXRoIGRvdWJsZSBxdW90YXRpb25cbiAgICAgIG9iamVjdCA9IEpTT04ucGFyc2UodmFsdWUucmVwbGFjZSgvJy9nLCAnXCInKSkgfHwgbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGBDYW4ndCBwYXJzZSBqc29uIHN0cmluZyBvZiBcIiR7dmFsdWV9XCIgYCwgZXJyb3IpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNvdWxkQmVKc29uID0gKHN0cj86IHN0cmluZyB8IG51bGwpID0+IHtcbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHIgPSBzdHIudHJpbSgpO1xuICByZXR1cm4gKFxuICAgIChzdHIuY2hhckF0KDApID09PSBcIntcIiAmJiBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKSA9PT0gXCJ9XCIpIHx8XG4gICAgKHN0ci5jaGFyQXQoMCkgPT09IFwiW1wiICYmIHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIDEpID09PSBcIl1cIilcbiAgKTtcbn07XG5cbi8qKlxuICogVGVzdCBpZiBhIHN0cmluZyBpcyBiYXNlNjQgZW5jb2RlZFxuICogTm90ZSwgdGhpcyBpcyBub3QgYSBnZW5lcmFsIGZ1bmN0aW9uIGFuZCBpcyB1c2VkIGludGVybmFsbHkgYnkgUmliYS5qcyBieSBwcmVmaXhpbmcgYSBiYXNlNjQgc3RyaW5nIHdpdGggXCJiYXNlNjQ6XCIuXG4gKiBTbyBpZiB5b3Ugd2FudCB0byB1c2UgdGhpcyBtZXRob2QgbWFrZSBzdXJlIHRoYXQgeW91IHByZWZpeCB5b3VyIGJhc2U2NCBzdHJpbmdzIHdpdGggXCJiYXNlNjQ6XCIuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0Jhc2U2NCA9IChzdHI/OiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gIGlmICghc3RyKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBzdHIuc3RhcnRzV2l0aChCQVNFNjRfUFJFRklYKTtcbn07XG5cbi8qKlxuICogRGVjb2RlIGFuIHN0cmluZyBvciBvYmplY3QgdG8gYmFzZTY0XG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvQmFzZTY0I3NvbHV0aW9uXzJfJUUyJTgwJTkzX3Jld3JpdGluZ19hdG9iX2FuZF9idG9hX3VzaW5nX3R5cGVkYXJyYXlzX2FuZF91dGYtOFxuICogQHBhcmFtIG9ialxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IHRvQmFzZTY0ID0gKG9iajogYW55KSA9PiB7XG4gIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgb2JqID0gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAwKTtcbiAgfVxuICByZXR1cm4gQkFTRTY0X1BSRUZJWCArIGJ0b2EoZW5jb2RlVVJJQ29tcG9uZW50KG9iaikpO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gYmFzZTY0IHN0cmluZyBiYWNrXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvQmFzZTY0I3NvbHV0aW9uXzJfJUUyJTgwJTkzX3Jld3JpdGluZ19hdG9iX2FuZF9idG9hX3VzaW5nX3R5cGVkYXJyYXlzX2FuZF91dGYtOFxuICogQHBhcmFtIG9ialxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21CYXNlNjQgPSAoYmFzZTY0Pzogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICBpZiAodHlwZW9mIGJhc2U2NCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBcIk5vdCBhIGJhc2U2NCBzdHJpbmchXCI7XG4gIH1cblxuICBpZiAoYmFzZTY0LnN0YXJ0c1dpdGgoQkFTRTY0X1BSRUZJWCkpIHtcbiAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKEJBU0U2NF9QUkVGSVgubGVuZ3RoKTtcbiAgfVxuXG4gIGNvbnN0IG1heWJlRGVjb2RlZFVyaSA9IGF0b2IoYmFzZTY0KTtcbiAgbGV0IGVuY29kZWQ6IGFueTtcbiAgdHJ5IHtcbiAgICBlbmNvZGVkID0gZGVjb2RlVVJJQ29tcG9uZW50KG1heWJlRGVjb2RlZFVyaSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZW5jb2RlZCA9IG1heWJlRGVjb2RlZFVyaTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZVR5cGUoZW5jb2RlZCwgZmFsc2UpLnZhbHVlO1xufTtcblxuLyoqXG4gKiBUZXN0IGlmIHN0cmluZyBpcyBhIGpzb24gc3RyaW5nXG4gKiBAcGFyYW0gc3RyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0pzb24gPSAoc3RyPzogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICBpZiAoIXN0ciB8fCAhY291bGRCZUpzb24oc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHZhbCA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgPyB0cnVlIDogZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIFBhcnNlciBhbmQgdG9rZW5pemVyIGZvciBnZXR0aW5nIHRoZSB0eXBlIGFuZCB2YWx1ZSBmcm9tIGEgc3RyaW5nLlxuICogQHBhcmFtIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgcGFyc2VUeXBlID0gKGlucHV0Pzogc3RyaW5nIHwgbnVsbCwgaXNBdHRyaWJ1dGUgPSBmYWxzZSkgPT4ge1xuICBsZXQgdHlwZSA9IFBSSU1JVElWRTtcbiAgbGV0IHZhbHVlOiBhbnkgPSBpbnB1dDtcbiAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4geyB0eXBlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gIH1cbiAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgdHlwZSwgdmFsdWU6IG51bGwgfTtcbiAgfVxuICBpZiAoUVVPVEVEX1NUUi50ZXN0KGlucHV0KSkge1xuICAgIHZhbHVlID0gcGFyc2VUeXBlKGlucHV0LnNsaWNlKDEsIC0xKSwgaXNBdHRyaWJ1dGUpLnZhbHVlO1xuICB9IGVsc2UgaWYgKGlucHV0ID09PSBcInRydWVcIikge1xuICAgIHZhbHVlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgdmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCJudWxsXCIpIHtcbiAgICB2YWx1ZSA9IG51bGw7XG4gIH0gZWxzZSBpZiAoaW5wdXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCJcIikge1xuICAgIC8vIEFuIGVtcHR5IGF0dHJpYnV0ZSBzaG91bGQgYmUgaGFuZGxlZCBoYXMgYSB0cnVlIHZhbHVlXG4gICAgaWYgKGlzQXR0cmlidXRlKSB7XG4gICAgICB2YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gXCJcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihpbnB1dCkpKSB7XG4gICAgdmFsdWUgPSBOdW1iZXIoaW5wdXQpO1xuICAgIC8vIElmIG51bWJlciBpcyB0b28gbGFyZ2Ugc3RvcmUgdGhlIHZhbHVlIGFzIHN0cmluZ1xuICAgIGlmICh2YWx1ZSA+PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdmFsdWUgPSBpbnB1dDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCYXNlNjQodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBmcm9tQmFzZTY0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChjb3VsZEJlSnNvbih2YWx1ZSkpIHtcbiAgICBjb25zdCBqc29uU3RyaW5nID0gcGFyc2VKc29uU3RyaW5nKHZhbHVlKTtcbiAgICB2YWx1ZSA9IGpzb25TdHJpbmcgPyBqc29uU3RyaW5nIDogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9IEtFWVBBVEg7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZSwgdmFsdWUgfTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBjb25zdCBpc1VuZGVmaW5lZCA9ICh2YWx1ZT86IGFueSkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRGVmaW5lZCA9ICh2YWx1ZT86IGFueSkgPT4ge1xuICByZXR1cm4gIWlzVW5kZWZpbmVkKHZhbHVlKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHlwZSBpcyBPYmplY3RcbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3NzU3MzcvMTQ2NTkxOVxuICovXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAob2JqOiBhbnkpID0+IHtcbiAgcmV0dXJuIGlzRGVmaW5lZChvYmopICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgb2JqICE9PSBudWxsO1xufTtcblxuLyoqXG4gKiBQYXJzZSB2YWx1ZSB0byBzdHJpbmcgb3IgcmV0dXJuIHVuZGVmaW5lZCBpZiB2YWx1ZSBpcyBudWxsXG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFN0cmluZyA9ICh2YWx1ZTogYW55KSA9PiB7XG4gIHJldHVybiB2YWx1ZT8udG9TdHJpbmcgPyB2YWx1ZS50b1N0cmluZygpIDogdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBQYXJzZSB2YWx1ZSB0byBudW1iZXIgb3IgcmV0dXJuIDAgaWYgdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWRcbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0TnVtYmVyID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGEgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWU6IGFueSkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdmFyaWFibGUgaXMgbnVtYmVyIG9yIGEgc3RyaW5nIHdpdGggbnVtYmVycyBpbiBKYXZhU2NyaXB0XG4gKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDIxOTg4LzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTnVtYmVyID0gKHZhbHVlPzogYW55KTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmICFpc05hTih2YWx1ZSAtIDApO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0eXBlIGlzIEJvb2xlYW5cbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4ODE0NjE1LzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQm9vbGVhbiA9ICh2YWx1ZT86IGFueSkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSB0eXBlb2YgdHJ1ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHZhbHVlPzogYW55KSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBhIG51bWJlclxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nSGFzTnVtYmVyID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSAmJiAvXFxkLy50ZXN0KHZhbHVlKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVyc1xuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nSGFzT25seU51bWJlcnMgPSAodmFsdWU/OiBhbnkpID0+IHtcbiAgcmV0dXJuIC9eXFxkKyQvLnRlc3QodmFsdWUpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBzdHJpbmcgY29udGFpbnMgb25seSBudW1iZXJzLCArLCAtIGFuZCAoKVxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nSXNQaG9uZU51bWJlciA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiAvXlswLTkgKCkrLV0rJC8udGVzdCh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEp1c3QgZ2V0IHRoZSBkaWdpdHMgb2YgYSBzdHJpbmcsIHVzZWZ1bCB0byByZW1vdmUgcHggcGl4ZWwgZnJvbSBjc3MgdmFsdWVcbiAqXG4gKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExMDA2NTMvMTQ2NTkxOVxuICovXG5leHBvcnQgY29uc3QganVzdERpZ2l0cyA9IChzdHI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICBpZiAodHlwZW9mIHN0ciA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgY29uc3QgbnVtID0gc3RyLnJlcGxhY2UoL1teLVxcZC5dL2csIFwiXCIpO1xuICBpZiAoIWlzTnVtYmVyKG51bSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTnVtYmVyKG51bSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlc2NhcGVIdG1sID0gKGh0bWw6IHN0cmluZykgPT4ge1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKFxuICAgIC9bJjw+J1wiXS9nLFxuICAgIChjKSA9PlxuICAgICAgKHtcbiAgICAgICAgXCImXCI6IFwiJmFtcDtcIixcbiAgICAgICAgXCI8XCI6IFwiJmx0O1wiLFxuICAgICAgICBcIj5cIjogXCImZ3Q7XCIsXG4gICAgICAgICdcIic6IFwiJnF1b3Q7XCIsXG4gICAgICAgIFwiJ1wiOiBcIiYjMzk7XCIsXG4gICAgICB9W2MgYXMgbmV2ZXJdKVxuICApO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIHNwZWNpYWwgY2hhcnMgZnJvbSBhIHN0cmluZ1xuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTEwOTAzMDEvMTQ2NTkxOVxuICogQHBhcmFtIHN0clxuICovXG5leHBvcnQgY29uc3Qgd2l0aG91dFNwZWNpYWxDaGFycyA9IChzdHI6IHN0cmluZykgPT4ge1xuICAvLyBzdHIgPSBzdHIucmVwbGFjZSgvW15cXHdcXHNdL2dpLCBcIlwiKTsgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDM3NDg5MFxuICBzdHIgPSBzdHIucmVwbGFjZSgvW2B+IUAjJCVeJiooKV98K1xcLT0/OzonXCIsLjw+e31bXFxdXFxcXC9dL2dpLCBcIlwiKTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmVwbGFjZSBhbGwgdW1sYXV0IGNoYXJzIGZyb20gc3RyaW5nIGxpa2Ugw6Qgd2l0aCBhZVxuICogQHBhcmFtIHN0clxuICovXG5leHBvcnQgY29uc3QgcmVwbGFjZVVtbGF1dENoYXJzID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHN0ciA9IHN0clxuICAgIC5yZXBsYWNlKC/DpC9nLCBcImFlXCIpXG4gICAgLnJlcGxhY2UoL8O2L2csIFwib2VcIilcbiAgICAucmVwbGFjZSgvw7wvZywgXCJ1ZVwiKVxuICAgIC5yZXBsYWNlKC/Dny9nLCBcInNzXCIpXG4gICAgLnJlcGxhY2UoL8OEL2csIFwiQWVcIilcbiAgICAucmVwbGFjZSgvw5YvZywgXCJPZVwiKVxuICAgIC5yZXBsYWNlKC/DnC9nLCBcIsOcZVwiKTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBtdWx0aXBsZSB0YWJzLCBuZXdsaW5lcywgZXRjIGZyb20gYSBzdHJpbmdcbiAqIEBwYXJhbSBzdHJcbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhvdXRNdWx0aVdoaXRlc3BhY2UgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgc3RyID0gc3RyLnJlcGxhY2UoL1xcc1xccysvZywgXCIgXCIpO1xuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGEgc3RyaW5nIGludG8gYSBoYW5kbGUuXG4gKiBFLmcuICcxMDAlIE0gJiBNcyEhIScgLT4gMTAwLW0tbXNcbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNoYW5kbGUtaGFuZGxlaXplXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVpemUgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgc3RyID0gc3RyLnRyaW0oKTtcbiAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIHN0ciA9IHdpdGhvdXRNdWx0aVdoaXRlc3BhY2Uoc3RyKTtcbiAgc3RyID0gd2l0aG91dFNwZWNpYWxDaGFycyhzdHIpO1xuICBzdHIgPSByZXBsYWNlVW1sYXV0Q2hhcnMoc3RyKTtcbiAgc3RyID0gc3RyLnJlcGxhY2UoLyAvZywgXCItXCIpO1xuICByZXR1cm4gc3RyO1xufTtcblxuZXhwb3J0IGNvbnN0IHN0cmlwSHRtbCA9IChodG1sOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtcbiAgdG1wLmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiB0bXAudGV4dENvbnRlbnQgfHwgdG1wLmlubmVyVGV4dCB8fCBcIlwiO1xufTtcblxuLyoqXG4gKiBmb28tYmFyIC0+IGZvb0JhclxuICogUmV0dXJucyBhIGNhbWVsLWNhc2VkIHZlcnNpb24gb2YgdGhlIHN0cmluZy4gVXNlZCB3aGVuIHRyYW5zbGF0aW5nIGFuXG4gKiBlbGVtZW50J3MgYXR0cmlidXRlIG5hbWUgaW50byBhIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBjb21wb25lbnQncyBzY29wZS5cbiAqIEBwYXJhbSBzdHJcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVsQ2FzZSA9IChzdHI6IHN0cmluZykgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLy0oW2EtejAtOV0pL2csIChncm91cGVkKSA9PiB7XG4gICAgcmV0dXJuIGdyb3VwZWRbMV0udG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIGZvb0JhciAtPiBmb28tYmFyXG4gKi9cbmV4cG9ydCBjb25zdCBrZWJhYkNhc2UgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bQS1aXS9nLCAobGV0dGVyKSA9PiBgLSR7bGV0dGVyLnRvTG93ZXJDYXNlKCl9YCk7XG59O1xuXG4vKipcbiAqIHVwcGVyY2FzZSdzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAqIEBwYXJhbSBzdHJcbiAqL1xuZXhwb3J0IGNvbnN0IGNhcGl0YWxpemUgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHJldHVybiBcIlwiO1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufTtcblxuLyoqXG4gKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gKiBAcGFyYW0gZGVlcCBJZiB0cnVlLCB0aGUgbWVyZ2UgYmVjb21lcyByZWN1cnNpdmUgKGFrYS4gZGVlcCBjb3B5KS5cbiAqIEBwYXJhbSB0YXJnZXQgQW4gb2JqZWN0IHRoYXQgd2lsbCByZWNlaXZlIHRoZSBuZXcgcHJvcGVydGllc1xuICogQHBhcmFtIG9iamVjdHMgVGhlIG9iamVjdHMgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4uXG4gKiBAc2VlIGh0dHA6Ly93d3cuZGFtaXJzY29ybmVyLmNvbS9ibG9nL3Bvc3RzLzIwMTgwMjE2LVZhcmlhYmxlTnVtYmVyT2ZBcmd1bWVudHNJblR5cGVzY3JpcHQuaHRtbFxuICogQHNlZSBodHRwczovL2dvbWFrZXRoaW5ncy5jb20vbWVyZ2luZy1vYmplY3RzLXdpdGgtdmFuaWxsYS1qYXZhc2NyaXB0L1xuICovXG5leHBvcnQgY29uc3QgZXh0ZW5kID0gKFxuICBvcHRpb25zOiB7XG4gICAgLyoqIERlZXAgbWVyZ2UsIGlmIHRydWUgY29tcGFyZXMgYWxzbyBuZXN0ZWQgb2JqZWN0cyAqL1xuICAgIGRlZXA/OiBib29sZWFuO1xuICAgIC8qKiBLZWVwIGV4aXN0aW5nIHZhbHVlcywgaWYgdHJ1ZSBvbmx5IHVuZGVmaW5lZCB0YXJnZXQgdmFsdWVzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgc291cmNlIHZhbHVlICovXG4gICAga2VlcFZhbHVlcz86IGJvb2xlYW47XG4gICAgLyoqIElmIHRydWUgb25seSBvdmVyd3JpdGUgdGFyZ2V0IHZhbHVlcyBpZiB0aGUgc291cmNlIHZhbHVlIGlzIGRlZmluZWQgLyBub3QgdW5kZWZpbmVkICovXG4gICAgb25seURlZmluZWQ/OiBib29sZWFuO1xuICAgIC8qKiBtZXJnZSBhcnJheXMsIGlmIHRydWUsIHR3byBhcnJheXMgd2lsbCBiZSBtZXJnZWQgaW50byBvbmUgKi9cbiAgICBtZXJnZUFycmF5cz86IGJvb2xlYW47XG4gIH0gPSB7fSxcbiAgZXh0ZW5kZWQ6IGFueSA9IHt9LFxuICAuLi5vYmplY3RzOiBhbnlbXVxuKSA9PiB7XG4gIC8vIE1lcmdlIHRoZSBvYmplY3QgaW50byB0aGUgZXh0ZW5kZWQgb2JqZWN0XG4gIGNvbnN0IG1lcmdlID0gKG9iajogYW55KSA9PiB7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iaikocHJvcCkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9wdGlvbnMuZGVlcCAmJlxuICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpbcHJvcF0pID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIGRvaW5nIGEgZGVlcCBtZXJnZSBhbmQgdGhlIHByb3BlcnR5IGlzIGFuIG9iamVjdFxuICAgICAgICAgIGV4dGVuZGVkW3Byb3BdID0gZXh0ZW5kKG9wdGlvbnMsIGV4dGVuZGVkW3Byb3BdLCBvYmpbcHJvcF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZG8gYSByZWd1bGFyIG1lcmdlXG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcFZhbHVlcykge1xuICAgICAgICAgICAgLy8gT25seSBvdmVyd3JpdGUgdGFyZ2V0IHZhbHVlIGlmIHRoZSB0YXJnZXQgdmFsdWUgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuZGVkW3Byb3BdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vbmx5RGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gT25seSBvdmVyd3JpdGUgdGFyZ2V0IHZhbHVlIGlmIHRoZSBzb3VyY2UgdmFsdWUgaXMgZGVmaW5lZCAvIG5vdCB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tZXJnZUFycmF5cykge1xuICAgICAgICAgICAgLy8gTWVyZ2UgYXJyYXkgaWYgYm90aCB2YWx1ZXMgYXJlIGFycmF5J3NcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4dGVuZGVkW3Byb3BdKSAmJiBBcnJheS5pc0FycmF5KG9ialtwcm9wXSkpIHtcbiAgICAgICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBbLi4uZXh0ZW5kZWRbcHJvcF0sIC4uLm9ialtwcm9wXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmRlZFtwcm9wXSA9IG9ialtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIExvb3AgdGhyb3VnaCBlYWNoIG9iamVjdCBhbmQgY29uZHVjdCBhIG1lcmdlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgIG1lcmdlKG9iamVjdHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGV4dGVuZGVkO1xufTtcblxuLyoqXG4gKiBDbG9uZSBhbiBvYmplY3QsIGFycmF5IG9yIGFueSBwcmltaXRpdmUgdHlwZSBsaWtlIG51bWJlcnMgb3Igc3RyaW5ncy5cbiAqIEBwYXJhbSBkZWVwIElmIHRydWUsIHRoZSBtZXJnZSBiZWNvbWVzIHJlY3Vyc2l2ZSAoYWthLiBkZWVwIGNvcHkpLlxuICogQHBhcmFtIHZhbCBUaGUgdmFsdWUocykgdG8gY2xvbmVcbiAqL1xuZXhwb3J0IGNvbnN0IGNsb25lID0gPFQgPSBhbnk+KGRlZXA6IGJvb2xlYW4sIHZhbDogVCk6IFQgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgaWYgKGRlZXApIHtcbiAgICAgIHJldHVybiAodmFsIGFzIGFueSkubWFwKCh4OiBhbnkpID0+IGNsb25lPGFueT4odHJ1ZSwgeCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKHZhbCBhcyBhbnkpLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7IGRlZXAgfSwge30sIHZhbCk7XG4gIH1cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGxpa2UgbnVtYmVycyBhbmQgc3RyaW5ncyBhcmUgY29waWVkIGJ5IGRlZmF1bHRcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjbGFzcyBgXCJ0aGF0XCJgXG4gKiBAcGFyYW0gdGhhdFxuICovXG5leHBvcnQgY29uc3QgY2xhc3NPZiA9ICh0aGF0OiBhbnkpID0+IHtcbiAgcmV0dXJuIHRoYXQuY29uc3RydWN0b3I7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgaW50ZXJuYWwgcmliYSBwcm9wZXJ0aWVzIGZyb20gYW4gb2JqZWN0XG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJuIENsZWFyZWQgbmV3IG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgY2xlYXJPYmpGcm9tUmliYSA9IChcbiAgb2JqOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgQXJyYXk8YW55PlxuKTogUmVjb3JkPHN0cmluZywgYW55PiB8IEFycmF5PGFueT4gPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIChvYmogYXMgQXJyYXk8YW55PikubWFwKCh4OiBhbnkpID0+XG4gICAgICBpc09iamVjdCh4KSA/IGNsZWFyT2JqRnJvbVJpYmEoeCkgOiB4XG4gICAgKTtcbiAgfVxuICBjb25zdCBuZXdPYmo6IGFueSA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoa2V5ICE9PSBcIl9fcnZcIikge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICBuZXdPYmpba2V5XSA9IGNsZWFyT2JqRnJvbVJpYmEob2JqW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld09iajtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBIYXNoIGZyb20gc3RyaW5nXG4gKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmdcbiAqIEByZXR1cm5zIGhhc2ggY29kZVxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzYxNjQ4NFxuICovXG5leHBvcnQgY29uc3QgaGFzaENvZGUgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBsZXQgaTogbnVtYmVyO1xuICBsZXQgY2hyOiBudW1iZXI7XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNociA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaHI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gaGFzaDtcbn07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9kZWZlcnJlZC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGltZW91dC1wcm9taXNlLmpzXCI7XG4iLCIvKipcbiAqIGdldCBwYXJhbSBmcm9tIGhhc2hcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFVybFBhcmFtZXRlciA9IChuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB7XG4gIGlmICghdXJsKSB7XG4gICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIH1cbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1tcXF1dL2csIFwiXFxcXCQmXCIpO1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXCJbPyZdXCIgKyBuYW1lICsgXCIoPShbXiYjXSopfCZ8I3wkKVwiKTtcbiAgY29uc3QgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKCFyZXN1bHRzWzJdKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufTtcblxuLyoqXG4gKiBnZXQgbG9jYXRpb24gb2JqZWN0IG9mcGF0aCBvciBhZGRyZXNzIGJhclxuICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MzY5NzAvMTQ2NTkxOVxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgbCA9IGdldExvY2F0aW9uKFwiaHR0cDovL2V4YW1wbGUuY29tOjMwMDAvcGF0aG5hbWUvP3NlYXJjaD10ZXN0I2hhc2hcIik7XG4gKiA9PlxuICogbC5wcm90b2NvbDsgLy8gPT4gXCJodHRwOlwiXG4gKiBsLmhvc3Q7ICAgICAvLyA9PiBcImV4YW1wbGUuY29tOjMwMDBcIlxuICogbC5ob3N0bmFtZTsgLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gKiBsLnBvcnQ7ICAgICAvLyA9PiBcIjMwMDBcIlxuICogbC5wYXRobmFtZTsgLy8gPT4gXCIvcGF0aG5hbWUvXCJcbiAqIGwuaGFzaDsgICAgIC8vID0+IFwiI2hhc2hcIlxuICogbC5zZWFyY2g7ICAgLy8gPT4gXCI/c2VhcmNoPXRlc3RcIlxuICogbC5vcmlnaW47ICAgLy8gPT4gXCJodHRwOi8vZXhhbXBsZS5jb206MzAwMFwiXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRMb2NhdGlvbiA9ICh1cmw/OiBzdHJpbmcpOiBMb2NhdGlvbiA9PiB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbjtcbiAgfVxuICBjb25zdCBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIGwuaHJlZiA9IHVybDtcbiAgcmV0dXJuIGwgYXMgYW55IGFzIExvY2F0aW9uO1xufTtcblxuLyoqXG4gKiBJZiB0aGUgd2ViYXBwcyB1cmwgaXMgaHR0cHM6Ly9teXN1cGVyc2l0ZS5vcmcgYW5kIHRoZSB1cmwgaXMgaHR0cHM6Ly9teXN1cGVyc2l0ZS5vcmcvc3VicGFnZT9zZWFyY2g9dGVzdFxuICogdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gL3N1YnBhZ2U/c2VhcmNoPXRlc3RcbiAqIElmIHRoZSB1cmwgaXMgaHR0cHM6Ly9hbm90aGVyc2l0ZS5vcmcvc3VicGFnZT9zZWFyY2g9dGVzdCB0aGlzIG1ldGhvZCB3aWxsIHJldHVybiBodHRwczovL2Fub3RoZXJzaXRlLm9yZy9zdWJwYWdlP3NlYXJjaD10ZXN0XG4gKiBAcGFyYW0gdXJsXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVVcmwgPSAoXG4gIHVybD86IHN0cmluZ1xuKTogeyB1cmw6IHN0cmluZzsgbG9jYXRpb246IExvY2F0aW9uIH0gPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHVybCk7XG4gIGNvbnN0IGN1ckhvc3RuYW1lID0gZ2V0TG9jYXRpb24oKS5ob3N0bmFtZTtcbiAgaWYgKGxvY2F0aW9uLmhvc3RuYW1lID09PSBjdXJIb3N0bmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICB1cmw6IGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCxcbiAgICAgIGxvY2F0aW9uLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogZ2V0VXJsKHVybCksXG4gICAgICBsb2NhdGlvbixcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBmdWxsIHVybFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gY3VycmVudFVybFxuICovXG5leHBvcnQgY29uc3QgZ2V0VXJsID0gKHVybD86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odXJsKTtcbiAgcmV0dXJuIChcbiAgICBsb2NhdGlvbi5wcm90b2NvbCArXG4gICAgXCIvL1wiICtcbiAgICBsb2NhdGlvbi5ob3N0ICtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSArXG4gICAgbG9jYXRpb24uc2VhcmNoICtcbiAgICBsb2NhdGlvbi5oYXNoXG4gICk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBvbiB0aGUgcm91dGVcbiAqL1xuZXhwb3J0IGNvbnN0IG9uUm91dGUgPSAoY2hlY2tVcmw/OiBzdHJpbmcsIGNvbXBhcmVRdWVyeVBhcmFtID0gZmFsc2UpID0+IHtcbiAgaWYgKGNoZWNrVXJsKSB7XG4gICAgY29uc3QgbG9jYXRpb24xID0gZ2V0TG9jYXRpb24oKTtcbiAgICBjb25zdCBsb2NhdGlvbjIgPSBnZXRMb2NhdGlvbihjaGVja1VybCk7XG5cbiAgICBpZiAoY29tcGFyZVF1ZXJ5UGFyYW0pIHtcbiAgICAgIC8vIFRPRE8gaWdub3JlIHF1ZXJ5IHBhcmFtZXRlciBvcmRlclxuICAgICAgaWYgKGxvY2F0aW9uMS5zZWFyY2ggIT09IGxvY2F0aW9uMi5zZWFyY2gpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBsb2NhdGlvbjEuaG9zdG5hbWUgPT09IGxvY2F0aW9uMi5ob3N0bmFtZSAmJlxuICAgICAgbG9jYXRpb24xLnBhdGhuYW1lID09PSBsb2NhdGlvbjIucGF0aG5hbWVcbiAgICApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgbG9jYXRpb24gdXJsIHN0YXRzIHdpdGggYSB1cmwgb3IgaXMgZXF1YWxcbiAqL1xuZXhwb3J0IGNvbnN0IG9uUGFyZW50Um91dGUgPSAoY2hlY2tVcmw/OiBzdHJpbmcpID0+IHtcbiAgaWYgKGNoZWNrVXJsKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbigpO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgY29uc3QgaG9zdG5hbWUgPSBsb2NhdGlvbi5ob3N0bmFtZTtcbiAgICBjb25zdCBjaGVja0xvY2F0aW9uID0gZ2V0TG9jYXRpb24oY2hlY2tVcmwpO1xuICAgIGNvbnN0IGNoZWNrUGF0aG5hbWUgPSBjaGVja0xvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGNvbnN0IGNoZWNrSG9zdG5hbWUgPSBjaGVja0xvY2F0aW9uLmhvc3RuYW1lO1xuICAgIHJldHVybiBob3N0bmFtZSA9PT0gY2hlY2tIb3N0bmFtZSAmJiBwYXRobmFtZS5zdGFydHNXaXRoKGNoZWNrUGF0aG5hbWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYW4gdXJsLCByZXR1cm4gaXQgd2l0aG91dCB0aGUgaGFzaFxuICpcbiAqIEBwYXJhbSB1cmxcbiAqIEByZXR1cm4gbmV3Q2xlYW5VcmxcbiAqL1xuZXhwb3J0IGNvbnN0IGNsZWFuTGluayA9ICh1cmw6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgvIy4qLywgXCJcIik7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgcG9ydCBudW1iZXIgbm9ybWFsaXplZCwgZXZlbnR1YWxseSB5b3UgY2FuIHBhc3MgYSBzdHJpbmcgdG8gYmUgbm9ybWFsaXplZC5cbiAqXG4gKiBAcGFyYW0gcFxuICogQHJldHVybiBwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQb3J0ID0gKHA/OiBzdHJpbmcsIHVybD86IHN0cmluZykgPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHVybCk7XG4gIGNvbnN0IHBvcnQgPSB0eXBlb2YgcCAhPT0gXCJ1bmRlZmluZWRcIiA/IHAgOiBsb2NhdGlvbi5wb3J0O1xuICBjb25zdCBwcm90b2NvbCA9IGxvY2F0aW9uLnByb3RvY29sO1xuXG4gIGlmIChwb3J0ICE9PSBcIlwiKSB7XG4gICAgcmV0dXJuIE51bWJlcihwb3J0KTtcbiAgfVxuICBpZiAocHJvdG9jb2wgPT09IFwiaHR0cDpcIikge1xuICAgIHJldHVybiA4MDtcbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gXCJodHRwczpcIikge1xuICAgIHJldHVybiA0NDM7XG4gIH1cbn07XG5cbi8qKlxuICogVGVzdCBpZiB1cmwgaXMgYWJzb2x1dGUgb3IgcmVsYXRpdmVcbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NzA5ODQ2LzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQWJzb2x1dGVVcmwgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgaXNQcm90b2tvbGwgPSBuZXcgUmVnRXhwKFwiXig/OlthLXpdKzopPy8vXCIsIFwiaVwiKTtcbiAgY29uc3QgaXNBYnNvbHV0ZSA9XG4gICAgaXNQcm90b2tvbGwudGVzdCh1cmwpIHx8XG4gICAgdXJsLnN0YXJ0c1dpdGgoXCJtYWlsdG86XCIpIHx8XG4gICAgdXJsLnN0YXJ0c1dpdGgoXCJ0ZWw6XCIpIHx8XG4gICAgdXJsLnN0YXJ0c1dpdGgoXCJmYXg6XCIpO1xuICByZXR1cm4gaXNBYnNvbHV0ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0V4dGVybmFsVXJsID0gKGFic29sdXRlVXJsOiBzdHJpbmcpID0+IHtcbiAgaWYgKGlzQWJzb2x1dGVVcmwoYWJzb2x1dGVVcmwpKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbigpO1xuICAgIGNvbnN0IGhvc3QgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIGxldCBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICBpZiAoYWJzb2x1dGVVcmwuc3RhcnRzV2l0aChob3N0KSkge1xuICAgICAgaXNFeHRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaXNFeHRlcm5hbDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNJbnRlcm5hbFVybCA9ICh1cmw6IHN0cmluZykgPT4ge1xuICByZXR1cm4gIWlzRXh0ZXJuYWxVcmwodXJsKTtcbn07XG5cbi8qKlxuICogR2V0IGhhc2ggZnJvbSBhZGRyZXNzIGJhciBvciB1cmwgaWYgc2V0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRIYXNoID0gKHVybD86IHN0cmluZykgPT4ge1xuICByZXR1cm4gZ2V0TG9jYXRpb24odXJsKS5oYXNoO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgaGFzaCBmcm9tIGFkZHJlc3MgYmFyXG4gKi9cbmV4cG9ydCBjb25zdCB1cGRhdGVIYXNoID0gKGhhc2g6IHN0cmluZykgPT4ge1xuICByZXR1cm4gKHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBoYXNoIGZyb20gYWRkcmVzcyBiYXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZUhhc2ggPSAoKSA9PiB7XG4gIHJldHVybiBoaXN0b3J5LnB1c2hTdGF0ZShcbiAgICBcIlwiLFxuICAgIGRvY3VtZW50LnRpdGxlLFxuICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcbiAgKTtcbn07XG4iLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJ3cmFwcGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiaWNvblxcXCI+PC9kaXY+IDxwPkNsaWNrIHRvIGxvYWQgZXhhbXBsZTwvcD4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJjb2wtMTIgcHgtMFxcXCI+IDxkaXYgcnYtc2Nyb2xsYmFyLWRyYWdnYWJsZSByb2xlPVxcXCJ0YWJsaXN0XFxcIiBjbGFzcz1cXFwidGFiLWxpc3QgbmF2IG5hdi10YWJzIG5hdi10YWJzLXVuZGVybGluZSBkLWZsZXggZmxleC1zY3JvbGxiYXIteC1hdXRvIHNjcm9sbGJhci15LWhpZGRlbiBzY3JvbGxiYXItcHJpbWFyeS1vbi1ob3ZlclxcXCIgcm9sZT1cXFwidGFibGlzdFxcXCI+IDxkaXYgcm9sZT1cXFwidGFiXFxcIiBjbGFzcz1cXFwiZmxleC1ncm93LTEgbmF2LWl0ZW0gbmF2LWxpbmsgZC1pbmxpbmUtYmxvY2sgdGV4dC1ub3dyYXAgdGV4dC1jZW50ZXJcXFwiIHJ2LWVhY2gtdGFiPVxcXCJpdGVtc1xcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJ0YWIuYWN0aXZlXFxcIiBydi1hZGQtY2xhc3M9XFxcIid0YWItdGl0bGUtJyB8IGFwcGVuZCB0YWIuaGFuZGxlXFxcIiBydi1pZD1cXFwiJ3RhYi10aXRsZS0nIHwgYXBwZW5kIGhhbmRsZSB8IGFwcGVuZCAnLScgfCBhcHBlbmQgdGFiLmhhbmRsZVxcXCIgcnYtYXJpYS1jb250cm9scz1cXFwiJ3RhYi1jb250ZW50LScgfCBhcHBlbmQgaGFuZGxlIHwgYXBwZW5kICctJyB8IGFwcGVuZCB0YWIuaGFuZGxlXFxcIiBydi1odG1sPVxcXCJ0YWIudGl0bGVcXFwiIHJ2LXRpdGxlPVxcXCJ0YWIudGl0bGVcXFwiIHJ2LW9uLWNsaWNrPVxcXCJhY3RpdmF0ZSB8IGFyZ3MgdGFiXFxcIiBydi1hcmlhLXNlbGVjdGVkPVxcXCJ0YWIuYWN0aXZlXFxcIj48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50IG14LWF1dG9cXFwiPiA8ZGl2IHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIHJ2LWVhY2gtdGFiPVxcXCJpdGVtc1xcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJ0YWIuYWN0aXZlXFxcIiBydi1jbGFzcy1zaG93PVxcXCJ0YWIuYWN0aXZlXFxcIiBydi1hZGQtY2xhc3M9XFxcIid0YWItY29udGVudC0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LWlkPVxcXCIndGFiLWNvbnRlbnQtJyB8IGFwcGVuZCBoYW5kbGUgfCBhcHBlbmQgJy0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LXRlbXBsYXRlPVxcXCJ0YWIuY29udGVudFxcXCIgcnYtYXJpYS1sYWJlbGxlZGJ5PVxcXCIndGFiLXRpdGxlLScgfCBhcHBlbmQgaGFuZGxlIHwgYXBwZW5kICctJyB8IGFwcGVuZCB0YWIuaGFuZGxlXFxcIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8aDIgcnYtdGV4dD1cXFwibmFtZVxcXCI+PC9oMj4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPHNlY3Rpb24gI3NpemVzIGNsYXNzPVxcXCJjb2wtMTJcXFwiPiA8aDM+U2l6ZXM8L2gzPiA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtNCBjb2wtbWQtMiBjb2wteGwtMiBweS0yXFxcIiBydi1lYWNoLXNpemU9XFxcInNpemVzXFxcIj4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLTEyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGZsZXgtcm93XFxcIj4gPGJzNC1pY29uIGNsYXNzPVxcXCJtLTFcXFwiIHJ2LXNyYz1cXFwic3JjXFxcIiBydi1zaXplPVxcXCJzaXplXFxcIiBjb2xvcj1cXFwiYmxhY2tcXFwiPjwvYnM0LWljb24+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLTEyIHRleHQtY2VudGVyXFxcIiBydi10ZXh0PVxcXCJzaXplXFxcIj48L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPHNlY3Rpb24gI2NvbG9ycyBjbGFzcz1cXFwiY29sLTEyXFxcIj4gPGgzPkNvbG9yczwvaDM+IDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC00IGNvbC1tZC0yIGNvbC14bC0yIHB5LTJcXFwiIHJ2LWVhY2gtY29sb3I9XFxcImNvbG9yc1xcXCIgcnYtYWRkLWNsYXNzPVxcXCJjb2xvciB8IHByZXBlbmQgJ2V4YW1wbGUtY29sb3ItJ1xcXCI+IDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC0xMiBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBmbGV4LXJvd1xcXCI+IDxiczQtaWNvbiBjbGFzcz1cXFwibS0xXFxcIiBydi1zcmM9XFxcInNyY1xcXCIgc2l6ZT1cXFwiMzJcXFwiIHJ2LWNvbG9yPVxcXCJjb2xvclxcXCI+PC9iczQtaWNvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtMTIgdGV4dC1jZW50ZXJcXFwiIHJ2LXRleHQ9XFxcImNvbG9yXFxcIj48L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPHNlY3Rpb24gI2RpcmVjdGlvbnMgY2xhc3M9XFxcImNvbC0xMlxcXCI+IDxoMz5EaXJlY3Rpb25zPC9oMz4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLTQgY29sLW1kLTIgY29sLXhsLTIgcHktMlxcXCIgcnYtZWFjaC1kaXJlY3Rpb249XFxcImRpcmVjdGlvbnNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtMTIgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZmxleC1yb3dcXFwiPiA8YnM0LWljb24gY2xhc3M9XFxcIm0tMVxcXCIgcnYtc3JjPVxcXCJzcmNcXFwiIHNpemU9XFxcIjMyXFxcIiBydi1kaXJlY3Rpb249XFxcImRpcmVjdGlvblxcXCI+PC9iczQtaWNvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtMTIgdGV4dC1jZW50ZXJcXFwiIHJ2LXRleHQ9XFxcImRpcmVjdGlvblxcXCI+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvc2VjdGlvbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxzZWN0aW9uICNkaXJlY3Rpb25zIGNsYXNzPVxcXCJjb2wtMTJcXFwiPiA8aDM+RXhhbXBsZTwvaDM+IDxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWh0bWxcXFwiPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1odG1sXFxcIiBydi1odG1sPVxcXCJleGFtcGxlXFxcIj48L2NvZGU+PC9wcmU+IDwvc2VjdGlvbj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8bmF2IGNsYXNzPVxcXCJuYXZcXFwiIHJ2LWFkZC1jbGFzcz1cXFwibGlua2xpc3QuaGFuZGxlXFxcIiBydi1jbGFzcy1uYXYtcGlsbHM9XFxcInBpbGxzXFxcIiBydi1jbGFzcy13LTEwMD1cXFwidmVydGljYWxcXFwiIHJ2LWNsYXNzLWZsZXgtY29sdW1uPVxcXCJ2ZXJ0aWNhbFxcXCIgcnYtY2xhc3MtZmxleC1yb3c9XFxcInZlcnRpY2FsIHwgbm90XFxcIj4gPGRpdiBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtMFxcXCIgcnYtZWFjaC1saW5rPVxcXCJsaW5rbGlzdC5saW5rc1xcXCI+IDxhIHJ2LWlmPVxcXCJsaW5rLmNvbGxhcHNlYWJsZSB8IG5vdFxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIiBydi1jbGFzcy1hY3RpdmU9XFxcImxpbmsuYWN0aXZlXFxcIiBydi1yb3V0ZS1jbGFzcy1hY3RpdmU9XFxcImxpbmsudXJsXFxcIiBydi1yb3V0ZT1cXFwibGluay51cmxcXFwiIHJ2LWhyZWY9XFxcImxpbmsudXJsXFxcIj4gPHNwYW4+e2xpbmsudGl0bGV9PC9zcGFuPiA8L2E+IDxkaXYgcnYtaWY9XFxcImxpbmsuY29sbGFwc2VhYmxlXFxcIiBjbGFzcz1cXFwibmF2LWxpbmsgY3Vyc29yLXBvaW50ZXIgZHJvcGRvd24tdG9nZ2xlXFxcIiBydi1vbi1jbGljaz1cXFwidG9nZ2xlIHwgYXJncyBsaW5rXFxcIj4gPHNwYW4+e2xpbmsudGl0bGV9PC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtMVxcXCIgcnYtaGlkZT1cXFwibGluay5jb2xsYXBzZWRcXFwiIHJ2LWVhY2gtc3VibGluaz1cXFwibGluay5saW5rc1xcXCI+IDxhIHJ2LWlmPVxcXCJzdWJsaW5rLmNvbGxhcHNlYWJsZSB8IG5vdFxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIiBydi1hZGQtY2xhc3M9XFxcInN1YmxpbmsubGV2ZWwgfCBwcmVwZW5kICdsZXZlbC0nXFxcIiBydi1jbGFzcy1hY3RpdmU9XFxcInN1YmxpbmsuYWN0aXZlXFxcIiBydi1yb3V0ZS1jbGFzcy1hY3RpdmU9XFxcInN1YmxpbmsudXJsXFxcIiBydi1yb3V0ZT1cXFwic3VibGluay51cmxcXFwiIHJ2LWhyZWY9XFxcInN1YmxpbmsudXJsXFxcIj4gPHNwYW4+e3N1YmxpbmsudGl0bGV9PC9zcGFuPiA8L2E+IDxkaXYgcnYtaWY9XFxcInN1YmxpbmsuY29sbGFwc2VhYmxlXFxcIiBjbGFzcz1cXFwibmF2LWxpbmsgY3Vyc29yLXBvaW50ZXIgZHJvcGRvd24tdG9nZ2xlXFxcIiBydi1vbi1jbGljaz1cXFwidG9nZ2xlIHwgYXJncyBzdWJsaW5rXFxcIj4gPHNwYW4+e3N1YmxpbmsudGl0bGV9PC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtMlxcXCIgcnYtaGlkZT1cXFwic3VibGluay5jb2xsYXBzZWRcXFwiIHJ2LWVhY2gtc3Vic3VibGluaz1cXFwic3VibGluay5saW5rc1xcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbGlua1xcXCIgcnYtYWRkLWNsYXNzPVxcXCJzdWJzdWJsaW5rLmxldmVsIHwgcHJlcGVuZCAnbGV2ZWwtJ1xcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJzdWJzdWJsaW5rLmFjdGl2ZVxcXCIgcnYtcm91dGUtY2xhc3MtYWN0aXZlPVxcXCJzdWJzdWJsaW5rLnVybFxcXCIgcnYtcm91dGU9XFxcInN1YnN1YmxpbmsudXJsXFxcIiBydi1ocmVmPVxcXCJzdWJzdWJsaW5rLnVybFxcXCI+IDxzcGFuPntzdWJzdWJsaW5rLnRpdGxlfTwvc3Bhbj4gPC9hPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L25hdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxiczQtdGFicyBvcHRpb24tdGFicy1hbmdsZT1cXFwidmVydGljYWxcXFwiIHRhYi0wLXRpdGxlPVxcXCJUYWIgMFxcXCIgdGFiLTAtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgMDwvc3Ryb25nPjwvcD5cXFwiIHRhYi0xLXRpdGxlPVxcXCJUYWIgMVxcXCIgdGFiLTEtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgMTwvc3Ryb25nPjwvcD5cXFwiIHRhYi0yLXRpdGxlPVxcXCJUYWIgMlxcXCIgdGFiLTItY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgMjwvc3Ryb25nPjwvcD5cXFwiIHRhYi0zLXRpdGxlPVxcXCJUYWIgM1xcXCIgdGFiLTMtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgMzwvc3Ryb25nPjwvcD5cXFwiIHRhYi00LXRpdGxlPVxcXCJUYWIgNFxcXCIgdGFiLTQtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgNDwvc3Ryb25nPjwvcD5cXFwiIHRhYi01LXRpdGxlPVxcXCJUYWIgNVxcXCIgdGFiLTUtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgNTwvc3Ryb25nPjwvcD5cXFwiIHRhYi02LXRpdGxlPVxcXCJUYWIgNlxcXCIgdGFiLTYtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgNjwvc3Ryb25nPjwvcD5cXFwiIHRhYi03LXRpdGxlPVxcXCJUYWIgN1xcXCIgdGFiLTctY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgNzwvc3Ryb25nPjwvcD5cXFwiIHRhYi04LXRpdGxlPVxcXCJUYWIgOFxcXCIgdGFiLTgtY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgODwvc3Ryb25nPjwvcD5cXFwiIHRhYi05LXRpdGxlPVxcXCJUYWIgOVxcXCIgdGFiLTktY29udGVudD1cXFwiPHAgY2xhc3M9J215LTMnPkhlbGxvIGZyb20gPHN0cm9uZz50YWIgOTwvc3Ryb25nPjwvcD5cXFwiPjwvYnM0LXRhYnM+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8YnM0LXRhYnM+IDx0ZW1wbGF0ZSB0aXRsZT1cXFwiVGFiIDBcXFwiPiA8aW1nIGNsYXNzPVxcXCJpbWctZmx1aWQgbXktM1xcXCIgc3JjPVxcXCJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTUwLzdjMDBiNS9GRkZGRkY/dGV4dD1UYWIlMjAwXFxcIiBhbHQ9XFxcIlRhYiAwXFxcIj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHRpdGxlPVxcXCJUYWIgMVxcXCI+IDxpbWcgY2xhc3M9XFxcImltZy1mbHVpZCBteS0zXFxcIiBzcmM9XFxcImh0dHBzOi8vdmlhLnBsYWNlaG9sZGVyLmNvbS8xNTAvMDBiNTZhL0ZGRkZGRj90ZXh0PVRhYiUyMDFcXFwiIGFsdD1cXFwiVGFiIDFcXFwiPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgdGl0bGU9XFxcIlRhYiAyXFxcIj4gPGltZyBjbGFzcz1cXFwiaW1nLWZsdWlkIG15LTNcXFwiIHNyYz1cXFwiaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzE1MC8wMDFmM2YvRkZGRkZGP3RleHQ9VGFiJTIwMlxcXCIgYWx0PVxcXCJUYWIgMlxcXCI+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB0aXRsZT1cXFwiVGFiIDNcXFwiPiA8aW1nIGNsYXNzPVxcXCJpbWctZmx1aWQgbXktM1xcXCIgc3JjPVxcXCJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTUwLzAwNzREOS9GRkZGRkY/dGV4dD1UYWIlMjAzXFxcIiBhbHQ9XFxcIlRhYiAzXFxcIj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHRpdGxlPVxcXCJUYWIgNFxcXCI+IDxpbWcgY2xhc3M9XFxcImltZy1mbHVpZCBteS0zXFxcIiBzcmM9XFxcImh0dHBzOi8vdmlhLnBsYWNlaG9sZGVyLmNvbS8xNTAvN0ZEQkZGL0ZGRkZGRj90ZXh0PVRhYiUyMDRcXFwiIGFsdD1cXFwiVGFiIDRcXFwiPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgdGl0bGU9XFxcIlRhYiA1XFxcIj4gPGltZyBjbGFzcz1cXFwiaW1nLWZsdWlkIG15LTNcXFwiIHNyYz1cXFwiaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzE1MC8zOUNDQ0MvRkZGRkZGP3RleHQ9VGFiJTIwNVxcXCIgYWx0PVxcXCJUYWIgNVxcXCI+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB0aXRsZT1cXFwiVGFiIDZcXFwiPiA8aW1nIGNsYXNzPVxcXCJpbWctZmx1aWQgbXktM1xcXCIgc3JjPVxcXCJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTUwLzNEOTk3MC9GRkZGRkY/dGV4dD1UYWIlMjA2XFxcIiBhbHQ9XFxcIlRhYiA2XFxcIj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHRpdGxlPVxcXCJUYWIgN1xcXCI+IDxpbWcgY2xhc3M9XFxcImltZy1mbHVpZCBteS0zXFxcIiBzcmM9XFxcImh0dHBzOi8vdmlhLnBsYWNlaG9sZGVyLmNvbS8xNTAvMkVDQzQwL0ZGRkZGRj90ZXh0PVRhYiUyMDdcXFwiIGFsdD1cXFwiVGFiIDdcXFwiPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgdGl0bGU9XFxcIlRhYiA4XFxcIj4gPGltZyBjbGFzcz1cXFwiaW1nLWZsdWlkIG15LTNcXFwiIHNyYz1cXFwiaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzE1MC9GRjg1MUIvRkZGRkZGP3RleHQ9VGFiJTIwOFxcXCIgYWx0PVxcXCJUYWIgOFxcXCI+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB0aXRsZT1cXFwiVGFiIDlcXFwiPiA8aW1nIGNsYXNzPVxcXCJpbWctZmx1aWQgbXktM1xcXCIgc3JjPVxcXCJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTUwLzg1MTQ0Yi9GRkZGRkY/dGV4dD1UYWIlMjA5XFxcIiBhbHQ9XFxcIlRhYiA5XFxcIj4gPC90ZW1wbGF0ZT4gPC9iczQtdGFicz4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxuYXY+IDxidXR0b24gcnYtb24tY2xpY2s9XFxcInB1c2hcXFwiPlB1c2g8L2J1dHRvbj4gPGJ1dHRvbiBydi1vbi1jbGljaz1cXFwicG9wXFxcIj5Qb3A8L2J1dHRvbj4gPGJ1dHRvbiBydi1vbi1jbGljaz1cXFwic2hpZnRcXFwiPlNoaWZ0PC9idXR0b24+IDxidXR0b24gcnYtb24tY2xpY2s9XFxcInVuc2hpZnRcXFwiPlVuc2hpZnQ8L2J1dHRvbj4gPGJ1dHRvbiBydi1vbi1jbGljaz1cXFwic3BsaWNlXFxcIj5TcGxpY2U8L2J1dHRvbj4gPGJ1dHRvbiBydi1vbi1jbGljaz1cXFwic29ydFxcXCI+U29ydDwvYnV0dG9uPiA8YnV0dG9uIHJ2LW9uLWNsaWNrPVxcXCJyZXNldFxcXCI+UmVzZXQ8L2J1dHRvbj4gPC9uYXY+IDxzZWN0aW9uPiA8ZGl2IHJ2LWVhY2gtaXRlbT1cXFwiaXRlbXNcXFwiPiA8ZGl2Pkl0ZW0geyAlaXRlbSUgfSAvIHsgaXRlbS5uYW1lIH08L2Rpdj4gPC9kaXY+IDwvc2VjdGlvbj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgY2xhc3M9XFxcInJvdyBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBkLWZsZXggZmxleC1ub3dyYXAgaC0xMDBcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wgYmctbGlnaHQgdGV4dC1kYXJrIHRvdWNoLXpvbmVcXFwiIHJ2LXNjcm9sbC1ldmVudHMgcnYtc2Nyb2xsYmFyLWRyYWdnYWJsZSBydi1vbi1zY3JvbGxzdGFydD1cXFwibG9nIHwgYXJncyAnc2Nyb2xsc3RhcnQnXFxcIiBydi1vbi1zY3JvbGxlbmRlZD1cXFwibG9nIHwgYXJncyAnc2Nyb2xsZW5kZWQnXFxcIiBydi1vbi1zY3JvbGxsZWZ0PVxcXCJsb2cgfCBhcmdzICdzY3JvbGxsZWZ0J1xcXCIgcnYtb24tc2Nyb2xscmlnaHQ9XFxcImxvZyB8IGFyZ3MgJ3Njcm9sbHJpZ2h0J1xcXCIgcnYtb24tc2Nyb2xsdXA9XFxcImxvZyB8IGFyZ3MgJ3Njcm9sbHVwJ1xcXCIgcnYtb24tc2Nyb2xsZG93bj1cXFwibG9nIHwgYXJncyAnc2Nyb2xsZG93bidcXFwiIHJ2LW9uLXNjcm9sbGluZz1cXFwibG9nIHwgYXJncyAnc2Nyb2xsaW5nJ1xcXCIgcnYtb24tc2Nyb2xsZW5kPVxcXCJsb2cgfCBhcmdzICcobmF0aXZlIHNjcm9sbGVuZCknXFxcIiBydi1vbi1zY3JvbGw9XFxcImxvZyB8IGFyZ3MgJyhuYXRpdmUgc2Nyb2xsKSdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ0b3VjaC16b25lLWJhY2tncm91bmQgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIGgtMTAwIHctMTAwXFxcIj5TY3JvbGwgaGVyZTwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ0b3VjaC1zcGFjZVxcXCI+PC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtMTIgY29sLW1kLTYgY29sLWxnLTQgY29sLXhsLTQgYmctZGFyayB0ZXh0LWxpZ2h0IHB5LTMgaC0xMDAgY29uc29sZVxcXCI+IDxwIGNsYXNzPVxcXCJsb2dcXFwiPiA8c3BhbiBjbGFzcz1cXFwibm8tZGF0YVxcXCI+U3RhcnQgdG91Y2hpbmcgdG8gc2VuZCBkYXRhIHRvIHRoaXMgY29uc29sZS48L3NwYW4+IDwvcD4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwicm93IGZsZXgtY29sdW1uIGZsZXgtbWQtcm93IGQtZmxleCBmbGV4LW5vd3JhcCBoLTEwMFxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC1tZC03IGNvbC1sZy04IGNvbC14bC05IGJnLWxpZ2h0IHRleHQtZGFyayBweS0zIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciB0b3VjaC16b25lXFxcIiBydi10b3VjaC1ldmVudHMgcnYtb24tdGFwc3RhcnQ9XFxcImxvZyB8IGFyZ3MgJ3RhcHN0YXJ0J1xcXCIgcnYtb24tdGFwZW5kPVxcXCJsb2cgfCBhcmdzICd0YXBlbmQnXFxcIiBydi1vbi10YXA9XFxcImxvZyB8IGFyZ3MgJ3RhcCdcXFwiIHJ2LW9uLXRhcDI9XFxcImxvZyB8IGFyZ3MgJ3RhcDInXFxcIiBydi1vbi10YXAzPVxcXCJsb2cgfCBhcmdzICd0YXAzJ1xcXCIgcnYtb24tc2luZ2xldGFwPVxcXCJsb2cgfCBhcmdzICdzaW5nbGV0YXAnXFxcIiBydi1vbi1kb3VibGV0YXA9XFxcImxvZyB8IGFyZ3MgJ2RvdWJsZXRhcCdcXFwiIHJ2LW9uLXRhcGhvbGQ9XFxcImxvZyB8IGFyZ3MgJ3RhcGhvbGQnXFxcIiBydi1vbi1zd2lwZT1cXFwibG9nIHwgYXJncyAnc3dpcGUnXFxcIiBydi1vbi1zd2lwZXVwPVxcXCJsb2cgfCBhcmdzICdzd2lwZXVwJ1xcXCIgcnYtb24tc3dpcGVyaWdodD1cXFwibG9nIHwgYXJncyAnc3dpcGVyaWdodCdcXFwiIHJ2LW9uLXN3aXBlZG93bj1cXFwibG9nIHwgYXJncyAnc3dpcGVkb3duJ1xcXCIgcnYtb24tc3dpcGVsZWZ0PVxcXCJsb2cgfCBhcmdzICdzd2lwZWxlZnQnXFxcIiBydi1vbi1zd2lwZWVuZD1cXFwibG9nIHwgYXJncyAnc3dpcGVlbmQnXFxcIj4gPHNwYW4+VG91Y2ggaGVyZTwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1tZC01IGNvbC1sZy00IGNvbC14bC0zIGJnLWRhcmsgdGV4dC1saWdodCBweS0zIGgtMTAwIGNvbnNvbGVcXFwiPiA8cCBjbGFzcz1cXFwibG9nXFxcIj4gPHNwYW4gY2xhc3M9XFxcIm5vLWRhdGFcXFwiPlN0YXJ0IHRvdWNoaW5nIHRvIHNlbmQgZGF0YSB0byB0aGlzIGNvbnNvbGUuPC9zcGFuPiA8L3A+IDwvZGl2PiA8L2Rpdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxpMThuLXN3aXRjaGVyPiA8cD48c3Ryb25nIHJ2LWkxOG4tdGV4dD1cXFwiJ2V4YW1wbGVzLmkxOG4uc3dpdGNoX2xhbmd1YWdlJ1xcXCI+PC9zdHJvbmc+PC9wPiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXBcXFwiIHJvbGU9XFxcImdyb3VwXFxcIj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNlY29uZGFyeSB0ZXh0LXVwcGVyY2FzZVxcXCIgcnYtZWFjaC1sYW5nY29kZT1cXFwibGFuZ2NvZGVzXFxcIiBydi10ZXh0PVxcXCJsYW5nY29kZS5jb2RlXFxcIiBydi1vbi1jbGljaz1cXFwic3dpdGNoIHwgYXJncyBsYW5nY29kZVxcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJsYW5nY29kZS5hY3RpdmVcXFwiPkxlZnQ8L2J1dHRvbj4gPC9kaXY+IDwvaTE4bi1zd2l0Y2hlcj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1yb3cgbXktNVxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC0xMlxcXCI+IDxoMSBydi1pMThuLXRleHQ9XFxcIidleGFtcGxlcy5uZXdzbGV0dGVyLnRpdGxlJ1xcXCI+PC9oMT4gPHAgcnYtaTE4bi1odG1sPVxcXCInZXhhbXBsZXMubmV3c2xldHRlci5kZXNjcmlwdGlvbl9odG1sJ1xcXCI+PC9wPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHJ2LWkxOG4tdmFsdWU9XFxcIidleGFtcGxlcy5uZXdzbGV0dGVyLmlucHV0X3ZhbHVlJ1xcXCIvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHJ2LWkxOG4tcGxhY2Vob2xkZXI9XFxcIidleGFtcGxlcy5uZXdzbGV0dGVyLnBsYWNlaG9sZGVyX2xhc3RfbmFtZSdcXFwiLz4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwiYWNjb3JkaW9uXFxcIj4gPGRpdiBjbGFzcz1cXFwiY2FyZFxcXCIgcnYtZWFjaC1pdGVtPVxcXCJpdGVtc1xcXCI+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rIGNhcmQtaGVhZGVyIGQtZmxleFxcXCIgcnYtb24tY2xpY2s9XFxcInRvZ2dsZSB8IGFyZ3MgaXRlbSAlaXRlbSVcXFwiIHJ2LWFyaWEtZXhwYW5kZWQ9XFxcIml0ZW0uc2hvd1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJjYXJkLWhlYWRlci10ZXh0IG1yLWF1dG9cXFwiIHJ2LWh0bWw9XFxcIml0ZW0udGl0bGVcXFwiPjwvc3Bhbj4gPGJzNC1pY29uIGNsYXNzPVxcXCJtbC1hdXRvXFxcIiBydi1zaG93PVxcXCJjb2xsYXBzZUljb25TcmNcXFwiIHJ2LXNyYz1cXFwiY29sbGFwc2VJY29uU3JjXFxcIiBydi1zaXplPVxcXCJjb2xsYXBzZUljb25TaXplXFxcIiBydi1kaXJlY3Rpb249XFxcIml0ZW0uaWNvbkRpcmVjdGlvblxcXCI+PC9iczQtaWNvbj4gPC9idXR0b24+IDxkaXYgY2xhc3M9XFxcImNvbGxhcHNlXFxcIiBydi1kYXRhLWluZGV4PVxcXCIlaXRlbSVcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHlcXFwiIHJ2LXRlbXBsYXRlPVxcXCJpdGVtLmNvbnRlbnRcXFwiPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwicGlja2VyX2Fycm93XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwicGlja2VyX2h1ZSBwaWNrZXJfc2xpZGVyXFxcIiBydi1zdHlsZS1jb2xvcj1cXFwiY3NzSHNsXFxcIj4gPGRpdiBjbGFzcz1cXFwicGlja2VyX3NlbGVjdG9yXFxcIj48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInBpY2tlcl9zbFxcXCIgcnYtc3R5bGUtYmFja2dyb3VuZC1jb2xvcj1cXFwiY3NzSHVlXFxcIiBydi1zdHlsZS1jb2xvcj1cXFwiY3NzSHNsXFxcIj4gPGRpdiBjbGFzcz1cXFwicGlja2VyX3NlbGVjdG9yXFxcIj48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInBpY2tlcl9hbHBoYSBwaWNrZXJfc2xpZGVyXFxcIiBydi1zaG93PVxcXCJhbHBoYVxcXCIgcnYtc3R5bGUtYmFja2dyb3VuZC1pbWFnZT1cXFwiYWxwaGFCZ1xcXCI+IDxkaXYgY2xhc3M9XFxcInBpY2tlcl9zZWxlY3RvclxcXCI+PC9kaXY+IDwvZGl2PiA8aW5wdXQgY2xhc3M9XFxcInBpY2tlcl9lZGl0b3IgZm9ybS1jb250cm9sXFxcIiBydi1zaG93PVxcXCJlZGl0b3JcXFwiIGFyaWEtbGFiZWw9XFxcIlR5cGUgYSBjb2xvciBuYW1lIG9yIGhleCB2YWx1ZVxcXCIgcnYtdmFsdWU9XFxcImNvbG9yXFxcIi8+IDxkaXYgY2xhc3M9XFxcInBpY2tlcl9zYW1wbGVcXFwiIHJ2LXN0eWxlLWNvbG9yPVxcXCJjc3NIc2xhXFxcIj48L2Rpdj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzIHBpY2tlcl9kb25lXFxcIiBydi1zaG93PVxcXCJva2F5QnV0dG9uXFxcIj5PazwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRhbmdlciBwaWNrZXJfY2FuY2VsXFxcIiBydi1zaG93PVxcXCJjYW5jZWxCdXR0b25cXFwiPkNhbmNlbDwvYnV0dG9uPiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHVsIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGxpc3QtY29udGVudHMgbGlzdC1jb250ZW50cy1sZXZlbC0xXFxcIj4gPGxpIGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtaXRlbS1sZXZlbC0xXFxcIiBydi1lYWNoLWFuYWNob3I9XFxcImFuY2hvcnNcXFwiPiA8YSBjbGFzcz1cXFwibmF2LWxpbmsgcC0wXFxcIiBydi1ocmVmPVxcXCJhbmFjaG9yLmhyZWZcXFwiIHJ2LWh0bWw9XFxcImFuYWNob3IudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiYW5hY2hvci5ocmVmXFxcIiBydi1kYXRhLXNjcm9sbC1lbGVtZW50PVxcXCJzY3JvbGxFbGVtZW50XFxcIiBydi1kYXRhLW9mZnNldD1cXFwic2Nyb2xsT2Zmc2V0XFxcIj48L2E+IDx1bCBydi1pZj1cXFwiYW5hY2hvci5jaGlsZHMgfCBzaXplIHwgZ3QgMFxcXCIgY2xhc3M9XFxcImxpc3QtdW5zdHlsZWQgbGlzdC1jb250ZW50cyBsaXN0LWNvbnRlbnRzLWxldmVsLTJcXFwiPiA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtIG5hdi1pdGVtLWxldmVsLTJcXFwiIHJ2LWVhY2gtY2hpbGQ9XFxcImFuYWNob3IuY2hpbGRzXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1saW5rIHAtMFxcXCIgcnYtaHJlZj1cXFwiY2hpbGQuaHJlZlxcXCIgcnYtaHRtbD1cXFwiY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGQuaHJlZlxcXCIgcnYtZGF0YS1zY3JvbGwtZWxlbWVudD1cXFwic2Nyb2xsRWxlbWVudFxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcInNjcm9sbE9mZnNldFxcXCI+PC9hPiA8dWwgcnYtaWY9XFxcImNoaWxkLmNoaWxkcyB8IHNpemUgfCBndCAwXFxcIiBjbGFzcz1cXFwibGlzdC11bnN0eWxlZCBsaXN0LWNvbnRlbnRzIGxpc3QtY29udGVudHMtbGV2ZWwtM1xcXCI+IDxsaSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtM1xcXCIgcnYtZWFjaC1jaGlsZGNoaWxkPVxcXCJjaGlsZC5jaGlsZHNcXFwiPiA8YSBjbGFzcz1cXFwibmF2LWxpbmsgcC0wXFxcIiBydi1ocmVmPVxcXCJjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWh0bWw9XFxcImNoaWxkY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1kYXRhLXNjcm9sbC1lbGVtZW50PVxcXCJzY3JvbGxFbGVtZW50XFxcIiBydi1kYXRhLW9mZnNldD1cXFwic2Nyb2xsT2Zmc2V0XFxcIj48L2E+IDx1bCBydi1pZj1cXFwiY2hpbGRjaGlsZC5jaGlsZHMgfCBzaXplIHwgZ3QgMFxcXCIgY2xhc3M9XFxcImxpc3QtdW5zdHlsZWQgbGlzdC1jb250ZW50cyBsaXN0LWNvbnRlbnRzLWxldmVsLTRcXFwiPiA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtIG5hdi1pdGVtLWxldmVsLTRcXFwiIHJ2LWVhY2gtY2hpbGRjaGlsZGNoaWxkPVxcXCJjaGlsZGNoaWxkLmNoaWxkc1xcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbGluayBwLTBcXFwiIHJ2LWhyZWY9XFxcImNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1odG1sPVxcXCJjaGlsZGNoaWxkY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtc2Nyb2xsLWVsZW1lbnQ9XFxcInNjcm9sbEVsZW1lbnRcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJzY3JvbGxPZmZzZXRcXFwiPjwvYT4gPHVsIHJ2LWlmPVxcXCJjaGlsZGNoaWxkY2hpbGQuY2hpbGRzIHwgc2l6ZSB8IGd0IDBcXFwiIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGxpc3QtY29udGVudHMgbGlzdC1jb250ZW50cy1sZXZlbC01XFxcIj4gPGxpIGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtaXRlbS1sZXZlbC01XFxcIiBydi1lYWNoLWNoaWxkY2hpbGRjaGlsZGNoaWxkPVxcXCJjaGlsZGNoaWxkY2hpbGQuY2hpbGRzXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1saW5rIHAtMFxcXCIgcnYtaHJlZj1cXFwiY2hpbGRjaGlsZGNoaWxkY2hpbGQuaHJlZlxcXCIgcnYtaHRtbD1cXFwiY2hpbGRjaGlsZGNoaWxkY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGRjaGlsZGNoaWxkY2hpbGQuaHJlZlxcXCIgcnYtZGF0YS1zY3JvbGwtZWxlbWVudD1cXFwic2Nyb2xsRWxlbWVudFxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcInNjcm9sbE9mZnNldFxcXCI+PC9hPiA8dWwgcnYtaWY9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkLmNoaWxkcyB8IHNpemUgfCBndCAwXFxcIiBjbGFzcz1cXFwibGlzdC11bnN0eWxlZCBsaXN0LWNvbnRlbnRzIGxpc3QtY29udGVudHMtbGV2ZWwtNlxcXCI+IDxsaSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtNlxcXCIgcnYtZWFjaC1jaGlsZGNoaWxkY2hpbGRjaGlsZGNoaWxkPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZC5jaGlsZHNcXFwiPiA8YSBjbGFzcz1cXFwibmF2LWxpbmsgcC0wXFxcIiBydi1ocmVmPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWh0bWw9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGRjaGlsZGNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1kYXRhLXNjcm9sbC1lbGVtZW50PVxcXCJzY3JvbGxFbGVtZW50XFxcIiBydi1kYXRhLW9mZnNldD1cXFwic2Nyb2xsT2Zmc2V0XFxcIj48L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxmb3JtPiA8L2Zvcm0+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsIGZhZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgcm9sZT1cXFwiZGlhbG9nXFxcIiBydi1hZGQtY2xhc3M9XFxcIm1vZGFsLmNvbnRleHR1YWxDbGFzcyB8IHByZXBlbmQgJ21vZGFsLSdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1kaWFsb2dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIj4gPGRpdiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIiBydi1zaG93PVxcXCJtb2RhbC50aXRsZVxcXCI+IDxoNSBjbGFzcz1cXFwibW9kYWwtdGl0bGVcXFwiIHJ2LXRlbXBsYXRlPVxcXCJtb2RhbC50aXRsZVxcXCI+PC9oNT4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgYXJpYS1sYWJlbD1cXFwiQ2xvc2VcXFwiIHJ2LW9uLWNsaWNrPVxcXCJkaXNtaXNzXFxcIj4gPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPiZ0aW1lczs8L3NwYW4+IDwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+IDxwIHJ2LXRlbXBsYXRlPVxcXCJtb2RhbC5tZXNzYWdlXFxcIj48L3A+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXJcXFwiIHJ2LXNob3c9XFxcIm1vZGFsLmJ1dHRvbnMgfCBzaXplIHwgZ3QgMFxcXCI+IDxkaXYgcnYtZWFjaC1idXR0b249XFxcIm1vZGFsLmJ1dHRvbnNcXFwiPiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0blxcXCIgcnYtYWRkLWNsYXNzPVxcXCJidXR0b24uY2xhc3NcXFwiIHJ2LW9uLWNsaWNrPVxcXCJidXR0b24uYWN0aW9uXFxcIiBydi10ZW1wbGF0ZT1cXFwibW9kYWwubGFiZWxcXFwiPjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgY2xhc3M9XFxcInRvYXN0LWNvbnRhaW5lclxcXCI+IDxkaXYgYXJpYS1saXZlPVxcXCJwb2xpdGVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwidG9hc3QtaXRlbS1jb250YWluZXJcXFwiIHJ2LWFkZC1jbGFzcz1cXFwicG9zaXRpb25DbGFzc1xcXCI+IDxkaXYgcnYtZWFjaC10b2FzdD1cXFwibm90aWZpY2F0aW9uc1xcXCI+IDxkaXYgcnYtaWY9XFxcInRvYXN0LnR5cGUgfCBlcSAndG9hc3QnXFxcIj4gPGJzNC10b2FzdC1pdGVtIHJ2LWluZGV4PVxcXCIldG9hc3QlXFxcIiBydi1wYXJlbnQgcnYtaWNvbi11cmw9XFxcImljb25VcmxcXFwiIHJ2LWNvLXRvYXN0PVxcXCJ0b2FzdFxcXCI+PC9iczQtdG9hc3QtaXRlbT4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgcnYtZWFjaC1tb2RhbD1cXFwibm90aWZpY2F0aW9uc1xcXCI+IDxkaXYgcnYtaWY9XFxcIm1vZGFsLnR5cGUgfCBlcSAnbW9kYWwnXFxcIj4gPGJzNC1tb2RhbC1pdGVtIHJ2LWluZGV4PVxcXCIlbW9kYWwlXFxcIiBydi1wYXJlbnQgcnYtaWNvbi11cmw9XFxcImljb25VcmxcXFwiIHJ2LWNvLW1vZGFsPVxcXCJtb2RhbFxcXCI+PC9iczQtbW9kYWwtaXRlbT4gPC9kaXY+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8dWwgY2xhc3M9XFxcImxpc3QtdW5zdHlsZWQgbGlzdC1zY3JvbGxzcHkgbGlzdC1zY3JvbGxzcHktbGV2ZWwtMVxcXCI+IDxsaSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtMVxcXCIgcnYtZWFjaC1hbmFjaG9yPVxcXCJhbmNob3JzXFxcIiBydi1iczQtc2Nyb2xsc3B5LWFjdGl2ZT1cXFwiYW5hY2hvci5ocmVmXFxcIiBydi1kYXRhLW9mZnNldD1cXFwib2Zmc2V0XFxcIiBydi1kYXRhLW9mZnNldC1ib3R0b209XFxcIm9mZnNldEJvdHRvbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbGlua1xcXCIgcnYtaHJlZj1cXFwiYW5hY2hvci5ocmVmXFxcIiBydi1odG1sPVxcXCJhbmFjaG9yLnRpdGxlXFxcIiBydi1zY3JvbGwtdG8tb24tY2xpY2s9XFxcImFuYWNob3IuaHJlZlxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcInNjcm9sbE9mZnNldFxcXCI+PC9hPiA8dWwgcnYtaWY9XFxcImFuYWNob3IuY2hpbGRzIHwgc2l6ZSB8IGd0IDBcXFwiIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGxpc3Qtc2Nyb2xsc3B5IGxpc3Qtc2Nyb2xsc3B5LWxldmVsLTJcXFwiPiA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtIG5hdi1pdGVtLWxldmVsLTJcXFwiIHJ2LWVhY2gtY2hpbGQ9XFxcImFuYWNob3IuY2hpbGRzXFxcIiBydi1iczQtc2Nyb2xsc3B5LWFjdGl2ZT1cXFwiY2hpbGQuaHJlZlxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcIm9mZnNldFxcXCIgcnYtZGF0YS1vZmZzZXQtYm90dG9tPVxcXCJvZmZzZXRCb3R0b21cXFwiPiA8YSBjbGFzcz1cXFwibmF2LWxpbmtcXFwiIHJ2LWhyZWY9XFxcImNoaWxkLmhyZWZcXFwiIHJ2LWh0bWw9XFxcImNoaWxkLnRpdGxlXFxcIiBydi1zY3JvbGwtdG8tb24tY2xpY2s9XFxcImNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJzY3JvbGxPZmZzZXRcXFwiPjwvYT4gPHVsIHJ2LWlmPVxcXCJjaGlsZC5jaGlsZHMgfCBzaXplIHwgZ3QgMFxcXCIgY2xhc3M9XFxcImxpc3QtdW5zdHlsZWQgbGlzdC1zY3JvbGxzcHkgbGlzdC1zY3JvbGxzcHktbGV2ZWwtM1xcXCI+IDxsaSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtM1xcXCIgcnYtZWFjaC1jaGlsZGNoaWxkPVxcXCJjaGlsZC5jaGlsZHNcXFwiIHJ2LWJzNC1zY3JvbGxzcHktYWN0aXZlPVxcXCJjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJvZmZzZXRcXFwiIHJ2LWRhdGEtb2Zmc2V0LWJvdHRvbT1cXFwib2Zmc2V0Qm90dG9tXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1saW5rIHAtMFxcXCIgcnYtaHJlZj1cXFwiY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1odG1sPVxcXCJjaGlsZGNoaWxkLnRpdGxlXFxcIiBydi1zY3JvbGwtdG8tb24tY2xpY2s9XFxcImNoaWxkY2hpbGQuaHJlZlxcXCIgcnYtZGF0YS1zY3JvbGwtZWxlbWVudD1cXFwic2Nyb2xsRWxlbWVudFxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcInNjcm9sbE9mZnNldFxcXCI+PC9hPiA8dWwgcnYtaWY9XFxcImNoaWxkY2hpbGQuY2hpbGRzIHwgc2l6ZSB8IGd0IDBcXFwiIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGxpc3Qtc2Nyb2xsc3B5IGxpc3Qtc2Nyb2xsc3B5LWxldmVsLTRcXFwiPiA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtIG5hdi1pdGVtLWxldmVsLTRcXFwiIHJ2LWVhY2gtY2hpbGRjaGlsZGNoaWxkPVxcXCJjaGlsZGNoaWxkLmNoaWxkc1xcXCIgcnYtYnM0LXNjcm9sbHNweS1hY3RpdmU9XFxcImNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1kYXRhLW9mZnNldD1cXFwib2Zmc2V0XFxcIiBydi1kYXRhLW9mZnNldC1ib3R0b209XFxcIm9mZnNldEJvdHRvbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbGluayBwLTBcXFwiIHJ2LWhyZWY9XFxcImNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1odG1sPVxcXCJjaGlsZGNoaWxkY2hpbGQudGl0bGVcXFwiIHJ2LXNjcm9sbC10by1vbi1jbGljaz1cXFwiY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtc2Nyb2xsLWVsZW1lbnQ9XFxcInNjcm9sbEVsZW1lbnRcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJzY3JvbGxPZmZzZXRcXFwiPjwvYT4gPHVsIHJ2LWlmPVxcXCJjaGlsZGNoaWxkY2hpbGQuY2hpbGRzIHwgc2l6ZSB8IGd0IDBcXFwiIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGxpc3Qtc2Nyb2xsc3B5IGxpc3Qtc2Nyb2xsc3B5LWxldmVsLTVcXFwiPiA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtIG5hdi1pdGVtLWxldmVsLTVcXFwiIHJ2LWVhY2gtY2hpbGRjaGlsZGNoaWxkY2hpbGQ9XFxcImNoaWxkY2hpbGRjaGlsZC5jaGlsZHNcXFwiIHJ2LWJzNC1zY3JvbGxzcHktYWN0aXZlPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1kYXRhLW9mZnNldD1cXFwib2Zmc2V0XFxcIiBydi1kYXRhLW9mZnNldC1ib3R0b209XFxcIm9mZnNldEJvdHRvbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbGluayBwLTBcXFwiIHJ2LWhyZWY9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWh0bWw9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkLnRpdGxlXFxcIiBydi1zY3JvbGwtdG8tb24tY2xpY2s9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtc2Nyb2xsLWVsZW1lbnQ9XFxcInNjcm9sbEVsZW1lbnRcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJzY3JvbGxPZmZzZXRcXFwiPjwvYT4gPHVsIHJ2LWlmPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZC5jaGlsZHMgfCBzaXplIHwgZ3QgMFxcXCIgY2xhc3M9XFxcImxpc3QtdW5zdHlsZWQgbGlzdC1zY3JvbGxzcHkgbGlzdC1zY3JvbGxzcHktbGV2ZWwtNlxcXCI+IDxsaSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWl0ZW0tbGV2ZWwtNlxcXCIgcnYtZWFjaC1jaGlsZGNoaWxkY2hpbGRjaGlsZGNoaWxkPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZC5jaGlsZHNcXFwiIHJ2LWJzNC1zY3JvbGxzcHktYWN0aXZlPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZGNoaWxkLmhyZWZcXFwiIHJ2LWRhdGEtb2Zmc2V0PVxcXCJvZmZzZXRcXFwiIHJ2LWRhdGEtb2Zmc2V0LWJvdHRvbT1cXFwib2Zmc2V0Qm90dG9tXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1saW5rIHAtMFxcXCIgcnYtaHJlZj1cXFwiY2hpbGRjaGlsZGNoaWxkY2hpbGRjaGlsZC5ocmVmXFxcIiBydi1odG1sPVxcXCJjaGlsZGNoaWxkY2hpbGRjaGlsZGNoaWxkLnRpdGxlXFxcIiBydi1zY3JvbGwtdG8tb24tY2xpY2s9XFxcImNoaWxkY2hpbGRjaGlsZGNoaWxkY2hpbGQuaHJlZlxcXCIgcnYtZGF0YS1zY3JvbGwtZWxlbWVudD1cXFwic2Nyb2xsRWxlbWVudFxcXCIgcnYtZGF0YS1vZmZzZXQ9XFxcInNjcm9sbE9mZnNldFxcXCI+PC9hPiA8L2xpPiA8L3VsPiA8L2xpPiA8L3VsPiA8L2xpPiA8L3VsPiA8L2xpPiA8L3VsPiA8L2xpPiA8L3VsPiA8L2xpPiA8L3VsPlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IHJ2LWFkZC1jbGFzcz1cXFwiJ2Ryb3AnIHwgYXBwZW5kIGRyb3Bkb3duRGlyZWN0aW9uXFxcIj4gPGRpdiBjbGFzcz1cXFwiZHJvcGRvd24tdG9nZ2xlIGRyb3Bkb3duLXRvZ2dsZS1zaGFyZVxcXCIgcnYtaWQ9XFxcImRyb3Bkb3duSWRcXFwiIHJ2LXRlbXBsYXRlPVxcXCJsYWJlbFRlbXBsYXRlXFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZHJvcGRvd24tbWVudVxcXCIgcnYtYXJpYS1sYWJlbGxlZGJ5PVxcXCJkcm9wZG93bklkXFxcIj4gPGEgcnYtZWFjaC1pdGVtPVxcXCJzaGFyZUl0ZW1zXFxcIiBydi1zaG93PVxcXCJpdGVtLmF2YWlsYWJsZVxcXCIgcnYtZG93bmxvYWQ9XFxcIml0ZW0udHlwZSB8IGVxICdkb3dubG9hZCdcXFwiIHJ2LXR5cGU9XFxcIml0ZW0udHlwZVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJ2LW9uLWNsaWNrPVxcXCJzaGFyZU9uU2VydmljZVxcXCIgY2xhc3M9XFxcImRyb3Bkb3duLWl0ZW1cXFwiIHJ2LWhyZWY9XFxcIml0ZW0udXJsXFxcIiBydi1odG1sPVxcXCJpdGVtLmxhYmVsXFxcIj48L2E+IDwvZGl2PiA8L2Rpdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgY2xhc3M9XFxcInNoYXJlLWxhYmVsXFxcIiBydi1vbi1jbGljaz1cXFwic2hhcmVcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgYXJpYS1oYXNwb3B1cD1cXFwidHJ1ZVxcXCIgYXJpYS1leHBhbmRlZD1cXFwiZmFsc2VcXFwiIHJ2LXRleHQ9XFxcImxhYmVsXFxcIj48L2Rpdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxidXR0b24gcnYtc2hvdz1cXFwiY29udHJvbHNcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgc2xpZGVzaG93LWNvbnRyb2xzIHNsaWRlc2hvdy1jb250cm9sLXByZXZcXFwiIHJ2LWFkZC1jbGFzcz1cXFwiY29udHJvbHNQb3NpdGlvbkNsYXNzXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIGRhdGEtc2xpZGU9XFxcInByZXZcXFwiIHJ2LW9uLWNsaWNrPVxcXCJwcmV2XFxcIj4gPGJzNC1pY29uIHJ2LWlmPVxcXCJjb250cm9sUHJldkljb25TcmNcXFwiIHJ2LXNyYz1cXFwiY29udHJvbFByZXZJY29uU3JjXFxcIiBkaXJlY3Rpb249XFxcImxlZnRcXFwiIHNpemU9XFxcIjI0XFxcIj48L2JzNC1pY29uPiA8c3BhbiBydi1oaWRlPVxcXCJjb250cm9sUHJldkljb25TcmNcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgc2xpZGVzaG93LWNvbnRyb2wtZmFsbGJhY2stcHJldi1pY29uXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+UHJldmlvdXM8L3NwYW4+IDwvYnV0dG9uPiA8YnV0dG9uIHJ2LXNob3c9XFxcImNvbnRyb2xzXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rIHNsaWRlc2hvdy1jb250cm9scyBzbGlkZXNob3ctY29udHJvbC1uZXh0XFxcIiBydi1hZGQtY2xhc3M9XFxcImNvbnRyb2xzUG9zaXRpb25DbGFzc1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiBkYXRhLXNsaWRlPVxcXCJuZXh0XFxcIiBydi1vbi1jbGljaz1cXFwibmV4dFxcXCI+IDxiczQtaWNvbiBydi1pZj1cXFwiY29udHJvbE5leHRJY29uU3JjXFxcIiBydi1zcmM9XFxcImNvbnRyb2xOZXh0SWNvblNyY1xcXCIgZGlyZWN0aW9uPVxcXCJyaWdodFxcXCIgc2l6ZT1cXFwiMjRcXFwiPjwvYnM0LWljb24+IDxzcGFuIHJ2LWhpZGU9XFxcImNvbnRyb2xOZXh0SWNvblNyY1xcXCIgY2xhc3M9XFxcInNsaWRlc2hvdy1jb250cm9sLWZhbGxiYWNrLW5leHQtaWNvblxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPk5leHQ8L3NwYW4+IDwvYnV0dG9uPiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPG9sIHJ2LWlmPVxcXCJpbmRpY2F0b3JzXFxcIiBjbGFzcz1cXFwic2xpZGVzaG93LWluZGljYXRvcnNcXFwiIHJ2LWFkZC1jbGFzcz1cXFwiaW5kaWNhdG9yc1Bvc2l0aW9uQ2xhc3NcXFwiPiA8bGkgcnYtZWFjaC1zbGlkZT1cXFwiaXRlbXNcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwic2xpZGUuYWN0aXZlXFxcIiBydi1vbi1jbGljaz1cXFwiZ29UbyB8IGFyZ3Mgc2xpZGUuaW5kZXhcXFwiPiA8YnM0LWljb24gcnYtaGlkZT1cXFwic2xpZGUuYWN0aXZlXFxcIiBydi1zcmM9XFxcImluZGljYXRvckluYWN0aXZlSWNvblNyY1xcXCIgc2l6ZT1cXFwiMTZcXFwiPjwvYnM0LWljb24+IDxiczQtaWNvbiBydi1zaG93PVxcXCJzbGlkZS5hY3RpdmVcXFwiIHJ2LXNyYz1cXFwiaW5kaWNhdG9yQWN0aXZlSWNvblNyY1xcXCIgc2l6ZT1cXFwiMTZcXFwiPjwvYnM0LWljb24+IDwvbGk+IDwvb2w+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJzbGlkZXNob3ctaW5uZXJcXFwiPiA8ZGl2IHJ2LWVhY2gtc2xpZGU9XFxcIml0ZW1zXFxcIiBydi1jbGFzcz1cXFwic2xpZGUuY2xhc3NcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwic2xpZGUuYWN0aXZlXFxcIiBydi1pZD1cXFwiJ3NsaWRlLScgfCBhcHBlbmQgc2xpZGUuaGFuZGxlXFxcIiBydi1pbmRleD1cXFwic2xpZGUuaW5kZXhcXFwiIHJ2LWh0bWw9XFxcInNsaWRlLmNvbnRlbnRcXFwiPjwvZGl2PiA8L2Rpdj4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjx1bCBydi1zY3JvbGxiYXItZHJhZ2dhYmxlIHJ2LWFyaWEtb3JpZW50YXRpb249XFxcIm9wdGlvblRhYnNBbmdsZVxcXCIgcm9sZT1cXFwidGFibGlzdFxcXCIgY2xhc3M9XFxcIm5hdiBuYXYtdGFicyBmbGV4LXNjcm9sbGJhci14LWF1dG8gc2Nyb2xsYmFyLXktaGlkZGVuXFxcIj4gPGxpIGNsYXNzPVxcXCJuYXYtaXRlbVxcXCIgcnYtZWFjaC10YWI9XFxcIml0ZW1zXFxcIj4gPGJ1dHRvbiByb2xlPVxcXCJ0YWJcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgbmF2LWxpbmtcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwidGFiLmFjdGl2ZVxcXCIgcnYtaWQ9XFxcIid0YWItdGl0bGUtJyB8IGFwcGVuZCB0YWIuaGFuZGxlXFxcIiBydi1hcmlhLWNvbnRyb2xzPVxcXCIndGFiLWNvbnRlbnQtJyB8IGFwcGVuZCB0YWIuaGFuZGxlXFxcIiBydi1vbi1jbGljaz1cXFwiYWN0aXZhdGUgfCBhcmdzIHRhYlxcXCIgcnYtaHRtbD1cXFwidGFiLnRpdGxlXFxcIj48L2J1dHRvbj4gPC9saT4gPC91bD4gPGRpdiBjbGFzcz1cXFwidGFiLWNvbnRlbnRcXFwiPiA8ZGl2IHJ2LWVhY2gtdGFiPVxcXCJpdGVtc1xcXCIgcm9sZT1cXFwidGFicGFuZWxcXFwiIGNsYXNzPVxcXCJ0YWItcGFuZVxcXCIgcnYtY2xhc3Mtc2hvdz1cXFwidGFiLmFjdGl2ZVxcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJ0YWIuYWN0aXZlXFxcIiBydi1pZD1cXFwiJ3RhYi1jb250ZW50LScgfCBhcHBlbmQgdGFiLmhhbmRsZVxcXCIgcnYtYXJpYS1sYWJlbGxlZGJ5PVxcXCIndGFiLXRpdGxlLScgfCBhcHBlbmQgdGFiLmhhbmRsZVxcXCIgcnYtdGVtcGxhdGU9XFxcInRhYi5jb250ZW50XFxcIj48L2Rpdj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtYXV0b1xcXCI+IDxkaXYgY2xhc3M9XFxcIm5hdiBmbGV4LWNvbHVtbiBuYXYtcGlsbHNcXFwiIHJvbGU9XFxcInRhYmxpc3RcXFwiIHJ2LWFyaWEtb3JpZW50YXRpb249XFxcIm9wdGlvblRhYnNBbmdsZVxcXCI+IDxkaXYgY2xhc3M9XFxcIm5hdi1pdGVtXFxcIiBydi1lYWNoLXRhYj1cXFwiaXRlbXNcXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgbmF2LWxpbmtcXFwiIHJvbGU9XFxcInRhYlxcXCIgcnYtY2xhc3MtYWN0aXZlPVxcXCJ0YWIuYWN0aXZlXFxcIiBydi1pZD1cXFwiJ3RhYi10aXRsZS0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LWFyaWEtY29udHJvbHM9XFxcIid0YWItY29udGVudC0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LW9uLWNsaWNrPVxcXCJhY3RpdmF0ZSB8IGFyZ3MgdGFiXFxcIiBydi1odG1sPVxcXCJ0YWIudGl0bGVcXFwiPjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtYXV0b1xcXCI+IDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj4gPGRpdiBydi1lYWNoLXRhYj1cXFwiaXRlbXNcXFwiIHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIHJ2LWNsYXNzLXNob3c9XFxcInRhYi5hY3RpdmVcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwidGFiLmFjdGl2ZVxcXCIgcnYtaWQ9XFxcIid0YWItY29udGVudC0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LWFyaWEtbGFiZWxsZWRieT1cXFwiJ3RhYi10aXRsZS0nIHwgYXBwZW5kIHRhYi5oYW5kbGVcXFwiIHJ2LXRlbXBsYXRlPVxcXCJ0YWIuY29udGVudFxcXCI+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8aW1nPiA8dGFnIHJ2LWVhY2gtdGFnPVxcXCJ0YWdzXFxcIiBydi1pbmRleD1cXFwidGFnLmluZGV4XFxcIiBydi1zdHlsZS1sZWZ0PVxcXCJ0YWcubGVmdFxcXCIgcnYtc3R5bGUtdG9wPVxcXCJ0YWcudG9wXFxcIiBydi1zaGFwZT1cXFwidGFnLnNoYXBlXFxcIiBydi1jb2xvcj1cXFwidGFnLmNvbG9yXFxcIiBydi1zdHlsZS0tLXRhZy1jb2xvcj1cXFwidGFnLmNvbG9yXFxcIiBydi1zdHlsZS0tLXRhZy1ib3JkZXItcmFkaXVzPVxcXCJ0YWcuYm9yZGVyUmFkaXVzXFxcIiBydi1zdHlsZS0tLXRhZy1mdWxsLXNpemU9XFxcInRhZy5mdWxsU2l6ZVxcXCIgcnYtc3R5bGUtLS10YWctc21hbGwtc2l6ZT1cXFwidGFnLnNtYWxsU2l6ZVxcXCIgcnYtYnM0LXBvcG92ZXI9XFxcImZpbGxQb3BvdmVyT3B0aW9ucyB8IGNhbGwgdGFnLnBvcG92ZXJPcHRpb25zXFxcIiBydi1vbi1ib3VuZC5icy5wb3BvdmVyPVxcXCJvblBvcG92ZXJCb3VuZFxcXCIgcnYtb24tc2hvd24uYnMucG9wb3Zlcj1cXFwib25Qb3BvdmVyU2hvd25cXFwiIHJ2LW9uLWhpZGRlbi5icy5wb3BvdmVyPVxcXCJvblBvcG92ZXJIaWRkZW5cXFwiIHJ2LXRhYmluZGV4PVxcXCJ0cmlnZ2VyT25Gb2N1cyB8IGNhbGwgdGFnLnBvcG92ZXJPcHRpb25zXFxcIj4gPC90YWc+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJ0b2FzdCBteS0xXFxcIiBydi1hZGQtY2xhc3M9XFxcInRvYXN0LmNvbnRleHR1YWxDbGFzcyB8IHByZXBlbmQgJ3RvYXN0LSdcXFwiIHJvbGU9XFxcImFsZXJ0XFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ0b2FzdC1oZWFkZXJcXFwiIHJ2LXNob3c9XFxcInRvYXN0LnRpdGxlXFxcIj4gPGJzNC1pY29uIHJ2LWlmPVxcXCJpY29uVXJsXFxcIiBydi1zcmM9XFxcImljb25VcmxcXFwiIHNpemU9XFxcIjE2XFxcIiBydi1jb2xvcj1cXFwidG9hc3QuY29udGV4dHVhbENsYXNzXFxcIiBjbGFzcz1cXFwibXItMlxcXCIgYWx0PVxcXCJ0b2FzdCBpY29uXFxcIj48L2JzNC1pY29uPiA8c3Ryb25nIGNsYXNzPVxcXCJtci1hdXRvXFxcIiBydi10ZW1wbGF0ZT1cXFwidG9hc3QudGl0bGVcXFwiPjwvc3Ryb25nPiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcIm1sLTIgbWItMSBjbG9zZVxcXCIgcnYtb24tY2xpY2s9XFxcImRpc21pc3NcXFwiIGFyaWEtbGFiZWw9XFxcIkNsb3NlXFxcIj4gPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPiZ0aW1lczs8L3NwYW4+IDwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidG9hc3QtYm9keVxcXCIgcnYtdGVtcGxhdGU9XFxcInRvYXN0Lm1lc3NhZ2VcXFwiPjwvZGl2PiA8L2Rpdj5cIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwic2hhcmUtbGFiZWxcXFwiIHJ2LW9uLWNsaWNrPVxcXCJzaGFyZVxcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiBhcmlhLWhhc3BvcHVwPVxcXCJ0cnVlXFxcIiBhcmlhLWV4cGFuZGVkPVxcXCJmYWxzZVxcXCIgcnYtaTE4bi10ZXh0PVxcXCJsYWJlbEkxOG5cXFwiPjwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC00IHB4LTAgZW1iZWQtcmVzcG9uc2l2ZSBlbWJlZC1yZXNwb25zaXZlLTFieTEgbGF6eVxcXCIgcnYtZWFjaC1pbWFnZT1cXFwibWVkaWEuZGF0YVxcXCIgcnYtYWRkLWNsYXNzPVxcXCJpbWFnZS5tZWRpYV90eXBlXFxcIj4geyUgY29tbWVudCAlfSBJTUFHRSB7JSBlbmRjb21tZW50ICV9IDxpbWcgbGF6eWxvYWQ9XFxcImxhenlcXFwiIGNsYXNzPVxcXCJlbWJlZC1yZXNwb25zaXZlLWl0ZW1cXFwiIHJ2LWlmPVxcXCJpbWFnZS5tZWRpYV90eXBlIHwgZXEgJ0lNQUdFJ1xcXCIgcnYtc3JjPVxcXCJpbWFnZS5tZWRpYV91cmxcXFwiIHJ2LWFsdD1cXFwiaW1hZ2UuY2FwdGlvblxcXCI+IHslIGNvbW1lbnQgJX0gQ0FST1VTRUxfQUxCVU0geyUgZW5kY29tbWVudCAlfSA8aW1nIGxhenlsb2FkPVxcXCJsYXp5XFxcIiBjbGFzcz1cXFwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXFxcIiBydi1pZj1cXFwiaW1hZ2UubWVkaWFfdHlwZSB8IGVxICdDQVJPVVNFTF9BTEJVTSdcXFwiIHJ2LXNyYz1cXFwiaW1hZ2UubWVkaWFfdXJsXFxcIiBydi1zcmM9XFxcImltYWdlLm1lZGlhX3VybFxcXCIgcnYtYWx0PVxcXCJpbWFnZS5jYXB0aW9uXFxcIj4geyUgY29tbWVudCAlfSBWSURFTyB7JSBlbmRjb21tZW50ICV9IDx2aWRlbyBjbGFzcz1cXFwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXFxcIiBydi1pZj1cXFwiaW1hZ2UubWVkaWFfdHlwZSB8IGVxICdWSURFTydcXFwiIGF1dG9wbGF5IG11dGVkIGxvb3AgcHJlbG9hZD4gPHNvdXJjZSBydi1zcmM9XFxcImltYWdlLm1lZGlhX3VybFxcXCIgdHlwZT1cXFwidmlkZW8vbXA0XFxcIj4gWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZpZGVvIHRhZy4gPC92aWRlbz4geyUgY29tbWVudCAlfSBob3ZlciBpbmZvIHslIGVuZGNvbW1lbnQgJX0gPGRpdiBjbGFzcz1cXFwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtIGNhcHRpb24gZC1ub25lIGQtbWQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcXFwiIHJ2LXRleHQ9XFxcImltYWdlLmNhcHRpb25cXFwiPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCJcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCJcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHNtYWxsIHJ2LWhpZGU9XFxcImhpZGRlblxcXCIgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIHJ2LXRvdWNoLWV2ZW50cyBydi1vbi1zaW5nbGV0YXA9XFxcInRvZ2dsZUJhclxcXCIgcnYtb24tZG91YmxldGFwPVxcXCJoaWRlXFxcIj4geyB0aGVtZU5hbWUgfTxici8+IDxkaXY+IERldmljZSB3aWR0aDogPHNwYW4gY2xhc3M9XFxcImQtaW5saW5lLWJsb2NrIGQtbWQtbm9uZVxcXCI+WFM8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJkLW5vbmUgZC1tZC1pbmxpbmUtYmxvY2sgZC1sZy1ub25lXFxcIj5NRDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImQtbm9uZSBkLWxnLWlubGluZS1ibG9jayBkLXhsLW5vbmVcXFwiPkxHPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiZC1ub25lIGQteGwtaW5saW5lLWJsb2NrIGQteHhsLW5vbmVcXFwiPlhMPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiZC1ub25lIGQteHhsLWlubGluZS1ibG9ja1xcXCI+WFhMPC9zcGFuPiA8L2Rpdj4gPC9zbWFsbD4gXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxuYXYgY2xhc3M9XFxcIm5hdlxcXCIgcnYtYWRkLWNsYXNzPVxcXCJsaW5rbGlzdC5oYW5kbGVcXFwiIHJ2LWNsYXNzLW5hdi1waWxscz1cXFwicGlsbHNcXFwiIHJ2LWNsYXNzLXctMTAwPVxcXCJ2ZXJ0aWNhbFxcXCIgcnYtY2xhc3MtZmxleC1jb2x1bW49XFxcInZlcnRpY2FsXFxcIiBydi1jbGFzcy1mbGV4LXJvdz1cXFwidmVydGljYWwgfCBub3RcXFwiPiA8ZGl2IGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtaXRlbS1sZXZlbC0wXFxcIiBydi1lYWNoLWxpbms9XFxcImxpbmtsaXN0LmxpbmtzXFxcIj4gPGEgcnYtaWY9XFxcImxpbmsuY29sbGFwc2VhYmxlIHwgbm90XFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwibGluay5hY3RpdmVcXFwiIHJ2LXJvdXRlLWNsYXNzLWFjdGl2ZT1cXFwibGluay51cmxcXFwiIHJ2LXJvdXRlPVxcXCJsaW5rLnVybFxcXCIgcnYtaHJlZj1cXFwibGluay51cmxcXFwiPiA8c3Bhbj57bGluay50aXRsZX08L3NwYW4+IDwvYT4gPGRpdiBydi1pZj1cXFwibGluay5jb2xsYXBzZWFibGVcXFwiIGNsYXNzPVxcXCJuYXYtbGluayBjdXJzb3ItcG9pbnRlciBkcm9wZG93bi10b2dnbGVcXFwiIHJ2LW9uLWNsaWNrPVxcXCJ0b2dnbGUgfCBhcmdzIGxpbmtcXFwiPiA8c3Bhbj57bGluay50aXRsZX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtaXRlbS1sZXZlbC0xXFxcIiBydi1oaWRlPVxcXCJsaW5rLmNvbGxhcHNlZFxcXCIgcnYtZWFjaC1zdWJsaW5rPVxcXCJsaW5rLmxpbmtzXFxcIj4gPGEgcnYtaWY9XFxcInN1YmxpbmsuY29sbGFwc2VhYmxlIHwgbm90XFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiIHJ2LWFkZC1jbGFzcz1cXFwic3VibGluay5sZXZlbCB8IHByZXBlbmQgJ2xldmVsLSdcXFwiIHJ2LWNsYXNzLWFjdGl2ZT1cXFwic3VibGluay5hY3RpdmVcXFwiIHJ2LXJvdXRlLWNsYXNzLWFjdGl2ZT1cXFwic3VibGluay51cmxcXFwiIHJ2LXJvdXRlPVxcXCJzdWJsaW5rLnVybFxcXCIgcnYtaHJlZj1cXFwic3VibGluay51cmxcXFwiPiA8c3Bhbj57c3VibGluay50aXRsZX08L3NwYW4+IDwvYT4gPGRpdiBydi1pZj1cXFwic3VibGluay5jb2xsYXBzZWFibGVcXFwiIGNsYXNzPVxcXCJuYXYtbGluayBjdXJzb3ItcG9pbnRlciBkcm9wZG93bi10b2dnbGVcXFwiIHJ2LW9uLWNsaWNrPVxcXCJ0b2dnbGUgfCBhcmdzIHN1YmxpbmtcXFwiPiA8c3Bhbj57c3VibGluay50aXRsZX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtaXRlbS1sZXZlbC0yXFxcIiBydi1oaWRlPVxcXCJzdWJsaW5rLmNvbGxhcHNlZFxcXCIgcnYtZWFjaC1zdWJzdWJsaW5rPVxcXCJzdWJsaW5rLmxpbmtzXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1saW5rXFxcIiBydi1hZGQtY2xhc3M9XFxcInN1YnN1YmxpbmsubGV2ZWwgfCBwcmVwZW5kICdsZXZlbC0nXFxcIiBydi1jbGFzcy1hY3RpdmU9XFxcInN1YnN1YmxpbmsuYWN0aXZlXFxcIiBydi1yb3V0ZS1jbGFzcy1hY3RpdmU9XFxcInN1YnN1YmxpbmsudXJsXFxcIiBydi1yb3V0ZT1cXFwic3Vic3VibGluay51cmxcXFwiIHJ2LWhyZWY9XFxcInN1YnN1YmxpbmsudXJsXFxcIj4gPHNwYW4+e3N1YnN1YmxpbmsudGl0bGV9PC9zcGFuPiA8L2E+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvbmF2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiXCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCJcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IixudWxsLG51bGwsbnVsbCxudWxsLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gZnVuY3Rpb24ocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBjaHVua0lkcyA9IGRlZmVycmVkW2ldWzBdO1xuXHRcdHZhciBmbiA9IGRlZmVycmVkW2ldWzFdO1xuXHRcdHZhciBwcmlvcml0eSA9IGRlZmVycmVkW2ldWzJdO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeShmdW5jdGlvbihrZXkpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKTsgfSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSBmdW5jdGlvbihjaHVua0lkKSB7IHJldHVybiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDA7IH07XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gZnVuY3Rpb24ocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpIHtcblx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcblx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcblx0dmFyIHJ1bnRpbWUgPSBkYXRhWzJdO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoZnVuY3Rpb24oaWQpIHsgcmV0dXJuIGluc3RhbGxlZENodW5rc1tpZF0gIT09IDA7IH0pKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua19yaWJhanNfZG9jXCJdID0gc2VsZltcIndlYnBhY2tDaHVua19yaWJhanNfZG9jXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgW1widmVuZG9yc1wiXSwgZnVuY3Rpb24oKSB7IHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvc2Nzcy9tYWluLnNjc3NcIik7IH0pXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFtcInZlbmRvcnNcIl0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL3RzL21haW4udHNcIik7IH0pXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIiwiIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsInRlbXBsYXRlIiwiQmluZENvbnRlbnRDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImJpbmRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwiY29udGVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJiaW5kIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdCIsImZpcnN0RWxlbWVudENoaWxkIiwidGFnTmFtZSIsImNvbnNvbGUiLCJlcnJvciIsIkJzNFRhYnNDb21wb25lbnQiLCJoYXNDaGlsZE5vZGVzVHJpbSIsImVzY2FwZUh0bWwiLCJQcmlzbSIsIkV4YW1wbGVCczRUYWJzQ29tcG9uZW50Iiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwibmFtZSIsInJlcXVpcmVkIiwic2NvcGUiLCJzdW0iLCJhIiwiYiIsInJlc3VsdCIsIk51bWJlciIsImFjdGl2YXRlIiwidGFiIiwidHlwZSIsInByZXZpZXdFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInRyaW0iLCJoaWdobGlnaHRBbGwiLCJiaW5kSWZSZWFkeSIsImluaXRUYWJzIiwiYWN0aXZhdGVGaXJzdFRhYiIsImFmdGVyQmluZCIsImNvdW50T2ZGaXJzdFdoaXRlc3BhY2VzIiwic3RyIiwibWF0Y2giLCJsZW5ndGgiLCJyZW1vdmVJbmRlbnRzT2ZTb3VyY2UiLCJzb3VyY2UiLCJsaW5lcyIsInNwbGl0IiwiZmlyc3RMaW5lSW5kZW50cyIsInNoaWZ0IiwiaSIsImN1cnJlbnRJbmRlbnRzIiwic3Vic3RyaW5nIiwiam9pbiIsImFkZEl0ZW1zQnlUZW1wbGF0ZSIsInRlbXBsYXRlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbmRleCIsInRwbCIsImdldEF0dHJpYnV0ZSIsInNvdXJjZVRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic291cmNlQ29kZSIsInNldEF0dHJpYnV0ZSIsImFkZEl0ZW1CeVRlbXBsYXRlIiwicHJldmlld1RlbXBsYXRlIiwicmVzdWx0VGVtcGxhdGUiLCJ0ZW1wbGF0ZVJlYWR5IiwiaGFzT25seVRlbXBsYXRlQ2hpbGRzIiwiQmFzaWNDb21wb25lbnQiLCJGaWxlVHJlZUNvbXBvbmVudCIsIkljb25QcmV2aWV3Q29tcG9uZW50IiwiYXNzZXRQYXRoIiwic3JjIiwic2l6ZXMiLCJjb2xvcnMiLCJkaXJlY3Rpb25zIiwiZXhhbXBsZSIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIndpbmRvdyIsImxvY2F0aW9uIiwic2VhcmNoIiwiZ2V0IiwiRXJyb3IiLCJwYXJzZWRBdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJhdHRyaWJ1dGVOYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIm5hbWVzcGFjZSIsInVybFBhcnRzIiwiY2FjaGVRdWVyeVBhcmFtIiwicmVxdWlyZWRBdHRyaWJ1dGVzIiwiTG9yZW1JcHN1bUNvbXBvbmVudCIsIkxvcmVtSXBzdW0iLCJzZW50ZW5jZXNQZXJQYXJhZ3JhcGgiLCJtYXgiLCJtaW4iLCJ3b3Jkc1BlclNlbnRlbmNlIiwiZ2VuZXJhdGVQYXJhZ3JhcGhzIiwiZm9ybWF0IiwidGhlbiIsInZpZXciLCJiZWZvcmVCaW5kIiwibG9yZW0iLCJvcHRpb25zIiwiZ2VuZXJhdGVXb3JkcyIsImdlbmVyYXRlU2VudGVuY2VzIiwid29yZHMiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIlNob3BpZnlMaW5rbGlzdENvbXBvbmVudCIsIk9yaWdpbmFsU2hvcGlmeUxpbmtsaXN0Q29tcG9uZW50IiwiQnM0VGFic0F0dHJFeGFtcGxlQ29tcG9uZW50IiwiQnM0VGFic1RwbEV4YW1wbGVDb21wb25lbnQiLCJFYWNoSXRlbUV4YW1wbGVDb21wb25lbnQiLCJpdGVtcyIsImdldEl0ZW1zIiwicG9wIiwicHVzaCIsInJlc2V0Iiwic29ydCIsInNwbGljZSIsInVuc2hpZnQiLCJ2YWx1ZSIsIkV4dHJhc1Njcm9sbEV2ZW50c0V4YW1wbGVDb21wb25lbnQiLCJsb2ciLCJldmVudE5hbWUiLCJldmVudCIsImNvbnNvbGVFbGVtZW50IiwiaHRtbCIsImRldGFpbCIsInBvc2l0aW9uIiwieCIsInkiLCJtYXhYIiwibWF4WSIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ0b3VjaFpvbmVFbGVtZW50IiwiVG91Y2hFdmVudHNFeGFtcGxlQ29tcG9uZW50Iiwib2Zmc2V0IiwiSTE4blN0YXRpY0V4YW1wbGVDb21wb25lbnQiLCJSaWJhIiwiY29yZU1vZHVsZSIsIkV2ZW50RGlzcGF0Y2hlciIsInJlYWR5IiwiZXh0cmFzTW9kdWxlIiwic2hvcGlmeU1vZHVsZSIsInJvdXRlck1vZHVsZSIsImkxOG5Nb2R1bGUiLCJiczRNb2R1bGUiLCJMb2NhbGVzU2VydmljZSIsIkN1c3RvbUNvbXBvbmVudHMiLCJNYWluIiwib25QYWdlUmVhZHkiLCJ2aWV3SWQiLCJjdXJyZW50U3RhdHVzIiwicHJldlN0YXR1cyIsImNvbnRhaW5lciIsIm5ld1BhZ2VSYXdIVE1MIiwiZGF0YXNldCIsIm1vZGVscyIsImdldFNpbmdsZXRvbiIsInJpYmEiLCJtb2R1bGUiLCJyZWdpc3QiLCJsb2NhbGVzU2VydmljZSIsImNvbXBvbmVudCIsInJlZ2lzdHMiLCJkaXNwYXRjaGVyIiwib24iLCJtb2RlbCIsImJvZHkiLCJCaW5kZXIiLCJDb2xsYXBzZVNlcnZpY2UiLCJvblJvdXRlIiwiQ29sbGFwc2VPblVybEJpbmRlciIsImdldEluc3RhbmNlIiwiX2NoZWNrVVJMIiwidXJsIiwiY29sbGFwc2VTZXJ2aWNlIiwiaGlkZSIsImVsIiwidG9nZ2xlIiwidW5iaW5kIiwiY2hlY2tVUkwiLCJvZmYiLCJyb3V0aW5lIiwiQ29sbGFwc2VCaW5kZXIiLCJ3YXJuIiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRzIiwiY29sbGFwc2VTZXJ2aWNlcyIsImZvckVhY2giLCJ0YXJnZXQiLCJwcmV2ZW50RGVmYXVsdCIsIkRyb3Bkb3duU2VydmljZSIsIkRyb3Bkb3duQmluZGVyIiwidG9nZ2xlciIsImNvbnRhaW5zIiwib3B0aW9uIiwiZHJvcGRvd25TZXJ2aWNlIiwiZGlzcG9zZSIsIkV4cGFuT25VcmxCaW5kZXIiLCJ1cmxUb0NoZWNrIiwic2hvdyIsIlBvcG92ZXJTZXJ2aWNlIiwiUG9wb3ZlckJpbmRlciIsIm9wdGlvbnNPckNvbnRlbnQiLCJwbGFjZW1lbnQiLCJwb3BvdmVyIiwiRGVmYXVsdCIsIm1ldGhvZE5hbWVzIiwibGlzdGVuZXJzIiwidHJpZ2dlciIsImxpc3RlbmVyIiwiT2JqZWN0IiwiZW50cmllcyIsImNyZWF0ZSIsIm1ldGhvZE5hbWUiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRlYm91bmNlIiwiaXNJblZpZXdwb3J0IiwiU2Nyb2xsc3B5Q2xhc3NCaW5kZXIiLCJfb25TY3JvbGwiLCJfaXNJblZpZXdwb3J0IiwiY2xhc3NOYW1lIiwiY2hlY2tlZCIsInJlbW92ZSIsImVsZW0iLCJvZmZzZXRUb3AiLCJvZmZzZXRCb3R0b20iLCJvblNjcm9sbCIsInBhc3NpdmUiLCJuYXRpdmVJRFRhcmdldFNlbGVjdG9yIiwicmVwbGFjZSIsImdldEVsZW1lbnRCeUlkIiwidW5kZWZpbmVkIiwiYXJncyIsIlRvYXN0IiwiU2hvd1RvYXN0T25FdmVudEJpbmRlciIsIl9vbkV2ZW50IiwidG9hc3REYXRhIiwiJGV2ZW50IiwiJGNvbnRleHQiLCJub3RpZmljYXRpb25EaXNwYXRjaGVyIiwiY2hhbm5lbCIsIm9uRXZlbnQiLCJUb2dnbGVDb2xsYXBzZU9uRXZlbnRCaW5kZXIiLCJNYXAiLCJ2YWx1ZXMiLCJuZXdUYXJnZXRzIiwiQXJyYXkiLCJmcm9tIiwia2V5cyIsImZpbmQiLCJkZWxldGUiLCJoYXMiLCJzZXQiLCJQb3BwZXIiLCJhcnJvdyIsImFwcGVuZENoaWxkIiwiaW5uZXIiLCJUb29sdGlwQmluZGVyIiwiY2xvbmVOb2RlIiwiX3Nob3ciLCJfaGlkZSIsInBvcHBlciIsInRpcCIsIm1vZGlmaWVycyIsImZsaXAiLCJiZWhhdmlvciIsImVsZW1lbnQiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsImRlc3Ryb3kiLCJ0ZXh0IiwiaW5uZXJFbCIsInNjcm9sbFRvIiwiU2Nyb2xsVG9PbkV2ZW50QmluZGVyIiwic2Nyb2xsRWxlbWVudCIsIlRPR0dMRV9CVVRUT04iLCJUT0dHTEVfQVRUUklCVVRFIiwiVG9nZ2xlQXR0cmlidXRlQmluZGVyIiwiX3RyaWdnZXJTdGF0ZSIsIl9vblRvZ2dsZSIsInRvZ2dsZUJ1dHRvbkV2ZW50cyIsImV2ZW50TmFtZXMiLCJzdGF0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImVsRXZlbnROYW1lcyIsInJlbW92ZWQiLCJ0cmlnZ2VyU3RhdGUiLCJhZGRlZCIsImhhc0F0dHJpYnV0ZSIsIm9uVG9nZ2xlIiwibmV3SWQiLCJvbGRJZCIsIl9nZXRWYWx1ZSIsIm5zUHJlZml4IiwiVE9HR0xFX0NMQVNTIiwiVG9nZ2xlQ2xhc3NCaW5kZXIiLCJ0b2dnbGVCdXR0b24iLCJiaW5kZXJzIiwiY29tcG9uZW50cyIsImZvcm1hdHRlcnMiLCJzZXJ2aWNlcyIsImhlbHBlciIsImNvbnN0YW50cyIsIkJzNFNlcnZpY2UiLCJzZXRTaW5nbGV0b24iLCJoYW5kbGVpemVGb3JtYXR0ZXIiLCJUZW1wbGF0ZXNDb21wb25lbnQiLCJFVkVOVF9ISURFIiwiRVZFTlRfU0hPVyIsImhhbmRsZWl6ZSIsInJlYWQiLCJCczRBY2NvcmRpb25Db21wb25lbnQiLCJjb2xsYXBzZUljb25TaXplIiwic2hvd09ubHlPbmUiLCJpdGVtIiwiaW5pdEl0ZW1FdmVudExpc3RlbmVycyIsIm90aGVycyIsIm90aGVyIiwib25IaWRlIiwib25TaG93Iiwib25jZSIsImdldENvbnRlbnRDaGlsZEJ5SW5kZXgiLCJpY29uRGlyZWN0aW9uIiwiZmlyc3RDb250ZW50Q2hpbGQiLCJ0cmlnZ2VyVmlzaWJpbGl0eUNoYW5nZWRGb3JFbGVtZW50IiwidHJhbnNmb3JtVGVtcGxhdGVBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImhhbmRsZSIsInRpdGxlIiwidmlzaWJsZSIsInNldFRpbWVvdXQiLCJCczRCdXR0b25Db21wb25lbnQiLCJhbmltYXRpb25DbGFzcyIsIm9uQ2xpY2siLCJzdGFydEFuaW1hdGlvbiIsIm9uU3RhcnRBbmltYXRpb24iLCJvbkVuZEFuaW1hdGlvbiIsIkNhcm91c2VsU2VydmljZSIsIkJzNENhcm91c2VsQ29tcG9uZW50IiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2VPbiIsInBhdXNlIiwid3JhcCIsInRvdWNoIiwicmlkZSIsImZhZGUiLCJuZXh0IiwibmV4dFdoZW5WaXNpYmxlIiwicHJldiIsImN5Y2xlIiwidG8iLCJjYXJvdXNlbFNlcnZpY2UiLCJDb2xvciIsIkV2ZW50QnVja2V0IiwiaGFuZGxlciIsImV2ZW50cyIsImZpbHRlciIsImUiLCJpc01hdGNoIiwiX2RvUmVtb3ZlIiwiZHJhZ1RyYWNrIiwiZXZlbnRCdWNrZXQiLCJhcmVhIiwiY2FsbGJhY2siLCJkcmFnZ2luZyIsImNsYW1wIiwidmFsIiwiTWF0aCIsIm9uTW92ZSIsImluZm8iLCJzdGFydGluZyIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInciLCJ3aWR0aCIsImgiLCJoZWlnaHQiLCJjbGllbnRYIiwiY2xpZW50WSIsInJlbFgiLCJsZWZ0IiwicmVsWSIsInRvcCIsIm9uTW91c2UiLCJidXR0b24iLCJidXR0b25zIiwid2hpY2giLCJvblRvdWNoIiwidG91Y2hlcyIsIkJHX1RSQU5TUCIsIkhVRVMiLCJFVkVOVF9LRVkiLCJzdG9wRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJvbktleSIsImJ1Y2tldCIsInN0b3AiLCJpbmRleE9mIiwia2V5IiwiQnM0Q29sb3JQaWNrZXJDb21wb25lbnQiLCJoc2wiLCJjc3NIdWUiLCJjc3NIc2wiLCJjc3NIc2xhIiwiYWxwaGFCZyIsImNvbG9yIiwiYWxwaGEiLCJlZGl0b3IiLCJlZGl0b3JGb3JtYXQiLCJjYW5jZWxCdXR0b24iLCJva2F5QnV0dG9uIiwiZXZlbnREaXNwYXRjaGVyIiwic2V0Q29sb3IiLCJ1cGRhdGVVSSIsImJpbmRFdmVudHMiLCJhZnRlclRlbXBsYXRlIiwic2V0RWxlbWVudHMiLCJvbkNoYW5nZSIsImRlYnVnIiwib25Eb25lIiwiZmxhZ3MiLCJzaWxlbnQiLCJfc2V0Q29sb3IiLCJjIiwiZXgiLCJmYWlsU2lsZW50bHkiLCJoc2xhIiwic2V0SFNMQSIsIl9kb21IIiwiX2RvbVNMIiwiX2RvbUEiLCJfZG9tRWRpdCIsIl9kb21TYW1wbGUiLCJfZG9tT2theSIsIl9kb21DYW5jZWwiLCJhZGRFdmVudCIsIl9kcmFnVHJhY2siLCJpbnB1dCIsImZyb21FZGl0b3IiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInNlbGVjdCIsIm9uRG9uZVByb3h5IiwicyIsImwiLCJfdXBkYXRlVUkiLCJoc2xTdHJpbmciLCJoc2xhU3RyaW5nIiwidGh1bWJIIiwidGh1bWJTTCIsInRodW1iQSIsInBvc1giLCJwYXJlbnQiLCJjaGlsZCIsInN0eWxlIiwicG9zWSIsIm9wYXF1ZSIsInRyYW5zcCIsImJnIiwicHJpbnRSR0IiLCJwcmludEhTTCIsInByaW50SGV4IiwiQnM0Q29udGVudHNDb21wb25lbnQiLCJoZWFkZXJzRGVwdGgiLCJoZWFkZXJzU3RhcnQiLCJmaW5kSGVhZGVySWREZXB0aCIsImhlYWRlclBhcmVudFNlbGVjdG9yIiwic2Nyb2xsT2Zmc2V0IiwiYW5jaG9ycyIsImdldElkRnJvbUVsZW1lbnRPclBhcmVudCIsImRlcHRoIiwiaWQiLCJwYXJlbnRFbGVtZW50IiwicHVzaEhlYWRlcnMiLCJ3cmFwcGVyRWxlbWVudCIsInB1c2hUbyIsImhlYWRlckVsZW1lbnRzIiwiaGVhZGVyRWxlbWVudCIsImhyZWYiLCJjaGlsZHMiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJCczREcm9wZG93bkNvbXBvbmVudCIsIkh0dHBTZXJ2aWNlIiwiZ2V0Vmlld3BvcnREaW1lbnNpb25zIiwiZ2V0VUlEIiwic3RyaXBIdG1sIiwiQnM0Rm9ybUNvbXBvbmVudCIsImdldERlZmF1bHRTY29wZSIsImZvcm0iLCJmaWVsZHMiLCJ2YWxpZCIsImRpc2FibGVTdWJtaXRVbnRpbENoYW5nZSIsInN1Ym1pdERpc2FibGVkIiwib25TdWJtaXQiLCJ1c2VBamF4IiwiYWpheFJlcXVlc3RUeXBlIiwiYXV0b1NldEZvcm1EYXRhIiwic2Nyb2xsVG9JbnZhbGlkRWxlbWVudCIsImFuaW1hdGVJbnZhbGlkRWxlbWVudCIsImVuYWJsZVN1Ym1pdCIsImFkZEV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJmb3JtRWwiLCJnZXRGb3JtVmFsdWVzIiwidmFsaWRhdGUiLCJvbkludmFsaWRGb3JtIiwic3VibWl0U2V0dGluZ3MiLCJnZXRTdWJtaXRTZXR0aW5ncyIsImFqYXhTdWJtaXQiLCJyZXMiLCJmZXRjaCIsImFjdGlvbiIsIm1ldGhvZCIsIm9uRXJyb3JTdWJtaXQiLCJtZXNzYWdlIiwic3RhdHVzIiwidG9TdHJpbmciLCJvblN1Y2Nlc3NTdWJtaXQiLCJlcnIiLCJvcmlnaW5hbEV2ZW50Iiwic3VibWl0dGVyIiwiZm9ybUFjdGlvbiIsImZvcm1NZXRob2QiLCJmb3JtVGFyZ2V0Iiwic2V0dGluZ3MiLCJ0b1VwcGVyQ2FzZSIsImludmFsaWRFbGVtZW50cyIsImludmFsaWRFbGVtZW50Iiwic2Nyb2xsVG9FbGVtZW50IiwiZWxlbWVudHMiLCJ2cCIsImVuZHNPbiIsInJlc3BvbnNlIiwidmFsaWRhdGlvblNjb3BlIiwiZXJyb3JFdmVudE5hbWUiLCJjaGVja1ZhbGlkaXR5IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJGb3JtRGF0YSIsImluaXRGb3JtIiwiQnM0SWNvbkNvbXBvbmVudCIsInN0YXR1c1RleHQiLCJoZWFkZXJzIiwiY2F0Y2giLCJjcmVhdGVFbGVtZW50TlMiLCJ0ZXh0Q29udGVudCIsInN2ZyIsIm5ld0NvbG9yIiwic3RhcnRzV2l0aCIsInNpemUiLCJkaXJlY3Rpb24iLCJjbGFzc1N0cmluZyIsImdldEVsZW1lbnRGcm9tRXZlbnQiLCJNb2RhbFNlcnZpY2UiLCJFVkVOVF9ISURERU4iLCJCczRNb2RhbEl0ZW1Db21wb25lbnQiLCJvbkhpZGRlbiIsImRpc21pc3MiLCJpbml0TW9kYWxTZXJ2aWNlIiwibW9kYWwiLCJtb2RhbEVsIiwibW9kYWxTZXJ2aWNlIiwiZm9jdXMiLCJiYWNrZHJvcCIsIm5vdGlmaWNhdGlvbkNvbnRhaW5lciIsIiRwYXJlbnQiLCJvbkl0ZW1IaWRlIiwiRVZFTlRfU0hPV04iLCJDTEFTU19OQU1FX0NPTExBUFNFRCIsIkJzNE5hdmJhckNvbXBvbmVudCIsImlzQ29sbGFwc2VkIiwiY29sbGFwc2VTZWxlY3RvciIsIm9uU3RhdGVDaGFuZ2UiLCJjb2xsYXBzZVRhcmdldHMiLCJyb3V0ZXJFdmVudHMiLCJvbk5ld1BhZ2VSZWFkeSIsInNldENvbGxhcHNlRWxlbWVudCIsImNvbGxhcHNlRWxlbWVudHMiLCJjb2xsYXBzZUVsZW1lbnQiLCJjZSIsImRpc3Bvc2VDb2xsYXBzZVRhcmdldCIsImRpc3Bvc2VDb2xsYXBzZVRhcmdldHMiLCJCczROb3RpZmljYXRpb25Db250YWluZXJDb21wb25lbnQiLCJub3RpZmljYXRpb25zIiwicG9zaXRpb25DbGFzcyIsImNoYW5uZWxOYW1lIiwibm90aWZpY2F0aW9uIiwib25TaG93Tm90aWZpY2F0aW9uIiwiQnM0U2Nyb2xsc3B5Q29tcG9uZW50IiwiZ2V0VXJsIiwibGFiZWxUZW1wbGF0ZSIsIkJzNFNoYXJlQ29tcG9uZW50IiwiZ2V0U2NvcGVEZWZhdWx0cyIsImNvdW50Iiwib25FeHRlcm5hbE9wZW5FdmVudCIsIm9uRXh0ZXJuYWxDbG9zZUV2ZW50IiwiZ2V0RGVmYXVsdFNoYXJlU2VydmljZXMiLCJuZXdMaW5lIiwic2hhcmVJdGVtcyIsImxhYmVsIiwidXJsVGVtcGxhdGUiLCJtZWRpYVVybFRlbXBsYXRlIiwiYXZhaWxhYmxlRm9yIiwiaXNJb3MiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0FuZHJvaWQiLCJicm93c2VyU3VwcG9ydHNOYXRpdmVTaGFyZSIsInNoYXJlIiwiaXNEZXNrdG9wIiwiaXNOYXRpdmUiLCJkcm9wZG93bklkIiwiZHJvcGRvd25EaXJlY3Rpb24iLCJzaGFyZU9uU2VydmljZSIsImRyb3Bkb3duIiwiY2xvc2UiLCJnZXRVUkxGb3JTaGFyZSIsImdldE1lZGlhVXJsRm9yU2hhcmUiLCJnZXRUZXh0Rm9yU2hhcmUiLCJnZXRUaXRsZUZvclNoYXJlIiwidXBkYXRlU2hhcmVVUkxzIiwic2hhcmVJdGVtIiwibWVkaWFVcmwiLCJzaGFyZVRleHQiLCJzaGFyZVRpdGxlIiwic2hhcmVVUkwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJhdmFpbGFibGUiLCJpbmNsdWRlcyIsImluaXREcm9wZG93biIsImRyb3BEb3duQnV0dG9uRWxlbWVudCIsImNvbnRyb2xsZXIiLCJvcGVuIiwic2NyZWVuIiwicm91bmQiLCJCczRTaWRlYmFyQ29tcG9uZW50IiwiY29udGFpbmVyU2VsZWN0b3IiLCJvbGRTdGF0ZSIsImF1dG9TaG93T25XaWRlclRoYW4iLCJhdXRvSGlkZU9uU2xpbW1lclRoYW4iLCJ3YXRjaE5ld1BhZ2VSZWFkeUV2ZW50IiwiZm9yY2VIaWRlT25Mb2NhdGlvblBhdGhuYW1lcyIsImZvcmNlU2hvd09uTG9jYXRpb25QYXRobmFtZXMiLCJvdmVybGF5T25TbGltbWVyVGhhbiIsIl9vbkVudmlyb25tZW50Q2hhbmdlcyIsIm9uRW52aXJvbm1lbnRDaGFuZ2VzIiwic2V0U3RhdGUiLCJnZXRTdGF0ZSIsImdldFNob3dNb2RlIiwibW9kZSIsInZ3IiwiY29tcHV0ZWRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJpbml0VG9nZ2xlQnV0dG9uRXZlbnREaXNwYXRjaGVyIiwiaW5pdFJvdXRlckV2ZW50RGlzcGF0Y2hlciIsInNldENvbnRhaW5lcnNTdHlsZSIsInRyYW5zbGF0ZVgiLCJvblNpZGUiLCJvbk92ZXJsYXkiLCJ0b2dnbGVkIiwib2Zmc2V0V2lkdGgiLCJzZXRTdGF0ZUJ5RW52aXJvbm1lbnQiLCJwYXRobmFtZSIsImdldENvbnRhaW5lcnMiLCJpbml0Q29udGFpbmVycyIsImNvbnRhaW5lcnMiLCJzZXRDb250YWluZXJTdHlsZSIsImN1cnJTdHlsZSIsImNvblN0eWxlIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwibWFyZ2luUmlnaHQiLCJ0cmFuc2l0aW9uIiwiY2xvbmUiLCJjYW1lbENhc2UiLCJ0aHJvdHRsZSIsIkRyYWdzY3JvbGwiLCJBdXRvc2Nyb2xsIiwiU2Nyb2xsRXZlbnRzU2VydmljZSIsImdldFNjcm9sbFBvc2l0aW9uIiwidGVtcGxhdGVTbGlkZXMiLCJ0ZW1wbGF0ZUNvbnRyb2xzIiwidGVtcGxhdGVJbmRpY2F0b3JzIiwiU0xJREVTSE9XX0lOTkVSX1NFTEVDVE9SIiwiU0xJREVTX1NFTEVDVE9SIiwiQnM0U2xpZGVzaG93Q29tcG9uZW50Iiwic2xpZGVzaG93SW5uZXIiLCJfc2xpZGVzaG93SW5uZXIiLCJzbGlkZUVsZW1lbnRzIiwiX3NsaWRlRWxlbWVudHMiLCJjb250cm9sc0VsZW1lbnRzIiwiX2NvbnRyb2xzRWxlbWVudHMiLCJpbmRpY2F0b3JzRWxlbWVudCIsIl9pbmRpY2F0b3JzRWxlbWVudCIsImdvVG8iLCJzbGlkZXNUb1Njcm9sbCIsImNvbnRyb2xzIiwiY29udHJvbHNQb3NpdGlvbiIsInBhdXNlT25Ib3ZlciIsInN0aWNreSIsImluZGljYXRvcnMiLCJpbmRpY2F0b3JzUG9zaXRpb24iLCJkcmFnIiwiYXV0b3BsYXkiLCJhdXRvcGxheUludGVydmFsIiwiYXV0b3BsYXlWZWxvY2l0eSIsImNvbnRyb2xQcmV2SWNvblNyYyIsImNvbnRyb2xOZXh0SWNvblNyYyIsImluZGljYXRvckFjdGl2ZUljb25TcmMiLCJpbmRpY2F0b3JJbmFjdGl2ZUljb25TcmMiLCJhbmdsZSIsInhzIiwibWluV2lkdGgiLCJzbSIsIm1kIiwibGciLCJ4bCIsImNvbnRyb2xzUG9zaXRpb25DbGFzcyIsImluZGljYXRvcnNQb3NpdGlvbkNsYXNzIiwiX29uVmlld0NoYW5nZXMiLCJfb25Nb3VzZVVwIiwib25WaWV3Q2hhbmdlcyIsIm9uVmlzaWJpbGl0eUNoYW5nZWQiLCJvblNjcm9sbGVuZCIsIm9uTW91c2VJbiIsIm9uTW91c2VPdXQiLCJzY3JvbGxUb05leHRTbGlkZSIsInNjcm9sbFRvUHJldlNsaWRlIiwic2V0U2xpZGVQb3NpdGlvbnMiLCJjZW50ZXJZIiwic2Nyb2xsVG9wIiwiY2VudGVyWCIsInNjcm9sbExlZnQiLCJzY3JvbGwiLCJzZXRPcHRpb25zIiwiZGVzdCIsInNldE9wdGlvbnNJZlVuZGVmaW5lZCIsImluaXRSZXNwb25zaXZlT3B0aW9ucyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50Iiwic2V0T3B0aW9uc0J5QnJlYWtwb2ludCIsInNldENvbnRyb2xzT3B0aW9ucyIsInhzQ29udHJvbHNQb3NpdGlvbiIsInNtQ29udHJvbHNQb3NpdGlvbiIsIm1kQ29udHJvbHNQb3NpdGlvbiIsImxnQ29udHJvbHNQb3NpdGlvbiIsInhsQ29udHJvbHNQb3NpdGlvbiIsInNldEluZGljYXRvcnNPcHRpb25zIiwieHNJbmRpY2F0b3JzUG9zaXRpb24iLCJzbUluZGljYXRvcnNQb3NpdGlvbiIsIm1kSW5kaWNhdG9yc1Bvc2l0aW9uIiwibGdJbmRpY2F0b3JzUG9zaXRpb24iLCJ4bEluZGljYXRvcnNQb3NpdGlvbiIsImlubmVyV2lkdGgiLCJlbmFibGVBdXRvcGxheSIsImRpc2FibGVBdXRvcGxheSIsImVuYWJsZURlc2t0b3BEcmFnc2Nyb2xsIiwiZGlzYWJsZURlc2t0b3BEcmFnc2Nyb2xsIiwib25CcmVha3BvaW50Q2hhbmdlcyIsIm5ld0JyZWFrcG9pbnQiLCJzZXRDZW50ZXJlZFNsaWRlQWN0aXZlIiwiZHJhZ3Njcm9sbFNlcnZpY2UiLCJjaGVja0RyYWdnYWJsZSIsImNvbnRpbnVvdXNBdXRvcGxheVNlcnZpY2UiLCJ1cGRhdGUiLCJyZXN1bWUiLCJzY3JvbGxUb05lYXJlc3RTbGlkZSIsImRlbGF5IiwicmVzdW1lVGltZXIiLCJjbGVhclRpbWVvdXQiLCJSZXNpemVPYnNlcnZlciIsInJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsIm9uTW91c2VVcCIsInVub2JzZXJ2ZSIsImluaXRTbGlkZXNob3dJbm5lciIsImluaXRTbGlkZXNob3dJbm5lclNsaWRlcyIsInNjcm9sbEV2ZW50c1NlcnZpY2UiLCJkcmFnc2Nyb2xsT3B0aW9ucyIsImRldGVjdEdsb2JhbE1vdmUiLCJlbmFibGVDb250aW51b3VzQXV0b3BsYXkiLCJhdXRvc2Nyb2xsT3B0aW9ucyIsInZlbG9jaXR5IiwiY29udGludW91c0F1dG9wbGF5SW50ZXJ2YWxJbmRleCIsImludGVydmFsc1RpbWVNcyIsInNldEludGVydmFsIiwiZGlzYWJsZUNvbnRpbnVvdXNBdXRvcGxheSIsImNsZWFySW50ZXJ2YWwiLCJlbmFibGVJbnRlcnZhbEF1dG9wbGF5IiwiYXV0b3BsYXlJbnRlcnZhbEluZGV4IiwiZGlzYWJsZUludGVydmFsQXV0b3BsYXkiLCJhZGRJdGVtc0J5Q2hpbGRzIiwiY2xhc3MiLCJnZXRUZW1wbGF0ZUF0dHJpYnV0ZXMiLCJzbGlkZUVsZW1lbnQiLCJhY3RpdmUiLCJzY3JvbGxQb3NpdGlvbiIsImdldEN1cnJlbnRDbG9zZXN0TnVtYmVyIiwiZ29hbCIsImN1cnIiLCJhYnMiLCJnZXRNb3N0Q2VudGVyZWRTbGlkZUluZGV4IiwibmVhclplcm8iLCJtaW5JbmRleCIsInNldEFsbFNsaWRlc0luYWN0aXZlIiwiZXhjbHVkZUluZGV4IiwiaXNTY3JvbGxhYmxlVG9JbmRleCIsIm1heFNjcm9sbFRvIiwiY3VycmVudEluZGV4IiwibmV4dEluZGV4IiwicHJldkluZGV4IiwibmVhcmVzdEluZGV4IiwibWFpbkJvdW5kaW5nQ2xpZW50Iiwic2xpZGVPYmplY3QiLCJyZWN0IiwiYm90dG9tIiwidG9KU09OIiwib3B0aW9uRm9yU2l6ZSIsInJlc3BvbnNpdmVTY29wZSIsIm9ic2VydmVkQXR0cmlidXRlc1RvQ2hlY2siLCJpbml0aWFsaXplZCIsInBhcnNlQXR0cmlidXRlIiwic2xpY2UiLCJwYXJzZWRBdHRyaWJ1dGVOYW1lIiwidGVtcGxhdGVIb3Jpem9udGFsIiwidGVtcGxhdGVWZXJ0aWNhbCIsImRlYWN0aXZhdGUiLCJkZWFjdGl2YXRlQWxsIiwib3B0aW9uVGFic0F1dG9IZWlnaHQiLCJvcHRpb25UYWJzQW5nbGUiLCJfb25SZXNpemUiLCJzZXRIZWlnaHQiLCJoaWdoZXN0IiwidGFiUGFuZXMiLCJ0YWJQYW5lIiwiZGlzcGxheSIsIm9mZnNldEhlaWdodCIsImZpcnN0VGFiQ29udGVudENoaWxkIiwiZ2V0VGFiQ29udGVudENoaWxkQnlJbmRleCIsInRhYnMiLCJvblRhYlNob3duRXZlbnRIYW5kbGVyIiwib25SZXNpemUiLCJzY3JvbGxhYmxlIiwicmVzaXplVGFic0FycmF5IiwibmV3U2l6ZSIsImN1clRhYiIsInNyY0VsZW1lbnQiLCJ0YWJTY3JvbGxQb3NpdGlvbiIsInNjcm9sbExlZnRUbyIsImFkZFRhYkJ5QXR0cmlidXRlIiwiZW5kc1dpdGgiLCJleHRlbmQiLCJCczRUYWdnZWRJbWFnZUNvbXBvbmVudCIsInRhZ3MiLCJwb3BvdmVyT3B0aW9ucyIsIm11bHRpUG9wb3ZlciIsInRhZ09wdGlvbnMiLCJmaWxsUG9wb3Zlck9wdGlvbnMiLCJ0cmlnZ2VyT25Gb2N1cyIsIm9uUG9wb3ZlckJvdW5kIiwib25Qb3BvdmVyU2hvd24iLCJvblBvcG92ZXJIaWRkZW4iLCJ1cGRhdGVUYWdQb3NpdGlvbnMiLCJib3VuZCIsImRlZXAiLCJwbyIsInBhcnNlQ2hpbGRUYWdzIiwiaW1hZ2UiLCJpbml0VGFncyIsImltZyIsInBhc3NJbWFnZUF0dHJpYnV0ZXMiLCJ0YWdFbCIsInYiLCJpc05hTiIsInJhbmRvbSIsInBhcnNlRmxvYXQiLCJzaGFwZSIsImJvcmRlclJhZGl1cyIsImZ1bGxTaXplIiwic21hbGxTaXplIiwidGFnRGF0YSIsInNjb3BlVGFnT3B0aW9ucyIsInRhZyIsImF0dHJzIiwic3Vic3RyIiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ3UmF0aW8iLCJoUmF0aW8iLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsImJvdW5kSW5kZXhBdHRyIiwiYm91bmRJbmRleCIsInBhcnNlSW50IiwiZm91bmRUYWciLCJmb3VuZCIsImZpdCIsImdldFByb3BlcnR5VmFsdWUiLCJUb2FzdFNlcnZpY2UiLCJCczRUb2FzdEl0ZW1Db21wb25lbnQiLCJ0b2FzdCIsImluaXRUb2FzdFNlcnZpY2UiLCJ0b2FzdEVsIiwidG9hc3RTZXJ2aWNlIiwiYXV0b2hpZGUiLCJhdXRvSGlkZSIsImFuaW1hdGlvbiIsInRvYXN0Q29udGFpbmVyIiwiQnM0VG9nZ2xlQnV0dG9uQ29tcG9uZW50IiwidGFyZ2V0SWQiLCJpc0FjdGl2ZSIsImlzQ2xvc2VkIiwib25Ub2dnbGVkRXZlbnQiLCJpbml0RXZlbnREaXNwYXRjaGVyIiwiTk9ERV9URVhUIiwiVVJJX0FUVFJTIiwiQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiIsIlNBRkVfVVJMX1BBVFRFUk4iLCJEQVRBX1VSTF9QQVRURVJOIiwiREVGQVVMVF9BTExPV0xJU1QiLCJiciIsImNvbCIsImNvZGUiLCJkaXYiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwibGkiLCJvbCIsInAiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1IiwidWwiLCJNSUxMSVNFQ09ORFNfTVVMVElQTElFUiIsIlRSQU5TSVRJT05fRU5EIiwibWFwRGF0YSIsInN0b3JlRGF0YSIsImRhdGEiLCJrZXlQcm9wZXJ0aWVzIiwic2V0RGF0YSIsImluc3RhbmNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJvbmUiLCJvcmlnaW5hbFR5cGVFdmVudCIsImV4dHJhUGFyYW1ldGVycyIsIm5vcm1hbGl6ZURhdGEiLCJub3JtYWxpemVEYXRhS2V5IiwiY2hyIiwidG9Mb3dlckNhc2UiLCJzZXREYXRhQXR0cmlidXRlIiwicmVtb3ZlRGF0YUF0dHJpYnV0ZSIsImdldERhdGFBdHRyaWJ1dGVzIiwiZ2V0RGF0YUF0dHJpYnV0ZSIsIm9mZnNldExlZnQiLCJ0b2dnbGVDbGFzcyIsIm1ha2VBcnJheSIsIm1hdGNoZXMiLCJzZWxlY3RvciIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJjYWxsIiwiZG9jdW1lbnRFbGVtZW50IiwiZmluZE9uZSIsImNoaWxkcmVuIiwicGFyZW50cyIsImFuY2VzdG9yIiwicGFyZW50Tm9kZSIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImNsb3Nlc3QiLCJzaWJsaW5ncyIsInByZXZpb3VzIiwicHJldmlvdXNTaWJsaW5nIiwiYWxsb3dlZEF0dHJpYnV0ZSIsImF0dHIiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJOYW1lIiwibm9kZU5hbWUiLCJCb29sZWFuIiwibm9kZVZhbHVlIiwicmVnRXhwIiwiYXR0clJlZ2V4IiwiUmVnRXhwIiwibGVuIiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsImFsbG93TGlzdCIsInNhbml0aXplRm4iLCJkb21QYXJzZXIiLCJET01QYXJzZXIiLCJjcmVhdGVkRG9jdW1lbnQiLCJwYXJzZUZyb21TdHJpbmciLCJhbGxvd2xpc3RLZXlzIiwiZWxOYW1lIiwicmVtb3ZlQ2hpbGQiLCJhdHRyaWJ1dGVMaXN0IiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJ0b1R5cGUiLCJnZXRTZWxlY3RvciIsImhyZWZBdHRyIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEVsZW1lbnRGcm9tU2VsZWN0b3IiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiaXNFbGVtZW50Iiwib2JqIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsImNhbGxlZCIsImR1cmF0aW9uUGFkZGluZyIsImVtdWxhdGVkRHVyYXRpb24iLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsInRlc3QiLCJub2RlTGlzdCIsImlzVmlzaWJsZSIsImVsZW1lbnRTdHlsZSIsInBhcmVudE5vZGVTdHlsZSIsInZpc2liaWxpdHkiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImdldFJvb3ROb2RlIiwicm9vdCIsIlNoYWRvd1Jvb3QiLCJub29wIiwicmVmbG93IiwiZ2V0alF1ZXJ5IiwialF1ZXJ5IiwiTm90aWZpY2F0aW9uIiwiTW9kYWwiLCJpY29uVXJsIiwiY29udGV4dHVhbENsYXNzIiwiX29wdGlvbnMiLCJOQU1FIiwiREFUQV9LRVkiLCJEQVRBX0FQSV9LRVkiLCJBUlJPV19MRUZUX0tFWUNPREUiLCJBUlJPV19SSUdIVF9LRVlDT0RFIiwiVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCIsIlNXSVBFX1RIUkVTSE9MRCIsIkRlZmF1bHRUeXBlIiwiRGlyZWN0aW9uIiwiTkVYVCIsIlBSRVYiLCJMRUZUIiwiUklHSFQiLCJFdmVudCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIU1RBUlQiLCJUT1VDSE1PVkUiLCJUT1VDSEVORCIsIlBPSU5URVJET1dOIiwiUE9JTlRFUlVQIiwiRFJBR19TVEFSVCIsIkxPQURfREFUQV9BUEkiLCJDTElDS19EQVRBX0FQSSIsIkNsYXNzTmFtZSIsIkNBUk9VU0VMIiwiQUNUSVZFIiwiSVRFTSIsIlBPSU5URVJfRVZFTlQiLCJTZWxlY3RvciIsIkFDVElWRV9JVEVNIiwiSVRFTV9JTUciLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiUG9pbnRlclR5cGUiLCJUT1VDSCIsIlBFTiIsImdldENvbmZpZyIsInRvdWNoU3VwcG9ydGVkIiwibWF4VG91Y2hQb2ludHMiLCJwb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsImlzU2xpZGluZyIsImhpZGRlbiIsImlzUGF1c2VkIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlRWxlbWVudCIsImFjdGl2ZUluZGV4IiwiZ2V0SXRlbUluZGV4IiwidG91Y2hUaW1lb3V0IiwiaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJ0b3VjaERlbHRhWCIsImtleWRvd24iLCJhZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwiaXRlbUltZyIsInByZXZlbnREcmFnIiwicmVtb3ZlVG91Y2hFdmVudExpc3RlbmVycyIsInBvaW50ZXJUeXBlIiwidG91Y2hTdGFydFgiLCJnZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXNHb2luZ1RvV3JhcCIsImRlbHRhIiwiaXRlbUluZGV4IiwidHJpZ2dlclNsaWRlRXZlbnQiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJzZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwibmV4dEluZGljYXRvciIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJzbGlkZUV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsIm5leHRFbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJTZWxlY3RvckVuZ2luZSIsIlZFUlNJT04iLCJDTEFTU19OQU1FX1NIT1ciLCJDTEFTU19OQU1FX0NPTExBUFNFIiwiQ0xBU1NfTkFNRV9DT0xMQVBTSU5HIiwiV0lEVEgiLCJIRUlHSFQiLCJTRUxFQ1RPUl9BQ1RJVkVTIiwidHJpZ2dlckxpc3QiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX2VsZW1lbnQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl90cmlnZ2VyQXJyYXkiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJpc0V4cGFuZGVkIiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwiX3NlbGVjdG9yIiwidGVtcEFjdGl2ZURhdGEiLCJzdGFydEV2ZW50IiwiZWxlbUFjdGl2ZSIsImNvbGxhcHNlSW50ZXJmYWNlIiwiZGltZW5zaW9uIiwiX2dldERpbWVuc2lvbiIsInNldFRyYW5zaXRpb25pbmciLCJjb21wbGV0ZSIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsInRyaWdnZXJBcnJheUxlbmd0aCIsImlzVHJhbnNpdGlvbmluZyIsImhhc1dpZHRoIiwianF1ZXJ5Iiwic2VsZWN0ZWQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJUeXBlRXJyb3IiLCJFU0NBUEVfS0VZQ09ERSIsIlNQQUNFX0tFWUNPREUiLCJUQUJfS0VZQ09ERSIsIkFSUk9XX1VQX0tFWUNPREUiLCJBUlJPV19ET1dOX0tFWUNPREUiLCJSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0giLCJSRUdFWFBfS0VZRE9XTiIsIkVWRU5UIiwiSElERSIsIkhJRERFTiIsIlNIT1ciLCJTSE9XTiIsIkNMSUNLIiwiS0VZRE9XTl9EQVRBX0FQSSIsIktFWVVQX0RBVEFfQVBJIiwiQ0xBU1NOQU1FIiwiRElTQUJMRUQiLCJEUk9QVVAiLCJEUk9QUklHSFQiLCJEUk9QTEVGVCIsIk1FTlVSSUdIVCIsIk1FTlVMRUZUIiwiUE9TSVRJT05fU1RBVElDIiwiU0VMRUNUT1IiLCJEQVRBX1RPR0dMRSIsIkZPUk1fQ0hJTEQiLCJNRU5VIiwiTkFWQkFSX05BViIsIlZJU0lCTEVfSVRFTVMiLCJBVFRBQ0hNRU5UTUFQIiwiVE9QIiwiVE9QRU5EIiwiQk9UVE9NIiwiQk9UVE9NRU5EIiwiUklHSFRFTkQiLCJMRUZURU5EIiwiREVGQVVMVCIsImJvdW5kYXJ5IiwicmVmZXJlbmNlIiwiREVGQVVMVFRZUEUiLCJjbG9zZUFsbCIsIm1lbnUiLCJ0cmlnZ2VyQ2xvc2VFbGVtZW50IiwiX2NsZWFyTWVudXMiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwib3V0c2lkZUNsaWNrTGlzdGVuZXIiLCJjbG9zZU9uQ2xpY2tPdXRzaWRlIiwiZGlzYWJsZWQiLCJzaG93RXZlbnQiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudFRhcmdldCIsIl9nZXRQbGFjZW1lbnQiLCJwYXJlbnREcm9wZG93biIsIm9mZnNldENvbmYiLCJmbiIsIm9mZnNldHMiLCJwb3BwZXJDb25maWciLCJlbmFibGVkIiwiYXBwbHlTdHlsZSIsIlRvb2x0aXBTZXJ2aWNlIiwiRVNDQVBFX0tFWSIsIkVWRU5UX0hJREVfUFJFVkVOVEVEIiwiRVZFTlRfRk9DVVNJTiIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX0NMSUNLX0RJU01JU1MiLCJFVkVOVF9LRVlET1dOX0RJU01JU1MiLCJFVkVOVF9NT1VTRVVQX0RJU01JU1MiLCJFVkVOVF9NT1VTRURPV05fRElTTUlTUyIsIkNMQVNTX05BTUVfU0NST0xMQkFSX01FQVNVUkVSIiwiQ0xBU1NfTkFNRV9CQUNLRFJPUCIsIkNMQVNTX05BTUVfT1BFTiIsIkNMQVNTX05BTUVfRkFERSIsIkNMQVNTX05BTUVfU1RBVElDIiwiU0VMRUNUT1JfRElBTE9HIiwiU0VMRUNUT1JfTU9EQUxfQk9EWSIsIlNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQiLCJTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiaGlkZUV2ZW50IiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIm1vZGFsQm9keSIsIl9lbmZvcmNlRm9jdXMiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJvbkZvY3VzSW4iLCJvbkVzY2FwZUV2ZW50IiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJvblJlc2l6ZUV2ZW50IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJhbmltYXRlIiwiYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJjYWxsYmFja1JlbW92ZSIsImlzTW9kYWxPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIm92ZXJmbG93WSIsIm1vZGFsVHJhbnNpdGlvbkR1cmF0aW9uIiwib25UcmFuc2l0aW9uRW5kIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJjYWxjdWxhdGVkTWFyZ2luIiwicGFkZGluZyIsIm1hcmdpbiIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiY2xpZW50V2lkdGgiLCJDTEFTU19QUkVGSVgiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJJTlNFUlRFRCIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIlNFTEVDVE9SX1RJVExFIiwiU0VMRUNUT1JfQ09OVEVOVCIsImJhY2tncm91bmRDb2xvciIsImlzV2l0aENvbnRlbnQiLCJnZXRUaXRsZSIsIl9nZXRDb250ZW50Iiwic2V0Q29udGVudCIsImdldFRpcEVsZW1lbnQiLCJzZXRFbGVtZW50Q29udGVudCIsIl9hZGRBdHRhY2htZW50Q2xhc3MiLCJhdHRhY2htZW50IiwiX2NsZWFuVGlwQ2xhc3MiLCJ0YWJDbGFzcyIsIm1hcCIsInRva2VuIiwidENsYXNzIiwiQ0xBU1NfTkFNRV9ISURFIiwiQ0xBU1NfTkFNRV9TSE9XSU5HIiwiX3RpbWVvdXQiLCJfc2V0TGlzdGVuZXJzIiwiY2xhc3NPZiIsIk1hbmlwdWxhdG9yIiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJzYW5pdGl6ZSIsIkF0dGFjaG1lbnRNYXAiLCJBVVRPIiwiQ0xBU1NfTkFNRV9NT0RBTCIsIkhPVkVSX1NUQVRFX1NIT1ciLCJIT1ZFUl9TVEFURV9PVVQiLCJTRUxFQ1RPUl9UT09MVElQX0lOTkVSIiwiVFJJR0dFUl9IT1ZFUiIsIlRSSUdHRVJfRk9DVVMiLCJUUklHR0VSX0NMSUNLIiwiVFJJR0dFUl9NQU5VQUwiLCJlbmFibGUiLCJfaXNFbmFibGVkIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiY29udGV4dCIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsIl9hY3RpdmVUcmlnZ2VyIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsIm1vZGFsRWxlbWVudCIsIl9oaWRlTW9kYWxIYW5kbGVyIiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJvd25lckRvY3VtZW50IiwidGlwSWQiLCJfZ2V0QXR0YWNobWVudCIsIl9nZXRDb250YWluZXIiLCJfZml4VHJhbnNpdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2hvdmVyU3RhdGUiLCJkZWZhdWx0QnNDb25maWciLCJfZ2V0T2Zmc2V0Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsInRyaWdnZXJzIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiY2xvc2VzdE1vZGFsRWwiLCJfZml4VGl0bGUiLCJ0aXRsZVR5cGUiLCJkZWxlZ2F0ZVRhcmdldCIsImRhdGFBdHRyaWJ1dGVzIiwiZGF0YUF0dHIiLCJwb3BwZXJEYXRhIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIkJhc2VDYWNoZSIsImNyZWF0ZUNhY2hlIiwiZGVsIiwiY2xlYXIiLCJpZGJTdG9yYWdlIiwiaWRiQ2FjaGUiLCJjdXN0b21TdG9yYWdlIiwic3NyIiwiRG90QWRhcHRlciIsIndlYWtSZWZlcmVuY2UiLCJjb3VudGVyIiwiZGVmaW5lUHJvcGVydHkiLCJ3ZWFrbWFwIiwiX19ydiIsImNhbGxiYWNrcyIsImNsZWFudXBXZWFrUmVmZXJlbmNlIiwicmVmIiwicG9pbnRlcnMiLCJzdHViRnVuY3Rpb24iLCJvcmlnaW5hbCIsImFwcGx5IiwiciIsImsiLCJpc0FycmF5Iiwic3luYyIsIm9ic2VydmVNdXRhdGlvbnMiLCJrZXlwYXRoIiwiQVJSQVlfTUVUSE9EUyIsInVub2JzZXJ2ZU11dGF0aW9ucyIsImlkeCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiX2NhbGxiYWNrcyIsImNiIiwiZG90QWRhcHRlciIsInBhcnNlVHlwZSIsIlBSSU1JVElWRSIsIktFWVBBVEgiLCJPYnNlcnZlciIsIkZPUk1BVFRFUl9BUkdTIiwiRk9STUFUVEVSX1NQTElUIiwiZ2V0SW5wdXRWYWx1ZSIsImlkZW50aWZpZXIiLCJnZXRTdGFyQXJndW1lbnRzIiwicGFyc2VUYXJnZXQiLCJvYnNlcnZlciIsImdldEl0ZXJhdGlvbkFsaWFzIiwibW9kZWxOYW1lIiwicGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMiLCJmb3JtYXR0ZXJJbmRleCIsImFyZyIsImFpIiwicHJpbWl0aXZlVmFsdWUiLCJmb3JtYXR0ZXJPYnNlcnZlcnMiLCJmb3JtYXR0ZWRWYWx1ZSIsInN0YXJ0SW5kZXgiLCJwcm9taXNlZCIsInJlZHVjZSIsImRlY2xhcmF0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm1hdHRlciIsInByb2Nlc3NlZEFyZ3MiLCJldmVudEhhbmRsZXIiLCJldiIsInJlYWxWYWx1ZSIsInB1Ymxpc2giLCJyZWR1Y2VSaWdodCIsInNldFZhbHVlIiwiX2JpbmQiLCJwcmVsb2FkRGF0YSIsIl91bmJpbmQiLCJmaSIsIl91cGRhdGUiLCJnZXRWYWx1ZSIsInJlZ2V4cCIsImJpbmRlclJlZ2V4IiwiQWRkQ2xhc3NCaW5kZXIiLCJzdGF0aWNDbGFzc2VzIiwiQW5pbWF0ZVN0YXJCaW5kZXIiLCJhbmltYXRlQ2xhc3NOYW1lIiwic3RhcnQiLCJBc3NpZ25Qcm9wZXJ0eUJpbmRlciIsInByb3BlcnR5TmFtZSIsIkFzc2lnbkJpbmRlciIsIkF0dHJpYnV0ZUJpbmRlciIsIm5ld1ZhbHVlRm9ybWF0dGVkIiwiY2hhbmdlZCIsIkJsb2NrQmluZGVyIiwiZ2V0U3RyaW5nIiwiQ2hlY2tlZEJpbmRlciIsIkNsYXNzU3RhckJpbmRlciIsImVsZSIsIl8iLCJpc0N1c3RvbUVsZW1lbnQiLCJ3YWl0Rm9yQ3VzdG9tRWxlbWVudCIsIk5PX1JJQkFfQ09NUE9ORU5UX0VSUk9SX01FU1NBR0UiLCJDb21wb25lbnRBdHRyaWJ1dGVCaW5kZXIiLCJfX3JvdXRpbmUiLCJzZXRCaW5kZXJBdHRyaWJ1dGUiLCJfX2JpbmQiLCJvYnNlcnZlQXR0cmlidXRlIiwiY29tcG9uZW50QXR0cmlidXRlT2JzZXJ2ZXIiLCJnZXRCaW5kZXJBdHRyaWJ1dGUiLCJEaXNhYmxlZEJpbmRlciIsIk5vRHJhZ0JpbmRlciIsIl9vbkRyYWciLCJvbkRyYWciLCJWaWV3IiwidGltZXMiLCJFYWNoU3RhckJpbmRlciIsIm1hcmtlciIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJpdGVyYXRlZCIsImNvbGxlY3Rpb24iLCJpc09iamVjdCIsImluZGV4UHJvcCIsImVscyIsIm5leHRTaWJsaW5nIiwibWF0Y2hJbmRleCIsIm5leHRWaWV3IiwiYmluZGluZ3MiLCJiaW5kaW5nIiwiRWxlbWVudEJpbmRlciIsIkVuYWJsZWRCaW5kZXIiLCJGbGV4U29ydENoaWxkc0JpbmRlciIsImRlc2NlbmRpbmciLCJjaGlsZHJlbnMiLCJzb3J0QnkiLCJvcmRlciIsIkhpZGVCaW5kZXIiLCJIdG1sQmluZGVyIiwiSWZCaW5kZXIiLCJhdHRhY2hlZCIsIm5lc3RlZCIsIk1heGxlbmd0aEJpbmRlciIsIm1heExlbmd0aCIsIk11c3RhY2hlVGV4dEJpbmRlciIsIm5vZGUiLCJPbkV2ZW50QmluZGVyIiwiUGFyZW50QmluZGVyIiwiYmluZEludGVybiIsImxvY2FsTmFtZSIsImN1c3RvbUVsZW1lbnRzIiwiUmVhZG9ubHlCaW5kZXIiLCJyZWFkT25seSIsIlJlbW92ZUNsYXNzQmluZGVyIiwic3RhdGljQ2xhc3Nlc1N0cmluZyIsInJlZ2V4IiwiU2hvd0JpbmRlciIsIlNyY3NldFNpemVCaW5kZXIiLCJzcmNzZXQiLCJzZXBlcmF0b3IiLCJpdGVyU2l6ZSIsIlN0eWxlQmFja2dyb3VuZEltYWdlQmluZGVyIiwicHJvcCIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJTdHlsZVN0YXJCaW5kZXIiLCJrZWJhYkNhc2UiLCJTdHlsZUJpbmRlciIsIlRhZ1N0YXJCaW5kZXIiLCJvcmlnaW5hbFRhZyIsIm9sZEVsIiwiY3VyVGFnTmFtZSIsIm5ld0VsIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJhdHRyaWJ1dGUiLCJyZXBsYWNlQ2hpbGQiLCJUZW1wbGF0ZUJpbmRlciIsIlRleHRCaW5kZXIiLCJUb2dnbGVPbkV2ZW50QmluZGVyIiwicHJvcGVydHlLZXkiLCJVbmNoZWNrZWRCaW5kZXIiLCJVbmxlc3NCaW5kZXIiLCJERUZBVUxUX0VWRU5UUyIsIlZhbHVlQmluZGVyIiwiY29udGVudGVkaXRhYmxlIiwiaXNSYWRpbyIsImlzT3B0aW9uIiwicmVuZGVyRWxlbWVudCIsInBhcnNlSnNvblN0cmluZyIsImdldFJhbmRvbUNvbG9yIiwiY29uc29sZUNvbG91cmVkIiwiSFRNTEVsZW1lbnQiLCJfZGVidWciLCJfY29sb3IiLCJfbG9nIiwibG9hZEF0dHJpYnV0ZXMiLCJnZXRQYXNzZWRPYnNlcnZlZEF0dHJpYnV0ZXMiLCJhbGxQYXNzZWRPYnNlcnZlZEF0dHJpYnV0ZXNBcmVJbml0aWFsaXplZCIsImNoZWNrUmVxdWlyZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlSXNQYXNzZWQiLCJvYnNlcnZlZEF0dHJpYnV0ZSIsIm9hMmMiLCJwYXNzZWQiLCJldmVyeSIsInJlcXVpcmVkQXR0cmlidXRlIiwiTUFYX1NBRkVfSU5URUdFUiIsImpzb25TdHJpbmciLCJzZWxmIiwiYWRvcHRlZENhbGxiYWNrIiwib2xkRG9jdW1lbnQiLCJuZXdEb2N1bWVudCIsImxvYWRUZW1wbGF0ZSIsInRlbXBsYXRlTG9hZGVkIiwiYmVmb3JlVGVtcGxhdGUiLCJvblJlYWR5IiwiYmluZHMiLCJfYmluZHMiLCJfYm91bmQiLCJjb25uZWN0ZWQiLCJfY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiX2Rpc2Nvbm5lY3RlZCIsImxpZmVjeWNsZUV2ZW50cyIsImdldExpZmVjeWNsZUV2ZW50RGF0YSIsImFmdGVyQWxsQmluZCIsInRocm93IiwiYXV0b2JpbmQiLCJfYmVmb3JlQmluZCIsIl9hZnRlckJpbmQiLCJjYWxsRm9ybWF0dGVySGFuZGxlciIsImFyZ3NGb3JtYXR0ZXJIYW5kbGVyIiwiZm5BcmdzIiwiZ2V0VmlldyIsInZpZXdPcHRpb25zIiwiZ2V0Vmlld09wdGlvbnMiLCJidWlsZCIsInJlbW92ZVRlbXBsYXRlcyIsInRyYW5zZm9ybVRlbXBsYXRlQXR0cmlidXRlIiwidGVtcGxhdGVBdHRyaWJ1dGVzIiwiYXR0clZhbHVlIiwic29tZSIsIlRFWFQiLCJCSU5ESU5HIiwiREVDTEFSQVRJT05fU1BMSVQiLCJhZGFwdGVycyIsIkNvcmVTZXJ2aWNlIiwib25lcnJvciIsIm1zZyIsImxpbmUiLCJpc1N0cmluZyIsImlzRGVmaW5lZCIsImlzTnVtYmVyIiwiY29udGFpbnNGb3JtYXR0ZXIiLCJTdHJpbmciLCJzaXplRm9ybWF0dGVyIiwiZW1wdHlGb3JtYXR0ZXIiLCJnZXRGb3JtYXR0ZXIiLCJmaXJzdEZvcm1hdHRlciIsImNoYXJBdCIsImlzTGFzdEZvcm1hdHRlciIsImxhc3RGb3JtYXR0ZXIiLCJyYW5kb21Gb3JtYXR0ZXIiLCJyYW5nZUZvcm1hdHRlciIsInNldEZvcm1hdHRlciIsIm92ZXJsYXBzRm9ybWF0dGVyIiwiam9pbkZvcm1hdHRlciIsImFycmF5IiwiZGVsaW1ldGVyIiwiZXF1YWxzIiwiYXJyYXlPck1heE51bWJlciIsImZsb29yIiwiYXJyIiwiZW5kIiwiYW5kRm9ybWF0dGVyIiwiYmV0d2VlbkZvcm1hdHRlciIsIm51bSIsImVndEZvcm1hdHRlciIsImVsdEZvcm1hdHRlciIsImVxRm9ybWF0dGVyIiwiZ3RGb3JtYXR0ZXIiLCJuZUZvcm1hdHRlciIsImx0Rm9ybWF0dGVyIiwib3JGb3JtYXR0ZXIiLCJub3RGb3JtYXR0ZXIiLCJqdXN0RGlnaXRzIiwiZGlnaXRzRm9ybWF0dGVyIiwiZGl2aWRlZEJ5Rm9ybWF0dGVyIiwiZXZlbkZvcm1hdHRlciIsIl9nY2QiLCJnY2RGb3JtYXR0ZXIiLCJwbHVzRm9ybWF0dGVyIiwibWludXNGb3JtYXR0ZXIiLCJ0aW1lc0Zvcm1hdHRlciIsIm1vZHVsb0Zvcm1hdHRlciIsInVuZXZlbkZvcm1hdHRlciIsImFyZ3NGb3JtYXR0ZXIiLCJiaW5kZXIiLCJjYWxsTmFtZUZvcm1hdHRlciIsIm9iamVjdCIsImNhbGxGb3JtYXR0ZXIiLCJkZWJ1Z0Zvcm1hdHRlciIsInRvUHJpbnQiLCJsZXZlbCIsImRlZmF1bHRGb3JtYXR0ZXIiLCJkZWZhdWx0VmFsdWUiLCJpc0Rlc2t0b3BGb3JtYXR0ZXIiLCJpc01vYmlsZUZvcm1hdHRlciIsIm1hcEZvcm1hdHRlciIsIm9zRm9ybWF0dGVyIiwicHJlZmVyRm9ybWF0dGVyIiwidGVybmFyeUZvcm1hdHRlciIsImlzTW9iaWxlIiwiYXJndW1lbnRzIiwiZ2V0T1MiLCJwcmVmZXJWYWx1ZSIsImNvbmRpdGlvbiIsInllcyIsIm5vIiwiYXBwZW5kRm9ybWF0dGVyIiwiY2FwaXRhbGl6ZSIsImNhcGl0YWxpemVGb3JtYXR0ZXIiLCJjdXRGb3JtYXR0ZXIiLCJjdXRBdCIsImRlbGltaXRhdGlvbiIsImRvd25jYXNlRm9ybWF0dGVyIiwiZW5kc1dpdGhGb3JtYXR0ZXIiLCJjaGVja1N0YXJ0IiwiZmlsbGVkRm9ybWF0dGVyIiwibWF0Y2hGb3JtYXR0ZXIiLCJwYWRTdGFydEZvcm1hdHRlciIsInBhZEVuZEZvcm1hdHRlciIsIm51bWJlckZvcm1hdEZvcm1hdHRlciIsInBsdXJhbGl6ZUZvcm1hdHRlciIsInByZXBlbmRGb3JtYXR0ZXIiLCJ1cGNhc2VGb3JtYXR0ZXIiLCJyZXBsYWNlRm9ybWF0dGVyIiwicmVwbGFjZUZpcnN0Rm9ybWF0dGVyIiwic2xpY2VGb3JtYXR0ZXIiLCJzdGFydHNXaXRoRm9ybWF0dGVyIiwic3RyaXBGb3JtYXR0ZXIiLCJzdHJpcEh0bWxGb3JtYXR0ZXIiLCJ0b0RlY2ltYWxGb3JtYXR0ZXIiLCJpc0ludGVnZXJGb3JtYXR0ZXIiLCJERUZBVUxUX0RFQ0lNQUxfU0VQQVJBVE9SIiwiREVGQVVMVF9USE9VU0FORF9TRVBBUkFUT1IiLCJERUZBVUxUX1BSRUNJU0lPTiIsInByZWNpc2lvbiIsImRlY2ltYWxTZXBhcmF0b3IiLCJ0aG91c2FuZFNlcGFyYXRvciIsInJldFN0ciIsInRvRml4ZWQiLCJyZXQiLCJwYWRTdHJpbmciLCJwYWRFbmQiLCJwYWRTdGFydCIsInNpbmd1bGFyIiwicGx1cmFsIiwicmVwbGFjZVZhbHVlIiwiYm9vbGVhbkZvcm1hdHRlciIsImlzQXJyYXlGb3JtYXR0ZXIiLCJpc0Jvb2xlYW5Gb3JtYXR0ZXIiLCJpc0RlZmluZWRGb3JtYXR0ZXIiLCJpc051bWJlckZvcm1hdHRlciIsImlzT2JqZWN0Rm9ybWF0dGVyIiwiaXNTdHJpbmdGb3JtYXR0ZXIiLCJpc1VuZGVmaW5lZEZvcm1hdHRlciIsImpzb25Gb3JtYXR0ZXIiLCJwYXJzZUZvcm1hdHRlciIsInRvQmFzZTY0Rm9ybWF0dGVyIiwidG9TdHJpbmdGb3JtYXR0ZXIiLCJ0b0Zsb2F0Rm9ybWF0dGVyIiwidG9JbnRlZ2VyRm9ybWF0dGVyIiwidG9OdW1iZXJGb3JtYXR0ZXIiLCJpc0Jvb2xlYW4iLCJuIiwiaXNVbmRlZmluZWQiLCJqc29uU3RyaW5naWZ5Iiwic3BhY2UiLCJyZXBsYWNlU2luZ2xlUXVvdGUiLCJ0b0Jhc2U2NCIsInJldEkiLCJyZXRGIiwiZ2V0TnVtYmVyIiwiZGVmIiwidXBkYXRlT3B0aW9ucyIsImludGVyZmFjZXMiLCJyb290SW50ZXJmYWNlIiwidG9rZW5pemUiLCJ0b2tlbnMiLCJjdXJyZW50IiwicGF0aCIsIm9iamVjdFBhdGgiLCJwYXJzZVJlc3VsdCIsInBhcnNlIiwiZ2V0Um9vdE9iamVjdCIsInJlYWxpemUiLCJ1bnJlYWNoZWQiLCJyb290UHJvcCIsInBhcnNlRGVjbGFyYXRpb24iLCJwaXBlcyIsInBhcnNlVGVtcGxhdGUiLCJwYXJzZU5vZGUiLCJ0ZW1wbGF0ZURlbGltaXRlcnMiLCJibG9ja1JlY3Vyc2lvbiIsIlRFWFRfTk9ERSIsImNyZWF0ZVRleHROb2RlIiwiYnVpbGRCaW5kaW5nIiwidHJhdmVyc2UiLCJjaGlsZE5vZGUiLCJkZWxpbWl0ZXJzIiwibGFzdEluZGV4IiwibGFzdFRva2VuIiwiTW9kdWxlc1NlcnZpY2UiLCJMaWZlY3ljbGVTZXJ2aWNlIiwicHJlZml4IiwiX3ByZWZpeCIsIl9mdWxsUHJlZml4IiwiZnVsbFByZWZpeCIsImNvbmZpZ3VyZSIsImJsb2NrTm9kZU5hbWVzIiwiYmxvY2tVbmtub3duQ3VzdG9tRWxlbWVudHMiLCJhdHRyaWJ1dGVCaW5kZXJzIiwicmVtb3ZlQmluZGVyQXR0cmlidXRlcyIsIk1vZHVsZUVsZW1lbnRTZXJ2aWNlIiwiQWRhcHRlclNlcnZpY2UiLCJhZGFwdGVyIiwiZmFsbGJhY2tOYW1lIiwiZm9yY2VGYWxsYmFjayIsIkJpbmRlcnNTZXJ2aWNlIiwiQ29tcG9uZW50U2VydmljZSIsIkZvcm1hdHRlclNlcnZpY2UiLCJpc0pzb24iLCJzZXRSZXF1ZXN0SGVhZGVyRWFjaFJlcXVlc3QiLCJfcmVxdWVzdEhlYWRlcnNFYWNoUmVxdWVzdCIsImdldEpTT04iLCJwb3N0IiwiZGF0YVR5cGUiLCJwdXQiLCJwYXJzZURhdGFUeXBlIiwiY29udGVudFR5cGUiLCJhY2NlcHQiLCJoZWFkZXIiLCJjcm9zc0RvbWFpbiIsImNhY2hlIiwicXVlcnlTdHIiLCJzZXBhcmF0b3IiLCJjcmVkZW50aWFscyIsImJvZHlSZXN1bHQiLCJvayIsInJlZGlyZWN0ZWQiLCJhcnJheUJ1ZmZlciIsImJsb2IiLCJib2R5VXNlZCIsImZvcm1EYXRhIiwiZ2V0RW1wdHkiLCJyZXNldFRpbWVvdXQiLCJjaGVja1N0YXRlcyIsIm9uRXJyb3IiLCJuZXdTdGF0dXMiLCJvbGRTdGF0dXMiLCJjb250YWluZXJIdG1sIiwiZmlyc3RQYWdlTG9hZCIsImdldFN0YXRlcyIsInN0YXRlcyIsImFsbEJvdW5kIiwib25BbGxCb3VuZCIsIm9uVGltZW91dCIsImVycm9yTWVzc2FnZSIsInRpbWVvdXQiLCJsaWZlY3ljbGUiLCJBZGFwdGVyIiwiYW5jaG9yRWwiLCIkcm9vdCIsIiRyb290U2NvcGUiLCJyZWdpc3RDb21wb25lbnRzIiwiQ09NUE9ORU5UIiwicmVnaXN0Q29tcG9uZW50Iiwid2ViQ29tcG9uZW50cyIsIndlYkNvbXBvbmVudCIsInB1Ymxpc2hlcyIsImJpbmRpbmdDb21wYXJhdG9yIiwic3RhcnRzV2l0aFByZWZpeCIsImJpbmRpbmdGdWxsUHJlZml4ZXMiLCJ3aWxkY2FyZHMiLCJyZXBsYWNlQWxsIiwiYmluZEJpbmRlcnMiLCJibG9jayIsImJpbmRJbmZvcyIsInN0YXJ0aW5nUHJlZml4IiwiYmluZEluZm8iLCJiaW5kQ29tcG9uZW50IiwicGFyc2VkRGVjbGFyYXRpb24iLCJyZXNvbHZlTm9kZU5hbWUiLCJkZWZpbmUiLCJhUHJpb3JpdHkiLCJwcmlvcml0eSIsImJQcmlvcml0eSIsIkRFRkFVTFRfT0ZGU0VUIiwiRGF0YVNjcm9sbFBvc2l0aW9uWUJpbmRlciIsImVsZW1lbnRTZWxlY3RvciIsIndhdGNoU2Nyb2xsT25FbGVtZW50Iiwic2Nyb2xsWSIsInNjcm9sbFBvc2l0aW9uWSIsImlubmVySGVpZ2h0IiwicGFnZVlPZmZzZXQiLCJpbWFnZXNMb2FkZWQiLCJJbWFnZUV2ZW50c0JpbmRlciIsImN1c3RvbUV2ZW50TmFtZSIsImxvYWQiLCJvbkFsd2F5cyIsIm9uRmFpbCIsIm9uUHJvZ3Jlc3MiLCJTY3JvbGxFdmVudHNCaW5kZXIiLCJ0b3VjaEV2ZW50U2VydmljZSIsInNjcm9sbFRvUG9zaXRpb24iLCJTY3JvbGxQb3NpdGlvbkFuZ2xlQmluZGVyIiwiQXV0b3Njcm9sbEJpbmRlciIsImF1dG9zY3JvbGwiLCJTY3JvbGxiYXJEcmFnZ2FibGVCaW5kZXIiLCJkcmFnc2Nyb2xsIiwiU3luY0VsZW1lbnRQcm9wZXJ0eUJpbmRlciIsImVsVG9TeW5jIiwic3luY1dpZHRoIiwic3luY0hlaWdodCIsImVsZW1lbnRUb1N5bmMiLCJUb3VjaEV2ZW50c1NlcnZpY2UiLCJUb3VjaEV2ZW50c0JpbmRlciIsIkV4dHJhc1NlcnZpY2UiLCJsaW5lYXIiLCJ0IiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsV2lkdGgiLCJpc1Njcm9sbGFibGUiLCJHYW1lbG9vcCIsImxpbWl0IiwiZ2V0TGltaXQiLCJtb3ZlIiwiZ2V0UG9zaXRpb24iLCJzdGFydExvb3AiLCJtYXhGUFMiLCJzZXRQb3NpdGlvbiIsInNjcm9sbEJlaGF2aW9yIiwiX3BhdXNlIiwic3RvcFJlc3VtZVRpbWVvdXQiLCJyZW5kZXIiLCJ1cGRhdGVNb3ZlIiwidG91Y2hDYXBhYmxlIiwibGFzdE1vdmUiLCJhcHBlbmQiLCJfY2hlY2tEcmFnZ2FibGUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwicHVzaGVkIiwibGFzdENsaWVudFgiLCJsYXN0Q2xpZW50WSIsIm5ld1Njcm9sbFgiLCJuZXdTY3JvbGxZIiwiRnVsbHNjcmVlblNlcnZpY2UiLCJkRSIsInRGIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJlbnRlcksiLCJleGl0SyIsImVsZW1lbnRLIiwiZXZlbnRLIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJzdXBwb3J0ZWQiLCJkIiwiZXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwiZW50ZXIiLCJpc0Z1bGxzY3JlZW4iLCJBTExPV19LRVlCT0FSRF9JTlBVVCIsImV4aXQiLCJnZXRGcHMiLCJmcHMiLCJsb29wU3RhcnRlZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImxvb3AiLCJ0aW1lc3RhbXAiLCJsYXN0RnJhbWVUaW1lTXMiLCJmcmFtZUlEIiwicHJvZ3Jlc3MiLCJiZWdpbiIsImxhc3RGcHNVcGRhdGUiLCJmcmFtZXNUaGlzU2Vjb25kIiwibnVtVXBkYXRlU3RlcHMiLCJ0aW1lc3RlcCIsInBhbmljIiwiaW50ZXJwIiwiQmFzZUV2ZW50c1NlcnZpY2UiLCJpc1RvdWNoQ2FwYWJsZSIsInRyaWdnZXJDdXN0b21FdmVudCIsIl9vblNjcm9sbEV2ZW50IiwiX3Njcm9sbCIsInN0YXJ0UG9zaXRpb24iLCJfc2Nyb2xsRXZlbnQiLCJzY3JvbGxFdmVudCIsImdldFNjcm9sbERpciIsIm9uU2Nyb2xsRXZlbnQiLCJzY3JvbGxUaW1lciIsImlzU2Nyb2xsaW5nIiwic2Nyb2xsc3RhcnQiLCJzY3JvbGxlbmRlZCIsImVuZFBvc2l0aW9uIiwiY3VycmVudFBvc2l0aW9uIiwiZ2V0RWxlbWVudEluZGV4IiwiVG91Y2hUeXBlIiwic3RhcnRldmVudCIsImVuZEV2ZW50IiwiZW5kZXZlbnQiLCJtb3ZlRXZlbnQiLCJtb3ZlZXZlbnQiLCJ0YXBFdmVudCIsInRhcGV2ZW50Iiwic3dpcGVUaHJlc2hvbGRYIiwidGhyZXNob2xkIiwic3dpcGVIVGhyZXNob2xkIiwic3dpcGVUaHJlc2hvbGRZIiwic3dpcGVWVGhyZXNob2xkIiwiZG91YmxlVGFwSW50IiwiZG91YmxldGFwSW50ZXJ2YWwiLCJ0YXBIb2xkVGhyZXNob2xkIiwidGFwaG9sZFRocmVzaG9sZCIsInRhcFJhbmdlIiwicmFuZ2UiLCJ0YXBQaXhlbFJhbmdlIiwic2hha2VUaHJlc2hvbGQiLCJvblN0YXJ0RXZlbnQiLCJvbk1vdmVFdmVudCIsIm9uRW5kRXZlbnQiLCJnZXRTd2lwZURpciIsImhUaHJlc2hvbGQiLCJ2VGhyZXNob2xkIiwic3dpcGVEaXIiLCJ0b3VjaGVzVHlwZXMiLCJDSEFOR0VEIiwiY2hhbmdlZFRvdWNoZXMiLCJUQVJHRVQiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImdldE9mZnNldCIsImJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFRvdWNoRGF0YSIsIndpdGhJbmRleCIsInBvc2l0aW9uVHlwZSIsIm9mZnNldFR5cGUiLCJ0b3VjaERhdGEiLCJ0aW1lIiwibm93Iiwic3RhcnRUaW1lIiwiZG91YmxldGFwcGVkIiwiZmlyc3RUYXAiLCJ0YXBTdGFydGVkIiwic3dpcGVTdGFydGVkIiwib3JpZ2luYWxDb29yZCIsImZpbmFsQ29vcmQiLCJzdGFydEV2bnQiLCJ0YXBzdGFydCIsInRhcGhvbGQiLCJ0YXBoZWxkIiwiaG9sZFRpbWVyIiwidGFwZW5kIiwic3dpcGVlbmQiLCJ0YXAiLCJkb3VibGV0YXAiLCJzaW5nbGV0YXAiLCJoYXNTd2lwZWQiLCJ0YXBtb3ZlIiwic3dpcGUiLCJkaWZmUG9zaXRpb24iLCJlbmRUaW1lIiwidG91Y2hlc0xlbmd0aCIsImVsT2Zmc2V0IiwibGFzdFRvdWNoIiwiYWN0aW9uVGltZXIiLCJ0YXBUaW1lciIsImxhc3RUYXAiLCJzZWNvbmRUYXAiLCJjb29saW5nIiwiZW5kRXZudCIsInhBbW91bnQiLCJ5QW1vdW50IiwiTWVkaWFSZWFkeVN0YXRlIiwiSGlzdG9yeU1hbmFnZXIiLCJoaXN0b3J5IiwiSTE4blNlcnZpY2UiLCJJMThuU3RhckJpbmRlciIsIl9vbkF0dHJpYnV0ZUNoYW5nZWQiLCJhcHBseVRyYW5zbGF0aW9uIiwibG9jYWxlIiwiaTE4biIsInNob3dNaXNzaW5nVHJhbnNsYXRpb24iLCJwcm9wZXJ0aWVzIiwiaW5uZXJUZXh0IiwicGFyc2VWYXJzIiwiX2VsIiwibmV3VmFycyIsInBhcnNlVGVtcGxhdGVWYXJzIiwidmFycyIsImxhbmdWYXJzIiwicGFyc2VMb2NhbFZhcnMiLCJ0cmFuc2xhdGUiLCJsYW5nY29kZSIsImdldExhbmdjb2RlIiwiZGVmYXVsdCIsImxvY2FsIiwidmFyTmFtZSIsIm5ld1ZhciIsIm9uTGFuZ3VhZ2VDaGFuZ2VkIiwiaW5pdGlhbCIsImluaXRPblJlYWR5IiwidHJhbnNsYXRpb25OZWVkZWQiLCJvbkF0dHJpYnV0ZUNoYW5nZWQiLCJ0cmFuc2xhdGVNZVBhdGhTdHJpbmciLCJjdXJyZW50TGFuZ2NvZGUiLCJpbml0aWFsTGFuZ2NvZGUiLCJnZXRJbml0aWFsTGFuZ2NvZGUiLCJkb05vdFRyYW5zbGF0ZURlZmF1bHRMYW5ndWFnZSIsIkkxOG5Td2l0Y2hlckNvbXBvbmVudCIsIkkxOG5TaGFyZUNvbXBvbmVudCIsImluaXRJMThuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0ZXh0STE4biIsInNlcnZpY2VMYWJlbEkxOG4iLCJsYW5nY29kZXMiLCJzd2l0Y2giLCJzZXRMYW5nY29kZSIsImluaXRMb2NhbGVzIiwiZ2V0QXZhaWxhYmxlTGFuZ2NvZGVzIiwibGFuZ0NvZGUiLCJjaGFuZ2VkTGFuZ2NvZGUiLCJ0Rm9ybWF0dGVyIiwicmVqZWN0IiwiTG9jYWxlc1Jlc3RTZXJ2aWNlIiwiaW5zdGFuY2VzIiwiZ2V0QWxsIiwiU2hvcGlmeSIsInNob3AiLCJsb2NhbGVzIiwicmVzcCIsIkxvY2FsZXNTdGF0aWNTZXJ2aWNlIiwiX3JlYWR5IiwiZm9yY2UiLCJsb2NhbHMiLCJzZXRUcmFuc2xhdGVTdHJpbmdQbHVyYWxpemF0aW9uIiwic2V0VHJhbnNsYXRlU3RyaW5nVmFycyIsImdldEJ5Q3VycmVudExhbmciLCJnZXRCcm93c2VyTGFuZ2NvZGUiLCJsYW5nIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJzaW1wbGlmaWVkIiwiZ2V0SFRNTExhbmdjb2RlIiwiYWN0aXZlQ29kZSIsInRyYW5zbGF0ZVN0cmluZyIsImJyb3dzZXJMYW5nY29kZSIsImF2YWlsYWJsZUxhbmdjb2RlcyIsImJyb3dzZXJMYW5nRm91bmQiLCJhdmFpbGFibGVMYW5nY29kZU9iaiIsInRyYW5zbGF0ZU9iaiIsInplcm8iLCJ0d28iLCJqc3hNb2R1bGUiLCJKc3hGcmFnbWVudCIsIlN5bWJvbCIsIlJhdyIsIl9wcm9wcyIsImh0bWxWb2lkRWxlbWVudHMiLCJTZXQiLCJwcm9wcyIsImFzc2lnbiIsImhhc0NoaWxkcmVuIiwicmVuZGVyQ2hpbGRyZW4iLCJnbG9iYWwiLCJqc3hDcmVhdGVFbGVtZW50IiwianN4RnJhZ21lbnQiLCJvblBhcmVudFJvdXRlIiwiUGFyZW50Um91dGVDbGFzc1N0YXJCaW5kZXIiLCJfb25VcmxDaGFuZ2UiLCJpc0Fua2VySFRNTEVsZW1lbnQiLCJvblVybENoYW5nZSIsImdvQmFjayIsImJhY2siLCJSb3V0ZUJhY2tPblN0YXJCaW5kZXIiLCJSb3V0ZUNsYXNzU3RhckJpbmRlciIsImlzQW5jaG9yRWxlbWVudCIsIlBqYXgiLCJSb3V0ZVByZWxvYWRCaW5kZXIiLCJwcmVmZXRjaExpbmsiLCJQcmVmZXRjaCIsIm5vcm1hbGl6ZVVybCIsImlzRXh0ZXJuYWxVcmwiLCJSb3V0ZUJpbmRlciIsInJlbW92ZUFmdGVyQWN0aXZhdGlvbiIsIm5ld1RhYiIsIm5ld1RhYk9uRXh0ZXJuIiwiX29uQ2xpY2siLCJwamF4Iiwib25MaW5rQ2xpY2siLCJvcHRpb25zT3JVcmwiLCJwcmVmZXRjaCIsImlzQW5jaG9ySFRNTEVsZW1lbnQiLCJpbml0QmluZGVyIiwiZGVJbml0QmluZGVyIiwiSGlkZVNob3dUcmFuc2l0aW9uIiwiVmlld1N0YXRpY0JpbmRlciIsIndyYXBwZXIiLCJsaXN0ZW5BbGxMaW5rcyIsImxpc3RlblBvcHN0YXRlIiwicGFyc2VUaXRsZSIsImNoYW5nZUJyb3dzZXJVcmwiLCJyZXNwb25zZVByb21pc2UiLCJsb2FkUmVzcG9uc2VDYWNoZWQiLCJyZXBsYWNlV2l0aCIsIlJvdXRlckxvYWRTY3JpcHRDb21wb25lbnQiLCJSb3V0ZXJWaWV3Q29tcG9uZW50IiwibG9hZFNjcmlwdCIsImFzeW5jIiwiZGVmZXIiLCJSb3V0ZXJTZXJ2aWNlIiwic2Nyb2xsVG9Ub3AiLCJzY3JvbGxUb0FuY2hvckhhc2giLCJzY3JvbGxUb0FuY2hvck9mZnNldCIsImRhdGFzZXRUb1Jvb3RTY29wZSIsInByZWZldGNoTGlua3MiLCJkZWZhdWx0VHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkluaXQiLCJvblRyYW5zaXRpb25Db21wbGV0ZWQiLCJnZXRDb250YWluZXJTZWxlY3RvciIsImluaXRBbmRTdGFydFBqYXgiLCJwamF4T3B0aW9ucyIsInNldEFjdGl2ZVdyYXBwZXIiLCJpc0luaXQiLCJzZXRUcmFuc2l0aW9uQ2xhc3MiLCJoYXNoIiwiUk9VVEVfRVJST1JfQ0xBU1MiLCJJR05PUkVfQ0xBU1NfTElOSyIsIklHTk9SRV9DTEFTU19QUkVGRVRDSCIsIkRvbSIsImdldFByZWZldGNoTGlua0VsZW1lbnRzIiwidGl0bGVFbGVtZW50IiwicGFyc2VSZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInByZWZldGNoTGlua0VsZW1lbnRzIiwiZ2V0Q29udGFpbmVyIiwicGFyc2VJbml0aWFsIiwicGFyc2VDb250YWluZXIiLCJnZXROYW1lc3BhY2UiLCJwdXRDb250YWluZXIiLCJuZXdQYWdlIiwib25MaW5rRW50ZXJJbnRlcm4iLCJhdXRvYmluZExpbmtzIiwicHVzaFN0YXRlIiwiZGVJbml0Iiwib25MaW5rRW50ZXIiLCJwcmV2ZW50Q2hlY2siLCJnZXRIcmVmIiwiY2xlYW5MaW5rIiwiZ2V0UG9ydCIsImdldERhdGFzZXQiLCJwcmV2ZW50Q2hlY2tVcmwiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJnZXRDdXJyZW50VXJsIiwid2luIiwiZm9yY2VHb1RvIiwiZ2V0VHJhbnNpdGlvbiIsImZvbGxvdyIsInByZWZldGNoTGlua0VsZW1lbnQiLCJsaW5rRWxlbWVudCIsImhlYWQiLCJyZWwiLCJjYWNoZUVuYWJsZWQiLCJyZW1vdmVQcmVmZXRjaExpbmtzIiwicmVtb3ZlUHJlZmV0Y2hMaW5rRWxlbWVudHMiLCJyZXBsYWNlUHJlZmV0Y2hMaW5rRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxvYWRDYWNoZWQiLCJmb3JjZUNhY2hlIiwiZmFsbGJhY2siLCJmcm9tQ2FjaGUiLCJsb2FkUmVzcG9uc2UiLCJvbkxpbmtDbGlja0ludGVybiIsImN1cnJMb2NhdGlvbiIsImRlY29kZVVSSSIsIm5ld1VybCIsIm9sZFVybCIsIm9sZENvbnRhaW5lciIsIm5ld0NvbnRhaW5lclByb21pc2UiLCJ0cmFuc2l0aW9uUHJvZ3Jlc3MiLCJ0cmFuc2l0aW9uUmVzdWx0Iiwib25OZXdDb250YWluZXJMb2FkZWQiLCJpbml0aWFsUmVzcG9uc2UiLCJjdXJyZW50VXJsIiwiZGVmZXJyZWQiLCJCYXNlVHJhbnNpdGlvbiIsIm5ld0NvbnRhaW5lciIsIm5ld0NvbnRhaW5lckxvYWRpbmciLCJwcm9taXNlIiwiZG9uZSIsIkN1c3RvbVRyYW5zaXRpb24iLCJmaW5pc2giLCJGYWRlVHJhbnNpdGlvbiIsImR1cmF0aW9uTXMiLCJvcGFjaXR5IiwiQmFzZVZpZXciLCJvbkxlYXZlIiwib25FbnRlciIsIm9uRW50ZXJDb21wbGV0ZWQiLCJvbkxlYXZlQ29tcGxldGVkIiwiU2hvcGlmeVRkYUluc3RhZ3JhbUNvbXBvbmVudCIsIlNob3BpZnlUZGFJbnN0YWdyYW1TY3JvbGxiYXJDb21wb25lbnQiLCJJbnN0YWdyYW1BcGlTZXJ2aWNlIiwiaW5zdGFncmFtSWQiLCJvcGVuTGlua3MiLCJvcGVuVXJsIiwib25UYXAiLCJtZWRpYSIsImV2ZW50RWwiLCJzY29sbFdpdGgiLCJmYWN0b3IiLCJnZXRUaXRsZVdpZHRoIiwiZ2V0SW5zdGFncmFtV2lkdGgiLCJsb2FkTWVkaWEiLCJpbnN0YWdyYW0iLCJoYXNDaGlsZE5vZGVzIiwiQkFTRV9IT1NUX1VSTCIsIkJBU0VfSE9TVF9ERVZfVVJMIiwiU29ja2V0IiwiSW8iLCJpbyIsIkJhc2VBcGlTZXJ2aWNlIiwiaG9zdCIsIkZhY2Vib29rQXBpU2VydmljZSIsImJhc2VVcmwiLCJwYWdlcyIsInBvc3RzIiwiaW5zdGFncmFtQnVzaW5lc3NBY2NvdW50SUQiLCJ0aGVtZSIsIk1vZHVsZVNlcnZpY2UiLCJTaG9waWZ5QXBpQXJ0aWNsZVNlcnZpY2UiLCJsaXN0IiwiYmxvZ0lkIiwiYXJ0aWNsZUlkIiwiU2hvcGlmeUFwaUJsb2dzU2VydmljZSIsImJsb2dzIiwiU2hvcGlmeUFwaVByb2R1Y3RTZXJ2aWNlIiwic29ja2V0IiwidHJhbnNwb3J0cyIsInByb2R1Y3QiLCJhbGwiLCJlbWl0IiwiU2hvcGlmeUFwaVRoZW1lc1NlcnZpY2UiLCJ0aGVtZXMiLCJwcm9wZXJ0eVBhdGgiLCJhc3NldHMiLCJhc3NldExvY2FsZXNMaXN0Iiwic2hvcGlmeVREQU1vZHVsZSIsIlNob3BpZnlDYXJ0U2VydmljZSIsIlNob3BpZnlDYXJ0Q291bnRCaW5kZXIiLCJfb25DYXJ0UmVxdWVzdENvbXBsZXRlIiwiX29uQ2FydFJlcXVlc3RDaGFuZ2VkIiwiY2FydCIsIml0ZW1fY291bnQiLCJzaG9waWZ5Q2FydEV2ZW50RGlzcGF0Y2hlciIsIm9uQ2FydFJlcXVlc3RDb21wbGV0ZSIsIm9uQ2FydFJlcXVlc3RDaGFuZ2VkIiwiaW1nVXJsRm9ybWF0dGVyIiwiUFhfT0ZGU0VUIiwiT1ZFUldSSVRFX09SSUdJTkFMX1NSQyIsIlNob3BpZnlJbWdCaW5kZXIiLCJzZXRTcmNzZXQiLCJjdXJyZW50U3Jjc2V0IiwiY3VycmVudFNpemVzIiwiZmlsdGVyU2NhbGUiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZmlsdGVyU2l6ZSIsIm5ld1NyYyIsImluaXRpYWxTcmMiLCJuZXdTcmNzZXQiLCJuZXdTaXplcyIsImN1cnJlbnRJbWFnZVdpZHRoIiwib2xkSW1hZ2VXaWR0aCIsIlNob3BpZnlBZGRyZXNzZXNDb21wb25lbnQiLCJjcmVhdGVBZGRyZXNzIiwidmFsaWRhdGlvbiIsInNob3dGb3JtSWQiLCJlZGl0QWRkcmVzcyIsImVkaXQiLCJzdWJtaXQiLCJjcmVhdGVBZGRyZXNzRm9ybSIsInJlbG9hZCIsImluaXRWYWxpZGF0aW9uIiwiZWRpdEFkZHJlc3NGb3JtIiwiYWRkQ2xhc3MiLCJTaG9waWZ5Q2FydEJ1dHRvbkNvbXBvbmVudCIsImNhcnRJdGVtQ291bnQiLCJzdGFydEFkZEFuaW1hdGlvbiIsInBlbmRpbmciLCJjYXJ0VXJsIiwiU2hvcGlmeUNhcnRJdGVtQ29tcG9uZW50IiwicHJvZHVjdElkIiwidmFyaWFudElkIiwicXVhbnRpdHkiLCJpbmNyZWFzZSIsImRlY3JlYXNlIiwib25JbnB1dFF1YW50aXR5Q2hhbmdlZCIsImNoYW5nZSIsIm9uQ2FydFVwZGF0ZSIsImdldEl0ZW1Gcm9tQ2FydCIsInByaWNlIiwibGluZVByaWNlIiwibGluZV9wcmljZSIsImxpbmVOdW1iZXIiLCJsaW5lX251bWJlciIsInNrdSIsImdyYW1zIiwidmVuZG9yIiwiZ2lmdENhcmQiLCJnaWZ0X2NhcmQiLCJyZXF1aXJlc1NoaXBwaW5nIiwicmVxdWlyZXNfc2hpcHBpbmciLCJwcm9kdWN0VGl0bGUiLCJwcm9kdWN0X3RpdGxlIiwicHJvZHVjdERlc2NyaXB0aW9uIiwicHJvZHVjdF9kZXNjcmlwdGlvbiIsInByb2R1Y3RUeXBlIiwicHJvZHVjdF90eXBlIiwicHJvZHVjdF9pZCIsInZhcmlhbnRUaXRsZSIsInZhcmlhbnRfdGl0bGUiLCJ2YXJpYW50T3B0aW9ucyIsInZhcmlhbnRfb3B0aW9ucyIsInZhcmlhbnRfaWQiLCJvbkNhcnRSZXF1ZXN0U3RhcnQiLCJTaG9waWZ5Q2FydENvbXBvbmVudCIsInNoaXBwaW5nQWRkcmVzcyIsImVzdGltYXRlU2hpcHBpbmdSYXRlIiwic2hpcHBpbmdSYXRlcyIsInJlbW92ZUl0ZW0iLCJpbmNyZWFzZUl0ZW0iLCJkZWNyZWFzZUl0ZW0iLCJnZXRJdGVtIiwib25JdGVtUXVhbnRpdHlDaGFuZ2VkIiwiZ2V0U2hpcHBpbmdSYXRlcyIsInRyaWdnZXJPbkNoYW5nZSIsInRyaWdnZXJPbkNvbXBsZXRlIiwidHJpZ2dlck9uU3RhcnQiLCJsaW5lSXRlbSIsImh0bWxFbCIsIlNob3BpZnlDb21tZW50c0Zvcm1Db21wb25lbnQiLCJjdXN0b21lciIsImVtYWlsIiwicGFzc3dvcmQiLCJsb2dpbkN1c3RvbWVyIiwiY3JlYXRlQ3VzdG9tZXIiLCJyZWNvdmVyQ3VzdG9tZXIiLCJuZXdDb21tZW50Rm9ybSIsInNlbGVjdEFsbCIsIlNob3BpZnlDb250YWN0Rm9ybUNvbXBvbmVudCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZnVsbE5hbWUiLCJjb21wYW55IiwicGhvbmUiLCJzZW5kIiwiZWxlbWVudElzVmlzaWJsZSIsIlNob3BpZnlEZWJ1Z0JhckNvbXBvbmVudCIsImhhc1ByZXZpZXdCYXIiLCJoYXNBZG1pbkJhciIsInRvZ2dsZUJhciIsImZvcmNlSGlkZSIsInByZXZpZXdCYXIiLCJhZG1pbkJhciIsIlNob3BpZnlMb2dpbkZvcm1Db21wb25lbnQiLCJTaG9waWZ5UHJvZHVjdENvbXBvbmVudCIsIlNob3BpZnlQcm9kdWN0SXRlbUNvbXBvbmVudCIsIlNob3BpZnlQcm9kdWN0U2Nyb2xsYmFyQ29tcG9uZW50IiwicGlsbHMiLCJ2ZXJ0aWNhbCIsImNvbGxhcHNlT25OZXdQYWdlIiwic2hvd09uQWN0aXZlQ2hpbGQiLCJjb2xsYXBzZSIsImNvbGxhcHNlQWxsIiwic2hvd0FsbCIsIm1haW5EaXNwYXRjaGVyIiwibGluayIsImNvbGxhcHNlZCIsImxpbmtsaXN0Iiwic2hvd0FsbEJ5TGlua3MiLCJsaW5rcyIsImNvbGxhcHNlQWxsQnlMaW5rcyIsInNob3dCeUNoaWxkVXJsIiwic3VibGluayIsInN1YnN1YmxpbmsiLCJzeXN0ZW0iLCJsaW5rbGlzdHMiLCJjb2xsYXBzZWFibGUiLCJ0cmFuc2Zvcm1MaW5rcyIsImxvZ2luIiwicmVjb3ZlciIsInJlY292ZXJCYWNrIiwibG9naW5DdXN0b21lckZvcm0iLCJjcmVhdGVDdXN0b21lckZvcm0iLCJyZWNvdmVyQ3VzdG9tZXJGb3JtIiwiU2hvcGlmeVByb2R1Y3RTZXJ2aWNlIiwibWVudVBhZGRpbmciLCJfbWVudVBhZGRpbmciLCJkZXRhaWxNZW51UGFkZGluZyIsIm9wdGlvbkNob3NlbiIsInNob3dNZW51Iiwic2hvd0RldGFpbE1lbnUiLCJwcmVwYXJlIiwiY29sb3JPcHRpb24iLCJnZXRPcHRpb24iLCJzaXplT3B0aW9uIiwidmFyaWFudCIsInZhcmlhbnRzIiwic2VsZWN0ZWRPcHRpb25zIiwiYWN0aXZhdGVPcHRpb25zIiwiY2hvb3NlT3B0aW9uIiwiYWRkVG9DYXJ0IiwidG9nZ2xlRGV0YWlsTWVudSIsIm9wdGlvblZhbHVlIiwicG9zaXRpb24xIiwib3B0aW9uTmFtZSIsImdldFZhcmlhbnRPZk9wdGlvbnMiLCJhY3RpdmF0ZU9wdGlvbiIsInRvTG9jYWxlTG93ZXJDYXNlIiwicG9zaXRpb24wIiwiZmV0Y2hQcm9kdWN0Iiwib25Qcm9kdWN0VGFwIiwib25Qcm9kdWN0TW91c2VlbnRlciIsInByb2R1Y3RzIiwicHJvZHVjdERhdGEiLCJwYXJlbnRSZWN0IiwiZWxlbWVudFJlY3QiLCJlbGVtZW50TWlkZGxlIiwicHJlcGFyZVZhcmlhbnQiLCJpbmRleE9mVXJsIiwiaW1hZ2VzIiwiZmluZEltYWdlIiwiY2xlYXJGaW5kSW1hZ2UiLCJjbGVhckltYWdlIiwiZ2V0R2VuZXJhbEltYWdlcyIsImdlbmVyYWxJbWFnZXMiLCJmZWF0dXJlZF9pbWFnZSIsImdldE9wdGlvbkltYWdlcyIsIm9wdGlvbkltYWdlcyIsImdldEZlYXR1cmVkSW1hZ2UiLCJmYWxsYmFja0ltYWdlU3JjIiwiZmVhdHVyZWRJbWFnZSIsInZhcmlhbnRfaWRzIiwiYWx0IiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJjb25jYXQiLCJzY2FsZSIsImNyb3AiLCJleHRlbnNpb24iLCJtb25leUZvcm1hdHRlciIsIlNob3BpZnlTZXJ2aWNlIiwibW9uZXlXaXRoQ3VycmVuY3lGb3JtYXR0ZXIiLCJjZW50cyIsImZvcm1hdFN0cmluZyIsIm1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0IiwicGxhY2Vob2xkZXJSZWdleCIsIm1vbmV5Rm9ybWF0IiwibWF0Y2hlZEZvcm1hdCIsImZvcm1hdE1vbmV5V2l0aERlbGltaXRlcnMiLCJQcmlvcml0eVF1ZXVlIiwiUFF1ZXVlIiwiY2FycnlvdmVyQ29uY3VycmVuY3lDb3VudCIsImludGVydmFsQ2FwIiwiSW5maW5pdHkiLCJjb25jdXJyZW5jeSIsImF1dG9TdGFydCIsInF1ZXVlQ2xhc3MiLCJpc0Zpbml0ZSIsIl9jYXJyeW92ZXJDb25jdXJyZW5jeUNvdW50IiwiX2lzSW50ZXJ2YWxJZ25vcmVkIiwiX2ludGVydmFsQ291bnQiLCJfaW50ZXJ2YWxDYXAiLCJfaW50ZXJ2YWwiLCJfaW50ZXJ2YWxJZCIsIl9pbnRlcnZhbEVuZCIsIl90aW1lb3V0SWQiLCJxdWV1ZSIsIl9wZW5kaW5nQ291bnQiLCJfY29uY3VycmVuY3kiLCJfaXNQYXVzZWQiLCJfcmVzb2x2ZUVtcHR5IiwiX3Jlc29sdmVJZGxlIiwicnVuIiwiX25leHQiLCJlbnF1ZXVlIiwiX3RyeVRvU3RhcnRBbm90aGVyIiwiYWRkQWxsIiwiZm5zIiwib25FbXB0eSIsImV4aXN0aW5nUmVzb2x2ZSIsIm9uSWRsZSIsIl9kb2VzSW50ZXJ2YWxBbGxvd0Fub3RoZXIiLCJfZG9lc0NvbmN1cnJlbnRBbGxvd0Fub3RoZXIiLCJfcmVzb2x2ZVByb21pc2VzIiwiX29uUmVzdW1lSW50ZXJ2YWwiLCJfb25JbnRlcnZhbCIsIl9pbml0aWFsaXplSW50ZXJ2YWxJZk5lZWRlZCIsIl9pbnRlcnZhbFBhdXNlZCIsImNhbkluaXRpYWxpemVJbnRlcnZhbCIsImRlcXVldWUiLCJsb3dlckJvdW5kIiwiY29tcCIsImZpcnN0Iiwic3RlcCIsIml0IiwiX3F1ZXVlIiwidXBkYXRlRXh0ZXJuIiwicmVxdWVzdE9wdGlvbkRlZmF1bHRzIiwibmV3Q2FydCIsInJlZnJlc2giLCJvbGRDYXJ0IiwidG90YWxfcHJpY2UiLCJsaW5lSXRlbVJlcyIsIkNBUlRfUE9TVF9BRERfVVJMIiwiY2FydFJlcyIsIkNBUlRfR0VUX1VSTCIsInRyaWdnZXJBZGQiLCJfZ2V0IiwiQ0FSVF9QT1NUX1VQREFURV9VUkwiLCJ1cGRhdGVzIiwiQ0FSVF9QT1NUX0NIQU5HRV9VUkwiLCJjaGFuZ2VMaW5lIiwiQ0FSVF9QT1NUX0NMRUFSX1VSTCIsIl9nZXRTaGlwcGluZ1JhdGVzIiwibm9ybWFsaXplIiwiQ0FSVF9HRVRfU0hJUFBJTkdfUkFURVNfVVJMIiwic2hpcHBpbmdfYWRkcmVzcyIsInNoaXBwaW5nX3JhdGVzIiwibm9ybWFsaXplU2hpcHBpbmdSYXRlcyIsIndhaXRGb3JDb21wbGV0ZSIsIm5vcm1hbGl6ZWQiLCJzaGlwcGluZ1JhdGUiLCJmaXRzVmFyaWFudE9wdGlvbnMiLCJvcHRpb25WYWx1ZXMiLCJmaXRzIiwiZ2V0VmFyaWFudCIsImdldE9wdGlvbkluY2x1ZGVzIiwic2VhcmNoU3Vic3RyIiwidGhvdXNhbmRzIiwiZGVjaW1hbCIsIm51bVN0ciIsInBhcnRzIiwiZG9sbGFycyIsInNob3BTZXR0aW5ncyIsImxldHRlcnMiLCJwcmludEFyZ3MiLCJCQVNFNjRfUFJFRklYIiwiUVVPVEVEX1NUUiIsInNsZWVwIiwid2FpdEZvclByb3AiLCJwcm9wTmFtZSIsInByb20iLCJkZWJvdW5jZUNiIiwid2FpdCIsInBhcmFtcyIsImRlYm91bmNlVCIsInJlaiIsImRlYm91bmNlRiIsImZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ0aW1lcklkIiwicFRpbWVvdXQiLCJtcyIsImNhbmNlbCIsIk1BWF9VSUQiLCJyZXN1bHRzIiwiZWxlbWVudElzSGlkZGVuIiwic2Nyb2xsaW5nIiwic2Nyb2xsVGltZW91dCIsImNoZWNrU2Nyb2xsIiwic2Nyb2xsUHJvbWlzZSIsInNjcm9sbFgiLCJtYXJnaW5Ub3AiLCJnZXRTY3JvbGxIZWlnaHQiLCJkb2MiLCJzY3JvbGxNYXhZIiwiZ2V0U2Nyb2xsV2lkdGgiLCJzY3JvbGxNYXhYIiwidmlzdWFsVmlld3BvcnQiLCJmcm9tRWxlbWVudCIsImRpc3RhbmNlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJnZXRTZWxlY3Rpb24iLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2VsZWN0QWxsQ2hpbGRyZW4iLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlVG9FbGVtZW50VGV4dCIsImV4ZWNDb21tYW5kIiwiY2hlY2tSZWFkeSIsInJlYWR5U3RhdGUiLCJhdHRhY2hFdmVudCIsImRldGFjaEV2ZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaXNSZWdpc3RlcmVkIiwiaXNVcGdyYWRlZCIsImN1c3RvbUNvbnN0cnVjdG9yIiwid2hlbkRlZmluZWQiLCJodG1sVG9FbGVtZW50IiwiaHRtbFRvRWxlbWVudHMiLCJ0b0FycmF5IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImlzQnJvd3NlciIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsImlzV2ViV29ya2VyIiwiaXNKc0RvbSIsImlzRGVubyIsIkRlbm8iLCJjb3JlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwicnVuSWZQcmVzZW50IiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJwb3N0TWVzc2FnZSIsIl9zZXRJbW1lZGlhdGUiLCJGdW5jdGlvbiIsInRhc2siLCJfY2xlYXJJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSIsImZhbGxiYWNrQ29weVRleHRUb0NsaXBib2FyZCIsInRleHRBcmVhIiwic3VjY2Vzc2Z1bCIsImNvcHlUZXh0VG9DbGlwYm9hcmQiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJ1YSIsInBsYXRmb3JtIiwidUFzIiwid2luZG93czciLCJ3aW5kb3dzOCIsIndpbmRvd3M4MSIsIndpbmRvd3MxMCIsIndpbmRvd3MiLCJ3aW5kb3dzUGhvbmUiLCJhbmRyb2lkIiwiaW9zIiwibGludXgiLCJ1bml4Iiwib3N4Q2F0YWxpbmEiLCJvc3hCaWdTdXIiLCJvc3giLCJtYWMiLCJwbGF0Zm9ybXMiLCJ3ZWJPUyIsInBsYXlzdGF0aW9uMyIsInBsYXlzdGF0aW9uNCIsIlBsYXlzdGF0aW9uUG9ydGFibGUiLCJuZXdOaW50ZW5kbzNEcyIsIm5pbnRlbmRvRHNpIiwibmludGVuZG8zRHMiLCJuaW50ZW5kb1dpaSIsIm5pbnRlbmRvV2lpVSIsInBhbG1vcyIsInN5bWJpYW4iLCJ1QUtleSIsInBsYXRmb3JtS2V5IiwiZ2V0T1NUeXBlIiwib3MiLCJpc0dhbWVDb25zb2xlIiwiY291bGRCZUpzb24iLCJpc0Jhc2U2NCIsImJ0b2EiLCJmcm9tQmFzZTY0IiwiYmFzZTY0IiwibWF5YmVEZWNvZGVkVXJpIiwiYXRvYiIsImVuY29kZWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0F0dHJpYnV0ZSIsImlzRnVuY3Rpb24iLCJzdHJpbmdIYXNOdW1iZXIiLCJzdHJpbmdIYXNPbmx5TnVtYmVycyIsInN0cmluZ0lzUGhvbmVOdW1iZXIiLCJ3aXRob3V0U3BlY2lhbENoYXJzIiwicmVwbGFjZVVtbGF1dENoYXJzIiwid2l0aG91dE11bHRpV2hpdGVzcGFjZSIsInRtcCIsImdyb3VwZWQiLCJsZXR0ZXIiLCJleHRlbmRlZCIsIm1lcmdlIiwia2VlcFZhbHVlcyIsIm9ubHlEZWZpbmVkIiwibWVyZ2VBcnJheXMiLCJ0aGF0IiwiY2xlYXJPYmpGcm9tUmliYSIsIm5ld09iaiIsImhhc2hDb2RlIiwiY2hhckNvZGVBdCIsImdldFVybFBhcmFtZXRlciIsImV4ZWMiLCJnZXRMb2NhdGlvbiIsImN1ckhvc3RuYW1lIiwiY2hlY2tVcmwiLCJjb21wYXJlUXVlcnlQYXJhbSIsImxvY2F0aW9uMSIsImxvY2F0aW9uMiIsImNoZWNrTG9jYXRpb24iLCJjaGVja1BhdGhuYW1lIiwiY2hlY2tIb3N0bmFtZSIsImlzQWJzb2x1dGVVcmwiLCJpc1Byb3Rva29sbCIsImlzQWJzb2x1dGUiLCJhYnNvbHV0ZVVybCIsImlzRXh0ZXJuYWwiLCJpc0ludGVybmFsVXJsIiwiZ2V0SGFzaCIsInVwZGF0ZUhhc2giLCJyZW1vdmVIYXNoIiwiZ2V0TmFtZXNwYWNlcyIsImdldEFsbEluc3RhbmNlcyIsImNsZWFySW5zdGFuY2UiLCJldmVudHNPbmNlIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhckFsbEluc3RhbmNlcyIsIm5hbWVzcGFjZXMiLCJkZWxldGVBbGxJbnN0YW5jZXMiLCJfbmFtZXNwYWNlIiwidGhpc0NvbnRleHQiLCJvcmdDYiIsImN1ckV2ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==