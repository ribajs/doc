/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/components/bind-content/bind-content.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/bind-content/bind-content.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindContentComponent": function() { return /* binding */ BindContentComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bind_content_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bind-content.component.html */ "./src/ts/components/bind-content/bind-content.component.html");



class BindContentComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "content", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", false);
  }

  bindContent() {
    this.classList.add("bound");
    this.innerHTML = this.content;
    this.removeEventListener("click", this.bindContent);
    this.bind();
  }

  connectedCallback() {
    this.addEventListener("click", this.bindContent);
    this.init([]);
  }

  template() {
    const firstElementChild = this.firstElementChild;

    if (!firstElementChild || firstElementChild.tagName !== "TEMPLATE") {
      console.error("The child element must be a template");
      return null;
    }

    this.content = firstElementChild.innerHTML;
    return _bind_content_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BindContentComponent, "tagName", "rv-bind-content");

/***/ }),

/***/ "./src/ts/components/example-tabs/example-tabs.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/example-tabs/example-tabs.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExampleBs4TabsComponent": function() { return /* binding */ ExampleBs4TabsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-tabs/bs4-tabs.component.js */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _example_tabs_component_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./example-tabs.component.html */ "./src/ts/components/example-tabs/example-tabs.component.html");






class ExampleBs4TabsComponent extends _ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4TabsComponent {
  static get observedAttributes() {
    return ["option-tabs-auto-height", "handle"];
  }

  constructor() {
    super(); // sum is used for examples

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: false
    }, {
      name: "active",
      required: false
    }, {
      name: "index",
      required: false
    }]);

    this.scope.sum = this.sum;
  }
  /**
   * Method used in examples
   * @param a
   * @param b
   */


  sum(a, b) {
    this.scope.result = Number(a) + Number(b);
    return this.scope.result;
  }

  activate(tab) {
    super.activate(tab);

    if (tab.type === "realtime-result") {
      // Get content of preview tab and insert this as the source tab content
      const previewElement = this.querySelector(".tab-content-preview");

      if (previewElement) {
        tab.content = "<pre class=\"language-html\"><code class=\"language-html\">".concat((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(previewElement.innerHTML.trim()), "</code></pre>");
        prismjs__WEBPACK_IMPORTED_MODULE_4__.highlightAll();
      }
    }
  }

  async bindIfReady() {
    return super.bindIfReady();
  }

  connectedCallback() {
    super.connectedCallback();
    this.initTabs();
    this.activateFirstTab();
    this.init(_ribajs_bs4_src_components_bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4TabsComponent.observedAttributes);
  }

  async afterBind() {
    prismjs__WEBPACK_IMPORTED_MODULE_4__.highlightAll();
    await super.afterBind();
  }

  countOfFirstWhitespaces(str) {
    const match = str.match(/^([\s]+)/s);
    return match ? match[0].length : 0;
  }
  /**
   * Removes the first indents of a source string based on the first indents until the first character was found
   * @param source
   */


  removeIndentsOfSource(source) {
    const lines = source.split(/\r?\n/);
    let firstLineIndents = this.countOfFirstWhitespaces(lines[0]); // If the first lines contains only whitespaces

    while (firstLineIndents === lines[0].length) {
      lines.shift();
      firstLineIndents = this.countOfFirstWhitespaces(lines[0]);
    }

    if (firstLineIndents !== 0) {
      for (let i = 0; i < lines.length; i++) {
        const currentIndents = this.countOfFirstWhitespaces(lines[i]);

        if (currentIndents >= firstLineIndents) {
          lines[i] = lines[i].substring(firstLineIndents);
        }
      }
    }

    return lines.join("\n").trim();
  }

  addItemsByTemplate() {
    const templates = this.querySelectorAll("template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      const type = tpl.getAttribute("type");

      if (type === "single-html-file") {
        const sourceTemplate = document.createElement("template");
        const sourceCode = this.removeIndentsOfSource(tpl.innerHTML);
        sourceTemplate.setAttribute("title", "Source");
        sourceTemplate.setAttribute("type", "source");
        sourceTemplate.innerHTML = "<pre class=\"language-html\"><code class=\"language-html\">".concat((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(sourceCode), "</code></pre>");
        this.addItemByTemplate(sourceTemplate, index);
        const previewTemplate = document.createElement("template");
        previewTemplate.setAttribute("title", "Preview");
        previewTemplate.setAttribute("type", "preview");
        previewTemplate.innerHTML = sourceCode;
        this.addItemByTemplate(previewTemplate, index + 1);
        const resultTemplate = document.createElement("template");
        resultTemplate.setAttribute("title", "Rendered");
        resultTemplate.setAttribute("type", "realtime-result");
        resultTemplate.innerHTML = "";
        this.addItemByTemplate(resultTemplate, index + 2);
      } else {
        this.addItemByTemplate(tpl, index);
      }
    }

    this.templateReady = true;
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      return _example_tabs_component_html__WEBPACK_IMPORTED_MODULE_5__["default"];
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExampleBs4TabsComponent, "tagName", "rv-example-tabs");

/***/ }),

/***/ "./src/ts/components/file-tree/file-tree.component.ts":
/*!************************************************************!*\
  !*** ./src/ts/components/file-tree/file-tree.component.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileTreeComponent": function() { return /* binding */ FileTreeComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _file_tree_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file-tree.component.html */ "./src/ts/components/file-tree/file-tree.component.html");



 // interface Scope extends ScopeBase {}

class FileTreeComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.BasicComponent {
  static get observedAttributes() {
    return [];
  }

  // : Scope = {};
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(FileTreeComponent.observedAttributes);
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _file_tree_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(FileTreeComponent, "tagName", "rv-file-tree");

/***/ }),

/***/ "./src/ts/components/icon-preview/icon-preview.component.ts":
/*!******************************************************************!*\
  !*** ./src/ts/components/icon-preview/icon-preview.component.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IconPreviewComponent": function() { return /* binding */ IconPreviewComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _icon_preview_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icon-preview.component.html */ "./src/ts/components/icon-preview/icon-preview.component.html");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_5__);






class IconPreviewComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["asset-path"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      assetPath: "",
      name: "",
      src: "",
      sizes: [96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8],
      colors: ["black", "white", "primary", "success", "info", "warning", "danger", ["stroke-black", "white"], ["stroke-white", "black"], ["stroke-primary", "white"], ["stroke-success", "white"], ["stroke-info", "white"], ["stroke-warning", "white"], ["stroke-danger", "white"]],
      directions: ["left", "left-up", "up", "up-right", "right", "right-down", "down", "down-left"],
      example: "string"
    });

    const urlParams = new URLSearchParams(window.location.search);
    const name = urlParams.get("name");

    if (!name) {
      throw new Error('Query url parameter "name" is required!');
    }

    this.scope.name = name;
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(IconPreviewComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes);
  }

  async afterBind() {
    prismjs__WEBPACK_IMPORTED_MODULE_5__.highlightAll();
    await super.afterBind();
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "assetPath") {
      const urlParts = this.scope.assetPath.split("?");
      this.scope.assetPath = urlParts[0];
      const cacheQueryParam = urlParts[1];
      this.scope.src = this.scope.assetPath += "iconset_" + this.scope.name + ".svg?" + cacheQueryParam;
      this.scope.example = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)("\n        <bs4-icon color=\"danger\" src=\"/assets/".concat(this.scope.name + ".svg", "\" size=\"32\" direction=\"up\"></bs4-icon>\n      ").trim());
    }
  }

  requiredAttributes() {
    return ["assetPath", "src"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _icon_preview_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IconPreviewComponent, "tagName", "rv-icon-preview");

/***/ }),

/***/ "./src/ts/components/index.ts":
/*!************************************!*\
  !*** ./src/ts/components/index.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindContentComponent": function() { return /* reexport safe */ _bind_content_bind_content_component_js__WEBPACK_IMPORTED_MODULE_0__.BindContentComponent; },
/* harmony export */   "ExampleBs4TabsComponent": function() { return /* reexport safe */ _example_tabs_example_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__.ExampleBs4TabsComponent; },
/* harmony export */   "FileTreeComponent": function() { return /* reexport safe */ _file_tree_file_tree_component_js__WEBPACK_IMPORTED_MODULE_2__.FileTreeComponent; },
/* harmony export */   "IconPreviewComponent": function() { return /* reexport safe */ _icon_preview_icon_preview_component_js__WEBPACK_IMPORTED_MODULE_3__.IconPreviewComponent; },
/* harmony export */   "LoremIpsumComponent": function() { return /* reexport safe */ _lorem_ipsum_lorem_ipsum_component_js__WEBPACK_IMPORTED_MODULE_4__.LoremIpsumComponent; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _shopify_linklist_shopify_linklist_component_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _bind_content_bind_content_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bind-content/bind-content.component.js */ "./src/ts/components/bind-content/bind-content.component.ts");
/* harmony import */ var _example_tabs_example_tabs_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./example-tabs/example-tabs.component.js */ "./src/ts/components/example-tabs/example-tabs.component.ts");
/* harmony import */ var _file_tree_file_tree_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-tree/file-tree.component.js */ "./src/ts/components/file-tree/file-tree.component.ts");
/* harmony import */ var _icon_preview_icon_preview_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icon-preview/icon-preview.component.js */ "./src/ts/components/icon-preview/icon-preview.component.ts");
/* harmony import */ var _lorem_ipsum_lorem_ipsum_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lorem-ipsum/lorem-ipsum.component.js */ "./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts");
/* harmony import */ var _shopify_linklist_shopify_linklist_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify-linklist/shopify-linklist.component.js */ "./src/ts/components/shopify-linklist/shopify-linklist.component.ts");







/***/ }),

/***/ "./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts":
/*!****************************************************************!*\
  !*** ./src/ts/components/lorem-ipsum/lorem-ipsum.component.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoremIpsumComponent": function() { return /* binding */ LoremIpsumComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var lorem_ipsum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lorem-ipsum */ "../../.yarn/cache/lorem-ipsum-npm-2.0.8-a5c19f179a-63049aab1f.zip/node_modules/lorem-ipsum/dist/index.js");



class LoremIpsumComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["sentences-per-paragraph-max", "sentences-per-paragraph-min", "words-per-sentence-max", "words-per-sentence-min", "words", "generate-words", "generate-sentences", "generate-paragraphs", "format"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "options", {
      sentencesPerParagraph: {
        max: 8,
        min: 4
      },
      wordsPerSentence: {
        max: 16,
        min: 4
      }
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      generateParagraphs: 1,
      format: "html"
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(LoremIpsumComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  async beforeBind() {
    await super.beforeBind();
  }

  async afterBind() {
    this.lorem = new lorem_ipsum__WEBPACK_IMPORTED_MODULE_2__.LoremIpsum(this.options, this.scope.format);

    if (this.scope.generateWords) {
      this.innerHTML = this.lorem.generateWords(this.scope.generateWords);
    } else if (this.scope.generateSentences) {
      this.innerHTML = this.lorem.generateSentences(this.scope.generateSentences);
    } else if (this.scope.generateParagraphs) {
      this.innerHTML = this.lorem.generateParagraphs(this.scope.generateParagraphs);
    }

    await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "sentencesPerParagraphMax":
        if (this.options.sentencesPerParagraph) {
          this.options.sentencesPerParagraph.max = newValue;
        }

        break;

      case "sentencesPerParagraphMin":
        if (this.options.sentencesPerParagraph) {
          this.options.sentencesPerParagraph.min = newValue;
        }

        break;

      case "wordsPerSentenceMax":
        if (this.options.wordsPerSentence) {
          this.options.wordsPerSentence.max = newValue;
        }

        break;

      case "wordsPerSentenceMin":
        if (this.options.wordsPerSentence) {
          this.options.wordsPerSentence.min = newValue;
        }

        break;

      case "words":
        if (this.options.words) {
          this.options.words = newValue;
        }

        break;
    }
  } // deconstructor


  disconnectedCallback() {
    super.disconnectedCallback();
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LoremIpsumComponent, "tagName", "rv-lorem-ipsum");

/***/ }),

/***/ "./src/ts/components/shopify-linklist/shopify-linklist.component.ts":
/*!**************************************************************************!*\
  !*** ./src/ts/components/shopify-linklist/shopify-linklist.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLinklistComponent": function() { return /* binding */ ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _shopify_linklist_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shopify-linklist.component.html */ "./src/ts/components/shopify-linklist/shopify-linklist.component.html");




/**
 * shopify-filter
 */

class ShopifyLinklistComponent extends _ribajs_shopify__WEBPACK_IMPORTED_MODULE_1__.ShopifyLinklistComponent {
  constructor() {
    super();
  }
  /**
   * Only set the component template if there no childs already
   */


  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _shopify_linklist_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLinklistComponent, "tagName", "shopify-linklist");

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsAttrExampleComponent": function() { return /* binding */ Bs4TabsAttrExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_attr_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-attr-example.component.html */ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html");



class Bs4TabsAttrExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  template() {
    return _bs4_tabs_attr_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsAttrExampleComponent, "tagName", "rv-bs4-tabs-attr-example");

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts":
/*!************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsTplExampleComponent": function() { return /* binding */ Bs4TabsTplExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_tpl_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-tpl-example.component.html */ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html");



class Bs4TabsTplExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  template() {
    return _bs4_tabs_tpl_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsTplExampleComponent, "tagName", "rv-bs4-tabs-tpl-example");

/***/ }),

/***/ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EachItemExampleComponent": function() { return /* binding */ EachItemExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _each_item_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./each-item-example.component.html */ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html");



class EachItemExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: this.getItems(),
      pop: this.pop,
      push: this.push,
      reset: this.reset,
      shift: this.shift,
      sort: this.sort,
      splice: this.splice,
      unshift: this.unshift
    });
  }

  push() {
    this.scope.items.push({
      name: "pushed"
    });
  }

  pop() {
    this.scope.items.pop();
  }

  shift() {
    this.scope.items.shift();
  }

  unshift() {
    this.scope.items.unshift({
      name: "shifted"
    });
  }

  splice() {
    this.scope.items.splice(1, 1, {
      name: "spliced1"
    }, {
      name: "spliced2"
    });
  }

  reset() {
    this.scope.items = this.getItems();
  }

  sort() {
    this.scope.items.sort((a, b) => {
      return (a.value || 0) - (b.value || 0);
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  getItems() {
    return [{
      name: "x",
      value: 2
    }, {
      name: "y",
      value: 1
    }, {
      name: "z",
      value: 3
    }];
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  template() {
    return _each_item_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachItemExampleComponent, "tagName", "rv-each-item-example");

/***/ }),

/***/ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts":
/*!************************************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts ***!
  \************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtrasScrollEventsExampleComponent": function() { return /* binding */ ExtrasScrollEventsExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _extras_scroll_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extras-scroll-events-example.component.html */ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html");




class ExtrasScrollEventsExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "consoleElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchZoneElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      log: this.log
    });
  }

  log(eventName, event) {
    if (this.consoleElement) {
      let html = "<p class=\"log\"><span class=\"name\">".concat(eventName, "</span>");
      const detail = event.detail;

      if (detail && detail.position) {
        html += "<span class=\"detail\">(x: ".concat(detail.position.x, " y: ").concat(detail.position.y, " maxX: ").concat(detail.position.maxX, " maxY: ").concat(detail.position.maxY, ")</span>");
      }

      html += '<span class="time">' + new Date().toLocaleTimeString() + "</span></p>";
      this.consoleElement.insertAdjacentHTML("afterbegin", html);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(".console");
    this.touchZoneElement = this.querySelector(".touch-zone");
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _extras_scroll_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExtrasScrollEventsExampleComponent, "tagName", "rv-extras-scroll-events-example");

/***/ }),

/***/ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts":
/*!*******************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsExampleComponent": function() { return /* binding */ TouchEventsExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _touch_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./touch-events-example.component.html */ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html");




class TouchEventsExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "consoleElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchZoneElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      log: this.log
    });
  }

  log(eventName, event) {
    if (this.consoleElement) {
      let html = "<p class=\"log\"><span class=\"name\">".concat(eventName, "</span>");

      if (event.detail && event.detail.offset) {
        html += "<span class=\"detail\">(X: ".concat(event.detail.offset.x, " Y: ").concat(event.detail.offset.y, ")</span>");
      }

      html += '<span class="time">' + new Date().toLocaleTimeString() + "</span></p>";
      this.consoleElement.insertAdjacentHTML("afterbegin", html);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(".console");
    this.touchZoneElement = this.querySelector(".touch-zone");
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _touch_events_example_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TouchEventsExampleComponent, "tagName", "rv-touch-events-example");

/***/ }),

/***/ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStaticExampleComponent": function() { return /* binding */ I18nStaticExampleComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _i18n_static_example_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./i18n-static-example.component.html */ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html");



class I18nStaticExampleComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(I18nStaticExampleComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  requiredAttributes() {
    return [];
  }

  template() {
    return _i18n_static_example_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nStaticExampleComponent, "tagName", "rv-i18n-static-example");

/***/ }),

/***/ "./src/ts/main.ts":
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Main": function() { return /* binding */ Main; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_extras__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/extras */ "../../packages/extras/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_i18n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ribajs/i18n */ "../../packages/i18n/src/index.ts");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ribajs/shopify-tda */ "../../packages/shopify-tda/src/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/index.js */ "./src/ts/components/index.ts");
/* harmony import */ var _demos_core_each_item_src_ts_components_each_item_example_each_item_example_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.js */ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.ts");
/* harmony import */ var _demos_bs4_tabs_attr_src_ts_components_bs4_tabs_attr_example_bs4_tabs_attr_example_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.js */ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.ts");
/* harmony import */ var _demos_bs4_tabs_tpl_src_ts_components_bs4_tabs_tpl_example_bs4_tabs_tpl_example_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.js */ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.ts");
/* harmony import */ var _demos_i18n_static_src_ts_components_i18n_static_example_i18n_static_example_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.js */ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.ts");
/* harmony import */ var _demos_extras_touch_events_src_ts_components_touch_events_example_touch_events_example_component_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.js */ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.ts");
/* harmony import */ var _demos_extras_scroll_events_src_ts_components_extras_scroll_events_example_extras_scroll_events_example_component_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.js */ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.ts");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! prismjs */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! prismjs/components/prism-javascript */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-javascript.js");
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! prismjs/components/prism-typescript */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-typescript.js");
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! prismjs/components/prism-scss */ "../../.yarn/cache/prismjs-npm-1.28.0-28f20a79ff-bde93fb2be.zip/node_modules/prismjs/components/prism-scss.js");
/* harmony import */ var prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_scss__WEBPACK_IMPORTED_MODULE_20__);










 // Examples











class Main {
  onPageReady(viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset) {
    prismjs__WEBPACK_IMPORTED_MODULE_17__.highlightAll();

    if (this.view) {
      this.view.models.dataset = dataset;
    }
  }

  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "riba", new _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Riba());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "localesService", _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_9__.LocalesService.getSingleton());

    this.riba.module.regist(_ribajs_core__WEBPACK_IMPORTED_MODULE_1__.coreModule.init());
    this.riba.module.regist(_ribajs_extras__WEBPACK_IMPORTED_MODULE_4__.extrasModule.init());
    this.riba.module.regist(_ribajs_router__WEBPACK_IMPORTED_MODULE_6__.routerModule.init());
    this.riba.module.regist(_ribajs_shopify__WEBPACK_IMPORTED_MODULE_5__.shopifyModule.init());
    this.riba.module.regist(_ribajs_i18n__WEBPACK_IMPORTED_MODULE_7__.i18nModule.init({
      localesService: this.localesService
    }));
    this.riba.module.regist(_ribajs_bs4__WEBPACK_IMPORTED_MODULE_8__.bs4Module.init()); // Register custom components

    this.riba.module.component.regists(_components_index_js__WEBPACK_IMPORTED_MODULE_10__); // Regist examples‚

    this.riba.module.component.regists({
      EachItemExampleComponent: _demos_core_each_item_src_ts_components_each_item_example_each_item_example_component_js__WEBPACK_IMPORTED_MODULE_11__.EachItemExampleComponent,
      Bs4TabsAttrExampleComponent: _demos_bs4_tabs_attr_src_ts_components_bs4_tabs_attr_example_bs4_tabs_attr_example_component_js__WEBPACK_IMPORTED_MODULE_12__.Bs4TabsAttrExampleComponent,
      Bs4TabsTplExampleComponent: _demos_bs4_tabs_tpl_src_ts_components_bs4_tabs_tpl_example_bs4_tabs_tpl_example_component_js__WEBPACK_IMPORTED_MODULE_13__.Bs4TabsTplExampleComponent,
      I18nStaticExampleComponent: _demos_i18n_static_src_ts_components_i18n_static_example_i18n_static_example_component_js__WEBPACK_IMPORTED_MODULE_14__.I18nStaticExampleComponent,
      TouchEventsExampleComponent: _demos_extras_touch_events_src_ts_components_touch_events_example_touch_events_example_component_js__WEBPACK_IMPORTED_MODULE_15__.TouchEventsExampleComponent,
      ExtrasScrollEventsExampleComponent: _demos_extras_scroll_events_src_ts_components_extras_scroll_events_example_extras_scroll_events_example_component_js__WEBPACK_IMPORTED_MODULE_16__.ExtrasScrollEventsExampleComponent
    });
    this.dispatcher.on("newPageReady", this.onPageReady, this);
    window.model = window.model || {};
    window.model.dataset = window.model.dataset || {};
    this.view = this.riba.bind(document.body, window.model); // view.registComponents();
  }

}
(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.ready)(() => {
  new Main();
});

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseOnUrlBinder": function() { return /* binding */ CollapseOnUrlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");





/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

class CollapseOnUrlBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "checkURL", this._checkURL.bind(this));
  }

  _checkURL() {
    if (this.url && (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(this.url)) {
      var _this$collapseService;

      (_this$collapseService = this.collapseService) === null || _this$collapseService === void 0 ? void 0 : _this$collapseService.hide();
      return true;
    } // collapseService.show();


    return false;
  }

  bind(el) {
    this.collapseService = new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(el, [], {
      toggle: false
    });
  }

  unbind() {
    if (this.checkURL) {
      this.dispatcher.off("newPageReady", this.checkURL);
    }
  }

  routine(el, url) {
    this.url = url;

    if (this.checkURL) {
      this.dispatcher.off("newPageReady", this.checkURL);
    }

    this.dispatcher.on("newPageReady", this.checkURL);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CollapseOnUrlBinder, "key", "bs4-collapse-on-url");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-collapse.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-collapse.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseBinder": function() { return /* binding */ CollapseBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");



/**
 * @deprecated
 */

class CollapseBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind() {
    console.warn("bs4-collapse is deprecated, use bs4-toggle-collapse-on-click instead.");
  }

  routine(el, targetSelector) {
    const targets = document.querySelectorAll(targetSelector);
    const collapseServices = [];
    targets.forEach(target => {
      collapseServices.push(new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [el], {
        toggle: false
      }));
    });
    el.addEventListener("click", event => {
      event.preventDefault();
      collapseServices.forEach(collapseService => {
        collapseService.toggle();
      });
    });
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CollapseBinder, "key", "bs4-collapse");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-dropdown.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-dropdown.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropdownBinder": function() { return /* binding */ DropdownBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/dropdown/
 */

class DropdownBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.toggler = (el.classList.contains("dropdown-toggle") ? el : el.querySelector(".dropdown-toggle")) || el;
  }

  routine(el) {
    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!this.toggler) {
      throw new Error("No dropdown toggle element found!");
    }

    if (this.dropdownService) {
      this.dropdownService.dispose();
      this.toggler.removeEventListener("click", this.dropdownService.toggle);
    }

    this.dropdownService = new _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__.DropdownService(this.toggler, option);
    this.dropdownService.toggle = this.dropdownService.toggle.bind(this.dropdownService);
    this.toggler.addEventListener("click", this.dropdownService.toggle);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DropdownBinder, "key", "bs4-dropdown");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpanOnUrlBinder": function() { return /* binding */ ExpanOnUrlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");





/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

class ExpanOnUrlBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    const collapseService = new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(el, [], {
      toggle: false
    });
    const dispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main");

    const checkURL = urlToCheck => {
      if (urlToCheck && (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(urlToCheck)) {
        collapseService.show();
        return true;
      }

      collapseService.hide();
      return false;
    };

    dispatcher.on("newPageReady", () => checkURL(url));
    checkURL(url);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ExpanOnUrlBinder, "key", "bs4-expan-on-url");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-popover.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-popover.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopoverBinder": function() { return /* binding */ PopoverBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }



/**
 *
 */

class PopoverBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "listeners", {});
  }

  routine(el, optionsOrContent) {
    let options = {};

    if (typeof optionsOrContent === "string") {
      options.content = optionsOrContent;
    } else if (typeof optionsOrContent === "object") {
      options = _objectSpread({}, optionsOrContent);
    }

    options.placement = options.placement || "auto";
    const popover = new _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__.PopoverService(el, _objectSpread(_objectSpread({}, _ribajs_bs4__WEBPACK_IMPORTED_MODULE_1__.PopoverService.Default), options)); // destroy previous popover if it already exists

    if (this.popover) {
      this.popover.dispose();
    }

    this.popover = popover;
    /*
     * Methods "show", "hide", etc. of the PopoverService can be called by dispatching an
     * event `trigger-${methodName}` on the bound element.
     * All these methods have no arguments.
     */

    const methodNames = ["show", "hide", "toggle", "dispose", "enable", "disable", "toggleEnabled", "update" // render update
    ]; // remove listeners of previous Popover if there already was one

    if (this.listeners) {
      for (const [trigger, listener] of Object.entries(this.listeners)) {
        this.el.removeEventListener(trigger, listener);
      }
    }

    this.listeners = Object.create(null);

    for (const methodName of methodNames) {
      const trigger = "trigger-".concat(methodName);
      const listener = popover[methodName].bind(popover);
      this.el.addEventListener(trigger, listener);
      this.listeners[trigger] = listener;
    }
  }

  bind(el) {
    // inform ancestors that this popover was bound
    // Event name in same style as the other popover CustomEvents from Bootstrap
    el.dispatchEvent(new CustomEvent("bound.bs.popover", {
      bubbles: true,
      cancelable: true
    }));
  }

  unbind() {
    // destroy Popover if it already exists
    if (this.popover) {
      this.popover.dispose();
    } // remove listeners if there are any


    if (this.listeners) {
      for (const [trigger, listener] of Object.entries(this.listeners)) {
        this.el.removeEventListener(trigger, listener);
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(PopoverBinder, "key", "bs4-popover");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollspyClassBinder": function() { return /* binding */ ScrollspyClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");




/**
 * scrollspy-class
 * @see https://getbootstrap.com/docs/4.1/components/scrollspy/
 */

class ScrollspyClassBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._onScroll.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isInViewport", this._isInViewport.bind(this));
  }

  _onScroll() {
    if (!this.target) {
      throw new Error("No target element found!");
    }

    if (!this.className) {
      throw new Error("className not set!");
    }

    if (this.isInViewport(this.target)) {
      this.el.classList.add(this.className);

      if (this.el.type === "radio") {
        this.el.checked = true;
      }
    } else {
      this.el.classList.remove(this.className);

      if (this.el.type === "radio") {
        this.el.checked = false;
      }
    }
  }

  /**
   * Determine if an element is in the viewport
   * @param elem The element
   * @return Returns true if element is in the viewport
   */
  _isInViewport(elem) {
    if (!elem) {
      return false;
    }

    const offsetTop = Number(this.el.dataset.offset || 0);
    const offsetBottom = Number(this.el.dataset.offsetBottom || 0);
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.isInViewport)(elem, offsetTop, offsetBottom);
  }

  bind() {
    window.addEventListener("scroll", this.onScroll, {
      passive: true
    });
    this.onScroll();
  }

  routine(el, targetSelector) {
    const nativeIDTargetSelector = targetSelector.replace("#", "");
    this.target = document.getElementById(nativeIDTargetSelector) || undefined;
    this.className = this.args[0];
  }

  unbind() {
    window.removeEventListener("scroll", this.onScroll);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollspyClassBinder, "key", "bs4-scrollspy-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts":
/*!******************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShowToastOnEventBinder": function() { return /* binding */ ShowToastOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_bs4_src_interfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/bs4/src/interfaces */ "../../packages/bs4/src/interfaces/index.ts");




class ShowToastOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    if (!this.toastData) {
      throw new Error("Toast data not set!");
    }

    this.toastData.$event = event;
    this.toastData.$context = this.view.models;
    const toastData = new _ribajs_bs4_src_interfaces__WEBPACK_IMPORTED_MODULE_3__.Toast(this.toastData);
    const notificationDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(toastData.channel || "toast");
    notificationDispatcher.trigger("show-notification", toastData);
  }

  bind(el) {
    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  routine(el, toastData) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.toastData = toastData;
  }

  unbind(el) {
    const eventName = this.args[0];
    el.removeEventListener(eventName, this.onEvent);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShowToastOnEventBinder, "key", "show-toast-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts":
/*!*****************************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* binding */ ToggleCollapseOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");



/**
 *
 */

class ToggleCollapseOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "targets", new Map());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    event.preventDefault();

    for (const collapseService of this.targets.values()) {
      collapseService.toggle();
    }
  }

  bind(el) {
    this.onEvent = this.onEvent.bind(this);

    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  unbind() {
    const eventName = this.args[0];
    this.el.removeEventListener(eventName, this.onEvent);
  }

  routine(el, targetSelector) {
    const newTargets = Array.from(document.querySelectorAll(targetSelector));

    if (newTargets.length <= 0) {
      console.warn("[toggleCollapseOnEventBinder] No element with selector \"".concat(targetSelector, "\" found."));
    }

    for (const target of this.targets.keys()) {
      if (!newTargets.find(x => x === target)) {
        var _this$targets$get;

        (_this$targets$get = this.targets.get(target)) === null || _this$targets$get === void 0 ? void 0 : _this$targets$get.dispose();
        this.targets.delete(target);
      }
    }

    for (const target of newTargets) {
      if (!this.targets.has(target)) {
        this.targets.set(target, new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [el], {
          toggle: false
        }));
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleCollapseOnEventBinder, "key", "bs4-toggle-collapse-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/bs4-tooltip.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/binders/bs4-tooltip.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipBinder": function() { return /* binding */ TooltipBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/tooltips/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/tooltip.js
 */

const template = document.createElement("div");
template.classList.add("tooltip");
template.setAttribute("role", "tooltip");
const arrow = document.createElement("div");
arrow.classList.add("arrow");
template.appendChild(arrow);
const inner = document.createElement("div");
inner.classList.add("tooltip-inner");
template.appendChild(inner);
/**
 *
 */

class TooltipBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tip", template.cloneNode(true));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "show", this._show.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "hide", this._hide.bind(this));
  }

  _show() {
    const placement = this.el.dataset.placement || "top";
    const offset = 0;
    this.popper = new popper_js__WEBPACK_IMPORTED_MODULE_2__["default"](this.el, this.tip, {
      placement,
      modifiers: {
        offset: {
          offset
        },
        flip: {
          behavior: "flip"
        },
        arrow: {
          element: ".arrow"
        },
        preventOverflow: {
          boundariesElement: "scrollParent"
        }
      }
    });
    document.body.appendChild(this.tip);
    this.tip.classList.add("show");
    this.tip.classList.add("bs-tooltip-" + placement);
  }

  _hide() {
    this.tip.classList.remove("show");

    if (this.popper) {
      this.popper.destroy();
    }
  }

  bind(el) {
    el.addEventListener("mouseenter", this.show);
    el.addEventListener("mouseleave", this.hide);
  }

  routine(el, text) {
    const innerEl = this.tip.querySelector(".tooltip-inner");
    innerEl.innerHTML = text;
  }

  unbind() {
    this.hide();
    this.el.removeEventListener("mouseenter", this.show);
    this.el.removeEventListener("mouseleave", this.hide);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TooltipBinder, "key", "bs4-tooltip");

/***/ }),

/***/ "../../packages/bs4/src/binders/index.ts":
/*!***********************************************!*\
  !*** ../../packages/bs4/src/binders/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollapseBinder": function() { return /* reexport safe */ _bs4_collapse_binder_js__WEBPACK_IMPORTED_MODULE_1__.CollapseBinder; },
/* harmony export */   "CollapseOnUrlBinder": function() { return /* reexport safe */ _bs4_collapse_on_url_binder_js__WEBPACK_IMPORTED_MODULE_0__.CollapseOnUrlBinder; },
/* harmony export */   "DropdownBinder": function() { return /* reexport safe */ _bs4_dropdown_binder_js__WEBPACK_IMPORTED_MODULE_3__.DropdownBinder; },
/* harmony export */   "ExpanOnUrlBinder": function() { return /* reexport safe */ _bs4_expan_on_url_binder_js__WEBPACK_IMPORTED_MODULE_4__.ExpanOnUrlBinder; },
/* harmony export */   "PopoverBinder": function() { return /* reexport safe */ _bs4_popover_binder_js__WEBPACK_IMPORTED_MODULE_5__.PopoverBinder; },
/* harmony export */   "ScrollToOnEventBinder": function() { return /* reexport safe */ _scroll_to_on_event_binder_js__WEBPACK_IMPORTED_MODULE_9__.ScrollToOnEventBinder; },
/* harmony export */   "ScrollspyClassBinder": function() { return /* reexport safe */ _bs4_scrollspy_class_binder_js__WEBPACK_IMPORTED_MODULE_7__.ScrollspyClassBinder; },
/* harmony export */   "ShowToastOnEventBinder": function() { return /* reexport safe */ _bs4_show_toast_on_binder_js__WEBPACK_IMPORTED_MODULE_6__.ShowToastOnEventBinder; },
/* harmony export */   "ToggleAttributeBinder": function() { return /* reexport safe */ _toggle_attribute_binder_js__WEBPACK_IMPORTED_MODULE_10__.ToggleAttributeBinder; },
/* harmony export */   "ToggleClassBinder": function() { return /* reexport safe */ _toggle_class_binder_js__WEBPACK_IMPORTED_MODULE_11__.ToggleClassBinder; },
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* reexport safe */ _bs4_toggle_collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_2__.ToggleCollapseOnEventBinder; },
/* harmony export */   "TooltipBinder": function() { return /* reexport safe */ _bs4_tooltip_binder_js__WEBPACK_IMPORTED_MODULE_8__.TooltipBinder; }
/* harmony export */ });
/* harmony import */ var _bs4_collapse_on_url_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4-collapse-on-url.binder.js */ "../../packages/bs4/src/binders/bs4-collapse-on-url.binder.ts");
/* harmony import */ var _bs4_collapse_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bs4-collapse.binder.js */ "../../packages/bs4/src/binders/bs4-collapse.binder.ts");
/* harmony import */ var _bs4_toggle_collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-toggle-collapse-on-event.binder.js */ "../../packages/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts");
/* harmony import */ var _bs4_dropdown_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-dropdown.binder.js */ "../../packages/bs4/src/binders/bs4-dropdown.binder.ts");
/* harmony import */ var _bs4_expan_on_url_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-expan-on-url.binder.js */ "../../packages/bs4/src/binders/bs4-expan-on-url.binder.ts");
/* harmony import */ var _bs4_popover_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4-popover.binder.js */ "../../packages/bs4/src/binders/bs4-popover.binder.ts");
/* harmony import */ var _bs4_show_toast_on_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bs4-show-toast-on.binder.js */ "../../packages/bs4/src/binders/bs4-show-toast-on.binder.ts");
/* harmony import */ var _bs4_scrollspy_class_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-scrollspy-class.binder.js */ "../../packages/bs4/src/binders/bs4-scrollspy-class.binder.ts");
/* harmony import */ var _bs4_tooltip_binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-tooltip.binder.js */ "../../packages/bs4/src/binders/bs4-tooltip.binder.ts");
/* harmony import */ var _scroll_to_on_event_binder_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scroll-to-on-event.binder.js */ "../../packages/bs4/src/binders/scroll-to-on-event.binder.ts");
/* harmony import */ var _toggle_attribute_binder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toggle-attribute.binder.js */ "../../packages/bs4/src/binders/toggle-attribute.binder.ts");
/* harmony import */ var _toggle_class_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toggle-class.binder.js */ "../../packages/bs4/src/binders/toggle-class.binder.ts");













/***/ }),

/***/ "../../packages/bs4/src/binders/scroll-to-on-event.binder.ts":
/*!*******************************************************************!*\
  !*** ../../packages/bs4/src/binders/scroll-to-on-event.binder.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollToOnEventBinder": function() { return /* binding */ ScrollToOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



class ScrollToOnEventBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEvent", this._onEvent.bind(this));
  }

  _onEvent(event) {
    const offset = Number(this.el.dataset.offset || 0);
    const scrollElement = this.el.dataset.scrollElement ? document.querySelector(this.el.dataset.scrollElement) : window;

    if (this.target) {
      (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollTo)(this.target, offset, scrollElement);
      event.preventDefault();
    }
  }

  bind(el) {
    this.onEvent = this.onEvent.bind(this);
    const eventName = this.args[0];
    el.addEventListener(eventName, this.onEvent, {
      passive: true
    });
  }

  routine(el, targetSelector) {
    this.target = document.querySelector(targetSelector) || undefined;
  }

  unbind(el) {
    const eventName = this.args[0];
    el.removeEventListener(eventName, this.onEvent);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollToOnEventBinder, "key", "scroll-to-on-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/toggle-attribute.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/binders/toggle-attribute.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleAttributeBinder": function() { return /* binding */ ToggleAttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");




/**
 * Adds / removes the attribute on click on the bs4-toggle-button with the same id
 * E.g. with this binder you can toggle a hidden attribute to show / hide the element
 * Events
 * * `off`
 * * `on`
 */

class ToggleAttributeBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "state", "off");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "triggerState", this._triggerState.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onToggle", this._onToggle.bind(this));
  }

  _triggerState() {
    var _this$toggleButtonEve;

    (_this$toggleButtonEve = this.toggleButtonEvents) === null || _this$toggleButtonEve === void 0 ? void 0 : _this$toggleButtonEve.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.state, this.state);
  }

  _onToggle() {
    this.toggle.bind(this)(this.el);
  }

  toggle(el) {
    if (this.state === "removed") {
      this.add.bind(this)(el);
    } else {
      this.remove.bind(this)(el);
    }
  }

  remove(el) {
    const attributeName = this.args[0];
    el.removeAttribute(attributeName);
    this.state = "removed";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_ATTRIBUTE.elEventNames.removed, {
      detail: {
        attributeName
      }
    }));
    this.triggerState();
  }

  add(el) {
    const attributeName = this.args[0];
    el.setAttribute(attributeName, attributeName);
    this.state = "added";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_ATTRIBUTE.elEventNames.added, {
      detail: {
        attributeName
      }
    }));
    this.triggerState();
  }

  bind(el) {
    const attributeName = this.args[0];
    this.state = el.hasAttribute(attributeName) ? "added" : "removed";
  }

  unbind() {
    var _this$toggleButtonEve2, _this$toggleButtonEve3;

    (_this$toggleButtonEve2 = this.toggleButtonEvents) === null || _this$toggleButtonEve2 === void 0 ? void 0 : _this$toggleButtonEve2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
    (_this$toggleButtonEve3 = this.toggleButtonEvents) === null || _this$toggleButtonEve3 === void 0 ? void 0 : _this$toggleButtonEve3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  routine(el, newId) {
    const oldId = this._getValue(el);

    if (oldId && this.toggleButtonEvents) {
      this.toggleButtonEvents.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      this.toggleButtonEvents.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    if (!this.toggleButtonEvents) {
      this.toggleButtonEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.nsPrefix + newId);
      this.toggleButtonEvents.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      this.toggleButtonEvents.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleAttributeBinder, "key", "bs4-toggle-attribute-*");

/***/ }),

/***/ "../../packages/bs4/src/binders/toggle-class.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/binders/toggle-class.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleClassBinder": function() { return /* binding */ ToggleClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");




/**
 * Adds / removes the class on click on the bs4-toggle-button with the same id
 *
 * Events
 * * `off`
 * * `on`
 */

class ToggleClassBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "state", "off");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "triggerState", this._triggerState.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onToggle", this._onToggle.bind(this));
  }

  _triggerState() {
    var _this$toggleButtonEve;

    (_this$toggleButtonEve = this.toggleButtonEvents) === null || _this$toggleButtonEve === void 0 ? void 0 : _this$toggleButtonEve.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.state, this.state);
  }

  _onToggle() {
    this.toggle.bind(this)(this.el);
  }

  toggle(el) {
    if (this.state === "removed") {
      this.add.bind(this)(el);
    } else {
      this.remove.bind(this)(el);
    }
  }

  remove(el) {
    const className = this.args[0];
    el.classList.remove(className);
    this.state = "removed";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_CLASS.elEventNames.removed, {
      detail: {
        className
      }
    }));
    this.triggerState();
  }

  add(el) {
    const className = this.args[0];
    el.classList.add(className, className);
    this.state = "added";
    el.dispatchEvent(new CustomEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_CLASS.elEventNames.added, {
      detail: {
        className
      }
    }));
    this.triggerState();
  }

  bind(el) {
    const className = this.args[0];
    this.state = el.classList.contains(className) ? "added" : "removed";
  }

  unbind() {
    var _this$toggleButtonEve2, _this$toggleButtonEve3;

    (_this$toggleButtonEve2 = this.toggleButtonEvents) === null || _this$toggleButtonEve2 === void 0 ? void 0 : _this$toggleButtonEve2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
    (_this$toggleButtonEve3 = this.toggleButtonEvents) === null || _this$toggleButtonEve3 === void 0 ? void 0 : _this$toggleButtonEve3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  routine(el, newId) {
    const oldId = this._getValue(el);

    let toggleButton = this.toggleButtonEvents;

    if (oldId && toggleButton) {
      toggleButton.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      toggleButton.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    if (!this.toggleButtonEvents) {
      this.toggleButtonEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.nsPrefix + newId);
      toggleButton = this.toggleButtonEvents;
      toggleButton.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.toggle, this.onToggle, this);
      toggleButton.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleClassBinder, "key", "bs4-toggle-class-*");

/***/ }),

/***/ "../../packages/bs4/src/bs4.module.ts":
/*!********************************************!*\
  !*** ../../packages/bs4/src/bs4.module.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bs4Module": function() { return /* binding */ bs4Module; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/bs4/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/bs4/src/components/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/bs4/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/index.js */ "../../packages/bs4/src/services/index.ts");
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/bs4/src/helper/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants/index.js */ "../../packages/bs4/src/constants/index.ts");






const bs4Module = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_3__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_1__,
  helper: _helper_index_js__WEBPACK_IMPORTED_MODULE_4__,
  constants: _constants_index_js__WEBPACK_IMPORTED_MODULE_5__,

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.Bs4Service.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4AccordionComponent": function() { return /* binding */ Bs4AccordionComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_accordion_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-accordion.component.html */ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html");





const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
class Bs4AccordionComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.TemplatesComponent {
  // protected collapseServices: CollapseService[] = [];
  static get observedAttributes() {
    return ["collapse-icon-src", "collapse-icon-size", "show-only-one"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "show",
      required: false
    }, {
      name: "icon-direction",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: [],
      toggle: this.toggle,
      show: this.show,
      hide: this.hide,
      collapseIconSize: 16,
      showOnlyOne: true
    });
  }

  hide(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [this], {
        toggle: false
      }).hide();
    }
  }

  show(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));
    const others = Array.from(this.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

    if (others && this.scope.showOnlyOne) {
      for (const other of others) {
        new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(other, [], {
          toggle: false
        }).hide();
      }
    }

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [], {
        toggle: false
      }).show();
    }
  }

  toggle(item, index) {
    const target = this.querySelector("[data-index=\"".concat(index, "\"]"));
    const others = Array.from(this.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

    if (others && this.scope.showOnlyOne) {
      for (const other of others) {
        new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(other, [], {
          toggle: false
        }).hide();
      }
    }

    if (target) {
      this.initItemEventListeners(item, target);
      new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService(target, [], {
        toggle: false
      }).toggle();
    }
  }

  initItemEventListeners(item, element) {
    element.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_HIDE, this.onHide.bind(this, element, item));
    element.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_SHOW, this.onShow.bind(this, element, item));
    element.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_HIDE, this.onHide.bind(this, element, item), {
      once: true
    });
    element.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_SHOW, this.onShow.bind(this, element, item), {
      once: true
    });
  }

  getContentChildByIndex() {
    return this.querySelector(".card-body > *") || undefined;
  }

  onShow(element, item) {
    item.show = true;
    item.iconDirection = "up";
    const firstContentChild = this.getContentChildByIndex();

    if (firstContentChild) {
      this.triggerVisibilityChangedForElement(firstContentChild, item.show);
    }
  }

  onHide(element, item) {
    item.show = false;
    item.iconDirection = "down";
    const firstContentChild = this.getContentChildByIndex();

    if (firstContentChild) {
      this.triggerVisibilityChangedForElement(firstContentChild, item.show);
    }
  }

  transformTemplateAttributes(attributes) {
    attributes.handle = attributes.handle || handleize(attributes.title);
    attributes.show = !!attributes.show;
    attributes.iconDirection = attributes.iconDirection || attributes.show ? "up" : "down";
    return attributes;
  }
  /**
   * Trigger `visibility-changed` for components that need to update if visibility changes.
   * Se also bsf-tabs
   * @param element
   * @param visible
   */


  triggerVisibilityChangedForElement(element, visible) {
    setTimeout(() => {
      // Use this event to update any custom element when it becomes visible
      element.dispatchEvent(new CustomEvent("visibility-changed", {
        detail: {
          visible
        }
      }));
    }, 200);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4AccordionComponent.observedAttributes);
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      return view;
    });
  }

  async beforeBind() {
    return await super.beforeBind();
  }

  async afterBind() {
    return await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      return _bs4_accordion_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4AccordionComponent, "tagName", "bs4-accordion");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-button/bs4-button.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-button/bs4-button.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ButtonComponent": function() { return /* binding */ Bs4ButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class Bs4ButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["animation-class"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      animationClass: "btn-animation-start",
      onClick: this.onClick.bind(this)
    });
  }

  onClick() {
    this.startAnimation();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ButtonComponent.observedAttributes);
  }

  startAnimation() {
    this.classList.add(this.scope.animationClass);
  }

  onStartAnimation() {//
  }

  onEndAnimation() {
    setTimeout(() => {
      this.classList.remove(this.scope.animationClass);
    });
  }

  async init(observedAttributes) {
    return super.init(observedAttributes).then(view => {
      this.onStartAnimation = this.onStartAnimation.bind(this);
      this.addEventListener("webkitAnimationStart", this.onStartAnimation);
      this.addEventListener("animationstart", this.onStartAnimation);
      this.onEndAnimation = this.onEndAnimation.bind(this);
      this.addEventListener("webkitAnimationEnd", this.onEndAnimation);
      this.addEventListener("animationend", this.onEndAnimation);
      this.addEventListener("click", this.scope.onClick);
      return view;
    });
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("webkitAnimationStart", this.onStartAnimation);
    this.removeEventListener("animationstart", this.onStartAnimation);
    this.removeEventListener("webkitAnimationEnd", this.onEndAnimation);
    this.removeEventListener("animationend", this.onEndAnimation);
    this.removeEventListener("click", this.scope.onClick);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ButtonComponent, "tagName", "bs4-button");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4CarouselComponent": function() { return /* binding */ Bs4CarouselComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/carousel.service.js */ "../../packages/bs4/src/services/carousel.service.ts");



class Bs4CarouselComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["interval", "keyboard", "slide", "pauseOn", "wrap", "touch", "ride", "fade"];
  }

  requiredAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // Properties
      interval: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.interval,
      keyboard: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.keyboard,
      slide: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.slide,
      pauseOn: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.pause || false,
      // changed from pause to pauseOn
      wrap: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.wrap,
      touch: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.touch,
      ride: _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].Default.touch || false,
      fade: false,
      // Methods
      next: this.next,
      nextWhenVisible: this.nextWhenVisible,
      prev: this.prev,
      pause: this.pause,
      cycle: this.cycle,
      to: this.to,
      dispose: this.dispose
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);
  }

  async beforeBind() {
    await super.beforeBind();
    this.classList.add("carousel", "slide");
  }

  async afterBind() {
    this.carouselService = new _services_carousel_service_js__WEBPACK_IMPORTED_MODULE_2__["default"](this, {
      interval: this.scope.interval,
      keyboard: this.scope.keyboard,
      slide: this.scope.slide,
      pause: this.scope.pauseOn,
      wrap: this.scope.wrap,
      touch: this.scope.touch
    });

    if (this.scope.fade) {
      this.classList.add("carousel-fade");
    } // TODO make this configurable?


    this.carouselService.cycle();
    await super.afterBind();
  }

  next() {
    if (this.carouselService) {
      this.carouselService.next();
    }
  }

  nextWhenVisible() {
    if (this.carouselService) {
      this.carouselService.nextWhenVisible();
    }
  }

  prev() {
    if (this.carouselService) {
      this.carouselService.prev();
    }
  }

  pause() {
    if (this.carouselService) {
      this.carouselService.pause();
    }
  }

  cycle(event) {
    if (this.carouselService) {
      this.carouselService.cycle(event);
    }
  }

  to(index) {
    if (this.carouselService) {
      this.carouselService.to(index);
    }
  }

  dispose() {
    if (this.carouselService) {
      this.carouselService.dispose();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(Bs4CarouselComponent.observedAttributes);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4CarouselComponent, "tagName", "bs4-carousel");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* binding */ Bs4ColorPickerComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _sphinxxxx_color_conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sphinxxxx/color-conversion */ "../../.yarn/cache/@sphinxxxx-color-conversion-npm-2.2.2-26d4f4f80f-73d07e5b0d.zip/node_modules/@sphinxxxx/color-conversion/src/color.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _bs4_colorpicker_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-colorpicker.component.html */ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");


/**
 * Based on https://vanilla-picker.js.org/
 */







class EventBucket {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", []);
  }

  add(target, type, handler) {
    target.addEventListener(type, handler, false);
    this.events.push({
      target,
      type,
      handler
    });
  }

  remove(target, type, handler) {
    this.events = this.events.filter(e => {
      let isMatch = true;

      if (target && target !== e.target) {
        isMatch = false;
      }

      if (type && type !== e.type) {
        isMatch = false;
      }

      if (handler && handler !== e.handler) {
        isMatch = false;
      }

      if (isMatch) {
        EventBucket._doRemove(e.target, e.type, e.handler);
      }

      return !isMatch;
    });
  }

  static _doRemove(target, type, handler) {
    target.removeEventListener(type, handler, false);
  }

  destroy() {
    this.events.forEach(e => EventBucket._doRemove(e.target, e.type, e.handler));
    this.events = [];
  }

}

const dragTrack = (eventBucket, area, callback) => {
  let dragging = false;

  const clamp = (val, min, max) => {
    return Math.max(min, Math.min(val, max));
  };

  const onMove = (e, info, starting) => {
    if (starting) {
      dragging = true;
    }

    if (!dragging) {
      return;
    }

    e.preventDefault();
    const bounds = area.getBoundingClientRect(),
          w = bounds.width,
          h = bounds.height,
          x = info.clientX,
          y = info.clientY;
    const relX = clamp(x - bounds.left, 0, w),
          relY = clamp(y - bounds.top, 0, h);
    callback(relX / w, relY / h);
  };

  const onMouse = (e, starting) => {
    const button = e.buttons === undefined ? e.which : e.buttons;

    if (button === 1) {
      onMove(e, e, starting);
    } // `mouseup` outside of window:
    else {
      dragging = false;
    }
  };

  function onTouch(e, starting) {
    if (e.touches.length === 1) {
      onMove(e, e.touches[0], starting);
    } //Don't interfere with pinch-to-zoom etc:
    else {
      dragging = false;
    }
  } // Notice how we must listen on the whole window to really keep track of mouse movements,
  // while touch movements "stick" to the original target from `touchstart` (which works well for our purposes here):
  //
  //  https://stackoverflow.com/a/51750458/1869660
  //  "Mouse moves = *hover* like behavior. Touch moves = *drags* like behavior"
  //


  eventBucket.add(area, "mousedown", e => {
    onMouse(e, true);
  });
  eventBucket.add(area, "touchstart", e => {
    onTouch(e, true);
  });
  eventBucket.add(window, "mousemove", onMouse);
  eventBucket.add(area, "touchmove", onTouch);
  eventBucket.add(window, "mouseup", () => {
    dragging = false;
  });
  eventBucket.add(area, "touchend", () => {
    dragging = false;
  });
  eventBucket.add(area, "touchcancel", () => {
    dragging = false;
  });
};

const BG_TRANSP = "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='2' height='2'%3E%3Cpath d='M1,0H0V1H2V2H1' fill='lightgrey'/%3E%3C/svg%3E\")";
const HUES = 360; // We need to use keydown instead of keypress to handle Esc from the editor textbox:

const EVENT_KEY = "keydown"; //'keypress'

function stopEvent(e) {
  // Stop an event from bubbling up to the parent:
  e.preventDefault();
  e.stopPropagation();
}

function onKey(bucket, target, keys, handler) {
  let stop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  bucket.add(target, EVENT_KEY, function (e) {
    if (keys.indexOf(e.key) >= 0) {
      if (stop) {
        stopEvent(e);
      }

      handler(e);
    }
  });
}

class Bs4ColorPickerComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Component {
  static get observedAttributes() {
    return ["namespace", "alpha", "editor", "editor-format", "cancel-button", "okay-button", "color"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      namespace: "main",
      hsl: [],
      cssHue: "",
      cssHsl: "",
      cssHsla: "",
      alphaBg: "",
      color: "#0cf",
      alpha: true,
      editor: true,
      editorFormat: "hex",
      cancelButton: false,
      okayButton: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", new EventBucket());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domH", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domSL", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domA", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domEdit", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domSample", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domOkay", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_domCancel", null);
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(Bs4ColorPickerComponent.observedAttributes);
  }

  requiredAttributes() {
    return [];
  }

  async beforeBind() {
    await super.beforeBind();
    this.eventDispatcher = _ribajs_events__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher.getInstance("bs4-colorpicker:" + this.scope.namespace);
    this.setColor(this.scope.color);
    this.updateUI();
    this.bindEvents();
  }

  async afterTemplate(template) {
    await super.afterTemplate(template);
    this.setElements();
  }
  /**
   * Callback whenever the color changes.
   */


  onChange(color) {
    var _this$eventDispatcher;

    this.debug("onChange", color);
    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger("change", color);
  }
  /**
   * Callback when the user clicks "Ok".
   */


  onDone(color) {
    var _this$eventDispatcher2;

    this.debug("onDone", color);
    (_this$eventDispatcher2 = this.eventDispatcher) === null || _this$eventDispatcher2 === void 0 ? void 0 : _this$eventDispatcher2.trigger("done", color);
  }

  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_colorpicker_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "color") {
      this.setColor(this.scope.color);
    }
  }
  /**
   * Set/initialize the picker's color.
   *
   * @param color Color name, RGBA/HSLA/HEX string, or RGBA array.
   * @param flags If { silent: true }, won't trigger onChange.
   */


  setColor(color) {
    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      silent: false
    };
    return (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__.debounce)(this._setColor.bind(this))(color, flags);
  }

  _setColor(color) {
    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      silent: false
    };

    if (typeof color === "string") {
      color = color.trim();
    }

    if (!color) {
      return;
    }

    flags = flags || {};
    let c;

    try {
      // Will throw on unknown colors:
      c = new _sphinxxxx_color_conversion__WEBPACK_IMPORTED_MODULE_1__["default"](color);
    } catch (ex) {
      if (flags.failSilently) {
        return;
      }

      throw ex;
    }

    if (!this.scope.alpha) {
      const hsla = c.hsla;
      hsla[3] = 1;
      c.hsla = hsla;
    }

    this.color = c;
    this.setHSLA(null, null, null, null, flags);
  }

  setElements() {
    this._domH = this.querySelector(".picker_hue");
    this._domSL = this.querySelector(".picker_sl");
    this._domA = this.querySelector(".picker_alpha");
    this._domEdit = this.querySelector(".picker_editor") || null;
    this._domSample = this.querySelector(".picker_sample");
    this._domOkay = this.querySelector(".picker_done");
    this._domCancel = this.querySelector(".picker_cancel");
  }
  /**
   * Release all resources used by this picker instance.
   */


  disconnectedCallback() {
    this.events.destroy();
  }
  /**
   * Handle user input.
   */


  bindEvents() {
    const events = this.events;

    const addEvent = (target, type, handler) => {
      events.add(target, type, handler);
    }; // Prevent clicks while dragging from bubbling up to the parent:


    addEvent(this, "click", e => e.preventDefault()); // Draggable color selection

    const _dragTrack = dragTrack.bind(this); // Select hue


    if (!this._domH || !this._domSL || !this._domA || !this._domEdit || !this._domOkay) {
      throw new Error("Not ready!");
    }

    _dragTrack(events, this._domH, x => this.setHSLA(x)); // Select saturation/lightness


    _dragTrack(events, this._domSL, (x, y) => this.setHSLA(null, x, 1 - y)); // Select alpha


    if (this.scope.alpha) {
      _dragTrack(events, this._domA, (x, y) => this.setHSLA(null, null, null, 1 - y));
    } //Always init the editor, for accessibility and screen readers (we'll hide it with CSS if `!settings.editor`)


    addEvent(this._domEdit, "input", e => {
      const input = e.target;
      this.setColor(input.value, {
        fromEditor: true,
        failSilently: true
      });
    }); // Select all text on focus:

    addEvent(this._domEdit, "focus", e => {
      const input = e.target; //If no current selection:

      if (input.selectionStart === input.selectionEnd) {
        input.select();
      }
    });

    const onDoneProxy = () => {
      this.onDone(this.color);
    };

    addEvent(this._domOkay, "click", onDoneProxy);
    onKey(events, this, ["Enter"], onDoneProxy);
  }
  /*
   * "Hub" for all color changes
   *
   * @private
   */


  setHSLA() {
    let h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    let flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    if (!this.color) {
      throw new Error("Not ready!");
    }

    const hsla = this.color.hsla;
    [h, s, l, a].forEach((x, i) => {
      if (x || x === 0) {
        hsla[i] = x;
      }
    });
    this.color.hsla = hsla;
    this.updateUI(flags);

    if (this.onChange && !flags.silent) {
      this.onChange(this.color);
    }
  }

  updateUI() {
    let flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_6__.debounce)(this._updateUI.bind(this))(flags);
  }

  _updateUI() {
    let flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!this || !this.color) {
      return;
    }

    this.scope.hsl = this.color.hsla;
    this.scope.cssHue = "hsl(".concat(this.scope.hsl[0] * HUES, ", 100%, 50%)");
    this.scope.cssHsl = this.color.hslString;
    this.scope.cssHsla = this.color.hslaString;

    if (!this._domH || !this._domSL || !this._domA) {
      throw new Error("Color ui elements not found!");
    }

    const thumbH = this._domH.querySelector(".picker_selector");

    const thumbSL = this._domSL.querySelector(".picker_selector");

    const thumbA = this._domA.querySelector(".picker_selector");

    if (!thumbH || !thumbSL || !thumbA || !this._domEdit || !this._domSample) {
      console.error(thumbH, thumbSL, thumbA, this._domA, this._domSL, this._domH, this._domEdit, this._domSample);
      throw new Error("Not ready!");
    }

    const posX = (parent, child, relX) => {
      child.style.left = relX * 100 + "%";
    };

    const posY = (parent, child, relY) => {
      child.style.top = relY * 100 + "%";
    };

    posX(this._domH, thumbH, this.scope.hsl[0]); // S/L

    posX(this._domSL, thumbSL, this.scope.hsl[1]);
    posY(this._domSL, thumbSL, 1 - this.scope.hsl[2]); // Alpha

    posY(this._domA, thumbA, 1 - this.scope.hsl[3]);
    const opaque = this.scope.cssHsl;
    const transp = opaque.replace("hsl", "hsla").replace(")", ", 0)");
    const bg = "linear-gradient(".concat([opaque, transp], ")"); // Let the Alpha slider fade from opaque to transparent:

    this.scope.alphaBg = bg + ", " + BG_TRANSP; // Don't update the editor if the user is typing.
    // That creates too much noise because of our auto-expansion of 3/4/6 -> 8 digit hex codes.

    if (!flags.fromEditor) {
      const format = this.scope.editorFormat,
            alpha = this.scope.alpha;
      let color;

      switch (format) {
        case "rgb":
          color = this.color.printRGB(alpha);
          break;

        case "hsl":
          color = this.color.printHSL(alpha);
          break;

        default:
          color = this.color.printHex(alpha);
      }

      this.scope.color = color;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ColorPickerComponent, "tagName", "bs4-colorpicker");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ContentsComponent": function() { return /* binding */ Bs4ContentsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_contents_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-contents.component.html */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html");




class Bs4ContentsComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "scroll-offset", "scroll-element"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      scrollOffset: 0,
      anchors: []
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ContentsComponent.observedAttributes);
  }

  getIdFromElementOrParent(element) {
    let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    if (element.id) {
      return element.id;
    }

    if (depth <= this.scope.findHeaderIdDepth) {
      if (element.parentElement) {
        return this.getIdFromElementOrParent(element.parentElement, ++depth);
      }
    }

    return null;
  }

  pushHeaders(wrapperElement, headersStart, headersDepth, pushTo) {
    const headerElements = wrapperElement.querySelectorAll("h" + headersStart);
    headerElements.forEach(headerElement => {
      const id = this.getIdFromElementOrParent(headerElement);

      if (!id) {
        return;
      }

      pushTo.push({
        element: headerElement,
        href: "#" + id,
        title: headerElement.innerHTML,
        childs: []
      });

      if (headerElement.parentElement && headersDepth >= headersStart + 1) {
        this.pushHeaders(headerElement.parentElement, headersStart + 1, headersDepth, pushTo[pushTo.length - 1].childs);
      }
    });
  }

  async afterBind() {
    if (this.scope.headerParentSelector && this.scope.headersStart && this.scope.headersDepth) {
      this.wrapperElement = document.querySelector(this.scope.headerParentSelector) || undefined;
      this.scope.anchors = [];

      if (!this.wrapperElement) {
        console.error("No wrapper element found!");
        return;
      }

      this.pushHeaders(this.wrapperElement, this.scope.headersStart, this.scope.headersDepth, this.scope.anchors);
    }

    await super.afterBind();
  }

  requiredAttributes() {
    return ["headersStart", "headersDepth", "headerParentSelector"];
  }

  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();
    this.scope.anchors = [];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_contents_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ContentsComponent, "tagName", "bs4-contents");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4DropdownComponent": function() { return /* binding */ Bs4DropdownComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");



class Bs4DropdownComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      toggle: this.toggle
    });
  }

  toggle(event) {
    event.preventDefault();
    event.stopPropagation();

    if (!this.dropdownService) {
      throw new Error("DropdownService not ready!");
    }

    return this.dropdownService.toggle();
  }

  connectedCallback() {
    super.connectedCallback();
    this.dropdownService = new _services_dropdown_service_js__WEBPACK_IMPORTED_MODULE_2__.DropdownService(this.querySelector(".dropdown-toggle"));
    this.init(Bs4DropdownComponent.observedAttributes);
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4DropdownComponent, "tagName", "bs4-dropdown");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-form/bs4-form.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-form/bs4-form.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4FormComponent": function() { return /* binding */ Bs4FormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-form.component.html */ "../../packages/bs4/src/components/bs4-form/bs4-form.component.html");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");




class Bs4FormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "disable-submit-until-change", "use-ajax", "ajax-request-type", "auto-set-form-data", "strip-html", "scroll-invalid-element", "animate-invalid-element"];
  }

  getDefaultScope() {
    const scope = {
      id: (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getUID)("form"),
      form: {
        fields: {},
        valid: false,
        error: undefined
      },
      disableSubmitUntilChange: false,
      submitDisabled: false,
      onSubmit: this.onSubmit,
      useAjax: true,
      ajaxRequestType: "form",
      autoSetFormData: true,
      stripHtml: true,
      scrollToInvalidElement: true,
      animateInvalidElement: true
    };
    return scope;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formEl", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getDefaultScope());

    this.enableSubmit = this.enableSubmit.bind(this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4FormComponent.observedAttributes);
    this.addEventListeners();
  }

  addEventListeners() {
    if (this.scope.disableSubmitUntilChange) {
      this.addEventListener("input", this.enableSubmit);
    }
  }

  removeEventListeners() {
    this.removeEventListener("input", this.enableSubmit);
  }

  enableSubmit() {
    this.scope.submitDisabled = false;
  }

  requiredAttributes() {
    return [];
  }

  async beforeBind() {
    await super.beforeBind();
    this.id = this.scope.id;
  }

  async afterBind() {
    await super.afterBind();
  }

  stripHtml() {
    for (const key in this.scope.form.fields) {
      if (this.scope.form.fields[key] && typeof this.scope.form.fields[key] === "string") {
        this.scope.form.fields[key] = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.stripHtml)(this.scope.form.fields[key]);
      }
    }
  }

  onSubmit(event, el) {
    this.debug("onSubmit", event, el);

    if (!this.formEl) {
      console.warn("No form found");
      return false;
    }

    if (this.scope.autoSetFormData) {
      this.getFormValues();
    }

    if (this.scope.stripHtml) {
      this.stripHtml();
    }

    this.validate(this.formEl, this.scope.form);

    if (!this.scope.form.valid) {
      this.onInvalidForm(event);
      return;
    }

    const submitSettings = this.getSubmitSettings(event);

    if ((submitSettings === null || submitSettings === void 0 ? void 0 : submitSettings.target) === "_blank") {
      return true;
    }

    if (this.scope.useAjax) {
      // stop native submit because we submit the data using javascript
      event.preventDefault();
      event.stopPropagation();
      this.ajaxSubmit(event, el);
    }
  }
  /**
   * TODO Not tested in the wild, may need to be adjusted. Also the error handling is untested
   */


  async ajaxSubmit(event, el) {
    this.debug("onSubmit", event, el, this.scope);
    const submitSettings = this.getSubmitSettings(event);

    if (!submitSettings) {
      console.warn("Can't get submit settings");
      return;
    }

    if (this.scope.autoSetFormData) {
      this.getFormValues();
    }

    try {
      // This method is untested in the wild
      const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.fetch(submitSettings.action, submitSettings.method, this.scope.form.fields, submitSettings.type);

      if (!res || !res.body) {
        return this.onErrorSubmit("500", "Error", "Empty body!");
      }

      const message = res.body && res.body.message ? res.body.message : "";

      if (Number(res.status) >= 400) {
        // TODO generate message by status
        this.onErrorSubmit(res.status.toString(), message, res.body);
      }

      return this.onSuccessSubmit(res.status.toString(), message, res.body);
    } catch (err) {
      this.onErrorSubmit(err.status, err.body.message, err.body);
    }
  }

  getSubmitSettings(event) {
    var _originalEvent;

    if (!this.formEl) {
      console.warn("No form found");
      return null;
    }

    let action = this.formEl.action;
    let method = this.formEl.method;
    let target = this.formEl.method; // Overwrite action by formaction attribute: <button type="submit" formaction="/foobar">
    // TODO submitter from vanilla event
    // If this is a jquery event

    if (event !== null && event !== void 0 && (_originalEvent = event.originalEvent) !== null && _originalEvent !== void 0 && _originalEvent.submitter) {
      var _originalEvent2;

      const submitter = event === null || event === void 0 ? void 0 : (_originalEvent2 = event.originalEvent) === null || _originalEvent2 === void 0 ? void 0 : _originalEvent2.submitter;
      action = (submitter === null || submitter === void 0 ? void 0 : submitter.formAction) || action;
      method = (submitter === null || submitter === void 0 ? void 0 : submitter.formMethod) || method;
      target = (submitter === null || submitter === void 0 ? void 0 : submitter.formTarget) || target;
    }

    const settings = {
      action,
      method: method.toUpperCase(),
      target,
      type: this.scope.ajaxRequestType
    };
    return settings;
  }

  onInvalidForm(event) {
    this.debug("Form not valid", this.scope); // stop native submit

    event.preventDefault();
    event.stopPropagation();

    if (!this.formEl) {
      console.warn("No form found");
      return;
    }

    const invalidElements = this.formEl.querySelectorAll(":invalid");

    if (invalidElements && invalidElements.length) {
      const invalidElement = invalidElements[0];

      if (this.scope.scrollToInvalidElement) {
        this.scrollToElement(invalidElement);
      }

      if (this.scope.animateInvalidElement) {
        this.scrollToElement(invalidElement);
      }
    }

    this.dispatchEvent(new CustomEvent("invalid", {
      detail: {
        elements: invalidElements
      }
    }));
  }

  scrollToElement(invalidElement) {
    const vp = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)();
    const offset = vp.h / 2;
    (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.scrollTo)(invalidElement, offset, window);
    this.animateInvalidElement(invalidElement);
  }

  animateInvalidElement(invalidElement) {
    let endsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;
    invalidElement.classList.add("invalid-flashing-animation");
    setTimeout(() => {
      invalidElement.classList.remove("invalid-flashing-animation");
    }, endsOn);
  }

  onErrorSubmit(status, message, response) {
    this.debug("onErrorSubmit");
    this.dispatchEvent(new CustomEvent("submit-error", {
      detail: {
        status,
        message: message,
        response
      }
    }));
  }

  onSuccessSubmit(status, message, response) {
    this.debug("onSuccessSubmit");

    if (this.scope.disableSubmitUntilChange) {
      this.scope.submitDisabled = true;
    }

    this.dispatchEvent(new CustomEvent("submit-success", {
      detail: {
        status,
        message: message,
        response
      }
    }));
  }

  validate(form, validationScope) {
    let errorEventName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "validation-error";
    validationScope.valid = form.checkValidity();
    validationScope.error = form.validationMessage; // only show validation if we want to give a hint to the user that something is wrong

    if (!validationScope.valid) {
      this.dispatchEvent(new CustomEvent(errorEventName));
      form.classList.add("was-validated");
    }
  }

  getFormValues() {
    if (!this.formEl) {
      console.warn("No form found");
      return null;
    } // this.formEl.querySelectorAll("input").forEach((element) => {
    //   this.scope.form.fields[camelCase(element.name)] = getInputValue(element);
    // });


    this.scope.form.fields = new FormData(this.formEl);
    return this.scope.form.fields;
  }

  initForm() {
    const formEl = this.querySelector("form");

    if (formEl && formEl.length > 0) {
      this.formEl = formEl;
      this.formEl.classList.add("needs-validation");
      this.formEl.setAttribute("novalidate", "");
    } else {
      console.warn("bs4 form without children found");
    }
  }

  template() {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      this.initForm();
      return null;
    } else {
      return _bs4_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4FormComponent, "tagName", "bs4-form");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4IconComponent": function() { return /* binding */ Bs4IconComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class Bs4IconComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.BasicComponent {
  static get observedAttributes() {
    return ["size", "width", "height", "src", "color", "direction"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {});
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    // injects the changed attributes to scope
    super.attributeChangedCallback(name, oldValue, newValue, namespace);

    if (name === "src") {
      if (!newValue) {
        console.warn("The src attribute must have a value!", this.scope);
        return;
      }

      if (fetch) {
        fetch(newValue).then(response => {
          var _response$headers$get;

          if (response.status !== 200) {
            console.error(response.statusText);
            return "";
          }

          if (((_response$headers$get = response.headers.get("content-type")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.indexOf("image/svg+xml")) !== -1) {
            return response.text();
          } else {
            console.error("[bs4-icon] Only svg's are supported! But content-type is " + response.headers.get("content-type"));
          }

          return "";
        }).then(response => {
          this.innerHTML = response;
        }).catch(error => {
          console.error(error);
        });
      }
    }

    if (name === "title") {
      const title = document.createElementNS("http://www.w3.org/2000/svg", "title");
      title.textContent = newValue;
      const svg = this.firstElementChild;

      if (svg) {
        svg.appendChild(title);
      }
    }

    if (name === "color") {
      if (newValue.indexOf(",") !== -1) {
        newValue = newValue.split(",");

        if (newValue.length > 0) {
          this.className = this.className.replace(/(^|\s)color-\S+/g, "");

          for (let i = 0; i < newValue.length; i++) {
            const newColor = newValue[i];

            if (newColor.startsWith("#") || newColor.startsWith("rgb")) {
              this.style.color = newColor;
            }

            this.classList.add("color-".concat(newColor));
          }
        }
      } else {
        this.style.color = newValue;
        this.className = this.className.replace(/(^|\s)color-\S+/g, "");
        this.classList.add("color-".concat(newValue));
      }
    }

    if (name === "size") {
      const size = newValue;
      this.style.height = size + "px";
      this.style.width = size + "px";
      this.className = this.className.replace(/(^|\s)size-\S+/g, "");
      this.classList.add("size-".concat(size));
    }

    if (name === "width") {
      const width = newValue;
      this.style.width = width + "px";
      this.className = this.className.replace(/(^|\s)width-\S+/g, "");
      this.classList.add("width-".concat(width));
    }

    if (name === "height") {
      const height = newValue;
      this.style.height = height + "px";
      this.className = this.className.replace(/(^|\s)height-\S+/g, "");
      this.classList.add("height-".concat(height));
    }

    if (name === "direction") {
      const direction = newValue;
      let classString = "direction-".concat(direction);

      if (direction === "left") {
        classString += " rotate-270";
      } else if (direction === "left-top" || direction === "left-up" || direction === "top-left" || direction === "up-left") {
        classString += " rotate-315";
      } else if (direction === "top" || direction === "up") {
        classString += " rotate-0";
      } else if (direction === "top-right" || direction === "up-right" || direction === "right-top" || direction === "right-up") {
        classString += " rotate-45";
      } else if (direction === "right") {
        classString += " rotate-90";
      } else if (direction === "right-bottom" || direction === "right-down" || direction === "bottom-right" || direction === "down-right") {
        classString += " rotate-135";
      } else if (direction === "bottom" || direction === "down") {
        classString += " rotate-180";
      } else if (direction === "left-bottom" || direction === "left-down" || direction === "bottom-left" || direction === "down-left") {
        classString += " rotate-225";
      }

      this.className = this.className.replace(/(^|\s)direction-\S+/g, "");
      this.className = this.className.replace(/(^|\s)rotate-\S+/g, "");
      this.className += " " + classString;
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("aria-hidden", "true");
    this.setAttribute("role", "img");
    this.classList.add("iconset");
    this.init(Bs4IconComponent.observedAttributes); // set default values

    if (!this.scope.direction) {
      this.scope.direction = "up";
      this.attributeChangedCallback("direction", null, this.scope.direction, null);
    }
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4IconComponent, "tagName", "bs4-icon");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ModalItemComponent": function() { return /* binding */ Bs4ModalItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_modal_item_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-modal-item.component.html */ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/modal.service.js */ "../../packages/bs4/src/services/modal.service.ts");





class Bs4ModalItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["modal", "index"];
  }

  requiredAttributes() {
    return ["modal"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onHidden: this.onHidden.bind(this),
      index: -1,
      dismiss: this.dismiss.bind(this)
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ModalItemComponent.observedAttributes);
  }

  async afterBind() {
    this.initModalService();
    await super.afterBind();
  }

  initModalService() {
    const modal = this.scope.modal;
    const modalEl = this.firstElementChild;

    if (modal && modalEl) {
      this.modalService = new _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService(modalEl, {
        focus: modal.focus !== undefined ? modal.focus : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.focus,
        keyboard: modal.keyboard !== undefined ? modal.keyboard : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.keyboard,
        backdrop: modal.backdrop !== undefined ? modal.backdrop : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.backdrop,
        show: modal.show !== undefined ? modal.show : _services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService.Default.show
      }); // Call onHidden on hidden event once

      modalEl.addEventListener(_services_modal_service_js__WEBPACK_IMPORTED_MODULE_4__.EVENT_HIDDEN, this.scope.onHidden, {
        once: true
      }); // show modal using the modalservice

      this.modalService.show(this);
    }
  } // Can be called if modal should be removed


  dismiss(event) {
    var _this$modalService;

    (_this$modalService = this.modalService) === null || _this$modalService === void 0 ? void 0 : _this$modalService.hide(event);
  } // Remove modal from dom once shown


  onHidden(event, el) {
    var _this$scope$$parent;

    if (!el) {
      el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
    }

    const notificationContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

    if (typeof (notificationContainer === null || notificationContainer === void 0 ? void 0 : notificationContainer.onItemHide) === "function" && this.scope.modal && el) {
      notificationContainer.onItemHide(event, el, this.scope.index, this.scope.modal);
    }
  }

  template() {
    return _bs4_modal_item_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ModalItemComponent, "tagName", "bs4-modal-item");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4NavbarComponent": function() { return /* binding */ Bs4NavbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");




class Bs4NavbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["collapse-selector"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      toggle: this.toggle,
      show: this.show,
      hide: this.hide,
      isCollapsed: true,
      collapseSelector: ".navbar-collapse"
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "collapseTargets", new Map());

    this.onStateChange = this.onStateChange.bind(this);
  }

  async afterBind() {
    this.hide();
    await super.afterBind();
  }

  toggle(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.toggle();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  show(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.show();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  hide(event) {
    for (const collapseService of this.collapseTargets.values()) {
      collapseService.hide();
    }

    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.routerEvents = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main");
    this.routerEvents.on("newPageReady", this.onNewPageReady, this);
    this.setCollapseElement();
    this.onStateChange();
    this.init(Bs4NavbarComponent.observedAttributes);
  }

  setCollapseElement() {
    const collapseElements = Array.from(this.querySelectorAll(this.scope.collapseSelector) || []); // remove old collapse targets

    for (const collapseElement of this.collapseTargets.keys()) {
      if (!collapseElements.find(ce => ce === collapseElement)) {
        this.disposeCollapseTarget(collapseElement);
      }
    } // add new collapse targets


    for (const collapseElement of collapseElements) {
      if (!this.collapseTargets.has(collapseElement)) {
        this.collapseTargets.set(collapseElement, new _services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CollapseService(collapseElement, [this], {
          toggle: false
        }));
        collapseElement.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_SHOWN, this.onStateChange);
        collapseElement.addEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.onStateChange);
      }
    }

    this.hide();
  }

  disposeCollapseTargets() {
    for (const collapseElement of this.collapseTargets.keys()) {
      this.disposeCollapseTarget(collapseElement);
    }
  }

  disposeCollapseTarget(collapseElement) {
    const collapseService = this.collapseTargets.get(collapseElement);

    if (collapseService) {
      collapseService.dispose();
    }

    this.collapseTargets.delete(collapseElement);
    collapseElement.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_SHOWN, this.onStateChange);
    collapseElement.removeEventListener(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.onStateChange);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.disposeCollapseTargets();

    if (this.routerEvents) {
      this.routerEvents.off("newPageReady", this.onNewPageReady, this);
    }
  }

  onStateChange() {
    var _this$collapseTargets;

    this.scope.isCollapsed = (_this$collapseTargets = this.collapseTargets.values().next().value) === null || _this$collapseTargets === void 0 ? void 0 : _this$collapseTargets.isCollapsed();

    if (this.scope.isCollapsed) {
      this.classList.add(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CLASS_NAME_COLLAPSED);
      this.setAttribute("aria-expanded", "false");
    } else {
      this.classList.remove(_services_collapse_service_js__WEBPACK_IMPORTED_MODULE_3__.CLASS_NAME_COLLAPSED);
      this.setAttribute("aria-expanded", "true");
    }
  }

  onNewPageReady() {
    this.hide();
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "collapseSelector") {
      this.setCollapseElement();
    }
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4NavbarComponent, "tagName", "bs4-navbar");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts":
/*!************************************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* binding */ Bs4NotificationContainerComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_notification_container_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-notification-container.component.html */ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html");





class Bs4NotificationContainerComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["icon-url", "position-class", "channel-name"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      notifications: [],
      positionClass: "absolute-bottom absolute-center",
      channelName: "toast",
      onItemHide: this.onItemHide
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4NotificationContainerComponent.observedAttributes);
  } // Called by child if notification item wants to be removed


  onItemHide(event, el, index, notification) {
    if (index > -1) {
      this.notifications.splice(index, 1);
    } else {
      console.warn("Notification not found", notification);
    }
  }

  onShowNotification(notification) {
    this.debug("Received notification container on " + this.scope.channelName, this.scope, notification);
    this.scope.notifications.push(notification);
  }

  async afterBind() {
    // Add event dispatcher to listen for toast notifications
    this.notificationDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(this.scope.channelName);
    this.notificationDispatcher.on("show-notification", this.onShowNotification, this);
    await super.afterBind();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.notificationDispatcher.off("show-notification", this.onShowNotification, this);
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return _bs4_notification_container_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4NotificationContainerComponent, "tagName", "bs4-notification-container");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* binding */ Bs4ScrollspyComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bs4-contents/bs4-contents.component.js */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_scrollspy_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-scrollspy.component.html */ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html");




class Bs4ScrollspyComponent extends _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4ContentsComponent {
  static get observedAttributes() {
    return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "offset", "offset-bottom", "scroll-offset"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      offset: 0,
      offsetBottom: 0,
      scrollOffset: 0,
      anchors: []
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ScrollspyComponent.observedAttributes);
  }

  requiredAttributes() {
    return ["headersStart", "headersDepth", "headerParentSelector"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _bs4_scrollspy_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ScrollspyComponent, "tagName", "bs4-scrollspy");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts":
/*!**************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ShareComponent": function() { return /* binding */ Bs4ShareComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-share.component.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html");
/* harmony import */ var _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-share.label.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.label.html");
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/bs4 */ "../../packages/bs4/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");








/**
 * Component to share the a link
 * Similar projects which are can share stuff:
 *  * https://github.com/nimiq/web-share-shim
 *  * http://webintents.org/
 *  * http://chriswren.github.io/native-social-interactions/
 *  * https://www.sharethis.com/platform/share-buttons/
 *  * https://github.com/dimsemenov/PhotoSwipe/blob/master/src/js/ui/photoswipe-ui-default.js
 *
 */
class Bs4ShareComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["type", "title", "text", "url", "media-url", "label", "dropdown-direction"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    this.scope = this.getScopeDefaults();
    this.debug("constructor", this.scope);
    Bs4ShareComponent.count++;
    this.onExternalOpenEvent = this.onExternalOpenEvent.bind(this);
    this.onExternalCloseEvent = this.onExternalCloseEvent.bind(this);
  }

  getDefaultShareServices() {
    const newLine = "%0A";
    const shareItems = [{
      id: "facebook",
      label: "Facebook",
      // It is not possible to add a message on facebook sharer.php but with the Dialog API, see https://developers.facebook.com/docs/javascript/reference/FB.ui
      urlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{url}}",
      mediaUrlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{media_url}}",
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "twitter",
      label: "Twitter",
      urlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{url}}",
      mediaUrlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{media_url}}".concat(newLine, "({{url}})"),
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "pinterest",
      label: "Pinterest",
      urlTemplate: "http://www.pinterest.com/pin/create/button/" + "?url={{url}}&media={{media_url}}&description={{text}}",
      type: "popup",
      url: "",
      availableFor: ["image", "video"]
    }, {
      id: "whatsapp",
      label: "WhatsApp",
      urlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{url}}"),
      mediaUrlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "telegram",
      label: "Telegram",
      urlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}",
      mediaUrlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}".concat(newLine, "({{url}})"),
      type: "popup",
      url: "",
      availableFor: ["page", "image", "video"]
    }, {
      id: "email",
      label: "Email",
      urlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{url}}"),
      mediaUrlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
      type: "href",
      url: "",
      availableFor: ["page", "image", "video"]
    }, // {
    //   id: "sms",
    //   label: "SMS",
    //   urlTemplate: "sms:?body={{text}}",
    //   type: 'href',
    //   url: "",
    //   canPassUrl: false,
    //   availableFor: ['page', 'image', 'video'],
    // },
    {
      id: "download",
      label: "Download image",
      urlTemplate: "{{raw_media_url}}",
      type: "download",
      url: "",
      availableFor: ["image", "video"]
    }];
    return shareItems;
  }

  isIos() {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i) !== null;
  }

  isAndroid() {
    return navigator.userAgent.match(/Android/i) !== null;
  }

  browserSupportsNativeShare() {
    return typeof navigator.share === "function";
  }

  getScopeDefaults() {
    const scope = {
      type: "page",
      title: document.title,
      text: "Look at this! 👀🤩",
      url: window.location.href,
      label: "Share",
      labelTemplate: _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_4__["default"],
      isAndroid: this.isAndroid(),
      isIos: this.isIos(),
      isDesktop: false,
      isNative: this.browserSupportsNativeShare(),
      dropdownId: "dropdownShare" + Bs4ShareComponent.count,
      shareItems: this.getDefaultShareServices(),
      dropdownDirection: "down",
      // Methods
      share: this.share,
      shareOnService: this.shareOnService
    }; // on those two support "mobile deep links", so HTTP based fallback for all others.

    scope.isDesktop = !scope.isIos && !scope.isAndroid;
    return scope;
  }

  onExternalOpenEvent() {
    var _this$dropdown;

    (_this$dropdown = this.dropdown) === null || _this$dropdown === void 0 ? void 0 : _this$dropdown.show();
  }

  onExternalCloseEvent() {
    var _this$dropdown2;

    (_this$dropdown2 = this.dropdown) === null || _this$dropdown2 === void 0 ? void 0 : _this$dropdown2.close();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ShareComponent.observedAttributes);
    this.addEventListeners();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListeners();
  }

  addEventListeners() {
    this.addEventListener("open", this.onExternalOpenEvent);
    this.addEventListener("close", this.onExternalCloseEvent);
  }

  removeEventListeners() {
    this.removeEventListener("open", this.onExternalOpenEvent);
    this.removeEventListener("close", this.onExternalOpenEvent);
  }

  getURLForShare() {
    if (this.scope.type === "page" && this.scope.url) {
      return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__.getUrl)(this.scope.url);
    }

    return window.location.href;
  }

  getMediaUrlForShare() {
    if (this.scope.type !== "page" && this.scope.url) {
      return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_2__.getUrl)(this.scope.url);
    }

    return "";
  }

  getTextForShare() {
    return this.scope.text;
  }
  /**
   * Currently only used for email
   * @param appendUrl
   */


  getTitleForShare() {
    return this.scope.title;
  }

  updateShareURLs() {
    for (const shareItem of this.scope.shareItems) {
      const url = this.getURLForShare();
      const mediaUrl = this.getMediaUrlForShare();
      const shareText = this.getTextForShare();
      const shareTitle = this.getTitleForShare();
      let urlTemplate = shareItem.urlTemplate;

      if (this.scope.type !== "page" && shareItem.mediaUrlTemplate) {
        urlTemplate = shareItem.mediaUrlTemplate;
      }

      const shareURL = urlTemplate.replace("{{url}}", encodeURIComponent(url)).replace("{{url}}", encodeURIComponent(url)).replace("{{media_url}}", encodeURIComponent(mediaUrl)).replace("{{raw_media_url}}", mediaUrl).replace("{{text}}", encodeURIComponent(shareText)).replace("{{title}}", encodeURIComponent(shareTitle));
      shareItem.available = shareItem.availableFor.indexOf(this.scope.type) !== -1;
      shareItem.url = shareURL;
    }
  }

  initDropdown() {
    const dropDownButtonElement = this.querySelector(".dropdown-toggle-share");

    if (!dropDownButtonElement) {
      console.warn('Element with selector ".dropdown-toggle-share" not found!', this);
      return;
    }

    this.dropdown = new _ribajs_bs4__WEBPACK_IMPORTED_MODULE_5__.DropdownService(dropDownButtonElement);
  }
  /**
   * New browser popup with the external site (e.g. Facebook) on you want to share your url
   * @param binding
   * @param event
   * @param controller
   * @param el
   */


  shareOnService(event, controller, el) {
    var _this$dropdown3;

    this.debug("Open popup");
    (_this$dropdown3 = this.dropdown) === null || _this$dropdown3 === void 0 ? void 0 : _this$dropdown3.close();

    if (!el || !el.href) {
      console.error("No href attribute found");
      return false;
    } // We use the default browser anchor href logic for download and href


    if (el.hasAttribute("type") && el.getAttribute("type") === "download" || el.getAttribute("type") === "href") {
      return true;
    }

    event.preventDefault();
    event.stopPropagation(); // this.debug('Open popup');

    window.open(el.href, "Share", "scrollbars=yes,resizable=yes,toolbar=no," + "location=yes,width=550,height=420,top=100,left=" + (window.screen ? Math.round(screen.width / 2 - 275) : 100));
    return false;
  }

  async share(event) {
    this.debug("share", this.scope);
    event.preventDefault();
    event.stopPropagation();

    if (this.scope.isNative && !this.scope.isDesktop) {
      return navigator.share({
        title: this.scope.title,
        text: "".concat(this.scope.text, "\r\n\r\n"),
        url: this.scope.url || window.location.href
      }).catch(error => {
        if (error.name === "AbortError") {
          // TODO show flash message
          // this.debug(error.message);
          return;
        }

        console.error("Error ".concat(error.name, ": ").concat(error.message), error);
      });
    } else {
      var _this$dropdown4;

      this.updateShareURLs();
      return (_this$dropdown4 = this.dropdown) === null || _this$dropdown4 === void 0 ? void 0 : _this$dropdown4.toggle();
    }
  }

  async beforeBind() {
    await super.beforeBind(); // this.debug('beforeBind');
  }

  async afterBind() {
    this.initDropdown(); // this.debug('afterBind', this.scope);

    await super.afterBind();
  }

  requiredAttributes() {
    return ["url"];
  }

  template() {
    this.debug("template", this, (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__.hasChildNodesTrim)(this));

    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_6__.hasChildNodesTrim)(this)) {
      // If a child is set, this is a custom label template
      this.scope.labelTemplate = this.innerHTML;
      this.debug("Custom label template: ", this.scope.labelTemplate);
    }

    return _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ShareComponent, "tagName", "bs4-share");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ShareComponent, "count", 0);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4SidebarComponent": function() { return /* binding */ Bs4SidebarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");






class Bs4SidebarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "container-selector", "position", "width", "auto-show-on-wider-than", "auto-hide-on-slimmer-than", "force-hide-on-location-pathnames", "force-show-on-location-pathnames", "overlay-on-slimmer-than", "watch-new-page-ready-event"];
  }

  constructor() {
    super(); // assign this to bound version, so we can remove window EventListener later without problem

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // template properties
      containerSelector: undefined,
      state: "hidden",
      oldState: "hidden",
      id: undefined,
      width: "250px",
      // Options
      position: "left",
      autoShowOnWiderThan: 1199,
      autoHideOnSlimmerThan: 1200,
      watchNewPageReadyEvent: true,
      forceHideOnLocationPathnames: [],
      forceShowOnLocationPathnames: [],
      overlayOnSlimmerThan: 1200,
      // template methods
      hide: this.hide,
      show: this.show,
      toggle: this.toggle
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onEnvironmentChanges", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__.debounce)(this._onEnvironmentChanges.bind(this)));

    this.onEnvironmentChanges = this.onEnvironmentChanges.bind(this);
  }

  setState(state) {
    this.scope.oldState = "".concat(this.scope.state);
    this.scope.state = state;
    this.onStateChange();
  }

  getState() {
    return this.scope.state;
  }

  getShowMode() {
    let mode;
    const vw = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w;

    if (vw < this.scope.overlayOnSlimmerThan) {
      mode = "overlay-" + this.scope.position;
    } else {
      mode = "side-" + this.scope.position;
    }

    return mode;
  }

  hide() {
    this.setState("hidden");
  }

  show() {
    const state = this.getShowMode();
    this.setState(state);
  }

  toggle() {
    if (this.scope.state === "hidden") {
      this.show();
    } else {
      this.hide();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4SidebarComponent.observedAttributes);
    this.computedStyle = window.getComputedStyle(this);
    window.addEventListener("resize", this.onEnvironmentChanges, {
      passive: true
    }); // initial

    this.onEnvironmentChanges();
  }

  initToggleButtonEventDispatcher() {
    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    }

    this.eventDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.nsPrefix + this.scope.id);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
  }

  initRouterEventDispatcher() {
    if (this.scope.watchNewPageReadyEvent) {
      this.routerEvents.on("newPageReady", this.onEnvironmentChanges, this);
    }
  }

  onHidden() {
    this.setContainersStyle(this.scope.state);
    const translateX = this.scope.position === "left" ? "-100%" : "100%";
    this.setAttribute("style", "transform:translateX(".concat(translateX, ");width:").concat(this.scope.width, ";"));
  }

  onSide(state) {
    this.setContainersStyle(state);
    this.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
  }

  onOverlay(state) {
    this.setContainersStyle(state);
    this.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
  }

  triggerState() {
    var _this$eventDispatcher;

    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger("state", this.scope.state);
  }

  onStateChange() {
    switch (this.scope.state) {
      case "side-left":
      case "side-right":
        this.onSide(this.scope.state);
        break;

      case "overlay-left":
      case "overlay-right":
        this.onOverlay(this.scope.state);
        break;

      default:
        this.onHidden();
        break;
    }

    if (this.eventDispatcher) {
      this.eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.scope.state);
    }
  }

  get width() {
    return this.offsetWidth ? this.offsetWidth + "px" : this.scope.width;
  }

  setStateByEnvironment() {
    if (this.scope.forceHideOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
      return this.hide();
    }

    if (this.scope.forceShowOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
      return this.show();
    }

    const vw = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w;

    if (this.scope.autoHideOnSlimmerThan > -1 && vw < this.scope.autoHideOnSlimmerThan) {
      return this.hide();
    }

    if (this.scope.autoShowOnWiderThan > -1 && vw > this.scope.autoShowOnWiderThan) {
      return this.show();
    }
  }
  /**
   * Internal "undebounced" version of `onEnvironmentChanges`.
   */


  _onEnvironmentChanges() {
    this.setStateByEnvironment();
  }
  /**
   * If viewport size changes, location url changes or something else.
   */


  getContainers() {
    return this.scope.containerSelector ? document.querySelectorAll(this.scope.containerSelector) : undefined;
  }

  initContainers(state) {
    this.setContainersStyle(state);
  }

  setContainersStyle(state) {
    const containers = this.getContainers() || [];

    if (containers) {
      for (let i = 0; i < containers.length; i++) {
        const container = containers[i];
        this.setContainerStyle(container, state);
      }
    }
  }
  /**
   * Sets the container style, takes overs always the transition style of this sidebar
   * @param container
   * @param style
   * @param state
   */


  setContainerStyle(container, state) {
    const currStyle = container.style;

    if (state) {
      const width = this.width;
      const conStyle = window.getComputedStyle(container);

      switch (state) {
        case "side-left":
          switch (conStyle.position) {
            case "fixed":
              currStyle.left = width;
              break;

            default:
              currStyle.marginLeft = width;
              break;
          }

          break;

        case "side-right":
          switch (conStyle.position) {
            case "fixed":
              currStyle.right = width;
              break;

            default:
              currStyle.marginRight = width;
              break;
          }

          break;

        case "hidden":
          switch (this.scope.oldState) {
            case "side-left":
              switch (conStyle.position) {
                case "fixed":
                  currStyle.left = "0";
                  break;

                default:
                  currStyle.marginLeft = "0";
                  break;
              }

              break;

            case "side-right":
              switch (conStyle.position) {
                case "fixed":
                  currStyle.right = "0";
                  break;

                default:
                  currStyle.marginRight = "0";
                  break;
              }

              break;

            default:
              break;
          }

        default:
          break;
      }
    }

    container.style.transition = this.computedStyle ? this.computedStyle.transition : ""; // let styleStr = container.getAttribute("style") || "";
    // styleStr += style;
    // return container.setAttribute("style", styleStr);
  }

  async beforeBind() {
    await super.beforeBind();
    this.scope.oldState = this.getShowMode();
    this.initRouterEventDispatcher();
    return this.onEnvironmentChanges();
  }

  async afterBind() {
    this.onEnvironmentChanges();
    await super.afterBind();
  }

  requiredAttributes() {
    return ["id"];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "containerSelector") {
      this.initContainers(this.scope.state);
    }

    if (attributeName === "id") {
      this.initToggleButtonEventDispatcher();
    }
  } // deconstruction


  disconnectedCallback() {
    var _this$eventDispatcher2, _this$eventDispatcher3;

    super.disconnectedCallback();
    (_this$eventDispatcher2 = this.eventDispatcher) === null || _this$eventDispatcher2 === void 0 ? void 0 : _this$eventDispatcher2.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.triggerState, this);
    (_this$eventDispatcher3 = this.eventDispatcher) === null || _this$eventDispatcher3 === void 0 ? void 0 : _this$eventDispatcher3.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.toggle, this);
    this.routerEvents.off("newPageReady", this.onEnvironmentChanges, this);
    window.removeEventListener("resize", this.onEnvironmentChanges, false);
  }

  template() {
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4SidebarComponent, "tagName", "bs4-sidebar");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4SlideshowComponent": function() { return /* binding */ Bs4SlideshowComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/extras */ "../../packages/extras/src/index.ts");
/* harmony import */ var _bs4_slideshow_slides_component_html__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-slideshow-slides.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html");
/* harmony import */ var _bs4_slideshow_controls_component_html__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-slideshow-controls.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html");
/* harmony import */ var _bs4_slideshow_indicators_component_html__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bs4-slideshow-indicators.component.html */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }










const SLIDESHOW_INNER_SELECTOR = ".slideshow-inner";
const SLIDES_SELECTOR = "".concat(SLIDESHOW_INNER_SELECTOR, " > .slide");
class Bs4SlideshowComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_5__.TemplatesComponent {
  // TODO type ResizeObserver;
  get slideshowInner() {
    if (!this._slideshowInner) {
      this._slideshowInner = this.querySelector(SLIDESHOW_INNER_SELECTOR);
    }

    if (!this._slideshowInner) {
      throw new Error("Child element with selector ".concat(SLIDESHOW_INNER_SELECTOR, " not found!"));
    }

    return this._slideshowInner;
  }

  get slideElements() {
    if (!this._slideElements) {
      this._slideElements = this.querySelectorAll(SLIDES_SELECTOR);
    }

    if (!this._slideElements) {
      throw new Error("Child element with selector ".concat(SLIDES_SELECTOR, " not found!"));
    }

    return this._slideElements;
  }

  get controlsElements() {
    if (!this._controlsElements) {
      this._controlsElements = this.querySelectorAll(".slideshow-control-prev, .slideshow-control-next");
    }

    return this._controlsElements;
  }

  get indicatorsElement() {
    if (!this._indicatorsElement) {
      this._indicatorsElement = this.querySelector(".slideshow-indicators");
    }

    return this._indicatorsElement;
  }

  static get observedAttributes() {
    return ["min-width", "slides-to-show", "slides-to-scroll", "controls", "controls-position", "drag", "autoplay", "autoplay-interval", "autoplay-velocity", "control-prev-icon-src", "control-next-icon-src", "indicator-inactive-icon-src", "indicator-active-icon-src", "angle", "set-active-slide", "pause-on-hover", "sticky", "indicators", "indicators-position", "pause", "sm-min-width", "sm-slides-to-show", "sm-slides-to-scroll", "sm-controls", "sm-controls-position", "sm-drag", "sm-autoplay", "sm-autoplay-interval", "sm-autoplay-velocity", "sm-control-prev-icon-src", "sm-control-next-icon-src", "sm-indicator-inactive-icon-src", "sm-indicator-active-icon-src", "sm-angle", "sm-set-active-slide", "sm-pause-on-hover", "sm-sticky", "sm-indicators", "sm-indicators-position", "sm-pause", "md-min-width", "md-slides-to-show", "md-slides-to-scroll", "md-controls", "md-controls-position", "md-drag", "md-autoplay", "md-autoplay-interval", "md-autoplay-velocity", "md-control-prev-icon-src", "md-control-next-icon-src", "md-indicator-inactive-icon-src", "md-indicator-active-icon-src", "md-angle", "md-set-active-slide", "md-pause-on-hover", "md-sticky", "md-indicators", "sm-indicators-position", "md-pause", "lg-min-width", "lg-slides-to-show", "lg-slides-to-scroll", "lg-controls", "lg-controls-position", "lg-drag", "lg-autoplay", "lg-autoplay-interval", "lg-autoplay-velocity", "lg-control-prev-icon-src", "lg-control-next-icon-src", "lg-indicator-inactive-icon-src", "lg-indicator-active-icon-src", "lg-angle", "lg-set-active-slide", "lg-pause-on-hover", "lg-sticky", "lg-indicators", "lg-indicators-position", "lg-pause", "xl-min-width", "xl-slides-to-show", "xl-slides-to-scroll", "xl-controls", "xl-controls-position", "xl-drag", "xl-autoplay", "xl-autoplay-interval", "xl-autoplay-velocity", "xl-control-prev-icon-src", "xl-control-next-icon-src", "xl-indicator-inactive-icon-src", "xl-indicator-active-icon-src", "xl-angle", "xl-set-active-slide", "xl-pause-on-hover", "xl-sticky", "xl-indicators", "xl-indicators-position", "xl-pause"];
  }

  constructor() {
    super(); // set event listeners to the this-bound version once, so we can easily pass them to DOM event handlers and remove them again later

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "class",
      required: false
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: true
    }, {
      name: "active",
      type: "boolean",
      required: false
    }, {
      name: "index",
      type: "number",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_slideshowInner", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_slideElements", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_controlsElements", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_indicatorsElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateControls", _bs4_slideshow_controls_component_html__WEBPACK_IMPORTED_MODULE_8__["default"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateIndicators", _bs4_slideshow_indicators_component_html__WEBPACK_IMPORTED_MODULE_9__["default"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autoplayIntervalIndex", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "continuousAutoplayIntervalIndex", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "resumeTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "breakpoint", "xs");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // Template methods
      next: this.next.bind(this),
      prev: this.prev.bind(this),
      goTo: this.goTo.bind(this),
      // Template properties
      items: new Array(),
      // Options
      slidesToScroll: 1,
      controls: true,
      controlsPosition: "inside-middle",
      pauseOnHover: true,
      sticky: false,
      indicators: true,
      indicatorsPosition: "inside-bottom",
      pause: false,
      drag: true,
      autoplay: false,
      autoplayInterval: 0,
      autoplayVelocity: 0.8,
      controlPrevIconSrc: "",
      controlNextIconSrc: "",
      indicatorActiveIconSrc: "",
      indicatorInactiveIconSrc: "",
      angle: "horizontal",
      // Responsive options
      xs: {
        minWidth: 0
      },
      sm: {
        minWidth: 576
      },
      md: {
        minWidth: 768
      },
      lg: {
        minWidth: 992
      },
      xl: {
        minWidth: 1200
      },
      // Classes
      controlsPositionClass: "",
      indicatorsPositionClass: ""
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onViewChanges", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.debounce)(this._onViewChanges.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.debounce)(this._onScroll.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onMouseUp", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_4__.throttle)(this._onMouseUp.bind(this)));

    this.onViewChanges = this.onViewChanges.bind(this);
    this.onVisibilityChanged = this.onVisibilityChanged.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.onScrollend = this.onScrollend.bind(this);
    this.onMouseIn = this.onMouseIn.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
  }
  /**
   * Go to next slide
   */


  next() {
    this.scrollToNextSlide();
  }
  /**
   * Go to prev slide
   */


  prev() {
    this.scrollToPrevSlide();
  }
  /**
   * Go to slide by index
   * @param index
   */


  goTo(index) {
    this.setSlidePositions();
    let top = 0;
    let left = 0;

    if (!this.scope.items[index]) {
      console.error("Slide with index \"".concat(index, "\" not found!"), this.scope.items[index]);
      return;
    }

    if (this.scope.angle === "vertical") {
      // Check if we do not need to slide
      if (this.scope.items[index].position.centerY === 0) {
        // We do not need to scroll
        return;
      }

      top = this.slideshowInner.scrollTop + this.scope.items[index].position.centerY;
    } else {
      // Check if we do not need to slide
      if (this.scope.items[index].position.centerX === 0) {
        // We do not need to scroll
        return;
      }

      left = this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
    } // TODO new scroll service based on https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/


    if (this.slideElements[index]) {
      // if is is window to scroll
      if (typeof this.slideshowInner.scroll === "function") {
        this.slideshowInner.scroll({
          behavior: "smooth",
          left,
          top
        });
      } else {
        if (this.scope.angle === "vertical") {
          this.slideshowInner.scrollTop = top;
        } else {
          this.slideshowInner.scrollLeft = left;
        }
      }
    }
  }

  setOptions(dest, source) {
    dest.slidesToScroll = typeof source.slidesToScroll !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.slidesToScroll) : dest.slidesToScroll;
    dest.controls = typeof source.controls !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controls) : dest.controls;
    dest.controlsPosition = typeof source.controlsPosition !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlsPosition) : dest.controlsPosition;
    dest.drag = typeof source.drag !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.drag) : dest.drag;
    dest.autoplay = typeof source.autoplay !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplay) : dest.autoplay;
    dest.autoplayInterval = typeof source.autoplayInterval !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplayInterval) : dest.autoplayInterval;
    dest.autoplayVelocity = typeof source.autoplayVelocity !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.autoplayVelocity) : dest.autoplayVelocity;
    dest.controlPrevIconSrc = typeof source.controlPrevIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlPrevIconSrc) : dest.controlPrevIconSrc;
    dest.controlNextIconSrc = typeof source.controlNextIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.controlNextIconSrc) : dest.controlNextIconSrc;
    dest.indicatorActiveIconSrc = typeof source.indicatorActiveIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorActiveIconSrc) : dest.indicatorActiveIconSrc;
    dest.indicatorInactiveIconSrc = typeof source.indicatorInactiveIconSrc !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorInactiveIconSrc) : dest.indicatorInactiveIconSrc;
    dest.angle = typeof source.angle !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.angle) : dest.angle;
    dest.pauseOnHover = typeof source.pauseOnHover !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.pauseOnHover) : dest.pauseOnHover;
    dest.sticky = typeof source.sticky !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.sticky) : dest.sticky;
    dest.indicators = typeof source.indicators !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicators) : dest.indicators;
    dest.indicatorsPosition = typeof source.indicatorsPosition !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.indicatorsPosition) : dest.indicatorsPosition;
    dest.pause = typeof source.pause !== "undefined" ? (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, source.pause) : dest.pause;
  }

  setOptionsIfUndefined(dest, source) {
    dest.slidesToScroll = typeof dest.slidesToScroll === "undefined" ? source.slidesToScroll : dest.slidesToScroll;
    dest.controls = typeof dest.controls === "undefined" ? source.controls : dest.controls;
    dest.controlsPosition = typeof dest.controlsPosition === "undefined" ? source.controlsPosition : dest.controlsPosition;
    dest.drag = typeof dest.drag === "undefined" ? source.drag : dest.drag;
    dest.autoplay = typeof dest.autoplay === "undefined" ? source.autoplay : dest.autoplay;
    dest.autoplayInterval = typeof dest.autoplayInterval === "undefined" ? source.autoplayInterval : dest.autoplayInterval;
    dest.autoplayVelocity = typeof dest.autoplayVelocity === "undefined" ? source.autoplayVelocity : dest.autoplayVelocity;
    dest.controlPrevIconSrc = typeof dest.controlPrevIconSrc === "undefined" ? source.controlPrevIconSrc : dest.controlPrevIconSrc;
    dest.controlNextIconSrc = typeof dest.controlNextIconSrc === "undefined" ? source.controlNextIconSrc : dest.controlNextIconSrc;
    dest.indicatorActiveIconSrc = typeof dest.indicatorActiveIconSrc === "undefined" ? source.indicatorActiveIconSrc : dest.indicatorActiveIconSrc;
    dest.indicatorInactiveIconSrc = typeof dest.indicatorInactiveIconSrc === "undefined" ? source.indicatorInactiveIconSrc : dest.indicatorInactiveIconSrc;
    dest.angle = typeof dest.angle === "undefined" ? source.angle : dest.angle;
    dest.pauseOnHover = typeof dest.pauseOnHover === "undefined" ? source.pauseOnHover : dest.pauseOnHover;
    dest.sticky = typeof dest.sticky === "undefined" ? source.sticky : dest.sticky;
    dest.indicators = typeof dest.indicators === "undefined" ? source.indicators : dest.indicators;
    dest.indicatorsPosition = typeof dest.indicatorsPosition === "undefined" ? source.indicatorsPosition : dest.indicatorsPosition;
    dest.pause = typeof dest.pause === "undefined" ? source.pause : dest.pause;
  }

  initResponsiveOptions() {
    this.setOptions(this.scope.xs, this.scope);
    this.setOptionsIfUndefined(this.scope.sm, this.scope.xs);
    this.setOptionsIfUndefined(this.scope.md, this.scope.sm);
    this.setOptionsIfUndefined(this.scope.lg, this.scope.md);
    this.setOptionsIfUndefined(this.scope.xl, this.scope.lg);
    this.breakpoint = this.getBreakpoint();
    this.setOptionsByBreakpoint(this.breakpoint);
  }

  setControlsOptions() {
    var _this$scope$xs$contro, _this$scope$sm$contro, _this$scope$md$contro, _this$scope$lg$contro, _this$scope$xl$contro;

    const xsControlsPosition = (_this$scope$xs$contro = this.scope.xs.controlsPosition) === null || _this$scope$xs$contro === void 0 ? void 0 : _this$scope$xs$contro.split("-");
    const smControlsPosition = (_this$scope$sm$contro = this.scope.sm.controlsPosition) === null || _this$scope$sm$contro === void 0 ? void 0 : _this$scope$sm$contro.split("-");
    const mdControlsPosition = (_this$scope$md$contro = this.scope.md.controlsPosition) === null || _this$scope$md$contro === void 0 ? void 0 : _this$scope$md$contro.split("-");
    const lgControlsPosition = (_this$scope$lg$contro = this.scope.lg.controlsPosition) === null || _this$scope$lg$contro === void 0 ? void 0 : _this$scope$lg$contro.split("-");
    const xlControlsPosition = (_this$scope$xl$contro = this.scope.xl.controlsPosition) === null || _this$scope$xl$contro === void 0 ? void 0 : _this$scope$xl$contro.split("-");
    this.scope.controlsPositionClass = "control-".concat(xsControlsPosition[0], " control-").concat(xsControlsPosition[1], " control-sm-").concat(smControlsPosition[0], " control-sm-").concat(smControlsPosition[1], " control-md-").concat(mdControlsPosition[0], " control-md-").concat(mdControlsPosition[1], " control-lg-").concat(lgControlsPosition[0], " control-lg-").concat(lgControlsPosition[1], " control-xl-").concat(xlControlsPosition[0], " control-xl-").concat(xlControlsPosition[1]);
  }

  setIndicatorsOptions() {
    var _this$scope$xs$indica, _this$scope$sm$indica, _this$scope$md$indica, _this$scope$lg$indica, _this$scope$xl$indica;

    const xsIndicatorsPosition = (_this$scope$xs$indica = this.scope.xs.indicatorsPosition) === null || _this$scope$xs$indica === void 0 ? void 0 : _this$scope$xs$indica.split("-");
    const smIndicatorsPosition = (_this$scope$sm$indica = this.scope.sm.indicatorsPosition) === null || _this$scope$sm$indica === void 0 ? void 0 : _this$scope$sm$indica.split("-");
    const mdIndicatorsPosition = (_this$scope$md$indica = this.scope.md.indicatorsPosition) === null || _this$scope$md$indica === void 0 ? void 0 : _this$scope$md$indica.split("-");
    const lgIndicatorsPosition = (_this$scope$lg$indica = this.scope.lg.indicatorsPosition) === null || _this$scope$lg$indica === void 0 ? void 0 : _this$scope$lg$indica.split("-");
    const xlIndicatorsPosition = (_this$scope$xl$indica = this.scope.xl.indicatorsPosition) === null || _this$scope$xl$indica === void 0 ? void 0 : _this$scope$xl$indica.split("-");
    this.scope.indicatorsPositionClass = "indicators-".concat(xsIndicatorsPosition[0], " indicators-").concat(xsIndicatorsPosition[1], " indicators-sm-").concat(smIndicatorsPosition[0], " indicators-sm-").concat(smIndicatorsPosition[1], " indicators-md-").concat(mdIndicatorsPosition[0], " indicators-md-").concat(mdIndicatorsPosition[1], " indicators-lg-").concat(lgIndicatorsPosition[0], " indicators-lg-").concat(lgIndicatorsPosition[1], " indicators-xl-").concat(xlIndicatorsPosition[0], " indicators-xl-").concat(xlIndicatorsPosition[1]);
  } // TODO create independent bs4 breakpoint service


  getBreakpoint() {
    const size = window.innerWidth; // XS

    if (size >= this.scope.xs.minWidth && size < this.scope.sm.minWidth) {
      return "xs";
    } // SM


    if (size >= this.scope.sm.minWidth && size < this.scope.md.minWidth) {
      return "sm";
    } // MD


    if (size >= this.scope.md.minWidth && size < this.scope.lg.minWidth) {
      return "md";
    } // LG


    if (size >= this.scope.lg.minWidth && size < this.scope.xl.minWidth) {
      return "lg";
    } // XL


    return "xl";
  }

  setOptionsByBreakpoint(breakpoint) {
    this.setOptions(this.scope, this.scope[breakpoint]);

    if (this.scope.autoplay) {
      this.enableAutoplay();
    } else {
      this.disableAutoplay();
    }

    if (this.scope.drag) {
      this.enableDesktopDragscroll();
    } else {
      this.disableDesktopDragscroll();
    }

    this.setControlsOptions();
    this.setIndicatorsOptions();
  }

  onBreakpointChanges() {
    this.setOptionsByBreakpoint(this.breakpoint);
  }

  _onViewChanges() {
    this.debug("onViewChanges");
    const newBreakpoint = this.getBreakpoint();

    if (newBreakpoint !== this.breakpoint) {
      this.breakpoint = newBreakpoint;
      this.onBreakpointChanges();
    }

    this.setSlidePositions();
    const index = this.setCenteredSlideActive();

    if (this.scope.sticky) {
      this.goTo(index);
    }
  }

  onVisibilityChanged(event) {
    if (event.detail.visible) {
      var _this$dragscrollServi, _this$continuousAutop;

      (_this$dragscrollServi = this.dragscrollService) === null || _this$dragscrollServi === void 0 ? void 0 : _this$dragscrollServi.checkDraggable();
      (_this$continuousAutop = this.continuousAutoplayService) === null || _this$continuousAutop === void 0 ? void 0 : _this$continuousAutop.update();
    }
  }

  _onScroll() {
    // this.setSlidePositions();
    // this.setCenteredSlideActive();
    this.resume(1000);
  }

  onScrollend() {
    this.setSlidePositions();
    this.setCenteredSlideActive();

    if (this.scope.sticky) {
      this.scrollToNearestSlide();
    }

    this.resume(1000);
  }

  onMouseIn() {
    if (this.scope.pauseOnHover) {
      this.scope.pause = true;
    }
  }

  onMouseOut() {
    this.resume(200);
  }

  _onMouseUp() {
    this.resume(1000);
  }

  /** Resume if this method was not called up for [delay] milliseconds */
  resume() {
    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;

    if (!this.scope.pause) {
      return;
    }

    if (this.resumeTimer !== null) {
      clearTimeout(this.resumeTimer);
      this.resumeTimer = null;
    }

    this.resumeTimer = window.setTimeout(() => {
      this.setSlidePositions();
      this.scope.pause = false;
    }, delay);
  }

  connectedCallback() {
    super.connectedCallback();
    return this.init(Bs4SlideshowComponent.observedAttributes);
  }

  addEventListeners() {
    this.routerEvents.on("newPageReady", this.onBreakpointChanges, this); // TODO types
    // What element resize

    if (window.ResizeObserver) {
      var _this$resizeObserver;

      this.resizeObserver = new window.ResizeObserver(this.onViewChanges);
      (_this$resizeObserver = this.resizeObserver) === null || _this$resizeObserver === void 0 ? void 0 : _this$resizeObserver.observe(this);
    } else {
      // Fallback watch window resize
      window.addEventListener("resize", this.onViewChanges, {
        passive: true
      });
    } // Custom event triggered by some parent components when this component changes his visibility, e.g. triggered in the bs4-tabs component


    this.addEventListener("visibility-changed", this.onVisibilityChanged);
    this.slideshowInner.addEventListener("scroll", this.onScroll, {
      passive: true
    });
    this.slideshowInner.addEventListener("scrollended", this.onScrollend, {
      passive: true
    });
    this.addEventListener("mouseenter", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("mouseover", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("focusin", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("touchstart", this.onMouseIn, {
      passive: true
    });
    this.addEventListener("mouseout", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("mouseleave", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("focusout", this.onMouseOut, {
      passive: true
    });
    this.addEventListener("mouseup", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("touchend", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("scroll", this.onMouseUp, {
      passive: true
    });
    this.addEventListener("scrollend", this.onMouseUp, {
      passive: true
    }); // See ScrollEventsService for this event

    this.addEventListener("scrollended", this.onMouseUp, {
      passive: true
    }); // initial

    this.onViewChanges(); // this.onScroll();

    this.onScrollend();
  }

  removeEventListeners() {
    var _this$resizeObserver2;

    this.routerEvents.off("newPageReady", this.onBreakpointChanges, this);
    window.removeEventListener("resize", this.onViewChanges);
    (_this$resizeObserver2 = this.resizeObserver) === null || _this$resizeObserver2 === void 0 ? void 0 : _this$resizeObserver2.unobserve(this);
    this.removeEventListener("visibility-changed", this.onVisibilityChanged);
    this.slideshowInner.removeEventListener("scroll", this.onScroll);
    this.slideshowInner.removeEventListener("scrollended", this.onScrollend);
    this.removeEventListener("mouseenter", this.onMouseIn);
    this.removeEventListener("mouseover", this.onMouseIn);
    this.removeEventListener("focusin", this.onMouseIn);
    this.removeEventListener("touchstart", this.onMouseIn);
    this.removeEventListener("mouseout", this.onMouseOut);
    this.removeEventListener("mouseleave", this.onMouseOut);
    this.removeEventListener("focusout", this.onMouseOut);
    this.removeEventListener("mouseup", this.onMouseUp);
    this.removeEventListener("touchend", this.onMouseUp);
    this.removeEventListener("scroll", this.onMouseUp);
    this.removeEventListener("scrollend", this.onMouseUp); // See ScrollEventsService for this event

    this.removeEventListener("scrollended", this.onMouseUp);
  }

  async beforeBind() {
    return await super.beforeBind();
  }

  async afterBind() {
    this.initSlideshowInner();
    this.initResponsiveOptions(); // this.removeEventListeners();

    this.addEventListeners();
    await super.afterBind();
  }

  initSlideshowInner() {
    this.initSlideshowInnerSlides();
    this.scrollEventsService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.ScrollEventsService(this.slideshowInner);
  }

  enableDesktopDragscroll() {
    if (!this.dragscrollService) {
      const dragscrollOptions = {
        detectGlobalMove: true
      };
      this.dragscrollService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.Dragscroll(this.slideshowInner, dragscrollOptions);
    }
  }

  disableDesktopDragscroll() {
    if (this.dragscrollService) {
      this.dragscrollService.destroy();
      this.dragscrollService = undefined;
    }
  }

  enableContinuousAutoplay() {
    if (!this.continuousAutoplayService) {
      const autoscrollOptions = {
        velocity: this.scope.autoplayVelocity,
        angle: this.scope.angle,
        pauseOnHover: this.scope.pauseOnHover
      };
      this.continuousAutoplayService = new _ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.Autoscroll(this.slideshowInner, autoscrollOptions);
    } // on continuous autoplay the scrollended event is never triggered, so call this method all `intervalsTimeMs` milliseconds as a WORKAROUND


    if (!this.continuousAutoplayIntervalIndex) {
      // intervals are depending on the autoscrolling speed (autoplayVelocity)
      const intervalsTimeMs = this.scope.autoplayVelocity * 10000; // this.debug('intervalsTimeMs', intervalsTimeMs);

      this.continuousAutoplayIntervalIndex = window.setInterval(this.onScrollend.bind(this), intervalsTimeMs);
    }
  }

  disableContinuousAutoplay() {
    if (this.continuousAutoplayService) {
      this.continuousAutoplayService.destroy();
      this.continuousAutoplayService = undefined;
    }

    if (this.continuousAutoplayIntervalIndex) {
      window.clearInterval(this.continuousAutoplayIntervalIndex);
      this.continuousAutoplayIntervalIndex = null;
    }
  }

  enableIntervalAutoplay() {
    if (this.autoplayIntervalIndex === null) {
      this.autoplayIntervalIndex = window.setInterval(() => {
        if (!this.scope.pause) {
          this.next();
        }
      }, this.scope.autoplayInterval);
    }
  }

  disableIntervalAutoplay() {
    if (this.autoplayIntervalIndex) {
      window.clearInterval(this.autoplayIntervalIndex);
      this.autoplayIntervalIndex = null;
    }
  }

  disableAutoplay() {
    this.disableIntervalAutoplay();
    this.disableContinuousAutoplay();
  }

  enableAutoplay() {
    // continuous scrolling
    if (this.scope.autoplayInterval <= 0) {
      this.enableContinuousAutoplay();
    } else {
      this.enableIntervalAutoplay();
    }
  }

  initSlideshowInnerSlides() {
    if (!this.slideElements) {
      throw new Error("No slides found!");
    } // If slides not added by template


    if (this.scope.items.length === 0) {
      this.addItemsByChilds();
    }
  }

  transformTemplateAttributes(attributes, index) {
    attributes = super.transformTemplateAttributes(attributes, index);
    attributes.handle = attributes.handle || index.toString();
    attributes.index = index;
    attributes.class = attributes.class || "";
    attributes.class += " slide";
    return attributes;
  }
  /**
   * Add slide by template element
   * @param tpl template element
   */


  addItemByTemplate(tpl, index) {
    const attributes = this.getTemplateAttributes(tpl, index);
    const content = tpl.innerHTML;

    if (attributes.type) {
      if (attributes.type === "slide") {
        this.scope.items.push(_objectSpread(_objectSpread({}, attributes), {}, {
          content
        }));
      }

      if (attributes.type === "controls") {
        this.templateControls = content;
      }

      if (attributes.type === "indicators") {
        this.templateIndicators = content;
      }
    }
  }
  /**
   * Add slides by child elements (not as template elements)
   * @param tpl template element
   */


  addItemsByChilds() {
    if (!this.slideElements) {
      return;
    }

    this.slideElements.forEach((slideElement, index) => {
      const handle = slideElement.getAttribute("handle") || slideElement.getAttribute("id") || index.toString();
      slideElement.setAttribute("index", index.toString());
      const attributes = {
        handle,
        active: false,
        content: slideElement.innerHTML,
        index,
        position: _objectSpread(_objectSpread({}, slideElement.getBoundingClientRect()), {}, {
          centerY: 0,
          centerX: 0
        })
      };
      this.scope.items.push(attributes);
    });
  }

  getScrollPosition() {
    const scrollPosition = (0,_ribajs_extras__WEBPACK_IMPORTED_MODULE_6__.getScrollPosition)(this.slideshowInner);
    return scrollPosition;
  }
  /**
   * get closest number
   * @see https://stackoverflow.com/a/35000557
   * @param goal the number which this number should be closest to
   * @param curr current number in loop
   * @param prev previous number or closest value found so far
   */


  getCurrentClosestNumber(goal, curr, prev) {
    return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;
  }

  getMostCenteredSlideIndex() {
    if (this.scope.items.length <= 0) {
      return -1;
    }

    let nearZero = Math.abs(this.scope.angle === "vertical" ? this.scope.items[0].position.centerY : this.scope.items[0].position.centerX);
    let minIndex = 0;

    for (let i = 1; i < this.scope.items.length; i++) {
      const position = Math.abs(this.scope.angle === "vertical" ? this.scope.items[i].position.centerY : this.scope.items[i].position.centerX);
      nearZero = this.getCurrentClosestNumber(0, position, nearZero);

      if (nearZero === position) {
        minIndex = i;
      }
    }

    return minIndex;
  }

  setAllSlidesInactive() {
    let excludeIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

    if (!this.slideElements) {
      return;
    }

    for (let index = 0; index < this.scope.items.length; index++) {
      if (index !== excludeIndex) {
        if (this.scope.items[index]) {
          this.scope.items[index].active = false;
        }

        if (this.slideElements[index] && this.slideElements[index].classList) {
          this.slideElements[index].classList.remove("active");
        }
      }
    }
  }

  setCenteredSlideActive() {
    const index = this.getMostCenteredSlideIndex();
    this.setAllSlidesInactive(index);

    if (!this.scope.items[index]) {
      return -1;
    }

    this.scope.items[index].active = true;

    if (this.slideElements && this.slideElements[index].classList) {
      this.slideElements[index].classList.add("active");
    }

    return index;
  }

  isScrollableToIndex(index) {
    if (!this.scope.items[index]) {
      return false;
    }

    const maxScrollTo = this.scope.angle === "vertical" ? this.getScrollPosition().maxY : this.getScrollPosition().maxX;
    const scrollTo = this.scope.angle === "vertical" ? this.slideshowInner.scrollTop + this.scope.items[index].position.centerY : this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
    return scrollTo <= maxScrollTo && scrollTo >= 0;
  }

  scrollToNextSlide() {
    this.setSlidePositions();
    const currentIndex = this.getMostCenteredSlideIndex();
    let nextIndex = currentIndex + this.scope.slidesToScroll;

    if (nextIndex >= this.slideElements.length) {
      nextIndex = nextIndex - this.slideElements.length;
    } // if (!this.isScrollableToIndex(nextIndex)) {
    //   nextIndex++;
    // }
    // if (nextIndex >= this.slideElements.length) {
    //   nextIndex = nextIndex - this.slideElements.length;
    // }


    return this.goTo(nextIndex);
  }

  scrollToPrevSlide() {
    this.setSlidePositions();
    const currentIndex = this.getMostCenteredSlideIndex();
    let prevIndex = currentIndex - this.scope.slidesToScroll;

    if (prevIndex < 0) {
      prevIndex = this.slideElements.length - 1 + (prevIndex + 1);
    }

    return this.goTo(prevIndex);
  }

  scrollToNearestSlide() {
    this.setSlidePositions();
    const nearestIndex = this.getMostCenteredSlideIndex();
    return this.goTo(nearestIndex);
  }

  setSlidePositions() {
    var _this$slideElements;

    if (this.scope.items.length !== ((_this$slideElements = this.slideElements) === null || _this$slideElements === void 0 ? void 0 : _this$slideElements.length)) {
      var _this$slideElements2;

      console.warn("The slide objects must be the same size as the slide elements! ".concat(this.scope.items.length, " !== ").concat((_this$slideElements2 = this.slideElements) === null || _this$slideElements2 === void 0 ? void 0 : _this$slideElements2.length));
      return;
    }

    const mainBoundingClient = this.slideshowInner.getBoundingClientRect();

    for (let i = 0; i < this.scope.items.length; i++) {
      const slideElement = this.slideElements[i];
      const slideObject = this.scope.items[i];
      const rect = slideElement.getBoundingClientRect();
      rect.x -= mainBoundingClient.x;
      rect.y -= mainBoundingClient.y;
      slideObject.position = {
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height,
        bottom: rect.bottom,
        left: rect.left,
        right: rect.right,
        top: rect.top,
        toJSON: rect.toJSON,
        // 0 if element is in the middle / center
        centerY: rect.y + rect.height / 2 - mainBoundingClient.height / 2,
        // 0 if element is in the middle / center
        centerX: rect.x + rect.width / 2 - mainBoundingClient.width / 2
      };
    }
  }

  requiredAttributes() {
    return [];
  }
  /**
   * Default custom Element method
   * Invoked when an attribute on the custom element changes.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    let optionForSize = "xs";
    let responsiveScope = this.scope;

    if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
      this.observedAttributesToCheck[attributeName].initialized = true;
    }

    newValue = this.parseAttribute(newValue);

    if (attributeName.startsWith("sm-")) {
      optionForSize = "sm";
      responsiveScope = this.scope.sm;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("md-")) {
      optionForSize = "md";
      responsiveScope = this.scope.md;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("lg-")) {
      optionForSize = "lg";
      responsiveScope = this.scope.lg;
      attributeName = attributeName.slice(3);
    } else if (attributeName.startsWith("xl-")) {
      optionForSize = "xl";
      responsiveScope = this.scope.xl;
      attributeName = attributeName.slice(3);
    }

    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.camelCase)(attributeName);

    if (responsiveScope && responsiveScope[parsedAttributeName]) {
      oldValue = responsiveScope[parsedAttributeName];
    } // automatically inject observed attributes to view responsiveScope


    responsiveScope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

    this.parsedAttributeChangedCallback(optionForSize + parsedAttributeName, oldValue, newValue, namespace);
    this.bindIfReady();
  }
  /**
   * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    return super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);
  } // deconstruction


  disconnectedCallback() {
    var _this$scrollEventsSer;

    this.removeEventListeners();
    (_this$scrollEventsSer = this.scrollEventsService) === null || _this$scrollEventsSer === void 0 ? void 0 : _this$scrollEventsSer.destroy();
    this.disableAutoplay();
    this.disableDesktopDragscroll();
    return super.disconnectedCallback();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      // ('Full template!', this.templateIndicators);
      return _bs4_slideshow_slides_component_html__WEBPACK_IMPORTED_MODULE_7__["default"] + this.templateControls + this.templateIndicators;
    } else {
      // this.debug('Append to template!');
      // Prepend control elements if no custom control elements in template are found
      if (this.controlsElements.length <= 0) {
        this.innerHTML += this.templateControls;
      }

      if (!this.indicatorsElement) {
        this.innerHTML += this.templateIndicators;
      }

      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4SlideshowComponent, "tagName", "bs4-slideshow");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TabsComponent": function() { return /* binding */ Bs4TabsComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_tabs_horizontal_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-tabs-horizontal.component.html */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html");
/* harmony import */ var _bs4_tabs_vertical_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-tabs-vertical.component.html */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");






const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
class Bs4TabsComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.TemplatesComponent {
  static get observedAttributes() {
    return ["option-tabs-auto-height", "option-tabs-angle", "tab-0-title", "tab-0-content", "tab-0-handle", "tab-1-title", "tab-1-content", "tab-1-handle", "tab-2-title", "tab-2-content", "tab-2-handle", "tab-3-title", "tab-3-content", "tab-3-handle", "tab-4-title", "tab-4-content", "tab-4-handle", "tab-5-title", "tab-5-content", "tab-5-handle", "tab-6-title", "tab-6-content", "tab-6-handle", "tab-7-title", "tab-7-content", "tab-7-handle", "tab-8-title", "tab-8-content", "tab-8-handle", "tab-9-title", "tab-9-content", "tab-9-handle", "tab-10-title", "tab-10-content", "tab-10-handle", "tab-11-title", "tab-11-content", "tab-11-handle", "tab-12-title", "tab-12-content", "tab-12-handle", "tab-13-title", "tab-13-content", "tab-13-handle", "tab-14-title", "tab-14-content", "tab-14-handle", "tab-15-title", "tab-15-content", "tab-15-handle", "tab-16-title", "tab-16-content", "tab-16-handle", "tab-17-title", "tab-17-content", "tab-17-handle", "tab-18-title", "tab-18-content", "tab-18-handle", "tab-19-title", "tab-19-content", "tab-19-handle"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: false
    }, {
      name: "active",
      required: false
    }, {
      name: "index",
      required: false
    }]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      items: new Array(),
      activate: this.activate,
      deactivate: this.deactivate,
      deactivateAll: this.deactivateAll,
      optionTabsAutoHeight: false,
      optionTabsAngle: "horizontal"
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_5__.debounce)(this._onResize.bind(this)));
  }

  _onResize() {
    this.setHeight();
  }

  /**
   * Make all tabs panes as height as the highest tab pane
   */
  setHeight() {
    if (this.scope.optionTabsAutoHeight) {
      return;
    } // Bind static template


    this.setElements();
    let highest = 0;

    if (!this.tabPanes) {
      return;
    }

    this.tabPanes.forEach(tabPane => {
      if (!tabPane.style) {
        return;
      }

      tabPane.style.height = "auto";
      tabPane.style.display = "block";
      const height = tabPane.offsetHeight || 0;

      if (height > highest) {
        highest = height;
      }
    });
    this.tabPanes.forEach(tabPane => {
      if (!tabPane.style) {
        return;
      } // Reset display style property


      tabPane.style.display = "";

      if (highest > 0) {
        tabPane.style.height = highest + "px";
      }
    });
  }

  deactivateAll() {
    for (let index = 0; index < this.scope.items.length; index++) {
      const tab = this.scope.items[index];
      this.deactivate(tab);
    }
  }

  deactivate(tab) {
    tab.active = false;
    const firstTabContentChild = this.getTabContentChildByIndex(tab.index);

    if (firstTabContentChild) {
      this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
    }
  }

  activate(tab) {
    this.deactivateAll();
    tab.active = true;
    const firstTabContentChild = this.getTabContentChildByIndex(tab.index);

    if (firstTabContentChild) {
      this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
    }
  }

  activateFirstTab() {
    if (this.scope.items.length > 0) {
      this.activate(this.scope.items[0]);
    }
  }

  getTabContentChildByIndex(index) {
    return this.querySelector(".tab-content .tab-pane:nth-child(".concat(index + 1, ") > *")) || undefined;
  }
  /**
   * Trigger `visibility-changed` for components that need to update if visibility changes.
   * E.g. this event is used the bs4-slideshow component
   * @param element
   * @param visible
   */


  triggerVisibilityChangedForElement(element, visible) {
    setTimeout(() => {
      // Use this event to update any custom element when it becomes visible
      element.dispatchEvent(new CustomEvent("visibility-changed", {
        detail: {
          visible
        }
      }));
    }, 200);
  }

  connectedCallback() {
    super.connectedCallback();
    this.initTabs();
    this.activateFirstTab();
    this.init(Bs4TabsComponent.observedAttributes);
  }

  disconnectedCallback() {
    if (this.tabs) {
      this.tabs.forEach(tab => {
        tab.removeEventListener("shown.bs.tab", this.onTabShownEventHandler);
      });
    }

    window.removeEventListener("resize", this.onResize);
  }

  setElements() {
    this.tabs = this.querySelectorAll('[role="tab"]');
    this.tabPanes = this.querySelectorAll('[role="tabpanel"]');
    this.scrollable = this.querySelector("[scrollable]");
  }

  resizeTabsArray(newSize) {
    while (newSize > this.scope.items.length) {
      this.scope.items.push({
        handle: "",
        title: "",
        content: "",
        active: false,
        index: this.scope.items.length - 1
      });
    }
  }

  onTabShownEventHandler(event) {
    const curTab = event.target || event.srcElement;

    if (!curTab) {
      return;
    }

    if (this.scrollable) {
      const tabScrollPosition = curTab.getBoundingClientRect();
      const scrollLeftTo = this.scrollable.scrollLeft || 0 + tabScrollPosition.left; // TODO animate
      // this.scrollable.animate({ scrollLeft: scrollLeftTo}, 'slow');

      this.scrollable.scrollLeft = scrollLeftTo;
    }
  }

  initTabs() {
    // Bind static template
    this.setElements();

    if (this.tabs) {
      this.tabs.forEach(tab => {
        tab.removeEventListener("shown.bs.tab", this.onTabShownEventHandler);
        tab.addEventListener("shown.bs.tab", this.onTabShownEventHandler);
      });
    }

    if (this.scope.optionTabsAutoHeight) {
      window.removeEventListener("resize", this.onResize);
      window.addEventListener("resize", this.onResize, {
        passive: true
      });
      this.setHeight();
    }
  }

  addTabByAttribute(attributeName, newValue) {
    const index = Number(attributeName.replace(/[^0-9]/g, ""));

    if (index >= this.scope.items.length) {
      this.resizeTabsArray(index + 1);
    }

    this.scope.items[index].index = index;

    if (attributeName.endsWith("Content")) {
      this.scope.items[index].content = newValue;
    }

    if (attributeName.endsWith("Title")) {
      this.scope.items[index].title = newValue;
      this.scope.items[index].handle = this.scope.items[index].handle || handleize(this.scope.items[index].title);
    }

    if (attributeName.endsWith("Handle")) {
      this.scope.items[index].handle = newValue;
    } // if is first tab


    if (this.scope.items.length > 0 && this.scope.items[0] && this.scope.items[0].content.length > 0 && this.scope.items[0].title.length > 0 && this.scope.items[0].handle.length > 0) {
      this.activateFirstTab();
    }
  }
  /**
   * Extends TemplatesComponent.transformTemplateAttributes to set the handle by the title if no handle is set
   */


  transformTemplateAttributes(attributes, index) {
    attributes = super.transformTemplateAttributes(attributes, index);

    if (!attributes.handle && attributes.title) {
      attributes.handle = handleize(attributes.title);
    }

    attributes.active = attributes.active || false;
    return attributes;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName.startsWith("tab")) {
      this.addTabByAttribute(attributeName, newValue);
      this.initTabs();
    }
  }

  async afterBind() {
    // Workaround
    setTimeout(() => {
      if (this.scope.optionTabsAutoHeight) {
        this.setHeight();
      }
    }, 500);
    await super.afterBind();
  }

  template() {
    // Only set the component template if there no childs or the childs are templates
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.hasChildNodesTrim)(this) || this.hasOnlyTemplateChilds()) {
      if (this.scope.optionTabsAngle === "horizontal") {
        return _bs4_tabs_horizontal_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
      } else {
        return _bs4_tabs_vertical_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
      }
    } else {
      return null;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TabsComponent, "tagName", "bs4-tabs");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts":
/*!****************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* binding */ Bs4TaggedImageComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _bs4_tagged_image_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-tagged-image.component.html */ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html");
/* harmony import */ var _ribajs_utils_src_control_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/control.js */ "../../packages/utils/src/control.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






class Bs4TaggedImageComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Component {
  /**
   * ATTRIBUTES AND SCOPE
   */
  static get observedAttributes() {
    return ["tags", "options", "debug"];
  }

  /**
   * CONSTRUCTOR AND LIFECYCLE HANDLERS
   */
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      debug: false,
      tags: [],
      options: {
        popoverOptions: {},
        // set container = this in constructor
        multiPopover: false,
        tagOptions: {}
      },
      fillPopoverOptions: options => {
        return _objectSpread(_objectSpread(_objectSpread({}, this.scope.options.popoverOptions), this.scope.options.tagOptions.popoverOptions), options);
      },
      triggerOnFocus: options => {
        return this.scope.fillPopoverOptions(options).trigger ? 0 : null;
      },
      onClick: this.onClick.bind(this),
      onPopoverBound: this.onPopoverBound.bind(this),
      onPopoverShown: this.onPopoverShown.bind(this),
      onPopoverHidden: this.onPopoverHidden.bind(this),
      updateTagPositions: (0,_ribajs_utils_src_control_js__WEBPACK_IMPORTED_MODULE_5__.debounce)(this.updateTagPositions.bind(this))
    });

    this.scope.options.popoverOptions.container = this;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue) {
    if (attributeName === "options") {
      // before the component is bound, we just want to extend the default options
      if (this.bound) {
        this.scope.options = newValue;
      } else {
        this.scope.options = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.extend)({
          deep: true
        }, oldValue, newValue);
      }

      const po = this.scope.options.popoverOptions;

      if (po && typeof po.container === "string") {
        po.container = document.querySelector(po.container) || undefined;
      }
    }
  }

  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      this.parseChildTags();
    }

    return _bs4_tagged_image_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
  }

  async beforeBind() {
    await super.beforeBind(); // Template has been loaded. So the <img> tag should be there now.

    this.image = this.querySelector("img");
    this.addEventListeners();
    this.initTags();
  }

  addEventListeners() {
    const img = this.image;
    img.addEventListener("load", this.scope.updateTagPositions);
    img.addEventListener("click", this.scope.onClick);
    window.addEventListener("resize", this.scope.updateTagPositions, {
      passive: true
    });
  }

  removeEventListeners() {
    const img = this.image;
    img.removeEventListener("load", this.scope.updateTagPositions);
    img.removeEventListener("click", this.scope.onClick);
    window.removeEventListener("resize", this.scope.updateTagPositions);
  }

  async afterBind() {
    this.passImageAttributes();
    await super.afterBind();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4TaggedImageComponent.observedAttributes);
  }

  disconnectedCallback() {
    this.removeEventListener("click", this.scope.onClick);
    window.removeEventListener("resize", this.scope.updateTagPositions);
  }
  /**
   * LIFECYCLE HELPERS
   */


  parseChildTags() {
    this.debug("parseChildTags()");

    for (const tagEl of Array.from(this.querySelectorAll("tag"))) {
      const title = tagEl.getAttribute("title") || "";
      const content = tagEl.innerHTML;

      const x = (v => isNaN(v) ? Math.random() : v)(parseFloat(tagEl.getAttribute("x") || ""));

      const y = (v => isNaN(v) ? Math.random() : v)(parseFloat(tagEl.getAttribute("y") || ""));

      const shape = tagEl.getAttribute("shape") || undefined;
      const color = tagEl.getAttribute("color") || undefined;
      const borderRadius = tagEl.getAttribute("border-radius") || undefined;
      const fullSize = tagEl.getAttribute("full-size") || undefined;
      const smallSize = tagEl.getAttribute("small-size") || undefined;

      const tagData = _objectSpread(_objectSpread({}, this.scope.options.tagOptions), {}, {
        popoverOptions: this.scope.fillPopoverOptions({
          title,
          content,
          html: true
        }),
        x,
        y,
        shape,
        color,
        borderRadius,
        fullSize,
        smallSize
      });

      this.scope.tags.push(tagData);
    }
  }

  initTags() {
    const scopeTagOptions = this.scope.options.tagOptions;

    for (const [index, tag] of this.scope.tags.entries()) {
      tag.index = index;
      tag.shape = tag.shape || scopeTagOptions.shape;
      tag.borderRadius = tag.borderRadius || scopeTagOptions.borderRadius;
      tag.smallSize = tag.smallSize || scopeTagOptions.smallSize;
      tag.fullSize = tag.fullSize || scopeTagOptions.fullSize;
      tag.color = tag.color || scopeTagOptions.color;
    }
  }
  /**
   * Pass all attributes starting with "img-" down to the <img> Tag, without the prefix.
   */


  passImageAttributes() {
    const img = this.image;
    const attrs = this.attributes;

    for (let i = attrs.length - 1; i >= 0; i--) {
      if (attrs[i].name.startsWith("img-")) {
        img.setAttribute(attrs[i].name.substr(4), attrs[i].value);
      }
    }
  }
  /**
   * EVENT LISTENERS
   */


  onClick(e) {
    if (this.scope.debug) {
      // adapted from here: https://stackoverflow.com/a/42111623/7048200
      // TODO: avoid using "as any"
      const img = this.image;
      const {
        clientTop,
        clientLeft,
        width,
        height,
        naturalWidth,
        naturalHeight
      } = img;
      const {
        clientX,
        clientY
      } = e;
      let x = clientX - clientLeft;
      let y = clientY - clientTop;
      const wRatio = width / naturalWidth;
      const hRatio = height / naturalHeight;
      let actualWidth = width;
      let actualHeight = height;

      if (wRatio < hRatio) {
        // left, right cut off
        actualWidth = width * hRatio / wRatio;
        x += (actualWidth - width) / 2;
      } else if (hRatio < wRatio) {
        // left, right cut off
        actualHeight = height * wRatio / hRatio;
        y += (actualHeight - height) / 2;
      }

      x *= 100 / actualWidth;
      y *= 100 / actualHeight;
      console.log({
        x,
        y
      });
    }
  }

  onPopoverBound(event) {
    /*
     *  We get the anchor `el` for each tag here, after they have been bound in the rv-each,
     *  so we can trigger events on them later.
     */
    const boundIndexAttr = event.target.getAttribute("index");

    if (boundIndexAttr === null) {
      throw new Error("popup bound on no index");
    }

    const boundIndex = parseInt(boundIndexAttr);

    if (isNaN(boundIndex)) {
      throw new Error("boundIndex \"".concat(boundIndexAttr, "\" is not a number!"));
    }

    const foundTag = this.scope.tags.find(tag => tag.index === boundIndex);

    if (foundTag) {
      foundTag.el = event.target;
    } else {
      throw new Error("Tag with index (".concat(boundIndex, ", \"").concat(boundIndexAttr, "\") not found"));
    }
  }

  onPopoverShown(event) {
    for (const tag of this.scope.tags) {
      if (tag.el === event.target) {
        // Set shown popover's anchor as active.
        tag.el.classList.add("active");
      } else {
        // Hide all other popovers and remove active class from other tags if multiPopover option is false.
        if (!this.scope.options.multiPopover) {
          var _tag$el, _tag$el2;

          (_tag$el = tag.el) === null || _tag$el === void 0 ? void 0 : _tag$el.classList.remove("active");
          (_tag$el2 = tag.el) === null || _tag$el2 === void 0 ? void 0 : _tag$el2.dispatchEvent(new CustomEvent("trigger-hide"));
        }
      }
    }
  }

  onPopoverHidden(event) {
    const found = this.scope.tags.find(tag => tag.el === event.target);

    if (found) {
      var _found$el;

      (_found$el = found.el) === null || _found$el === void 0 ? void 0 : _found$el.classList.remove("active");
    }
  }

  updateTagPositions() {
    /*
     * Currently working for object-fit: cover, contain or fill, and object-position: 50% 50% (default)
     * TODO: make this work for all CSS values of "object-position" and "object-fit"!
     */
    const img = this.image;
    const {
      width,
      height,
      naturalWidth,
      naturalHeight
    } = img;
    const wRatio = naturalWidth / width;
    const hRatio = naturalHeight / height;
    const fit = window.getComputedStyle(img).getPropertyValue("object-fit");

    if (fit === "cover" && wRatio > hRatio || fit === "contain" && hRatio > wRatio) {
      for (const tag of this.scope.tags) {
        tag.top = tag.y * 100 + "%";
        tag.left = (wRatio / hRatio * (tag.x - 0.5) + 0.5) * 100 + "%";
      }
    } else if (fit === "cover" || fit === "contain") {
      for (const tag of this.scope.tags) {
        tag.left = tag.x * 100 + "%";
        tag.top = (hRatio / wRatio * (tag.y - 0.5) + 0.5) * 100 + "%";
      }
    } else {
      for (const tag of this.scope.tags) {
        tag.left = tag.x * 100 + "%";
        tag.top = tag.y * 100 + "%";
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4TaggedImageComponent, "tagName", "bs4-tagged-image");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ToastItemComponent": function() { return /* binding */ Bs4ToastItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _bs4_toast_item_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-toast-item.component.html */ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html");
/* harmony import */ var _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/toast.service.js */ "../../packages/bs4/src/services/toast.service.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");





class Bs4ToastItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["toast", "icon-url", "index"];
  }

  requiredAttributes() {
    return ["toast"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onHidden: this.onHidden.bind(this),
      index: -1,
      dismiss: this.dismiss.bind(this),
      toast: undefined
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ToastItemComponent.observedAttributes);
  }

  async afterBind() {
    this.initToastService();
    await super.afterBind();
  }

  initToastService() {
    const toast = this.scope.toast;
    const toastEl = this.firstElementChild;

    if (toast && toastEl) {
      this.toastService = new _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService(toastEl, {
        delay: toast.delay !== undefined ? toast.delay : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.delay,
        autohide: toast.autoHide !== undefined ? toast.autoHide : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.autohide,
        animation: toast.animation !== undefined ? toast.animation : _services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.ToastService.Default.animation
      }); // Call onHidden on hidden event once

      toastEl.addEventListener(_services_toast_service_js__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDDEN, this.scope.onHidden, {
        once: true
      }); // show toast using the toastservice

      this.toastService.show();
    }
  } // can be called if toast should be removed


  dismiss() {
    var _this$toastService;

    (_this$toastService = this.toastService) === null || _this$toastService === void 0 ? void 0 : _this$toastService.hide();
  } // remove toast from dom once shown


  onHidden(event, el) {
    var _this$scope$$parent;

    if (!el) {
      el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementFromEvent)(event);
    }

    const toastContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

    if (typeof (toastContainer === null || toastContainer === void 0 ? void 0 : toastContainer.onItemHide) === "function" && this.scope.toast && el) {
      toastContainer.onItemHide(event, el, this.scope.index, this.scope.toast);
    }
  }

  template() {
    return _bs4_toast_item_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ToastItemComponent, "tagName", "bs4-toast-item");

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts":
/*!******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* binding */ Bs4ToggleButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");


/**
 * This components is used to trigger a toggle event used in other components or parts of your project. This site itself uses the bs4-toggle-button to open or close the sidebar.
 * @attribute "target-id" (Required) The id with which the toggle event is triggered
 * @method toggle	 Triggers the toggle event
 * @property state Can be 'hidden' or something else
 * @property isClosed Is true if the state is 'hidden'
 * @property targetId Passed attribute value, see `target-id` attribute
 */




// TODO extend from Bs4ButtonComponent
class Bs4ToggleButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["target-id"];
  }

  requiredAttributes() {
    return ["targetId"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      targetId: undefined,
      toggle: this.toggle,
      state: "undefined",
      isActive: true,
      isClosed: false
    });
  }

  toggle() {
    if (this.eventDispatcher) {
      this.eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggle, this.scope.targetId);
    }
  }

  async afterBind() {
    var _this$eventDispatcher;

    // Trigger init to trigger there current state of all the components that are connected to this component
    (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.init, this.scope.targetId);
    await super.afterBind();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(Bs4ToggleButtonComponent.observedAttributes);
  }

  onToggledEvent(state) {
    this.scope.state = state;
    this.scope.isActive = state !== "hidden" && state !== "removed";
    this.scope.isClosed = !this.scope.isActive;
  }

  initEventDispatcher(id) {
    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this);
    }

    this.eventDispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.nsPrefix + id);
    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this); // Triggered state triggered by `..trigger('init', ...`

    this.eventDispatcher.on(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.state, this.onToggledEvent, this);
  }

  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    if (attributeName === "targetId" && newValue) {
      this.initEventDispatcher(newValue);
    }
  } // deconstruction


  disconnectedCallback() {
    super.disconnectedCallback();

    if (this.eventDispatcher) {
      this.eventDispatcher.off(_constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent, this);
    }
  }

  template() {
    if (!(0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
    }

    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Bs4ToggleButtonComponent, "tagName", "bs4-toggle-button");

/***/ }),

/***/ "../../packages/bs4/src/components/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/components/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4AccordionComponent": function() { return /* reexport safe */ _bs4_accordion_bs4_accordion_component_js__WEBPACK_IMPORTED_MODULE_1__.Bs4AccordionComponent; },
/* harmony export */   "Bs4ButtonComponent": function() { return /* reexport safe */ _bs4_button_bs4_button_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ButtonComponent; },
/* harmony export */   "Bs4CarouselComponent": function() { return /* reexport safe */ _bs4_carousel_bs4_carousel_component_js__WEBPACK_IMPORTED_MODULE_3__.Bs4CarouselComponent; },
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* reexport safe */ _bs4_colorpicker_bs4_colorpicker_component_js__WEBPACK_IMPORTED_MODULE_4__.Bs4ColorPickerComponent; },
/* harmony export */   "Bs4ContentsComponent": function() { return /* reexport safe */ _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_5__.Bs4ContentsComponent; },
/* harmony export */   "Bs4DropdownComponent": function() { return /* reexport safe */ _bs4_dropdown_bs4_dropdown_component_js__WEBPACK_IMPORTED_MODULE_0__.Bs4DropdownComponent; },
/* harmony export */   "Bs4FormComponent": function() { return /* reexport safe */ _bs4_form_bs4_form_component_js__WEBPACK_IMPORTED_MODULE_14__.Bs4FormComponent; },
/* harmony export */   "Bs4IconComponent": function() { return /* reexport safe */ _bs4_icon_bs4_icon_component_js__WEBPACK_IMPORTED_MODULE_6__.Bs4IconComponent; },
/* harmony export */   "Bs4ModalItemComponent": function() { return /* reexport safe */ _bs4_modal_item_bs4_modal_item_component_js__WEBPACK_IMPORTED_MODULE_17__.Bs4ModalItemComponent; },
/* harmony export */   "Bs4NavbarComponent": function() { return /* reexport safe */ _bs4_navbar_bs4_navbar_component_js__WEBPACK_IMPORTED_MODULE_12__.Bs4NavbarComponent; },
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* reexport safe */ _bs4_notification_container_bs4_notification_container_component_js__WEBPACK_IMPORTED_MODULE_15__.Bs4NotificationContainerComponent; },
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* reexport safe */ _bs4_scrollspy_bs4_scrollspy_component_js__WEBPACK_IMPORTED_MODULE_7__.Bs4ScrollspyComponent; },
/* harmony export */   "Bs4ShareComponent": function() { return /* reexport safe */ _bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_8__.Bs4ShareComponent; },
/* harmony export */   "Bs4SidebarComponent": function() { return /* reexport safe */ _bs4_sidebar_bs4_sidebar_component_js__WEBPACK_IMPORTED_MODULE_9__.Bs4SidebarComponent; },
/* harmony export */   "Bs4SlideshowComponent": function() { return /* reexport safe */ _bs4_slideshow_bs4_slideshow_component_js__WEBPACK_IMPORTED_MODULE_10__.Bs4SlideshowComponent; },
/* harmony export */   "Bs4TabsComponent": function() { return /* reexport safe */ _bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_13__.Bs4TabsComponent; },
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* reexport safe */ _bs4_tagged_image_bs4_tagged_image_component_js__WEBPACK_IMPORTED_MODULE_18__.Bs4TaggedImageComponent; },
/* harmony export */   "Bs4ToastItemComponent": function() { return /* reexport safe */ _bs4_toast_item_bs4_toast_item_component_js__WEBPACK_IMPORTED_MODULE_16__.Bs4ToastItemComponent; },
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* reexport safe */ _bs4_toggle_button_bs4_toggle_button_component_js__WEBPACK_IMPORTED_MODULE_11__.Bs4ToggleButtonComponent; }
/* harmony export */ });
/* harmony import */ var _bs4_dropdown_bs4_dropdown_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4-dropdown/bs4-dropdown.component.js */ "../../packages/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts");
/* harmony import */ var _bs4_accordion_bs4_accordion_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bs4-accordion/bs4-accordion.component.js */ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.ts");
/* harmony import */ var _bs4_button_bs4_button_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs4-button/bs4-button.component.js */ "../../packages/bs4/src/components/bs4-button/bs4-button.component.ts");
/* harmony import */ var _bs4_carousel_bs4_carousel_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bs4-carousel/bs4-carousel.component.js */ "../../packages/bs4/src/components/bs4-carousel/bs4-carousel.component.ts");
/* harmony import */ var _bs4_colorpicker_bs4_colorpicker_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bs4-colorpicker/bs4-colorpicker.component.js */ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.ts");
/* harmony import */ var _bs4_contents_bs4_contents_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4-contents/bs4-contents.component.js */ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.ts");
/* harmony import */ var _bs4_icon_bs4_icon_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bs4-icon/bs4-icon.component.js */ "../../packages/bs4/src/components/bs4-icon/bs4-icon.component.ts");
/* harmony import */ var _bs4_scrollspy_bs4_scrollspy_component_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bs4-scrollspy/bs4-scrollspy.component.js */ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts");
/* harmony import */ var _bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bs4-share/bs4-share.component.js */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts");
/* harmony import */ var _bs4_sidebar_bs4_sidebar_component_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bs4-sidebar/bs4-sidebar.component.js */ "../../packages/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts");
/* harmony import */ var _bs4_slideshow_bs4_slideshow_component_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bs4-slideshow/bs4-slideshow.component.js */ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts");
/* harmony import */ var _bs4_toggle_button_bs4_toggle_button_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./bs4-toggle-button/bs4-toggle-button.component.js */ "../../packages/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts");
/* harmony import */ var _bs4_navbar_bs4_navbar_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bs4-navbar/bs4-navbar.component.js */ "../../packages/bs4/src/components/bs4-navbar/bs4-navbar.component.ts");
/* harmony import */ var _bs4_tabs_bs4_tabs_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./bs4-tabs/bs4-tabs.component.js */ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs.component.ts");
/* harmony import */ var _bs4_form_bs4_form_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./bs4-form/bs4-form.component.js */ "../../packages/bs4/src/components/bs4-form/bs4-form.component.ts");
/* harmony import */ var _bs4_notification_container_bs4_notification_container_component_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./bs4-notification-container/bs4-notification-container.component.js */ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts");
/* harmony import */ var _bs4_toast_item_bs4_toast_item_component_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./bs4-toast-item/bs4-toast-item.component.js */ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts");
/* harmony import */ var _bs4_modal_item_bs4_modal_item_component_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./bs4-modal-item/bs4-modal-item.component.js */ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts");
/* harmony import */ var _bs4_tagged_image_bs4_tagged_image_component_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./bs4-tagged-image/bs4-tagged-image.component.js */ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.ts");




















/***/ }),

/***/ "../../packages/bs4/src/constants/index.ts":
/*!*************************************************!*\
  !*** ../../packages/bs4/src/constants/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARIA_ATTRIBUTE_PATTERN": function() { return /* binding */ ARIA_ATTRIBUTE_PATTERN; },
/* harmony export */   "DATA_URL_PATTERN": function() { return /* binding */ DATA_URL_PATTERN; },
/* harmony export */   "DEFAULT_ALLOWLIST": function() { return /* binding */ DEFAULT_ALLOWLIST; },
/* harmony export */   "MILLISECONDS_MULTIPLIER": function() { return /* binding */ MILLISECONDS_MULTIPLIER; },
/* harmony export */   "NODE_TEXT": function() { return /* binding */ NODE_TEXT; },
/* harmony export */   "SAFE_URL_PATTERN": function() { return /* binding */ SAFE_URL_PATTERN; },
/* harmony export */   "TOGGLE_ATTRIBUTE": function() { return /* binding */ TOGGLE_ATTRIBUTE; },
/* harmony export */   "TOGGLE_BUTTON": function() { return /* binding */ TOGGLE_BUTTON; },
/* harmony export */   "TOGGLE_CLASS": function() { return /* binding */ TOGGLE_CLASS; },
/* harmony export */   "TRANSITION_END": function() { return /* binding */ TRANSITION_END; },
/* harmony export */   "URI_ATTRS": function() { return /* binding */ URI_ATTRS; }
/* harmony export */ });
const NODE_TEXT = 3; // EventDispatcher events

const TOGGLE_BUTTON = {
  nsPrefix: "bs4-toggle-button:",
  eventNames: {
    toggle: "toggle",
    toggled: "toggled",
    init: "init",
    state: "state"
  }
};
const TOGGLE_ATTRIBUTE = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
const TOGGLE_CLASS = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
const URI_ATTRS = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
const DEFAULT_ALLOWLIST = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = "transitionend";

/***/ }),

/***/ "../../packages/bs4/src/formatters/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/formatters/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/bs4/src/helper/dom/data.ts":
/*!*************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/data.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getData": function() { return /* binding */ getData; },
/* harmony export */   "removeData": function() { return /* binding */ removeData; },
/* harmony export */   "setData": function() { return /* binding */ setData; }
/* harmony export */ });
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const mapData = (() => {
  const storeData = {};
  let id = 1;
  return {
    set(element, key, data) {
      if (typeof element.dataset.key === "undefined") {
        element.dataset.key = key;
        element.dataset.id = id.toString();
        id++;
      }

      if (element.dataset.id) {
        storeData[element.dataset.id] = data;
      }
    },

    get(element, key) {
      if (!element || typeof element.dataset.key === "undefined") {
        return null;
      }

      const keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        return storeData[keyProperties.id];
      }

      return null;
    },

    delete(element, key) {
      if (typeof element.dataset.key === "undefined") {
        return;
      }

      const keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        delete storeData[keyProperties.id];
        delete element.dataset.key;
      }
    }

  };
})();

const setData = (instance, key, data) => {
  mapData.set(instance, key, data);
};
const getData = (instance, key) => {
  return mapData.get(instance, key);
};
const removeData = (instance, key) => {
  mapData.delete(instance, key);
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/event-handler.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/event-handler.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "off": function() { return /* binding */ off; },
/* harmony export */   "on": function() { return /* binding */ on; },
/* harmony export */   "one": function() { return /* binding */ one; },
/* harmony export */   "trigger": function() { return /* binding */ trigger; }
/* harmony export */ });
/**
 * see see https://github.com/twbs/bootstrap/blob/master/js/src/dom/event-handler.js
 */
const on = (element, eventName, handler) => {
  return element.addEventListener(eventName, handler, {});
};
const one = (element, eventName, handler) => {
  return element.addEventListener(eventName, handler, {
    once: true
  });
};
const off = (element, originalTypeEvent, handler) => {
  return element.removeEventListener(originalTypeEvent, handler);
};
const trigger = function (element, eventName) {
  let extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const event = new CustomEvent(eventName, {
    detail: extraParameters,
    bubbles: true,
    cancelable: true
  });
  element.dispatchEvent(event);
  return event;
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "children": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.children; },
/* harmony export */   "closest": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.closest; },
/* harmony export */   "find": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.find; },
/* harmony export */   "findOne": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.findOne; },
/* harmony export */   "getData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.getData; },
/* harmony export */   "getDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.getDataAttributes; },
/* harmony export */   "matches": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.matches; },
/* harmony export */   "off": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.off; },
/* harmony export */   "offset": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.offset; },
/* harmony export */   "on": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.on; },
/* harmony export */   "one": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.one; },
/* harmony export */   "parents": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.parents; },
/* harmony export */   "position": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.position; },
/* harmony export */   "prev": function() { return /* reexport safe */ _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__.prev; },
/* harmony export */   "removeData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.removeData; },
/* harmony export */   "removeDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.removeDataAttribute; },
/* harmony export */   "setData": function() { return /* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.setData; },
/* harmony export */   "setDataAttribute": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* reexport safe */ _manipulator_js__WEBPACK_IMPORTED_MODULE_2__.toggleClass; },
/* harmony export */   "trigger": function() { return /* reexport safe */ _event_handler_js__WEBPACK_IMPORTED_MODULE_1__.trigger; }
/* harmony export */ });
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _event_handler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _manipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manipulator.js */ "../../packages/bs4/src/helper/dom/manipulator.ts");
/* harmony import */ var _selector_engine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");





/***/ }),

/***/ "../../packages/bs4/src/helper/dom/manipulator.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/manipulator.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDataAttribute": function() { return /* binding */ getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* binding */ getDataAttributes; },
/* harmony export */   "offset": function() { return /* binding */ offset; },
/* harmony export */   "position": function() { return /* binding */ position; },
/* harmony export */   "removeDataAttribute": function() { return /* binding */ removeDataAttribute; },
/* harmony export */   "setDataAttribute": function() { return /* binding */ setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* binding */ toggleClass; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dom/manipulator.js
 * --------------------------------------------------------------------------
 */
function normalizeData(val) {
  if (val === "true") {
    return true;
  }

  if (val === "false") {
    return false;
  }

  if (val === Number(val).toString()) {
    return Number(val);
  }

  if (val === "" || val === "null") {
    return null;
  }

  return val;
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, chr => "-".concat(chr.toLowerCase()));
}

const setDataAttribute = (element, key, value) => {
  element.setAttribute("data-".concat(normalizeDataKey(key)), value);
};
const removeDataAttribute = (element, key) => {
  element.removeAttribute("data-".concat(normalizeDataKey(key)));
};
const getDataAttributes = element => {
  if (!element) {
    return {};
  }

  const attributes = _objectSpread({}, element.dataset);

  Object.keys(attributes).forEach(key => {
    attributes[key] = normalizeData(attributes[key]);
  });
  return attributes;
};
const getDataAttribute = (element, key) => {
  return normalizeData(element.getAttribute("data-".concat(normalizeDataKey(key))));
};
const offset = element => {
  const rect = element.getBoundingClientRect();
  return {
    top: rect.top + document.body.scrollTop,
    left: rect.left + document.body.scrollLeft
  };
};
const position = element => {
  return {
    top: element.offsetTop,
    left: element.offsetLeft
  };
};
const toggleClass = (element, className) => {
  if (!element) {
    return;
  }

  if (element.classList.contains(className)) {
    element.classList.remove(className);
  } else {
    element.classList.add(className);
  }
};

/***/ }),

/***/ "../../packages/bs4/src/helper/dom/selector-engine.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/helper/dom/selector-engine.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "children": function() { return /* binding */ children; },
/* harmony export */   "closest": function() { return /* binding */ closest; },
/* harmony export */   "find": function() { return /* binding */ find; },
/* harmony export */   "findOne": function() { return /* binding */ findOne; },
/* harmony export */   "matches": function() { return /* binding */ matches; },
/* harmony export */   "parents": function() { return /* binding */ parents; },
/* harmony export */   "prev": function() { return /* binding */ prev; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "../../packages/bs4/src/helper/utils.ts");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * see https://github.com/twbs/bootstrap/blob/master/js/src/dom/selector-engine.js
 * --------------------------------------------------------------------------
 */


const matches = (element, selector) => {
  return Element.prototype.matches.call(element, selector);
};
const find = function (selector) {
  let element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelectorAll.call(element, selector);
};
const findOne = function (selector) {
  let element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelector.call(element, selector);
};
const children = (element, selector) => {
  const children = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.makeArray)(element.children);
  return children.filter(child => matches(child, selector));
};
const parents = (element, selector) => {
  const parents = [];
  let ancestor = element.parentNode;

  while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.NODE_TEXT) {
    if (matches(ancestor, selector)) {
      parents.push(ancestor);
    }

    ancestor = ancestor.parentNode;
  }

  return parents;
};
const closest = (element, selector) => {
  return Element.prototype.closest.call(element, selector);
};
const prev = (element, selector) => {
  const siblings = [];
  let previous = element.previousSibling;

  while (previous && previous.nodeType === Node.ELEMENT_NODE && previous.nodeType !== _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.NODE_TEXT) {
    if (matches(previous, selector)) {
      siblings.push(previous);
    }

    previous = previous.previousSibling;
  }

  return siblings;
};

/***/ }),

/***/ "../../packages/bs4/src/helper/index.ts":
/*!**********************************************!*\
  !*** ../../packages/bs4/src/helper/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allowedAttribute": function() { return /* reexport safe */ _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.allowedAttribute; },
/* harmony export */   "children": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.children; },
/* harmony export */   "closest": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.closest; },
/* harmony export */   "emulateTransitionEnd": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd; },
/* harmony export */   "find": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.find; },
/* harmony export */   "findOne": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.findOne; },
/* harmony export */   "findShadowRoot": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.findShadowRoot; },
/* harmony export */   "getData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getData; },
/* harmony export */   "getDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getDataAttribute; },
/* harmony export */   "getDataAttributes": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.getDataAttributes; },
/* harmony export */   "getElementFromSelector": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector; },
/* harmony export */   "getSelector": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getSelector; },
/* harmony export */   "getSelectorFromElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getSelectorFromElement; },
/* harmony export */   "getTransitionDurationFromElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement; },
/* harmony export */   "getjQuery": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getjQuery; },
/* harmony export */   "isElement": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement; },
/* harmony export */   "isVisible": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.isVisible; },
/* harmony export */   "makeArray": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray; },
/* harmony export */   "matches": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.matches; },
/* harmony export */   "noop": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.noop; },
/* harmony export */   "off": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.off; },
/* harmony export */   "offset": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.offset; },
/* harmony export */   "on": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.on; },
/* harmony export */   "one": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.one; },
/* harmony export */   "parents": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.parents; },
/* harmony export */   "position": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.position; },
/* harmony export */   "prev": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.prev; },
/* harmony export */   "reflow": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow; },
/* harmony export */   "removeData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.removeData; },
/* harmony export */   "removeDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.removeDataAttribute; },
/* harmony export */   "sanitizeHtml": function() { return /* reexport safe */ _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.sanitizeHtml; },
/* harmony export */   "setData": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.setData; },
/* harmony export */   "setDataAttribute": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.setDataAttribute; },
/* harmony export */   "toggleClass": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.toggleClass; },
/* harmony export */   "trigger": function() { return /* reexport safe */ _dom_index_js__WEBPACK_IMPORTED_MODULE_0__.trigger; },
/* harmony export */   "triggerTransitionEnd": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.triggerTransitionEnd; },
/* harmony export */   "typeCheckConfig": function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig; }
/* harmony export */ });
/* harmony import */ var _dom_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom/index.js */ "../../packages/bs4/src/helper/dom/index.ts");
/* harmony import */ var _sanitizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sanitizer.js */ "../../packages/bs4/src/helper/sanitizer.ts");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../../packages/bs4/src/helper/utils.ts");




/***/ }),

/***/ "../../packages/bs4/src/helper/sanitizer.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/helper/sanitizer.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allowedAttribute": function() { return /* binding */ allowedAttribute; },
/* harmony export */   "sanitizeHtml": function() { return /* binding */ sanitizeHtml; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/util/sanitizer.js
 * --------------------------------------------------------------------------
 */
 // TODO check type

const allowedAttribute = (attr, allowedAttributeList) => {
  const attrName = attr.nodeName.toLowerCase();

  if (allowedAttributeList.indexOf(attrName) !== -1) {
    if (_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.URI_ATTRS.indexOf(attrName) !== -1) {
      var _attr$nodeValue, _attr$nodeValue2;

      return Boolean(((_attr$nodeValue = attr.nodeValue) === null || _attr$nodeValue === void 0 ? void 0 : _attr$nodeValue.match(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.SAFE_URL_PATTERN)) || ((_attr$nodeValue2 = attr.nodeValue) === null || _attr$nodeValue2 === void 0 ? void 0 : _attr$nodeValue2.match(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.DATA_URL_PATTERN)));
    }

    return true;
  }

  const regExp = allowedAttributeList.filter(attrRegex => attrRegex instanceof RegExp); // Check if a regular expression validates the attribute.

  for (let i = 0, len = regExp.length; i < len; i++) {
    if (attrName.match(regExp[i])) {
      return true;
    }
  }

  return false;
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFn && typeof sanitizeFn === "function") {
    return sanitizeFn(unsafeHtml);
  }

  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
  const allowlistKeys = Object.keys(allowList); // const elements = [].concat(...createdDocument.body.querySelectorAll("*"));

  const elements = Array.from(createdDocument.body.querySelectorAll("*"));

  for (let i = 0, len = elements.length; i < len; i++) {
    const el = elements[i];
    const elName = el.nodeName.toLowerCase();

    if (allowlistKeys.indexOf(elName) === -1) {
      var _el$parentNode;

      el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.removeChild(el);
      continue;
    } // const attributeList = [].concat(...el.attributes);


    const attributeList = Array.from(el.attributes); // const allowedAttributes = [].concat(
    //   allowList["*"] || [],
    //   allowList[elName] || []
    // );

    const allowedAttributes = allowList["*"] || allowList[elName] || [];
    attributeList.forEach(attr => {
      if (!allowedAttribute(attr, allowedAttributes)) {
        el.removeAttribute(attr.nodeName);
      }
    });
  }

  return createdDocument.body.innerHTML;
}

/***/ }),

/***/ "../../packages/bs4/src/helper/utils.ts":
/*!**********************************************!*\
  !*** ../../packages/bs4/src/helper/utils.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emulateTransitionEnd": function() { return /* binding */ emulateTransitionEnd; },
/* harmony export */   "findShadowRoot": function() { return /* binding */ findShadowRoot; },
/* harmony export */   "getElementFromSelector": function() { return /* binding */ getElementFromSelector; },
/* harmony export */   "getSelector": function() { return /* binding */ getSelector; },
/* harmony export */   "getSelectorFromElement": function() { return /* binding */ getSelectorFromElement; },
/* harmony export */   "getTransitionDurationFromElement": function() { return /* binding */ getTransitionDurationFromElement; },
/* harmony export */   "getjQuery": function() { return /* binding */ getjQuery; },
/* harmony export */   "isElement": function() { return /* binding */ isElement; },
/* harmony export */   "isVisible": function() { return /* binding */ isVisible; },
/* harmony export */   "makeArray": function() { return /* binding */ makeArray; },
/* harmony export */   "noop": function() { return /* binding */ noop; },
/* harmony export */   "reflow": function() { return /* binding */ reflow; },
/* harmony export */   "triggerTransitionEnd": function() { return /* binding */ triggerTransitionEnd; },
/* harmony export */   "typeCheckConfig": function() { return /* binding */ typeCheckConfig; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
// @see https://github.com/twbs/bootstrap/blob/master/js/src/util/index.js


const getSelector = element => {
  let selector = element.getAttribute("data-target");

  if (!selector || selector === "#") {
    const hrefAttr = element.getAttribute("href");
    selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : null;
  }

  return selector;
};
const getSelectorFromElement = element => {
  const selector = getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};
const getElementFromSelector = element => {
  const selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};
const getTransitionDurationFromElement = element => {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = parseFloat(transitionDuration);
  const floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.MILLISECONDS_MULTIPLIER;
};
const triggerTransitionEnd = element => {
  const evt = document.createEvent("HTMLEvents");
  evt.initEvent(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, true, true);
  element.dispatchEvent(evt);
};
const isElement = obj => {
  return (obj[0] || obj).nodeType;
};
const emulateTransitionEnd = (element, duration) => {
  let called = false;
  const durationPadding = 5;
  const emulatedDuration = duration + durationPadding;

  function listener() {
    called = true;
    element.removeEventListener(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, listener);
  }

  element.addEventListener(_constants_index_js__WEBPACK_IMPORTED_MODULE_0__.TRANSITION_END, listener);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(element);
    }
  }, emulatedDuration);
};
/**
 *
 * @param componentName
 * @param config
 * @param configTypes
 */

const typeCheckConfig = (componentName, config, configTypes) => {
  for (const property in configTypes) {
    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = value && isElement(value) ? "element" : (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.toType)(value);

      if (!valueType || !new RegExp(expectedTypes).test(valueType)) {
        throw new Error("".concat(componentName.toUpperCase(), ": ") + "Option \"".concat(property, "\" provided type \"").concat(valueType, "\" ") + "but expected type \"".concat(expectedTypes, "\"."));
      }
    }
  }
};
const makeArray = nodeList => {
  if (!nodeList) {
    return [];
  }

  return [].slice.call(nodeList);
};
const isVisible = element => {
  if (!element) {
    return false;
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    const elementStyle = getComputedStyle(element);
    const parentNodeStyle = getComputedStyle(element.parentNode);
    return elementStyle.display !== "none" && parentNodeStyle.display !== "none" && elementStyle.visibility !== "hidden";
  }

  return false;
};
const findShadowRoot = element => {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === "function") {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return findShadowRoot(element.parentNode);
};
const noop = () => {
  return function () {
    /** nothing */
  };
};
const reflow = element => {
  return element.offsetHeight;
};
const getjQuery = () => {
  const {
    jQuery
  } = window;

  if (jQuery && !document.body.hasAttribute("data-no-jquery")) {
    return jQuery;
  }

  return null;
};

/***/ }),

/***/ "../../packages/bs4/src/index.ts":
/*!***************************************!*\
  !*** ../../packages/bs4/src/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARIA_ATTRIBUTE_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.ARIA_ATTRIBUTE_PATTERN; },
/* harmony export */   "Bs4AccordionComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4AccordionComponent; },
/* harmony export */   "Bs4ButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ButtonComponent; },
/* harmony export */   "Bs4CarouselComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4CarouselComponent; },
/* harmony export */   "Bs4ColorPickerComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ColorPickerComponent; },
/* harmony export */   "Bs4ContentsComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ContentsComponent; },
/* harmony export */   "Bs4DropdownComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4DropdownComponent; },
/* harmony export */   "Bs4FormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4FormComponent; },
/* harmony export */   "Bs4IconComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4IconComponent; },
/* harmony export */   "Bs4ModalItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ModalItemComponent; },
/* harmony export */   "Bs4NavbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4NavbarComponent; },
/* harmony export */   "Bs4NotificationContainerComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4NotificationContainerComponent; },
/* harmony export */   "Bs4ScrollspyComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ScrollspyComponent; },
/* harmony export */   "Bs4Service": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.Bs4Service; },
/* harmony export */   "Bs4ShareComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent; },
/* harmony export */   "Bs4SidebarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4SidebarComponent; },
/* harmony export */   "Bs4SlideshowComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4SlideshowComponent; },
/* harmony export */   "Bs4TabsComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4TabsComponent; },
/* harmony export */   "Bs4TaggedImageComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4TaggedImageComponent; },
/* harmony export */   "Bs4ToastItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ToastItemComponent; },
/* harmony export */   "Bs4ToggleButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ToggleButtonComponent; },
/* harmony export */   "CollapseBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.CollapseBinder; },
/* harmony export */   "CollapseOnUrlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.CollapseOnUrlBinder; },
/* harmony export */   "CollapseService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.CollapseService; },
/* harmony export */   "DATA_URL_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.DATA_URL_PATTERN; },
/* harmony export */   "DEFAULT_ALLOWLIST": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_ALLOWLIST; },
/* harmony export */   "DropdownBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.DropdownBinder; },
/* harmony export */   "DropdownService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.DropdownService; },
/* harmony export */   "ExpanOnUrlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ExpanOnUrlBinder; },
/* harmony export */   "MILLISECONDS_MULTIPLIER": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.MILLISECONDS_MULTIPLIER; },
/* harmony export */   "Modal": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Modal; },
/* harmony export */   "ModalService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalService; },
/* harmony export */   "NODE_TEXT": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.NODE_TEXT; },
/* harmony export */   "Notification": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Notification; },
/* harmony export */   "PopoverBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.PopoverBinder; },
/* harmony export */   "PopoverService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PopoverService; },
/* harmony export */   "SAFE_URL_PATTERN": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.SAFE_URL_PATTERN; },
/* harmony export */   "ScrollToOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollToOnEventBinder; },
/* harmony export */   "ScrollspyClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollspyClassBinder; },
/* harmony export */   "ShowToastOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShowToastOnEventBinder; },
/* harmony export */   "TOGGLE_ATTRIBUTE": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_ATTRIBUTE; },
/* harmony export */   "TOGGLE_BUTTON": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_BUTTON; },
/* harmony export */   "TOGGLE_CLASS": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TOGGLE_CLASS; },
/* harmony export */   "TRANSITION_END": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.TRANSITION_END; },
/* harmony export */   "Toast": function() { return /* reexport safe */ _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__.Toast; },
/* harmony export */   "ToastService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ToastService; },
/* harmony export */   "ToggleAttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleAttributeBinder; },
/* harmony export */   "ToggleClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleClassBinder; },
/* harmony export */   "ToggleCollapseOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ToggleCollapseOnEventBinder; },
/* harmony export */   "TooltipBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.TooltipBinder; },
/* harmony export */   "TooltipService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.TooltipService; },
/* harmony export */   "URI_ATTRS": function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_4__.URI_ATTRS; },
/* harmony export */   "bs4Module": function() { return /* reexport safe */ _bs4_module_js__WEBPACK_IMPORTED_MODULE_5__.bs4Module; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/bs4/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/bs4/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/index.js */ "../../packages/bs4/src/components/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/bs4/src/interfaces/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _bs4_module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bs4.module.js */ "../../packages/bs4/src/bs4.module.ts");


 // export * as formatters from './formatters/bs4.formatters';

 // export * from './interfaces/interfaces';




/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-class-name.ts":
/*!****************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-class-name.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-direction.ts":
/*!***************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-direction.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/carousel-option.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/carousel-option.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/collapse-on-event-binder.ts":
/*!*********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/collapse-on-event-binder.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/color-picker-options.ts":
/*!*****************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/color-picker-options.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/index.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Modal": function() { return /* reexport safe */ _modal_js__WEBPACK_IMPORTED_MODULE_5__.Modal; },
/* harmony export */   "Notification": function() { return /* reexport safe */ _notification_js__WEBPACK_IMPORTED_MODULE_7__.Notification; },
/* harmony export */   "Toast": function() { return /* reexport safe */ _toast_js__WEBPACK_IMPORTED_MODULE_14__.Toast; }
/* harmony export */ });
/* harmony import */ var _carousel_class_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carousel-class-name.js */ "../../packages/bs4/src/interfaces/carousel-class-name.ts");
/* harmony import */ var _carousel_direction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel-direction.js */ "../../packages/bs4/src/interfaces/carousel-direction.ts");
/* harmony import */ var _carousel_option_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./carousel-option.js */ "../../packages/bs4/src/interfaces/carousel-option.ts");
/* harmony import */ var _collapse_on_event_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collapse-on-event-binder.js */ "../../packages/bs4/src/interfaces/collapse-on-event-binder.ts");
/* harmony import */ var _color_picker_options_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./color-picker-options.js */ "../../packages/bs4/src/interfaces/color-picker-options.ts");
/* harmony import */ var _modal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modal.js */ "../../packages/bs4/src/interfaces/modal.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./module-options.js */ "../../packages/bs4/src/interfaces/module-options.ts");
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");
/* harmony import */ var _placement_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./placement.js */ "../../packages/bs4/src/interfaces/placement.ts");
/* harmony import */ var _popover_options_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./popover-options.js */ "../../packages/bs4/src/interfaces/popover-options.ts");
/* harmony import */ var _share_item_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./share-item.js */ "../../packages/bs4/src/interfaces/share-item.ts");
/* harmony import */ var _sidebar_component_scope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sidebar-component-scope.js */ "../../packages/bs4/src/interfaces/sidebar-component-scope.ts");
/* harmony import */ var _sidebar_component_state_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sidebar-component-state.js */ "../../packages/bs4/src/interfaces/sidebar-component-state.ts");
/* harmony import */ var _tagged_image_tag_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tagged-image-tag.js */ "../../packages/bs4/src/interfaces/tagged-image-tag.ts");
/* harmony import */ var _toast_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./toast.js */ "../../packages/bs4/src/interfaces/toast.ts");
/* harmony import */ var _toggle_attribute_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./toggle-attribute.js */ "../../packages/bs4/src/interfaces/toggle-attribute.ts");
/* harmony import */ var _toggle_class_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./toggle-class.js */ "../../packages/bs4/src/interfaces/toggle-class.ts");
/* harmony import */ var _tooltip_options_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tooltip-options.js */ "../../packages/bs4/src/interfaces/tooltip-options.ts");



















/***/ }),

/***/ "../../packages/bs4/src/interfaces/modal.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/modal.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Modal": function() { return /* binding */ Modal; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");


class Modal extends _notification_js__WEBPACK_IMPORTED_MODULE_1__.Notification {
  constructor(_ref) {
    let {
      title,
      message,
      iconUrl,
      focus,
      keyboard,
      backdrop,
      show,
      buttons,
      modalService,
      contextualClass,
      channel,
      $event,
      $context
    } = _ref;
    super("modal", title);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "buttons", []);

    this.message = message;
    this.iconUrl = iconUrl;
    this.focus = focus;
    this.keyboard = keyboard;
    this.backdrop = backdrop;
    this.show = show;
    this.buttons = buttons || [];
    this.modalService = modalService;
    this.contextualClass = contextualClass;
    this.channel = channel;
    this.$event = $event;
    this.$context = $context;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/module-options.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/module-options.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/notification.ts":
/*!*********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/notification.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Notification": function() { return /* binding */ Notification; }
/* harmony export */ });
class Notification {
  constructor(type, title) {
    this.type = type;
    this.title = title;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/placement.ts":
/*!******************************************************!*\
  !*** ../../packages/bs4/src/interfaces/placement.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/popover-options.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/popover-options.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/share-item.ts":
/*!*******************************************************!*\
  !*** ../../packages/bs4/src/interfaces/share-item.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/sidebar-component-scope.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/sidebar-component-scope.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/sidebar-component-state.ts":
/*!********************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/sidebar-component-state.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/tagged-image-tag.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/tagged-image-tag.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/toast.ts":
/*!**************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toast.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Toast": function() { return /* binding */ Toast; }
/* harmony export */ });
/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notification.js */ "../../packages/bs4/src/interfaces/notification.ts");

class Toast extends _notification_js__WEBPACK_IMPORTED_MODULE_0__.Notification {
  constructor(_ref) {
    let {
      title,
      message,
      iconUrl,
      delay,
      autoHide,
      animation,
      toastService,
      contextualClass,
      channel,
      $event,
      $context
    } = _ref;
    super("toast", title);
    this.message = message;
    this.iconUrl = iconUrl;
    this.delay = delay;
    this.autoHide = autoHide;
    this.animation = animation;
    this.toastService = toastService;
    this.contextualClass = contextualClass;
    this.channel = channel;
    this.$event = $event;
    this.$context = $context;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/interfaces/toggle-attribute.ts":
/*!*************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toggle-attribute.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/toggle-class.ts":
/*!*********************************************************!*\
  !*** ../../packages/bs4/src/interfaces/toggle-class.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/interfaces/tooltip-options.ts":
/*!************************************************************!*\
  !*** ../../packages/bs4/src/interfaces/tooltip-options.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/bs4/src/services/bs4.service.ts":
/*!******************************************************!*\
  !*** ../../packages/bs4/src/services/bs4.service.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4Service": function() { return /* binding */ Bs4Service; }
/* harmony export */ });
class Bs4Service {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of Bs4Service not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of Bs4Service already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/carousel.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/carousel.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "carousel";
const DATA_KEY = "bs.carousel";
const EVENT_KEY = ".".concat(DATA_KEY);
const DATA_API_KEY = ".data-api";
const ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

const ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

const SWIPE_THRESHOLD = 40;
const Default = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: "hover",
  wrap: true,
  touch: true
};
const DefaultType = {
  interval: "(number|boolean)",
  keyboard: "boolean",
  slide: "(boolean|string)",
  pause: "(string|boolean)",
  wrap: "boolean",
  touch: "boolean"
};
const Direction = {
  NEXT: "next",
  PREV: "prev",
  LEFT: "left",
  RIGHT: "right"
};
const Event = {
  SLIDE: "slide".concat(EVENT_KEY),
  SLID: "slid".concat(EVENT_KEY),
  KEYDOWN: "keydown".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY),
  TOUCHSTART: "touchstart".concat(EVENT_KEY),
  TOUCHMOVE: "touchmove".concat(EVENT_KEY),
  TOUCHEND: "touchend".concat(EVENT_KEY),
  POINTERDOWN: "pointerdown".concat(EVENT_KEY),
  POINTERUP: "pointerup".concat(EVENT_KEY),
  DRAG_START: "dragstart".concat(EVENT_KEY),
  LOAD_DATA_API: "load".concat(EVENT_KEY).concat(DATA_API_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
const ClassName = {
  CAROUSEL: "carousel",
  ACTIVE: "active",
  SLIDE: "slide",
  RIGHT: "carousel-item-right",
  LEFT: "carousel-item-left",
  NEXT: "carousel-item-next",
  PREV: "carousel-item-prev",
  ITEM: "carousel-item",
  POINTER_EVENT: "pointer-event"
};
const Selector = {
  ACTIVE: ".active",
  ACTIVE_ITEM: ".active.carousel-item",
  ITEM: ".carousel-item",
  ITEM_IMG: ".carousel-item img",
  NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
  INDICATORS: ".carousel-indicators"
};
const PointerType = {
  TOUCH: "touch",
  PEN: "pen"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class CarouselService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "items", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "interval", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "activeElement", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isPaused", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isSliding", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchTimeout", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchStartX", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchDeltaX", 0);

    this.config = this.getConfig(config);
    this.element = element;
    this.indicatorsElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.INDICATORS, this.element) || null;
    this.touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    this.pointerEvent = !!(window.PointerEvent || window.MSPointerEvent);
    this.addEventListeners();
  } // Getters


  static get Default() {
    return Default;
  } // Public


  next() {
    if (!this.isSliding) {
      this.slide(Direction.NEXT);
    }
  }

  nextWhenVisible() {
    // Don't call next when the page isn't visible
    // or the carousel or its parent isn't visible
    if (!document.hidden && (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isVisible)(this.element)) {
      this.next();
    }
  }

  prev() {
    if (!this.isSliding) {
      this.slide(Direction.PREV);
    }
  }

  pause(event) {
    if (!event) {
      this.isPaused = true;
    }

    if ((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.NEXT_PREV, this.element)) {
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.triggerTransitionEnd)(this.element);
      this.cycle(true);
    }

    clearInterval(this.interval || undefined);
    this.interval = null;
  }

  cycle(event) {
    if (!event) {
      this.isPaused = false;
    }

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }

    if (this.config && this.config.interval && !this.isPaused) {
      this.interval = window.setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this.config.interval);
    }
  }

  to(index) {
    if (this.items === null) {
      throw new Error("No items found!");
    }

    this.activeElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element) || null;

    if (this.activeElement === null) {
      throw new Error("Active element not found!");
    }

    const activeIndex = this.getItemIndex(this.activeElement);

    if (index > this.items.length - 1 || index < 0) {
      return;
    }

    if (this.isSliding) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this.element, Event.SLID, () => this.to(index));
      return;
    }

    if (activeIndex === index) {
      this.pause();
      this.cycle();
      return;
    }

    const direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
    this.slide(direction, this.items[index]);
  }

  dispose() {
    this.removeEventListeners();
    clearTimeout(this.touchTimeout || undefined);
    clearInterval(this.interval || undefined);
  } // Private


  getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  handleSwipe() {
    const absDeltax = Math.abs(this.touchDeltaX);

    if (absDeltax <= SWIPE_THRESHOLD) {
      return;
    }

    const direction = absDeltax / this.touchDeltaX;
    this.touchDeltaX = 0; // swipe left

    if (direction > 0) {
      this.prev();
    } // swipe right


    if (direction < 0) {
      this.next();
    }
  }

  addEventListeners() {
    this.keydown = this.keydown.bind(this);
    this.pause = this.pause.bind(this);
    this.cycle = this.cycle.bind(this);

    if (this.config.keyboard) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.KEYDOWN, this.keydown);
    }

    if (this.config.pause === "hover") {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.MOUSEENTER, this.pause);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.MOUSELEAVE, this.cycle);
    }

    if (this.config.touch && this.touchSupported) {
      this.addTouchEventListeners();
    }
  }

  addTouchEventListeners() {
    this.onTouchStart = this.onTouchStart.bind(this);
    this.onTouchMove = this.onTouchMove.bind(this);
    this.onTouchEnd = this.onTouchEnd.bind(this);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM_IMG, this.element)).forEach(itemImg => {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(itemImg, Event.DRAG_START, this.preventDrag);
    });

    if (this.pointerEvent) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.POINTERDOWN, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.POINTERUP, this.onTouchEnd);
      this.element.classList.add(ClassName.POINTER_EVENT);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHSTART, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHMOVE, this.onTouchMove);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.element, Event.TOUCHEND, this.onTouchEnd);
    }
  }

  removeEventListeners() {
    if (this.config.keyboard) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.KEYDOWN, this.keydown);
    }

    if (this.config.pause === "hover") {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.MOUSEENTER, this.pause);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.MOUSELEAVE, this.cycle);
    }

    this.removeTouchEventListeners();
  }

  removeTouchEventListeners() {
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM_IMG, this.element)).forEach(itemImg => {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(itemImg, Event.DRAG_START, this.preventDrag);
    });

    if (this.pointerEvent) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.POINTERDOWN, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.POINTERUP, this.onTouchEnd);
      this.element.classList.add(ClassName.POINTER_EVENT);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHSTART, this.onTouchStart);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHMOVE, this.onTouchMove);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.off)(this.element, Event.TOUCHEND, this.onTouchEnd);
    }
  }

  onTouchStart(e) {
    const event = e;

    if (this.pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
      this.touchStartX = event.clientX;
    } else if (!this.pointerEvent) {
      this.touchStartX = event.touches[0].clientX;
    }
  }

  onTouchMove(e) {
    const event = e; // ensure swiping with one touch and not pinching

    if (event.touches && event.touches.length > 1) {
      this.touchDeltaX = 0;
    } else {
      this.touchDeltaX = event.touches[0].clientX - this.touchStartX;
    }
  }

  onTouchEnd(e) {
    const event = e;

    if (this.pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
      this.touchDeltaX = event.clientX - this.touchStartX;
    }

    this.handleSwipe();

    if (this.config.pause === "hover") {
      // If it's a touch-enabled device, mouseenter/leave are fired as
      // part of the mouse compatibility events on first tap - the carousel
      // would stop cycling until user tapped out of it;
      // here, we listen for touchend, explicitly pause the carousel
      // (as if it's the second time we tap on it, mouseenter compat event
      // is NOT fired) and after a timeout (to allow for mouse compatibility
      // events to fire) we explicitly restart cycling
      this.pause();

      if (this.touchTimeout) {
        clearTimeout(this.touchTimeout);
      }

      this.touchTimeout = Number(setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + (this.config.interval || 0)));
    }
  }

  preventDrag(event) {
    event.preventDefault();
  }

  keydown(e) {
    var _event$target;

    const event = e;

    if ((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.tagName && /input|textarea/i.test(event.target.tagName)) {
      return;
    }

    switch (event.which) {
      case ARROW_LEFT_KEYCODE:
        event.preventDefault();
        this.prev();
        break;

      case ARROW_RIGHT_KEYCODE:
        event.preventDefault();
        this.next();
        break;

      default:
    }
  }

  getItemIndex(element) {
    if (!element) {
      return -1;
    }

    this.items = element && element.parentNode ? (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.makeArray)((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ITEM, element.parentNode)) : [];
    return this.items.indexOf(element);
  }

  getItemByDirection(direction, activeElement) {
    if (this.items === null) {
      throw new Error("No items found!");
    }

    const isNextDirection = direction === Direction.NEXT;
    const isPrevDirection = direction === Direction.PREV;
    const activeIndex = this.getItemIndex(activeElement);
    const lastItemIndex = this.items.length - 1;
    const isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

    if (isGoingToWrap && !this.config.wrap) {
      return activeElement;
    }

    const delta = direction === Direction.PREV ? -1 : 1;
    const itemIndex = (activeIndex + delta) % this.items.length;
    return itemIndex === -1 ? this.items[this.items.length - 1] : this.items[itemIndex];
  }

  triggerSlideEvent(relatedTarget, eventDirectionName) {
    const targetIndex = this.getItemIndex(relatedTarget);
    const fromIndex = this.getItemIndex((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element) || null);
    return (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLIDE, {
      relatedTarget,
      direction: eventDirectionName,
      from: fromIndex,
      to: targetIndex
    });
  }

  setActiveIndicatorElement(element) {
    if (this.indicatorsElement) {
      const indicators = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find)(Selector.ACTIVE, this.indicatorsElement);

      for (let i = 0; i < indicators.length; i++) {
        indicators[i].classList.remove(ClassName.ACTIVE);
      }

      const nextIndicator = this.indicatorsElement.children[this.getItemIndex(element)];

      if (nextIndicator) {
        nextIndicator.classList.add(ClassName.ACTIVE);
      }
    }
  }

  slide(direction, element) {
    const activeElement = (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne)(Selector.ACTIVE_ITEM, this.element);
    const activeElementIndex = this.getItemIndex(activeElement);
    const nextElement = element || activeElement && this.getItemByDirection(direction, activeElement);

    if (!nextElement) {
      throw new Error("Next element not found!");
    }

    const nextElementIndex = this.getItemIndex(nextElement);
    const isCycling = Boolean(this.interval);
    let directionalClassName;
    let orderClassName;
    let eventDirectionName;

    if (direction === Direction.NEXT) {
      directionalClassName = ClassName.LEFT;
      orderClassName = ClassName.NEXT;
      eventDirectionName = Direction.LEFT;
    } else {
      directionalClassName = ClassName.RIGHT;
      orderClassName = ClassName.PREV;
      eventDirectionName = Direction.RIGHT;
    }

    if (nextElement && nextElement.classList.contains(ClassName.ACTIVE)) {
      this.isSliding = false;
      return;
    }

    const slideEvent = this.triggerSlideEvent(nextElement, eventDirectionName);

    if (slideEvent.defaultPrevented) {
      return;
    }

    if (!activeElement || !nextElement) {
      // Some weirdness is happening, so we bail
      return;
    }

    this.isSliding = true;

    if (isCycling) {
      this.pause();
    }

    this.setActiveIndicatorElement(nextElement);

    if (this.element.classList.contains(ClassName.SLIDE)) {
      nextElement.classList.add(orderClassName);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const nextElementInterval = parseInt(nextElement.getAttribute("data-interval") || "0", 10);

      if (nextElementInterval) {
        this.config.defaultInterval = this.config.defaultInterval || this.config.interval;
        this.config.interval = nextElementInterval;
      } else {
        this.config.interval = this.config.defaultInterval || this.config.interval;
      }

      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(activeElement);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(activeElement, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => {
        nextElement.classList.remove(directionalClassName);
        nextElement.classList.remove(orderClassName);
        nextElement.classList.add(ClassName.ACTIVE);
        activeElement.classList.remove(ClassName.ACTIVE);
        activeElement.classList.remove(orderClassName);
        activeElement.classList.remove(directionalClassName);
        this.isSliding = false;
        setTimeout(() => {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLID, {
            relatedTarget: nextElement,
            direction: eventDirectionName,
            from: activeElementIndex,
            to: nextElementIndex
          });
        }, 0);
      });
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(activeElement, transitionDuration);
    } else {
      activeElement.classList.remove(ClassName.ACTIVE);
      nextElement.classList.add(ClassName.ACTIVE);
      this.isSliding = false;
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this.element, Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });
    }

    if (isCycling) {
      this.cycle();
    }
  }

}

/* harmony default export */ __webpack_exports__["default"] = (CarouselService);

/***/ }),

/***/ "../../packages/bs4/src/services/collapse.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/collapse.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_COLLAPSE": function() { return /* binding */ CLASS_NAME_COLLAPSE; },
/* harmony export */   "CLASS_NAME_COLLAPSED": function() { return /* binding */ CLASS_NAME_COLLAPSED; },
/* harmony export */   "CLASS_NAME_COLLAPSING": function() { return /* binding */ CLASS_NAME_COLLAPSING; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CollapseService": function() { return /* binding */ CollapseService; },
/* harmony export */   "DATA_KEY": function() { return /* binding */ DATA_KEY; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_KEY": function() { return /* binding */ EVENT_KEY; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "HEIGHT": function() { return /* binding */ HEIGHT; },
/* harmony export */   "NAME": function() { return /* binding */ NAME; },
/* harmony export */   "SELECTOR_ACTIVES": function() { return /* binding */ SELECTOR_ACTIVES; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "WIDTH": function() { return /* binding */ WIDTH; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */






/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "collapse";
const VERSION = "4.3.1";
const DATA_KEY = "bs.collapse";
const EVENT_KEY = ".".concat(DATA_KEY);
const Default = {
  toggle: true,
  parent: ""
};
const DefaultType = {
  toggle: "boolean",
  parent: "(string|element)"
};
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_COLLAPSE = "collapse";
const CLASS_NAME_COLLAPSING = "collapsing";
const CLASS_NAME_COLLAPSED = "collapsed";
const WIDTH = "width";
const HEIGHT = "height";
const SELECTOR_ACTIVES = ".show, .collapsing"; // export const SELECTOR_DATA_TOGGLE = '[data-toggle="collapse"]'

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class CollapseService {
  constructor(element, triggerList) {
    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_element", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_triggerArray", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_selector", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_parent", null);

    this._isTransitioning = false;
    this._element = element;
    this._config = this._getConfig(config);
    this._triggerArray = Array.from(triggerList); // this._triggerArray = Array.from(SelectorEngine.find(
    //   `${SELECTOR_DATA_TOGGLE}[href="#${element.id}"],` +
    //   `${SELECTOR_DATA_TOGGLE}[data-target="#${element.id}"]`
    // )) as HTMLElement[];
    // const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE) as NodeListOf<HTMLElement>;
    // for (let i = 0, len = toggleList.length; i < len; i++) {
    //   const elem = toggleList[i]
    //   const selector = getSelectorFromElement(elem)
    //   const filterElement = !selector ? [] : Array.from(SelectorEngine.find(selector))
    //     .filter(foundElem => foundElem === element)
    //   if (selector !== null && filterElement.length) {
    //     this._selector = selector
    //     // this._triggerArray.push(elem)
    //   }
    // }

    this._parent = this._config.parent ? this._getParent() : null;

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray); // this._addAriaAndCollapsedClass(this._element, [])

    }

    if (this._config.toggle) {
      this.toggle();
    }

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  } // Public


  isExpanded() {
    var _this$_element;

    return !!((_this$_element = this._element) !== null && _this$_element !== void 0 && _this$_element.classList.contains(CLASS_NAME_SHOW));
  }

  isCollapsed() {
    return !this.isExpanded();
  }

  toggle() {
    if (this.isExpanded()) {
      this.hide();
    } else {
      this.show();
    }
  }

  show() {
    var _this$_triggerArray;

    if (!this._element) {
      console.warn("this._element not set!");
      return;
    }

    if (this._isTransitioning || this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    let actives = null;
    let activesData;

    if (this._parent) {
      actives = Array.from(_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find(SELECTOR_ACTIVES, this._parent)).filter(elem => {
        if (typeof this._config.parent === "string") {
          return elem.getAttribute("data-parent") === this._config.parent;
        }

        return elem.classList.contains(CLASS_NAME_COLLAPSE);
      });

      if (actives.length === 0) {
        actives = null;
      }
    }

    const container = this._selector ? _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne(this._selector) : null;

    if (actives) {
      const tempActiveData = actives.filter(elem => container !== elem);
      activesData = tempActiveData[0] ? (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(tempActiveData[0], DATA_KEY) : null;

      if (activesData && activesData._isTransitioning) {
        return;
      }
    }

    const startEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_SHOW);

    if (startEvent.defaultPrevented) {
      return;
    }

    if (actives) {
      actives.forEach(elemActive => {
        if (container !== elemActive) {
          CollapseService.collapseInterface(elemActive, "hide");
        }

        if (!activesData) {
          (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(elemActive, DATA_KEY, null);
        }
      });
    }

    const dimension = this._getDimension();

    this._element.classList.remove(CLASS_NAME_COLLAPSE);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.style[dimension] = "0";

    if ((_this$_triggerArray = this._triggerArray) !== null && _this$_triggerArray !== void 0 && _this$_triggerArray.length) {
      this._triggerArray.forEach(element => {
        element.classList.remove(CLASS_NAME_COLLAPSED);
        element.setAttribute("aria-expanded", "true");
      });
    }

    this.setTransitioning(true);

    const complete = () => {
      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

      this._element.style[dimension] = "";
      this.setTransitioning(false);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_SHOWN);
    };

    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = "scroll".concat(capitalizedDimension);
    const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    this._element.style[dimension] = "".concat(this._element[scrollSize], "px");

    if (!this._config.parent && this._triggerArray) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray, true); // this._addAriaAndCollapsedClass(this._element, [])

    }
  }

  hide() {
    var _this$_triggerArray2;

    if (!this._element) {
      console.warn("this._element not set!");
      return;
    }

    if (this._isTransitioning || !this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    const startEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_HIDE);

    if (startEvent.defaultPrevented) {
      return;
    }

    const dimension = this._getDimension();

    this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

    const triggerArrayLength = (_this$_triggerArray2 = this._triggerArray) === null || _this$_triggerArray2 === void 0 ? void 0 : _this$_triggerArray2.length;

    if (triggerArrayLength && this._triggerArray && triggerArrayLength > 0) {
      for (let i = 0; i < triggerArrayLength; i++) {
        const trigger = this._triggerArray[i];
        const elem = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector)(trigger);

        if (elem && !elem.classList.contains(CLASS_NAME_SHOW)) {
          trigger.classList.add(CLASS_NAME_COLLAPSED);
          trigger.setAttribute("aria-expanded", "false");
        }
      }
    }

    this.setTransitioning(true);

    const complete = () => {
      this.setTransitioning(false);

      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.trigger)(this._element, EVENT_HIDDEN);
    };

    this._element.style[dimension] = "";
    const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_3__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);

    if (!this._config.parent && this._triggerArray) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray, false); // this._addAriaAndCollapsedClass(this._element, [])

    }
  }

  setTransitioning(isTransitioning) {
    this._isTransitioning = isTransitioning;
  }

  dispose() {
    if (this._element) {
      (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.removeData)(this._element, DATA_KEY);
    }

    this._config = null;
    this._parent = null;
    this._element = null; // this._triggerArray = null

    this._isTransitioning = false;
  } // Private


  _getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    config.toggle = Boolean(config.toggle); // Coerce string values

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  _getDimension() {
    const hasWidth = this._element ? this._element.classList.contains(WIDTH) : false;
    return hasWidth ? WIDTH : HEIGHT;
  }

  _getParent() {
    let {
      parent
    } = this._config;

    if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(parent)) {
      // it's a jQuery object
      if (typeof parent.jquery !== "undefined" || typeof parent[0] !== "undefined") {
        parent = parent[0];
      }
    } else {
      parent = _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.findOne(parent);
    } // const selector = `${SELECTOR_DATA_TOGGLE}[data-parent="${parent}"]`


    const selector = "[data-parent=\"".concat(parent, "\"]");
    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_4__.find(selector, parent).forEach(element => {
      const selected = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromSelector)(element);

      if (selected) {
        this._addAriaAndCollapsedClass(selected, [element]);
      } else {
        console.warn();
      }
    });
    return parent;
  }

  _addAriaAndCollapsedClass(element, triggerArray, isOpen) {
    if (element) {
      if (typeof isOpen !== "boolean") {
        isOpen = element.classList.contains(CLASS_NAME_SHOW);
      }

      if (triggerArray.length) {
        triggerArray.forEach(elem => {
          if (isOpen) {
            elem.classList.remove(CLASS_NAME_COLLAPSED);
          } else {
            elem.classList.add(CLASS_NAME_COLLAPSED);
          }

          elem.setAttribute("aria-expanded", (!!isOpen).toString());
        });
      }
    }
  } // Static


  static collapseInterface(element, config) {
    let data = (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);

    const _config = _objectSpread(_objectSpread(_objectSpread({}, Default), element.dataset), typeof config === "object" && config ? config : {});

    if (!data && _config.toggle && /show|hide/.test(config)) {
      _config.toggle = false;
    }

    if (!data) {
      data = new CollapseService(element, [], _config);
    }

    if (typeof config === "string") {
      if (typeof data[config] === "undefined") {
        throw new TypeError("No method named \"".concat(config, "\""));
      }

      data[config]();
    }
  }

  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/dropdown.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/bs4/src/services/dropdown.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARROW_DOWN_KEYCODE": function() { return /* binding */ ARROW_DOWN_KEYCODE; },
/* harmony export */   "ARROW_UP_KEYCODE": function() { return /* binding */ ARROW_UP_KEYCODE; },
/* harmony export */   "ATTACHMENTMAP": function() { return /* binding */ ATTACHMENTMAP; },
/* harmony export */   "CLASSNAME": function() { return /* binding */ CLASSNAME; },
/* harmony export */   "DATA_API_KEY": function() { return /* binding */ DATA_API_KEY; },
/* harmony export */   "DATA_KEY": function() { return /* binding */ DATA_KEY; },
/* harmony export */   "DEFAULT": function() { return /* binding */ DEFAULT; },
/* harmony export */   "DEFAULTTYPE": function() { return /* binding */ DEFAULTTYPE; },
/* harmony export */   "DropdownService": function() { return /* binding */ DropdownService; },
/* harmony export */   "ESCAPE_KEYCODE": function() { return /* binding */ ESCAPE_KEYCODE; },
/* harmony export */   "EVENT": function() { return /* binding */ EVENT; },
/* harmony export */   "EVENT_KEY": function() { return /* binding */ EVENT_KEY; },
/* harmony export */   "NAME": function() { return /* binding */ NAME; },
/* harmony export */   "REGEXP_KEYDOWN": function() { return /* binding */ REGEXP_KEYDOWN; },
/* harmony export */   "RIGHT_MOUSE_BUTTON_WHICH": function() { return /* binding */ RIGHT_MOUSE_BUTTON_WHICH; },
/* harmony export */   "SELECTOR": function() { return /* binding */ SELECTOR; },
/* harmony export */   "SPACE_KEYCODE": function() { return /* binding */ SPACE_KEYCODE; },
/* harmony export */   "TAB_KEYCODE": function() { return /* binding */ TAB_KEYCODE; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

 // /dist/umd/popper


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.1.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dropdown.js
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "dropdown";
const VERSION = "4.1.3";
const DATA_KEY = "bs.dropdown";
const EVENT_KEY = ".".concat(DATA_KEY);
const DATA_API_KEY = ".data-api";
const ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

const SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

const TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

const ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

const ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

const RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

const REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEYCODE, "|").concat(ARROW_DOWN_KEYCODE, "|").concat(ESCAPE_KEYCODE));
const EVENT = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY),
  KEYDOWN_DATA_API: "keydown".concat(EVENT_KEY).concat(DATA_API_KEY),
  KEYUP_DATA_API: "keyup".concat(EVENT_KEY).concat(DATA_API_KEY)
};
const CLASSNAME = {
  DISABLED: "disabled",
  SHOW: "show",
  DROPUP: "dropup",
  DROPRIGHT: "dropright",
  DROPLEFT: "dropleft",
  MENURIGHT: "dropdown-menu-right",
  MENULEFT: "dropdown-menu-left",
  POSITION_STATIC: "position-static"
};
const SELECTOR = {
  DATA_TOGGLE: ".dropdown-toggle",
  FORM_CHILD: ".dropdown form",
  MENU: ".dropdown-menu",
  NAVBAR_NAV: ".navbar-nav",
  VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
};
const ATTACHMENTMAP = {
  TOP: "top-start",
  TOPEND: "top-end",
  BOTTOM: "bottom-start",
  BOTTOMEND: "bottom-end",
  RIGHT: "right-start",
  RIGHTEND: "right-end",
  LEFT: "left-start",
  LEFTEND: "left-end"
};
const DEFAULT = {
  offset: 0,
  flip: true,
  boundary: "scrollParent",
  reference: "toggle",
  display: "dynamic"
};
const DEFAULTTYPE = {
  offset: "(number|string|function)",
  flip: "boolean",
  boundary: "(string|element)",
  reference: "(string|element)",
  display: "string"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class DropdownService {
  // Getters
  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return DEFAULT;
  }

  static get DefaultType() {
    return DEFAULTTYPE;
  } // Static


  static closeAll() {
    const buttons = document.querySelectorAll(SELECTOR.DATA_TOGGLE);
    buttons.forEach(button => {
      if (button.parentElement) {
        const menu = button.parentElement.querySelector(SELECTOR.MENU + "." + CLASSNAME.SHOW) || undefined;

        if (menu) {
          return this.close(button, menu, button);
        }
      }

      this.close(button, button);
    });
  }

  static close(triggerCloseElement, menu, dropdown) {
    const relatedTarget = {
      relatedTarget: triggerCloseElement
    };

    if (menu && menu.classList.contains(CLASSNAME.SHOW)) {
      menu.classList.remove(CLASSNAME.SHOW);
    }

    if (dropdown && dropdown.classList.contains(CLASSNAME.SHOW)) {
      dropdown.classList.remove(CLASSNAME.SHOW);
      dropdown.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
        detail: relatedTarget
      }));
    }

    const parent = triggerCloseElement.parentElement;

    if (parent && parent.classList.contains(CLASSNAME.SHOW)) {
      parent.classList.remove(CLASSNAME.SHOW);
      parent.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
        detail: relatedTarget
      }));
    }
  }

  static _clearMenus() {
    return this.closeAll();
  }

  constructor(elements, config) {
    this._element = elements;
    this._popper = null;
    this._config = this._getConfig(config);
    this._menu = this._getMenuElement();
    this._inNavbar = this._detectNavbar();
    this.outsideClickListener = this.outsideClickListener.bind(this);
    this.closeOnClickOutside();
  } // Public


  close() {
    return DropdownService.close(this._element, this._menu);
  }

  show() {
    const relatedTarget = {
      relatedTarget: this._element
    };
    const parent = this._element.parentElement;

    if (!this._menu.classList.contains(CLASSNAME.SHOW)) {
      this._menu.classList.add(CLASSNAME.SHOW);
    }

    if (parent && !parent.classList.contains(CLASSNAME.SHOW)) {
      parent.classList.add(CLASSNAME.SHOW);
      parent.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
        detail: relatedTarget
      }));
    }
  }

  toggle() {
    if (this._element.disabled || this._element.classList.contains(CLASSNAME.DISABLED)) {
      return;
    }

    const parent = this._element.parentElement;

    const isActive = this._menu.classList.contains(CLASSNAME.SHOW);

    DropdownService._clearMenus();

    if (isActive) {
      this.close();
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = new CustomEvent(EVENT.SHOW, {
      detail: relatedTarget
    });

    if (parent) {
      parent.dispatchEvent(showEvent);

      if (showEvent.defaultPrevented) {
        return;
      }
    } // Disable totally Popper.js for Dropdown in Navbar


    if (!this._inNavbar) {
      /**
       * Check for Popper dependency
       * Popper - https://popper.js.org
       */
      if (typeof popper_js__WEBPACK_IMPORTED_MODULE_2__["default"] === "undefined") {
        throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
      }

      let referenceElement = this._element;

      if (this._config.reference === "parent") {
        referenceElement = parent;
      } else if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_1__.isElement)(this._config.reference)) {
        referenceElement = this._config.reference; // Check if it's jQuery element

        if (typeof this._config.reference.jquery !== "undefined") {
          referenceElement = this._config.reference[0];
        }
      } // If boundary is not `scrollParent`, then set position to `static`
      // to allow the menu to "escape" the scroll parent's boundaries
      // https://github.com/twbs/bootstrap/issues/24251


      if (parent && this._config.boundary !== "scrollParent") {
        parent.classList.add(CLASSNAME.POSITION_STATIC);
      }

      this._popper = new popper_js__WEBPACK_IMPORTED_MODULE_2__["default"](referenceElement, this._menu, this._getPopperConfig());
    }

    this._element.focus();

    this._element.setAttribute("aria-expanded", "true");

    if (this._menu.classList.contains(CLASSNAME.SHOW)) {
      this._menu.classList.remove(CLASSNAME.SHOW);
    } else {
      this._menu.classList.add(CLASSNAME.SHOW);
    }

    this._menu.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
      detail: relatedTarget
    }));
  }

  dispose() {
    this._element.removeAttribute("data-" + DATA_KEY); // delete this._element;
    // delete this._menu;


    if (this._popper !== null) {
      this._popper.destroy();

      this._popper = null;
    }

    document.removeEventListener("click", this.outsideClickListener);
  }

  update() {
    this._inNavbar = this._detectNavbar();

    if (this._popper !== null) {
      this._popper.scheduleUpdate();
    }
  } // Private


  outsideClickListener(event) {
    const target = event.target || event.srcElement || event.currentTarget;
    const parent = this._element.parentElement;

    if (target && !parent.contains(target)) {
      this.close();
      document.removeEventListener("click", this.outsideClickListener);
    }
  }
  /**
   * @see https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element
   * @param selector
   */


  closeOnClickOutside() {
    if (this._element.parentElement) {
      document.addEventListener("click", this.outsideClickListener);
    }
  }

  _getConfig(config) {
    config = _objectSpread(_objectSpread(_objectSpread({}, DropdownService.Default), this._element.dataset), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_1__.typeCheckConfig)(NAME, config, DropdownService.DefaultType);
    return config;
  }

  _getMenuElement() {
    if (!this._menu) {
      const parent = this._element.parentElement;

      if (parent) {
        const menu = parent.querySelector(SELECTOR.MENU);

        if (!menu) {
          throw new Error("Menu not found!");
        }

        this._menu = menu;
      }
    }

    return this._menu;
  }

  _getPlacement() {
    const parentDropdown = this._element.parentElement;
    let placement = ATTACHMENTMAP.BOTTOM;

    if (!parentDropdown) {
      throw new Error("Parent of element not found!");
    } // Handle dropup


    if (parentDropdown.classList.contains(CLASSNAME.DROPUP)) {
      placement = ATTACHMENTMAP.TOP;

      if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
        placement = ATTACHMENTMAP.TOPEND;
      }
    } else if (parentDropdown.classList.contains(CLASSNAME.DROPRIGHT)) {
      placement = ATTACHMENTMAP.RIGHT;
    } else if (parentDropdown.classList.contains(CLASSNAME.DROPLEFT)) {
      placement = ATTACHMENTMAP.LEFT;
    } else if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
      placement = ATTACHMENTMAP.BOTTOMEND;
    }

    return placement;
  }

  _detectNavbar() {
    return this._element.closest && this._element.closest(".navbar") !== null;
  }

  _getPopperConfig() {
    const offsetConf = {};

    if (typeof this._config.offset === "function") {
      offsetConf.fn = data => {
        data.offsets = _objectSpread(_objectSpread({}, data.offsets), this._config.offset(data.offsets) || {});
        return data;
      };
    } else {
      offsetConf.offset = this._config.offset;
    }

    const popperConfig = {
      placement: this._getPlacement(),
      modifiers: {
        offset: offsetConf,
        flip: {
          enabled: this._config.flip
        },
        preventOverflow: {
          boundariesElement: this._config.boundary
        }
      }
    }; // Disable Popper.js if we have a static display

    if (this._config.display === "static") {
      popperConfig.modifiers.applyStyle = {
        enabled: false
      };
    }

    return popperConfig;
  }

}

/***/ }),

/***/ "../../packages/bs4/src/services/index.ts":
/*!************************************************!*\
  !*** ../../packages/bs4/src/services/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bs4Service": function() { return /* reexport safe */ _bs4_service_js__WEBPACK_IMPORTED_MODULE_0__.Bs4Service; },
/* harmony export */   "CollapseService": function() { return /* reexport safe */ _collapse_service_js__WEBPACK_IMPORTED_MODULE_2__.CollapseService; },
/* harmony export */   "DropdownService": function() { return /* reexport safe */ _dropdown_service_js__WEBPACK_IMPORTED_MODULE_3__.DropdownService; },
/* harmony export */   "ModalService": function() { return /* reexport safe */ _modal_service_js__WEBPACK_IMPORTED_MODULE_4__.ModalService; },
/* harmony export */   "PopoverService": function() { return /* reexport safe */ _popover_service_js__WEBPACK_IMPORTED_MODULE_6__.PopoverService; },
/* harmony export */   "ToastService": function() { return /* reexport safe */ _toast_service_js__WEBPACK_IMPORTED_MODULE_7__.ToastService; },
/* harmony export */   "TooltipService": function() { return /* reexport safe */ _tooltip_service_js__WEBPACK_IMPORTED_MODULE_5__.TooltipService; }
/* harmony export */ });
/* harmony import */ var _bs4_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs4.service.js */ "../../packages/bs4/src/services/bs4.service.ts");
/* harmony import */ var _carousel_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel.service.js */ "../../packages/bs4/src/services/carousel.service.ts");
/* harmony import */ var _collapse_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collapse.service.js */ "../../packages/bs4/src/services/collapse.service.ts");
/* harmony import */ var _dropdown_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dropdown.service.js */ "../../packages/bs4/src/services/dropdown.service.ts");
/* harmony import */ var _modal_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal.service.js */ "../../packages/bs4/src/services/modal.service.ts");
/* harmony import */ var _tooltip_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tooltip.service.js */ "../../packages/bs4/src/services/tooltip.service.ts");
/* harmony import */ var _popover_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./popover.service.js */ "../../packages/bs4/src/services/popover.service.ts");
/* harmony import */ var _toast_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toast.service.js */ "../../packages/bs4/src/services/toast.service.ts");










/***/ }),

/***/ "../../packages/bs4/src/services/modal.service.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/services/modal.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_BACKDROP": function() { return /* binding */ CLASS_NAME_BACKDROP; },
/* harmony export */   "CLASS_NAME_FADE": function() { return /* binding */ CLASS_NAME_FADE; },
/* harmony export */   "CLASS_NAME_OPEN": function() { return /* binding */ CLASS_NAME_OPEN; },
/* harmony export */   "CLASS_NAME_SCROLLBAR_MEASURER": function() { return /* binding */ CLASS_NAME_SCROLLBAR_MEASURER; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CLASS_NAME_STATIC": function() { return /* binding */ CLASS_NAME_STATIC; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_CLICK_DISMISS": function() { return /* binding */ EVENT_CLICK_DISMISS; },
/* harmony export */   "EVENT_FOCUSIN": function() { return /* binding */ EVENT_FOCUSIN; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_HIDE_PREVENTED": function() { return /* binding */ EVENT_HIDE_PREVENTED; },
/* harmony export */   "EVENT_KEYDOWN_DISMISS": function() { return /* binding */ EVENT_KEYDOWN_DISMISS; },
/* harmony export */   "EVENT_MOUSEDOWN_DISMISS": function() { return /* binding */ EVENT_MOUSEDOWN_DISMISS; },
/* harmony export */   "EVENT_MOUSEUP_DISMISS": function() { return /* binding */ EVENT_MOUSEUP_DISMISS; },
/* harmony export */   "EVENT_RESIZE": function() { return /* binding */ EVENT_RESIZE; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "ModalService": function() { return /* binding */ ModalService; },
/* harmony export */   "SELECTOR_DIALOG": function() { return /* binding */ SELECTOR_DIALOG; },
/* harmony export */   "SELECTOR_FIXED_CONTENT": function() { return /* binding */ SELECTOR_FIXED_CONTENT; },
/* harmony export */   "SELECTOR_MODAL_BODY": function() { return /* binding */ SELECTOR_MODAL_BODY; },
/* harmony export */   "SELECTOR_STICKY_CONTENT": function() { return /* binding */ SELECTOR_STICKY_CONTENT; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/modal.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */



 // import Manipulator from "./dom/manipulator";



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "modal";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.modal";
const EVENT_KEY = ".".concat(DATA_KEY);
const ESCAPE_KEY = "Escape";
const Default = {
  backdrop: true,
  keyboard: true,
  focus: true,
  show: true
};
const DefaultType = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  focus: "boolean",
  show: "boolean"
};
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
const EVENT_RESIZE = "resize".concat(EVENT_KEY);
const EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY);
const EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY);
const EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(EVENT_KEY);
const EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY);
const CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
const CLASS_NAME_BACKDROP = "modal-backdrop";
const CLASS_NAME_OPEN = "modal-open";
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_STATIC = "modal-static";
const SELECTOR_DIALOG = ".modal-dialog";
const SELECTOR_MODAL_BODY = ".modal-body";
const SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
const SELECTOR_STICKY_CONTENT = ".sticky-top";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class ModalService {
  constructor(element, config) {
    this._config = this._getConfig(config);
    this._element = element;
    this._dialog = _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.findOne(SELECTOR_DIALOG, element);
    this._backdrop = null;
    this._isShown = false;
    this._isBodyOverflowing = false;
    this._ignoreBackdropClick = false;
    this._isTransitioning = false;
    this._scrollbarWidth = 0;
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }

    if (this._element.classList.contains(CLASS_NAME_FADE)) {
      this._isTransitioning = true;
    }

    const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOW, {
      relatedTarget
    });

    if (this._isShown || showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;

    this._checkScrollbar();

    this._setScrollbar();

    this._adjustDialog();

    this._setEscapeEvent();

    this._setResizeEvent();

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
    event => this.hide(event));

    if (this._dialog) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, EVENT_MOUSEUP_DISMISS, event => {
          if (event.target === this._element) {
            this._ignoreBackdropClick = true;
          }
        });
      });
    }

    this._showBackdrop(() => this._showElement(relatedTarget));
  }

  hide(event) {
    if (event) {
      event.preventDefault();
    }

    if (!this._isShown || this._isTransitioning) {
      return;
    }

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._isShown = false;

    const transition = this._element.classList.contains(CLASS_NAME_FADE);

    if (transition) {
      this._isTransitioning = true;
    }

    this._setEscapeEvent();

    this._setResizeEvent(); // off(document, EVENT_FOCUSIN); TODO


    this._element.classList.remove(CLASS_NAME_SHOW); // off(this._element, EVENT_CLICK_DISMISS); TODO
    // off(this._dialog, EVENT_MOUSEDOWN_DISMISS); TODO


    if (transition) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => this._hideModal());
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      this._hideModal();
    }
  }

  dispose() {
    // TODO
    // [window, this._element, this._dialog].forEach((htmlElement) =>
    //   off(htmlElement, EVENT_KEY)
    // );

    /**
     * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
     * Do not move `document` in `htmlElements` array
     * It will remove `EVENT_CLICK_DATA_API` event that should remain
     */
    // off(document, EVENT_FOCUSIN); TODO
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.removeData)(this._element, DATA_KEY); // this._config = null;
    // this._element = null;
    // this._dialog = null;
    // this._backdrop = null;
    // this._isShown = null;
    // this._isBodyOverflowing = null;
    // this._ignoreBackdropClick = null;
    // this._isTransitioning = null;
    // this._scrollbarWidth = null;
  }

  handleUpdate() {
    this._adjustDialog();
  } // Private


  _getConfig(config) {
    config = _objectSpread(_objectSpread({}, Default), config);
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, DefaultType);
    return config;
  }

  _showElement(relatedTarget) {
    const transition = this._element.classList.contains(CLASS_NAME_FADE);

    const modalBody = this._dialog ? _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.findOne(SELECTOR_MODAL_BODY, this._dialog) : null;

    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
      // Don't move modal's DOM position
      document.body.appendChild(this._element);
    }

    this._element.style.display = "block";

    this._element.removeAttribute("aria-hidden");

    this._element.setAttribute("aria-modal", "true");

    this._element.setAttribute("role", "dialog");

    this._element.scrollTop = 0;

    if (modalBody) {
      modalBody.scrollTop = 0;
    }

    if (transition) {
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);
    }

    this._element.classList.add(CLASS_NAME_SHOW);

    if (this._config.focus) {
      this._enforceFocus();
    }

    const transitionComplete = () => {
      if (this._config.focus) {
        this._element.focus();
      }

      this._isTransitioning = false;
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOWN, {
        relatedTarget
      });
    };

    if (transition) {
      if (!this._dialog) {
        console.warn("Dialog element not found!");
        return;
      }

      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._dialog);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._dialog, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, transitionComplete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._dialog, transitionDuration);
    } else {
      transitionComplete();
    }
  }

  _enforceFocus() {
    const onFocusIn = event => {
      if (event.target && document !== event.target && this._element !== event.target && !this._element.contains(event.target)) {
        this._element.focus();
      }
    };

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(document, EVENT_FOCUSIN, onFocusIn); // guard against infinite focus loou

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(document, EVENT_FOCUSIN, onFocusIn);
  }

  _setEscapeEvent() {
    const onEscapeEvent = event => {
      if (this._config.keyboard && event.key === ESCAPE_KEY) {
        event.preventDefault();
        this.hide();
      } else if (!this._config.keyboard && event.key === ESCAPE_KEY) {
        this._triggerBackdropTransition();
      }
    };

    if (this._isShown) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
    }
  }

  _setResizeEvent() {
    const onResizeEvent = () => this._adjustDialog();

    if (this._isShown) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(window, EVENT_RESIZE, onResizeEvent);
    } else {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(window, EVENT_RESIZE, onResizeEvent);
    }
  }

  _hideModal() {
    this._element.style.display = "none";

    this._element.setAttribute("aria-hidden", "true");

    this._element.removeAttribute("aria-modal");

    this._element.removeAttribute("role");

    this._isTransitioning = false;

    this._showBackdrop(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);

      this._resetAdjustments();

      this._resetScrollbar();

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDDEN);
    });
  }

  _removeBackdrop() {
    var _this$_backdrop, _this$_backdrop$paren;

    (_this$_backdrop = this._backdrop) === null || _this$_backdrop === void 0 ? void 0 : (_this$_backdrop$paren = _this$_backdrop.parentNode) === null || _this$_backdrop$paren === void 0 ? void 0 : _this$_backdrop$paren.removeChild(this._backdrop);
    this._backdrop = null;
  }

  _showBackdrop(callback) {
    const animate = this._element.classList.contains(CLASS_NAME_FADE) ? CLASS_NAME_FADE : "";

    if (this._isShown && this._config.backdrop) {
      this._backdrop = document.createElement("div");
      this._backdrop.className = CLASS_NAME_BACKDROP;

      if (animate) {
        this._backdrop.classList.add(animate);
      }

      document.body.appendChild(this._backdrop);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, event => {
        if (this._ignoreBackdropClick) {
          this._ignoreBackdropClick = false;
          return;
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        this._triggerBackdropTransition();
      });

      if (animate) {
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._backdrop);
      }

      this._backdrop.classList.add(CLASS_NAME_SHOW);

      if (!animate) {
        callback();
        return;
      }

      const backdropTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._backdrop);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._backdrop, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, callback);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._backdrop, backdropTransitionDuration);
    } else if (!this._isShown && this._backdrop) {
      this._backdrop.classList.remove(CLASS_NAME_SHOW);

      const callbackRemove = () => {
        this._removeBackdrop();

        callback();
      };

      if (this._element.classList.contains(CLASS_NAME_FADE)) {
        const backdropTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._backdrop);
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._backdrop, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, callbackRemove);
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._backdrop, backdropTransitionDuration);
      } else {
        callbackRemove();
      }
    } else {
      callback();
    }
  }

  _triggerBackdropTransition() {
    if (this._config.backdrop === "static") {
      if (!this._dialog) {
        console.error("Dialog element not found!");
        return;
      }

      const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE_PREVENTED);

      if (hideEvent.defaultPrevented) {
        return;
      }

      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!isModalOverflowing) {
        this._element.style.overflowY = "hidden";
      }

      this._element.classList.add(CLASS_NAME_STATIC);

      const modalTransitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._dialog);

      const onTransitionEnd = () => {
        this._element.classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, () => {
            this._element.style.overflowY = "";
          });
          (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, modalTransitionDuration);
        }
      };

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.off)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, onTransitionEnd);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, onTransitionEnd);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, modalTransitionDuration);

      this._element.focus();
    } else {
      this.hide();
    }
  } // ----------------------------------------------------------------------
  // the following methods are used to handle overflowing modals
  // ----------------------------------------------------------------------


  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

    if (!this._isBodyOverflowing && isModalOverflowing) {
      this._element.style.paddingLeft = "".concat(this._scrollbarWidth, "px");
    }

    if (this._isBodyOverflowing && !isModalOverflowing) {
      this._element.style.paddingRight = "".concat(this._scrollbarWidth, "px");
    }
  }

  _resetAdjustments() {
    this._element.style.paddingLeft = "";
    this._element.style.paddingRight = "";
  }

  _checkScrollbar() {
    const rect = document.body.getBoundingClientRect();
    this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
    this._scrollbarWidth = this._getScrollbarWidth();
  }

  _setScrollbar() {
    if (this._isBodyOverflowing) {
      // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
      //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
      // Adjust fixed content padding
      _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_FIXED_CONTENT).forEach(element => {
        const actualPadding = element.style.paddingRight;
        const calculatedPadding = window.getComputedStyle(element)["padding-right"]; // Manipulator.setDataAttribute(element, "padding-right", actualPadding);

        element.dataset.paddingRight = actualPadding;
        element.style.paddingRight = "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px");
      }); // Adjust sticky content margin

      _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_STICKY_CONTENT).forEach(element => {
        const actualMargin = element.style.marginRight;
        const calculatedMargin = window.getComputedStyle(element)["margin-right"]; // Manipulator.setDataAttribute(element, "margin-right", actualMargin);

        element.dataset.marginRight = actualMargin;
        element.style.marginRight = "".concat(parseFloat(calculatedMargin) - this._scrollbarWidth, "px");
      }); // Adjust body padding

      const actualPadding = document.body.style.paddingRight;
      const calculatedPadding = window.getComputedStyle(document.body)["padding-right"]; // Manipulator.setDataAttribute(
      //   document.body,
      //   "padding-right",
      //   actualPadding
      // );

      document.body.dataset.paddingRight = actualPadding;
      document.body.style.paddingRight = "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px");
    }

    document.body.classList.add(CLASS_NAME_OPEN);
  }

  _resetScrollbar() {
    // Restore fixed content padding
    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find(SELECTOR_FIXED_CONTENT).forEach(element => {
      // const padding = Manipulator.getDataAttribute(element, "padding-right");
      const padding = element.dataset.paddingRight;

      if (typeof padding !== "undefined") {
        // Manipulator.removeDataAttribute(element, "padding-right");
        delete element.dataset.paddingRight;
        element.style.paddingRight = padding;
      }
    }); // Restore sticky content and navbar-toggler margin

    _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_5__.find("".concat(SELECTOR_STICKY_CONTENT)).forEach(element => {
      // const margin = Manipulator.getDataAttribute(element, "margin-right");
      const margin = element.dataset.marginRight;

      if (typeof margin !== "undefined") {
        // Manipulator.removeDataAttribute(element, "margin-right");
        delete element.dataset.marginRight;
        element.style.marginRight = margin;
      }
    }); // Restore body padding
    // const padding = Manipulator.getDataAttribute(
    //   document.body,
    //   "padding-right"
    // );

    const padding = document.body.dataset.paddingRight;

    if (typeof padding === "undefined") {
      document.body.style.paddingRight = "";
    } else {
      // Manipulator.removeDataAttribute(document.body, "padding-right");
      delete document.body.dataset.paddingRight;
      document.body.style.paddingRight = padding;
    }
  }

  _getScrollbarWidth() {
    // thx d.walsh
    const scrollDiv = document.createElement("div");
    scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
    document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.getData)(element, DATA_KEY);
  }

}
/* harmony default export */ __webpack_exports__["default"] = (ModalService);

/***/ }),

/***/ "../../packages/bs4/src/services/popover.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/services/popover.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopoverService": function() { return /* binding */ PopoverService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");
/* harmony import */ var _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tooltip.service.js */ "../../packages/bs4/src/services/tooltip.service.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/popover.js
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "popover";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.popover";
const EVENT_KEY = ".".concat(DATA_KEY);
const CLASS_PREFIX = "bs-popover";
const BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), "g");

const Default = _objectSpread(_objectSpread({}, _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService.Default), {}, {
  placement: "right",
  trigger: "click",
  content: "",
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
});

const DefaultType = _objectSpread(_objectSpread({}, _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService.DefaultType), {}, {
  content: "(string|element|function)"
});

const Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  INSERTED: "inserted".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  FOCUSIN: "focusin".concat(EVENT_KEY),
  FOCUSOUT: "focusout".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY)
};
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_SHOW = "show";
const SELECTOR_TITLE = ".popover-header";
const SELECTOR_CONTENT = ".popover-body";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class PopoverService extends _tooltip_service_js__WEBPACK_IMPORTED_MODULE_3__.TooltipService {
  // Export constants defined above as static members of the service class, to avoid name collisions in the global namespace.
  // Getters
  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  }

  static get NAME() {
    return NAME;
  }

  static get DATA_KEY() {
    return DATA_KEY;
  }

  static get Event() {
    return Event;
  }

  static get EVENT_KEY() {
    return EVENT_KEY;
  }

  static get DefaultType() {
    return DefaultType;
  } // Overrides


  constructor(element, config) {
    super(element, config);
    element.style.backgroundColor = "#ffff00";
  }

  isWithContent() {
    return Boolean(this.getTitle() || this._getContent());
  }

  setContent(content) {
    const tip = this.getTipElement(); // we use append for html objects to maintain js events

    this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__.findOne)(SELECTOR_TITLE, tip), this.getTitle());

    if (!content) {
      content = this._getContent();
    }

    if (typeof content === "function") {
      content = content(this.element);
    }

    if (content) {
      this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_2__.findOne)(SELECTOR_CONTENT, tip), content);
    }

    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW);
  } // Private


  _addAttachmentClass(attachment) {
    this.getTipElement().classList.add("".concat(CLASS_PREFIX, "-").concat(attachment));
  }

  _getContent() {
    return this.element.getAttribute("data-content") || this.config.content;
  }

  _cleanTipClass() {
    var _tip$getAttribute;

    const tip = this.getTipElement();
    const tabClass = tip === null || tip === void 0 ? void 0 : (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(BSCLS_PREFIX_REGEX);

    if (tabClass && tabClass.length > 0) {
      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
    }
  }

  _getPopperConfig(attachment) {
    const config = super._getPopperConfig(attachment);

    config.modifiers.arrow.element = ".".concat(PopoverService.NAME, "-arrow");
    return config;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_1__.getData)(element, DATA_KEY);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(PopoverService, "CONSTANTS", {
  NAME,
  VERSION,
  DATA_KEY,
  EVENT_KEY,
  CLASS_PREFIX,
  BSCLS_PREFIX_REGEX,
  Default,
  DefaultType,
  Event,
  CLASS_NAME_FADE,
  CLASS_NAME_SHOW,
  SELECTOR_TITLE,
  SELECTOR_CONTENT
});

/* harmony default export */ __webpack_exports__["default"] = (PopoverService);

/***/ }),

/***/ "../../packages/bs4/src/services/toast.service.ts":
/*!********************************************************!*\
  !*** ../../packages/bs4/src/services/toast.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_NAME_FADE": function() { return /* binding */ CLASS_NAME_FADE; },
/* harmony export */   "CLASS_NAME_HIDE": function() { return /* binding */ CLASS_NAME_HIDE; },
/* harmony export */   "CLASS_NAME_SHOW": function() { return /* binding */ CLASS_NAME_SHOW; },
/* harmony export */   "CLASS_NAME_SHOWING": function() { return /* binding */ CLASS_NAME_SHOWING; },
/* harmony export */   "Default": function() { return /* binding */ Default; },
/* harmony export */   "DefaultType": function() { return /* binding */ DefaultType; },
/* harmony export */   "EVENT_CLICK_DISMISS": function() { return /* binding */ EVENT_CLICK_DISMISS; },
/* harmony export */   "EVENT_HIDDEN": function() { return /* binding */ EVENT_HIDDEN; },
/* harmony export */   "EVENT_HIDE": function() { return /* binding */ EVENT_HIDE; },
/* harmony export */   "EVENT_SHOW": function() { return /* binding */ EVENT_SHOW; },
/* harmony export */   "EVENT_SHOWN": function() { return /* binding */ EVENT_SHOWN; },
/* harmony export */   "ToastService": function() { return /* binding */ ToastService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/toast.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = "toast";
const VERSION = "5.0.0-alpha1-riba";
const DATA_KEY = "bs.toast";
const EVENT_KEY = ".".concat(DATA_KEY);
const EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY);
const EVENT_HIDE = "hide".concat(EVENT_KEY);
const EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
const EVENT_SHOW = "show".concat(EVENT_KEY);
const EVENT_SHOWN = "shown".concat(EVENT_KEY);
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_HIDE = "hide";
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_SHOWING = "showing";
const DefaultType = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
};
const Default = {
  animation: true,
  autohide: true,
  delay: 2000
}; // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class ToastService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_config", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_timeout", null);

    this._element = element;
    this._config = this._getConfig(config);
    this._timeout = null;

    this._setListeners();

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.setData)(element, DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get DefaultType() {
    return DefaultType;
  }

  static get Default() {
    return Default;
  } // Public


  show() {
    const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOW);

    if (showEvent.defaultPrevented) {
      return;
    }

    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }

    const complete = () => {
      if (!this._element) {
        return;
      }

      this._element.classList.remove(CLASS_NAME_SHOWING);

      this._element.classList.add(CLASS_NAME_SHOW);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_SHOWN);

      if (this._config.autohide) {
        this._timeout = Number(setTimeout(() => {
          this.hide();
        }, this._config.delay));
      }
    };

    this._element.classList.remove(CLASS_NAME_HIDE);

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.reflow)(this._element);

    this._element.classList.add(CLASS_NAME_SHOWING);

    if (this._config.animation) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      complete();
    }
  }

  hide() {
    if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const complete = () => {
      if (!this._element) {
        return;
      }

      this._element.classList.add(CLASS_NAME_HIDE);

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.trigger)(this._element, EVENT_HIDDEN);
    };

    this._element.classList.remove(CLASS_NAME_SHOW);

    if (this._config.animation) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this._element);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.one)(this._element, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this._element, transitionDuration);
    } else {
      complete();
    }
  }

  dispose() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }

    this._timeout = null;

    if (this._element.classList.contains(CLASS_NAME_SHOW)) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    } // off(this._element, EVENT_CLICK_DISMISS);


    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.removeData)(this._element, DATA_KEY); // this._element = null;
    // this._config = null;
  } // Private


  _getConfig(config) {
    var _this$_element;

    config = _objectSpread(_objectSpread(_objectSpread({}, Default), ((_this$_element = this._element) === null || _this$_element === void 0 ? void 0 : _this$_element.dataset) || {}), typeof config === "object" && config ? config : {});
    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, ToastService.DefaultType);
    return config;
  }

  _setListeners() {
    if (!this._element) {
      return;
    }

    (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_4__.on)(this._element, EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
    () => {
      var _this$_element2;

      // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
      if (((_this$_element2 = this._element) === null || _this$_element2 === void 0 ? void 0 : _this$_element2.dataset.dismiss) === "toast") {
        this.hide();
      }
    });
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_3__.getData)(element, DATA_KEY);
  }

}
/* harmony default export */ __webpack_exports__["default"] = (ToastService);

/***/ }),

/***/ "../../packages/bs4/src/services/tooltip.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/bs4/src/services/tooltip.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipService": function() { return /* binding */ TooltipService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/bs4/src/constants/index.ts");
/* harmony import */ var _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/utils.js */ "../../packages/bs4/src/helper/utils.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper/sanitizer.js */ "../../packages/bs4/src/helper/sanitizer.ts");
/* harmony import */ var _helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helper/dom/data.js */ "../../packages/bs4/src/helper/dom/data.ts");
/* harmony import */ var _helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helper/dom/event-handler.js */ "../../packages/bs4/src/helper/dom/event-handler.ts");
/* harmony import */ var _helper_dom_manipulator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helper/dom/manipulator.js */ "../../packages/bs4/src/helper/dom/manipulator.ts");
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! popper.js */ "../../.yarn/cache/popper.js-npm-1.16.1-a99192bd83-c56ae5001e.zip/node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var _helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helper/dom/selector-engine.js */ "../../packages/bs4/src/helper/dom/selector-engine.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/tooltip.js
 * --------------------------------------------------------------------------
 */










/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const NAME = "tooltip";
const VERSION = "5.0.0-alpha1";
const DATA_KEY = "bs.tooltip";
const EVENT_KEY = ".".concat(DATA_KEY);
const CLASS_PREFIX = "bs-tooltip";
const BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), "g");
const DISALLOWED_ATTRIBUTES = ["sanitize", "allowList", "sanitizeFn"];
const DefaultType = {
  animation: "boolean",
  template: "string",
  title: "(string|element|function)",
  trigger: "string",
  delay: "(number|object)",
  html: "boolean",
  selector: "(string|boolean|undefined)",
  placement: "(string|function)",
  offset: "(number|string|function)",
  container: "(string|element|boolean|undefined)",
  fallbackPlacement: "(string|array)",
  boundary: "(string|element)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  allowList: "object",
  popperConfig: "(null|object)"
};
const AttachmentMap = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: "right",
  BOTTOM: "bottom",
  LEFT: "left"
};
const Default = {
  animation: true,
  container: undefined,
  delay: 0,
  html: false,
  placement: "top",
  selector: undefined,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow arrow"></div>' + '<div class="tooltip-inner"></div></div>',
  title: "",
  trigger: "hover focus",
  offset: 0,
  fallbackPlacement: "flip",
  boundary: "scrollParent",
  sanitize: true,
  sanitizeFn: null,
  allowList: _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ALLOWLIST,
  popperConfig: null
};
const Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  INSERTED: "inserted".concat(EVENT_KEY),
  CLICK: "click".concat(EVENT_KEY),
  FOCUSIN: "focusin".concat(EVENT_KEY),
  FOCUSOUT: "focusout".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY)
};
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_MODAL = "modal";
const CLASS_NAME_SHOW = "show";
const HOVER_STATE_SHOW = "show";
const HOVER_STATE_OUT = "out";
const SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
const TRIGGER_HOVER = "hover";
const TRIGGER_FOCUS = "focus";
const TRIGGER_CLICK = "click";
const TRIGGER_MANUAL = "manual";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class TooltipService {
  constructor(element, config) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_isEnabled", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_timeout", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_hoverState", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_activeTrigger", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_popper", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tip", null);

    if (typeof popper_js__WEBPACK_IMPORTED_MODULE_9__["default"] === "undefined") {
      throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org)");
    }

    this.element = element;
    this.config = this._getConfig(config);

    this._setListeners();

    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, TooltipService.DATA_KEY, this);
  } // Getters


  static get VERSION() {
    return VERSION;
  }

  static get Default() {
    return Default;
  }

  static get NAME() {
    return NAME;
  }

  static get DATA_KEY() {
    return DATA_KEY;
  }

  static get Event() {
    return Event;
  }

  static get EVENT_KEY() {
    return EVENT_KEY;
  }

  static get DefaultType() {
    return DefaultType;
  } // Public


  enable() {
    this._isEnabled = true;
  }

  disable() {
    this._isEnabled = false;
  }

  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }

  toggle(event) {
    if (!this._isEnabled) {
      return;
    }

    if (event) {
      const dataKey = TooltipService.DATA_KEY;
      const element = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      let context = (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, dataKey);

      if (!context) {
        context = new TooltipService(element, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(element, dataKey, context);
      }

      context._activeTrigger.click = !context._activeTrigger.click;

      if (context._isWithActiveTrigger()) {
        context._enter(null, context);
      } else {
        context._leave(null, context);
      }
    } else {
      if (this.getTipElement().classList.contains(CLASS_NAME_SHOW)) {
        this._leave(undefined, this);

        return;
      }

      this._enter(undefined, this);
    }
  }

  dispose() {
    clearTimeout(this._timeout);
    (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.removeData)(this.element, TooltipService.DATA_KEY); // off(this.element, TooltipService.EVENT_KEY);

    const modalElement = this.element.closest(".".concat(CLASS_NAME_MODAL));

    if (modalElement) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.off)(modalElement, "hide.bs.modal", this._hideModalHandler);
    }

    if (this.tip) {
      var _this$tip$parentNode;

      (_this$tip$parentNode = this.tip.parentNode) === null || _this$tip$parentNode === void 0 ? void 0 : _this$tip$parentNode.removeChild(this.tip);
    } // this._isEnabled = null;
    // this._timeout = null;
    // this._hoverState = null;
    // this._activeTrigger = null;


    if (this._popper) {
      this._popper.destroy();
    } // this._popper = null;
    // this.element = null;
    // this.config = null;
    // this.tip = null;

  }

  show() {
    if (this.element.style.display === "none") {
      throw new Error("Please use show on visible elements");
    }

    if (this.isWithContent() && this._isEnabled) {
      var _this$tip;

      const showEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.SHOW);
      const shadowRoot = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.findShadowRoot)(this.element);
      const isInTheDom = shadowRoot === null ? this.element.ownerDocument.documentElement.contains(this.element) : shadowRoot.contains(this.element);

      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }

      const tip = this.getTipElement();
      const tipId = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getUID)(TooltipService.NAME);
      tip.setAttribute("id", tipId);
      this.element.setAttribute("aria-describedby", tipId);
      this.setContent();

      if (this.config.animation) {
        tip.classList.add(CLASS_NAME_FADE);
      }

      const placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;

      const attachment = this._getAttachment(placement || undefined);

      this._addAttachmentClass(attachment);

      const container = this._getContainer();

      (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(tip, TooltipService.DATA_KEY, this);

      if (!this.element.ownerDocument.documentElement.contains(this.tip)) {
        container === null || container === void 0 ? void 0 : container.appendChild(tip);
      }

      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.INSERTED);
      this._popper = new popper_js__WEBPACK_IMPORTED_MODULE_9__["default"](this.element, tip, this._getPopperConfig(attachment));
      tip.classList.add(CLASS_NAME_SHOW); // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

      if ("ontouchstart" in document.documentElement) {
        Array.from(document.body.children).forEach(element => {
          (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(element, "mouseover", (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop)());
        });
      }

      const complete = () => {
        if (this.config.animation) {
          this._fixTransition();
        }

        const prevHoverState = this._hoverState;
        this._hoverState = "";
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.SHOWN);

        if (prevHoverState === HOVER_STATE_OUT) {
          this._leave(undefined, this);
        }
      };

      if ((_this$tip = this.tip) !== null && _this$tip !== void 0 && _this$tip.classList.contains(CLASS_NAME_FADE)) {
        const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(this.tip);
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.one)(this.tip, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
        (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(this.tip, transitionDuration);
      } else {
        complete();
      }
    }
  }

  hide() {
    var _this$tip2;

    const tip = this.getTipElement();

    const complete = () => {
      var _this$_popper;

      if (this._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
        tip.parentNode.removeChild(tip);
      }

      this._cleanTipClass();

      this.element.removeAttribute("aria-describedby");
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.HIDDEN);
      (_this$_popper = this._popper) === null || _this$_popper === void 0 ? void 0 : _this$_popper.destroy();
    };

    const hideEvent = (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.trigger)(this.element, (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.classOf)(this).Event.HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    tip.classList.remove(CLASS_NAME_SHOW); // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support

    if ("ontouchstart" in document.documentElement) {
      Array.from(document.body.children).forEach(element => (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.off)(element, "mouseover", _helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop));
    }

    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;

    if ((_this$tip2 = this.tip) !== null && _this$tip2 !== void 0 && _this$tip2.classList.contains(CLASS_NAME_FADE)) {
      const transitionDuration = (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTransitionDurationFromElement)(tip);
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.one)(tip, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.TRANSITION_END, complete);
      (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.emulateTransitionEnd)(tip, transitionDuration);
    } else {
      complete();
    }

    this._hoverState = "";
  }

  update() {
    if (this._popper !== null) {
      this._popper.scheduleUpdate();
    }
  } // Protected


  isWithContent() {
    return Boolean(this.getTitle());
  }

  getTipElement() {
    if (this.tip) {
      return this.tip;
    }

    const element = document.createElement("div");
    element.innerHTML = this.config.template;
    this.tip = element.children[0];

    if (!this.tip) {
      throw new Error("Tooltip not found!");
    }

    return this.tip;
  }

  setContent() {
    const tip = this.getTipElement();
    this.setElementContent((0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__.findOne)(SELECTOR_TOOLTIP_INNER, tip), this.getTitle());
    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW);
  }

  setElementContent(element, content) {
    if (element === null) {
      return;
    }

    if (typeof content === "object" && content !== null && (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(content)) {
      if (content.jquery) {
        content = content[0];
      }

      content = content; // content is a DOM node or a jQuery

      if (this.config.html) {
        if (content.parentNode !== element) {
          element.innerHTML = "";
          element.appendChild(content);
        }
      } else {
        element.textContent = content.textContent;
      }

      return;
    }

    content = content;

    if (this.config.html && this.config.sanitize) {
      content = (0,_helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeHtml)(content, this.config.allowList, this.config.sanitizeFn || undefined);
    }

    element.innerHTML = content;
  }

  getTitle() {
    let title = this.element.getAttribute("data-original-title");

    if (!title) {
      title = typeof this.config.title === "function" ? this.config.title(this.element) : this.config.title;
    }

    return title;
  } // Private


  _getPopperConfig(attachment) {
    const defaultBsConfig = {
      placement: attachment,
      modifiers: {
        offset: this._getOffset(),
        flip: {
          behavior: this.config.fallbackPlacement
        },
        arrow: {
          element: ".".concat(TooltipService.NAME, "-arrow")
        },
        preventOverflow: {
          boundariesElement: this.config.boundary
        }
      },
      onCreate: data => {
        if (data.originalPlacement !== data.placement) {
          this._handlePopperPlacementChange(data);
        }
      },
      onUpdate: data => this._handlePopperPlacementChange(data)
    };
    return _objectSpread(_objectSpread({}, defaultBsConfig), this.config.popperConfig);
  }

  _addAttachmentClass(attachment) {
    this.getTipElement().classList.add("".concat(CLASS_PREFIX, "-").concat(attachment));
  }

  _getOffset() {
    const offset = {};

    if (this.config.offset && typeof this.config.offset === "function") {
      offset.fn = data => {
        data.offsets = _objectSpread(_objectSpread({}, data.offsets), this.config.offset(data.offsets, this.element) || {});
        return data;
      };
    } else {
      offset.offset = this.config.offset;
    }

    return offset;
  }

  _getContainer() {
    if (!this.config.container) {
      return document.body;
    }

    if ((0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(this.config.container)) {
      return this.config.container;
    }

    if (typeof this.config.container === "string") {
      return (0,_helper_dom_selector_engine_js__WEBPACK_IMPORTED_MODULE_8__.findOne)(this.config.container);
    }

    return null;
  }

  _getAttachment() {
    let placement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "AUTO";
    return AttachmentMap[placement.toUpperCase() || "BOTTOM" || 0];
  }

  _setListeners() {
    const triggers = this.config.trigger.split(" ");
    /*
      TODO: TooltipService.Event.[...] constants replaced here with standard events.
      How are the TooltipService.Events made to work as event names in Bootstrap, and should we use the same way?
    */

    triggers.forEach(trigger => {
      if (trigger === "click") {
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, "click", // TooltipService.Event.CLICK,
        // this.config.selector,
        event => this.toggle(event));
      } else if (trigger !== TRIGGER_MANUAL) {
        const eventIn = trigger === TRIGGER_HOVER ? "mouseover" // TooltipService.Event.MOUSEENTER
        : "focus"; // TooltipService.Event.FOCUSIN;

        const eventOut = trigger === TRIGGER_HOVER ? "mouseout" // TooltipService.Event.MOUSELEAVE
        : "blur"; // TooltipService.Event.FOCUSOUT;

        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, eventIn
        /*, this.config.selector*/
        , event => this._enter(event));
        (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(this.element, eventOut
        /*, this.config.selector*/
        , event => this._leave(event));
      }
    }); // this._hideModalHandler = () => {
    //   if (this.element) {
    //     this.hide();
    //   }
    // };

    const closestModalEl = this.element.closest(".".concat(CLASS_NAME_MODAL));

    if (closestModalEl) {
      (0,_helper_dom_event_handler_js__WEBPACK_IMPORTED_MODULE_6__.on)(closestModalEl, "hide.bs.modal", this._hideModalHandler);
    }

    if (this.config.selector) {
      this.config = _objectSpread(_objectSpread({}, this.config), {}, {
        trigger: "manual",
        selector: ""
      });
    } else {
      this._fixTitle();
    }
  }

  _hideModalHandler() {
    if (this.element) {
      this.hide();
    }
  }

  _fixTitle() {
    const titleType = typeof this.element.getAttribute("data-original-title");

    if (this.element.getAttribute("title") || titleType !== "string") {
      this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
      this.element.setAttribute("title", "");
    }
  }

  _enter(event, context) {
    const dataKey = TooltipService.DATA_KEY;

    if (event) {
      const el = event.delegateTarget || (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      context = context || (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(el, dataKey);

      if (!context) {
        context = new TooltipService(el, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(el, dataKey, context);
      }

      context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
    }

    if (context.getTipElement().classList.contains(CLASS_NAME_SHOW) || context._hoverState === HOVER_STATE_SHOW) {
      context._hoverState = HOVER_STATE_SHOW;
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_SHOW;

    if (!context.config.delay || !context.config.delay.show) {
      context.show();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_SHOW) {
        context.show();
      }
    }, context.config.delay.show);
  }

  _leave(event, context) {
    const dataKey = TooltipService.DATA_KEY;

    if (event) {
      const el = event.delegateTarget || (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.getElementFromEvent)(event);
      context = context || (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(el, dataKey);

      if (!context) {
        context = new TooltipService(el, this._getDelegateConfig());
        (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.setData)(el, dataKey, context);
      }
    }

    if (event) {
      context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
    }

    if (context._isWithActiveTrigger()) {
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_OUT;

    if (!context.config.delay || !context.config.delay.hide) {
      context.hide();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_OUT) {
        context.hide();
      }
    }, context.config.delay.hide);
  }

  _isWithActiveTrigger() {
    for (const trigger in this._activeTrigger) {
      if (this._activeTrigger[trigger]) {
        return true;
      }
    }

    return false;
  }

  _getConfig(config) {
    const dataAttributes = _helper_dom_manipulator_js__WEBPACK_IMPORTED_MODULE_7__.getDataAttributes(this.element);
    Object.keys(dataAttributes).forEach(dataAttr => {
      if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
        delete dataAttributes[dataAttr];
      }
    });

    if (config && typeof config.container === "object" && config.container.jquery // TODO?
    ) {
      config.container = config.container[0]; // TODO?
    }

    config = _objectSpread(_objectSpread(_objectSpread({}, TooltipService.Default), dataAttributes), typeof config === "object" && config ? config : {});

    if (typeof config.delay === "number") {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }

    if (config.title && typeof config.title === "number") {
      config.title = config.title.toString();
    }

    if (config.content && typeof config.content === "number") {
      config.content = config.content.toString();
    }

    (0,_helper_utils_js__WEBPACK_IMPORTED_MODULE_2__.typeCheckConfig)(NAME, config, TooltipService.DefaultType);

    if (config.sanitize) {
      config.template = (0,_helper_sanitizer_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeHtml)(config.template, config.allowList, config.sanitizeFn || undefined) || "";
    }

    return config;
  }

  _getDelegateConfig() {
    const config = {};

    if (this.config) {
      for (const key in this.config) {
        // TODO fix types
        if (this.config[key] !== TooltipService.Default[key]) {
          config[key] = this.config[key]; // TODO fix types
        }
      }
    }

    return config;
  }

  _cleanTipClass() {
    var _tip$getAttribute;

    const tip = this.getTipElement();
    const tabClass = (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(BSCLS_PREFIX_REGEX);

    if (tabClass && tabClass.length > 0) {
      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
    }
  }

  _handlePopperPlacementChange(popperData) {
    this.tip = popperData.instance.popper;

    this._cleanTipClass();

    this._addAttachmentClass(this._getAttachment(popperData.placement));
  }

  _fixTransition() {
    const tip = this.getTipElement();
    const initConfigAnimation = this.config.animation;

    if (tip.getAttribute("x-placement") !== null) {
      return;
    }

    tip.classList.remove(CLASS_NAME_FADE);
    this.config.animation = false;
    this.hide();
    this.show();
    this.config.animation = initConfigAnimation;
  } // Static


  static getInstance(element) {
    return (0,_helper_dom_data_js__WEBPACK_IMPORTED_MODULE_5__.getData)(element, DATA_KEY);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TooltipService, "CONSTANTS", {
  NAME,
  VERSION,
  DATA_KEY,
  EVENT_KEY,
  CLASS_PREFIX,
  BSCLS_PREFIX_REGEX,
  DISALLOWED_ATTRIBUTES,
  DefaultType,
  AttachmentMap,
  Default,
  Event,
  CLASS_NAME_FADE,
  CLASS_NAME_MODAL,
  CLASS_NAME_SHOW,
  HOVER_STATE_SHOW,
  HOVER_STATE_OUT,
  SELECTOR_TOOLTIP_INNER,
  TRIGGER_HOVER,
  TRIGGER_FOCUS,
  TRIGGER_CLICK,
  TRIGGER_MANUAL
});

/* harmony default export */ __webpack_exports__["default"] = (TooltipService);

/***/ }),

/***/ "../../packages/cache/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/cache/src/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCache; },
/* harmony export */   "createCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.createCache; },
/* harmony export */   "idbCache": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.idbCache; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/cache/src/services/index.ts");


/***/ }),

/***/ "../../packages/cache/src/services/base-cache.service.ts":
/*!***************************************************************!*\
  !*** ../../packages/cache/src/services/base-cache.service.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* binding */ BaseCache; }
/* harmony export */ });
/**
 * BaseCache it's a simple static cache
 */
class BaseCache {
  /**
   * The Object that keeps all the key value information
   */
  constructor() {
    this.data = {};
  }
  /**
   * Set a key and value data, mainly Barba is going to save promises
   *
   */


  set(key, val) {
    this.data[key] = val;
    return this.data[key];
  }
  /**
   * Retrieve the data using the key
   */


  get(key) {
    return this.data[key];
  }
  /**
   * Flush the cache
   */


  reset() {
    this.data = {};
  }

}



/***/ }),

/***/ "../../packages/cache/src/services/idb-cache.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/cache/src/services/idb-cache.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "idbCache": function() { return /* binding */ idbCache; }
/* harmony export */ });
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! keshi */ "../../.yarn/cache/keshi-npm-2.0.7-6176689b72-04800290a8.zip/node_modules/keshi/src/index.js");
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(keshi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ "../../.yarn/cache/idb-keyval-npm-6.1.0-ef1e338e42-431a746773.zip/node_modules/idb-keyval/dist/index.js");


const idbStorage = {
  get: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get,
  set: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set,
  keys: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys,
  del: idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del,
  clear: () => {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)();
  }
};
const idbCache = keshi__WEBPACK_IMPORTED_MODULE_0___default()({
  // Use default memory storage on ssr
  customStorage: window.ssr ? undefined : idbStorage
});


/***/ }),

/***/ "../../packages/cache/src/services/index.ts":
/*!**************************************************!*\
  !*** ../../packages/cache/src/services/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCache": function() { return /* reexport safe */ _base_cache_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseCache; },
/* harmony export */   "createCache": function() { return /* reexport default from dynamic */ keshi__WEBPACK_IMPORTED_MODULE_0___default.a; },
/* harmony export */   "idbCache": function() { return /* reexport safe */ _idb_cache_service_js__WEBPACK_IMPORTED_MODULE_2__.idbCache; }
/* harmony export */ });
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! keshi */ "../../.yarn/cache/keshi-npm-2.0.7-6176689b72-04800290a8.zip/node_modules/keshi/src/index.js");
/* harmony import */ var keshi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(keshi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _base_cache_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-cache.service.js */ "../../packages/cache/src/services/base-cache.service.ts");
/* harmony import */ var _idb_cache_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idb-cache.service.js */ "../../packages/cache/src/services/idb-cache.service.ts");





/***/ }),

/***/ "../../packages/core/src/adapters/dot.adapter.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/adapters/dot.adapter.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DotAdapter": function() { return /* binding */ DotAdapter; },
/* harmony export */   "dotAdapter": function() { return /* binding */ dotAdapter; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class DotAdapter {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "name", ".");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "counter", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "weakmap", {});
  }

  weakReference(obj) {
    if (!Object.hasOwnProperty.bind(obj)("__rv")) {
      const id = this.counter++;
      Object.defineProperty(obj, "__rv", {
        value: id
      });
    }

    if (!this.weakmap[obj.__rv]) {
      this.weakmap[obj.__rv] = {
        callbacks: {}
      };
    }

    return this.weakmap[obj.__rv];
  }

  cleanupWeakReference(ref, id) {
    if (!Object.keys(ref.callbacks).length) {
      if (!(ref.pointers && Object.keys(ref.pointers).length)) {
        delete this.weakmap[id];
      }
    }
  }

  stubFunction(obj, fn) {
    const original = obj[fn];
    const map = this.weakReference(obj);
    const weakmap = this.weakmap;

    obj[fn] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      const response = original.apply(obj, args);
      Object.keys(map.pointers).forEach(r => {
        const k = map.pointers[r];

        if (weakmap[r]) {
          if (Array.isArray(weakmap[r].callbacks[k])) {
            weakmap[r].callbacks[k].forEach(callback => {
              callback.sync();
            });
          }
        }
      });
      return response;
    };
  }

  observeMutations(obj, ref, keypath) {
    if (Array.isArray(obj)) {
      const map = this.weakReference(obj);

      if (!map.pointers) {
        map.pointers = {};
        DotAdapter.ARRAY_METHODS.forEach(fn => {
          this.stubFunction(obj, fn);
        });
      }

      if (!map.pointers[ref]) {
        map.pointers[ref] = [];
      }

      if (map.pointers[ref].indexOf(keypath) === -1) {
        map.pointers[ref].push(keypath);
      }
    }
  }

  unobserveMutations(obj, ref, keypath) {
    if (Array.isArray(obj) && obj.__rv != null) {
      const map = this.weakmap[obj.__rv];

      if (map) {
        const pointers = map.pointers[ref];

        if (pointers) {
          const idx = pointers.indexOf(keypath);

          if (idx > -1) {
            pointers.splice(idx, 1);
          }

          if (!pointers.length) {
            delete map.pointers[ref];
          }

          this.cleanupWeakReference(map, obj.__rv);
        }
      }
    }
  }

  observe(obj, keypath, callback) {
    let value;
    const callbacks = this.weakReference(obj).callbacks;

    if (!callbacks[keypath]) {
      callbacks[keypath] = [];
      const desc = Object.getOwnPropertyDescriptor(obj, keypath);

      if (!desc || !(desc.get || desc.set || !desc.configurable)) {
        value = obj[keypath];
        Object.defineProperty(obj, keypath, {
          enumerable: true,
          get: () => {
            return value;
          },
          set: newValue => {
            if (newValue !== value) {
              this.unobserveMutations(value, obj.__rv, keypath);
              value = newValue;
              const map = this.weakmap[obj.__rv];

              if (map) {
                const _callbacks = map.callbacks[keypath];

                if (_callbacks) {
                  _callbacks.forEach(cb => {
                    cb.sync();
                  });
                }

                this.observeMutations(newValue, obj.__rv, keypath);
              }
            }
          }
        });
      }
    }

    if (callbacks[keypath].indexOf(callback) === -1) {
      callbacks[keypath].push(callback);
    }

    this.observeMutations(obj[keypath], obj.__rv, keypath);
  }

  unobserve(obj, keypath, callback) {
    const map = this.weakmap[obj.__rv];

    if (map) {
      const callbacks = map.callbacks[keypath];

      if (callbacks) {
        const idx = callbacks.indexOf(callback);

        if (idx > -1) {
          callbacks.splice(idx, 1);

          if (!callbacks.length) {
            delete map.callbacks[keypath];
            this.unobserveMutations(obj[keypath], obj.__rv, keypath);
          }
        }

        this.cleanupWeakReference(map, obj.__rv);
      }
    }
  }

  get(obj, keypath) {
    return obj[keypath];
  }

  set(obj, keypath, value) {
    obj[keypath] = value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DotAdapter, "ARRAY_METHODS", ["push", "pop", "shift", "unshift", "sort", "reverse", "splice"]);

const dotAdapter = new DotAdapter();


/***/ }),

/***/ "../../packages/core/src/adapters/index.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/adapters/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotAdapter": function() { return /* reexport safe */ _dot_adapter_js__WEBPACK_IMPORTED_MODULE_0__.dotAdapter; }
/* harmony export */ });
/* harmony import */ var _dot_adapter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot.adapter.js */ "../../packages/core/src/adapters/dot.adapter.ts");


/***/ }),

/***/ "../../packages/core/src/binder.ts":
/*!*****************************************!*\
  !*** ../../packages/core/src/binder.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Binder": function() { return /* binding */ Binder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants/formatter.js */ "../../packages/core/src/constants/formatter.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");





/**
 * A single binding between a model attribute and a DOM element.
 */

class Binder {
  /**
   * The name of the binder to access the binder by
   */

  /**
   * Blocks the current node and child nodes from being parsed (used for iteration binding as well as the if/unless binders).
   */

  /**
   * Set this to true if you want view.publish() to call publish on these bindings.
   */

  /**
   * Priority of the binder, binders with higher priority are applied first
   */

  /**
   * The routine function is called when an observed attribute on the model changes and is used to update the DOM. When defining a one-way binder as a single function, it is actually the routine function that you're defining.
   */

  /**
   * This function will get called for this binding on the initial `view.bind()`. Use it to store some initial state on the binding, or to set up any event listeners on the element.
   */

  /**
   * This function will get called for this binding on `view.unbind()`. Use it to reset any state on the element that would have been changed from the routine getting called, or to unbind any event listeners on the element that you've set up in the `binder.bind` function.
   */

  /**
   * Updates the binding's model from what is currently set on the view.
   * Unbinds the old model first and then re-binds with the new model.
   */

  /**
   * The getValue function is called when the binder wants to set the value on the model. This function takes the HTML element as only parameter
   */

  /**
   * All information about the binding is passed into the constructor; the
   * containing view, the DOM node, the type of binding, the model object and the
   * keypath at which to listen for changes.
   * @param {*} view
   * @param {*} el
   * @param {*} type
   * @param {*} keypath
   * @param {*} binder
   * @param {*} args The start binders, on `class-*` args[0] wil be the classname.
   * @param {*} formatters
   */
  constructor(view, el, type, name, keypath, formatters, identifier) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formatterObservers", {});

    this.view = view;
    this.el = el;
    this.type = type;
    this.name = name;
    this.keypath = keypath;
    this.formatters = formatters;
    this.model = undefined;

    if (identifier && type) {
      this.args = this.getStarArguments(identifier, type);
    } else {
      this.args = new Array();
    }
  }
  /**
   * Observes the object keypath
   * @param obj
   * @param keypath
   */


  observe(obj, keypath, callback) {
    return new _observer_js__WEBPACK_IMPORTED_MODULE_2__.Observer(obj, keypath, callback);
  }

  parseTarget() {
    if (this.keypath) {
      const token = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.parseType)(this.keypath, true);

      if (token.type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.PRIMITIVE) {
        this.value = token.value;
      } else if (token.type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.KEYPATH) {
        this.observer = this.observe(this.view.models, this.keypath, this);
        this.model = this.observer.target;
      } else {
        throw new Error("[".concat(this.name, "] Unknown type in token"));
      }
    } else {
      this.value = undefined;
    }
  }
  /**
   * Get the iteration alias, used in the interaction binders like `each-*`
   * @param {*} modelName
   * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L26
   * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L1175
   */


  getIterationAlias(modelName) {
    return "%" + modelName + "%";
  }

  parseFormatterArguments(args, formatterIndex) {
    return args.map(arg => (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.parseType)(arg, true)).map((_ref, ai) => {
      let {
        type,
        value
      } = _ref;

      if (type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.PRIMITIVE) {
        const primitiveValue = value;
        return primitiveValue;
      } else if (type === _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.KEYPATH) {
        // keypath is string
        const keypath = value;

        if (!this.formatterObservers[formatterIndex]) {
          this.formatterObservers[formatterIndex] = {};
        }

        let observer = this.formatterObservers[formatterIndex][ai];

        if (!observer) {
          observer = this.observe(this.view.models, keypath, this);
          this.formatterObservers[formatterIndex][ai] = observer;
        }

        return observer.value();
      } else {
        throw new Error("[".concat(this.name, "] Unknown argument type"));
      }
    });
  }
  /**
   * Applies all the current formatters to the supplied value and returns the
   * formatted value.
   */


  formattedValue(value) {
    let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (this.formatters === null) {
      throw new Error("[".concat(this.name, " formatters is null"));
    } // If any intermediate result is a promise continue the chain (with startIndex set) after it is resolved.


    let promised = false;
    const formatters = startIndex ? this.formatters.slice(startIndex) : this.formatters;
    return formatters.reduce((result, declaration, index) => {
      if (promised) {
        return result;
      }

      const args = declaration.match(_constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__.FORMATTER_ARGS);

      if (args === null) {
        console.warn(new Error("[".concat(this.name, "] No args matched with regex \"FORMATTER_ARGS\"!\nvalue: ").concat(JSON.stringify(value), "\nresult: ").concat(JSON.stringify(result), "\ndeclaration: ").concat(JSON.stringify(declaration), "\nindex: ").concat(index, "\n")));
        return result;
      }

      const id = args.shift();

      if (!id) {
        throw new Error("[".concat(this.name, "] No formatter id found in args!"));
      }

      if (!this.view.options.formatters) {
        throw new Error("[".concat(this.name, "] No formatters are defined!"));
      }

      const formatter = this.view.options.formatters[id];

      if (!formatter) {
        throw new Error("[".concat(this.name, "] No formatters with id \"").concat(id, "\" found!"));
      }

      const processedArgs = this.parseFormatterArguments(args, index); // get formatter read funcion

      if (formatter && typeof formatter.read === "function") {
        result = formatter.read.apply(this.model, [result, ...processedArgs]);
      } // If result is a promise, and this is not the last formatter in the chain


      if (index < formatters.length - 1 && result && typeof result.then === "function" && typeof result.catch === "function") {
        promised = true;
        return result.then(value => this.formattedValue(value, index + 1));
      }

      return result;
    }, value);
  }
  /**
   * Returns an event handler for the binding around the supplied function.
   * This event Handler is mainly used by the on-* binder
   * @param fn The function to call by the handler
   * @param el The element the event was triggered from
   */


  eventHandler(fn, el) {
    const handler = this.view.options.handler;
    return ev => {
      if (!handler) {
        throw new Error("No handler defined in binding.view.options.handler");
      }

      handler.call(fn, this, ev, this, el);
    };
  }
  /**
   * Sets the value for the binding. This Basically just runs the binding routine
   * with the supplied value formatted.
   */


  set(value) {
    try {
      value = this.formattedValue(value);
    } catch (error) {
      console.error(error);
      return value;
    }

    if (typeof this.routine === "function") {
      // If value is a promise
      if (value && typeof value.then === "function" && typeof value.catch === "function") {
        value.then(realValue => {
          this.routine(this.el, realValue);
        }).catch(error => {
          console.error(error);
        });
      } else {
        this.routine(this.el, value);
      }
    }
  }
  /**
   * Syncs up the view binding with the model.
   */


  sync() {
    if (this.observer) {
      this.model = this.observer.target;
      this.set(this.observer.value());
    } else {
      this.set(this.value);
    }
  }
  /**
   * Publishes the value currently set on the input element (or any other which implements getValue) back to the model.
   * An example of the use of this method are the following binders:
   * - ElementBinder
   * - ValueBinder
   * - (Un)CheckedBinder
   */


  publish() {
    if (this.observer) {
      if (this.formatters === null) {
        throw new Error("formatters is null");
      }

      const value = this.formatters.reduceRight((result, declaration, index) => {
        const args = declaration.split(_constants_formatter_js__WEBPACK_IMPORTED_MODULE_3__.FORMATTER_SPLIT);
        const id = args.shift();

        if (!id) {
          throw new Error("id not defined");
        }

        if (!this.view.options.formatters) {
          return undefined;
        }

        const formatter = this.view.options.formatters[id];
        const processedArgs = this.parseFormatterArguments(args, index);

        if (formatter && typeof formatter.publish === "function") {
          result = formatter.publish(result, ...processedArgs);
        }

        return result;
      }, this._getValue(this.el));
      this.observer.setValue(value);
    }
  }
  /**
   * Subscribes to the model for changes at the specified keypath. Bi-directional
   * routines will also listen for changes on the element to propagate them back
   * to the model.
   */


  _bind() {
    this.parseTarget();

    if (this.bind) {
      if (typeof this.bind !== "function") {
        throw new Error("the method bind is not a function");
      }

      this.bind(this.el);
    }

    if (this.view.options.preloadData) {
      this.sync();
    }
  }
  /**
   * Unsubscribes from the model and the element.
   */


  _unbind() {
    if (this.unbind) {
      this.unbind(this.el);
    }

    if (this.observer) {
      this.observer.unobserve();
    }

    Object.keys(this.formatterObservers).forEach(fi => {
      const args = this.formatterObservers[fi];
      Object.keys(args).forEach(ai => {
        args[ai].unobserve();
      });
    });
    this.formatterObservers = {};
  }
  /**
   * Updates the binding's model from what is currently set on the view. Unbinds
   * the old model first and then re-binds with the new model.
   * @param {any} models
   */


  _update() {
    let models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.observer) {
      this.model = this.observer.target;
    }

    if (typeof this.update === "function") {
      this.update(models);
    }
  }
  /**
   * Returns elements value
   * @param el
   */


  _getValue(el) {
    if (typeof this.getValue === "function") {
      return this.getValue(el);
    } else {
      return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_4__.getInputValue)(el);
    }
  }

  getStarArguments(identifier, type) {
    var _type$match;

    const regexp = this.view.binderRegex(identifier);
    const match = ((_type$match = type.match(regexp)) === null || _type$match === void 0 ? void 0 : _type$match.slice(1)) || [];
    return match;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Binder, "key", "");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Binder, "block", false);

/***/ }),

/***/ "../../packages/core/src/binders/add-class.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/add-class.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddClassBinder": function() { return /* binding */ AddClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * add-class
 * Adds the value of the attribute to the class.
 * Instead of `class-[classname]` the classname is defined by the
 * attribute value and not by the star value.
 * @example
 * <ul>
 *   <li rv-each-todo="todos">
 *     <div rv-add-class="todo.state"></div>
 *   </li>
 * <ul>
 */

class AddClassBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  bind(el) {
    // Note: We use el.getAttribute("class") instead of el.className here to also support svg elements
    const className = el.getAttribute("class") || "";
    this.staticClasses = className.split(" ");
  }

  unbind() {
    delete this.staticClasses;
  }

  routine(el, newValue) {
    if (newValue) {
      var _this$staticClasses;

      if (((_this$staticClasses = this.staticClasses) === null || _this$staticClasses === void 0 ? void 0 : _this$staticClasses.indexOf(newValue)) === -1) {
        el.setAttribute("class", this.staticClasses.join(" ") + " " + newValue);
      }
    } else {
      if (this.staticClasses) {
        el.setAttribute("class", this.staticClasses.join(" "));
      }
    }

    const className = el.getAttribute("class");

    if (className) {
      el.setAttribute("class", className.trim());
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AddClassBinder, "key", "add-class");

/***/ }),

/***/ "../../packages/core/src/binders/animate-classname.binder.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/binders/animate-classname.binder.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimateStarBinder": function() { return /* binding */ AnimateStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * animate-{class}
 * Add / remove animation class with start and done affix
 */

class AnimateStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  bind(el) {
    const animateClassName = this.args[0];
    el.classList.add(animateClassName);
  }

  routine(el, start) {
    const animateClassName = this.args[0];

    if (start) {
      el.classList.add(animateClassName + "-start");
      el.classList.remove(animateClassName + "-done");
    } else {
      el.classList.remove(animateClassName + "-start");
      el.classList.add(animateClassName + "-done");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AnimateStarBinder, "key", "animate-*");

/***/ }),

/***/ "../../packages/core/src/binders/assign-property.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/binders/assign-property.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssignPropertyBinder": function() { return /* binding */ AssignPropertyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * assign-*
 * Assign a value in your model.
 * Sets or overwrites a value by his property name (named whatever value is in place of [property]) in your model.
 * @example
 * <div rv-assign-new='"hello"'>{new}</div>
 */

class AssignPropertyBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const propertyName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(this.args[0].trim());
    const obj = {};
    obj[propertyName] = value;
    this.view.models[propertyName] = value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AssignPropertyBinder, "key", "assign-*");

/***/ }),

/***/ "../../packages/core/src/binders/assign.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/assign.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssignBinder": function() { return /* binding */ AssignBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * assign
 * Assign a value in your model.
 * The value you want to assign must be an object and will be concatenate with your model.
 * @example
 * <div rv-assign='{"newValue": "hello", "anotherNewValue": "world"}'>{newValue} {anotherNewValue}!</div>
 */

class AssignBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value === "object") {
      return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
        deep: false
      }, this.view.models, value);
    }

    console.warn("Value must be an object or propertyName is required");
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AssignBinder, "key", "assign");

/***/ }),

/***/ "../../packages/core/src/binders/attribute.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/attribute.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeBinder": function() { return /* binding */ AttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * Sets the attribute on the element. If no binder above is matched it will fall
 * back to using this binder.
 */

class AttributeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, newValue) {
    if (!this.type) {
      throw new Error("Can't set attribute of " + this.type);
    }

    const {
      newValue: newValueFormatted,
      oldValue,
      changed
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.setAttribute)(el, this.type, newValue);

    if (changed) {
      el.dispatchEvent(new CustomEvent("binder-changed", {
        detail: {
          name: this.type,
          newValue: newValueFormatted,
          oldValue
        }
      }));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AttributeBinder, "key", "attr-*");

/***/ }),

/***/ "../../packages/core/src/binders/block.binder.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/binders/block.binder.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlockBinder": function() { return /* binding */ BlockBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * block
 * Blocks the binding for the current element and his childs.
 * @note Please note that `<script></script>`, `<style type="text/css"></style>`, `<template></template>` and `<code></code>` tags are blocked by default.
 * You can change this by setting the `blockNodeNames` option.
 * @example
 * <div rv-block="">
 *  <!-- After binding you should see `{ value }` because the binding is blocked here -->
 *  { value }
 * </div>
 */

class BlockBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine() {
    /**/
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BlockBinder, "key", "block");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(BlockBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/checked.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/checked.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CheckedBinder": function() { return /* binding */ CheckedBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




/**
 * checked
 * Checks a checkbox or radio input when the value is true. Also sets the model
 * property when the input is checked or unchecked (two-way binder).
 */

class CheckedBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 2000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  bind(el) {
    el.addEventListener("change", this.onChange);
  }

  unbind(el) {
    el.removeEventListener("change", this.onChange);
  }

  routine(el, newValue) {
    let oldValue;

    if (!this._getValue) {
      console.warn("this._getValue is not a function, this: ", this);
      oldValue = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
    } else {
      oldValue = this._getValue(el);
    }

    if (el.type === "radio") {
      el.checked = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(oldValue) === (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(newValue);
    } else {
      if (oldValue !== newValue) {
        el.checked = !!newValue;
      }
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CheckedBinder, "key", "checked");

/***/ }),

/***/ "../../packages/core/src/binders/class-name.binder.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/binders/class-name.binder.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClassStarBinder": function() { return /* binding */ ClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * class-*
 * class-[classname]
 *
 * Adds a class (whatever value is in place of [classname]) on the element
 * when the value evaluates to true and removes that class if the value
 * evaluates to false.
 * @example
 * <li rv-class-completed="todo.done">{ todo.name }</li>
 */

class ClassStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    } // Note: We use el.getAttribute("class") instead of el.className here to also support svg elements


    const className = el.getAttribute("class") || "";
    const classList = className.split(" ").filter(ele => ele !== "");
    const arg = this.args[0].trim();
    const idx = classList.indexOf(arg);

    if (idx === -1) {
      if (value) {
        el.setAttribute("class", "".concat(className, " ").concat(arg));
      }
    } else if (!value) {
      el.setAttribute("class", classList.filter((_, i) => i !== idx).join(" "));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ClassStarBinder, "key", "class-*");

/***/ }),

/***/ "../../packages/core/src/binders/co-attribute.binder.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/binders/co-attribute.binder.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentAttributeBinder": function() { return /* binding */ ComponentAttributeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



const NO_RIBA_COMPONENT_ERROR_MESSAGE = '[componentAttributeBinder] You can only use the "rv-co-*" binder on Riba components, but "{tagName}" is not registered.';
/**
 * co-*
 * Pass a riba model / scope value to your component without first converting it as an attribute
 */

class ComponentAttributeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);
  }

  __routine(el, value) {
    const attrName = this.args[0].trim();

    if (el.setBinderAttribute) {
      el.setBinderAttribute(attrName, value);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  async routine(el, value) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.__routine(el, value);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);

      this.__routine(el, value);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  __bind(el) {
    this.attributeName = this.args[0].toString().trim();

    if (typeof el.observeAttribute !== "function") {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
      return;
    }

    this.componentAttributeObserver = el.observeAttribute(this.attributeName, {
      sync: () => {
        this.publish();
      }
    });
  }

  async bind(el) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.__bind(el);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);

      this.__bind(el);
    } else {
      console.warn(NO_RIBA_COMPONENT_ERROR_MESSAGE.replace("{tagName}", el.tagName), el);
    }
  }

  unbind() {
    var _this$componentAttrib;

    (_this$componentAttrib = this.componentAttributeObserver) === null || _this$componentAttrib === void 0 ? void 0 : _this$componentAttrib.unobserve();
  }

  getValue(el) {
    const attrName = this.args[0].trim();
    const val = el.getBinderAttribute(attrName);
    return val;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ComponentAttributeBinder, "key", "co-*");

/***/ }),

/***/ "../../packages/core/src/binders/disabled.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/disabled.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DisabledBinder": function() { return /* binding */ DisabledBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Disables the element when value is true (negated version of `enabled` binder).
 */

class DisabledBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.disabled = !!value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DisabledBinder, "key", "disabled");

/***/ }),

/***/ "../../packages/core/src/binders/draggable.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/draggable.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoDragBinder": function() { return /* binding */ NoDragBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * This binder can be used to disable (or enable) dragging ghost image for browser which have no support for the css feature `user-select: none;` like firefox.
 * This binder is useful in combination with the `scrollbar-draggable` binder.
 */

class NoDragBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "enable", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onDrag", this._onDrag.bind(this));
  }

  _onDrag(event) {
    if (!this.enable) {
      // Ignore event is draggable is disabled
      event.preventDefault();
    }
  }

  /** This method is called every time the attribute values changes */
  routine(el, enable) {
    this.enable = enable;
    el.setAttribute("draggable", enable ? "true" : "false");
  }
  /** This method is called as soon as Riba bounds this binder */


  bind(el) {
    el.addEventListener("dragstart", this.onDrag, true);
  }
  /** This method is called as soon as Riba unbound this binder */


  unbind(el) {
    el.removeAttribute("draggable");
    el.removeEventListener("dragstart", this.onDrag, true);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(NoDragBinder, "key", "draggable");

/***/ }),

/***/ "../../packages/core/src/binders/each-item.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/each-item.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EachStarBinder": function() { return /* binding */ EachStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");




/**
 * each-*
 * Appends bound instances of the element in place for each item in the array.
 */

class EachStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 4000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "iterated", []);
  }

  bind(el) {
    if (!this.marker) {
      var _window, _window$document, _el$parentNode;

      this.marker = (_window = window) === null || _window === void 0 ? void 0 : (_window$document = _window.document) === null || _window$document === void 0 ? void 0 : _window$document.createComment(" riba: ".concat(this.type, " "));

      if (!((_el$parentNode = el.parentNode) !== null && _el$parentNode !== void 0 && _el$parentNode.insertBefore) || !this.marker) {// console.warn('No parent node!');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else {
      this.iterated.forEach(view => {
        view.bind();
      });
    }
  }

  unbind() {
    if (this.iterated) {
      this.iterated.forEach(view => {
        view.unbind();
      });
    }
  }

  routine(el, collection) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    let isObject = false;
    const modelName = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.camelCase)(this.args[0].toString());
    collection = collection || []; // Transform object to array to iterate over

    if (!Array.isArray(collection) && typeof collection === "object" && collection !== null) {
      collection = Object.entries(collection).map(_ref => {
        let [key, value] = _ref;
        return {
          key,
          value
        };
      });
      isObject = true;
    }

    if (!Array.isArray(collection)) {
      throw new Error("each-".concat(this.args[0], " needs an array or object to iterate over, but it is ").concat(typeof collection));
    } // if index name is set by `index-property` use this name, otherwise `%[modelName]%`


    const indexProp = el.getAttribute("index-property") || this.getIterationAlias(modelName);
    collection.forEach((model, index) => {
      const scope = {
        $parent: this.view.models
      }; // Is object transformed to array

      if (isObject) {
        scope[indexProp] = model.key;
        scope[modelName] = model.value;
      } // Is Array
      else {
        scope[indexProp] = index;
        scope[modelName] = model;
      }

      let view = this.iterated[index];

      if (!view) {
        let previous;

        if (this.iterated.length) {
          previous = this.iterated[this.iterated.length - 1].els[0];
        } else if (this.marker) {
          previous = this.marker;
        }

        if (!previous) {
          return;
        }

        view = _view_js__WEBPACK_IMPORTED_MODULE_1__.View.create(this, scope, previous.nextSibling);
        this.iterated.push(view);
      } else {
        if (view.models[modelName] !== model) {
          // search for a view that matches the model
          let matchIndex;
          let nextView = this.iterated[index];

          for (let nextIndex = index + 1; nextIndex < this.iterated.length; nextIndex++) {
            nextView = this.iterated[nextIndex];

            if (nextView.models[modelName] === model) {
              matchIndex = nextIndex;
              break;
            }
          }

          if (matchIndex !== undefined) {
            var _this$marker$parentNo;

            // model is in other position
            // TODO: consider avoiding the splice here by setting a flag
            // profile performance before implementing such change
            this.iterated.splice(matchIndex, 1);

            if (!this.marker || !((_this$marker$parentNo = this.marker.parentNode) !== null && _this$marker$parentNo !== void 0 && _this$marker$parentNo.insertBefore)) {
              throw new Error("Marker has no parent node");
            }

            if (nextView && nextView.els[0] && view.els[0]) {
              this.marker.parentNode.insertBefore(nextView.els[0], view.els[0]);
            }

            nextView.models[indexProp] = index;
          } else {
            // new model
            nextView = _view_js__WEBPACK_IMPORTED_MODULE_1__.View.create(this, scope, view.els[0]);
          }

          this.iterated.splice(index, 0, nextView);
        } else {
          view.models[indexProp] = index;
        }
      }
    });

    if (this.iterated.length > collection.length) {
      (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.times)(this.iterated.length - collection.length, () => {
        const view = this.iterated.pop();

        if (!view) {
          throw new Error("view is undefined!");
        }

        view.unbind();

        if (!this.marker || !this.marker.parentNode) {
          throw new Error("Marker has no parent node");
        }

        this.marker.parentNode.removeChild(view.els[0]);
      });
    }

    if (el.nodeName === "OPTION" && this.view.bindings) {
      this.view.bindings.forEach(binding => {
        if (this.marker && binding.el === this.marker.parentNode && binding.type === "value" && binding.sync) {
          binding.sync();
        }
      });
    }
  }

  update(models) {
    const data = {}; // TODO: add test and fix if necessary

    Object.keys(models).forEach(key => {
      if (this.args === null) {
        throw new Error("args is null");
      }

      if (key !== this.args[0]) {
        data[key] = models[key];
      }
    });
    this.iterated.forEach(view => {
      view.update(data);
    });
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachStarBinder, "key", "each-*");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EachStarBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/element.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/element.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementBinder": function() { return /* binding */ ElementBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets a reference to the HTML element into the scope
 */

class ElementBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);
  }

  bind() {
    this.publish();
  }

  routine() {//
  }

  getValue(el) {
    return el;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ElementBinder, "key", "element");

/***/ }),

/***/ "../../packages/core/src/binders/enabled.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/binders/enabled.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnabledBinder": function() { return /* binding */ EnabledBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Enables the element when value is true.
 */

class EnabledBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.disabled = !value;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EnabledBinder, "key", "enabled");

/***/ }),

/***/ "../../packages/core/src/binders/flex-sort-childs.binder.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/binders/flex-sort-childs.binder.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FlexSortChildsBinder": function() { return /* binding */ FlexSortChildsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * sort-childs using flex order
 */

class FlexSortChildsBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 90000);
  }

  routine(el, descending) {
    const childrens = Array.from(el.children);
    childrens.sort((a, b) => {
      if (!a.dataset.sortBy || !b.dataset.sortBy) {
        return 0;
      }

      if (a.dataset.sortBy < b.dataset.sortBy) {
        return descending ? 1 : -1;
      }

      if (a.dataset.sortBy > b.dataset.sortBy) {
        return descending ? -1 : 1;
      }

      return 0;
    });

    for (let i = 0; i < childrens.length; i++) {
      const child = childrens[i];
      child.style.order = i.toString();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(FlexSortChildsBinder, "key", "flex-sort-childs");

/***/ }),

/***/ "../../packages/core/src/binders/hide.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/hide.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HideBinder": function() { return /* binding */ HideBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Hides the element when value is true (negated version of `show` binder).
 */

class HideBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.style.display = value ? "none" : "";

    if (value) {
      el.setAttribute("hidden", "true");
    } else {
      el.removeAttribute("hidden");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HideBinder, "key", "hide");

/***/ }),

/***/ "../../packages/core/src/binders/html.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/html.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HtmlBinder": function() { return /* binding */ HtmlBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets the element's text value.
 */

class HtmlBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value !== "string") {
      var _value;

      if (typeof ((_value = value) === null || _value === void 0 ? void 0 : _value.toString) === "function") {
        value = value.toString();
      } else {
        console.warn("[HtmlBinder] Value is not a string", value);
        value = JSON.stringify(value);
      }
    }

    el.innerHTML = value || "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HtmlBinder, "key", "html");

/***/ }),

/***/ "../../packages/core/src/binders/if.binder.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/binders/if.binder.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IfBinder": function() { return /* binding */ IfBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");



/**
 * if
 * Inserts and binds the element and it's child nodes into the DOM when true.
 */

class IfBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 4000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "attached", false);
  }

  bind(el) {
    if (!this.marker) {
      var _window, _window$document, _el$parentNode;

      this.marker = (_window = window) === null || _window === void 0 ? void 0 : (_window$document = _window.document) === null || _window$document === void 0 ? void 0 : _window$document.createComment(" riba: " + this.type + " " + this.keypath + " ");
      this.attached = false;

      if (!((_el$parentNode = el.parentNode) !== null && _el$parentNode !== void 0 && _el$parentNode.insertBefore)) {// console.warn('Element has no parent node');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else if (this.nested) {
      this.nested.bind();
    }
  }

  unbind() {
    if (this.nested) {
      this.nested.unbind();
    }
  }

  routine(el, value) {
    value = !!value;

    if (value !== this.attached) {
      if (value) {
        if (!this.nested) {
          this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
          this.nested.bind();
        }

        if (!this.marker || !this.marker.parentNode) {// console.warn('Marker has no parent node');
        } else {
          this.marker.parentNode.insertBefore(el, this.marker.nextSibling);
        }

        this.attached = true;
      } else {
        if (!el.parentNode) {// console.warn('Element has no parent node');
        } else {
          el.parentNode.removeChild(el);
        }

        this.attached = false;
      }
    }
  }

  update(models) {
    if (this.nested) {
      this.nested.update(models);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IfBinder, "key", "if");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(IfBinder, "block", true);

/***/ }),

/***/ "../../packages/core/src/binders/index.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/binders/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddClassBinder": function() { return /* reexport safe */ _add_class_binder_js__WEBPACK_IMPORTED_MODULE_1__.AddClassBinder; },
/* harmony export */   "AnimateStarBinder": function() { return /* reexport safe */ _animate_classname_binder_js__WEBPACK_IMPORTED_MODULE_0__.AnimateStarBinder; },
/* harmony export */   "AssignBinder": function() { return /* reexport safe */ _assign_binder_js__WEBPACK_IMPORTED_MODULE_3__.AssignBinder; },
/* harmony export */   "AssignPropertyBinder": function() { return /* reexport safe */ _assign_property_binder_js__WEBPACK_IMPORTED_MODULE_2__.AssignPropertyBinder; },
/* harmony export */   "AttributeBinder": function() { return /* reexport safe */ _attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBinder; },
/* harmony export */   "BlockBinder": function() { return /* reexport safe */ _block_binder_js__WEBPACK_IMPORTED_MODULE_5__.BlockBinder; },
/* harmony export */   "CheckedBinder": function() { return /* reexport safe */ _checked_binder_js__WEBPACK_IMPORTED_MODULE_6__.CheckedBinder; },
/* harmony export */   "ClassStarBinder": function() { return /* reexport safe */ _class_name_binder_js__WEBPACK_IMPORTED_MODULE_7__.ClassStarBinder; },
/* harmony export */   "ComponentAttributeBinder": function() { return /* reexport safe */ _co_attribute_binder_js__WEBPACK_IMPORTED_MODULE_8__.ComponentAttributeBinder; },
/* harmony export */   "DisabledBinder": function() { return /* reexport safe */ _disabled_binder_js__WEBPACK_IMPORTED_MODULE_9__.DisabledBinder; },
/* harmony export */   "EachStarBinder": function() { return /* reexport safe */ _each_item_binder_js__WEBPACK_IMPORTED_MODULE_11__.EachStarBinder; },
/* harmony export */   "ElementBinder": function() { return /* reexport safe */ _element_binder_js__WEBPACK_IMPORTED_MODULE_12__.ElementBinder; },
/* harmony export */   "EnabledBinder": function() { return /* reexport safe */ _enabled_binder_js__WEBPACK_IMPORTED_MODULE_13__.EnabledBinder; },
/* harmony export */   "FlexSortChildsBinder": function() { return /* reexport safe */ _flex_sort_childs_binder_js__WEBPACK_IMPORTED_MODULE_14__.FlexSortChildsBinder; },
/* harmony export */   "HideBinder": function() { return /* reexport safe */ _hide_binder_js__WEBPACK_IMPORTED_MODULE_15__.HideBinder; },
/* harmony export */   "HtmlBinder": function() { return /* reexport safe */ _html_binder_js__WEBPACK_IMPORTED_MODULE_16__.HtmlBinder; },
/* harmony export */   "IfBinder": function() { return /* reexport safe */ _if_binder_js__WEBPACK_IMPORTED_MODULE_17__.IfBinder; },
/* harmony export */   "MaxlengthBinder": function() { return /* reexport safe */ _maxlength_binder_js__WEBPACK_IMPORTED_MODULE_18__.MaxlengthBinder; },
/* harmony export */   "NoDragBinder": function() { return /* reexport safe */ _draggable_binder_js__WEBPACK_IMPORTED_MODULE_10__.NoDragBinder; },
/* harmony export */   "OnEventBinder": function() { return /* reexport safe */ _on_event_binder_js__WEBPACK_IMPORTED_MODULE_19__.OnEventBinder; },
/* harmony export */   "ParentBinder": function() { return /* reexport safe */ _parent_binder_js__WEBPACK_IMPORTED_MODULE_20__.ParentBinder; },
/* harmony export */   "ReadonlyBinder": function() { return /* reexport safe */ _readonly_binder_js__WEBPACK_IMPORTED_MODULE_21__.ReadonlyBinder; },
/* harmony export */   "RemoveClassBinder": function() { return /* reexport safe */ _remove_class_binder_js__WEBPACK_IMPORTED_MODULE_22__.RemoveClassBinder; },
/* harmony export */   "ShowBinder": function() { return /* reexport safe */ _show_binder_js__WEBPACK_IMPORTED_MODULE_23__.ShowBinder; },
/* harmony export */   "SrcsetSizeBinder": function() { return /* reexport safe */ _srcset_size_binder_js__WEBPACK_IMPORTED_MODULE_24__.SrcsetSizeBinder; },
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* reexport safe */ _style_background_image_binder_js__WEBPACK_IMPORTED_MODULE_25__.StyleBackgroundImageBinder; },
/* harmony export */   "StyleBinder": function() { return /* reexport safe */ _style_property_binder_js__WEBPACK_IMPORTED_MODULE_27__.StyleBinder; },
/* harmony export */   "StyleStarBinder": function() { return /* reexport safe */ _style_css_property_binder_js__WEBPACK_IMPORTED_MODULE_26__.StyleStarBinder; },
/* harmony export */   "TagStarBinder": function() { return /* reexport safe */ _tag_name_binder_js__WEBPACK_IMPORTED_MODULE_28__.TagStarBinder; },
/* harmony export */   "TemplateBinder": function() { return /* reexport safe */ _template_binder_js__WEBPACK_IMPORTED_MODULE_29__.TemplateBinder; },
/* harmony export */   "TextBinder": function() { return /* reexport safe */ _text_binder_js__WEBPACK_IMPORTED_MODULE_30__.TextBinder; },
/* harmony export */   "ToggleOnEventBinder": function() { return /* reexport safe */ _toggle_on_event_binder_js__WEBPACK_IMPORTED_MODULE_31__.ToggleOnEventBinder; },
/* harmony export */   "UncheckedBinder": function() { return /* reexport safe */ _unchecked_binder_js__WEBPACK_IMPORTED_MODULE_32__.UncheckedBinder; },
/* harmony export */   "UnlessBinder": function() { return /* reexport safe */ _unless_binder_js__WEBPACK_IMPORTED_MODULE_33__.UnlessBinder; },
/* harmony export */   "ValueBinder": function() { return /* reexport safe */ _value_binder_js__WEBPACK_IMPORTED_MODULE_34__.ValueBinder; }
/* harmony export */ });
/* harmony import */ var _animate_classname_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animate-classname.binder.js */ "../../packages/core/src/binders/animate-classname.binder.ts");
/* harmony import */ var _add_class_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-class.binder.js */ "../../packages/core/src/binders/add-class.binder.ts");
/* harmony import */ var _assign_property_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assign-property.binder.js */ "../../packages/core/src/binders/assign-property.binder.ts");
/* harmony import */ var _assign_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assign.binder.js */ "../../packages/core/src/binders/assign.binder.ts");
/* harmony import */ var _attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./attribute.binder.js */ "../../packages/core/src/binders/attribute.binder.ts");
/* harmony import */ var _block_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block.binder.js */ "../../packages/core/src/binders/block.binder.ts");
/* harmony import */ var _checked_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./checked.binder.js */ "../../packages/core/src/binders/checked.binder.ts");
/* harmony import */ var _class_name_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./class-name.binder.js */ "../../packages/core/src/binders/class-name.binder.ts");
/* harmony import */ var _co_attribute_binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./co-attribute.binder.js */ "../../packages/core/src/binders/co-attribute.binder.ts");
/* harmony import */ var _disabled_binder_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./disabled.binder.js */ "../../packages/core/src/binders/disabled.binder.ts");
/* harmony import */ var _draggable_binder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./draggable.binder.js */ "../../packages/core/src/binders/draggable.binder.ts");
/* harmony import */ var _each_item_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./each-item.binder.js */ "../../packages/core/src/binders/each-item.binder.ts");
/* harmony import */ var _element_binder_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./element.binder.js */ "../../packages/core/src/binders/element.binder.ts");
/* harmony import */ var _enabled_binder_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./enabled.binder.js */ "../../packages/core/src/binders/enabled.binder.ts");
/* harmony import */ var _flex_sort_childs_binder_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./flex-sort-childs.binder.js */ "../../packages/core/src/binders/flex-sort-childs.binder.ts");
/* harmony import */ var _hide_binder_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hide.binder.js */ "../../packages/core/src/binders/hide.binder.ts");
/* harmony import */ var _html_binder_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./html.binder.js */ "../../packages/core/src/binders/html.binder.ts");
/* harmony import */ var _if_binder_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./if.binder.js */ "../../packages/core/src/binders/if.binder.ts");
/* harmony import */ var _maxlength_binder_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./maxlength.binder.js */ "../../packages/core/src/binders/maxlength.binder.ts");
/* harmony import */ var _on_event_binder_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./on-event.binder.js */ "../../packages/core/src/binders/on-event.binder.ts");
/* harmony import */ var _parent_binder_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parent.binder.js */ "../../packages/core/src/binders/parent.binder.ts");
/* harmony import */ var _readonly_binder_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./readonly.binder.js */ "../../packages/core/src/binders/readonly.binder.ts");
/* harmony import */ var _remove_class_binder_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./remove-class.binder.js */ "../../packages/core/src/binders/remove-class.binder.ts");
/* harmony import */ var _show_binder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./show.binder.js */ "../../packages/core/src/binders/show.binder.ts");
/* harmony import */ var _srcset_size_binder_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./srcset-size.binder.js */ "../../packages/core/src/binders/srcset-size.binder.ts");
/* harmony import */ var _style_background_image_binder_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./style-background-image.binder.js */ "../../packages/core/src/binders/style-background-image.binder.ts");
/* harmony import */ var _style_css_property_binder_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./style-css-property.binder.js */ "../../packages/core/src/binders/style-css-property.binder.ts");
/* harmony import */ var _style_property_binder_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./style-property.binder.js */ "../../packages/core/src/binders/style-property.binder.ts");
/* harmony import */ var _tag_name_binder_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./tag-name.binder.js */ "../../packages/core/src/binders/tag-name.binder.ts");
/* harmony import */ var _template_binder_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./template.binder.js */ "../../packages/core/src/binders/template.binder.ts");
/* harmony import */ var _text_binder_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./text.binder.js */ "../../packages/core/src/binders/text.binder.ts");
/* harmony import */ var _toggle_on_event_binder_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./toggle-on-event.binder.js */ "../../packages/core/src/binders/toggle-on-event.binder.ts");
/* harmony import */ var _unchecked_binder_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./unchecked.binder.js */ "../../packages/core/src/binders/unchecked.binder.ts");
/* harmony import */ var _unless_binder_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./unless.binder.js */ "../../packages/core/src/binders/unless.binder.ts");
/* harmony import */ var _value_binder_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./value.binder.js */ "../../packages/core/src/binders/value.binder.ts");


















 // export * from "./mustache-text.binder.js";


















/***/ }),

/***/ "../../packages/core/src/binders/maxlength.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/maxlength.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MaxlengthBinder": function() { return /* binding */ MaxlengthBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * maxlength
 */

class MaxlengthBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, maxLength) {
    if (typeof maxLength === "number") {
      el.setAttribute("maxlength", maxLength.toString());
      el.maxLength = maxLength;
    } else {
      el.removeAttribute("maxlength");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(MaxlengthBinder, "key", "maxlength");

/***/ }),

/***/ "../../packages/core/src/binders/mustache-text.binder.ts":
/*!***************************************************************!*\
  !*** ../../packages/core/src/binders/mustache-text.binder.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MustacheTextBinder": function() { return /* binding */ MustacheTextBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


class MustacheTextBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(node, value) {
    node.data = value != null ? value : "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(MustacheTextBinder, "key", "mustache-text");

/***/ }),

/***/ "../../packages/core/src/binders/on-event.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/on-event.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OnEventBinder": function() { return /* binding */ OnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Binds an event handler on the element.
 */

class OnEventBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);
  }

  unbind(el) {
    if (this.handler) {
      if (this.args === null) {
        throw new Error("args is null");
      }

      const eventName = this.args[0];
      el.removeEventListener(eventName, this.handler);
    }
  }

  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0]; // see https://github.com/microsoft/TypeScript/issues/32912

    const options = {
      passive: this.el.dataset.passive === "true" // data-passive="true"

    };

    if (this.handler) {
      el.removeEventListener(eventName, this.handler, options);
    }

    this.handler = this.eventHandler(value, el).bind(this);
    el.addEventListener(eventName, this.handler, options);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(OnEventBinder, "key", "on-*");

/***/ }),

/***/ "../../packages/core/src/binders/parent.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/parent.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentBinder": function() { return /* binding */ ParentBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * parent
 * Binds the parent scope to your component
 */

class ParentBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine() {
    /**/
  }

  bindIntern(el) {
    if (el.setBinderAttribute) {
      el.setBinderAttribute("$parent", this.view.models);
    } else {
      console.warn("[parentBinder] You can only use this binder on Riba components", el.localName, customElements.get(el.localName));
    }
  }

  async bind(el) {
    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true, true)) {
      this.bindIntern(el);
    } else if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.isCustomElement)(el, true)) {
      console.info("[parentBinder] CustomElement ".concat(el.localName, " has been defined, but is not yet upgraded. Waiting for upgrade.."), el);
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.waitForCustomElement)(el);
      this.bindIntern(el);
    } else {
      console.warn("[parentBinder] You can only use this binder on Riba components", el.localName);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ParentBinder, "key", "parent");

/***/ }),

/***/ "../../packages/core/src/binders/readonly.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/readonly.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReadonlyBinder": function() { return /* binding */ ReadonlyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * readonly
 */

class ReadonlyBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, readOnly) {
    readOnly = !!readOnly;
    el.readOnly = readOnly;

    if (readOnly) {
      el.setAttribute("readonly", "");
    } else {
      el.removeAttribute("readonly");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ReadonlyBinder, "key", "readonly");

/***/ }),

/***/ "../../packages/core/src/binders/remove-class.binder.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/binders/remove-class.binder.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoveClassBinder": function() { return /* binding */ RemoveClassBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * remove-class
 * Removes the given class string the class attibute.
 * Instead of `class-[classname]` the classname is removed by the
 * given attribute and not by the star value,
 * @example
 * <img class="loading" rv-src="img.src" rv-remove-class="loadingClass">
 */

class RemoveClassBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.staticClassesString = el.className;
  }

  routine(el, value) {
    const regex = new RegExp("\\b".concat(value, "\\b"), "g");

    if (!this.staticClassesString) {
      throw new Error("staticClassesString is undefined!");
    }

    el.className = this.staticClassesString.replace(regex, "").trim();
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RemoveClassBinder, "key", "remove-class");

/***/ }),

/***/ "../../packages/core/src/binders/show.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/show.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShowBinder": function() { return /* binding */ ShowBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Shows the element when value is true (negated version of `hide` binder).
 */

class ShowBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    el.style.display = value ? "" : "none";

    if (value) {
      el.removeAttribute("hidden");
    } else {
      el.setAttribute("hidden", "true");
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShowBinder, "key", "show");

/***/ }),

/***/ "../../packages/core/src/binders/srcset-size.binder.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/binders/srcset-size.binder.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SrcsetSizeBinder": function() { return /* binding */ SrcsetSizeBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * srcset-size
 * Sets an url with size to the `srcset` attribute
 */

class SrcsetSizeBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    const size = this.args[0];
    let srcset = el.getAttribute("srcset");

    if (typeof srcset !== "string") {
      srcset = "";
    }

    if (typeof url === "string" && url.length > 0) {
      const seperator = srcset.length > 0 ? ", " : ""; // Add size to srcset attribute

      srcset += "".concat(seperator).concat(url, " ").concat(size);
    } else {
      // Remove size from srcset attribute
      let sizes = srcset.split(",");
      sizes = sizes.map(iterSize => iterSize.trim());
      sizes = sizes.filter(iterSize => !(iterSize.indexOf(size) !== -1));
      srcset = sizes.join(", ") || "";
    }

    el.setAttribute("srcset", srcset);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(SrcsetSizeBinder, "key", "srcset-*");

/***/ }),

/***/ "../../packages/core/src/binders/style-background-image.binder.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/binders/style-background-image.binder.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* binding */ StyleBackgroundImageBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * style-*
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style-background-image="'/image.png'"></div>
 * ```
 */

class StyleBackgroundImageBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const prop = "background-image";

    if (value === null || value === undefined || value === "") {
      el.style.removeProperty(prop);
    } else {
      el.style.setProperty(prop, "url(".concat(value, ")"));
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleBackgroundImageBinder, "key", "style-background-image");

/***/ }),

/***/ "../../packages/core/src/binders/style-css-property.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/binders/style-css-property.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleStarBinder": function() { return /* binding */ StyleStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * style-*
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style-background-color="'blue'"></div>
 * ```
 */

class StyleStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    const propertyName = this.args[0];

    if (value === null || value === undefined || value === "") {
      el.style.removeProperty(propertyName.toString());
    } else {
      el.style.setProperty(propertyName.toString(), value);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleStarBinder, "key", "style-*");

/***/ }),

/***/ "../../packages/core/src/binders/style-property.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/core/src/binders/style-property.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleBinder": function() { return /* binding */ StyleBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * style
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style="{'backgroundColor':'blue'}"></div>
 * ```
 */

class StyleBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (value) {
      if (typeof value === "string") {
        el.setAttribute("style", value);
      } else {
        for (const key of Object.keys(value)) {
          el.style.setProperty((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.kebabCase)(key), value[key] || null);
        }
      }
    } else {
      for (const key of Object.keys(el.style)) {
        el.style.removeProperty(key);
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(StyleBinder, "key", "style");

/***/ }),

/***/ "../../packages/core/src/binders/tag-name.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/tag-name.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagStarBinder": function() { return /* binding */ TagStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * tag-*
 * tag-[tagname]
 *
 * Changes the html tag (whatever value is in place of [tagname]) of the element
 * when the value evaluates to true and reverts to the original tag name if the value evaluates to false.
 *
 * TODO test me on value change
 *
 * @example
 * <div rv-tag-a="item.hasHref">{ item.label }</div>
 */

class TagStarBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", -1000);
  }

  bind(el) {
    this.originalTag = el.tagName.toLowerCase();
  }

  routine(oldEl, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const curTagName = this.el.tagName.toLowerCase();
    let tagName;

    if (value) {
      tagName = this.args[0].trim().toLowerCase();
    } else if (this.originalTag) {
      tagName = this.originalTag.toLowerCase();
    } else {
      throw new Error("Tag name not found!");
    }

    if (curTagName !== tagName) {
      const newEl = document.createElement(tagName); // Move childs to new element we use this instead if innerHTML to keep the binders alive on this childs

      while (oldEl.childNodes.length > 0) {
        if (oldEl.firstChild) {
          newEl.appendChild(oldEl.firstChild);
        }
      } // Copy attributes to new element


      const attributes = Array.prototype.slice.call(oldEl.attributes);

      for (const attribute of attributes) {
        newEl.setAttribute(attribute.name, attribute.value);
      } // Replace the old element with the new element


      if (oldEl.parentNode) {
        oldEl.parentNode.replaceChild(newEl, oldEl);
      } else {
        console.warn("No parent");
      }

      this.el = newEl;
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TagStarBinder, "key", "tag-*");

/***/ }),

/***/ "../../packages/core/src/binders/template.binder.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/binders/template.binder.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplateBinder": function() { return /* binding */ TemplateBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");



/**
 * template
 * Similar to rv-html but also binds the html with riba, so you can also use binders and components in this templates.
 */

class TemplateBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
  }

  routine(el, value) {
    var _this$nested, _this$nested2;

    (_this$nested = this.nested) === null || _this$nested === void 0 ? void 0 : _this$nested.unbind();
    el.innerHTML = value ? value : "";
    this.nested = new _view_js__WEBPACK_IMPORTED_MODULE_2__.View(el, this.view.models, this.view.options);
    (_this$nested2 = this.nested) === null || _this$nested2 === void 0 ? void 0 : _this$nested2.bind();
  }

  unbind() {
    var _this$nested3;

    (_this$nested3 = this.nested) === null || _this$nested3 === void 0 ? void 0 : _this$nested3.unbind();
  }

  update(models) {
    var _this$nested4;

    (_this$nested4 = this.nested) === null || _this$nested4 === void 0 ? void 0 : _this$nested4.update(models);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TemplateBinder, "key", "template");

/***/ }),

/***/ "../../packages/core/src/binders/text.binder.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/binders/text.binder.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextBinder": function() { return /* binding */ TextBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Sets the element's text value.
 */

class TextBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, value) {
    if (typeof value !== "string") {
      var _value;

      if (typeof ((_value = value) === null || _value === void 0 ? void 0 : _value.toString) === "function") {
        value = value.toString();
      } else {
        console.warn("[TextBinder] Can't convert value \"".concat(value, "\" to string! Element: "), el);
      }
    }

    el.textContent = value || "";
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TextBinder, "key", "text");

/***/ }),

/***/ "../../packages/core/src/binders/toggle-on-event.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/binders/toggle-on-event.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToggleOnEventBinder": function() { return /* binding */ ToggleOnEventBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");


/**
 * Toggles a boolean variable to true/false if the event is triggered.
 */

class ToggleOnEventBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  toggle() {
    if (this.propertyKey) {
      this.view.models[this.propertyKey] = !this.view.models[this.propertyKey];
    }
  }

  bind(el) {
    const eventName = this.args[0];
    const passive = this.el.dataset.passive === "true"; // data-passive="true"

    el.addEventListener(eventName, this.toggle, {
      passive
    });
  }

  unbind(el) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const eventName = this.args[0];
    el.removeEventListener(eventName, this.toggle);
  }

  routine(el, propertyKey) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.propertyKey = propertyKey;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ToggleOnEventBinder, "key", "toggle-on-*");

/***/ }),

/***/ "../../packages/core/src/binders/unchecked.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/binders/unchecked.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UncheckedBinder": function() { return /* binding */ UncheckedBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




/**
 * unchecked
 * Unchecks a checkbox or radio input when the value is true (negated version of
 * `checked` binder). Also sets the model property when the input is checked or
 * unchecked (two-way binder).
 */

class UncheckedBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 2000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  bind(el) {
    el.addEventListener("change", this.onChange);
  }

  unbind(el) {
    el.removeEventListener("change", this.onChange);
  }

  routine(el, value) {
    if (el.type === "radio") {
      el.checked = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(el.value) !== (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getString)(value);
    } else {
      el.checked = !value;
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(UncheckedBinder, "key", "unchecked");

/***/ }),

/***/ "../../packages/core/src/binders/unless.binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/binders/unless.binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnlessBinder": function() { return /* binding */ UnlessBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _if_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./if.binder.js */ "../../packages/core/src/binders/if.binder.ts");


/**
 * unless
 * Removes and unbinds the element and it's child nodes into the DOM when true
 * (negated version of `if` binder).
 */

class UnlessBinder extends _if_binder_js__WEBPACK_IMPORTED_MODULE_1__.IfBinder {
  routine(el, value) {
    return super.routine(el, !value);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(UnlessBinder, "key", "unless");

/***/ }),

/***/ "../../packages/core/src/binders/value.binder.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/binders/value.binder.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueBinder": function() { return /* binding */ ValueBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



const DEFAULT_EVENTS = "change input paste blur focus";
/**
 * Sets the element's value. Also sets the model property when the input changes
 * (two-way binder).
 */

class ValueBinder extends _binder_js__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "publishes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 3000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onChange", this.publish.bind(this));
  }

  getData(el) {
    const data = {
      type: el.type,
      tagName: el.tagName,
      contenteditable: el.getAttribute("contenteditable") ? true : false,
      isRadio: false,
      isOption: false
    };
    data.isRadio = data.tagName === "INPUT" && data.type === "radio";
    data.isOption = data.tagName === "OPTION";
    return data;
  }

  bind(el) {
    if (el.tagName === "OPTION") {
      return;
    }

    const data = this.getData(el);

    if (!data.isRadio) {
      this.event = el.getAttribute("event-name") || DEFAULT_EVENTS;
      const events = this.event.split(" ");

      for (const event of events) {
        el.addEventListener(event.trim(), this.onChange, false);
      }
    }
  }

  unbind(el) {
    if (this.event) {
      const events = this.event.split(" ");

      for (const event in events) {
        el.removeEventListener(event.trim(), this.onChange);
      }
    }
  }

  routine(el, newValue) {
    let oldValue = this.getValue(el);

    if (!Array.isArray(newValue)) {
      if (newValue != null) {
        newValue = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getString)(newValue);
      } else {
        newValue = "";
      }
    }

    if (!Array.isArray(oldValue)) {
      if (oldValue != null) {
        oldValue = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getString)(oldValue);
      } else {
        oldValue = "";
      }
    }

    if (oldValue === newValue) {
      // nothing changed
      return;
    }

    const data = this.getData(el);

    if (data.isRadio || data.isOption) {
      return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.setAttribute)(el, "value", newValue);
    }

    if (el.type === "select-multiple") {
      if (Array.isArray(newValue)) {
        for (let i = 0; i < el.options.length; i++) {
          const option = el.options[i];
          option.selected = newValue.indexOf(option.value) > -1;
        }
      }
    } else if (el.getAttribute("contenteditable")) {
      el.innerHTML = newValue; // TODO write test for contenteditable
    } else {
      el.value = newValue;
    }
  }

  getValue(el) {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getInputValue)(el);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ValueBinder, "key", "value");

/***/ }),

/***/ "../../packages/core/src/component/basic-component.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/component/basic-component.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasicComponent": function() { return /* binding */ BasicComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/types */ "../types/index.js");
/* harmony import */ var _ribajs_jsx_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/jsx/src/index.js */ "../../packages/jsx/src/index.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/color.js */ "../../packages/utils/src/color.ts");


/**
 * Auto parse custom element attributes
 *
 * @see https://developer.mozilla.org/de/docs/Web/Web_Components/Using_custom_elements
 */





class BasicComponent extends HTMLElement {
  /**
   * Used to check if all passed observedAttributes are initialized
   */
  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateLoaded", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "observedAttributesToCheck", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "observedAttributes", []);

    if (this._debug) {
      this._color = (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.getRandomColor)();
    }
  }
  /**
   * Remove this custom element
   */


  remove() {
    if (this && this.parentElement) {
      this.parentElement.removeChild(this);
    }
  }

  _log(mode) {
    const namespace = this.constructor.name || this.tagName;

    if (!this._color) {
      this._color = (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.getRandomColor)();
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    (0,_ribajs_utils_src_color_js__WEBPACK_IMPORTED_MODULE_5__.consoleColoured)({
      namespace,
      color: this._color,
      mode
    }, ...args);
  }

  info() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return this._log("info", ...args);
  }

  debug() {
    if (!this._debug) {
      return;
    }

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return this._log("debug", ...args);
  }

  error() {
    console.error(...arguments);
  }
  /**
   * returns a list of attributes which are required until the riba binding starts
   */


  requiredAttributes() {
    return [];
  }

  async init(observedAttributes) {
    this.loadAttributes(observedAttributes);
    this.getPassedObservedAttributes(observedAttributes);
    return;
  }

  ready() {
    return this.allPassedObservedAttributesAreInitialized() && this.checkRequiredAttributes();
  }
  /**
   * Check if the attribute (e.g. `src`) is passed to this custom element
   * @param observedAttribute
   */


  attributeIsPassed(observedAttribute) {
    return this.hasAttribute(observedAttribute);
  }
  /**
   * Get passed observed attributes, used to check if all passed attributes are initialized
   * @param observedAttributes
   */


  getPassedObservedAttributes(observedAttributes) {
    const oa2c = this.observedAttributesToCheck;

    for (const observedAttribute of observedAttributes) {
      if (!oa2c[observedAttribute]) {
        oa2c[observedAttribute] = {
          passed: false,
          initialized: false
        };
      } else {
        if (!oa2c[observedAttribute].passed) {
          oa2c[observedAttribute].passed = this.attributeIsPassed(observedAttribute);
        }
      }
    }
  }
  /**
   * Checks if all passed observed attributes are initialized
   */


  allPassedObservedAttributesAreInitialized() {
    return Object.keys(this.observedAttributesToCheck).every(key => {
      var _this$observedAttribu, _this$observedAttribu2;

      return !((_this$observedAttribu = this.observedAttributesToCheck[key]) !== null && _this$observedAttribu !== void 0 && _this$observedAttribu.passed) || ((_this$observedAttribu2 = this.observedAttributesToCheck[key]) === null || _this$observedAttribu2 === void 0 ? void 0 : _this$observedAttribu2.initialized);
    });
  }
  /**
   * Required attributes before the view is bound
   *
   * The attributeChangedCallback is called for each attribute which updates the riba view each time
   * which can have a big impact on performance or required attributes are not yet available which can lead to errors.
   * So define required attributes and the view is ony bind the first time after all this attributes are transmitted.
   */


  checkRequiredAttributes() {
    return this.requiredAttributes().every(requiredAttribute => {
      requiredAttribute = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(requiredAttribute);
      return this.scope.hasOwnProperty(requiredAttribute) && typeof this.scope[requiredAttribute] !== "undefined";
    });
  }

  parseAttribute(attr) {
    let value = attr;

    if (typeof attr !== "string") {
      return attr;
    }

    if (attr === "true") {
      value = true;
    } else if (attr === "false") {
      value = false;
    } else if (attr === "null") {
      value = null;
    } else if (attr === "undefined") {
      value = undefined;
    } else if (attr === "") {
      value = undefined;
    } else if (!isNaN(Number(attr))) {
      value = Number(attr); // If number is too large store the value as string

      if (value >= Number.MAX_SAFE_INTEGER) {
        value = attr;
      }
    } else {
      const jsonString = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.parseJsonString)(value);
      value = jsonString ? jsonString : value;
    }

    return value;
  }
  /**
   * Returns an event handler for the bindings (most on-*) inside this component.
   */


  eventHandler(self) {
    // IMPORTANT this must be a function and not a Arrow Functions
    return function (context, event, binding, el) {
      if (!this || !this.call) {
        const error = new Error("[rv-".concat(binding.type, "=\"").concat(binding.keypath, "\"] Event handler \"").concat(binding.keypath, "\" not found!\""));
        console.error(binding, el);
        throw error;
      }

      this.call(self, event, binding.view.models, el);
    };
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {// console.warn('connectedCallback called');
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is disconnected from the document's DOM.
   */


  disconnectedCallback() {// if (this.bound && this.view) {
    //   // IMPORTANT ROUTE FIXME, if we unbind the component then it will no longer work if it is retrieved from the cache and the connectedCallback is called
    //   // because the riba attributes are removed. We need a solution for that, maybe we do not remove the attributes or we recreate the attributes
    //   // See view bind / unbind methods for that.
    //   // only unbind if cache is not enabled?
    //   this.unbind();
    // }
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    // this.debug("attributeChangedCallback", attributeName, newValue);
    if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
      this.observedAttributesToCheck[attributeName].initialized = true;
    }

    newValue = this.parseAttribute(newValue);
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);

    if (this.scope && this.scope[parsedAttributeName]) {
      oldValue = this.scope[parsedAttributeName];
    } // automatically inject observed attributes to view scope


    this.scope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

    this.parsedAttributeChangedCallback(parsedAttributeName, oldValue, newValue, namespace);
  }
  /**
   * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    this.debug("parsedAttributeChangedCallback called", attributeName, oldValue, newValue, namespace);
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * Note: Not supported on polyfill: https://github.com/webcomponents/custom-elements#known-bugs-and-limitations
   * @param oldDocument
   * @param newDocument
   */


  adoptedCallback(oldDocument, newDocument) {
    this.debug("adoptedCallback called", oldDocument, newDocument);
  }

  async loadTemplate() {
    if (this.templateLoaded === true) {
      // this.debug("template already loaded");
      return null;
    }

    if (!this.checkRequiredAttributes()) {
      this.debug("Not all required attributes are set to load the template");
      return null;
    }

    this.templateLoaded = true;
    const template = await this.template(); // if innerHTML is null this component uses the innerHTML which he already has!

    try {
      if (template) {
        if (template instanceof HTMLElement) {
          this.innerHTML = "";
          this.appendChild(template);
        } else if (typeof template === "string") {
          this.innerHTML = template;
        } else if (template.tag) {
          this.innerHTML = (0,_ribajs_jsx_src_index_js__WEBPACK_IMPORTED_MODULE_2__.renderElement)(template);
        }
      }

      return template;
    } catch (error) {
      this.templateLoaded = false;
      throw error;
    }
  }

  async beforeTemplate() {// this.debug('beforeTemplate');
  }

  async afterTemplate(template) {
    this.debug("afterTemplate", template);
  }

  async onReady() {// this.debug('onReady', this.bound);
  }
  /**
   * Observes a object keypath in the scope
   * @param keypath
   * @param callback
   */


  observe(keypath, callback) {
    return new _observer_js__WEBPACK_IMPORTED_MODULE_3__.Observer(this.scope, keypath, callback);
  }
  /**
   * Observes a attributeName
   * @param attributeName
   * @param callback
   */


  observeAttribute(attributeName, callback) {
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    return this.observe(parsedAttributeName, callback);
  }
  /**
   * Directly set a attribute value in the scope.
   * This method is meant to be called from the outside, e.g. from a binder or another component.
   * @note This method is used in the componentAttributeBinder
   * @param attributeName
   * @param newValue
   * @param namespace
   */


  setBinderAttribute(attributeName, newValue) {
    let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    const oldValue = this.scope[parsedAttributeName];
    this.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
  }
  /**
   * Directly get a attribute value from the scope.
   * This method is meant to be called from the outside, e.g. from a binder or another component.
   * @note This method is used in the componentAttributeBinder
   * @param attributeName
   * @returns
   */


  getBinderAttribute(attributeName) {
    const parsedAttributeName = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.camelCase)(attributeName);
    const value = this.scope[parsedAttributeName];
    return value;
  }
  /**
   * Load all attributes and calls the attributeChangedCallback for each attribute.
   * Please note: Normally the browser calls the attributeChangedCallback for you
   */


  loadAttributes(observedAttributes) {
    const attributes = this.attributes;

    for (const i in attributes) {
      const attribute = attributes[i];
      const name = attribute.nodeName;

      if (observedAttributes.indexOf(name) !== -1) {
        const newValue = attribute.nodeValue;
        this.attributeChangedCallback(name, undefined, newValue, null);
      }
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/component/component.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/component/component.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Component": function() { return /* binding */ Component; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _riba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../riba.js */ "../../packages/core/src/riba.ts");
/* harmony import */ var _basic_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basic-component.js */ "../../packages/core/src/component/basic-component.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");


/**
 * This implementation of components replaces the old components of rivets following the Web Components v1 specs
 *
 * @see https://developer.mozilla.org/de/docs/Web/Web_Components/Using_custom_elements
 */




class Component extends _basic_component_js__WEBPACK_IMPORTED_MODULE_3__.BasicComponent {
  /** true when binding is in progress */

  /** true when binding is done */

  /** true when component is connected to the dom */

  /** true when component is disconnected from the dom */

  /** true when binding is in progress */
  get binds() {
    return this._binds;
  }
  /** true when binding is done */


  get bound() {
    return this._bound;
  }
  /** true when component is connected to the dom */


  get connected() {
    return this._connected;
  }
  /** true when component is disconnected from the dom */


  get disconnected() {
    return this._disconnected;
  }
  /**
   * If true the component will automatically bind the component to riba if all required attributes are set.
   */


  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "view", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_binds", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_bound", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_connected", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_disconnected", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lifecycleEvents", _ribajs_events__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher.getInstance("lifecycle"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    this.lifecycleEvents.trigger("Component:constructor", this.getLifecycleEventData());
    this.lifecycleEvents.on("ComponentLifecycle:allBound", this.afterAllBind, this);
  }

  async init(observedAttributes) {
    try {
      await super.init(observedAttributes);
      this.lifecycleEvents.trigger("Component:init", this.getLifecycleEventData());
      return this.bindIfReady();
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Use this to throw critical errors within the component
   *
   * @protected
   * @param {Error} error
   * @memberof Component
   */


  throw(error) {
    if (error.message) {
      console.error("[".concat(this.tagName, "] ").concat(error.message));
    }

    this.lifecycleEvents.trigger("Component:error", error, this.getLifecycleEventData());
    this.error(error);
  }
  /**
   * If `autobind` is true this component will bind riba automatically in this component if all all passed observed and required attributes are initialized
   */


  async bindIfReady() {
    /**
     * After all required and passed attributes are set we load the template and bind the component
     */
    if (this.ready()) {
      await this.beforeTemplate();
      const template = await this.loadTemplate();
      await this.afterTemplate(template);

      if (this.autobind) {
        await this.bind();
      }

      await this.onReady();
      return;
    }

    this.debug("Not all required or passed attributes are set to load and bind the template", this.observedAttributesToCheck, this.scope);
    return;
  }
  /** Only internal used */


  async _beforeBind() {
    this._binds = true;
    this.debug("Start to bind Riba");
    this.lifecycleEvents.trigger("Component:beforeBind", this.getLifecycleEventData());
  }
  /** Used to handle stuff before binding starts */


  async beforeBind() {// this.debug("beforeBind", this.scope);
  }
  /** Only internal used */


  async _afterBind() {
    this._binds = false;
    this._bound = true;
    this.lifecycleEvents.trigger("Component:afterBind", this.getLifecycleEventData());
  }
  /** Used to handle stuff after binding is done */


  async afterBind() {// this.debug("afterBind", this.scope);
  }
  /**
   * Called after component binding is done for all current components.
   * Please note: this method is called every time a route changes, so be careful with this method.
   */


  async afterAllBind() {// this.debug("afterBind", this.scope);
  }

  getLifecycleEventData() {
    const data = {
      tagName: this.tagName.toLowerCase(),
      // scope: this.scope,
      component: this // id: this.id,

    };
    return data;
  }
  /**
   * Event handler to listen for publish binder event for two-way-binding in web components
   */
  // protected publish(name: string, newValue: any, namespace: string | null) {
  //   this.dispatchEvent(
  //     new CustomEvent("publish-binder-change:" + name, {
  //       detail: {
  //         name,
  //         newValue,
  //         namespace: null, // TODO
  //       },
  //     })
  //   );
  // }

  /**
   * Default custom Element method
   * Invoked when the custom element is disconnected from the document's DOM.
   */


  disconnectedCallback() {
    try {
      this._disconnected = true;
      this._connected = false;
      super.disconnectedCallback(); // IMPORTANT ROUTE FIXME, if we unbind the component then it will no longer work if it is retrieved from the cache and the connectedCallback is called
      // because the riba attributes are removed. We need a solution for that, maybe we do not remove the attributes or we recreate the attributes
      // See view bind / unbind methods for that.
      // only unbind if cache is not enabled?
      // if (this._binds && this.view) {
      //   this.unbind();
      // }

      this.lifecycleEvents.trigger("Component:disconnected", this.getLifecycleEventData());
      this.lifecycleEvents.off("ComponentLifecycle:allBound", this.afterAllBind, this);
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {
    try {
      this._disconnected = false;
      this._connected = true;
      super.connectedCallback();
      this.lifecycleEvents.trigger("Component:connected", this.getLifecycleEventData());
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Default custom Element method
   * Invoked when one of the custom element's attributes is added, removed, or changed.
   * @param attributeName
   * @param oldValue
   * @param newValue
   * @param namespace
   */


  async attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    try {
      super.attributeChangedCallback(attributeName, oldValue, newValue, namespace);
      await this.bindIfReady();
    } catch (error) {
      this.throw(error);
    }
  }
  /**
   * Extra call formatter to avoid the "this" context problem
   */


  callFormatterHandler(self) {
    return {
      name: "call",
      read: function (fn) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (!fn) {
          throw new Error("[".concat(self.tagName, "] Can not use \"call\" formatter: fn is undefined!"));
        }

        return fn.apply(self, args);
      }
    };
  }
  /**
   * Extra args formatter to avoid the "this" context problem
   *
   * Sets arguments to a function without directly call them
   * @param fn The function you wish to call
   * @param args the parameters you wish to call the function with
   */


  argsFormatterHandler(self) {
    return {
      name: "args",
      read: function (fn) {
        for (var _len2 = arguments.length, fnArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          fnArgs[_key2 - 1] = arguments[_key2];
        }

        return (event, scope, el, binding) => {
          if (!fn) {
            throw new Error("[".concat(self.tagName, "] Can not use \"args\" formatter: fn is undefined!"));
          } // append the event handler args to passed args


          fnArgs.push(event);
          fnArgs.push(scope);
          fnArgs.push(el);
          fnArgs.push(binding);
          return fn.apply(self, fnArgs);
        };
      }
    };
  }

  async bind() {
    if (this.binds || this.bound) {
      // this.debug("component already bound");
      return this.view;
    }

    if (!this.checkRequiredAttributes()) {
      this.debug("Not all required attributes are set for bind");
      return;
    }

    try {
      await this._beforeBind();
      await this.beforeBind();
      this.riba = new _riba_js__WEBPACK_IMPORTED_MODULE_2__.Riba();
      this.view = this.getView();

      if (this.view) {
        this.scope = this.view.models;
        this.view.bind();
      }

      await this._afterBind();
      await this.afterBind();
    } catch (error) {
      this._binds = false;
      this._bound = false;
      this.throw(error);
    }

    return this.view;
  }

  getView() {
    try {
      var _this$riba;

      const viewOptions = (_this$riba = this.riba) === null || _this$riba === void 0 ? void 0 : _this$riba.getViewOptions({
        handler: this.eventHandler(this),
        formatters: {
          call: this.callFormatterHandler(this),
          args: this.argsFormatterHandler(this)
        }
      });

      if (viewOptions) {
        const view = new _view_js__WEBPACK_IMPORTED_MODULE_1__.View(Array.prototype.slice.call(this.childNodes), this.scope, viewOptions);
        return view;
      }

      return null;
    } catch (error) {
      this.throw(error);
    }
  }

  async unbind() {
    try {
      if (this.view) {
        this._binds = false;
        this._bound = false;
        this.view.unbind();
        this.view = null;
      }
    } catch (error) {
      this.throw(error);
    }
  }

  async build() {
    try {
      if (this.view) {
        this.view.build();
      }
    } catch (error) {
      this.throw(error);
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/component/index.ts":
/*!**************************************************!*\
  !*** ../../packages/core/src/component/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasicComponent": function() { return /* reexport safe */ _basic_component_js__WEBPACK_IMPORTED_MODULE_1__.BasicComponent; },
/* harmony export */   "Component": function() { return /* reexport safe */ _component_js__WEBPACK_IMPORTED_MODULE_0__.Component; }
/* harmony export */ });
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component.js */ "../../packages/core/src/component/component.ts");
/* harmony import */ var _basic_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic-component.js */ "../../packages/core/src/component/basic-component.ts");



/***/ }),

/***/ "../../packages/core/src/components/index.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/components/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Do not export abstract components: export { TemplatesComponent } from "./templates/templates.component.js";


/***/ }),

/***/ "../../packages/core/src/components/templates/templates.component.ts":
/*!***************************************************************************!*\
  !*** ../../packages/core/src/components/templates/templates.component.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplatesComponent": function() { return /* binding */ TemplatesComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }



class TemplatesComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateAttributes", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateReady", false);
  }

  connectedCallback() {
    this.addItemsByTemplate();
    super.connectedCallback();
    this.removeTemplates();
    this.bindIfReady();
  }

  ready() {
    return super.ready() && this.templateReady;
  }
  /**
   * Called before getting attribute value, use this method to transform the attribute value if you wish
   * @param name Attribute name
   * @param value Attribute value
   */


  transformTemplateAttribute(name, value, type) {
    switch (type) {
      case "number":
        return Number(value);

      case "boolean":
        return value === "true";

      case "string":
        if (typeof value === "string") {
          return value;
        }

        if (typeof (value === null || value === void 0 ? void 0 : value.toString) === "function") {
          return value.toString();
        }

      case "object":
        return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonString)(value);
    }

    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseType)(value).value;
  }
  /**
   * Called before getting all attribute values, use this method to transform the attribute values if you wish
   * @param attributes
   */


  transformTemplateAttributes(attributes, index) {
    attributes.index = attributes.index || index;
    return attributes;
  }

  getTemplateAttributes(tpl, index) {
    const attributes = {};

    for (const attribute of this.templateAttributes) {
      const attrValue = tpl.getAttribute(attribute.name);

      if (typeof attrValue !== "string" && attribute.required) {
        console.error(new Error("template \"".concat(attribute.name, "\" attribute is required!")));
      } else {
        attributes[(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(attribute.name)] = this.transformTemplateAttribute(attribute.name, tpl.getAttribute(attribute.name));
      }
    }

    return this.transformTemplateAttributes(attributes, index);
  }

  addItemByTemplate(tpl, index) {
    const attributes = this.getTemplateAttributes(tpl, index);
    const content = tpl.innerHTML;

    if (!this.scope.items) {
      this.scope.items = [];
    }

    this.scope.items.push(_objectSpread(_objectSpread({}, attributes), {}, {
      content
    }));
  }

  addItemsByTemplate() {
    const templates = this.querySelectorAll("template, .template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      this.addItemByTemplate(tpl, index);
    }

    this.templateReady = true;
  }

  removeTemplates() {
    const templates = this.querySelectorAll("template, .template");

    for (let index = 0; index < templates.length; index++) {
      const tpl = templates[index];
      this.removeChild(tpl);
    }
  }

  hasOnlyTemplateChilds() {
    return !Array.from(this.children).some(child => {
      var _child$classList;

      return child.nodeName !== "TEMPLATE" && !((_child$classList = child.classList) !== null && _child$classList !== void 0 && _child$classList.contains("template")) && child.nodeName !== "#text";
    });
  }

}

/***/ }),

/***/ "../../packages/core/src/constants/formatter.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/constants/formatter.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FORMATTER_ARGS": function() { return /* binding */ FORMATTER_ARGS; },
/* harmony export */   "FORMATTER_SPLIT": function() { return /* binding */ FORMATTER_SPLIT; }
/* harmony export */ });
const FORMATTER_ARGS = /[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g;
const FORMATTER_SPLIT = /\s+/;

/***/ }),

/***/ "../../packages/core/src/constants/parser.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/constants/parser.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BINDING": function() { return /* binding */ BINDING; },
/* harmony export */   "DECLARATION_SPLIT": function() { return /* binding */ DECLARATION_SPLIT; },
/* harmony export */   "TEXT": function() { return /* binding */ TEXT; }
/* harmony export */ });
const TEXT = 0;
const BINDING = 1;
const DECLARATION_SPLIT = /((?:'[^']*')*(?:(?:[^|']*(?:'[^']*')+[^|']*)+|[^|]+))|^$/g;

/***/ }),

/***/ "../../packages/core/src/core.module.ts":
/*!**********************************************!*\
  !*** ../../packages/core/src/core.module.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "coreModule": function() { return /* binding */ coreModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/core/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/core/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/core/src/services/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/core/src/components/index.ts");
/* harmony import */ var _adapters_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adapters/index.js */ "../../packages/core/src/adapters/index.ts");





const coreModule = {
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_3__,
  adapters: _adapters_index_js__WEBPACK_IMPORTED_MODULE_4__,

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.CoreService.setSingleton(options);

    window.onerror = (msg, url, line, col, error) => {
      console.error(msg, url, line, col, error);
    };

    window.addEventListener("error", event => {
      console.error(event);
    });
    return this;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/contains.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/contains.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "containsFormatter": function() { return /* binding */ containsFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Returns true if an object, array or string contains an index, object, property or substring.
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const containsFormatter = {
  name: "contains",

  read(value, attr, search) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
      return value.indexOf(attr) > -1;
    } else if (Array.isArray(value)) {
      if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(attr)) {
        console.warn("[containsFormatter] The second parameter must be of type number for arrays but is " + typeof attr);
      }

      attr = Number(attr);

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(attr)) {
        if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(search)) {
          return value[attr] === search;
        } else {
          return value.indexOf(attr) !== -1;
        }
      }
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(attr)) {
        if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(search)) {
          return value[attr] === search;
        } else {
          if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(attr)) {
            console.warn("[containsFormatter] The second parameter must be of type string for objects" + typeof attr);
          }

          return Object.keys(value).indexOf(String(attr)) !== -1;
        }
      }
    }

    return false;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/empty.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/empty.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emptyFormatter": function() { return /* binding */ emptyFormatter; }
/* harmony export */ });
/* harmony import */ var _size_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./size.formatter.js */ "../../packages/core/src/formatters/array/size.formatter.ts");

const emptyFormatter = {
  name: "empty",

  read(a) {
    return _size_formatter_js__WEBPACK_IMPORTED_MODULE_0__.sizeFormatter.read(a) <= 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/first.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/first.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "firstFormatter": function() { return /* binding */ firstFormatter; }
/* harmony export */ });
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");

/**
 * Array formatter to get the first element of an array
 */

const firstFormatter = {
  name: "first",

  read(value) {
    return _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter.read(value, 0);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/get.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/array/get.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFormatter": function() { return /* binding */ getFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Get property of object or get item by index of array
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const getFormatter = {
  name: "get",

  read(value, key) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || Array.isArray(value)) {
      return value[key];
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(key)) {
        return value.charAt(key);
      }
    }

    return null;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/index.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/formatters/array/index.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _contains_formatter_js__WEBPACK_IMPORTED_MODULE_0__.containsFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _empty_formatter_js__WEBPACK_IMPORTED_MODULE_1__.emptyFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _first_formatter_js__WEBPACK_IMPORTED_MODULE_2__.firstFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _get_formatter_js__WEBPACK_IMPORTED_MODULE_3__.getFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _is_last_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isLastFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _join_formatter_js__WEBPACK_IMPORTED_MODULE_11__.joinFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _last_formatter_js__WEBPACK_IMPORTED_MODULE_5__.lastFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _overlaps_formatter_js__WEBPACK_IMPORTED_MODULE_10__.overlapsFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _random_formatter_js__WEBPACK_IMPORTED_MODULE_6__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _range_formatter_js__WEBPACK_IMPORTED_MODULE_7__.rangeFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _set_formatter_js__WEBPACK_IMPORTED_MODULE_8__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _size_formatter_js__WEBPACK_IMPORTED_MODULE_9__.sizeFormatter; }
/* harmony export */ });
/* harmony import */ var _contains_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contains.formatter.js */ "../../packages/core/src/formatters/array/contains.formatter.ts");
/* harmony import */ var _empty_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty.formatter.js */ "../../packages/core/src/formatters/array/empty.formatter.ts");
/* harmony import */ var _first_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./first.formatter.js */ "../../packages/core/src/formatters/array/first.formatter.ts");
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");
/* harmony import */ var _is_last_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-last.formatter.js */ "../../packages/core/src/formatters/array/is-last.formatter.ts");
/* harmony import */ var _last_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./last.formatter.js */ "../../packages/core/src/formatters/array/last.formatter.ts");
/* harmony import */ var _random_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./random.formatter.js */ "../../packages/core/src/formatters/array/random.formatter.ts");
/* harmony import */ var _range_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./range.formatter.js */ "../../packages/core/src/formatters/array/range.formatter.ts");
/* harmony import */ var _set_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./set.formatter.js */ "../../packages/core/src/formatters/array/set.formatter.ts");
/* harmony import */ var _size_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./size.formatter.js */ "../../packages/core/src/formatters/array/size.formatter.ts");
/* harmony import */ var _overlaps_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./overlaps.formatter.js */ "../../packages/core/src/formatters/array/overlaps.formatter.ts");
/* harmony import */ var _join_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./join.formatter.js */ "../../packages/core/src/formatters/array/join.formatter.ts");
// property / object / array formatters













/***/ }),

/***/ "../../packages/core/src/formatters/array/is-last.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/is-last.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isLastFormatter": function() { return /* binding */ isLastFormatter; }
/* harmony export */ });
/**
 * Returns true if value index is the last index of the array. Returns false if it is not the last index.
 * ```
 *  <div rv-each-image="product.images" rv-hide="product.images | last %image%"></div>
 * ```
 * @see https://help.shopify.com/themes/liquid/objects/for-loops#forloop-last
 */
const isLastFormatter = {
  name: "isLast",

  read(array, i) {
    return array.length === i + 1;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/join.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/join.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "joinFormatter": function() { return /* binding */ joinFormatter; }
/* harmony export */ });
/**
 * Joins value with a given delimeter
 */
const joinFormatter = {
  name: "join",

  read(value, delimeter) {
    return value.join(delimeter);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/last.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/last.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lastFormatter": function() { return /* binding */ lastFormatter; }
/* harmony export */ });
/* harmony import */ var _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get.formatter.js */ "../../packages/core/src/formatters/array/get.formatter.ts");

/**
 * Array formatter to get the last element of an array
 */

const lastFormatter = {
  name: "last",

  read(array) {
    return _get_formatter_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter.read(array, array.length - 1);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/overlaps.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/overlaps.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "overlapsFormatter": function() { return /* binding */ overlapsFormatter; }
/* harmony export */ });
/**
 * Returns true if an array overlaps with another array.
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */
const overlapsFormatter = {
  name: "overlaps",

  read(value, search) {
    for (const a of value) {
      for (const b of search) {
        if (a.equals && a.equals(b)) {
          return true;
        }

        if (a === b) {
          return true;
        }
      }
    }

    return false;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/random.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/array/random.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomFormatter": function() { return /* binding */ randomFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Gets back random value of array
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 *
 * Or gets back a randon number
 * Random number between 0 and 6:
 * @example <div rv-add-class='6 | random'>
 * Random number between 1 and 6:
 * @example <div rv-add-class='6 | random 1'>
 */

const randomFormatter = {
  name: "random",

  read(arrayOrMaxNumber) {
    let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    // If is array
    if (Array.isArray(arrayOrMaxNumber)) {
      return arrayOrMaxNumber[Math.floor(Math.random() * arrayOrMaxNumber.length)];
    } // If is number


    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(arrayOrMaxNumber)) {
      const max = arrayOrMaxNumber;
      return Math.floor(Math.random() * (max - min + 1) + min);
    }

    return null;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/range.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/range.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rangeFormatter": function() { return /* binding */ rangeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Array formatter to get a subarray from array
 */

const rangeFormatter = {
  name: "range",

  read(arr, start, end) {
    start = Number((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(start) ? start : 0);
    end = Number((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(end) ? end : arr.length - 1);

    if (end > arr.length - 1) {
      end = arr.length - 1;
    }

    if (start > end) {
      return [];
    }

    return arr.slice(Number(start || 0), 1 + end);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/set.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/array/set.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setFormatter": function() { return /* binding */ setFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Sets property of object, array or value
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const setFormatter = {
  name: "set",

  read(obj, key, value) {
    // the key is the value if value is not set
    if (!value) {
      value = key;
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj) || Array.isArray(obj)) {
      obj[key] = value;
    } else {
      obj = value;
    }

    return obj;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/array/size.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/array/size.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sizeFormatter": function() { return /* binding */ sizeFormatter; }
/* harmony export */ });
/**
 * Returns the size of a string (the number of characters) or an array (the number of elements).
 * @see https://help.shopify.com/themes/liquid/filters/array-filters#size
 */
const sizeFormatter = {
  name: "size",

  read(value) {
    return value && value.length ? value.length : 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/and.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/and.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* binding */ andFormatter; }
/* harmony export */ });
/**
 * a && b
 */
const andFormatter = {
  name: "and",

  read(a, b) {
    return a && b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/between.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/between.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "betweenFormatter": function() { return /* binding */ betweenFormatter; }
/* harmony export */ });
/**
 * a >= b && a <= c
 */
const betweenFormatter = {
  name: "between",

  read(num) {
    return num >= (arguments.length <= 1 ? undefined : arguments[1]) && num <= (arguments.length <= 2 ? undefined : arguments[2]);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/egt.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/egt.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "egtFormatter": function() { return /* binding */ egtFormatter; }
/* harmony export */ });
/**
 * equal or greater than
 * a >= b
 */
const egtFormatter = {
  name: "egt",

  read(a, b) {
    return a >= b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/elt.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/elt.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eltFormatter": function() { return /* binding */ eltFormatter; }
/* harmony export */ });
/**
 * euqal or lower than
 * a <= b
 */
const eltFormatter = {
  name: "elt",

  read(a, b) {
    return a <= b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/eq.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/eq.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eqFormatter": function() { return /* binding */ eqFormatter; }
/* harmony export */ });
/**
 * a === b
 */
const eqFormatter = {
  name: "eq",

  read(a, b) {
    return a === b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/gt.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/gt.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gtFormatter": function() { return /* binding */ gtFormatter; }
/* harmony export */ });
/**
 * greater than
 * a > b
 */
const gtFormatter = {
  name: "gt",

  read(a, b) {
    return a > b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/index.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/formatters/compare/index.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _and_formatter_js__WEBPACK_IMPORTED_MODULE_0__.andFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _between_formatter_js__WEBPACK_IMPORTED_MODULE_1__.betweenFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _egt_formatter_js__WEBPACK_IMPORTED_MODULE_2__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _elt_formatter_js__WEBPACK_IMPORTED_MODULE_7__.eltFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _eq_formatter_js__WEBPACK_IMPORTED_MODULE_3__.eqFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _gt_formatter_js__WEBPACK_IMPORTED_MODULE_4__.gtFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _lt_formatter_js__WEBPACK_IMPORTED_MODULE_6__.ltFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _ne_formatter_js__WEBPACK_IMPORTED_MODULE_5__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _not_formatter_js__WEBPACK_IMPORTED_MODULE_9__.notFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _or_formatter_js__WEBPACK_IMPORTED_MODULE_8__.orFormatter; }
/* harmony export */ });
/* harmony import */ var _and_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./and.formatter.js */ "../../packages/core/src/formatters/compare/and.formatter.ts");
/* harmony import */ var _between_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./between.formatter.js */ "../../packages/core/src/formatters/compare/between.formatter.ts");
/* harmony import */ var _egt_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./egt.formatter.js */ "../../packages/core/src/formatters/compare/egt.formatter.ts");
/* harmony import */ var _eq_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eq.formatter.js */ "../../packages/core/src/formatters/compare/eq.formatter.ts");
/* harmony import */ var _gt_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gt.formatter.js */ "../../packages/core/src/formatters/compare/gt.formatter.ts");
/* harmony import */ var _ne_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ne.formatter.js */ "../../packages/core/src/formatters/compare/ne.formatter.ts");
/* harmony import */ var _lt_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lt.formatter.js */ "../../packages/core/src/formatters/compare/lt.formatter.ts");
/* harmony import */ var _elt_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./elt.formatter.js */ "../../packages/core/src/formatters/compare/elt.formatter.ts");
/* harmony import */ var _or_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./or.formatter.js */ "../../packages/core/src/formatters/compare/or.formatter.ts");
/* harmony import */ var _not_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./not.formatter.js */ "../../packages/core/src/formatters/compare/not.formatter.ts");
/**
 * compare functions
 * Add useful general-purpose formatters for Rivets.js
 * Some formatters from cart.js and rivetsjs-stdlib
 * @see https://github.com/discolabs/cartjs/
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib
 * @see https://github.com/JumpLinkNetwork/shopify-productjs
 */











/***/ }),

/***/ "../../packages/core/src/formatters/compare/lt.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/lt.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ltFormatter": function() { return /* binding */ ltFormatter; }
/* harmony export */ });
/**
 * lower than
 * a < b
 */
const ltFormatter = {
  name: "lt",

  read(a, b) {
    return a < b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/ne.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/ne.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neFormatter": function() { return /* binding */ neFormatter; }
/* harmony export */ });
/**
 * a !== b
 */
const neFormatter = {
  name: "ne",

  read(a, b) {
    return a !== b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/not.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/not.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notFormatter": function() { return /* binding */ notFormatter; }
/* harmony export */ });
/**
 * !a
 */
const notFormatter = {
  name: "not",

  read(a) {
    return !a;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/compare/or.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/compare/or.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "orFormatter": function() { return /* binding */ orFormatter; }
/* harmony export */ });
/**
 * a || b
 */
const orFormatter = {
  name: "or",

  read(a, b) {
    return a || b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/index.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/formatters/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.andFormatter; },
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.appendFormatter; },
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.argsFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.betweenFormatter; },
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.booleanFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.callNameFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.capitalizeFormatter; },
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.containsFormatter; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.cutFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultFormatter; },
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.dividedByFormatter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.downcaseFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.eltFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.emptyFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.endsWithFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.eqFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.evenFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.filledFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.firstFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.gcdFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.getFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.gtFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.handleizeFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isDefinedFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.isDesktopFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isIntegerFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.isLastFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.isMobileFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.isUndefinedFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.joinFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.jsonFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.lastFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.ltFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.mapFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.matchFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.moduloFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.notFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.numberFormatFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _compare_index_js__WEBPACK_IMPORTED_MODULE_1__.orFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.osFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.overlapsFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.padStartFormatter; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.parseFormatter; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.pluralizeFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.plusFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.preferFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.prependFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.rangeFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.replaceFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _array_index_js__WEBPACK_IMPORTED_MODULE_0__.sizeFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.stripHtmlFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _special_index_js__WEBPACK_IMPORTED_MODULE_3__.ternaryFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.timesFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _type_index_js__WEBPACK_IMPORTED_MODULE_5__.toStringFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_2__.unevenFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _string_index_js__WEBPACK_IMPORTED_MODULE_4__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _array_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array/index.js */ "../../packages/core/src/formatters/array/index.ts");
/* harmony import */ var _compare_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compare/index.js */ "../../packages/core/src/formatters/compare/index.ts");
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math/index.js */ "../../packages/core/src/formatters/math/index.ts");
/* harmony import */ var _special_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./special/index.js */ "../../packages/core/src/formatters/special/index.ts");
/* harmony import */ var _string_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string/index.js */ "../../packages/core/src/formatters/string/index.ts");
/* harmony import */ var _type_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./type/index.js */ "../../packages/core/src/formatters/type/index.ts");







/***/ }),

/***/ "../../packages/core/src/formatters/math/digits.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/digits.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "digitsFormatter": function() { return /* binding */ digitsFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Just get the digits of a string, useful to remove px from css value
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const digitsFormatter = {
  name: "digits",

  read(str) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(str)) {
      return str;
    }

    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/divided-by.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/math/divided-by.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dividedByFormatter": function() { return /* binding */ dividedByFormatter; }
/* harmony export */ });
/**
 * Divides an output by a number. The output is rounded down to the nearest integer.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#divided_by
 */
const dividedByFormatter = {
  name: "dividedBy",

  read(a, b) {
    return Number(a) / Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/even.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/even.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evenFormatter": function() { return /* binding */ evenFormatter; }
/* harmony export */ });
/**
 * Check if a number is even or not
 */
const evenFormatter = {
  name: "even",

  read(num) {
    return num % 2 === 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/gcd.formatter.ts":
/*!****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/gcd.formatter.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gcdFormatter": function() { return /* binding */ gcdFormatter; }
/* harmony export */ });
/**
 * Greatest common divisor (GCD) useful to calculate a ratio
 * @see https://stackoverflow.com/a/1186465/1465919
 */
const _gcd = (a, b) => {
  return b === 0 ? a : _gcd(b, a % b);
};

const gcdFormatter = {
  name: "gcd",
  read: _gcd
};

/***/ }),

/***/ "../../packages/core/src/formatters/math/index.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/formatters/math/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _digits_formatter_js__WEBPACK_IMPORTED_MODULE_8__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _divided_by_formatter_js__WEBPACK_IMPORTED_MODULE_3__.dividedByFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _even_formatter_js__WEBPACK_IMPORTED_MODULE_6__.evenFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _gcd_formatter_js__WEBPACK_IMPORTED_MODULE_5__.gcdFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _minus_formatter_js__WEBPACK_IMPORTED_MODULE_1__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _modulo_formatter_js__WEBPACK_IMPORTED_MODULE_4__.moduloFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _plus_formatter_js__WEBPACK_IMPORTED_MODULE_0__.plusFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _times_formatter_js__WEBPACK_IMPORTED_MODULE_2__.timesFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _uneven_formatter_js__WEBPACK_IMPORTED_MODULE_7__.unevenFormatter; }
/* harmony export */ });
/* harmony import */ var _plus_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plus.formatter.js */ "../../packages/core/src/formatters/math/plus.formatter.ts");
/* harmony import */ var _minus_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./minus.formatter.js */ "../../packages/core/src/formatters/math/minus.formatter.ts");
/* harmony import */ var _times_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./times.formatter.js */ "../../packages/core/src/formatters/math/times.formatter.ts");
/* harmony import */ var _divided_by_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./divided-by.formatter.js */ "../../packages/core/src/formatters/math/divided-by.formatter.ts");
/* harmony import */ var _modulo_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modulo.formatter.js */ "../../packages/core/src/formatters/math/modulo.formatter.ts");
/* harmony import */ var _gcd_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gcd.formatter.js */ "../../packages/core/src/formatters/math/gcd.formatter.ts");
/* harmony import */ var _even_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./even.formatter.js */ "../../packages/core/src/formatters/math/even.formatter.ts");
/* harmony import */ var _uneven_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./uneven.formatter.js */ "../../packages/core/src/formatters/math/uneven.formatter.ts");
/* harmony import */ var _digits_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./digits.formatter.js */ "../../packages/core/src/formatters/math/digits.formatter.ts");
// math formatters










/***/ }),

/***/ "../../packages/core/src/formatters/math/minus.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/minus.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minusFormatter": function() { return /* binding */ minusFormatter; }
/* harmony export */ });
/**
 * Subtracts a number from an output.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#minus
 */
const minusFormatter = {
  name: "minus",

  read(a, b) {
    return Number(a) - Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/modulo.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/modulo.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moduloFormatter": function() { return /* binding */ moduloFormatter; }
/* harmony export */ });
/**
 * Divides an value by a number and returns the remainder.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#modulo
 */
const moduloFormatter = {
  name: "modulo",

  read(a, b) {
    return Number(a) % Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/plus.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/math/plus.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "plusFormatter": function() { return /* binding */ plusFormatter; }
/* harmony export */ });
/**
 * Adds a number to an value.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#plus
 */
const plusFormatter = {
  name: "plus",

  read(a, b) {
    return Number(a) + Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/times.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/times.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "timesFormatter": function() { return /* binding */ timesFormatter; }
/* harmony export */ });
/**
 * Multiplies an value by a number.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#times
 */
const timesFormatter = {
  name: "times",

  read(a, b) {
    return Number(a) * Number(b);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/math/uneven.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/math/uneven.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unevenFormatter": function() { return /* binding */ unevenFormatter; }
/* harmony export */ });
const unevenFormatter = {
  name: "uneven",

  read(num) {
    return num % 2 !== 0;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/args.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/args.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argsFormatter": function() { return /* binding */ argsFormatter; }
/* harmony export */ });
/**
 * Sets arguments to a function without directly call them
 * ```html
 * <button rv-on-click="sum | args 1 2"></button>
 * ```
 * @param fn The function the event handler should call
 * @param fnArgs the parameters you wish to get called the function with
 */
const argsFormatter = {
  name: "args",

  read(fn) {
    for (var _len = arguments.length, fnArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fnArgs[_key - 1] = arguments[_key];
    }

    return (event, scope, el, binder) => {
      // append the event handler args to passed args
      fnArgs.push(event);
      fnArgs.push(scope);
      fnArgs.push(el);
      fnArgs.push(binder);
      return fn.apply(this, fnArgs);
    };
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/call-name.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/call-name.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callNameFormatter": function() { return /* binding */ callNameFormatter; }
/* harmony export */ });
/**
 * Calls a function by name with arguments
 * @param object The object that contains the function you wish to call
 * @param name The name of the function you wish to call
 * @param args the parameters you wish to call the function with
 */
const callNameFormatter = {
  name: "call-name",
  read: function (object, name) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return object[name](...args);
  }
};

/***/ }),

/***/ "../../packages/core/src/formatters/special/call.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/call.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callFormatter": function() { return /* binding */ callFormatter; }
/* harmony export */ });
// babel misinterprets the "this" fake parameter, so we define it in this interfaces

/**
 * Calls a function with arguments
 * @param fn The function you wish to call
 * @param args the parameters you wish to call the function with
 */
const callFormatter = {
  name: "call",

  read(fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(this, args);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/debug.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/debug.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debugFormatter": function() { return /* binding */ debugFormatter; }
/* harmony export */ });
const debugFormatter = {
  name: "debug",

  read(toPrint) {
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "debug";
    console[level](toPrint);
    return toPrint;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/default.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/default.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultFormatter": function() { return /* binding */ defaultFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Sets a default value if the first value is not set
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

const defaultFormatter = {
  name: "default",

  read(value, defaultValue) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(value)) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
        if (value.length > 0) {
          return value;
        } else {
          return defaultValue;
        }
      }

      if (value === null) {
        return defaultValue;
      }

      return value;
    }

    return defaultValue;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/index.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/formatters/special/index.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _args_formatter_js__WEBPACK_IMPORTED_MODULE_0__.argsFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _call_formatter_js__WEBPACK_IMPORTED_MODULE_5__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _call_name_formatter_js__WEBPACK_IMPORTED_MODULE_6__.callNameFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _debug_formatter_js__WEBPACK_IMPORTED_MODULE_1__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _default_formatter_js__WEBPACK_IMPORTED_MODULE_2__.defaultFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _is_desktop_formatter_js__WEBPACK_IMPORTED_MODULE_3__.isDesktopFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _is_mobile_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isMobileFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _map_formatter_js__WEBPACK_IMPORTED_MODULE_7__.mapFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _os_formatter_js__WEBPACK_IMPORTED_MODULE_8__.osFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _prefer_formatter_js__WEBPACK_IMPORTED_MODULE_9__.preferFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _ternary_formatter_js__WEBPACK_IMPORTED_MODULE_10__.ternaryFormatter; }
/* harmony export */ });
/* harmony import */ var _args_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./args.formatter.js */ "../../packages/core/src/formatters/special/args.formatter.ts");
/* harmony import */ var _debug_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug.formatter.js */ "../../packages/core/src/formatters/special/debug.formatter.ts");
/* harmony import */ var _default_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./default.formatter.js */ "../../packages/core/src/formatters/special/default.formatter.ts");
/* harmony import */ var _is_desktop_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-desktop.formatter.js */ "../../packages/core/src/formatters/special/is-desktop.formatter.ts");
/* harmony import */ var _is_mobile_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-mobile.formatter.js */ "../../packages/core/src/formatters/special/is-mobile.formatter.ts");
/* harmony import */ var _call_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./call.formatter.js */ "../../packages/core/src/formatters/special/call.formatter.ts");
/* harmony import */ var _call_name_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./call-name.formatter.js */ "../../packages/core/src/formatters/special/call-name.formatter.ts");
/* harmony import */ var _map_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map.formatter.js */ "../../packages/core/src/formatters/special/map.formatter.ts");
/* harmony import */ var _os_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./os.formatter.js */ "../../packages/core/src/formatters/special/os.formatter.ts");
/* harmony import */ var _prefer_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./prefer.formatter.js */ "../../packages/core/src/formatters/special/prefer.formatter.ts");
/* harmony import */ var _ternary_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ternary.formatter.js */ "../../packages/core/src/formatters/special/ternary.formatter.ts");
// special helper formatters












/***/ }),

/***/ "../../packages/core/src/formatters/special/is-desktop.formatter.ts":
/*!**************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/is-desktop.formatter.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDesktopFormatter": function() { return /* binding */ isDesktopFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const isDesktopFormatter = {
  name: "is-desktop",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isDesktop)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/is-mobile.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/special/is-mobile.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isMobileFormatter": function() { return /* binding */ isMobileFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const isMobileFormatter = {
  name: "is-mobile",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isMobile)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/map.formatter.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/formatters/special/map.formatter.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapFormatter": function() { return /* binding */ mapFormatter; }
/* harmony export */ });
/* eslint-disable prefer-spread */

/* eslint-disable prefer-rest-params */

/**
 * Calls a method on the given object. The first parameters defines the object and the second the methodname.
 * Target will be passed as the first argument to the method.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
 * @example
 * ```html
 * <span rv-text="10 | map 'Math' 'sin'"></span>
 * ```
 * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
 */
const mapFormatter = {
  name: "map",

  /**
   * Calls a method on the given object. The first parameters defines the object and the second the method name.
   * Target will be passed as the first argument to the method.
   * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
   * @example
   * ```html
   * <span rv-text="10 | map 'Math' 'sin'"></span>
   * ```
   * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
   * @param target
   * @param obj
   * @param prop
   */
  read(target, obj, prop) {
    const args = Array.prototype.slice.call(arguments);
    args.splice(1, 2);
    return obj[prop].apply(obj, args);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/os.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/special/os.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "osFormatter": function() { return /* binding */ osFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

const osFormatter = {
  name: "os",

  read() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.getOS)();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/prefer.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/prefer.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "preferFormatter": function() { return /* binding */ preferFormatter; }
/* harmony export */ });
/**
 * Prefers the first formatter parameter before left parameter
 */
const preferFormatter = {
  name: "prefer",

  read(value, preferValue) {
    return preferValue || value;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/special/ternary.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/special/ternary.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ternaryFormatter": function() { return /* binding */ ternaryFormatter; }
/* harmony export */ });
/**
 * a ? b : c
 */
const ternaryFormatter = {
  name: "ternary",

  read(condition, yes, no) {
    return condition ? yes : no;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/append.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/append.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendFormatter": function() { return /* binding */ appendFormatter; }
/* harmony export */ });
/**
 * Appends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#append
 */
const appendFormatter = {
  name: "append",

  read(a, b) {
    return a + b;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/capitalize.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/capitalize.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "capitalizeFormatter": function() { return /* binding */ capitalizeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Uppercases the first letter of a string
 */

const capitalizeFormatter = {
  name: "capitalize",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.capitalize)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/cut.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/string/cut.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cutFormatter": function() { return /* binding */ cutFormatter; }
/* harmony export */ });
/**
 * Cats a string
 * If the first parameter is -1 the string will not be uncut
 * @example
 * <p rv-text="'abcdefghijklnmopqrstuvwxyzabcdefghijklnmopqrstuvwxyz' | cut 3 '...'"></p>
 * -> <p>abc...</p>
 *
 * <p rv-text="'abcdefghijklnmopqrstuvwxyzabcdefghijklnmopqrstuvwxyz' | cut 3"></p>
 * -> <p>abc</p>
 */
const cutFormatter = {
  name: "cut",

  read(str, cutAt) {
    let delimitation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

    if (!str) {
      return "";
    }

    if (typeof str !== "string") {
      console.warn("[cutFormatter] Value must be of type string");
      return str;
    }

    if (str.length > cutAt) {
      return str.substring(cutAt, cutAt === -1 ? undefined : -1) + delimitation;
    } else {
      return str;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/downcase.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/downcase.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "downcaseFormatter": function() { return /* binding */ downcaseFormatter; }
/* harmony export */ });
/**
 * Converts a string into lowercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#downcase
 */
const downcaseFormatter = {
  name: "downcase",

  read(str) {
    return str.toLowerCase();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/ends-with.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/ends-with.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endsWithFormatter": function() { return /* binding */ endsWithFormatter; }
/* harmony export */ });
/**
 * Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this).
 * Otherwise returns false.
 *
 * @example
 * <p rv-if="'abcdefg' | ends-with 'efg'">Hello World!</p>
 * -> <p>Hello World!</p>
 */
const endsWithFormatter = {
  name: "ends-with",

  read(str, checkStart) {
    if (typeof str !== "string") {
      console.warn("[endsWithFormatter] Value must be of type string");
      return str;
    }

    return str.endsWith(checkStart);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/filled.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/filled.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filledFormatter": function() { return /* binding */ filledFormatter; }
/* harmony export */ });
/* harmony import */ var _array_empty_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array/empty.formatter.js */ "../../packages/core/src/formatters/array/empty.formatter.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


/**
 * Check if value is a string and not empty
 */

const filledFormatter = {
  name: "filled",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isString)(str) && !_array_empty_formatter_js__WEBPACK_IMPORTED_MODULE_0__.emptyFormatter.read(str.replace(/\s/g, ""));
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/handleize.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/handleize.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleizeFormatter": function() { return /* binding */ handleizeFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Formats a string into a handle.
 * E.g. '100% M & Ms!!!' -> 100-m-ms
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#handle-handleize
 */

const handleizeFormatter = {
  name: "handleize",

  read(str) {
    if (!str) {
      console.warn("[handleizeFormatter] str is not set");
      return "";
    }

    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.handleize)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/formatters/string/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _append_formatter_js__WEBPACK_IMPORTED_MODULE_0__.appendFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _capitalize_formatter_js__WEBPACK_IMPORTED_MODULE_1__.capitalizeFormatter; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _cut_formatter_js__WEBPACK_IMPORTED_MODULE_2__.cutFormatter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _downcase_formatter_js__WEBPACK_IMPORTED_MODULE_3__.downcaseFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _ends_with_formatter_js__WEBPACK_IMPORTED_MODULE_4__.endsWithFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _filled_formatter_js__WEBPACK_IMPORTED_MODULE_5__.filledFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _handleize_formatter_js__WEBPACK_IMPORTED_MODULE_6__.handleizeFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _match_formatter_js__WEBPACK_IMPORTED_MODULE_7__.matchFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _number_format_formatter_js__WEBPACK_IMPORTED_MODULE_10__.numberFormatFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _pad_end_formatter_js__WEBPACK_IMPORTED_MODULE_9__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _pad_start_formatter_js__WEBPACK_IMPORTED_MODULE_8__.padStartFormatter; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _pluralize_formatter_js__WEBPACK_IMPORTED_MODULE_11__.pluralizeFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _prepend_formatter_js__WEBPACK_IMPORTED_MODULE_12__.prependFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _replace_first_formatter_js__WEBPACK_IMPORTED_MODULE_15__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _replace_formatter_js__WEBPACK_IMPORTED_MODULE_14__.replaceFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _slice_formatter_js__WEBPACK_IMPORTED_MODULE_16__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _starts_with_formatter_js__WEBPACK_IMPORTED_MODULE_17__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _strip_formatter_js__WEBPACK_IMPORTED_MODULE_18__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _strip_html_formatter_js__WEBPACK_IMPORTED_MODULE_19__.stripHtmlFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _upcase_formatter_js__WEBPACK_IMPORTED_MODULE_13__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _append_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./append.formatter.js */ "../../packages/core/src/formatters/string/append.formatter.ts");
/* harmony import */ var _capitalize_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./capitalize.formatter.js */ "../../packages/core/src/formatters/string/capitalize.formatter.ts");
/* harmony import */ var _cut_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cut.formatter.js */ "../../packages/core/src/formatters/string/cut.formatter.ts");
/* harmony import */ var _downcase_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./downcase.formatter.js */ "../../packages/core/src/formatters/string/downcase.formatter.ts");
/* harmony import */ var _ends_with_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ends-with.formatter.js */ "../../packages/core/src/formatters/string/ends-with.formatter.ts");
/* harmony import */ var _filled_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./filled.formatter.js */ "../../packages/core/src/formatters/string/filled.formatter.ts");
/* harmony import */ var _handleize_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handleize.formatter.js */ "../../packages/core/src/formatters/string/handleize.formatter.ts");
/* harmony import */ var _match_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./match.formatter.js */ "../../packages/core/src/formatters/string/match.formatter.ts");
/* harmony import */ var _pad_start_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pad-start.formatter.js */ "../../packages/core/src/formatters/string/pad-start.formatter.ts");
/* harmony import */ var _pad_end_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pad-end.formatter.js */ "../../packages/core/src/formatters/string/pad-end.formatter.ts");
/* harmony import */ var _number_format_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./number-format.formatter.js */ "../../packages/core/src/formatters/string/number-format.formatter.ts");
/* harmony import */ var _pluralize_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pluralize.formatter.js */ "../../packages/core/src/formatters/string/pluralize.formatter.ts");
/* harmony import */ var _prepend_formatter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./prepend.formatter.js */ "../../packages/core/src/formatters/string/prepend.formatter.ts");
/* harmony import */ var _upcase_formatter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./upcase.formatter.js */ "../../packages/core/src/formatters/string/upcase.formatter.ts");
/* harmony import */ var _replace_formatter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./replace.formatter.js */ "../../packages/core/src/formatters/string/replace.formatter.ts");
/* harmony import */ var _replace_first_formatter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./replace-first.formatter.js */ "../../packages/core/src/formatters/string/replace-first.formatter.ts");
/* harmony import */ var _slice_formatter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./slice.formatter.js */ "../../packages/core/src/formatters/string/slice.formatter.ts");
/* harmony import */ var _starts_with_formatter_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./starts-with.formatter.js */ "../../packages/core/src/formatters/string/starts-with.formatter.ts");
/* harmony import */ var _strip_formatter_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./strip.formatter.js */ "../../packages/core/src/formatters/string/strip.formatter.ts");
/* harmony import */ var _strip_html_formatter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./strip-html.formatter.js */ "../../packages/core/src/formatters/string/strip-html.formatter.ts");
// string formatters





















/***/ }),

/***/ "../../packages/core/src/formatters/string/match.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/match.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matchFormatter": function() { return /* binding */ matchFormatter; }
/* harmony export */ });
const matchFormatter = {
  name: "match",

  read(a, regexp, flags) {
    if (!a || !regexp) {
      return false;
    }

    return a.match(new RegExp(regexp, flags));
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/number-format.formatter.ts":
/*!****************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/number-format.formatter.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "numberFormatFormatter": function() { return /* binding */ numberFormatFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/to-decimal.formatter.js */ "../../packages/core/src/formatters/type/to-decimal.formatter.ts");
/* harmony import */ var _type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/is-integer.formatter.js */ "../../packages/core/src/formatters/type/is-integer.formatter.ts");


 // TODO set by current locale

const DEFAULT_DECIMAL_SEPARATOR = ".";
const DEFAULT_THOUSAND_SEPARATOR = "'";
const DEFAULT_PRECISION = 2;
/**
 * Returns a formatted version of the target as string.
 * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
 */

const numberFormatFormatter = {
  name: "numberFormat",

  /**
   * Returns a formatted version of the target as string.
   * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
   * @param target
   * @param precision (default: 2)
   * @param decimalSeparator (default: ".")
   * @param thousandSeparator (default: "'")
   */
  read(target) {
    let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PRECISION;
    let decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DECIMAL_SEPARATOR;
    let thousandSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THOUSAND_SEPARATOR;

    if (!_type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toDecimalFormatter.read) {
      throw new Error("toDecimalFormatter must have a read function");
    }

    if (!_type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isIntegerFormatter.read) {
      throw new Error("isIntegerFormatter must have a read function");
    }

    target = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(target) ? target : _type_to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toDecimalFormatter.read(target);

    if (!_type_is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isIntegerFormatter.read(precision)) {
      precision = DEFAULT_PRECISION;
    }
    /*
     * Thanks to user2823670
     * http://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding
     */


    let retStr = (+(Math.round(+(Math.abs(target) + "e" + precision)) + "e" + -precision)).toFixed(precision);
    if (target < 0) retStr = "-" + retStr;
    /**
     * Thanks to Elias Zamaria
     * http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
     */

    const ret = retStr.split(".");

    if (ret.length == 2) {
      return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator) + decimalSeparator + ret[1];
    }

    return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pad-end.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pad-end.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padEndFormatter": function() { return /* binding */ padEndFormatter; }
/* harmony export */ });
/**
 * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
 * The padding is applied from the end of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
 */
const padEndFormatter = {
  name: "padEnd",

  /**
   *
   * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
   * The padding is applied from the end of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
   *
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is lower than `str.length`, the current string will be returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within `targetLength`, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is " " (`U+0020`).
   */
  read(target) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padEnd(length, padString);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pad-start.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pad-start.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padStartFormatter": function() { return /* binding */ padStartFormatter; }
/* harmony export */ });
/**
 * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
 * The padding is applied from the start of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
 */
const padStartFormatter = {
  name: "padStart",

  /**
   * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
   * The padding is applied from the start of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is less than `str.length`, then `str` is returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within the `targetLength`, it will be truncated from the end. The default value is `" "` (`U+0020 'SPACE'`).
   */
  read(target) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padStart(length, padString);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/pluralize.formatter.ts":
/*!************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/pluralize.formatter.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pluralizeFormatter": function() { return /* binding */ pluralizeFormatter; }
/* harmony export */ });
const pluralizeFormatter = {
  name: "pluralize",

  read(input, singular, plural) {
    if (plural === null) {
      plural = singular + "s";
    }

    if (Array.isArray(input)) {
      input = input.length;
    }

    if (input === 1) {
      return singular;
    } else {
      return plural;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/prepend.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/prepend.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prependFormatter": function() { return /* binding */ prependFormatter; }
/* harmony export */ });
/**
 * Prepends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#prepend
 */
const prependFormatter = {
  name: "prepend",

  read(a, b) {
    return b + a;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/replace-first.formatter.ts":
/*!****************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/replace-first.formatter.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceFirstFormatter": function() { return /* binding */ replaceFirstFormatter; }
/* harmony export */ });
/* tslint:disable:variable-name */

/**
 * Replaces the first occurrence of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace_first
 */
const replaceFirstFormatter = {
  name: "replaceFirst",

  read(str, value, replaceValue) {
    return str.replace(value, replaceValue);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/replace.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/replace.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceFormatter": function() { return /* binding */ replaceFormatter; }
/* harmony export */ });
/**
 * Replaces all occurrences of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace
 */
const replaceFormatter = {
  name: "replace",

  read(str, value, replaceValue) {
    return str.replace(new RegExp(value, "g"), replaceValue);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/slice.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/slice.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sliceFormatter": function() { return /* binding */ sliceFormatter; }
/* harmony export */ });
/**
 * The `slice` formatter returns a substring, starting at the specified index.
 * An optional second parameter can be passed to specify the length of the substring.
 * If no second parameter is given, the substring continues to the end of string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#slice
 */
const sliceFormatter = {
  name: "slice",

  read(value, start, end) {
    return value.slice(start, end);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/starts-with.formatter.ts":
/*!**************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/starts-with.formatter.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "startsWithFormatter": function() { return /* binding */ startsWithFormatter; }
/* harmony export */ });
/**
 * Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position.
 * Otherwise returns false.
 *
 * @example
 * <p rv-if="'abcdefg' | starts-with 'abc'">Hello World!</p>
 * -> <p>Hello World!</p>
 */
const startsWithFormatter = {
  name: "starts-with",

  read(str, checkStart) {
    if (typeof str !== "string") {
      console.warn("[startsWithFormatter] Value must be of type string");
      return str;
    }

    return str.startsWith(checkStart);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/strip-html.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/string/strip-html.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripHtmlFormatter": function() { return /* binding */ stripHtmlFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Strips all HTML tags from a string.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#strip_html
 */

const stripHtmlFormatter = {
  name: "strip-html",

  read(html) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.stripHtml)(html);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/strip.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/strip.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripFormatter": function() { return /* binding */ stripFormatter; }
/* harmony export */ });
/**
 * Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#strip
 */
const stripFormatter = {
  name: "strip",

  read(str) {
    return str.trim();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/string/upcase.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/string/upcase.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "upcaseFormatter": function() { return /* binding */ upcaseFormatter; }
/* harmony export */ });
/**
 * Converts a string into uppercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#upcase
 */
const upcaseFormatter = {
  name: "upcase",

  read(str) {
    return str.toUpperCase();
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/boolean.formatter.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/boolean.formatter.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanFormatter": function() { return /* binding */ booleanFormatter; }
/* harmony export */ });
/**
 * Converts a variable to boolean
 */
const booleanFormatter = {
  name: "boolean",

  read(value) {
    if (value === "true") {
      return true;
    } else if (value === "false") {
      return false;
    } else {
      return !!value;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/index.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/formatters/type/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _boolean_formatter_js__WEBPACK_IMPORTED_MODULE_0__.booleanFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _is_array_formatter_js__WEBPACK_IMPORTED_MODULE_1__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _is_boolean_formatter_js__WEBPACK_IMPORTED_MODULE_2__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _is_defined_formatter_js__WEBPACK_IMPORTED_MODULE_3__.isDefinedFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_4__.isIntegerFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _is_number_formatter_js__WEBPACK_IMPORTED_MODULE_5__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _is_object_formatter_js__WEBPACK_IMPORTED_MODULE_6__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _is_string_formatter_js__WEBPACK_IMPORTED_MODULE_7__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _is_undefined_formatter_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _json_formatter_js__WEBPACK_IMPORTED_MODULE_9__.jsonFormatter; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _parse_formatter_js__WEBPACK_IMPORTED_MODULE_10__.parseFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _to_base64_formatter_js__WEBPACK_IMPORTED_MODULE_11__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_13__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_14__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_15__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _type_to_number_formatter_js__WEBPACK_IMPORTED_MODULE_16__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _to_string_formatter_js__WEBPACK_IMPORTED_MODULE_12__.toStringFormatter; }
/* harmony export */ });
/* harmony import */ var _boolean_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boolean.formatter.js */ "../../packages/core/src/formatters/type/boolean.formatter.ts");
/* harmony import */ var _is_array_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-array.formatter.js */ "../../packages/core/src/formatters/type/is-array.formatter.ts");
/* harmony import */ var _is_boolean_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is-boolean.formatter.js */ "../../packages/core/src/formatters/type/is-boolean.formatter.ts");
/* harmony import */ var _is_defined_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-defined.formatter.js */ "../../packages/core/src/formatters/type/is-defined.formatter.ts");
/* harmony import */ var _is_integer_formatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-integer.formatter.js */ "../../packages/core/src/formatters/type/is-integer.formatter.ts");
/* harmony import */ var _is_number_formatter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is-number.formatter.js */ "../../packages/core/src/formatters/type/is-number.formatter.ts");
/* harmony import */ var _is_object_formatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./is-object.formatter.js */ "../../packages/core/src/formatters/type/is-object.formatter.ts");
/* harmony import */ var _is_string_formatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./is-string.formatter.js */ "../../packages/core/src/formatters/type/is-string.formatter.ts");
/* harmony import */ var _is_undefined_formatter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./is-undefined.formatter.js */ "../../packages/core/src/formatters/type/is-undefined.formatter.ts");
/* harmony import */ var _json_formatter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./json.formatter.js */ "../../packages/core/src/formatters/type/json.formatter.ts");
/* harmony import */ var _parse_formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parse.formatter.js */ "../../packages/core/src/formatters/type/parse.formatter.ts");
/* harmony import */ var _to_base64_formatter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./to-base64.formatter.js */ "../../packages/core/src/formatters/type/to-base64.formatter.ts");
/* harmony import */ var _to_string_formatter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./to-string.formatter.js */ "../../packages/core/src/formatters/type/to-string.formatter.ts");
/* harmony import */ var _to_decimal_formatter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./to-decimal.formatter.js */ "../../packages/core/src/formatters/type/to-decimal.formatter.ts");
/* harmony import */ var _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./to-float.formatter.js */ "../../packages/core/src/formatters/type/to-float.formatter.ts");
/* harmony import */ var _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./to-integer.formatter.js */ "../../packages/core/src/formatters/type/to-integer.formatter.ts");
/* harmony import */ var _type_to_number_formatter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../type/to-number.formatter.js */ "../../packages/core/src/formatters/type/to-number.formatter.ts");
// property / object formatters


















/***/ }),

/***/ "../../packages/core/src/formatters/type/is-array.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-array.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayFormatter": function() { return /* binding */ isArrayFormatter; }
/* harmony export */ });
/**
 * Checks if value is an array
 */
const isArrayFormatter = {
  name: "is-array",
  read: Array.isArray
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-boolean.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-boolean.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBooleanFormatter": function() { return /* binding */ isBooleanFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is an boolean
 */

const isBooleanFormatter = {
  name: "is-boolean",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isBoolean
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-defined.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-defined.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDefinedFormatter": function() { return /* binding */ isDefinedFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is defined
 */

const isDefinedFormatter = {
  name: "is-defined",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isDefined
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-integer.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-integer.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIntegerFormatter": function() { return /* binding */ isIntegerFormatter; }
/* harmony export */ });
/**
 * Checks if value is a number
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L82
 */
const isIntegerFormatter = {
  name: "is-integer",

  read(n) {
    /**
     * Thanks a lot to Dagg Nabbit
     * http://stackoverflow.com/questions/3885817/how-to-check-if-a-number-is-float-or-integer
     */
    return n === +n && n === (n | 0);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-number.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-number.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumberFormatter": function() { return /* binding */ isNumberFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is a number
 */

const isNumberFormatter = {
  name: "is-number",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-object.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-object.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObjectFormatter": function() { return /* binding */ isObjectFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Checks if value is a object
 */

const isObjectFormatter = {
  name: "is-object",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-string.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-string.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isStringFormatter": function() { return /* binding */ isStringFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Check if value is a string
 */

const isStringFormatter = {
  name: "is-string",

  read(str) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isString)(str);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/is-undefined.formatter.ts":
/*!*************************************************************************!*\
  !*** ../../packages/core/src/formatters/type/is-undefined.formatter.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUndefinedFormatter": function() { return /* binding */ isUndefinedFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Check if value is undefined
 */

const isUndefinedFormatter = {
  name: "is-undefined",
  read: _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined
};

/***/ }),

/***/ "../../packages/core/src/formatters/type/json.formatter.ts":
/*!*****************************************************************!*\
  !*** ../../packages/core/src/formatters/type/json.formatter.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jsonFormatter": function() { return /* binding */ jsonFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

/**
 * Converts a string into a JSON string.
 */

const jsonFormatter = {
  name: "json",

  read(object) {
    let space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let replaceSingleQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(object, space, replaceSingleQuote);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/parse.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/formatters/type/parse.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseFormatter": function() { return /* binding */ parseFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * parse json, base64 or any other value string to to its real value
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 */

const parseFormatter = {
  name: "parse",

  read(str) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(str) || Array.isArray(str) || typeof str === "boolean" || typeof str === "number") {
      console.warn("[parseFormatter] You do not need to parse the value because since it already been parsed");
      return str;
    }

    if (typeof str === "string") {
      return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.parseType)(str, true).value;
    } else {
      return null;
    }
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-base64.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-base64.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toBase64Formatter": function() { return /* binding */ toBase64Formatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");

/**
 * Decodes a string into a base64 string.
 */

const toBase64Formatter = {
  name: "toBase64",

  read(object) {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.toBase64)(object);
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-decimal.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-decimal.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toDecimalFormatter": function() { return /* binding */ toDecimalFormatter; }
/* harmony export */ });
/* harmony import */ var _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-integer.formatter.js */ "../../packages/core/src/formatters/type/to-integer.formatter.ts");
/* harmony import */ var _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-float.formatter.js */ "../../packages/core/src/formatters/type/to-float.formatter.ts");


const toDecimalFormatter = {
  name: "to-decimal",

  read(target) {
    if (!_to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__.toIntegerFormatter.read) {
      throw new Error("toIntegerFormatter must have a read function");
    }

    if (!_to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toFloatFormatter.read) {
      throw new Error("toFloatFormatter must have a read function");
    }

    const retI = _to_integer_formatter_js__WEBPACK_IMPORTED_MODULE_0__.toIntegerFormatter.read(target * 1);
    const retF = _to_float_formatter_js__WEBPACK_IMPORTED_MODULE_1__.toFloatFormatter.read(target);
    return retI == retF ? retI : retF;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-float.formatter.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-float.formatter.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toFloatFormatter": function() { return /* binding */ toFloatFormatter; }
/* harmony export */ });
/**
 * Returns the float representation of the given target
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L133
 */
const toFloatFormatter = {
  name: "to-float",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read(target) {
    const ret = parseFloat(target * 1.0);
    return isNaN(ret) ? 0.0 : ret;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-integer.formatter.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-integer.formatter.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toIntegerFormatter": function() { return /* binding */ toIntegerFormatter; }
/* harmony export */ });
/**
 * Returns the integer representation of the given target.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L128
 */
const toIntegerFormatter = {
  name: "to-integer",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read(target) {
    const ret = parseInt(target * 1, 10);
    return isNaN(ret) ? 0 : ret;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-number.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-number.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toNumberFormatter": function() { return /* binding */ toNumberFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Parse a string to number / float
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const toNumberFormatter = {
  name: "to-number",

  read(str, def) {
    const num = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(str); // If default value is set return the default value if num is 0, null or undefined

    if (def) {
      return num ? num : def;
    }

    return num;
  }

};

/***/ }),

/***/ "../../packages/core/src/formatters/type/to-string.formatter.ts":
/*!**********************************************************************!*\
  !*** ../../packages/core/src/formatters/type/to-string.formatter.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toStringFormatter": function() { return /* binding */ toStringFormatter; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Parses a value to string
 * @param value The value you want to parse to string
 * @param def Default value if value is undefined
 */

const toStringFormatter = {
  name: "to-string",

  read(value, def) {
    // If value is an array convert each value in array to string
    if (Array.isArray(value)) {
      for (const i in value) {
        if (value[i]) {
          value[i] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value[i]);
        }
      }
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
      for (const key in value) {
        value[key] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value[key]);
      }
    } else {
      value = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.getString)(value);
    } // If default value is set return the default value if num is 0, null or undefined


    if (def) {
      return value ? value : def;
    }

    return value;
  }

};

/***/ }),

/***/ "../../packages/core/src/index.ts":
/*!****************************************!*\
  !*** ../../packages/core/src/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_0__.Adapter; },
/* harmony export */   "AdapterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.AdapterService; },
/* harmony export */   "AddClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AddClassBinder; },
/* harmony export */   "AnimateStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AnimateStarBinder; },
/* harmony export */   "AssignBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AssignBinder; },
/* harmony export */   "AssignPropertyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AssignPropertyBinder; },
/* harmony export */   "AttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.AttributeBinder; },
/* harmony export */   "BasicComponent": function() { return /* reexport safe */ _component_index_js__WEBPACK_IMPORTED_MODULE_4__.BasicComponent; },
/* harmony export */   "Binder": function() { return /* reexport safe */ _binder_js__WEBPACK_IMPORTED_MODULE_8__.Binder; },
/* harmony export */   "BindersService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.BindersService; },
/* harmony export */   "BlockBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.BlockBinder; },
/* harmony export */   "CheckedBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.CheckedBinder; },
/* harmony export */   "ClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ClassStarBinder; },
/* harmony export */   "Component": function() { return /* reexport safe */ _component_index_js__WEBPACK_IMPORTED_MODULE_4__.Component; },
/* harmony export */   "ComponentAttributeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ComponentAttributeBinder; },
/* harmony export */   "ComponentService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ComponentService; },
/* harmony export */   "CoreService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.CoreService; },
/* harmony export */   "DisabledBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.DisabledBinder; },
/* harmony export */   "EachStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.EachStarBinder; },
/* harmony export */   "ElementBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ElementBinder; },
/* harmony export */   "EnabledBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.EnabledBinder; },
/* harmony export */   "FlexSortChildsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.FlexSortChildsBinder; },
/* harmony export */   "FormatterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.FormatterService; },
/* harmony export */   "HideBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.HideBinder; },
/* harmony export */   "HtmlBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.HtmlBinder; },
/* harmony export */   "HttpService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.HttpService; },
/* harmony export */   "IfBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.IfBinder; },
/* harmony export */   "LifecycleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.LifecycleService; },
/* harmony export */   "MaxlengthBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.MaxlengthBinder; },
/* harmony export */   "NoDragBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.NoDragBinder; },
/* harmony export */   "OnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.OnEventBinder; },
/* harmony export */   "ParentBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ParentBinder; },
/* harmony export */   "ReadonlyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ReadonlyBinder; },
/* harmony export */   "RemoveClassBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.RemoveClassBinder; },
/* harmony export */   "Riba": function() { return /* reexport safe */ _riba_js__WEBPACK_IMPORTED_MODULE_12__.Riba; },
/* harmony export */   "ShowBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ShowBinder; },
/* harmony export */   "SrcsetSizeBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.SrcsetSizeBinder; },
/* harmony export */   "StyleBackgroundImageBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleBackgroundImageBinder; },
/* harmony export */   "StyleBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleBinder; },
/* harmony export */   "StyleStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.StyleStarBinder; },
/* harmony export */   "TagStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TagStarBinder; },
/* harmony export */   "TemplateBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TemplateBinder; },
/* harmony export */   "TemplatesComponent": function() { return /* reexport safe */ _components_templates_templates_component_js__WEBPACK_IMPORTED_MODULE_6__.TemplatesComponent; },
/* harmony export */   "TextBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.TextBinder; },
/* harmony export */   "ToggleOnEventBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ToggleOnEventBinder; },
/* harmony export */   "UncheckedBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.UncheckedBinder; },
/* harmony export */   "UnlessBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.UnlessBinder; },
/* harmony export */   "ValueBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_3__.ValueBinder; },
/* harmony export */   "View": function() { return /* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_13__.View; },
/* harmony export */   "andFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.andFormatter; },
/* harmony export */   "appendFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.appendFormatter; },
/* harmony export */   "argsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.argsFormatter; },
/* harmony export */   "betweenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.betweenFormatter; },
/* harmony export */   "booleanFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.booleanFormatter; },
/* harmony export */   "callFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.callFormatter; },
/* harmony export */   "callNameFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.callNameFormatter; },
/* harmony export */   "capitalizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.capitalizeFormatter; },
/* harmony export */   "containsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.containsFormatter; },
/* harmony export */   "coreModule": function() { return /* reexport safe */ _core_module_js__WEBPACK_IMPORTED_MODULE_14__.coreModule; },
/* harmony export */   "cutFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.cutFormatter; },
/* harmony export */   "debugFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.debugFormatter; },
/* harmony export */   "defaultFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.defaultFormatter; },
/* harmony export */   "digitsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.digitsFormatter; },
/* harmony export */   "dividedByFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.dividedByFormatter; },
/* harmony export */   "dotAdapter": function() { return /* reexport safe */ _adapters_index_js__WEBPACK_IMPORTED_MODULE_2__.dotAdapter; },
/* harmony export */   "downcaseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.downcaseFormatter; },
/* harmony export */   "egtFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.egtFormatter; },
/* harmony export */   "eltFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.eltFormatter; },
/* harmony export */   "emptyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.emptyFormatter; },
/* harmony export */   "endsWithFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.endsWithFormatter; },
/* harmony export */   "eqFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.eqFormatter; },
/* harmony export */   "evenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.evenFormatter; },
/* harmony export */   "filledFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.filledFormatter; },
/* harmony export */   "firstFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.firstFormatter; },
/* harmony export */   "gcdFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.gcdFormatter; },
/* harmony export */   "getFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.getFormatter; },
/* harmony export */   "gtFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.gtFormatter; },
/* harmony export */   "handleizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.handleizeFormatter; },
/* harmony export */   "isArrayFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isArrayFormatter; },
/* harmony export */   "isBooleanFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isBooleanFormatter; },
/* harmony export */   "isDefinedFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isDefinedFormatter; },
/* harmony export */   "isDesktopFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isDesktopFormatter; },
/* harmony export */   "isIntegerFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isIntegerFormatter; },
/* harmony export */   "isLastFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isLastFormatter; },
/* harmony export */   "isMobileFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isMobileFormatter; },
/* harmony export */   "isNumberFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isNumberFormatter; },
/* harmony export */   "isObjectFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isObjectFormatter; },
/* harmony export */   "isStringFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isStringFormatter; },
/* harmony export */   "isUndefinedFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.isUndefinedFormatter; },
/* harmony export */   "joinFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.joinFormatter; },
/* harmony export */   "jsonFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.jsonFormatter; },
/* harmony export */   "lastFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.lastFormatter; },
/* harmony export */   "ltFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.ltFormatter; },
/* harmony export */   "mapFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.mapFormatter; },
/* harmony export */   "matchFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.matchFormatter; },
/* harmony export */   "minusFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.minusFormatter; },
/* harmony export */   "moduloFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.moduloFormatter; },
/* harmony export */   "neFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.neFormatter; },
/* harmony export */   "notFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.notFormatter; },
/* harmony export */   "numberFormatFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.numberFormatFormatter; },
/* harmony export */   "orFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.orFormatter; },
/* harmony export */   "osFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.osFormatter; },
/* harmony export */   "overlapsFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.overlapsFormatter; },
/* harmony export */   "padEndFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.padEndFormatter; },
/* harmony export */   "padStartFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.padStartFormatter; },
/* harmony export */   "parseDeclaration": function() { return /* reexport safe */ _parse_declaration_js__WEBPACK_IMPORTED_MODULE_9__.parseDeclaration; },
/* harmony export */   "parseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.parseFormatter; },
/* harmony export */   "parseNode": function() { return /* reexport safe */ _parse_node_js__WEBPACK_IMPORTED_MODULE_10__.parseNode; },
/* harmony export */   "parseTemplate": function() { return /* reexport safe */ _parse_template_js__WEBPACK_IMPORTED_MODULE_11__.parseTemplate; },
/* harmony export */   "pluralizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.pluralizeFormatter; },
/* harmony export */   "plusFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.plusFormatter; },
/* harmony export */   "preferFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.preferFormatter; },
/* harmony export */   "prependFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.prependFormatter; },
/* harmony export */   "randomFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.randomFormatter; },
/* harmony export */   "rangeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.rangeFormatter; },
/* harmony export */   "replaceFirstFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.replaceFirstFormatter; },
/* harmony export */   "replaceFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.replaceFormatter; },
/* harmony export */   "setFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.setFormatter; },
/* harmony export */   "sizeFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.sizeFormatter; },
/* harmony export */   "sliceFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.sliceFormatter; },
/* harmony export */   "startsWithFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.startsWithFormatter; },
/* harmony export */   "stripFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.stripFormatter; },
/* harmony export */   "stripHtmlFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.stripHtmlFormatter; },
/* harmony export */   "ternaryFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.ternaryFormatter; },
/* harmony export */   "timesFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.timesFormatter; },
/* harmony export */   "toBase64Formatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toBase64Formatter; },
/* harmony export */   "toDecimalFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toDecimalFormatter; },
/* harmony export */   "toFloatFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toFloatFormatter; },
/* harmony export */   "toIntegerFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toIntegerFormatter; },
/* harmony export */   "toNumberFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toNumberFormatter; },
/* harmony export */   "toStringFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.toStringFormatter; },
/* harmony export */   "unevenFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.unevenFormatter; },
/* harmony export */   "upcaseFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__.upcaseFormatter; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/core/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/core/src/services/index.ts");
/* harmony import */ var _adapters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapters/index.js */ "../../packages/core/src/adapters/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/core/src/binders/index.ts");
/* harmony import */ var _component_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component/index.js */ "../../packages/core/src/component/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/index.js */ "../../packages/core/src/components/index.ts");
/* harmony import */ var _components_templates_templates_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/templates/templates.component.js */ "../../packages/core/src/components/templates/templates.component.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/core/src/formatters/index.ts");
/* harmony import */ var _binder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binder.js */ "../../packages/core/src/binder.ts");
/* harmony import */ var _parse_declaration_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse-declaration.js */ "../../packages/core/src/parse-declaration.ts");
/* harmony import */ var _parse_node_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parse-node.js */ "../../packages/core/src/parse-node.ts");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");
/* harmony import */ var _riba_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./riba.js */ "../../packages/core/src/riba.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _core_module_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core.module.js */ "../../packages/core/src/core.module.ts");
















/***/ }),

/***/ "../../packages/core/src/observer.ts":
/*!*******************************************!*\
  !*** ../../packages/core/src/observer.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": function() { return /* binding */ Observer; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

class Observer {
  static updateOptions(options) {
    if (!options.adapters) {
      throw new Error("adapters are required!");
    }

    if (options.adapters) {
      Observer.adapters = _objectSpread(_objectSpread({}, Observer.adapters), options.adapters);
      Observer.interfaces = Object.keys(Observer.adapters);
    }

    Observer.rootInterface = options.rootInterface || Observer.interfaces[0];

    if (!Observer.rootInterface) {
      throw new Error("rootInterface is required!");
    }
  }
  /**
   * Tokenizes the provided keypath string into interface + path tokens for the
   * observer to work with.
   */


  static tokenize(keypath, root) {
    const tokens = [];
    let current = {
      i: root,
      path: ""
    };
    let index;
    let chr;

    for (index = 0; index < keypath.length; index++) {
      chr = keypath.charAt(index);

      if (~Observer.interfaces.indexOf(chr)) {
        tokens.push(current);
        current = {
          i: chr,
          path: ""
        };
      } else {
        current.path += chr;
      }
    }

    tokens.push(current);
    return tokens;
  }
  /**
   * Gets the provided key on an object.
   * @param key
   * @param obj
   */


  static get(key, obj) {
    return Observer.adapters[key.i].get(obj, key.path);
  }
  /**
   * Observes or unobserves a callback on the object using the provided key.
   * @param active
   * @param key
   * @param obj
   * @param callback
   */


  static set(active, key, obj, callback) {
    if (active) {
      Observer.adapters[key.i].observe(obj, key.path, callback);
    } else {
      Observer.adapters[key.i].unobserve(obj, key.path, callback);
    }
  }

  /**
   * Constructs a new keypath observer and kicks things off.
   * @param obj
   * @param keypath
   * @param callback
   */
  constructor(obj, keypath, callback) {
    this.keypath = keypath;
    this.callback = callback;
    this.objectPath = [];
    const parseResult = this.parse();
    this.key = parseResult.key;
    this.tokens = parseResult.tokens;
    this.obj = this.getRootObject(obj);
    this.target = this.realize();

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.set(true, this.key, this.target, this.callback);
    }
  }
  /**
   * Parses the keypath using the interfaces defined on the view. Sets variables
   * for the tokenized keypath as well as the end key.
   */


  parse() {
    let path;
    let root;

    if (!Observer.interfaces || !Observer.interfaces.length) {
      throw new Error("[Observer] Must define at least one adapter interface. interfaces: \"".concat(JSON.stringify(Observer.interfaces), "\" adapters: \"").concat(JSON.stringify(Observer.adapters), "\""));
    }

    if (~Observer.interfaces.indexOf(this.keypath[0])) {
      root = this.keypath[0];
      path = this.keypath.substr(1);
    } else {
      root = Observer.rootInterface;
      path = this.keypath;
    }

    this.tokens = Observer.tokenize(path, root);

    if (!this.tokens.length) {
      throw new Error("[Observer] No tokens");
    }

    this.key = this.tokens.pop();
    return {
      key: this.key,
      tokens: this.tokens
    };
  }
  /**
   * Realizes the full keypath, attaching observers for every key and correcting
   * old observers to any changed objects in the keypath.
   */


  realize() {
    let current = this.obj;
    let unreached = -1;
    let prev;
    let token;

    for (let index = 0; index < this.tokens.length; index++) {
      token = this.tokens[index];

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(current)) {
        if (typeof this.objectPath[index] !== "undefined") {
          prev = this.objectPath[index];

          if (current !== prev) {
            Observer.set(false, token, prev, this);
            Observer.set(true, token, current, this);
            this.objectPath[index] = current;
          }
        } else {
          Observer.set(true, token, current, this);
          this.objectPath[index] = current;
        }

        current = Observer.get(token, current);
      } else {
        if (unreached === -1) {
          unreached = index;
        }

        prev = this.objectPath[index];

        if (prev) {
          Observer.set(false, token, prev, this);
        }
      }
    }

    if (unreached !== -1) {
      this.objectPath.splice(unreached);
    }

    return current;
  }
  /**
   * Updates the keypath. This is called when any intermediary key is changed.
   */


  sync() {
    let oldValue;
    let newValue;
    const next = this.realize();

    if (next !== this.target) {
      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
        Observer.set(false, this.key, this.target, this.callback);
      }

      if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(next)) {
        Observer.set(true, this.key, next, this.callback);
      }

      oldValue = this.value();
      this.target = next;
      newValue = this.value();

      if (newValue !== oldValue || Array.isArray(newValue)) {
        this.callback.sync();
      }
    } else if (Array.isArray(next)) {
      this.callback.sync();
    }
  }
  /**
   * Reads the current end value of the observed keypath. Returns undefined if
   * the full keypath is unreachable.
   */


  value() {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      return Observer.get(this.key, this.target);
    }
  }
  /**
   * Sets the current end value of the observed keypath. Calling setValue when
   *  the full keypath is unreachable is a no-op.
   * @param value
   */


  setValue(value) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.adapters[this.key.i].set(this.target, this.key.path, value);
    }
  }
  /**
   * Unobserves the entire keypath.
   */


  unobserve() {
    let obj;
    let token;

    for (let index = 0; index < this.tokens.length; index++) {
      token = this.tokens[index];
      obj = this.objectPath[index];

      if (obj) {
        Observer.set(false, token, obj, this);
      }
    }

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(this.target)) {
      Observer.set(false, this.key, this.target, this.callback);
    }
  }
  /**
   * traverse the scope chain to find the scope which has the root property
   * if the property is not found in chain, returns the root scope
   * @param obj
   */


  getRootObject(obj) {
    let rootProp;
    let current;

    if (!obj.$parent) {
      return obj;
    }

    if (this.tokens.length) {
      rootProp = this.tokens[0].path;
    } else {
      rootProp = this.key.path;
    }

    current = obj;

    while (current.$parent && current[rootProp] === undefined) {
      current = current.$parent;
    }

    return current;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Observer, "interfaces", []);

/***/ }),

/***/ "../../packages/core/src/parse-declaration.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/parse-declaration.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseDeclaration": function() { return /* binding */ parseDeclaration; }
/* harmony export */ });
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");

/**
 * Parses an attribute argument to his keypath and splits the formatter names into a pipes array.
 * @param declaration e.g. `object.data | validate | json`
 *
 * if declaration is
 * ```
 * object.data | validate | json`
 * ``
 *
 * the result is
 * ```
 * {
 *    keypath: "object.data",
 *    pipes: ["validate", "json"]
 * }
 * ```
 */

function parseDeclaration(declaration) {
  const matches = declaration.match(_constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.DECLARATION_SPLIT);

  if (matches === null) {
    throw new Error("[View] No matches");
  }

  const pipes = matches.map(str => {
    return str.trim();
  });
  const keypath = pipes.shift() || undefined;
  return {
    keypath,
    pipes
  };
}

/***/ }),

/***/ "../../packages/core/src/parse-node.ts":
/*!*********************************************!*\
  !*** ../../packages/core/src/parse-node.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseNode": function() { return /* binding */ parseNode; }
/* harmony export */ });
/* harmony import */ var _binders_mustache_text_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/mustache-text.binder.js */ "../../packages/core/src/binders/mustache-text.binder.ts");
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");



function parseNode(view, node, templateDelimiters) {
  /** If true stop / block the parseNode  recursion */
  let blockRecursion = false;
  node = node;

  if (node.nodeType === Node.TEXT_NODE) {
    let tokens = null;

    if (node.data) {
      tokens = (0,_parse_template_js__WEBPACK_IMPORTED_MODULE_2__.parseTemplate)(node.data, templateDelimiters);
    }

    if (tokens && tokens.length) {
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const text = document.createTextNode(token.value);

        if (node.parentNode && text && node) {
          node.parentNode.insertBefore(text, node);
        }

        if (token.type === _constants_parser_js__WEBPACK_IMPORTED_MODULE_1__.BINDING) {
          // TODO fix circular dependency
          view.buildBinding(text, null, token.value, _binders_mustache_text_binder_js__WEBPACK_IMPORTED_MODULE_0__.MustacheTextBinder, null);
        }
      }

      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }

    blockRecursion = true;
  } else if (node.nodeType === Node.ELEMENT_NODE) {
    // traverse binds attributes and components
    blockRecursion = view.traverse(node);
  }

  if (!blockRecursion) {
    if (node.childNodes && node.childNodes.length > 0) {
      for (let i = 0; i < node.childNodes.length; i++) {
        const childNode = node.childNodes[i];

        if (childNode) {
          parseNode(view, childNode, templateDelimiters);
        }
      }
    }
  }
}

/***/ }),

/***/ "../../packages/core/src/parse-template.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/parse-template.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseTemplate": function() { return /* binding */ parseTemplate; }
/* harmony export */ });
/* harmony import */ var _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/parser.js */ "../../packages/core/src/constants/parser.ts");

/**
 * Template parser and tokenizer for {{ mustache-style }} text content bindings.
 * Parses the template and returns a set of tokens, separating static portions
 * of text from binding declarations.
 * @param template
 * @param delimiters
 */

function parseTemplate(template, delimiters) {
  let tokens = null;
  const length = template.length;
  let index = 0;
  let lastIndex = 0;
  const open = delimiters[0];
  const close = delimiters[1];

  while (lastIndex < length) {
    index = template.indexOf(open, lastIndex);

    if (index < 0) {
      if (tokens) {
        tokens.push({
          type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
          value: template.slice(lastIndex)
        });
      }

      break;
    } else {
      tokens = tokens || [];

      if (index > 0 && lastIndex < index) {
        tokens.push({
          type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
          value: template.slice(lastIndex, index)
        });
      }

      lastIndex = index + open.length;
      index = template.indexOf(close, lastIndex);

      if (index < 0) {
        const substring = template.slice(lastIndex - open.length);
        const lastToken = tokens[tokens.length - 1];

        if (lastToken && lastToken.type === _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT) {
          lastToken.value += substring;
        } else {
          tokens.push({
            type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.TEXT,
            value: substring
          });
        }

        break;
      }

      const value = template.slice(lastIndex, index).trim();
      tokens.push({
        type: _constants_parser_js__WEBPACK_IMPORTED_MODULE_0__.BINDING,
        value
      });
      lastIndex = index + close.length;
    }
  }

  return tokens;
}

/***/ }),

/***/ "../../packages/core/src/riba.ts":
/*!***************************************!*\
  !*** ../../packages/core/src/riba.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Riba": function() { return /* binding */ Riba; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _parse_template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-template.js */ "../../packages/core/src/parse-template.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view.js */ "../../packages/core/src/view.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/observer.ts");
/* harmony import */ var _services_module_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/module.service.js */ "../../packages/core/src/services/module.service.ts");
/* harmony import */ var _services_lifecycle_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/lifecycle.service.js */ "../../packages/core/src/services/lifecycle.service.ts");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }







class Riba {
  /**
   * Default event handler, calls the function defined in his binder
   * @see Binding.eventHandler
   * @param el The element the event was triggered from
   */
  static handler(context, ev, binder, el) {
    if (!this || !this.call) {
      const error = new Error("[rv-".concat(binder.type, "=\"").concat(binder.keypath, "\"] Event handler \"").concat(binder.keypath, "\" not found!\""));
      console.error(error, binder, el, binder.view.models);
      throw error;
    }

    this.call(context, ev, binder.view.models, el);
  }
  /** singleton instance */


  set prefix(value) {
    if (Array.isArray(value)) {
      this._prefix = [];
      this._fullPrefix = [];

      for (const val of value) {
        this._prefix.push(val);

        this._fullPrefix.push(val + "-");
      }
    }
  }

  get prefix() {
    return this._prefix;
  }

  get fullPrefix() {
    return this._fullPrefix;
  }
  /**
   * Creates an singleton instance of Riba.
   */


  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lifecycle", _services_lifecycle_service_js__WEBPACK_IMPORTED_MODULE_6__.LifecycleService.getInstance());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "binders", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "components", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "formatters", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapters", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "parseTemplate", _parse_template_js__WEBPACK_IMPORTED_MODULE_1__.parseTemplate);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "parseType", _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.parseType);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "templateDelimiters", ["{", "}"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "rootInterface", ".");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "preloadData", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "removeBinderAttributes", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "blockNodeNames", ["SCRIPT", "STYLE", "TEMPLATE", "CODE"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "blockUnknownCustomElements", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_prefix", ["rv"]);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_fullPrefix", ["rv-"]);

    this.module = new _services_module_service_js__WEBPACK_IMPORTED_MODULE_5__.ModulesService(this.binders, this.components, this.formatters, this.adapters);

    if (Riba.instance) {
      return Riba.instance;
    }

    Riba.instance = this;
  }
  /**
   * Merges an object literal into the corresponding global options.
   * @param options
   */


  configure(options) {
    if (!options) {
      return;
    }

    for (const [option, value] of Object.entries(options)) {
      switch (option) {
        case "binders":
          this.binders = _objectSpread(_objectSpread({}, this.binders), value);
          break;

        case "formatters":
          this.formatters = _objectSpread(_objectSpread({}, this.formatters), value);
          break;

        case "components":
          this.components = _objectSpread(_objectSpread({}, this.components), value);
          break;

        case "adapters":
          this.adapters = _objectSpread(_objectSpread({}, this.adapters), value);
          break;

        case "prefix":
          this.prefix = value;
          break;

        case "parseTemplate":
          this.parseTemplate = value;
          break;

        case "parseType":
          this.parseType = value;
          break;

        case "templateDelimiters":
          this.templateDelimiters = value;
          break;

        case "rootInterface":
          this.rootInterface = value;
          break;

        case "preloadData":
          this.preloadData = value;
          break;

        case "blockNodeNames":
          this.blockNodeNames = value;
          break;

        case "blockUnknownCustomElements":
          this.blockUnknownCustomElements = Boolean(value);
          break;

        default:
          console.warn("Option not supported", option, value);
          break;
      }
    }
  }

  getViewOptions(options) {
    const viewOptions = {
      // EXTENSIONS
      adapters: {},
      binders: {},
      components: {},
      formatters: {},
      // other
      attributeBinders: [],
      // sightglass
      rootInterface: {}
    };

    if (options) {
      viewOptions.binders = _objectSpread(_objectSpread({}, viewOptions.binders), options.binders);
      viewOptions.formatters = _objectSpread(_objectSpread({}, viewOptions.formatters), options.formatters);
      viewOptions.components = _objectSpread(_objectSpread({}, viewOptions.components), options.components);
      viewOptions.adapters = _objectSpread(_objectSpread({}, viewOptions.adapters), options.adapters);
    } // Prefix


    if (options !== null && options !== void 0 && options.prefix && Array.isArray(options === null || options === void 0 ? void 0 : options.prefix)) {
      viewOptions.prefix = [];
      viewOptions.fullPrefix = [];

      for (const prefix of options.prefix) {
        viewOptions.prefix.push(prefix);
        viewOptions.fullPrefix.push(prefix + "-");
      }
    } else {
      viewOptions.prefix = this.prefix;
      viewOptions.fullPrefix = this.fullPrefix;
    }

    viewOptions.templateDelimiters = (options === null || options === void 0 ? void 0 : options.templateDelimiters) || this.templateDelimiters;
    viewOptions.rootInterface = (options === null || options === void 0 ? void 0 : options.rootInterface) || this.rootInterface;
    viewOptions.removeBinderAttributes = typeof (options === null || options === void 0 ? void 0 : options.removeBinderAttributes) === "boolean" ? options.removeBinderAttributes : this.removeBinderAttributes;
    viewOptions.blockNodeNames = (options === null || options === void 0 ? void 0 : options.blockNodeNames) || this.blockNodeNames;
    viewOptions.preloadData = typeof (options === null || options === void 0 ? void 0 : options.preloadData) === "boolean" ? options.preloadData : this.preloadData;
    viewOptions.handler = (options === null || options === void 0 ? void 0 : options.handler) || Riba.handler; // merge extensions

    viewOptions.binders = _objectSpread(_objectSpread({}, this.binders), viewOptions.binders);
    viewOptions.formatters = _objectSpread(_objectSpread({}, this.formatters), viewOptions.formatters);
    viewOptions.components = _objectSpread(_objectSpread({}, this.components), viewOptions.components);
    viewOptions.adapters = _objectSpread(_objectSpread({}, this.adapters), viewOptions.adapters);

    if (!viewOptions.attributeBinders) {
      viewOptions.attributeBinders = [];
    } // get all attributeBinders from available binders


    if (viewOptions.binders) {
      const attributeBinders = Object.keys(viewOptions.binders).filter(key => key.indexOf("*") >= 1 // Should contain, but not start with, *
      );
      viewOptions.attributeBinders.push(...attributeBinders);
    }

    return viewOptions;
  }
  /**
   * Binds some data to a template / element. Returns a riba.View instance.
   * @param el
   * @param models The root
   * @param options
   * @returns
   */


  bind(el) {
    let models = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let options = arguments.length > 2 ? arguments[2] : undefined;
    const viewOptions = this.getViewOptions(options);
    _observer_js__WEBPACK_IMPORTED_MODULE_4__.Observer.updateOptions(viewOptions);
    const view = new _view_js__WEBPACK_IMPORTED_MODULE_3__.View(el, models, viewOptions);
    view.bind();
    return view;
  }

}
window.Riba = Riba;

/***/ }),

/***/ "../../packages/core/src/services/adapter.service.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/services/adapter.service.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterService": function() { return /* binding */ AdapterService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observer.js */ "../../packages/core/src/observer.ts");



class AdapterService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   */
  constructor(adapters) {
    super(adapters);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "adapter");
  }
  /**
   * Regist a adapter with his name
   * @param adapter
   * @param name
   */


  regist(adapter, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || adapter.name : adapter.name || fallbackName;

    if (!name) {
      throw new Error("Adapter name not found!");
    }

    this.elements[name] = adapter;
    const options = {
      adapters: this.elements
    };
    _observer_js__WEBPACK_IMPORTED_MODULE_2__.Observer.updateOptions(options);
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/binder.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/services/binder.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindersService": function() { return /* binding */ BindersService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


/**
 *
 */

class BindersService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   * @param binders;
   */
  constructor(binders) {
    super(binders);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "binder");
  }
  /**
   * Regist a binder
   * @param binder
   * @param name  Overwrites the name to access the binder over
   */


  regist(Binder, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!Binder) {
      throw new Error("No Binder passed to register!");
    }

    const name = forceFallback ? fallbackName || Binder.key : Binder.key || fallbackName;

    if (!name) {
      throw new Error("Binder name not found!");
    }

    this.elements[name] = Binder;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/component.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/component.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentService": function() { return /* binding */ ComponentService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


class ComponentService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   * @param components
   */
  constructor(components) {
    super(components);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "components");
  }
  /**
   * Regist a component with his name
   * @param component
   * @param name
   */


  regist(component, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || component.tagName : component.tagName || fallbackName;

    if (!name) {
      console.warn(new Error("Component name not found!"), component);
      return this.elements;
    }

    this.elements[name] = component;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/core.service.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/services/core.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreService": function() { return /* binding */ CoreService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class CoreService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of CoreService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of CoreService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(CoreService, "_options", {});

/***/ }),

/***/ "../../packages/core/src/services/formatter.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/formatter.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatterService": function() { return /* binding */ FormatterService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-element.service.js */ "../../packages/core/src/services/module-element.service.ts");


class FormatterService extends _module_element_service_js__WEBPACK_IMPORTED_MODULE_1__.ModuleElementService {
  /**
   *
   */
  constructor(formatters) {
    super(formatters);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", "formatter");
  }
  /**
   * Regist a formatter with his name
   * @param formatter
   * @param name
   */


  regist(formatter, fallbackName) {
    let forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const name = forceFallback ? fallbackName || formatter.name : formatter.name || fallbackName;

    if (!name) {
      throw new Error("Formatter name not found!");
    }

    this.elements[name] = formatter;
    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/http.service.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/services/http.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpService": function() { return /* binding */ HttpService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");


class HttpService {
  /**
   * Set header for each request
   * @param name Header name
   * @param value Header value
   */
  static setRequestHeaderEachRequest(name, value) {
    this._requestHeadersEachRequest.push({
      name,
      value
    });
  }
  /**
   * Load JSON-encoded data from the server using a GET HTTP request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @see https://api.jquery.com/jquery.getjson/
   */


  static async getJSON(url, data) {
    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return this.fetch(url, "GET", data, "json", headers, options);
  }
  /**
   * Load data from the server using a HTTP POST request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see https://api.jquery.com/jquery.post/
   */


  static async post(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "POST", data, dataType, headers, options);
  }

  static async delete(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "DELETE", data, dataType, headers, options);
  }

  static async put(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "PUT", data, dataType, headers, options);
  }
  /**
   * Load data from the server using a HTTP GET request.
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see https://api.jquery.com/jquery.get/
   */


  static async get(url, data, dataType) {
    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return this.fetch(url, "GET", data, dataType, headers, options);
  }
  /**
   *
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   */


  static parseDataType(dataType) {
    const headers = {};
    let contentType = "application/x-www-form-urlencoded";
    let accept = "*/*";

    switch (dataType) {
      case "script":
        contentType = "application/javascript";
        break;

      case "json":
        contentType = "application/json";
        accept = "application/json, text/javascript";
        break;

      case "xml":
        contentType = "application/xml";
        accept = "application/xml, text/xml";
        break;

      case "text":
        contentType = "text/plain";
        accept = "text/plain";
        break;

      case "html":
        contentType = "text/html";
        accept = "text/html";
        break;

      case "form":
        contentType = "application/x-www-form-urlencoded";
        break;
      // case "multi-form":
      //   contentType = "multipart/form-data";
      //   break;
    }

    if (contentType) {
      headers["Content-Type"] = contentType; // tslint:disable-next-line:no-string-literal

      headers["Accept"] = accept;
    }

    return headers;
  }

  static async fetch(url) {
    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";
    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let dataType = arguments.length > 3 ? arguments[3] : undefined;
    let headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

    if (!fetch) {
      throw new Error("Your browser does not support the fetch API, use xhr instead or install a polyfill.");
    }

    let body; // headers

    for (const header of this._requestHeadersEachRequest) {
      headers[header.name] = header.value;
    }

    if (dataType) {
      headers = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.extend)({
        deep: false
      }, headers, this.parseDataType(dataType));
    }

    if (!options.crossDomain && !headers["X-Requested-With"]) {
      headers["X-Requested-With"] = "XMLHttpRequest";
    }

    const cache = options.cache ? options.cache : "default";

    if (method === "GET" && data) {
      const queryStr = new URLSearchParams(data).toString();

      if (queryStr) {
        const separator = url.indexOf("?") !== -1 ? "&" : "?";
        url = url + separator + new URLSearchParams(data).toString();
      }
    } else if (data) {
      if (dataType === "form") {
        body = new URLSearchParams(data);
      } else {
        body = JSON.stringify(data);
      }
    }

    const response = await fetch(url, {
      credentials: "same-origin",
      cache,
      method,
      body,
      headers,
      mode: options.mode || "cors"
    });
    let bodyResult = await response.text();

    if (typeof bodyResult === "string" && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_1__.isJson)(bodyResult)) {
      bodyResult = JSON.parse(bodyResult);
    }

    if (typeof bodyResult === "string") {
      switch (bodyResult) {
        case "null":
          bodyResult = null;
          break;

        case "true":
          bodyResult = true;
          break;

        case "false":
          bodyResult = false;
          break;

        case "undefined":
          bodyResult = undefined;
          break;
      }
    }

    const result = {
      status: response.status,
      headers: response.headers,
      ok: response.ok,
      redirected: response.redirected,
      statusText: response.statusText,
      // trailer: response.trailer,
      type: response.type,
      url: response.url,
      arrayBuffer: response.arrayBuffer,
      blob: response.blob,
      bodyUsed: response.bodyUsed,
      clone: response.clone,
      formData: response.formData,
      text: response.text,
      body: bodyResult
    };
    return result;
  }
  /**
   * Header name value pair to send on each request
   */


}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(HttpService, "_requestHeadersEachRequest", []);

/***/ }),

/***/ "../../packages/core/src/services/index.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/services/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterService": function() { return /* reexport safe */ _adapter_service_js__WEBPACK_IMPORTED_MODULE_0__.AdapterService; },
/* harmony export */   "BindersService": function() { return /* reexport safe */ _binder_service_js__WEBPACK_IMPORTED_MODULE_1__.BindersService; },
/* harmony export */   "ComponentService": function() { return /* reexport safe */ _component_service_js__WEBPACK_IMPORTED_MODULE_3__.ComponentService; },
/* harmony export */   "CoreService": function() { return /* reexport safe */ _core_service_js__WEBPACK_IMPORTED_MODULE_4__.CoreService; },
/* harmony export */   "FormatterService": function() { return /* reexport safe */ _formatter_service_js__WEBPACK_IMPORTED_MODULE_5__.FormatterService; },
/* harmony export */   "HttpService": function() { return /* reexport safe */ _http_service_js__WEBPACK_IMPORTED_MODULE_6__.HttpService; },
/* harmony export */   "LifecycleService": function() { return /* reexport safe */ _lifecycle_service_js__WEBPACK_IMPORTED_MODULE_2__.LifecycleService; }
/* harmony export */ });
/* harmony import */ var _adapter_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter.service.js */ "../../packages/core/src/services/adapter.service.ts");
/* harmony import */ var _binder_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binder.service.js */ "../../packages/core/src/services/binder.service.ts");
/* harmony import */ var _lifecycle_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.service.js */ "../../packages/core/src/services/lifecycle.service.ts");
/* harmony import */ var _component_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component.service.js */ "../../packages/core/src/services/component.service.ts");
/* harmony import */ var _core_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core.service.js */ "../../packages/core/src/services/core.service.ts");
/* harmony import */ var _formatter_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter.service.js */ "../../packages/core/src/services/formatter.service.ts");
/* harmony import */ var _http_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./http.service.js */ "../../packages/core/src/services/http.service.ts");








/***/ }),

/***/ "../../packages/core/src/services/lifecycle.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/services/lifecycle.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LifecycleService": function() { return /* binding */ LifecycleService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _core_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.service.js */ "../../packages/core/src/services/core.service.ts");




/**
 * Component lifecycle control service.
 * Useful to check if all current components are bound and ready.
 */
class LifecycleService {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance("lifecycle"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "routerEvents", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "timeout", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "components", {});

    this.addEventListeners();
    this.reset();
    LifecycleService.instance = this;
  }

  static getInstance() {
    if (LifecycleService.instance) {
      return LifecycleService.instance;
    }

    LifecycleService.instance = new LifecycleService();
    return LifecycleService.instance;
  }

  getEmpty() {
    return {
      components: []
    };
  }

  addEventListeners() {
    this.events.on("Component:connected", data => {
      this.resetTimeout();
      this.components[data.tagName] = this.components[data.tagName] || this.getEmpty();
      this.components[data.tagName].components.push(data.component);
    });
    this.events.on("Component:disconnected", () => {
      this.resetTimeout();
      this.checkStates();
    });
    this.events.on("Component:afterBind", () => {
      this.resetTimeout();
      this.checkStates();
    });
    this.events.on("Component:error", (error, data) => {
      this.onError(error, data);
    }); // Router

    this.routerEvents.on("newPageReady", (viewId, newStatus, oldStatus, container, containerHtml, dataset, firstPageLoad) => {
      if (this.debug) console.debug("newPageReady", viewId, newStatus, oldStatus, "firstPageLoad", firstPageLoad);

      if (!firstPageLoad) {
        this.reset();
      }
    });
  }

  getState(tagName) {
    let connected = 0;
    let bound = 0;

    for (const component of this.components[tagName].components) {
      if (component.connected) {
        connected++;

        if (component.bound) {
          bound++;
        }
      }
    }

    return {
      connected,
      bound
    };
  }

  getStates() {
    const states = {};

    for (const tagName in this.components) {
      const state = this.getState(tagName);
      states[tagName] = {
        state,
        components: this.components[tagName].components
      };
    }

    return states;
  }

  checkStates() {
    let allBound = true;
    const states = this.getStates();

    for (const tagName in states) {
      const state = states[tagName].state;

      if (state.connected !== state.bound) {
        allBound = false;
        break;
      }
    }

    if (allBound) {
      this.onAllBound();
    }

    return {
      states,
      allBound
    };
  }

  onAllBound() {
    this.clearTimeout();
    this.events.trigger("ComponentLifecycle:allBound", this.components);
    if (this.debug) console.debug("[ComponentLifecycle] All components bound!");
  }

  onError(error, data) {
    this.clearTimeout();
    console.error("The component \"".concat(data.tagName, "\" has caused an error:"), error);
    this.events.trigger("ComponentLifecycle:error", error, data);
  }

  onTimeout() {
    this.clearTimeout();
    const states = this.getStates();

    if (Object.keys(states).length <= 0) {
      console.warn("No component found");
      this.events.trigger("ComponentLifecycle:noComponents");
      return;
    }

    let errorMessage = "[ComponentLifecycle] Timeout! {count} component(s) takes too long!\nUnfinished components:\n";
    let count = 0;

    for (const tagName in states) {
      const state = states[tagName].state;

      if (state.connected !== state.bound) {
        count++;
        errorMessage += "".concat(tagName, ": ").concat(JSON.stringify(states[tagName].state, null, 2), " + \n");
      }
    }

    errorMessage = errorMessage.replace("{count}", count.toString());
    this.events.trigger("ComponentLifecycle:error", new Error(errorMessage), {});
  }

  clearTimeout() {
    if (this.timeout) {
      window.clearTimeout(this.timeout);
    }
  }

  resetTimeout() {
    var _CoreService$options$;

    if (this.debug) console.debug("[ComponentLifecycle] reset timeout..");
    this.clearTimeout();
    this.timeout = window.setTimeout(this.onTimeout.bind(this), ((_CoreService$options$ = _core_service_js__WEBPACK_IMPORTED_MODULE_2__.CoreService.options.lifecycle) === null || _CoreService$options$ === void 0 ? void 0 : _CoreService$options$.timeout) || 5000);
    return this.timeout;
  }

  reset() {
    if (this.debug) console.debug("[ComponentLifecycle] reset!");
    this.components = {};
    this.resetTimeout();
  }

}

/***/ }),

/***/ "../../packages/core/src/services/module-element.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/services/module-element.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleElementService": function() { return /* binding */ ModuleElementService; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

class ModuleElementService {
  /**
   *
   * @param elements;
   */
  constructor(elements) {
    this.elements = elements;
  }
  /**
   * Regist a element
   * @param element
   * @param name  Overwrites the name to access the element over
   */


  /**
   * Regist a set / array of elements
   * @param elements
   */
  regists(elements) {
    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(elements)) {
      throw new Error("Elements to register must be an object of elements");
    }

    for (const key in elements) {
      if (elements[key] && key !== "__esModule") {
        const element = elements[key];
        this.regist(element, key);
      }
    }

    return this.elements;
  }

}

/***/ }),

/***/ "../../packages/core/src/services/module.service.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/services/module.service.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModulesService": function() { return /* binding */ ModulesService; }
/* harmony export */ });
/* harmony import */ var _binder_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binder.service.js */ "../../packages/core/src/services/binder.service.ts");
/* harmony import */ var _component_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component.service.js */ "../../packages/core/src/services/component.service.ts");
/* harmony import */ var _formatter_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatter.service.js */ "../../packages/core/src/services/formatter.service.ts");
/* harmony import */ var _adapter_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adapter.service.js */ "../../packages/core/src/services/adapter.service.ts");




class ModulesService {
  /**
   *
   * @param binders;
   * @param components;
   * @param formatters;
   * @param adapters;
   */
  constructor(binders, components, formatters, adapters) {
    this.binder = new _binder_service_js__WEBPACK_IMPORTED_MODULE_0__.BindersService(binders);
    this.component = new _component_service_js__WEBPACK_IMPORTED_MODULE_1__.ComponentService(components);
    this.formatter = new _formatter_service_js__WEBPACK_IMPORTED_MODULE_2__.FormatterService(formatters);
    this.adapter = new _adapter_service_js__WEBPACK_IMPORTED_MODULE_3__.AdapterService(adapters);
  }

  regist(module) {
    if (!module) {
      console.error(module);
      throw new Error("The Riba module is falsy!");
    }

    if (module.binders) {
      this.binder.regists(module.binders);
    }

    if (module.components) {
      this.component.regists(module.components);
    }

    if (module.formatters) {
      this.formatter.regists(module.formatters);
    }

    if (module.adapters) {
      this.adapter.regists(module.adapters);
    }
  }

}

/***/ }),

/***/ "../../packages/core/src/types/adapter.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/adapter.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* binding */ Adapter; }
/* harmony export */ });
/**
 * The default `.` adapter that comes with riba.js. Allows subscribing to
 * properties on plain objects, implemented in ES5 natives using
 * `Object.defineProperty`.
 */

/**
 * TODO For what is this?
 */
class Adapter {}

/***/ }),

/***/ "../../packages/core/src/types/adapters.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/adapters.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/any-component.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/any-component.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/any-constructor.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/any-constructor.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/any-service.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/types/any-service.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/any-singleton.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/any-singleton.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/assign.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/assign.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/bindable-element.ts":
/*!*********************************************************!*\
  !*** ../../packages/core/src/types/bindable-element.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/binder-attribute-changed-event.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/types/binder-attribute-changed-event.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/binders.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/binders.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/binding.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/binding.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/class-of-binder.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/class-of-binder.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/class-of-component.ts":
/*!***********************************************************!*\
  !*** ../../packages/core/src/types/class-of-component.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/class-of.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/class-of.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-event-data.ts":
/*!***********************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-event-data.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-object.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-object.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-state.ts":
/*!******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-state.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/component-lifecycle-states.ts":
/*!*******************************************************************!*\
  !*** ../../packages/core/src/types/component-lifecycle-states.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/components.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/components.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/data-element.ts":
/*!*****************************************************!*\
  !*** ../../packages/core/src/types/data-element.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/elements.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/elements.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/event-handler-function.ts":
/*!***************************************************************!*\
  !*** ../../packages/core/src/types/event-handler-function.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/event-handler.ts":
/*!******************************************************!*\
  !*** ../../packages/core/src/types/event-handler.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/extensions.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/extensions.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/formatter-observers.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/formatter-observers.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/formatter.ts":
/*!**************************************************!*\
  !*** ../../packages/core/src/types/formatter.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/formatters.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/formatters.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/http-data-type.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/types/http-data-type.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/http-method.ts":
/*!****************************************************!*\
  !*** ../../packages/core/src/types/http-method.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/http-service-options.ts":
/*!*************************************************************!*\
  !*** ../../packages/core/src/types/http-service-options.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/http-service-response.ts":
/*!**************************************************************!*\
  !*** ../../packages/core/src/types/http-service-response.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/index.ts":
/*!**********************************************!*\
  !*** ../../packages/core/src/types/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapter": function() { return /* reexport safe */ _adapter_js__WEBPACK_IMPORTED_MODULE_0__.Adapter; }
/* harmony export */ });
/* harmony import */ var _adapter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter.js */ "../../packages/core/src/types/adapter.ts");
/* harmony import */ var _adapters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapters.js */ "../../packages/core/src/types/adapters.ts");
/* harmony import */ var _any_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./any-component.js */ "../../packages/core/src/types/any-component.ts");
/* harmony import */ var _any_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./any-constructor.js */ "../../packages/core/src/types/any-constructor.ts");
/* harmony import */ var _any_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./any-service.js */ "../../packages/core/src/types/any-service.ts");
/* harmony import */ var _any_singleton_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./any-singleton.js */ "../../packages/core/src/types/any-singleton.ts");
/* harmony import */ var _assign_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./assign.js */ "../../packages/core/src/types/assign.ts");
/* harmony import */ var _bindable_element_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bindable-element.js */ "../../packages/core/src/types/bindable-element.ts");
/* harmony import */ var _binder_attribute_changed_event_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binder-attribute-changed-event.js */ "../../packages/core/src/types/binder-attribute-changed-event.ts");
/* harmony import */ var _binders_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./binders.js */ "../../packages/core/src/types/binders.ts");
/* harmony import */ var _binding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./binding.js */ "../../packages/core/src/types/binding.ts");
/* harmony import */ var _class_of_binder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./class-of-binder.js */ "../../packages/core/src/types/class-of-binder.ts");
/* harmony import */ var _class_of_component_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./class-of-component.js */ "../../packages/core/src/types/class-of-component.ts");
/* harmony import */ var _class_of_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./class-of.js */ "../../packages/core/src/types/class-of.ts");
/* harmony import */ var _component_lifecycle_event_data_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./component-lifecycle-event-data.js */ "../../packages/core/src/types/component-lifecycle-event-data.ts");
/* harmony import */ var _component_lifecycle_object_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./component-lifecycle-object.js */ "../../packages/core/src/types/component-lifecycle-object.ts");
/* harmony import */ var _component_lifecycle_state_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./component-lifecycle-state.js */ "../../packages/core/src/types/component-lifecycle-state.ts");
/* harmony import */ var _component_lifecycle_states_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./component-lifecycle-states.js */ "../../packages/core/src/types/component-lifecycle-states.ts");
/* harmony import */ var _components_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components.js */ "../../packages/core/src/types/components.ts");
/* harmony import */ var _data_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./data-element.js */ "../../packages/core/src/types/data-element.ts");
/* harmony import */ var _elements_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./elements.js */ "../../packages/core/src/types/elements.ts");
/* harmony import */ var _event_handler_function_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./event-handler-function.js */ "../../packages/core/src/types/event-handler-function.ts");
/* harmony import */ var _event_handler_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./event-handler.js */ "../../packages/core/src/types/event-handler.ts");
/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./extensions.js */ "../../packages/core/src/types/extensions.ts");
/* harmony import */ var _formatter_observers_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./formatter-observers.js */ "../../packages/core/src/types/formatter-observers.ts");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./formatter.js */ "../../packages/core/src/types/formatter.ts");
/* harmony import */ var _formatters_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./formatters.js */ "../../packages/core/src/types/formatters.ts");
/* harmony import */ var _http_data_type_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./http-data-type.js */ "../../packages/core/src/types/http-data-type.ts");
/* harmony import */ var _http_method_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./http-method.js */ "../../packages/core/src/types/http-method.ts");
/* harmony import */ var _http_service_options_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./http-service-options.js */ "../../packages/core/src/types/http-service-options.ts");
/* harmony import */ var _http_service_response_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./http-service-response.js */ "../../packages/core/src/types/http-service-response.ts");
/* harmony import */ var _module_element_type_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./module-element-type.js */ "../../packages/core/src/types/module-element-type.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./module-options.js */ "../../packages/core/src/types/module-options.ts");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./module.js */ "../../packages/core/src/types/module.ts");
/* harmony import */ var _observed_attribute_to_check_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./observed-attribute-to-check.js */ "../../packages/core/src/types/observed-attribute-to-check.ts");
/* harmony import */ var _observed_attributes_to_check_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./observed-attributes-to-check.js */ "../../packages/core/src/types/observed-attributes-to-check.ts");
/* harmony import */ var _observer_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./observer.js */ "../../packages/core/src/types/observer.ts");
/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./options.js */ "../../packages/core/src/types/options.ts");
/* harmony import */ var _parsed_declarations_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./parsed-declarations.js */ "../../packages/core/src/types/parsed-declarations.ts");
/* harmony import */ var _scope_base_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./scope-base.js */ "../../packages/core/src/types/scope-base.ts");
/* harmony import */ var _scope_root_base_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./scope-root-base.js */ "../../packages/core/src/types/scope-root-base.ts");
/* harmony import */ var _services_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./services.js */ "../../packages/core/src/types/services.ts");
/* harmony import */ var _template_function_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./template-function.js */ "../../packages/core/src/types/template-function.ts");
/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./tokens.js */ "../../packages/core/src/types/tokens.ts");













































/***/ }),

/***/ "../../packages/core/src/types/module-element-type.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/module-element-type.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/module-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/core/src/types/module-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/module.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/module.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/observed-attribute-to-check.ts":
/*!********************************************************************!*\
  !*** ../../packages/core/src/types/observed-attribute-to-check.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/observed-attributes-to-check.ts":
/*!*********************************************************************!*\
  !*** ../../packages/core/src/types/observed-attributes-to-check.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/observer.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/observer.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/options.ts":
/*!************************************************!*\
  !*** ../../packages/core/src/types/options.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/parsed-declarations.ts":
/*!************************************************************!*\
  !*** ../../packages/core/src/types/parsed-declarations.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/scope-base.ts":
/*!***************************************************!*\
  !*** ../../packages/core/src/types/scope-base.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/scope-root-base.ts":
/*!********************************************************!*\
  !*** ../../packages/core/src/types/scope-root-base.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/services.ts":
/*!*************************************************!*\
  !*** ../../packages/core/src/types/services.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/template-function.ts":
/*!**********************************************************!*\
  !*** ../../packages/core/src/types/template-function.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/types/tokens.ts":
/*!***********************************************!*\
  !*** ../../packages/core/src/types/tokens.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/core/src/view.ts":
/*!***************************************!*\
  !*** ../../packages/core/src/view.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "View": function() { return /* binding */ View; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _parse_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-node.js */ "../../packages/core/src/parse-node.ts");
/* harmony import */ var _parse_declaration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-declaration.js */ "../../packages/core/src/parse-declaration.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _binders_attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binders/attribute.binder.js */ "../../packages/core/src/binders/attribute.binder.ts");





/**
 * Sets the attribute on the element. If no binder is matched it will fall
 * back to using this binder.
 */

/**
 * A collection of bindings built from a set of parent nodes.
 */

class View {
  /** Global root scope */

  /**
   * Helper function to create a new view inside of a binding
   * @param binding
   * @param models
   * @param anchorEl
   */
  static create(binder, models, anchorEl) {
    var _binder$marker;

    const template = binder.el.cloneNode(true);
    const view = new View(template, models, binder.view.options);
    view.bind();

    if (!(binder !== null && binder !== void 0 && (_binder$marker = binder.marker) !== null && _binder$marker !== void 0 && _binder$marker.parentNode)) {
      console.warn("[View]: No parent node for binding!");
    } else {
      binder.marker.parentNode.insertBefore(template, anchorEl);
    }

    return view;
  }

  // public componentView: View | null = null;

  /**
   * The DOM elements and the model objects for binding are passed into the
   * constructor along with any local options that should be used throughout the
   * context of the view and it's bindings.
   * @param els
   * @param models
   * @param options
   */
  constructor(els, models, options) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "bindings", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "webComponents", []);

    if (Array.isArray(els)) {
      this.els = els;
    } else {
      this.els = [els];
    }

    this.models = models; // If $root property exists in model merge this with the global root scope / model

    if (this.models.$root) {
      for (const key of Object.keys(this.models.$root)) {
        View.$rootScope[key] = this.models.$root[key];
      }
    }

    this.models.$root = View.$rootScope;
    this.options = options;
    this.build();
  }
  /**
   * Regist all components
   * This can sometimes be useful so that the browser automatically recognizes whether a component is inserted into the dom.
   * However, the components are already registered when they are found by riba in the DOM.
   *
   * Please note, this method does not support the browser fallback for browsers that cannot use custom elements.
   */


  registComponents() {
    for (const nodeName in this.options.components) {
      if (this.options.components[nodeName]) {
        // Not already registered?
        if (!customElements.get(nodeName)) {
          const COMPONENT = this.options.components[nodeName];
          this.registComponent(COMPONENT, nodeName);
        }
      }
    }
  }
  /**
   * Binds all of the current bindings for this view.
   */


  bind() {
    this.bindings.forEach(binding => {
      binding._bind();
    });
  }
  /**
   * Unbinds all of the current bindings for this view.
   */


  unbind() {
    if (Array.isArray(this.bindings)) {
      this.bindings.forEach(binding => {
        binding._unbind();

        if (typeof binding.el && this.options.removeBinderAttributes) {// TODO reset attribute ?
          // binding.el.setAttribute(attribute.name);
        }
      });
    } // TODO fallback to unbind web components


    if (Array.isArray(this.webComponents)) {
      this.webComponents.forEach(webComponent => {
        if (typeof webComponent.unbind === "function") {
          webComponent.unbind();
        }
      });
    }
  }
  /**
   * Syncs up the view with the model by running the routines on all bindings.
   */


  sync() {
    this.bindings.forEach(binding => {
      if (binding.sync) {
        binding.sync();
      }
    });
  }
  /**
   * Publishes the input values from the view back to the model (reverse sync).
   */


  publish() {
    this.bindings.forEach(binder => {
      if (binder.publishes && binder.publish) {
        binder.publish();
      }
    });
  }
  /**
   * Updates the view's models along with any affected bindings.
   * @param models
   */


  update() {
    let models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Object.keys(models).forEach(key => {
      this.models[key] = models[key];
    });

    for (const binding of this.bindings) {
      if (binding._update) {
        binding._update(models);
      }
    }
  }
  /**
   * Parses the DOM tree and builds `Binding` instances for every matched
   * binding declaration.
   */


  build() {
    this.bindings = []; // this.bindings || [];

    if (!this.options.templateDelimiters) {
      throw new Error("templateDelimiters required");
    }

    const elements = this.els;

    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];

      if (element) {
        (0,_parse_node_js__WEBPACK_IMPORTED_MODULE_1__.parseNode)(this, element, this.options.templateDelimiters);
      }
    }

    this.bindings.sort(View.bindingComparator);
  }

  startsWithPrefix(name) {
    const bindingFullPrefixes = this.options.fullPrefix;

    if (!bindingFullPrefixes) {
      throw new Error("prefix is required");
    }

    for (const fullPrefix of bindingFullPrefixes) {
      if (name.startsWith(fullPrefix)) {
        return fullPrefix;
      }
    }

    return undefined;
  }

  binderRegex(identifier) {
    var _identifier$match;

    const wildcards = ((_identifier$match = identifier.match(/\*/g)) === null || _identifier$match === void 0 ? void 0 : _identifier$match.length) || 0;
    let regexp;

    if (wildcards > 1) {
      regexp = new RegExp("^".concat(identifier.replace("*", "([^-]*)").replaceAll("-*", "-(.+)"), "$"));
    } else {
      regexp = new RegExp("^".concat(identifier.replaceAll("*", "(.+)"), "$"));
    }

    return regexp;
  }
  /**
   *
   */


  bindBinders(attributes, node) {
    let attributeBinders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.attributeBinders;
    let block = false;

    if (!this.options.binders) {
      return block;
    }

    const bindInfos = [];

    for (let i = 0, len = attributes.length; i < len; i++) {
      let nodeName = "";
      let Binder = null;
      const attribute = attributes[i]; // if attribute starts with the binding prefix. E.g. rv-

      const startingPrefix = this.startsWithPrefix(attribute.name);

      if (startingPrefix) {
        let identifier = "";
        nodeName = attribute.name.slice(startingPrefix.length); // if binder is not a attributeBinder binder should be set

        if (this.options.binders[nodeName]) {
          Binder = this.options.binders[nodeName];
        }

        if (Binder === null) {
          // seems to be a star binder
          // Check if any attributeBinder match's
          for (let k = 0; k < attributeBinders.length; k++) {
            identifier = attributeBinders[k];
            const regexp = this.binderRegex(identifier);

            if (regexp.test(nodeName)) {
              Binder = this.options.binders[identifier];
              break;
            }
          }
        }

        if (Binder === null) {
          if (this.options.binders["*"]) {
            Binder = this.options.binders["*"];
            identifier = "*";
          } else {
            Binder = _binders_attribute_binder_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBinder;
          }
        } // if block is set, do not bind its child's (this means the binder bound it by itself)
        // and build binding directly (do not push it to bindInfos array)


        if (Binder.block) {
          this.buildBinding(node, nodeName, attribute.value, Binder, identifier);

          if (node.removeAttribute && this.options.removeBinderAttributes) {
            node.removeAttribute(attribute.name);
          }

          block = true;
          return block;
        }

        bindInfos.push({
          attr: attribute,
          Binder,
          nodeName,
          identifier
        });
      }
    }

    for (let i = 0; i < bindInfos.length; i++) {
      const bindInfo = bindInfos[i];
      this.buildBinding(node, bindInfo.nodeName, bindInfo.attr.value, bindInfo.Binder, bindInfo.identifier);

      if (node.removeAttribute && this.options.removeBinderAttributes) {
        node.removeAttribute(bindInfo.attr.name);
      }
    }

    return block;
  }

  bindComponent(node) {
    let block = false;

    if (!this.options.components) {
      return block;
    }

    const nodeName = node.nodeName.toLowerCase();
    const COMPONENT = this.options.components[nodeName];

    if (COMPONENT) {
      // this.registComponentWithFallback(node, COMPONENT, nodeName);
      this.registComponent(COMPONENT, nodeName);
      block = true;
    } // Also block unknown custom elements except page components
    else if (this.options.blockUnknownCustomElements && (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_3__.isCustomElement)(node) && !nodeName.endsWith("-page")) {
      block = true;
    }

    return block;
  }

  traverse(node) {
    /** If true stop / block the parseNode recursion */
    let block = this.options.blockNodeNames.indexOf(node.nodeName) !== -1;

    if (block) {
      return block;
    }

    const attributes = node.attributes; // bind attribute binders if available

    if (attributes && this.options.binders) {
      block = this.bindBinders(attributes, node);

      if (block) {
        return block;
      }
    } // bind components


    if (!block && !node._bound && this.options.components) {
      block = this.bindComponent(node);
    }

    return block;
  }

  buildBinding(node, type, declaration, Binder, identifier) {
    const parsedDeclaration = (0,_parse_declaration_js__WEBPACK_IMPORTED_MODULE_2__.parseDeclaration)(declaration);
    const keypath = parsedDeclaration.keypath;
    const pipes = parsedDeclaration.pipes;
    this.bindings.push(new Binder(this, node, type, Binder.key, keypath, pipes, identifier));
  }
  /**
   * Register a custom element using the native customElements feature.
   * @param COMPONENT
   * @param nodeName
   */


  registComponent(COMPONENT, nodeName) {
    if (!customElements) {
      console.error("customElements not supported by your browser!");
      throw new Error("customElements not supported by your browser!");
    }

    const resolveNodeName = nodeName || COMPONENT.tagName;

    if (!customElements.get(resolveNodeName)) {
      customElements.define(COMPONENT.tagName, COMPONENT);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(View, "$rootScope", {});

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(View, "bindingComparator", (a, b) => {
  const aPriority = a.priority || 0;
  const bPriority = b.priority || 0;
  return bPriority - aPriority;
});

/***/ }),

/***/ "../../packages/extras/src/binders/data-scroll-position-y.binder.ts":
/*!**************************************************************************!*\
  !*** ../../packages/extras/src/binders/data-scroll-position-y.binder.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataScrollPositionYBinder": function() { return /* binding */ DataScrollPositionYBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");



const DEFAULT_OFFSET = 10;
/**
 * rv-data-scroll-position
 * Sets the scroll position to the element as a data attribute,
 * useful if you want to define styles depending on the scroll position.
 * ```
 * html:not([[data-scroll-position-y='top']) {
 *    padding-top: 3em;
 * }
 * ```
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 */

class DataScrollPositionYBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "offsetTop", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "offsetBottom", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "elementSelector", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._onScroll.bind(this)));
  }

  _onScroll() {
    if (this.elementSelector === "window") {
      const element = this.watchScrollOnElement;

      if (element.scrollY <= 0 + this.offsetTop) {
        this.el.dataset.scrollPositionY = "top";
      } else if (element.innerHeight + element.pageYOffset + this.offsetBottom >= document.body.offsetHeight) {
        this.el.dataset.scrollPositionY = "bottom";
      } else {
        this.el.dataset.scrollPositionY = "scrolled";
      }
    } else {
      const element = this.watchScrollOnElement;

      if (element.scrollTop <= 0 + this.offsetTop) {
        this.el.dataset.scrollPositionY = "top";
      } else if (element.scrollTop + this.offsetBottom >= element.scrollHeight - element.clientHeight) {
        this.el.dataset.scrollPositionY = "bottom";
      } else {
        this.el.dataset.scrollPositionY = "scrolled";
      }
    }
  }

  routine(el) {
    let elementSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "window";

    // Remove old scroll event
    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.removeEventListener("scroll", this.onScroll);
    } // Set new element to watch for the scroll event


    if (elementSelector === "window") {
      this.watchScrollOnElement = window;
    } else if (elementSelector === "this") {
      this.watchScrollOnElement = this.el;
    } else {
      this.watchScrollOnElement = document.querySelector(elementSelector) || undefined;
    } // Watch new element for scroll event


    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.addEventListener("scroll", this.onScroll, {
        passive: true
      });
    }

    this.offsetTop = Number(this.el.dataset.offsetTop) || DEFAULT_OFFSET;
    this.offsetBottom = Number(this.el.dataset.offsetBottom) || DEFAULT_OFFSET;
    this.elementSelector = elementSelector; // inital scroll position

    this.onScroll();
  }

  unbind() {
    // Remove old scroll event
    if (this.watchScrollOnElement) {
      this.watchScrollOnElement.removeEventListener("scroll", this.onScroll);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(DataScrollPositionYBinder, "key", "data-scroll-position-y");

/***/ }),

/***/ "../../packages/extras/src/binders/image-events.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/binders/image-events.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageEventsBinder": function() { return /* binding */ ImageEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! imagesloaded */ "../../.yarn/cache/imagesloaded-npm-5.0.0-5fe7f70cdb-aec1826e86.zip/node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_2__);



/**
 * rv-image-events
 * Additional image events:
 * * load-always - Triggered after all images have been either loaded or confirmed broken.
 * * load-done - Triggered after all images have successfully loaded without any broken images.
 * * load-fail - Triggered after all images have been loaded with at least one broken image.
 * * load-progress - Triggered after each image has been loaded.
 */

class ImageEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onAlways", this._onEvent.bind(this, "load-always"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onDone", this._onEvent.bind(this, "load-done"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onFail", this._onEvent.bind(this, "load-fail"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onProgress", this._onEvent.bind(this, "load-progress"));
  }

  _onEvent(customEventName, load, image) {
    this.el.dispatchEvent(new CustomEvent(customEventName, {
      detail: {
        load,
        image
      }
    }));
  }

  bind(el) {
    var _this$events, _this$events2, _this$events3, _this$events4;

    this.events = imagesloaded__WEBPACK_IMPORTED_MODULE_2___default()(el); // Forward the events as native events

    (_this$events = this.events) === null || _this$events === void 0 ? void 0 : _this$events.on("always", this.onAlways);
    (_this$events2 = this.events) === null || _this$events2 === void 0 ? void 0 : _this$events2.on("done", this.onDone);
    (_this$events3 = this.events) === null || _this$events3 === void 0 ? void 0 : _this$events3.on("fail", this.onFail);
    (_this$events4 = this.events) === null || _this$events4 === void 0 ? void 0 : _this$events4.on("progress", this.onProgress);
  }

  unbind() {
    if (this.events) {
      var _this$events5, _this$events6, _this$events7, _this$events8;

      (_this$events5 = this.events) === null || _this$events5 === void 0 ? void 0 : _this$events5.off("always", this.onAlways);
      (_this$events6 = this.events) === null || _this$events6 === void 0 ? void 0 : _this$events6.off("done", this.onDone);
      (_this$events7 = this.events) === null || _this$events7 === void 0 ? void 0 : _this$events7.off("fail", this.onFail);
      (_this$events8 = this.events) === null || _this$events8 === void 0 ? void 0 : _this$events8.off("progress", this.onProgress);
    }
  }

  routine() {// nothing yet
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ImageEventsBinder, "key", "image-events");

/***/ }),

/***/ "../../packages/extras/src/binders/index.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/binders/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoscrollBinder": function() { return /* reexport safe */ _scrollbar_autoscroll_binder_js__WEBPACK_IMPORTED_MODULE_5__.AutoscrollBinder; },
/* harmony export */   "DataScrollPositionYBinder": function() { return /* reexport safe */ _data_scroll_position_y_binder_js__WEBPACK_IMPORTED_MODULE_0__.DataScrollPositionYBinder; },
/* harmony export */   "ImageEventsBinder": function() { return /* reexport safe */ _image_events_binder_js__WEBPACK_IMPORTED_MODULE_1__.ImageEventsBinder; },
/* harmony export */   "ScrollEventsBinder": function() { return /* reexport safe */ _scroll_events_binder_js__WEBPACK_IMPORTED_MODULE_3__.ScrollEventsBinder; },
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* reexport safe */ _scroll_position_angle_binder_js__WEBPACK_IMPORTED_MODULE_4__.ScrollPositionAngleBinder; },
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* reexport safe */ _scrollbar_draggable_binder_js__WEBPACK_IMPORTED_MODULE_6__.ScrollbarDraggableBinder; },
/* harmony export */   "SyncElementPropertyBinder": function() { return /* reexport safe */ _sync_element_property_binder_js__WEBPACK_IMPORTED_MODULE_7__.SyncElementPropertyBinder; },
/* harmony export */   "TouchEventsBinder": function() { return /* reexport safe */ _touch_events_binder_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsBinder; }
/* harmony export */ });
/* harmony import */ var _data_scroll_position_y_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-scroll-position-y.binder.js */ "../../packages/extras/src/binders/data-scroll-position-y.binder.ts");
/* harmony import */ var _image_events_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-events.binder.js */ "../../packages/extras/src/binders/image-events.binder.ts");
/* harmony import */ var _touch_events_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./touch-events.binder.js */ "../../packages/extras/src/binders/touch-events.binder.ts");
/* harmony import */ var _scroll_events_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroll-events.binder.js */ "../../packages/extras/src/binders/scroll-events.binder.ts");
/* harmony import */ var _scroll_position_angle_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll-position-angle.binder.js */ "../../packages/extras/src/binders/scroll-position-angle.binder.ts");
/* harmony import */ var _scrollbar_autoscroll_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar-autoscroll.binder.js */ "../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts");
/* harmony import */ var _scrollbar_draggable_binder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scrollbar-draggable.binder.js */ "../../packages/extras/src/binders/scrollbar-draggable.binder.ts");
/* harmony import */ var _sync_element_property_binder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sync-element-property.binder.js */ "../../packages/extras/src/binders/sync-element-property.binder.ts");









/***/ }),

/***/ "../../packages/extras/src/binders/scroll-events.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/extras/src/binders/scroll-events.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollEventsBinder": function() { return /* binding */ ScrollEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/touch-events/scroll-events.service.js */ "../../packages/extras/src/services/touch-events/scroll-events.service.ts");



class ScrollEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.touchEventService = new _services_touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_2__.ScrollEventsService(el);
  }

  unbind() {
    if (this.touchEventService) {
      this.touchEventService.destroy();
    }
  }

  routine() {// nothing
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollEventsBinder, "key", "scroll-events");

/***/ }),

/***/ "../../packages/extras/src/binders/scroll-position-angle.binder.ts":
/*!*************************************************************************!*\
  !*** ../../packages/extras/src/binders/scroll-position-angle.binder.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* binding */ ScrollPositionAngleBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



/**
 * rv-scroll-position-*
 *
 * Scroll to a position
 *
 * @example
 * ```
 * <div rv-scroll-position-y="'end'"></div>
 * ```
 *
 * ```
 * <div rv-scroll-position-x="'start'"></div>
 * ```
 */

class ScrollPositionAngleBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", this._onResize.bind(this));
  }

  _onResize() {
    if (!this.position) {
      throw new Error("postion not defined!");
    }

    if (!this.angle) {
      throw new Error("angle not defined!");
    }

    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(this.el, this.position, this.angle);
  }

  routine(el, position) {
    this.position = position;
    this.angle = this.args[0];

    if (this.angle === "x") {
      this.angle = "horizontal";
    }

    if (this.angle === "y") {
      this.angle = "vertical";
    }

    window.addEventListener("resize", this.onResize, {
      passive: true
    });
    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(el, this.position, this.angle);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollPositionAngleBinder, "key", "scroll-position-*");

/***/ }),

/***/ "../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts":
/*!************************************************************************!*\
  !*** ../../packages/extras/src/binders/scrollbar-autoscroll.binder.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoscrollBinder": function() { return /* binding */ AutoscrollBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_autoscroll_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/autoscroll.service.js */ "../../packages/extras/src/services/autoscroll.service.ts");




/**
 * Slideout click event to toggle the slideout
 */

class AutoscrollBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, options) {
    if (options && options.width && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.isString)(options.width)) {
      if (options.width === "100vw") {
        el.style.width = options.width;
      } else {
        el.style.width = options.width;
      }
    }

    el.classList.add("rv-autoscroll-".concat(options.angle));
    setTimeout(() => {
      if (this.autoscroll) {
        this.autoscroll.destroy();
      }

      this.autoscroll = new _services_autoscroll_service_js__WEBPACK_IMPORTED_MODULE_3__.Autoscroll(el, options);
    }, 1000);
  }

  unbind() {
    if (this.autoscroll) {
      this.autoscroll.destroy();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(AutoscrollBinder, "key", "autoscroll");

/***/ }),

/***/ "../../packages/extras/src/binders/scrollbar-draggable.binder.ts":
/*!***********************************************************************!*\
  !*** ../../packages/extras/src/binders/scrollbar-draggable.binder.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* binding */ ScrollbarDraggableBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_dragscroll_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/dragscroll.service.js */ "../../packages/extras/src/services/dragscroll.service.ts");



/**
 * dragscroll
 */

class ScrollbarDraggableBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, options) {
    if (this.dragscroll) {
      this.dragscroll.destroy();
    }

    this.dragscroll = new _services_dragscroll_service_js__WEBPACK_IMPORTED_MODULE_2__.Dragscroll(el, options);
  }

  unbind() {
    if (this.dragscroll) {
      this.dragscroll.destroy();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ScrollbarDraggableBinder, "key", "scrollbar-draggable");

/***/ }),

/***/ "../../packages/extras/src/binders/sync-element-property.binder.ts":
/*!*************************************************************************!*\
  !*** ../../packages/extras/src/binders/sync-element-property.binder.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SyncElementPropertyBinder": function() { return /* binding */ SyncElementPropertyBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");



/**
 * Binds an event handler on the element.
 * either `sync-element-width` or `sync-element-height`
 */

class SyncElementPropertyBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "function", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 1000);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "syncWidth", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
      var _this$elToSync;

      this.el.style.width = (((_this$elToSync = this.elToSync) === null || _this$elToSync === void 0 ? void 0 : _this$elToSync.clientWidth) || 0) + "px";
    }));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "syncHeight", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
      var _this$elToSync2;

      this.el.style.height = (((_this$elToSync2 = this.elToSync) === null || _this$elToSync2 === void 0 ? void 0 : _this$elToSync2.clientHeight) || 0) + "px";
    }));
  }

  unbind() {
    const propertyName = this.args[0];

    if (this.elToSync) {
      this.elToSync.removeEventListener("resize", propertyName === "width" ? this.syncWidth : this.syncHeight);
    }
  }

  routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    const propertyName = this.args[0];

    if (this.elToSync) {
      this.elToSync.removeEventListener("resize", propertyName === "width" ? this.syncWidth : this.syncHeight);
    }

    const elementToSync = document.getElementById(value);

    if (elementToSync) {
      this.elToSync = elementToSync;

      switch (propertyName) {
        case "height":
          el.style.height = elementToSync.clientHeight + "px";
          window.addEventListener("resize", this.syncHeight);
          break;

        case "width":
          el.style.width = elementToSync.clientWidth + "px";
          window.addEventListener("resize", this.syncWidth);
          break;

        default:
          console.warn("[syncElementPropertyBinder] Unknown property: " + propertyName);
      }
    } else {
      console.warn("[syncElementPropertyBinder] Could not find element with id: " + value);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(SyncElementPropertyBinder, "key", "sync-element-*");

/***/ }),

/***/ "../../packages/extras/src/binders/touch-events.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/binders/touch-events.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsBinder": function() { return /* binding */ TouchEventsBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/touch-events/touch-events.service.js */ "../../packages/extras/src/services/touch-events/touch-events.service.ts");



class TouchEventsBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  bind(el) {
    this.touchEventService = new _services_touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsService(el);
  }

  unbind() {
    if (this.touchEventService) {
      this.touchEventService.destroy();
    }
  }

  routine() {// nothing
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(TouchEventsBinder, "key", "touch-events");

/***/ }),

/***/ "../../packages/extras/src/extras.module.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/extras.module.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extrasModule": function() { return /* binding */ extrasModule; }
/* harmony export */ });
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/extras/src/helper/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/extras/src/binders/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/extras/src/services/index.ts");

 // import * as formatters from "./formatters/index.js";

 // import * as components from './components';

const extrasModule = {
  helper: _helper_index_js__WEBPACK_IMPORTED_MODULE_0__,
  formatters: {},
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  components: {},

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ExtrasService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/extras/src/helper/ease.ts":
/*!************************************************!*\
  !*** ../../packages/extras/src/helper/ease.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easeInCubic": function() { return /* binding */ easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* binding */ easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* binding */ easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* binding */ easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* binding */ easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* binding */ easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* binding */ easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* binding */ easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* binding */ easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* binding */ easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* binding */ easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* binding */ easeOutQuint; },
/* harmony export */   "linear": function() { return /* binding */ linear; }
/* harmony export */ });
// easing methods, see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/
const linear = t => {
  return t;
};
const easeInQuad = t => {
  return t * t;
};
const easeOutQuad = t => {
  return t * (2 - t);
};
const easeInOutQuad = t => {
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
};
const easeInCubic = t => {
  return t * t * t;
};
const easeOutCubic = t => {
  return --t * t * t + 1;
};
const easeInOutCubic = t => {
  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
};
const easeInQuart = t => {
  return t * t * t * t;
};
const easeOutQuart = t => {
  return 1 - --t * t * t * t;
};
const easeInOutQuart = t => {
  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
};
const easeInQuint = t => {
  return t * t * t * t * t;
};
const easeOutQuint = t => {
  return 1 + --t * t * t * t * t;
};
const easeInOutQuint = t => {
  return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
};

/***/ }),

/***/ "../../packages/extras/src/helper/index.ts":
/*!*************************************************!*\
  !*** ../../packages/extras/src/helper/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easeInCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuint; },
/* harmony export */   "getScrollPosition": function() { return /* reexport safe */ _scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* reexport safe */ _scroll_js__WEBPACK_IMPORTED_MODULE_1__.isScrollable; },
/* harmony export */   "linear": function() { return /* reexport safe */ _ease_js__WEBPACK_IMPORTED_MODULE_0__.linear; }
/* harmony export */ });
/* harmony import */ var _ease_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ease.js */ "../../packages/extras/src/helper/ease.ts");
/* harmony import */ var _scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll.js */ "../../packages/extras/src/helper/scroll.ts");



/***/ }),

/***/ "../../packages/extras/src/helper/scroll.ts":
/*!**************************************************!*\
  !*** ../../packages/extras/src/helper/scroll.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getScrollPosition": function() { return /* binding */ getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* binding */ isScrollable; }
/* harmony export */ });
const getScrollPosition = element => {
  const window = element;
  const el = element; // If element is window

  if (window.document && window.location) {
    const scrollPosition = {
      /** horizontal: left / right / width */
      x: window.pageXOffset,

      /** vertical: top / bottom / height */
      y: window.pageYOffset,

      /** horizontal: left / right / width */
      maxX: document.documentElement.scrollWidth - document.documentElement.clientWidth,

      /** vertical: top / bottom / height */
      maxY: document.documentElement.scrollHeight - document.documentElement.clientHeight
    };
    return scrollPosition;
  }

  const scrollPosition = {
    /** horizontal: left / right / width */
    x: el.scrollLeft,

    /** vertical: top / bottom / height */
    y: el.scrollTop,

    /** horizontal: left / right / width */
    maxX: el.scrollWidth - el.clientWidth,

    /** vertical: top / bottom / height */
    maxY: el.scrollHeight - el.clientHeight
  };
  return scrollPosition;
};
const isScrollable = element => {
  const scrollPosition = getScrollPosition(element);
  return scrollPosition.maxX > 0 || scrollPosition.maxY > 0;
};

/***/ }),

/***/ "../../packages/extras/src/index.ts":
/*!******************************************!*\
  !*** ../../packages/extras/src/index.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Autoscroll; },
/* harmony export */   "AutoscrollBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.AutoscrollBinder; },
/* harmony export */   "DataScrollPositionYBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.DataScrollPositionYBinder; },
/* harmony export */   "Dragscroll": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Dragscroll; },
/* harmony export */   "ExtrasService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ExtrasService; },
/* harmony export */   "FullscreenService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.FullscreenService; },
/* harmony export */   "Gameloop": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Gameloop; },
/* harmony export */   "ImageEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ImageEventsBinder; },
/* harmony export */   "MediaReadyState": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.MediaReadyState; },
/* harmony export */   "ScrollEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollEventsBinder; },
/* harmony export */   "ScrollEventsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.ScrollEventsService; },
/* harmony export */   "ScrollPositionAngleBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollPositionAngleBinder; },
/* harmony export */   "ScrollbarDraggableBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ScrollbarDraggableBinder; },
/* harmony export */   "SyncElementPropertyBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.SyncElementPropertyBinder; },
/* harmony export */   "TouchEventsBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchEventsBinder; },
/* harmony export */   "TouchEventsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.TouchEventsService; },
/* harmony export */   "TouchType": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.TouchType; },
/* harmony export */   "easeInCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInCubic; },
/* harmony export */   "easeInOutCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutCubic; },
/* harmony export */   "easeInOutQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuad; },
/* harmony export */   "easeInOutQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuart; },
/* harmony export */   "easeInOutQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInOutQuint; },
/* harmony export */   "easeInQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuad; },
/* harmony export */   "easeInQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuart; },
/* harmony export */   "easeInQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeInQuint; },
/* harmony export */   "easeOutCubic": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutCubic; },
/* harmony export */   "easeOutQuad": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuad; },
/* harmony export */   "easeOutQuart": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuart; },
/* harmony export */   "easeOutQuint": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.easeOutQuint; },
/* harmony export */   "extrasModule": function() { return /* reexport safe */ _extras_module_js__WEBPACK_IMPORTED_MODULE_4__.extrasModule; },
/* harmony export */   "getScrollPosition": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.getScrollPosition; },
/* harmony export */   "isScrollable": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.isScrollable; },
/* harmony export */   "linear": function() { return /* reexport safe */ _helper_index_js__WEBPACK_IMPORTED_MODULE_0__.linear; }
/* harmony export */ });
/* harmony import */ var _helper_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/index.js */ "../../packages/extras/src/helper/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/extras/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/extras/src/binders/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/index.js */ "../../packages/extras/src/types/index.ts");
/* harmony import */ var _extras_module_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extras.module.js */ "../../packages/extras/src/extras.module.ts");






/***/ }),

/***/ "../../packages/extras/src/services/autoscroll.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/autoscroll.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* binding */ Autoscroll; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameloop.service.js */ "../../packages/extras/src/services/gameloop.service.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");




class Autoscroll {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "direction", 1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_pause", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "velocity", 0.008);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "move", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastMove", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "angle", "horizontal");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pauseOnHover", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "resumeTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__.throttle)(this._onResize.bind(this)));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScroll", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_3__.throttle)(this._onScroll.bind(this)));

    this.el = el;
    this.options = options;
    this.direction = this.options.direction || this.direction;
    this.velocity = this.options.velocity || this.velocity;
    this.angle = this.options.angle || this.angle;
    this.pauseOnHover = typeof this.options.pauseOnHover === "boolean" ? this.options.pauseOnHover : this.pauseOnHover;
    this.limit = this.getLimit(this.el);
    this.move = this.getPosition();

    if (this.direction === -1) {
      // start right
      this.el.scrollLeft = this.limit;
    } else {
      // start left
      this.el.scrollLeft = 0;
    }

    this.addEventListeners();
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.startLoop({
      maxFPS: 60
    });
  }
  /**
   * @note this is not the gameloop update method!
   */


  update() {
    this.limit = this.getLimit(this.el);
    this.setPosition();
  }

  destroy() {
    this.removeEventListeners();
  }

  pause() {
    this.el.style.scrollBehavior = "";
    this._pause = true;
  }
  /** Resume autoscrolling if this method was not called up for [delay] milliseconds */


  resume() {
    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (!this._pause) {
      return;
    }

    this.stopResumeTimeout();
    this.resumeTimer = window.setTimeout(() => {
      this.setPosition();
      this._pause = false; // Disable smooth scrolling on autoscroll if set

      this.el.style.scrollBehavior = "auto";
    }, delay);
  }

  addEventListeners() {
    this.removeEventListeners();
    this.onResize = this.onResize.bind(this);
    this.onMouseIn = this.onMouseIn.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.render = this.render.bind(this);
    this.updateMove = this.updateMove.bind(this);
    window.addEventListener("resize", this.onResize, {
      passive: true
    });
    this.el.addEventListener("mouseenter", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("mouseover", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("focusin", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("touchstart", this.onMouseIn, {
      passive: true
    });
    this.el.addEventListener("mouseleave", this.onMouseOut, {
      passive: true
    });
    this.el.addEventListener("focusout", this.onMouseOut, {
      passive: true
    });
    this.el.addEventListener("mouseup", this.onMouseUp, {
      passive: true
    });
    this.el.addEventListener("touchend", this.onMouseUp, {
      passive: true
    });

    if (this.touchCapable) {
      this.el.addEventListener("scroll", this.onMouseUp, {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onMouseUp, {
        passive: true
      }); // See ScrollEventsService for "scrollended" event

      this.el.addEventListener("scrollended", this.onMouseUp, {
        passive: true
      });
    } else {
      this.el.addEventListener("scroll", this.onScroll, {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onScroll, {
        passive: true
      });
      this.el.addEventListener("scrollended", this.onScroll, {
        passive: true
      });
    }

    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.on("render", this.render);
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.on("update", this.updateMove);
  }

  removeEventListeners() {
    window.removeEventListener("resize", this.onResize);
    this.el.removeEventListener("mouseenter", this.onMouseIn);
    this.el.removeEventListener("mouseover", this.onMouseIn);
    this.el.removeEventListener("focusin", this.onMouseIn);
    this.el.removeEventListener("touchstart", this.onMouseIn);
    this.el.removeEventListener("mouseleave", this.onMouseOut);
    this.el.removeEventListener("focusout", this.onMouseOut);
    this.el.removeEventListener("mouseup", this.onMouseUp);
    this.el.removeEventListener("touchend", this.onMouseUp);

    if (this.touchCapable) {
      this.el.removeEventListener("scroll", this.onMouseUp);
      this.el.removeEventListener("scrollend", this.onMouseUp);
      this.el.removeEventListener("scrollended", this.onMouseUp);
    } else {
      this.el.removeEventListener("scroll", this.onScroll);
      this.el.removeEventListener("scrollend", this.onScroll);
      this.el.removeEventListener("scrollended", this.onScroll);
    }

    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.off("render", this.render);
    _gameloop_service_js__WEBPACK_IMPORTED_MODULE_2__.Gameloop.events.off("update", this.updateMove);
  }

  onMouseIn() {
    if (this.pauseOnHover) {
      this.pause();
    }
  }

  onMouseOut() {
    this.resume(200);
  }

  onMouseUp() {
    this.resume(1000);
  }

  _onResize() {
    this.limit = this.getLimit(this.el);
    this.resume(200);
  }

  _onScroll() {
    this.stopResumeTimeout();
  }

  stopResumeTimeout() {
    if (this.resumeTimer !== null) {
      clearTimeout(this.resumeTimer);
      this.resumeTimer = null;
    }
  }

  getPosition() {
    return (this.angle === "vertical" ? this.el.scrollTop : this.el.scrollLeft) || 0;
  }

  setPosition() {
    this.move = this.getPosition();
  }

  getLimit(el) {
    return this.angle === "vertical" ? (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(el).maxY : (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(el).maxX;
  }
  /**
   * This Interpolation:
   * ```
   * protected render(Interpolation: number) {
   * ...
   * this.move = (this.lastMove + (this.move - this.lastMove) * Interpolation);
   * ```
   * is not working here for some reason
   * like it works in the demos/extras-game-loop demo or here:
   * https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing
   *
   * Without this the scrollbar scrolls smooth, need to find out why.
   */


  render() {
    if (this._pause) {
      return;
    }

    this.scroll(this.move);
  }

  updateMove(delta) {
    if (this._pause) {
      return;
    }

    this.lastMove = this.move;
    const append = this.velocity * this.direction * delta;
    this.move += append; // Switch directions if we go too far

    if (this.move <= 0 && this.direction !== 1) {
      this.direction = 1;
    }

    if (this.move >= this.limit && this.direction !== -1) {
      this.direction = -1;
    }
  }

  scroll(move) {
    if (this.angle === "vertical") {
      this.el.scrollTop = move;
    } else {
      this.el.scrollLeft = move;
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/dragscroll.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/dragscroll.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dragscroll": function() { return /* binding */ Dragscroll; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/control */ "../../packages/utils/src/control.ts");




/**
 * Scroll an scrollable element by dragging and moving your mouse.
 * inspired by https://github.com/asvd/dragscroll
 */
class Dragscroll {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      detectGlobalMove: true
    };

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastClientX", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastClientY", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pushed", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "checkDraggable", (0,_ribajs_utils_src_control__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._checkDraggable.bind(this)));

    this.el = el;
    this.options = options;

    if (this.touchCapable) {
      // Do noting on touch devices
      return this;
    }

    this.onMouseDown = this.onMouseDown.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    this.onMouseMove = this.onMouseMove.bind(this);
    this.checkDraggable = this.checkDraggable.bind(this);
    el.removeEventListener("mousedown", this.onMouseDown);
    el.addEventListener("mousedown", this.onMouseDown, {
      passive: true
    });
    window.addEventListener("resize", this.checkDraggable); // Use global move if your element does not use the full width / height

    if (this.options.detectGlobalMove) {
      window.removeEventListener("mouseup", this.onMouseUp);
      window.removeEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mouseup", this.onMouseUp, {
        passive: true
      });
      window.addEventListener("mousemove", this.onMouseMove, {
        passive: true
      });
    } else {
      el.removeEventListener("mouseup", this.onMouseUp);
      el.removeEventListener("mousemove", this.onMouseMove);
      el.addEventListener("mouseup", this.onMouseUp, {
        passive: true
      });
      el.addEventListener("mousemove", this.onMouseMove, {
        passive: true
      });
    } // initial


    this.checkDraggable();
  }

  destroy() {
    this.removeEventListeners();
    this.el.classList.remove("draggable");
  }

  _checkDraggable() {
    if ((0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.isScrollable)(this.el)) {
      this.el.classList.add("draggable");
    } else {
      this.el.classList.remove("draggable");
    }
  }

  onMouseDown(e) {
    this.pushed = true;
    this.lastClientX = e.clientX;
    this.lastClientY = e.clientY;
  }

  onMouseUp() {
    this.pushed = false;
  }

  onMouseMove(e) {
    let newScrollX = 0;
    let newScrollY = 0;

    if (this.pushed) {
      this.el.scrollLeft -= newScrollX = -this.lastClientX + (this.lastClientX = e.clientX);
      this.el.scrollTop -= newScrollY = -this.lastClientY + (this.lastClientY = e.clientY);

      if (this.el === document.body) {
        if (document.documentElement) {
          this.el = document.documentElement;
        }

        this.el.scrollLeft -= newScrollX;
        this.el.scrollTop -= newScrollY;
      }
    }
  }

  removeEventListeners() {
    window.removeEventListener("resize", this.checkDraggable);
    this.el.removeEventListener("mousedown", this.onMouseDown);
    this.el.removeEventListener("mouseup", this.onMouseUp);
    this.el.removeEventListener("mousemove", this.onMouseMove);
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/extras.service.ts":
/*!************************************************************!*\
  !*** ../../packages/extras/src/services/extras.service.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtrasService": function() { return /* binding */ ExtrasService; }
/* harmony export */ });
class ExtrasService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ExtrasService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ExtrasService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/fullscreen.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/services/fullscreen.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FullscreenService": function() { return /* binding */ FullscreenService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class FullscreenService {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "enterK", "requestFullscreen");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "exitK", "exitFullscreen");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "elementK", "fullscreenElement");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "eventK", "fullscreenchange");

    const dE = document.documentElement;
    const tF = "fullscreenchange";

    if (dE.requestFullscreen) {
      this.enterK = "requestFullscreen";
      this.exitK = "exitFullscreen";
      this.elementK = "fullscreenElement";
      this.eventK = tF;
    } else if (dE.mozRequestFullScreen) {
      this.enterK = "mozRequestFullScreen";
      this.exitK = "mozCancelFullScreen";
      this.elementK = "mozFullScreenElement";
      this.eventK = "moz" + tF;
    } else if (dE.webkitRequestFullscreen) {
      this.enterK = "webkitRequestFullscreen";
      this.exitK = "webkitExitFullscreen";
      this.elementK = "webkitFullscreenElement";
      this.eventK = "webkit" + tF;
    } else if (dE.msRequestFullscreen) {
      this.enterK = "msRequestFullscreen";
      this.exitK = "msExitFullscreen";
      this.elementK = "msFullscreenElement";
      this.eventK = "MSFullscreenChange";
    }
  }

  static getSingleton() {
    if (FullscreenService.instance) {
      return FullscreenService.instance;
    }

    FullscreenService.instance = new FullscreenService();
    return FullscreenService.instance;
  }

  static supported() {
    const d = document;
    return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
  }

  enter(el) {
    if (!el) {
      el = document.body;
    }

    if (this.isFullscreen()) {
      return;
    }

    if (this.enterK === "webkitRequestFullscreen") {
      el[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
    } else {
      el[this.enterK]();
    }
  }

  exit() {
    if (this.isFullscreen()) {
      document[this.exitK]();
    }
  }

  isFullscreen() {
    return document[this.elementK];
  }

  toggle(el) {
    if (this.isFullscreen()) {
      this.exit();
      return;
    } else {
      this.enter(el);
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/gameloop.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/extras/src/services/gameloop.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gameloop": function() { return /* binding */ Gameloop; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");



/**
 * @see https://www.sitepoint.com/quick-tip-game-loop-in-javascript/
 * @see https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing#fps-control
 */
class Gameloop {
  static getFps() {
    return this.fps;
  }

  static startLoop() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.setOptions(options);

    if (!this.loopStarted) {
      this.loopStarted = true;
      window.requestAnimationFrame(this.loop.bind(this));
    }
  }

  static setOptions(options) {
    this.maxFPS = typeof options.maxFPS === "number" ? options.maxFPS : this.maxFPS;
  }
  /**
   * The main / game loop
   * @param timestamp
   */


  static loop(timestamp) {
    // Throttle the frame rate.
    if (timestamp < this.lastFrameTimeMs + 1000 / this.maxFPS) {
      this.frameID = window.requestAnimationFrame(this.loop.bind(this));
      return;
    }

    const progress = timestamp - this.lastFrameTimeMs;
    this.delta += progress;
    this.lastFrameTimeMs = timestamp;
    this.begin(timestamp, this.delta);

    if (timestamp > this.lastFpsUpdate + 1000) {
      this.fps = 0.25 * this.framesThisSecond + 0.75 * this.fps;
      this.lastFpsUpdate = timestamp;
      this.framesThisSecond = 0;
    }

    this.framesThisSecond++;
    let numUpdateSteps = 0;

    while (this.delta >= this.timestep) {
      this.update(this.timestep);
      this.delta -= this.timestep;

      if (++numUpdateSteps >= 240) {
        this.panic();
        break;
      }
    }

    this.render(this.delta / this.timestep);
    this.end(this.fps);
    this.frameID = window.requestAnimationFrame(this.loop.bind(this));
  }

  static begin(timestamp, delta) {
    this.events.trigger("begin", timestamp, delta);
  }

  static render(interp) {
    this.events.trigger("render", interp);
  }

  static update(delta) {
    this.events.trigger("update", delta);
  }

  static end(delta) {
    this.events.trigger("end", delta);
  }

  static panic() {
    this.delta = 0; // discard the unsimulated time
  }

  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Gameloop.setOptions(options);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "events", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("gameloop"));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "maxFPS", 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "fps", 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "timestep", 1000 / 60);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "loopStarted", false);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "lastFrameTimeMs", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "delta", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "framesThisSecond", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "lastFpsUpdate", 0);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Gameloop, "frameID", 0);

/***/ }),

/***/ "../../packages/extras/src/services/index.ts":
/*!***************************************************!*\
  !*** ../../packages/extras/src/services/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Autoscroll": function() { return /* reexport safe */ _autoscroll_service_js__WEBPACK_IMPORTED_MODULE_0__.Autoscroll; },
/* harmony export */   "Dragscroll": function() { return /* reexport safe */ _dragscroll_service_js__WEBPACK_IMPORTED_MODULE_1__.Dragscroll; },
/* harmony export */   "ExtrasService": function() { return /* reexport safe */ _extras_service_js__WEBPACK_IMPORTED_MODULE_2__.ExtrasService; },
/* harmony export */   "FullscreenService": function() { return /* reexport safe */ _fullscreen_service_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenService; },
/* harmony export */   "Gameloop": function() { return /* reexport safe */ _gameloop_service_js__WEBPACK_IMPORTED_MODULE_4__.Gameloop; },
/* harmony export */   "ScrollEventsService": function() { return /* reexport safe */ _touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_5__.ScrollEventsService; },
/* harmony export */   "TouchEventsService": function() { return /* reexport safe */ _touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_6__.TouchEventsService; }
/* harmony export */ });
/* harmony import */ var _autoscroll_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autoscroll.service.js */ "../../packages/extras/src/services/autoscroll.service.ts");
/* harmony import */ var _dragscroll_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragscroll.service.js */ "../../packages/extras/src/services/dragscroll.service.ts");
/* harmony import */ var _extras_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extras.service.js */ "../../packages/extras/src/services/extras.service.ts");
/* harmony import */ var _fullscreen_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fullscreen.service.js */ "../../packages/extras/src/services/fullscreen.service.ts");
/* harmony import */ var _gameloop_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameloop.service.js */ "../../packages/extras/src/services/gameloop.service.ts");
/* harmony import */ var _touch_events_scroll_events_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touch-events/scroll-events.service.js */ "../../packages/extras/src/services/touch-events/scroll-events.service.ts");
/* harmony import */ var _touch_events_touch_events_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./touch-events/touch-events.service.js */ "../../packages/extras/src/services/touch-events/touch-events.service.ts");








/***/ }),

/***/ "../../packages/extras/src/services/touch-events/base-events.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/base-events.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseEventsService": function() { return /* binding */ BaseEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class BaseEventsService {
  get isTouchCapable() {
    return this.touchCapable;
  }

  constructor(el) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "touchCapable", "ontouchstart" in window);

    this.el = el;
  }

  triggerCustomEvent(eventName, originalEvent) {
    let extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    extraParameters.originalEvent = originalEvent;
    extraParameters.target = originalEvent.target; // create and dispatch the event

    const event = new CustomEvent(eventName, {
      detail: extraParameters
    });
    this.el.dispatchEvent(event);
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/touch-events/scroll-events.service.ts":
/*!********************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/scroll-events.service.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollEventsService": function() { return /* binding */ ScrollEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper/scroll.js */ "../../packages/extras/src/helper/scroll.ts");
/* harmony import */ var _base_events_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-events.service.js */ "../../packages/extras/src/services/touch-events/base-events.service.ts");



class ScrollEventsService extends _base_events_service_js__WEBPACK_IMPORTED_MODULE_2__.BaseEventsService {
  constructor(el) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(el);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "isScrolling", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "delay", 300);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startPosition", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "endPosition", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scrollTimer", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onScrollEvent", this._onScrollEvent.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scroll", this._scroll.bind(this));

    this.el = el;
    this.delay = options.delay || this.delay;
    this.startPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el); // Watch also native scrollend to not trigger scrollended before scrollend was triggered

    this._scrollEvent = this.touchCapable ? ["touchmove", "scrollend", "scroll"] : ["scroll", "scrollend"];
    this.removeEventListeners();
    this.addEventListeners();
  }

  destroy() {
    this.removeEventListeners();
  }

  get scrollEvent() {
    return this._scrollEvent;
  }

  getScrollDir(start, end) {
    if (!start || !end) {
      return "unknown";
    }

    if (start.x > end.x) {
      return "right";
    }

    if (start.x < end.x) {
      return "left";
    }

    if (start.y > end.y) {
      return "down";
    }

    if (start.y < end.y) {
      return "up";
    }

    return "none";
  }

  removeEventListeners() {
    for (const eventName of this._scrollEvent) {
      this.el.removeEventListener(eventName, this.onScrollEvent);
    }
  }

  addEventListeners() {
    for (const eventName of this._scrollEvent) {
      this.el.addEventListener(eventName, this.onScrollEvent, {
        passive: true
      });
    }
  }

  _onScrollEvent(event) {
    if (!event.target) {
      return false;
    }

    if (this.scrollTimer !== null) {
      clearTimeout(this.scrollTimer);
      this.scrollTimer = null;
    }

    if (!this.isScrolling) {
      this.scrollstart(event);
    }

    if (this.isScrolling) {
      this.scroll(event);
    }

    this.scrollTimer = window.setTimeout(() => {
      this.scrollended(event);
    }, this.delay);
    return true;
  }

  /**
   * scrollended Event
   */
  scrollended(event) {
    this.isScrolling = false;
    this.endPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    const direction = this.getScrollDir(this.startPosition, this.endPosition);
    this.triggerCustomEvent("scrollended", event, {
      startPosition: this.startPosition,
      endPosition: this.endPosition,
      direction
    });
  }
  /**
   * scrollstart Event
   */


  scrollstart(event) {
    this.isScrolling = true;
    this.startPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    this.triggerCustomEvent("scrollstart", event, {
      startPosition: this.startPosition
    });
  }
  /**
   * scrolling, scrollup, scrolldown, scrollleft and scrollright Events
   */


  _scroll(event) {
    const currentPosition = (0,_helper_scroll_js__WEBPACK_IMPORTED_MODULE_1__.getScrollPosition)(this.el);
    const direction = this.getScrollDir(this.startPosition, currentPosition);
    this.triggerCustomEvent("scroll" + direction, event, {
      startPosition: this.startPosition,
      currentPosition,
      direction
    });
    this.triggerCustomEvent("scrolling", event, {
      startPosition: this.startPosition,
      currentPosition,
      direction
    });
  }

}

/***/ }),

/***/ "../../packages/extras/src/services/touch-events/touch-events.service.ts":
/*!*******************************************************************************!*\
  !*** ../../packages/extras/src/services/touch-events/touch-events.service.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchEventsService": function() { return /* binding */ TouchEventsService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/index.js */ "../../packages/extras/src/types/index.ts");
/* harmony import */ var _base_events_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base-events.service.js */ "../../packages/extras/src/services/touch-events/base-events.service.ts");




/**
 * Vanilla version of jQuery Mobile Events
 * @see https://github.com/benmajor/jQuery-Touch-Events
 *
 * Copyright 2011-2019, Ben Major
 * Copyright 2019-2021, Pascal Garber
 * Licensed under the MIT License:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class TouchEventsService extends _base_events_service_js__WEBPACK_IMPORTED_MODULE_3__.BaseEventsService {
  // GETTERS:
  get isTouchCapable() {
    return this.settings.touchCapable;
  }

  get startEvent() {
    return this.settings.startevent;
  }

  get endEvent() {
    return this.settings.endevent;
  }

  get moveEvent() {
    return this.settings.moveevent;
  }

  get tapEvent() {
    return this.settings.tapevent;
  } // public get scrollEvent() {
  //   return this.scrollEvents.scrollEvent;
  // }
  // SETTERS:

  /** Set the X threshold of swipe events */


  set swipeThresholdX(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.swipeHThreshold = threshold;
  }
  /** Set the Y threshold of swipe events */


  set swipeThresholdY(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.swipeVThreshold = threshold;
  }
  /** Set the double tap interval */


  set doubleTapInt(interval) {
    if (typeof interval !== "number") {
      throw new Error("Interval parameter must be a type of number");
    }

    this.settings.doubletapInterval = interval;
  }
  /** Set the taphold threshold */


  set tapHoldThreshold(threshold) {
    if (typeof threshold !== "number") {
      throw new Error("Threshold parameter must be a type of number");
    }

    this.settings.tapholdThreshold = threshold;
  }
  /** Set the pixel range for tapas */


  set tapRange(range) {
    if (typeof range !== "number") {
      throw new Error("Ranger parameter must be a type of number");
    }

    this.settings.tapPixelRange = range;
  } // PROPERTIES:

  /** Used internally for `taphold` */


  // protected scrollEvents: ScrollEventsService;
  constructor(el) {
    let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      tapPixelRange: 5,
      swipeHThreshold: 50,
      swipeVThreshold: 50,
      tapholdThreshold: 750,
      doubletapInterval: 500,
      shakeThreshold: 15,
      touchCapable: "ontouchstart" in window,
      startevent: ["touchstart"],
      endevent: ["touchend"],
      moveevent: ["touchmove"],
      tapevent: ["tap"]
    };
    super(el);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startPosition", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "endPosition", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "originalCoord", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "finalCoord", {
      x: 0,
      y: 0
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startEvnt", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapheld", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "firstTap", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "cooling", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "doubletapped", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastTouch", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "hasSwiped", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapStarted", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "swipeStarted", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "startTime", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "holdTimer", -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "tapTimer", -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "actionTimer", -1);

    this.el = el; // Set settings by device type (if device is touch capable)

    settings.startevent = settings.touchCapable ? ["touchstart"] : ["mousedown"];
    settings.endevent = settings.touchCapable ? ["touchend"] : ["mouseup"];
    settings.moveevent = settings.touchCapable ? ["touchmove"] : ["mousemove"];
    settings.tapevent = settings.touchCapable ? ["tap"] : ["click"];
    this.settings = settings; // this.scrollEvents = new ScrollEventsService(this.el);

    this.onStartEvent = this.onStartEvent.bind(this);
    this.onMoveEvent = this.onMoveEvent.bind(this);
    this.onEndEvent = this.onEndEvent.bind(this);
    this.addEventListeners();
  }

  destroy() {
    this.removeEventListeners(); // this.scrollEvents.destroy();
  }

  removeEventListeners() {
    for (const eventName of this.settings.startevent) {
      this.el.removeEventListener(eventName, this.onStartEvent);
    }

    for (const eventName of this.settings.moveevent) {
      this.el.removeEventListener(eventName, this.onMoveEvent);
    }

    for (const eventName of this.settings.endevent) {
      this.el.removeEventListener(eventName, this.onEndEvent);
    } // this.scrollEvents.destroy();

  } // HELPER METHODS:


  getSwipeDir(startPosition, endPosition) {
    let hThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.settings.swipeHThreshold;
    let vThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.settings.swipeVThreshold;
    let swipeDir = "";

    if (startPosition.y > endPosition.y && startPosition.y - endPosition.y > vThreshold) {
      swipeDir = "swipeup";
    }

    if (startPosition.x < endPosition.x && endPosition.x - startPosition.x > hThreshold) {
      swipeDir = "swiperight";
    }

    if (startPosition.y < endPosition.y && endPosition.y - startPosition.y > vThreshold) {
      swipeDir = "swipedown";
    }

    if (startPosition.x > endPosition.x && startPosition.x - endPosition.x > hThreshold) {
      swipeDir = "swipeleft";
    }

    return swipeDir;
  }

  getPosition(event) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let touchesTypes;

    switch (type) {
      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED:
        touchesTypes = event.changedTouches;
        break;

      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET:
        touchesTypes = event.targetTouches;
        break;

      default:
        touchesTypes = event.touches;
        break;
    }

    const position = {
      x: this.settings.touchCapable ? touchesTypes[index].pageX : event.pageX,
      y: this.settings.touchCapable ? touchesTypes[index].pageY : event.pageY
    };
    return position;
  }

  getOffset(event) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    const boundingClientRect = this.el.getBoundingClientRect();
    let touchesTypes;

    switch (type) {
      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED:
        touchesTypes = event.changedTouches;
        break;

      case _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET:
        touchesTypes = event.targetTouches;
        break;

      default:
        touchesTypes = event.touches;
        break;
    }

    const offset = {
      x: this.settings.touchCapable ? Math.round(touchesTypes[index].pageX - (boundingClientRect ? boundingClientRect.left : 0)) : Math.round(event.pageX - (boundingClientRect ? boundingClientRect.left : 0)),
      y: this.settings.touchCapable ? Math.round(touchesTypes[index].pageY - (boundingClientRect ? boundingClientRect.top : 0)) : Math.round(event.pageY - (boundingClientRect ? boundingClientRect.top : 0))
    };
    return offset;
  }

  getTouchData(event) {
    let withIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let positionType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT;
    let offsetType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED;
    const touchData = {
      position: this.getPosition(event, positionType),
      offset: this.getOffset(event, offsetType),
      time: Date.now()
    };

    if (withIndex) {
      touchData.index = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.getElementIndex)(event.target);
    }

    return touchData;
  }

  addEventListeners() {
    for (const eventName of this.settings.startevent) {
      this.el.addEventListener(eventName, this.onStartEvent, {
        passive: true
      });
    }

    for (const eventName of this.settings.moveevent) {
      this.el.addEventListener(eventName, this.onMoveEvent, {
        passive: true
      });
    }

    for (const eventName of this.settings.endevent) {
      this.el.addEventListener(eventName, this.onEndEvent, {
        passive: true
      });
    }
  } // EVENT HANDLERS:


  onStartEvent(event) {
    if (event.which && event.which !== 1) {
      return false;
    }

    this.startPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.endPosition = {
      x: this.startPosition.x,
      y: this.startPosition.y
    };
    this.startTime = Date.now(); // For `doubletap`

    this.doubletapped = false;

    if (!this.firstTap) {
      this.firstTap = this.getTouchData(event, true, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    } // For `tap`, `swipe`


    this.tapStarted = true;
    this.swipeStarted = true; // For `swipe`

    this.originalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.finalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.startEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    this.tapstart(event);
    this.taphold(event);
    return true;
  }

  onEndEvent(event) {
    this.endPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
    this.tapheld = false;
    window.clearTimeout(this.holdTimer);
    this.tapend(event);
    this.swipeend(event);
    this.tap(event);
    this.doubletap(event);
    this.singletap(event);
    this.tapStarted = false;
    this.swipeStarted = false;
    this.hasSwiped = false;
    return true;
  }

  onMoveEvent(event) {
    this.endPosition = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.finalCoord = this.getPosition(event, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.TARGET);
    this.tapmove(event);
    this.swipe(event);
    return true;
  } // CUSTOM EVENT METHODS:

  /** tapstart Event */


  tapstart(event) {
    this.triggerCustomEvent("tapstart", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** tapmove Event */


  tapmove(event) {
    this.triggerCustomEvent("tapmove", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** tapend Event */


  tapend(event) {
    this.triggerCustomEvent("tapend", event, this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED));
    return true;
  }
  /** taphold Event */


  taphold(event) {
    this.holdTimer = window.setTimeout(() => {
      const diffPosition = {
        x: this.startPosition.x - this.endPosition.x,
        y: this.startPosition.y - this.endPosition.y
      }; // helded?

      if (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange) {
        this.tapheld = true;
        const endTime = Date.now();
        const duration = endTime - this.startTime;
        const touchesLength = event.targetTouches ? event.targetTouches.length : 1;
        const touches = new Array();

        for (let i = 0; i < touchesLength; i++) {
          const elOffset = this.el.getBoundingClientRect();
          const touch = {
            position: {
              x: this.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
              y: this.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
            },
            offset: {
              x: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
              y: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
            }
          };
          touches.push(touch);
        }

        const eventName = touchesLength > 1 ? "taphold" + touchesLength : "taphold";
        const touchData = {
          touches,
          time: Date.now(),
          duration
        };
        this.triggerCustomEvent(eventName, event, touchData);
      }
    }, this.settings.tapholdThreshold);
    return true;
  }
  /** doubletap Event */


  doubletap(event) {
    const now = Date.now();
    const lastTouch = Number(this.lastTouch) || now + 1;
    const delta = now - lastTouch;

    if (this.actionTimer !== -1) {
      window.clearTimeout(this.actionTimer);
    }

    if (delta < this.settings.doubletapInterval && delta > 100 && this.firstTap && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.getElementIndex)(event.target) === this.firstTap.index) {
      this.doubletapped = true;
      window.clearTimeout(this.tapTimer);
      const lastTap = this.getTouchData(event, true, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);
      const touchData = {
        firstTap: this.firstTap,
        secondTap: lastTap,
        interval: lastTap.time - this.firstTap.time
      };

      if (!this.cooling) {
        this.triggerCustomEvent("doubletap", event, touchData);
        this.firstTap = null;
      }

      this.cooling = true;
      window.setTimeout(() => {
        this.cooling = false;
      }, this.settings.doubletapInterval);
    } else {
      this.actionTimer = window.setTimeout(() => {
        this.firstTap = null;
        window.clearTimeout(this.actionTimer);
      }, this.settings.doubletapInterval, [event]);
    }

    this.lastTouch = now;
  }
  /**
   * singletap Event
   * This is used in conjuction with doubletap when both events are needed on the same element
   */


  singletap(event) {
    this.tapTimer = window.setTimeout(() => {
      const diffPosition = {
        x: this.startPosition.x - this.endPosition.x,
        y: this.startPosition.y - this.endPosition.y
      };

      if (!this.doubletapped && !this.tapheld && (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange)) {
        const touchData = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED); // Was it a taphold?

        if (touchData.time - this.startTime < this.settings.tapholdThreshold) {
          this.triggerCustomEvent("singletap", event, touchData);
        }
      }
    }, this.settings.doubletapInterval);
  }
  /** tap Event */


  tap(event) {
    const diffPosition = {
      x: this.startPosition.x - this.endPosition.x,
      y: this.startPosition.y - this.endPosition.y
    };

    if (this.tapStarted && Date.now() - this.startTime < this.settings.tapholdThreshold && (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange)) {
      const touchesLength = event.targetTouches ? event.targetTouches.length : 1;
      const touches = new Array();

      for (let i = 0; i < touchesLength; i++) {
        const elOffset = this.el.getBoundingClientRect();
        const touch = {
          position: {
            x: this.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
            y: this.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
          },
          offset: {
            x: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
            y: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
          }
        };
        touches.push(touch);
      }

      const touchData = {
        touches,
        time: Date.now()
      };
      const eventName = touchesLength > 1 ? "tap" + touchesLength : "tap";
      this.triggerCustomEvent(eventName, event, touchData);
    }
  }
  /**
   * swipe Event
   * (also handles swipeup, swiperight, swipedown and swipeleft)
   *
   * (similar to `touchMove` method in jquery touch events)
   */


  swipe(event) {
    const swipeDir = this.getSwipeDir(this.originalCoord, this.finalCoord);

    if (swipeDir && this.swipeStarted && this.startEvnt) {
      this.originalCoord.x = 0;
      this.originalCoord.y = 0;
      this.finalCoord.x = 0;
      this.finalCoord.y = 0;
      this.swipeStarted = false;
      const endEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.DEFAULT, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED); // Calculate the swipe amount (normalized):

      const xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
      const yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
      const touchData = {
        startEvnt: this.startEvnt,
        endEvnt,
        direction: swipeDir.replace("swipe", ""),
        xAmount,
        yAmount,
        duration: endEvnt.time - this.startEvnt.time
      };
      this.hasSwiped = true;
      this.triggerCustomEvent("swipe", event, touchData);
      this.triggerCustomEvent(swipeDir, event, touchData);
    }
  }
  /**
   * swipeend Event
   * (similar `touchEnd` method in jquery touch events)
   */


  swipeend(event) {
    const endEvnt = this.getTouchData(event, false, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED, _types_index_js__WEBPACK_IMPORTED_MODULE_2__.TouchType.CHANGED);

    if (this.hasSwiped && this.startEvnt) {
      const swipeDir = this.getSwipeDir(this.startEvnt.position, endEvnt.position); // Calculate the swipe amount (normalized):

      const xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
      const yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
      const touchData = {
        startEvnt: this.startEvnt,
        endEvnt,
        direction: swipeDir.replace("swipe", ""),
        xAmount,
        yAmount,
        duration: endEvnt.time - this.startEvnt.time
      };
      this.triggerCustomEvent("swipeend", event, touchData);
    }
  }

}

/***/ }),

/***/ "../../packages/extras/src/types/index.ts":
/*!************************************************!*\
  !*** ../../packages/extras/src/types/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MediaReadyState": function() { return /* reexport safe */ _media_ready_state_js__WEBPACK_IMPORTED_MODULE_0__.MediaReadyState; },
/* harmony export */   "TouchType": function() { return /* reexport safe */ _touch_type_js__WEBPACK_IMPORTED_MODULE_10__.TouchType; }
/* harmony export */ });
/* harmony import */ var _media_ready_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./media-ready-state.js */ "../../packages/extras/src/types/media-ready-state.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-options.js */ "../../packages/extras/src/types/module-options.ts");
/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position.js */ "../../packages/extras/src/types/position.ts");
/* harmony import */ var _scroll_events_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroll-events-options.js */ "../../packages/extras/src/types/scroll-events-options.ts");
/* harmony import */ var _scroll_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll-position.js */ "../../packages/extras/src/types/scroll-position.ts");
/* harmony import */ var _touch_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touch-data.js */ "../../packages/extras/src/types/touch-data.ts");
/* harmony import */ var _touch_direction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./touch-direction.js */ "../../packages/extras/src/types/touch-direction.ts");
/* harmony import */ var _touch_offset_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./touch-offset.js */ "../../packages/extras/src/types/touch-offset.ts");
/* harmony import */ var _touch_settings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./touch-settings.js */ "../../packages/extras/src/types/touch-settings.ts");
/* harmony import */ var _touch_swipe_data_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./touch-swipe-data.js */ "../../packages/extras/src/types/touch-swipe-data.ts");
/* harmony import */ var _touch_type_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./touch-type.js */ "../../packages/extras/src/types/touch-type.ts");
/* harmony import */ var _video_component_scope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./video-component-scope.js */ "../../packages/extras/src/types/video-component-scope.ts");













/***/ }),

/***/ "../../packages/extras/src/types/media-ready-state.ts":
/*!************************************************************!*\
  !*** ../../packages/extras/src/types/media-ready-state.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MediaReadyState": function() { return /* binding */ MediaReadyState; }
/* harmony export */ });
/**
 * Represents the ready state of the audio/video element
 * @see https://www.w3schools.com/TAgs/av_prop_readystate.asp
 */
let MediaReadyState;

(function (MediaReadyState) {
  MediaReadyState[MediaReadyState["HAVE_NOTHING"] = 0] = "HAVE_NOTHING";
  MediaReadyState[MediaReadyState["HAVE_METADATA"] = 1] = "HAVE_METADATA";
  MediaReadyState[MediaReadyState["HAVE_CURRENT_DATA"] = 2] = "HAVE_CURRENT_DATA";
  MediaReadyState[MediaReadyState["HAVE_FUTURE_DATA"] = 3] = "HAVE_FUTURE_DATA";
  MediaReadyState[MediaReadyState["HAVE_ENOUGH_DATA"] = 4] = "HAVE_ENOUGH_DATA";
})(MediaReadyState || (MediaReadyState = {}));

/***/ }),

/***/ "../../packages/extras/src/types/module-options.ts":
/*!*********************************************************!*\
  !*** ../../packages/extras/src/types/module-options.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/position.ts":
/*!***************************************************!*\
  !*** ../../packages/extras/src/types/position.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/scroll-events-options.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/types/scroll-events-options.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/scroll-position.ts":
/*!**********************************************************!*\
  !*** ../../packages/extras/src/types/scroll-position.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-data.ts":
/*!*****************************************************!*\
  !*** ../../packages/extras/src/types/touch-data.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-direction.ts":
/*!**********************************************************!*\
  !*** ../../packages/extras/src/types/touch-direction.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-offset.ts":
/*!*******************************************************!*\
  !*** ../../packages/extras/src/types/touch-offset.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-settings.ts":
/*!*********************************************************!*\
  !*** ../../packages/extras/src/types/touch-settings.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-swipe-data.ts":
/*!***********************************************************!*\
  !*** ../../packages/extras/src/types/touch-swipe-data.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/extras/src/types/touch-type.ts":
/*!*****************************************************!*\
  !*** ../../packages/extras/src/types/touch-type.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchType": function() { return /* binding */ TouchType; }
/* harmony export */ });
let TouchType;

(function (TouchType) {
  TouchType[TouchType["DEFAULT"] = 0] = "DEFAULT";
  TouchType[TouchType["TARGET"] = 1] = "TARGET";
  TouchType[TouchType["CHANGED"] = 2] = "CHANGED";
})(TouchType || (TouchType = {}));

/***/ }),

/***/ "../../packages/extras/src/types/video-component-scope.ts":
/*!****************************************************************!*\
  !*** ../../packages/extras/src/types/video-component-scope.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/history/src/index.ts":
/*!*******************************************!*\
  !*** ../../packages/history/src/index.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/history/src/services/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/index.js */ "../../packages/history/src/types/index.ts");



/***/ }),

/***/ "../../packages/history/src/services/history-manager.service.ts":
/*!**********************************************************************!*\
  !*** ../../packages/history/src/services/history-manager.service.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* binding */ HistoryManager; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");


/**
 * HistoryManager helps to keep track of the navigation
 */
class HistoryManager {
  /**
   * Keep track of the status in historic order
   */
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "history", []);

    if (HistoryManager.instance) {
      return HistoryManager.instance;
    }

    HistoryManager.instance = this;
    return HistoryManager.instance;
  }
  /**
   * Return information about the current status
   */


  currentStatus() {
    return this.history[this.history.length - 1];
  }
  /**
   * Return information about the previous status
   */


  prevStatus() {
    const history = this.history;

    if (history.length < 2) {
      return null;
    }

    return history[history.length - 2];
  }
  /**
   * Add a new set of url and namespace
   */


  add(url) {
    let namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.history.push({
      namespace,
      url
    });
  }

}

/***/ }),

/***/ "../../packages/history/src/services/index.ts":
/*!****************************************************!*\
  !*** ../../packages/history/src/services/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _history_manager_service_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; }
/* harmony export */ });
/* harmony import */ var _history_manager_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./history-manager.service.js */ "../../packages/history/src/services/history-manager.service.ts");


/***/ }),

/***/ "../../packages/history/src/types/index.ts":
/*!*************************************************!*\
  !*** ../../packages/history/src/types/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ "../../packages/history/src/types/state.ts");


/***/ }),

/***/ "../../packages/history/src/types/state.ts":
/*!*************************************************!*\
  !*** ../../packages/history/src/types/state.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/i18n/src/binders/i18n-star.binder.ts":
/*!***********************************************************!*\
  !*** ../../packages/i18n/src/binders/i18n-star.binder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStarBinder": function() { return /* binding */ I18nStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");





/**
 *
 */
class I18nStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "contenteditable", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "vars", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "langVars", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "properties", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "attributeName", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "translateMePathString", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onAttributeChanged", this._onAttributeChanged.bind(this));
  }

  applyTranslation(locale) {
    if (!locale) {
      if (this.i18n.showMissingTranslation) {
        locale = "translation missing: \"".concat(this.properties.join("."), "\"");
      } else {
        return;
      }
    }

    if (typeof locale !== "string") {
      console.warn("TODO", locale);
      return;
    }

    if (this.attributeName === "html") {
      this.el.innerHTML = locale;
    } else if (this.attributeName === "text") {
      this.el.innerText = locale;
    } else if (this.attributeName === "value") {
      // TODO support also: https://github.com/JumpLinkNetwork/tinybind/blob/master/src/binders/basic/value.binder.ts#L51
      if (this.contenteditable) {
        this.el.innerHTML = locale;
      } else {
        this.el.value = locale;
      }
    } else {
      this.el.setAttribute(this.attributeName, locale);
    }
  }

  parseVars(_el) {
    // parse templates to : LocalVar
    if (!this.i18n) {
      throw new Error("LocalesService is not defined!");
    }

    const newVars = this.i18n.parseTemplateVars(_el);
    this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: true
    }, this.vars, newVars); // parse data attributes to vars

    this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: false
    }, this.vars, _el.dataset); // Parse templates which have his own translations

    this.langVars = this.i18n.parseLocalVars(_el);
  }

  translate(langcode) {
    // If language service is not ready do nothing
    if (!this.i18n.ready) {
      return;
    }

    if (!langcode) {
      langcode = this.i18n.getLangcode();

      if (!langcode) {
        console.error("Langcode is required", langcode);
        return;
      }
    } // translate by using the already translated language variable


    if (this.langVars && this.langVars[langcode]) {
      return this.applyTranslation(this.langVars[langcode]);
    }

    if (!this.properties || this.properties.length === 0) {
      // get the default translation if available
      if (this.langVars && this.langVars.default) {
        // console.warn('Translate by default', this.langVars.default);
        return this.applyTranslation(this.langVars.default);
      }
    } // translate by properties, e.g. de.cart.add


    return this.i18n.get([langcode, ...this.properties], this.vars).then(local => {
      if (local && typeof local === "string") {
        // console.warn('Translate by properties', [langcode, ...this.properties], local);
        return this.applyTranslation(local);
      } // get the default translation if available


      if (this.langVars && this.langVars.default) {
        // console.warn('Translate by default as fallback', this.langVars.default);
        return this.applyTranslation(this.langVars.default);
      }

      return this.applyTranslation(null);
    }).catch(error => {
      console.error(error);
    });
  }

  _onAttributeChanged(data) {
    if (data.detail.name.startsWith("data-")) {
      const varName = data.detail.name.slice(5);
      const newVar = {};
      newVar[varName] = data.detail.newValue;
      this.vars = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
        deep: true
      }, this.vars, newVar);
      this.translate();
    }
  }

  onLanguageChanged(langcode, initial) {
    // Do not translate on initial language change, we use the ready event for this
    if (!initial) {
      this.translate(langcode);
    }
  }
  /**
   * Initial stuff wee need to do after the language service is ready
   */


  initOnReady(langcode, translationNeeded) {
    // Translate on translation service ready if needed
    if (translationNeeded) {
      this.translate(langcode);
    } // Translate if language changes


    this.i18n.event.on("changed", this.onLanguageChanged); // Translate if binder attribute event is changed

    this.el.addEventListener("binder-changed", this.onAttributeChanged);
  }

  bind(el) {
    this.contenteditable = !!el.getAttribute("contenteditable");
    const options = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.options;
    this.i18n = options.localesService;
    this.attributeName = this.args[0].toString();
  }

  routine(el, translateMePathString) {
    const options = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.options;

    if (this.translateMePathString === null) {
      var _this$i18n;

      // if this is the first call of this function
      this.translateMePathString = translateMePathString;

      if (this.translateMePathString) {
        this.properties = this.translateMePathString.split(".");
      }

      this.parseVars(el); // Translate if language is ready

      if ((_this$i18n = this.i18n) !== null && _this$i18n !== void 0 && _this$i18n.ready) {
        const currentLangcode = this.i18n.getLangcode();
        const initialLangcode = this.i18n.getInitialLangcode();

        if (!currentLangcode) {
          throw new Error("No language code found!");
        }

        this.initOnReady(currentLangcode, currentLangcode !== initialLangcode || !options.localesService.doNotTranslateDefaultLanguage);
      } else {
        this.i18n.event.on("ready", this.initOnReady);
      }
    } else if (this.translateMePathString !== translateMePathString) {
      // If translate string was changed
      this.translateMePathString = translateMePathString;

      if (this.translateMePathString) {
        this.properties = this.translateMePathString.split(".");
      }

      this.parseVars(el);
      this.translate();
    }
  }

  unbind() {
    var _this$i18n2;

    this.el.removeEventListener("binder-changed", this.onAttributeChanged);
    (_this$i18n2 = this.i18n) === null || _this$i18n2 === void 0 ? void 0 : _this$i18n2.event.off("changed", this.onLanguageChanged);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nStarBinder, "key", "i18n-*");

/***/ }),

/***/ "../../packages/i18n/src/binders/index.ts":
/*!************************************************!*\
  !*** ../../packages/i18n/src/binders/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStarBinder": function() { return /* reexport safe */ _i18n_star_binder_js__WEBPACK_IMPORTED_MODULE_0__.I18nStarBinder; }
/* harmony export */ });
/* harmony import */ var _i18n_star_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./i18n-star.binder.js */ "../../packages/i18n/src/binders/i18n-star.binder.ts");


/***/ }),

/***/ "../../packages/i18n/src/components/index.ts":
/*!***************************************************!*\
  !*** ../../packages/i18n/src/components/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nShareComponent": function() { return /* reexport safe */ _share_share_component_js__WEBPACK_IMPORTED_MODULE_1__.I18nShareComponent; },
/* harmony export */   "I18nSwitcherComponent": function() { return /* reexport safe */ _switcher_switcher_component_js__WEBPACK_IMPORTED_MODULE_0__.I18nSwitcherComponent; }
/* harmony export */ });
/* harmony import */ var _switcher_switcher_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./switcher/switcher.component.js */ "../../packages/i18n/src/components/switcher/switcher.component.ts");
/* harmony import */ var _share_share_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./share/share.component.js */ "../../packages/i18n/src/components/share/share.component.ts");



/***/ }),

/***/ "../../packages/i18n/src/components/share/share.component.ts":
/*!*******************************************************************!*\
  !*** ../../packages/i18n/src/components/share/share.component.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nShareComponent": function() { return /* binding */ I18nShareComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-share/bs4-share.component.js */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.ts");
/* harmony import */ var _ribajs_bs4_src_components_bs4_share_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/bs4/src/components/bs4-share/bs4-share.component.html */ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html");
/* harmony import */ var _share_label_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./share.label.html */ "../../packages/i18n/src/components/share/share.label.html");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/i18n/src/services/index.ts");







/**
 * Component to share the a link (i18n version)
 */
class I18nShareComponent extends _ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent {
  static get observedAttributes() {
    return [..._ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent.observedAttributes, "text-i18n", "label-i18n", "service-label-i18n"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", super.scope);

    this.scope = this.getScopeDefaults();
    this.scope.labelTemplate = _share_label_html__WEBPACK_IMPORTED_MODULE_4__["default"];
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(_ribajs_bs4_src_components_bs4_share_bs4_share_component_js__WEBPACK_IMPORTED_MODULE_2__.Bs4ShareComponent.observedAttributes);
    this.addEventListeners();
  }

  async initI18n() {
    return new Promise(resolve => {
      var _this$localesService, _this$localesService2;

      (_this$localesService = this.localesService) === null || _this$localesService === void 0 ? void 0 : _this$localesService.event.on("changed", async langcode => {
        return resolve(langcode);
      });

      if ((_this$localesService2 = this.localesService) !== null && _this$localesService2 !== void 0 && _this$localesService2.ready) {
        var _this$localesService3;

        const langcode = (_this$localesService3 = this.localesService) === null || _this$localesService3 === void 0 ? void 0 : _this$localesService3.getLangcode();
        return resolve(langcode);
      } else {
        var _this$localesService4;

        (_this$localesService4 = this.localesService) === null || _this$localesService4 === void 0 ? void 0 : _this$localesService4.event.on("ready", async langcode => {
          return resolve(langcode);
        });
      }
    });
  }

  async i18n(langcode, value) {
    var _this$localesService5;

    if (!value) {
      return;
    }

    return (_this$localesService5 = this.localesService) === null || _this$localesService5 === void 0 ? void 0 : _this$localesService5.get([langcode, ...value.split(".")]).then(locale => {
      // this.debug('changed local', local);
      return locale;
    }).catch(error => {
      console.error(error);
    });
  }

  async beforeBind() {
    await super.beforeBind();
    this.localesService = _services_index_js__WEBPACK_IMPORTED_MODULE_5__.I18nService.options.localesService;
    const langcode = await this.initI18n();

    if (this.scope.textI18n && langcode) {
      this.scope.text = (await this.i18n(langcode, this.scope.textI18n)) || this.scope.text;
    }

    if (this.scope.serviceLabelI18n && langcode) {
      for (const shareItem of this.scope.shareItems) {
        shareItem.label = (await this.i18n(langcode, this.scope.serviceLabelI18n + "." + shareItem.id)) || shareItem.label;
      }
    }
  }

  async afterBind() {
    await super.afterBind();
  }

  template() {
    this.debug("template", this, (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.hasChildNodesTrim)(this));

    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_1__.hasChildNodesTrim)(this)) {
      // If a child is set, this is a custom label template
      this.scope.labelTemplate = this.innerHTML;
      this.debug("Custom label template: ", this.scope.labelTemplate);
    }

    return _ribajs_bs4_src_components_bs4_share_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nShareComponent, "tagName", "i18n-share");

/***/ }),

/***/ "../../packages/i18n/src/components/switcher/switcher.component.ts":
/*!*************************************************************************!*\
  !*** ../../packages/i18n/src/components/switcher/switcher.component.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nSwitcherComponent": function() { return /* binding */ I18nSwitcherComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/i18n/src/services/index.ts");



class I18nSwitcherComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      langcodes: [],
      switch: this.switch,
      toggle: this.toggle,
      ready: false
    });
  }

  static get observedAttributes() {
    return [];
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(I18nSwitcherComponent.observedAttributes);
  }

  setLangcode(langcode) {
    var _this$localesService;

    (_this$localesService = this.localesService) === null || _this$localesService === void 0 ? void 0 : _this$localesService.setLangcode(langcode);
  }

  requiredAttributes() {
    return [];
  }

  disconnectedCallback() {
    super.disconnectedCallback();
  }

  async beforeBind() {
    await super.beforeBind();
    this.localesService = _services_index_js__WEBPACK_IMPORTED_MODULE_2__.I18nService.options.localesService;

    if (!this.localesService) {
      throw new Error("LocalesService not defined!");
    }

    if (this.localesService.ready) {
      const langcode = this.localesService.getLangcode();

      if (langcode) {
        return await this.initLocales(langcode);
      }
    } else {
      var _this$localesService2;

      (_this$localesService2 = this.localesService) === null || _this$localesService2 === void 0 ? void 0 : _this$localesService2.event.on("ready", async langcode => {
        await this.initLocales(langcode);
      });
    }
  }

  template() {
    return null;
  }
  /**
   * Switch to language by langcode
   * @param langcode
   * @param event
   */


  switch(langcode, event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    if (!langcode.active) {
      this.setLangcode(langcode.code);
    }
  }
  /**
   * Toggle language, makes only sense if you have only two languages
   * @param langcode
   * @param event
   */


  toggle(event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    for (const i in this.scope.langcodes) {
      if (Object.prototype.hasOwnProperty.call(this.scope.langcodes, i)) {
        if (this.scope.langcodes[i].active !== true) {
          this.setLangcode(this.scope.langcodes[i].code);
          return;
        }
      }
    }
  }

  async initLocales(langcode) {
    var _this$localesService3, _this$localesService4;

    // set available langcodes
    const langcodes = await ((_this$localesService3 = this.localesService) === null || _this$localesService3 === void 0 ? void 0 : _this$localesService3.getAvailableLangcodes());

    if (!langcodes) {
      throw new Error("No lancodes found!");
    }

    this.scope.langcodes = langcodes; // set active langcodes

    this.scope.langcodes.forEach(langCode => {
      langCode.active = langCode.code === langcode;
    });
    (_this$localesService4 = this.localesService) === null || _this$localesService4 === void 0 ? void 0 : _this$localesService4.event.on("changed", changedLangcode => {
      // Activate localcode and disable the other
      this.scope.langcodes.forEach(langCode => {
        langCode.active = langCode.code === changedLangcode;
      });
    });
    this.scope.ready = true;
    return this.scope.langcodes;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(I18nSwitcherComponent, "tagName", "i18n-switcher");

/***/ }),

/***/ "../../packages/i18n/src/formatters/index.ts":
/*!***************************************************!*\
  !*** ../../packages/i18n/src/formatters/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tFormatter": function() { return /* reexport safe */ _t_formatter_js__WEBPACK_IMPORTED_MODULE_0__.tFormatter; }
/* harmony export */ });
/* harmony import */ var _t_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./t.formatter.js */ "../../packages/i18n/src/formatters/t.formatter.ts");


/***/ }),

/***/ "../../packages/i18n/src/formatters/t.formatter.ts":
/*!*********************************************************!*\
  !*** ../../packages/i18n/src/formatters/t.formatter.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tFormatter": function() { return /* binding */ tFormatter; }
/* harmony export */ });
/* harmony import */ var _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");


const translate = async (translateMePathString, localesService, langcode) => {
  const properties = translateMePathString.split(".");

  if (!langcode) {
    langcode = localesService.getLangcode();

    if (!langcode) {
      return null;
    }
  }

  return localesService.get([langcode, ...properties]
  /*, vars */
  ).then(locale => {
    return locale;
  }).catch(error => {
    console.error(error);
  });
};

const tFormatter = {
  name: "t",

  read(translateMePathString, langcode) {
    const localesService = _services_i18n_service_js__WEBPACK_IMPORTED_MODULE_0__.I18nService.options.localesService;
    return new Promise((resolve, reject) => {
      localesService.event.on("changed", () => {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        }).catch(error => {
          reject(error);
        });
      });
      localesService.event.on("ready", () => {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        }).catch(error => {
          reject(error);
        });
      });

      if (localesService.ready) {
        translate(translateMePathString, localesService, langcode).then(locale => {
          resolve(locale);
        });
      }
    });
  }

};

/***/ }),

/***/ "../../packages/i18n/src/i18n.module.ts":
/*!**********************************************!*\
  !*** ../../packages/i18n/src/i18n.module.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i18nModule": function() { return /* binding */ i18nModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/i18n/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/i18n/src/formatters/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/index.js */ "../../packages/i18n/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/index.js */ "../../packages/i18n/src/services/index.ts");




const i18nModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_3__,

  init(options) {
    if (!options) {
      throw new Error("[i18nModule] Module options required!");
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.I18nService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/i18n/src/index.ts":
/*!****************************************!*\
  !*** ../../packages/i18n/src/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.I18nService; },
/* harmony export */   "I18nShareComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_1__.I18nShareComponent; },
/* harmony export */   "I18nStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_0__.I18nStarBinder; },
/* harmony export */   "I18nSwitcherComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_1__.I18nSwitcherComponent; },
/* harmony export */   "LocalesRestService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.LocalesRestService; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_3__.LocalesService; },
/* harmony export */   "LocalesStaticService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_4__.LocalesStaticService; },
/* harmony export */   "i18nModule": function() { return /* reexport safe */ _i18n_module_js__WEBPACK_IMPORTED_MODULE_5__.i18nModule; },
/* harmony export */   "tFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.tFormatter; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/i18n/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/i18n/src/components/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/i18n/src/formatters/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/index.js */ "../../packages/i18n/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/index.js */ "../../packages/i18n/src/services/index.ts");
/* harmony import */ var _i18n_module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./i18n.module.js */ "../../packages/i18n/src/i18n.module.ts");







/***/ }),

/***/ "../../packages/i18n/src/services/i18n.service.ts":
/*!********************************************************!*\
  !*** ../../packages/i18n/src/services/i18n.service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* binding */ I18nService; }
/* harmony export */ });
class I18nService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of I18nService not defined, please call setSingleton first!");
  }

  static setSingleton(options) {
    if (this.instance) {
      throw new Error("Singleton of I18nService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/i18n/src/services/index.ts":
/*!*************************************************!*\
  !*** ../../packages/i18n/src/services/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nService": function() { return /* reexport safe */ _i18n_service_js__WEBPACK_IMPORTED_MODULE_0__.I18nService; },
/* harmony export */   "LocalesRestService": function() { return /* reexport safe */ _locales_rest_service_js__WEBPACK_IMPORTED_MODULE_1__.LocalesRestService; },
/* harmony export */   "LocalesStaticService": function() { return /* reexport safe */ _locales_static_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesStaticService; }
/* harmony export */ });
/* harmony import */ var _i18n_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./i18n.service.js */ "../../packages/i18n/src/services/i18n.service.ts");
/* harmony import */ var _locales_rest_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locales-rest.service.js */ "../../packages/i18n/src/services/locales-rest.service.ts");
/* harmony import */ var _locales_static_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locales-static.service.js */ "../../packages/i18n/src/services/locales-static.service.ts");




/***/ }),

/***/ "../../packages/i18n/src/services/locales-rest.service.ts":
/*!****************************************************************!*\
  !*** ../../packages/i18n/src/services/locales-rest.service.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesRestService": function() { return /* binding */ LocalesRestService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _types_locales_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");



/**
 * LocalesRestService get locales object from url
 */

class LocalesRestService extends _types_locales_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesService {
  static getInstance(url) {
    return LocalesRestService.instances[url];
  }

  constructor(url) {
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    super(doNotTranslateDefaultLanguage, showMissingTranslation);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "locales", {});

    this.url = url;
    this.url = url;

    if (!this.url) {
      throw new Error("Url is required!");
    }

    if (LocalesRestService.instances[this.url]) {
      return LocalesRestService.instances[this.url];
    }

    this.init();
    LocalesRestService.instances[this.url] = this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  async getAll(url) {
    if (!url) {
      url = this.url;
    }

    if (!url) {
      throw new Error("Url is required!");
    }

    if (window.Shopify.shop) {
      url = url + "?shop=".concat(window.Shopify.shop);
    }

    if (this.locales[url]) {
      return this.locales[url];
    }

    const resp = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON(url);
    this.locales[url] = resp.body;
    return this.locales[url];
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LocalesRestService, "instances", {});

/***/ }),

/***/ "../../packages/i18n/src/services/locales-static.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/i18n/src/services/locales-static.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesStaticService": function() { return /* binding */ LocalesStaticService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _types_locales_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");


class LocalesStaticService extends _types_locales_service_js__WEBPACK_IMPORTED_MODULE_1__.LocalesService {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    return LocalesStaticService.instances[id];
  }
  /**
   * The current defined langcode
   */


  constructor(locales, id) {
    let doNotTranslateDefaultLanguage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let showMissingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    super(doNotTranslateDefaultLanguage, showMissingTranslation);
    this.locales = locales;
    this.id = id;

    if (!id) {
      id = "main";
    }

    this.locales = locales;

    if (LocalesStaticService.instances[id]) {
      return LocalesStaticService.instances[id];
    }

    this.init();
    LocalesStaticService.instances[id] = this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  async getAll() {
    return this.locales;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(LocalesStaticService, "instances", {});

/***/ }),

/***/ "../../packages/i18n/src/types/index.ts":
/*!**********************************************!*\
  !*** ../../packages/i18n/src/types/index.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _locales_service_js__WEBPACK_IMPORTED_MODULE_2__.LocalesService; }
/* harmony export */ });
/* harmony import */ var _langcode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langcode.js */ "../../packages/i18n/src/types/langcode.ts");
/* harmony import */ var _local_var_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-var.js */ "../../packages/i18n/src/types/local-var.ts");
/* harmony import */ var _locales_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locales-service.js */ "../../packages/i18n/src/types/locales-service.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module-options.js */ "../../packages/i18n/src/types/module-options.ts");





/***/ }),

/***/ "../../packages/i18n/src/types/langcode.ts":
/*!*************************************************!*\
  !*** ../../packages/i18n/src/types/langcode.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/i18n/src/types/local-var.ts":
/*!**************************************************!*\
  !*** ../../packages/i18n/src/types/local-var.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/i18n/src/types/locales-service.ts":
/*!********************************************************!*\
  !*** ../../packages/i18n/src/types/locales-service.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* binding */ LocalesService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



class LocalesService {
  get ready() {
    return this._ready;
  }

  constructor(doNotTranslateDefaultLanguage, showMissingTranslation) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "event", new _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher("i18n"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "showMissingTranslation", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_ready", false);

    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;
    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;
    this.showMissingTranslation = showMissingTranslation;
  }
  /**
   * Get translation by properties, e.g. `de.form.newsletter_label`
   * Properties object must include the language code, e.g. `de`.
   * @param properties properties, e.g. `['de', 'form', 'newsletter', 'label']`
   * @param force Set this to true if you want to force the request also if the service is not ready, you should use this only one the time
   */


  async get(properties, vars) {
    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!this.ready && !force) {
      throw new Error("not ready");
    }

    return this.getAll() // extract properties
    .then(locals => {
      if (properties && properties.length) {
        let local = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.clone)(true, locals);

        for (const property of properties) {
          if (!property) {
            return null;
          }

          if (local[property]) {
            local = local[property];
          } else {
            return null;
          }
        }

        return local;
      }

      return locals;
    }).then(local => {
      if (local === null && properties) {
        console.warn("WARNING translation missing: \"".concat(properties.join("."), "\""), local, properties);
      }

      return local;
    }) // Replace variables in local string if vars are set
    .then(local => {
      if (vars) {
        local = this.setTranslateStringPluralization(local, vars);
        local = this.setTranslateStringVars(local, vars);
      }

      return local;
    }).catch(error => {
      console.error(error);
      this._ready = false;
      return error;
    });
  }
  /**
   * Get translation by properties, e.g. `form.newsletter_label`
   * Properties object must not include the language code.
   * @param properties properties, e.g. `[form', 'newsletter', 'label']`
   */


  async getByCurrentLang() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let vars = arguments.length > 1 ? arguments[1] : undefined;
    const langcode = this.getLangcode();

    if (!langcode) {
      throw new Error("Langcode not found in html tag");
    }

    return this.get([langcode, ...properties], vars);
  }

  getBrowserLangcode() {
    const lang = navigator.language || navigator.userLanguage;
    const simplified = lang.split("-")[0].toLowerCase();
    return simplified;
  }

  getHTMLLangcode() {
    const langcode = document.documentElement ? document.documentElement.lang : "en";
    return langcode;
  }
  /**
   * Get the current langcode,
   * if lang was not chosen this is the langcode of the lang attribute of the html element.
   * If the language was changed this returns the changed language
   */


  getLangcode() {
    return this.currentLangcode;
  }

  getInitialLangcode() {
    return this.initialLangcode;
  }

  setLangcode(langcode) {
    let initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (this.currentLangcode !== langcode) {
      this.currentLangcode = langcode; // $('html').attr('lang', langcode);

      if (document.documentElement) {
        document.documentElement.lang = langcode;
      }

      this.event.trigger("changed", langcode, initial);
    }
  }

  async getAvailableLangcodes() {
    const activeCode = this.getLangcode();
    const locals = await this.get(undefined, undefined, true);
    const langcodes = [];

    for (const langcode of Object.keys(locals)) {
      langcodes.push({
        code: langcode,
        active: langcode === activeCode
      });
    }

    return langcodes;
  }
  /**
   * Parse templates which can be used to set variables on language strings
   */


  parseTemplateVars(el) {
    const templates = el.querySelectorAll("template");
    const vars = {};
    templates.forEach(template => {
      const name = template.getAttribute("name");

      if (name !== null) {
        vars[name] = template.innerHTML.trim();
      }
    });
    return vars;
  }
  /**
   * Parse templates which have his own translations
   */


  parseLocalVars(el) {
    const templates = el.querySelectorAll("template");
    const vars = {};
    templates.forEach(template => {
      const lang = template.getAttribute("lang");

      if (lang !== null) {
        vars[lang] = template.innerHTML.trim();
      }
    });
    return vars;
  }
  /**
   * Replace variables on translated string
   * @param translateString
   * @param vars
   */


  setTranslateStringVars(translateString, vars) {
    if (!translateString || Object.keys(vars).length === 0 || typeof translateString.match !== "function") {
      return translateString;
    }

    const matches = translateString.match(/{{\s*?[A-Za-z0-9_-]+\s*?}}/gm);

    if (matches) {
      for (const match of matches) {
        if (match) {
          const varName = match.replace(/{{\s*|\s*}}/gm, "");

          if (typeof vars[varName] === "string" || typeof vars[varName] === "number") {
            translateString = translateString.replace(match, vars[varName]);
          }
        }
      }
    }

    return translateString;
  }
  /**
   * Get file with all languages
   */


  async init() {
    this.initialLangcode = this.getHTMLLangcode();
    this.currentLangcode = this.initialLangcode;

    if (!this.initialLangcode) {
      throw new Error("The lang attribute on the html element is required to detect the default theme language: ".concat(this.initialLangcode));
    } // Detect browser language and switch to this language when available


    const browserLangcode = this.getBrowserLangcode();
    return this.getAvailableLangcodes().then(availableLangcodes => {
      let browserLangFound = false;

      for (const availableLangcodeObj of availableLangcodes) {
        if (availableLangcodeObj.code === browserLangcode) {
          browserLangFound = true;
        }
      } // only switch language if the browser language is not the default language (if doNotTranslateDefaultLanguage is true)


      if (!this.doNotTranslateDefaultLanguage || browserLangFound && browserLangcode !== this.currentLangcode) {
        this.setLangcode(browserLangcode, true);
      }

      return availableLangcodes;
    }).then(() => {
      this._ready = true; // If the current langcode is not the initial langcode then translation is needed

      const translationNeeded = this.currentLangcode !== this.initialLangcode || !this.doNotTranslateDefaultLanguage;
      this.event.trigger("ready", this.currentLangcode, translationNeeded);
    }).catch(error => {
      console.error(error);
      this._ready = false;
      return error;
    });
  }
  /**
   * see https://help.shopify.com/en/themes/development/theme-store-requirements/internationalizing/translation-filter#pluralization-in-translation-keys
   * @param translateString
   * @param vars
   */


  setTranslateStringPluralization(translateObj, vars) {
    if (vars.count && typeof translateObj === "object" && translateObj !== null) {
      const count = Number(vars.count);

      if (count === 0) {
        if (translateObj.zero) {
          return translateObj.zero;
        }
      } else if (count === 1) {
        if (translateObj.one) {
          return translateObj.one;
        }
      } else if (count === 2) {
        if (translateObj.two) {
          return translateObj.two;
        }
      }
    }

    if (typeof translateObj === "object" && translateObj !== null && translateObj.other) {
      return translateObj.other;
    }

    return translateObj;
  }

}

/***/ }),

/***/ "../../packages/i18n/src/types/module-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/i18n/src/types/module-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/index.ts":
/*!***************************************!*\
  !*** ../../packages/jsx/src/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsxFragment": function() { return /* reexport safe */ _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_3__.JsxFragment; },
/* harmony export */   "Raw": function() { return /* reexport safe */ _jsx_raw_js__WEBPACK_IMPORTED_MODULE_4__.Raw; },
/* harmony export */   "createElement": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.createElement; },
/* harmony export */   "htmlVoidElements": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.htmlVoidElements; },
/* harmony export */   "jsxModule": function() { return /* reexport safe */ _module_js__WEBPACK_IMPORTED_MODULE_1__.jsxModule; },
/* harmony export */   "renderElement": function() { return /* reexport safe */ _jsx_js__WEBPACK_IMPORTED_MODULE_2__.renderElement; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/jsx/src/types/index.ts");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module.js */ "../../packages/jsx/src/module.ts");
/* harmony import */ var _jsx_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx.js */ "../../packages/jsx/src/jsx.ts");
/* harmony import */ var _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsx-fragment.js */ "../../packages/jsx/src/jsx-fragment.ts");
/* harmony import */ var _jsx_raw_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsx-raw.js */ "../../packages/jsx/src/jsx-raw.ts");






/***/ }),

/***/ "../../packages/jsx/src/jsx-fragment.ts":
/*!**********************************************!*\
  !*** ../../packages/jsx/src/jsx-fragment.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsxFragment": function() { return /* binding */ JsxFragment; }
/* harmony export */ });
const JsxFragment = Symbol();

/***/ }),

/***/ "../../packages/jsx/src/jsx-raw.ts":
/*!*****************************************!*\
  !*** ../../packages/jsx/src/jsx-raw.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Raw": function() { return /* binding */ Raw; }
/* harmony export */ });
/**
 * Used to inject HTML directly into the document.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function Raw(_props) {
  // This is handled specially by the renderElement function. Instead of being
  // called, the tag is compared to this function and the `html` prop will be
  // returned directly.
  return null;
}

/***/ }),

/***/ "../../packages/jsx/src/jsx.ts":
/*!*************************************!*\
  !*** ../../packages/jsx/src/jsx.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createElement": function() { return /* binding */ createElement; },
/* harmony export */   "htmlVoidElements": function() { return /* binding */ htmlVoidElements; },
/* harmony export */   "renderElement": function() { return /* binding */ renderElement; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-fragment.js */ "../../packages/jsx/src/jsx-fragment.ts");
/* harmony import */ var _jsx_raw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-raw.js */ "../../packages/jsx/src/jsx-raw.ts");
/* eslint-disable no-var */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/**
 * Custom JSX module designed specifically for Ribajs's needs.
 * When overriding a default TypeDoc theme output, your implementation must create valid {@link Element}
 * instances, which can be most easily done by using TypeDoc's JSX implementation. To use it, set up
 * your tsconfig with the following compiler options:
 * ```json
 * {
 *     "jsx": "react",
 *     "jsxFactory": "JSX.createElement",
 *     "jsxFragmentFactory": "JSX.Fragment"
 * }
 * ```
 * @see https://github.com/TypeStrong/typedoc/blob/master/src/lib/utils/jsx.ts
 * @module
 */



const htmlVoidElements = new Set(["area", "base", "br", "col", "embed", "hr", "img", "input", "link", "meta", "param", "source", "track", "wbr"]);
/**
 * JSX factory function to create an "element" that can later be rendered with {@link renderElement}
 * @param tag
 * @param props
 * @param children
 */

function createElement(tag, props) {
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  return {
    tag,
    props,
    children
  };
}
function renderElement(element) {
  if (!element) {
    return "";
  }

  const {
    tag,
    props,
    children
  } = element;

  if (typeof tag === "function") {
    if (tag === _jsx_raw_js__WEBPACK_IMPORTED_MODULE_2__.Raw) {
      return String(props.html);
    }

    return renderElement(tag(Object.assign({
      children
    }, props)));
  }

  const html = [];

  if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) {
    html.push("<", tag);

    for (const [key, val] of Object.entries(props !== null && props !== void 0 ? props : {})) {
      if (val == null) continue;

      if (typeof val == "boolean" && !(0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.isCustomElement)(tag)) {
        if (val) {
          html.push(" ", key);
        }
      } else {
        html.push(" ", key, "=", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(val));
      }
    }
  }

  let hasChildren = false;

  if (children.length) {
    hasChildren = true;
    if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) html.push(">");
    renderChildren(children);
  }

  if (tag !== _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment) {
    if (!hasChildren) {
      if (htmlVoidElements.has(tag)) {
        html.push("/>");
      } else {
        html.push("></", tag, ">");
      }
    } else {
      html.push("</", tag, ">");
    }
  }

  return html.join("");

  function renderChildren(children) {
    for (const child of children) {
      if (!child) continue;

      if (Array.isArray(child)) {
        renderChildren(child);
      } else if (typeof child === "string" || typeof child === "number") {
        html.push((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_0__.escapeHtml)(child.toString()));
      } else {
        html.push(renderElement(child));
      }
    }
  }
}
// Set as global variable in Browser, Deno or Node
(__webpack_require__.g || window).jsxCreateElement = createElement;
(__webpack_require__.g || window).jsxFragment = _jsx_fragment_js__WEBPACK_IMPORTED_MODULE_1__.JsxFragment;

/***/ }),

/***/ "../../packages/jsx/src/module.ts":
/*!****************************************!*\
  !*** ../../packages/jsx/src/module.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jsxModule": function() { return /* binding */ jsxModule; }
/* harmony export */ });
const jsxModule = {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this;
  }

};

/***/ }),

/***/ "../../packages/jsx/src/types/index.ts":
/*!*********************************************!*\
  !*** ../../packages/jsx/src/types/index.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jsx_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsx/index.js */ "../../packages/jsx/src/types/jsx/index.ts");
/* harmony import */ var _jsx_module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-module-options.js */ "../../packages/jsx/src/types/jsx-module-options.ts");



/***/ }),

/***/ "../../packages/jsx/src/types/jsx-module-options.ts":
/*!**********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx-module-options.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/index.ts":
/*!*************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intrinsic_elements_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intrinsic-elements.js */ "../../packages/jsx/src/types/jsx/intrinsic-elements.ts");
/* harmony import */ var _jsx_a_element_props_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-a-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-a-element-props.ts");
/* harmony import */ var _jsx_area_element_props_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-area-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-area-element-props.ts");
/* harmony import */ var _jsx_audio_element_props_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsx-audio-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts");
/* harmony import */ var _jsx_base_element_props_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsx-base-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-base-element-props.ts");
/* harmony import */ var _jsx_blockquote_element_props_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./jsx-blockquote-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts");
/* harmony import */ var _jsx_br_element_props_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./jsx-br-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-br-element-props.ts");
/* harmony import */ var _jsx_button_element_props_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./jsx-button-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-button-element-props.ts");
/* harmony import */ var _jsx_canvas_element_props_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jsx-canvas-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts");
/* harmony import */ var _jsx_children_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./jsx-children.js */ "../../packages/jsx/src/types/jsx/jsx-children.ts");
/* harmony import */ var _jsx_col_element_props_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./jsx-col-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-col-element-props.ts");
/* harmony import */ var _jsx_colgroup_element_props_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./jsx-colgroup-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts");
/* harmony import */ var _jsx_component_boolean_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./jsx-component-boolean.js */ "../../packages/jsx/src/types/jsx/jsx-component-boolean.ts");
/* harmony import */ var _jsx_component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./jsx-component.js */ "../../packages/jsx/src/types/jsx/jsx-component.ts");
/* harmony import */ var _jsx_data_element_props_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./jsx-data-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-data-element-props.ts");
/* harmony import */ var _jsx_del_element_props_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./jsx-del-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-del-element-props.ts");
/* harmony import */ var _jsx_details_element_props_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./jsx-details-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-details-element-props.ts");
/* harmony import */ var _jsx_dialog_element_props_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./jsx-dialog-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts");
/* harmony import */ var _jsx_div_element_props_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./jsx-div-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-div-element-props.ts");
/* harmony import */ var _jsx_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./jsx-element.js */ "../../packages/jsx/src/types/jsx/jsx-element.ts");
/* harmony import */ var _jsx_embed_element_props_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./jsx-embed-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts");
/* harmony import */ var _jsx_fieldset_element_props_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./jsx-fieldset-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts");
/* harmony import */ var _jsx_form_element_props_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./jsx-form-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-form-element-props.ts");
/* harmony import */ var _jsx_html_custom_global_props_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./jsx-html-custom-global-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts");
/* harmony import */ var _jsx_html_element_props_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./jsx-html-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-element-props.ts");
/* harmony import */ var _jsx_html_global_props_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./jsx-html-global-props.js */ "../../packages/jsx/src/types/jsx/jsx-html-global-props.ts");
/* harmony import */ var _jsx_iframe_element_props_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./jsx-iframe-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts");
/* harmony import */ var _jsx_img_element_props_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./jsx-img-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-img-element-props.ts");
/* harmony import */ var _jsx_input_element_props_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./jsx-input-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-input-element-props.ts");
/* harmony import */ var _jsx_ins_element_props_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./jsx-ins-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts");
/* harmony import */ var _jsx_label_element_props_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./jsx-label-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-label-element-props.ts");
/* harmony import */ var _jsx_li_element_props_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./jsx-li-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-li-element-props.ts");
/* harmony import */ var _jsx_link_element_props_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./jsx-link-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-link-element-props.ts");
/* harmony import */ var _jsx_map_element_props_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./jsx-map-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-map-element-props.ts");
/* harmony import */ var _jsx_meta_element_props_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./jsx-meta-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts");
/* harmony import */ var _jsx_meter_element_props_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./jsx-meter-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts");
/* harmony import */ var _jsx_object_element_props_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./jsx-object-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-object-element-props.ts");
/* harmony import */ var _jsx_ol_element_props_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./jsx-ol-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts");
/* harmony import */ var _jsx_optgroup_element_props_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./jsx-optgroup-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts");
/* harmony import */ var _jsx_option_element_props_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./jsx-option-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-option-element-props.ts");
/* harmony import */ var _jsx_output_element_props_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./jsx-output-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-output-element-props.ts");
/* harmony import */ var _jsx_param_element_props_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./jsx-param-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-param-element-props.ts");
/* harmony import */ var _jsx_portal_element_props_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./jsx-portal-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts");
/* harmony import */ var _jsx_progress_element_props_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./jsx-progress-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts");
/* harmony import */ var _jsx_q_element_props_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./jsx-q-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-q-element-props.ts");
/* harmony import */ var _jsx_script_element_props_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./jsx-script-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-script-element-props.ts");
/* harmony import */ var _jsx_select_element_props_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./jsx-select-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-select-element-props.ts");
/* harmony import */ var _jsx_slot_element_props_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./jsx-slot-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts");
/* harmony import */ var _jsx_source_element_props_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./jsx-source-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-source-element-props.ts");
/* harmony import */ var _jsx_style_element_props_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./jsx-style-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-style-element-props.ts");
/* harmony import */ var _jsx_svg_props_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./jsx-svg-props.js */ "../../packages/jsx/src/types/jsx/jsx-svg-props.ts");
/* harmony import */ var _jsx_td_element_props_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./jsx-td-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-td-element-props.ts");
/* harmony import */ var _jsx_textarea_element_props_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./jsx-textarea-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts");
/* harmony import */ var _jsx_th_element_props_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./jsx-th-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-th-element-props.ts");
/* harmony import */ var _jsx_time_element_props_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./jsx-time-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-time-element-props.ts");
/* harmony import */ var _jsx_track_element_props_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./jsx-track-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-track-element-props.ts");
/* harmony import */ var _jsx_video_element_props_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./jsx-video-element-props.js */ "../../packages/jsx/src/types/jsx/jsx-video-element-props.ts");


























































/***/ }),

/***/ "../../packages/jsx/src/types/jsx/intrinsic-elements.ts":
/*!**************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/intrinsic-elements.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-a-element-props.ts":
/*!***************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-a-element-props.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-area-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-area-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-audio-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-base-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-base-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts":
/*!************************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-blockquote-element-props.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-br-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-br-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-button-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-button-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-canvas-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-children.ts":
/*!********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-children.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-col-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-col-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-colgroup-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-component-boolean.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-component-boolean.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-component.ts":
/*!*********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-component.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-data-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-data-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-del-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-del-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-details-element-props.ts":
/*!*********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-details-element-props.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-dialog-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-div-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-div-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-element.ts":
/*!*******************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-element.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-embed-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-fieldset-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-form-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-form-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts":
/*!************************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-custom-global-props.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-html-global-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-html-global-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-iframe-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-img-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-img-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-input-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-input-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-ins-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-label-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-label-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-li-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-li-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-link-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-link-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-map-element-props.ts":
/*!*****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-map-element-props.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-meta-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-meter-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-object-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-object-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-ol-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-optgroup-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-option-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-option-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-output-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-output-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-param-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-param-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-portal-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-progress-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-q-element-props.ts":
/*!***************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-q-element-props.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-script-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-script-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-select-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-select-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-slot-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-source-element-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-source-element-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-style-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-style-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-svg-props.ts":
/*!*********************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-svg-props.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-td-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-td-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts":
/*!**********************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-textarea-element-props.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-th-element-props.ts":
/*!****************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-th-element-props.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-time-element-props.ts":
/*!******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-time-element-props.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-track-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-track-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/jsx/src/types/jsx/jsx-video-element-props.ts":
/*!*******************************************************************!*\
  !*** ../../packages/jsx/src/types/jsx/jsx-video-element-props.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/binders/index.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/binders/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* reexport safe */ _parent_route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_4__.ParentRouteClassStarBinder; },
/* harmony export */   "RouteBackOnStarBinder": function() { return /* reexport safe */ _route_back_on_star_binder_js__WEBPACK_IMPORTED_MODULE_5__.RouteBackOnStarBinder; },
/* harmony export */   "RouteBinder": function() { return /* reexport safe */ _route_binder_js__WEBPACK_IMPORTED_MODULE_1__.RouteBinder; },
/* harmony export */   "RouteClassStarBinder": function() { return /* reexport safe */ _route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_2__.RouteClassStarBinder; },
/* harmony export */   "RoutePreloadBinder": function() { return /* reexport safe */ _route_preload_binder_js__WEBPACK_IMPORTED_MODULE_3__.RoutePreloadBinder; },
/* harmony export */   "ViewStaticBinder": function() { return /* reexport safe */ _view_static_binder_js__WEBPACK_IMPORTED_MODULE_0__.ViewStaticBinder; }
/* harmony export */ });
/* harmony import */ var _view_static_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view-static.binder.js */ "../../packages/router/src/binders/view-static.binder.ts");
/* harmony import */ var _route_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./route.binder.js */ "../../packages/router/src/binders/route.binder.ts");
/* harmony import */ var _route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./route-class-star.binder.js */ "../../packages/router/src/binders/route-class-star.binder.ts");
/* harmony import */ var _route_preload_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./route-preload.binder.js */ "../../packages/router/src/binders/route-preload.binder.ts");
/* harmony import */ var _parent_route_class_star_binder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parent-route-class-star.binder.js */ "../../packages/router/src/binders/parent-route-class-star.binder.ts");
/* harmony import */ var _route_back_on_star_binder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./route-back-on-star.binder.js */ "../../packages/router/src/binders/route-back-on-star.binder.ts");







/***/ }),

/***/ "../../packages/router/src/binders/parent-route-class-star.binder.ts":
/*!***************************************************************************!*\
  !*** ../../packages/router/src/binders/parent-route-class-star.binder.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* binding */ ParentRouteClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");




class ParentRouteClassStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onUrlChange", this._onUrlChange.bind(this));
  }

  _onUrlChange() {
    if (!this.url) {
      throw new Error("url is not defined!");
    }

    if (!this.className) {
      throw new Error("className is not defined!");
    }

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.onParentRoute)(this.url)) {
      this.el.classList.add(this.className); // check if element is radio input

      if (this.el.getAttribute("type") === "radio") {
        this.el.checked = true;
      }

      return true;
    } else {
      this.el.classList.remove(this.className); // uncheck if element is radio input

      if (this.el.getAttribute("type") === "radio") {
        this.el.checked = false;
      }
    }

    return false;
  }

  /**
   * Tests the url with the current location, if the current location starts with the url this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */
  routine(el, url) {
    this.url = url;
    this.className = this.args[0].toString() || "active";
    const isAnkerHTMLElement = el.tagName === "A";

    if (!this.url && isAnkerHTMLElement) {
      const href = el.getAttribute("href");

      if (href) {
        this.url = href;
      }
    }

    this.onUrlChange();
  }

  bind() {
    this.dispatcher.on("newPageReady", this.onUrlChange);
  }

  unbind() {
    this.dispatcher.off("newPageReady", this.onUrlChange);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ParentRouteClassStarBinder, "class", "parent-route-class-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-back-on-star.binder.ts":
/*!**********************************************************************!*\
  !*** ../../packages/router/src/binders/route-back-on-star.binder.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteBackOnStarBinder": function() { return /* binding */ RouteBackOnStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");



const goBack = () => {
  window.history.back();
};
/**
 * Calls `window.history.back()` on event.
 */


class RouteBackOnStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "priority", 3000);
  }

  unbind(el) {
    if (this.eventName) {
      el.removeEventListener(this.eventName, goBack);
    }
  }

  routine(el) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    if (this.eventName) {
      el.removeEventListener(this.eventName, goBack);
    }

    this.eventName = this.args[0];
    el.addEventListener(this.args[0], goBack);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteBackOnStarBinder, "key", "route-back-on-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-class-star.binder.ts":
/*!********************************************************************!*\
  !*** ../../packages/router/src/binders/route-class-star.binder.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteClassStarBinder": function() { return /* binding */ RouteClassStarBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");




class RouteClassStarBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "className", "");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onUrlChange", this._onUrlChange.bind(this));
  }

  _onUrlChange() {
    if (this.url) {
      if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.onRoute)(this.url)) {
        this.el.classList.add(this.className); // check if element is radio input

        if (this.el.getAttribute("type") === "radio") {
          this.el.checked = true;
        }

        return true;
      } else {
        this.el.classList.remove(this.className); // uncheck if element is radio input

        if (this.el.getAttribute("type") === "radio") {
          this.el.checked = false;
        }
      }
    }

    return false;
  }

  bind() {
    this.dispatcher.on("newPageReady", this.onUrlChange);
  }
  /**
   * Tests the url with the current location, if the url is equal to the current location this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */


  routine(el, url) {
    this.url = url;
    this.className = this.args[0].toString() || "active";
    const isAnchorElement = el.tagName === "A";

    if (!this.url && isAnchorElement) {
      const href = el.getAttribute("href");

      if (href) {
        this.url = href;
      }
    }

    this.onUrlChange();
  }

  unbind() {
    this.dispatcher.off("newPageReady", this.onUrlChange);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteClassStarBinder, "key", "route-class-*");

/***/ }),

/***/ "../../packages/router/src/binders/route-preload.binder.ts":
/*!*****************************************************************!*\
  !*** ../../packages/router/src/binders/route-preload.binder.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RoutePreloadBinder": function() { return /* binding */ RoutePreloadBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");



class RoutePreloadBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  routine(el, url) {
    if (window.ssr) {
      return;
    }

    const isAnchorElement = el.tagName === "A";

    if (!url && isAnchorElement) {
      const href = el.getAttribute("href");

      if (href) {
        url = href;
      }
    }

    if (url) {
      var _Pjax$getInstance;

      (_Pjax$getInstance = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance()) === null || _Pjax$getInstance === void 0 ? void 0 : _Pjax$getInstance.prefetchLink(url);
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RoutePreloadBinder, "key", "route-preload");

/***/ }),

/***/ "../../packages/router/src/binders/route.binder.ts":
/*!*********************************************************!*\
  !*** ../../packages/router/src/binders/route.binder.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteBinder": function() { return /* binding */ RouteBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/index.js */ "../../packages/router/src/services/index.ts");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");






/**
 * Open link with pajax if the route is not the active route
 */
class RouteBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_2__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "options", {
      url: "",
      viewId: "main",
      removeAfterActivation: false,
      newTab: false,
      newTabOnExtern: true
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onClick", this._onClick.bind(this));
  }

  _onClick(event) {
    // console.log(this.options.url);
    const pjax = _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.options.viewId);

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(this.options.url, true)) {
      console.info("already on this site, do nothing");
      event.stopPropagation();
      event.preventDefault();
    } else if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.isExternalUrl)(this.options.url)) {
      if (!pjax) {
        return;
      }

      event.stopPropagation();
      event.preventDefault(); // Is extern

      const newTab = this.options.newTab || this.options.newTabOnExtern;
      pjax.goTo(this.options.url, newTab);
    } else {
      if (this.options.url) {
        if (!pjax) {
          return;
        }

        pjax.onLinkClick(event, this.el, this.options.url, this.options.newTab);
      }
    }

    if (this.options.removeAfterActivation && this.el && this.el.parentNode) {
      // this.unbind(); TODO?
      this.el.parentNode.removeChild(this.el);
    }
  }

  bind(el) {
    el.classList.add("route");

    if (window.ssr) {
      return;
    }

    this.onClick = this.onClick.bind(this);
    el.addEventListener("click", this.onClick);
  }

  routine(el, optionsOrUrl) {
    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isString)(optionsOrUrl)) {
      this.options.url = optionsOrUrl;
    } else if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(optionsOrUrl)) {
      this.options = optionsOrUrl;
    }

    this.options.viewId = this.options.viewId || "main";
    this.prefetch = new _services_index_js__WEBPACK_IMPORTED_MODULE_1__.Prefetch(this.options.viewId);
    this.options.newTab = false;
    const isAnchorHTMLElement = el.tagName === "A";

    if (!this.options.url && isAnchorHTMLElement) {
      const url = el.getAttribute("href");

      if (url) {
        this.options.url = url;
      }
    }

    if (el.getAttribute("target") === "_blank") {
      this.options.newTab = true;
    } // normalize url


    this.options.url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.normalizeUrl)(this.options.url).url; // set href if not set

    if (isAnchorHTMLElement && (!el.href || !el.getAttribute("href")) && this.options.url) {
      el.setAttribute("href", this.options.url);
      el.href = this.options.url;
    }

    if (!this.options.newTab) {
      this.prefetch.initBinder(el, this.options.url);
    } // this.checkURL.call(this, this.options.url);

  }

  unbind(el) {
    var _this$prefetch;

    (_this$prefetch = this.prefetch) === null || _this$prefetch === void 0 ? void 0 : _this$prefetch.deInitBinder(el, this.options.url);
    el.removeEventListener("click", this.onClick);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouteBinder, "key", "route");

/***/ }),

/***/ "../../packages/router/src/binders/view-static.binder.ts":
/*!***************************************************************!*\
  !*** ../../packages/router/src/binders/view-static.binder.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewStaticBinder": function() { return /* binding */ ViewStaticBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/index.js */ "../../packages/router/src/services/index.ts");




const handleize = _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter.read;
/**
 * Loads a url with pjax and show them inside the element this binder is used on
 */

class ViewStaticBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "nested", null);
  }

  async routine(el, options) {
    const wrapper = el; // Set default options

    options = options || {};
    options.listenAllLinks = false;
    options.listenPopstate = false;
    options.parseTitle = false;
    options.transition = options.transition || new _services_index_js__WEBPACK_IMPORTED_MODULE_3__.HideShowTransition();
    options.viewId = options.viewId || el.getAttribute("id") || handleize(options.url);
    options.containerSelector = options.containerSelector || "[data-namespace]";
    options.changeBrowserUrl = false;
    const pjax = new _services_index_js__WEBPACK_IMPORTED_MODULE_3__.Pjax(options);
    const {
      responsePromise
    } = await pjax.loadResponseCached(options.url, false, false);
    const response = await responsePromise;
    wrapper.replaceWith(response.container);
    response.container.style.visibility = "visible"; // add the dataset to the model

    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(this.view.models)) {
      this.view.models = {};
    }

    if (this.nested) {
      this.nested.unbind();
    }

    this.nested = new _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.View(response.container, this.view.models, this.view.options);
    this.nested.bind();
  }

  unbind() {
    if (this.nested) {
      this.nested.unbind();
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ViewStaticBinder, "key", "view-static");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ViewStaticBinder, "block", true);

/***/ }),

/***/ "../../packages/router/src/components/index.ts":
/*!*****************************************************!*\
  !*** ../../packages/router/src/components/index.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterLoadScriptComponent": function() { return /* reexport safe */ _load_script_load_script_component_js__WEBPACK_IMPORTED_MODULE_0__.RouterLoadScriptComponent; },
/* harmony export */   "RouterViewComponent": function() { return /* reexport safe */ _view_view_component_js__WEBPACK_IMPORTED_MODULE_1__.RouterViewComponent; }
/* harmony export */ });
/* harmony import */ var _load_script_load_script_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load-script/load-script.component.js */ "../../packages/router/src/components/load-script/load-script.component.ts");
/* harmony import */ var _view_view_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/view.component.js */ "../../packages/router/src/components/view/view.component.ts");



/***/ }),

/***/ "../../packages/router/src/components/load-script/load-script.component.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/router/src/components/load-script/load-script.component.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterLoadScriptComponent": function() { return /* binding */ RouterLoadScriptComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");



class RouterLoadScriptComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["src", "id", "async", "defer"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      src: "",
      id: "",
      async: true,
      defer: true
    });
  }

  connectedCallback() {
    super.connectedCallback();
    super.init(RouterLoadScriptComponent.observedAttributes);
  }

  async onReady() {
    await super.onReady();

    if (!this.scope.id) {
      this.scope.id = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getUID)("script-");
    }

    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.loadScript)(this.scope.src, this.scope.id, this.scope.async);
  }

  requiredAttributes() {
    return ["src"];
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouterLoadScriptComponent, "tagName", "router-load-script");

/***/ }),

/***/ "../../packages/router/src/components/view/view.component.ts":
/*!*******************************************************************!*\
  !*** ../../packages/router/src/components/view/view.component.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterViewComponent": function() { return /* binding */ RouterViewComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/router/src/services/index.ts");





class RouterViewComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "action", "container-selector", "scroll-to-top", "listen-all-links", "listen-popstate", "scroll-to-anchor-hash", "scroll-to-anchor-offset", "dataset-to-root-scope", "parse-title", "change-browser-url", "prefetch-links"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "nested", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "wrapper", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "pjax", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "prefetch", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      id: "main",
      action: "replace",
      scrollToTop: true,
      listenAllLinks: true,
      listenPopstate: true,
      scrollToAnchorHash: true,
      scrollToAnchorOffset: _services_index_js__WEBPACK_IMPORTED_MODULE_4__.RouterService.options.scrollToAnchorOffset,
      datasetToRootScope: true,
      parseTitle: true,
      changeBrowserUrl: true,
      prefetchLinks: true,
      transition: _services_index_js__WEBPACK_IMPORTED_MODULE_4__.RouterService.options.defaultTransition
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(RouterViewComponent.observedAttributes);
  }

  addEventListeners() {
    this.events.on("newPageReady", this.onPageReady, this);
    this.events.on("initStateChange", this.onTransitionInit, this);
    this.events.on("transitionCompleted", this.onTransitionCompleted, this);
  }

  removeEventListeners() {
    this.events.off("newPageReady", this.onPageReady, this);
    this.events.off("initStateChange", this.onTransitionInit, this);
    this.events.off("transitionCompleted", this.onTransitionCompleted, this);
  }

  getContainerSelector() {
    if (this.scope.id === "main") {
      return "".concat(RouterViewComponent.tagName, " > *:first-child");
    } else {
      return "".concat(RouterViewComponent.tagName, "#").concat(this.scope.id, " > *:first-child");
    }
  }

  initAndStartPjax() {
    if (!this.scope.id) {
      console.error("Id attribute is required!");
      return;
    }

    const pjaxOptions = {
      id: this.scope.id,
      action: this.scope.action,
      wrapper: this,
      containerSelector: this.getContainerSelector(),
      listenAllLinks: !!this.scope.listenAllLinks,
      listenPopstate: !!this.scope.listenPopstate,
      transition: this.scope.transition,
      parseTitle: !!this.scope.parseTitle,
      changeBrowserUrl: !!this.scope.changeBrowserUrl,
      prefetchLinks: !!this.scope.prefetchLinks,
      scrollToTop: !!this.scope.scrollToTop
    };
    this.pjax = new _services_index_js__WEBPACK_IMPORTED_MODULE_4__.Pjax(pjaxOptions);
    this.pjax.setActiveWrapper(this);
    this.prefetch = new _services_index_js__WEBPACK_IMPORTED_MODULE_4__.Prefetch(this.scope.id);
    this.prefetch.init(pjaxOptions.prefetchLinks);
    this.pjax.start();
  }

  onPageReady(viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset, isInit) {
    // Only continue if the viewID is equal (in this way it is possible to have multiple views)
    if (viewId !== this.scope.id) {
      console.warn("not the right view", this.scope.id, viewId, dataset);
      return;
    }

    this.debug("New page ready!", this.innerHTML);

    if (this.scope.datasetToRootScope) {
      if (!this.scope.$root) {
        this.scope.$root = {};
      }

      this.scope.$root.dataset = dataset;
    } // Ignore rest on first page requests


    if (isInit) {
      return;
    }

    this.view = this.getView();

    if (!this.view) {
      console.warn("View ist not ready!");
      return;
    }

    this.view.bind();
  }

  async onTransitionInit(viewId) {
    if (viewId !== this.scope.id) {
      return;
    }

    this.setTransitionClass("init");
  }

  async onTransitionCompleted(viewId) {
    // Only to anything if the viewID is equal (in this way it is possible to have multiple views)
    if (viewId !== this.scope.id) {
      return;
    }

    this.setTransitionClass("complete");

    if (this.scope.scrollToAnchorHash) {
      let scrollToElement = null;
      const hash = window.location.hash.substr(1);

      if (hash) {
        scrollToElement = document.getElementById(window.location.hash.substr(1)); // Scroll to Anchor of hash

        if (scrollToElement) {
          return await (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.scrollTo)(scrollToElement, this.scope.scrollToAnchorOffset, window);
        }
      }
    }

    if (this.scope.scrollToTop) {
      return await (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.scrollToPosition)(window, "start", "vertical", "smooth");
    }
  }

  setTransitionClass(state) {
    this.classList.remove("transition-init");
    this.classList.remove("transition-complete");
    this.classList.add("transition-".concat(state));
  }

  requiredAttributes() {
    return [];
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "id":
        this.events = _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher.getInstance(this.scope.id);
        break;

      default:
        break;
    }
  }

  async beforeBind() {
    await super.beforeBind();
    this.addEventListeners();
    this.initAndStartPjax();
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(RouterViewComponent, "tagName", "router-view");

/***/ }),

/***/ "../../packages/router/src/constants.ts":
/*!**********************************************!*\
  !*** ../../packages/router/src/constants.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IGNORE_CLASS_LINK": function() { return /* binding */ IGNORE_CLASS_LINK; },
/* harmony export */   "IGNORE_CLASS_PREFETCH": function() { return /* binding */ IGNORE_CLASS_PREFETCH; },
/* harmony export */   "ROUTE_ERROR_CLASS": function() { return /* binding */ ROUTE_ERROR_CLASS; }
/* harmony export */ });
/**
 * Class append to links which have caused an error
 */
const ROUTE_ERROR_CLASS = "router-error";
/**
 * Class name used to ignore links
 */

const IGNORE_CLASS_LINK = "no-barba";
/**
 * Class name used to ignore prefetch on links
 */

const IGNORE_CLASS_PREFETCH = "no-barba-prefetch";

/***/ }),

/***/ "../../packages/router/src/index.ts":
/*!******************************************!*\
  !*** ../../packages/router/src/index.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransition; },
/* harmony export */   "BaseView": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseView; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.CustomTransition; },
/* harmony export */   "Dom": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Dom; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.HideShowTransition; },
/* harmony export */   "HistoryManager": function() { return /* reexport safe */ _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_0__.HistoryManager; },
/* harmony export */   "IGNORE_CLASS_LINK": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.IGNORE_CLASS_LINK; },
/* harmony export */   "IGNORE_CLASS_PREFETCH": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.IGNORE_CLASS_PREFETCH; },
/* harmony export */   "ParentRouteClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ParentRouteClassStarBinder; },
/* harmony export */   "Pjax": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.Prefetch; },
/* harmony export */   "ROUTE_ERROR_CLASS": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.ROUTE_ERROR_CLASS; },
/* harmony export */   "RouteBackOnStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteBackOnStarBinder; },
/* harmony export */   "RouteBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteBinder; },
/* harmony export */   "RouteClassStarBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RouteClassStarBinder; },
/* harmony export */   "RoutePreloadBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.RoutePreloadBinder; },
/* harmony export */   "RouterLoadScriptComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.RouterLoadScriptComponent; },
/* harmony export */   "RouterService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.RouterService; },
/* harmony export */   "RouterViewComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.RouterViewComponent; },
/* harmony export */   "ViewStaticBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_2__.ViewStaticBinder; },
/* harmony export */   "routerModule": function() { return /* reexport safe */ _router_module_js__WEBPACK_IMPORTED_MODULE_6__.routerModule; }
/* harmony export */ });
/* harmony import */ var _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/history/src/index.js */ "../../packages/history/src/index.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "../../packages/router/src/constants.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/router/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/router/src/components/index.ts");
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types/index.js */ "../../packages/router/src/types/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/index.js */ "../../packages/router/src/services/index.ts");
/* harmony import */ var _router_module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.module.js */ "../../packages/router/src/router.module.ts");








/***/ }),

/***/ "../../packages/router/src/router.module.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/router.module.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "routerModule": function() { return /* binding */ routerModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/router/src/binders/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/index.js */ "../../packages/router/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/router/src/services/index.ts");



const routerModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: {},

  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.RouterService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/router/src/services/Pjax/Dom.ts":
/*!******************************************************!*\
  !*** ../../packages/router/src/services/Pjax/Dom.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dom": function() { return /* binding */ Dom; }
/* harmony export */ });
/**
 * Object that is going to deal with DOM parsing/manipulation
 * TODO move to @ribajs/core dom utils
 */
class Dom {
  static getPrefetchLinkElements(content) {
    // router-preload is a custom preloader
    return content.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]');
  }

  static parseTitle(content) {
    let title = ""; // title = Dom.findHTMLTagContent('title', template.innerHTML) || '';

    const titleElement = content.querySelector("title");

    if (titleElement && titleElement.innerText) {
      title = titleElement.innerText;
    }

    return title;
  }
  /**
   * Parse the responseText obtained from the fetch call
   * @see https://stackoverflow.com/a/41038197/1465919
   */


  static parseResponse(responseText, parseTitle, containerSelector) {
    let prefetchLinks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    let title = "";
    let prefetchLinkElements = [];
    const template = document.createElement("template");
    template.innerHTML = responseText;

    if (parseTitle) {
      title = this.parseTitle(template.content);
    }

    if (prefetchLinks) {
      prefetchLinkElements = this.getPrefetchLinkElements(template.content);
    }

    const container = this.getContainer(template, containerSelector);
    return {
      container,
      title,
      prefetchLinks: prefetchLinkElements
    };
  }
  /**
   * Use this method only on the first page load
   */


  static parseInitial(parseTitle, containerSelector) {
    let prefetchLinks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    let title = "";
    let prefetchLinkElements = []; // const template = document.createElement("template") as HTMLTemplateElement;
    // template.innerHTML = document.body.innerHTML;

    const container = this.getContainer(document, containerSelector);

    if (parseTitle) {
      title = this.parseTitle(document);
    }

    if (prefetchLinks) {
      prefetchLinkElements = this.getPrefetchLinkElements(document);
    }

    return {
      container: container,
      title,
      prefetchLinks: prefetchLinkElements
    };
  }
  /**
   * Get the container on the current DOM,
   * or from an Element passed via argument
   */


  static getContainer(element, containerSelector) {
    if (!element) {
      throw new Error("Barba.js: [getContainer] No element to get container from, maybe the DOM is not ready!");
    }

    const container = this.parseContainer(element, containerSelector);

    if (!container) {
      throw new Error("[DOM] No container found");
    }

    return container;
  }
  /**
   * Get the namespace of the container
   */


  static getNamespace(element) {
    if (element && element.dataset && element.dataset.namespace) {
      return element.dataset.namespace;
    } else {
      return null;
    }
  }
  /**
   * Put the container on the page
   */


  static putContainer(element, wrapper) {
    element = element;
    element.style.visibility = "hidden";
    wrapper.appendChild(element);
  }
  /**
   * Get container selector
   */


  static parseContainer(newPage, containerSelector) {
    if (!newPage) {
      const error = new Error("New page not loaded!");
      console.error(error, newPage);
      throw error;
    }

    let result;

    if (newPage.content) {
      result = newPage.content.querySelector(containerSelector);
    } else {
      result = newPage.querySelector(containerSelector);
    }

    if (!result) {
      const error = new Error("No container with selector \"".concat(containerSelector, "\" found!"));
      console.error(error, newPage);
      throw error;
    }

    return result;
  }

}



/***/ }),

/***/ "../../packages/router/src/services/Pjax/Prefetch.ts":
/*!***********************************************************!*\
  !*** ../../packages/router/src/services/Pjax/Prefetch.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Prefetch": function() { return /* binding */ Prefetch; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "../../packages/router/src/services/Pjax/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants.js */ "../../packages/router/src/constants.ts");






/**
 * Prefetch
 */
class Prefetch {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = Prefetch.instances[id];

    if (!result) {
      return new this(id);
    }

    return result;
  }
  /** singleton instance */


  /**
   * Creates an singleton instance of Prefetch.
   */
  constructor(viewId) {
    this.viewId = viewId;
    this.viewId = viewId;

    if (Prefetch.instances[this.viewId]) {
      return Prefetch.instances[this.viewId];
    }

    Prefetch.instances[this.viewId] = this;
    this.onLinkEnterIntern = this.onLinkEnterIntern.bind(this);
  }
  /**
   * Init the event listener on mouseover and touchstart for all links on the document
   * for the prefetch
   *
   */


  init() {
    let autobindLinks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (!window.history.pushState) {
      return false;
    }

    if (autobindLinks) {
      this.deInit();
      document.body.addEventListener("mouseover", this.onLinkEnterIntern, {
        passive: true
      });
      document.body.addEventListener("touchstart", this.onLinkEnterIntern, {
        passive: true
      });
    }
  }

  deInit() {
    document.body.removeEventListener("mouseover", this.onLinkEnterIntern);
    document.body.removeEventListener("touchstart", this.onLinkEnterIntern);
  }
  /**
   * This method is used from the rv-route binder
   * @param el
   */


  initBinder(el, url) {
    if (!window.history.pushState) {
      return false;
    }

    this.deInitBinder(el, url);
    el.addEventListener("mouseover", this.onLinkEnter.bind(this, url, el), {
      passive: true
    });
    el.addEventListener("touchstart", this.onLinkEnter.bind(this, url, el), {
      passive: true
    });
  }

  deInitBinder(el, url) {
    el.removeEventListener("mouseover", this.onLinkEnter.bind(this, url, el));
    el.removeEventListener("touchstart", this.onLinkEnter.bind(this, url, el));
  }

  onLinkEnter(url, el, evt) {
    if (el.classList && (el.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_4__.IGNORE_CLASS_PREFETCH) || el.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS))) {
      return;
    }

    url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.normalizeUrl)(url).url;
    const preventCheck = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.preventCheck(url, el, evt); // Check if the link is eligible for Pjax

    if (url && preventCheck) {
      const pjax = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.viewId);

      if (pjax) {
        pjax.loadResponseCached(url, false, false).catch(error => {
          el.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS);
          console.error(url);
          console.error(error);
        });
      } else {
        console.warn("[Prefetch.onLinkEnter] No pjax instance for viewId \"".concat(this.viewId, "\" found!"));
        el.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_4__.ROUTE_ERROR_CLASS);
      }
    }
  }

  url(url) {
    url = (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_3__.normalizeUrl)(url).url;
    const preventCheck = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.preventCheck(url); // Check if the link is eligible for Pjax

    if (url && preventCheck) {
      const pjax = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getInstance(this.viewId);

      if (pjax) {
        pjax.loadResponseCached(url, false, false).catch(error => {
          console.error(error);
        });
      } else {
        console.warn("[Prefetch.url] No pjax instance for viewId \"".concat(this.viewId, "\" found!"));
      }
    }
  }
  /**
   * Callback for the mouseover/touchstart, please use the rv-route binder instead
   *
   */


  onLinkEnterIntern(evt) {
    let el = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.getElementFromEvent)(evt);

    if (!el) {
      throw new Error("HTML Element not set");
    }

    while (el && !_index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getHref(el)) {
      el = el.parentNode;
    }

    if (!el) {
      return;
    }

    if (el.nodeName !== "A") {
      return;
    }

    const href = _index_js__WEBPACK_IMPORTED_MODULE_1__.Pjax.getHref(el); // Already managed by the rv-route binder

    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return;
    }

    if (!href) {
      console.warn("Url is not defined, you can't cache the link without the url. Please make sure your element has the href attribute or pass the url directly to this function.", el);
      return;
    }

    return this.onLinkEnter(href, el, evt);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Prefetch, "instances", {});



/***/ }),

/***/ "../../packages/router/src/services/Pjax/index.ts":
/*!********************************************************!*\
  !*** ../../packages/router/src/services/Pjax/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dom": function() { return /* reexport safe */ _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom; },
/* harmony export */   "Pjax": function() { return /* binding */ Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _Prefetch_js__WEBPACK_IMPORTED_MODULE_2__.Prefetch; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dom.js */ "../../packages/router/src/services/Pjax/Dom.ts");
/* harmony import */ var _Prefetch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Prefetch.js */ "../../packages/router/src/services/Pjax/Prefetch.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _ribajs_cache__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ribajs/cache */ "../../packages/cache/src/index.ts");
/* harmony import */ var _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Transition/index.js */ "../../packages/router/src/services/Transition/index.ts");
/* harmony import */ var _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ribajs/history/src/index.js */ "../../packages/history/src/index.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../constants.js */ "../../packages/router/src/constants.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/router/src/services/index.ts");













/**
 * Pjax is a static object with main function
 *
 * @borrows Dom as Dom
 */
class Pjax {
  static getInstance() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = Pjax.instances[id];

    if (!result) {
      console.warn("[Pjax.getInstance] No pjax instance for viewId \"".concat(id, "\" found!"));
    }

    return result;
  }
  /**
   * Determine if the link should be followed
   */


  static preventCheckUrl(href) {
    /**
     * Create fake html element
     */
    const element = document.createElement("a");
    element.setAttribute("href", href);

    if (!element) {
      return false;
    }

    if (!href) {
      return false;
    } // In case you're trying to load the same page


    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)(href) === (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)(location.href)) {
      return false;
    } // Check if it's the same domain


    if (window.location.protocol !== element.protocol || window.location.hostname !== element.hostname) {
      return false;
    } // Check if the port is the same


    if ((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getPort)() !== (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getPort)(element.port)) {
      return false;
    }

    return true;
  }
  /**
   * Determine if the link should be followed
   */


  static preventCheck(url, element, evt) {
    if (!window.history.pushState) {
      return false;
    }

    if (!this.preventCheckUrl(url)) {
      return false;
    }

    if (evt) {
      // Middle click, cmd click, ctrl click or prefetch load event
      if (evt && evt.which && evt.which > 1 || evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey) {
        return false;
      }
    }

    if (element) {
      // Ignore target with _blank target
      if (element.target && element.target === "_blank") {
        return false;
      } // Ignore case where there is download attribute


      if (element.getAttribute && typeof element.getAttribute("download") === "string") {
        return false;
      }

      if (element.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_9__.IGNORE_CLASS_LINK)) {
        return false;
      }
    }

    return true;
  }
  /**
   * Get the .href parameter out of an element
   * and handle special cases (like xlink:href)
   */


  static getHref(el) {
    if (!el) {
      return undefined;
    }

    if (el.getAttribute && typeof el.getAttribute("xlink:href") === "string") {
      return el.getAttribute("xlink:href") || undefined;
    }

    if (typeof el.href === "string" || el.hasAttribute && el.hasAttribute("href")) {
      const href = el.href || el.getAttribute("href");

      if (!href) {
        console.error("href attribute not found for element: ", el);
        throw new Error("href attribute not found!");
      }

      return href;
    }

    return undefined;
  }

  /**
   * Creates an singleton instance of Pjax.
   */
  constructor(_ref) {
    let {
      id,
      action = "replace",
      wrapper,
      containerSelector = "[data-namespace]",
      listenAllLinks = false,
      listenPopstate = true,
      parseTitle = true,
      changeBrowserUrl = true,
      prefetchLinks = true,
      scrollToTop = true,
      scrollToAnchorOffset = _services_index_js__WEBPACK_IMPORTED_MODULE_10__.RouterService.options.scrollToAnchorOffset
    } = _ref;

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "history", new _ribajs_history_src_index_js__WEBPACK_IMPORTED_MODULE_8__.HistoryManager());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "cacheEnabled", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "transitionProgress", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "viewId", "main");

    if (id) {
      this.viewId = id;
    }

    let instance = this;
    this.scrollToAnchorOffset = scrollToAnchorOffset || 0;
    this.dispatcher = new _ribajs_events__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher(this.viewId);
    this.listenAllLinks = listenAllLinks;
    this.listenPopstate = listenPopstate;
    this.parseTitle = parseTitle;
    this.changeBrowserUrl = changeBrowserUrl;
    this.containerSelector = containerSelector;
    this.prefetchLinks = prefetchLinks;

    if (Pjax.instances[this.viewId]) {
      instance = Pjax.instances[this.viewId];
    }

    instance.transition = instance.transition || new _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__.HideShowTransition(action, scrollToTop);
    instance.wrapper = instance.wrapper || wrapper;
    instance.containerSelector = instance.containerSelector || containerSelector;
    instance.listenAllLinks = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.listenAllLinks) ? instance.listenAllLinks : listenAllLinks;
    instance.listenPopstate = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.listenPopstate) ? instance.listenPopstate : listenPopstate;
    instance.parseTitle = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.parseTitle) ? instance.parseTitle : parseTitle;
    instance.changeBrowserUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.changeBrowserUrl) ? instance.changeBrowserUrl : changeBrowserUrl;
    instance.prefetchLinks = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(instance.prefetchLinks) ? instance.prefetchLinks : prefetchLinks;

    if (instance.wrapper) {
      instance.wrapper.setAttribute("aria-live", "polite");
    }

    Pjax.instances[this.viewId] = instance;
    return Pjax.instances[this.viewId];
  }
  /**
   * USe this if you have a view component
   */


  setActiveWrapper(wrapper) {
    this.wrapper = wrapper;
  }
  /**
   * Function to be called to start Pjax
   */


  start() {
    if (this.wrapper) {
      try {
        this.init(this.wrapper, this.listenAllLinks, this.listenPopstate);
      } catch (error) {
        console.error(error);
      }
    } else {
      console.error("Can't init pjax without wrapper");
    }
  }
  /**
   * Return the currentURL cleaned
   */


  getCurrentUrl() {
    return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.cleanLink)((0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getUrl)());
  }
  /**
   * Change the URL with push state and trigger the state change
   */


  goTo(url) {
    let newTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (newTab) {
      const win = window.open(url, "_blank");

      if (win) {
        return win.focus();
      }

      return false;
    }

    if (url.startsWith("http")) {
      url = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(url).url;
    }

    if (!url.startsWith("http")) {
      if (this.changeBrowserUrl) {
        window.history.pushState(null, "", url);
      }

      return this.onStateChange(undefined, url);
    } else {
      // fallback
      this.forceGoTo(url);
    }
  }
  /**
   * Return a transition object
   */


  getTransition() {
    // User customizable
    return this.transition || new _Transition_index_js__WEBPACK_IMPORTED_MODULE_7__.HideShowTransition();
  }

  prefetchLink(href) {
    href = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(href).url;
    const follow = Pjax.preventCheckUrl(href);

    if (follow) {
      return this.loadResponseCached(href, true, false);
    }
  }
  /**
   * Appends a prefetch link to the head and caches the result
   */


  prefetchLinkElement(linkElement, head) {
    const rel = linkElement.getAttribute("rel");
    const href = Pjax.getHref(linkElement);

    if (rel === "router-preload" && href && this.cacheEnabled && !linkElement.classList.contains(_constants_js__WEBPACK_IMPORTED_MODULE_9__.ROUTE_ERROR_CLASS)) {
      try {
        this.prefetchLink(href);
      } catch (error) {
        linkElement.classList.add(_constants_js__WEBPACK_IMPORTED_MODULE_9__.ROUTE_ERROR_CLASS);
        console.error(error);
      }
    } // Append The link elements to the head for native prefetch by the browser


    head.appendChild(linkElement);
  }

  removePrefetchLinks(head) {
    const removePrefetchLinkElements = head.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]'); // Remove the old prefetch link elements

    removePrefetchLinkElements.forEach(linkElement => {
      if (linkElement && linkElement.parentNode) {
        linkElement.parentNode.removeChild(linkElement);
      }
    });
  }
  /**
   * Replaces the prefetch links in the head with the new one.
   * The custom link[href][rel="router-preload"] elements will be not readd to the head
   * because we preload them with javascript, the others are preloaded by the browser
   * because it has native support for them and for that they must exist in the head
   * @param prefetchLinks
   */


  replacePrefetchLinkElements(prefetchLinks) {
    const head = document.head || document.getElementsByTagName("head")[0];
    this.removePrefetchLinks(head);
    prefetchLinks.forEach(linkElement => {
      this.prefetchLinkElement(linkElement, head);
    });
  }
  /**
   * Load an url, will start an fetch request or load the response from the cache and returns the container
   * Also puts the container to the DOM and sets the title (if this option is active)
   */


  async loadCached(url) {
    try {
      const {
        responsePromise
      } = await this.loadResponseCached(url, false, true);

      if (!this.wrapper) {
        throw new Error("[Pjax] you need a wrapper!");
      }

      const response = await responsePromise;
      _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.putContainer(response.container, this.wrapper);

      if (this.parseTitle === true && response.title) {
        document.title = response.title;
      }

      if (this.prefetchLinks === true && response.prefetchLinks) {
        this.replacePrefetchLinkElements(response.prefetchLinks);
      }

      return response.container;
    } catch (error) {
      console.error(error); // Something went wrong (timeout, 404, 505...)

      this.forceGoTo(url);
      throw error;
    }
  }
  /**
   * Load an url, will start an fetch request or load from the cache (and set it to the cache) and will return a `Response` object
   * @param url Url to get from cache or to make the request for
   * @param forceCache Force to use the browser build in cache, for more information see `force-cache` on https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
   * @param fallback If there is an error, make a normal browser request and reload the page you should not use this on prefetch urls
   */


  async loadResponseCached(url) {
    let forceCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    let responsePromise;

    try {
      if (this.cacheEnabled) {
        responsePromise = Pjax.cache.get(url);

        if (responsePromise) {
          return {
            fromCache: true,
            responsePromise
          };
        }
      }

      responsePromise = this.loadResponse(url, forceCache);

      if (this.cacheEnabled && responsePromise) {
        Pjax.cache.set(url, responsePromise);
      } else {// Pjax.cache.reset();
      }
    } catch (error) {
      console.error(error);

      if (fallback) {
        this.forceGoTo(url);
      }

      throw error;
    }

    return {
      fromCache: false,
      responsePromise
    };
  }
  /**
   * Load an url, will start an fetch request and will return a `Response` object
   * @param url Url to get from cache or to make the request for
   * @param forceCache Force to use the browser build in cache, for more information see `force-cache` on https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
   */


  async loadResponse(url) {
    let forceCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const options = forceCache ? {
      cache: "force-cache"
    } : {};
    const data = await _ribajs_core__WEBPACK_IMPORTED_MODULE_4__.HttpService.get(url, undefined, "html", {}, options);

    if (!data || !data.body) {
      throw new Error("No body!");
    }

    const response = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.parseResponse(data.body, this.parseTitle, this.containerSelector, this.prefetchLinks);
    return response;
  }
  /**
   * Attach the event listeners
   */


  bindEvents(listenAllLinks, listenPopstate) {
    // you can also use the rv-router for this
    if (listenAllLinks) {
      document.addEventListener("click", this.onLinkClickIntern.bind(this));
    }

    if (listenPopstate) {
      window.addEventListener("popstate", this.onStateChange.bind(this));
    }
  }
  /**
   * Force the browser to go to a certain url
   */


  forceGoTo(url) {
    console.warn("forceGoTo", url);

    if (url && url.href) {
      window.location = url;
    }

    if (typeof url === "string") {
      window.location.href = url;
    }
  }

  onLinkClickIntern(evt) {
    let el = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getElementFromEvent)(evt);

    while (el && !Pjax.getHref(el)) {
      el = el.parentNode; // TODO test me
    }

    if (!el || el.nodeName !== "A") {
      return;
    }

    const href = Pjax.getHref(el); // Already managed by the rv-route binder

    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return;
    }

    if (!href) {
      throw new Error("Url is not defined, you can't cache the link without the url. Please make sure your element has the href attribute or pass the url directly to this function.");
    } // Already managed by the rv-route binder


    if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
      return false;
    }

    return this.onLinkClick(evt, el, href);
  }
  /**
   * Callback called from click event
   */


  onLinkClick(evt, el, href) {
    let newTab = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // normalize url, returns the relative url for internal urls and the full url for external urls
    const {
      url,
      location
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(href);
    const {
      location: currLocation
    } = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(); // Is this a local scroll link to an title anchor?

    if (location.hash && currLocation.pathname === location.pathname) {
      let id = location.hash.slice(1);
      id = decodeURI(id); // Workaround for markdown generated ids with umlauts

      const scrollToElement = document.getElementById(id);

      if (scrollToElement) {
        evt.stopPropagation();
        evt.preventDefault();

        if (this.changeBrowserUrl) {
          window.history.pushState(null, "", url);
        }

        return (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.scrollTo)(scrollToElement, this.scrollToAnchorOffset);
      }
    }

    if (!url) {
      throw new Error("url is falsy");
    }

    const follow = Pjax.preventCheck(url, el, evt);

    if (follow) {
      evt.stopPropagation();
      evt.preventDefault();
      this.dispatcher.trigger("linkClicked", el, evt);
      this.goTo(url, newTab);
    }
  }
  /**
   * Method called after a 'popstate' or from .goTo()
   */


  async onStateChange(event) {
    let newUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCurrentUrl();
    // normalize url, returns the relative url for internal urls and the full url for external urls
    newUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(newUrl).url;
    const oldUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(this.history.currentStatus().url).url;

    if (this.changeBrowserUrl && oldUrl === newUrl) {
      return false;
    }

    this.history.add(newUrl);
    this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus(), this.history.prevStatus());
    const oldContainer = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getContainer(document, this.containerSelector);
    const newContainerPromise = this.loadCached(newUrl);
    const transition = this.getTransition();
    this.transitionProgress = true;
    const transitionResult = transition.init(oldContainer, newContainerPromise);
    this.onNewContainerLoaded(await newContainerPromise);
    await transitionResult;
    this.onTransitionEnd();
  }
  /**
   * Function called as soon the new container is ready
   */


  onNewContainerLoaded(container) {
    const currentStatus = this.history.currentStatus();
    currentStatus.namespace = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getNamespace(container);
    const dataset = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getDataset)(container);
    this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), this.history.prevStatus(), container, container.innerHTML, dataset, false // true if this is the first time newPageReady is triggered / true on initialization
    );
  }
  /**
   * Function called as soon the transition is finished
   */


  onTransitionEnd() {
    this.transitionProgress = false;
    this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus(), this.history.prevStatus());
  }
  /**
   * Init the events
   */


  init(wrapper, listenAllLinks, listenPopstate) {
    const initialResponse = _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.parseInitial(this.parseTitle, this.containerSelector, this.prefetchLinks);
    const url = window.location.pathname; // Reload the current site with pjax to cache the initial page

    if (this.cacheEnabled) {
      const currentUrl = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.normalizeUrl)(window.location.href).url;

      if (!Pjax.cache.get(url)) {
        this.loadResponseCached(currentUrl, false, false);
      }
    }

    this.replacePrefetchLinkElements(initialResponse.prefetchLinks);
    this.wrapper = wrapper;
    this.history.add(this.getCurrentUrl(), _Dom_js__WEBPACK_IMPORTED_MODULE_1__.Dom.getNamespace(initialResponse.container)); // Fire for the current view.

    this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus());
    const dataset = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_5__.getDataset)(initialResponse.container);
    this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), {}, initialResponse.container, initialResponse.container.innerHTML, dataset, true // true if this is the first time newPageReady is triggered / true on initialization
    );
    this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus());
    this.bindEvents(listenAllLinks, listenPopstate);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Pjax, "cache", new _ribajs_cache__WEBPACK_IMPORTED_MODULE_6__.BaseCache());

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Pjax, "instances", {});



/***/ }),

/***/ "../../packages/router/src/services/Transition/BaseTransition.ts":
/*!***********************************************************************!*\
  !*** ../../packages/router/src/services/Transition/BaseTransition.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* binding */ BaseTransition; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * BaseTransition to extend
 */
class BaseTransition {
  constructor() {
    let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "deferred", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)());

    this.action = action;
  }
  /**
   * This function is called from Pjax module to initialize
   * the transition.
   *
   */


  async init(oldContainer, newContainer) {
    this.oldContainer = oldContainer;
    this.deferred = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)();
    const newContainerLoading = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.deferred)();
    this.newContainerLoading = newContainerLoading.promise;
    this.start();
    this.newContainer = await newContainer;
    newContainerLoading.resolve(this.newContainer);
    return this.deferred.promise;
  }
  /**
   * This function needs to be called as soon the Transition is finished
   */


  async done() {
    if (!this.oldContainer) {
      throw new Error("Can't remove old container");
    }

    if (this.action === "replace") {
      this.oldContainer.remove();
    }

    if (!this.newContainer) {
      throw new Error("Can't show new container");
    }

    this.newContainer.style.visibility = "visible";
    return this.deferred.resolve(undefined);
  }
  /**
   * Constructor for your Transition
   */


}

/***/ }),

/***/ "../../packages/router/src/services/Transition/CustomTransition.ts":
/*!*************************************************************************!*\
  !*** ../../packages/router/src/services/Transition/CustomTransition.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomTransition": function() { return /* binding */ CustomTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");


/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */
class CustomTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition {
  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    await this.newContainerLoading;
    this.finish();
    return;
  }

  async finish() {
    document.body.scrollTop = 0;
    return this.done();
  }

}



/***/ }),

/***/ "../../packages/router/src/services/Transition/FadeTransition.ts":
/*!***********************************************************************!*\
  !*** ../../packages/router/src/services/Transition/FadeTransition.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FadeTransition": function() { return /* binding */ FadeTransition; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");



/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */

class FadeTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_1__.BaseTransition {
  constructor() {
    let scrollToTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    super("replace");

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "durationMs", 200);

    this.scrollToTop = scrollToTop;
  }

  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    if (this.oldContainer) {
      this.oldContainer.style.transition = "opacity ".concat(this.durationMs, "ms");
      this.oldContainer.style.opacity = "0";
    }

    if (this.scrollToTop) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.scrollToPosition)(window, "start", "vertical", "smooth");
    }

    const newContainer = await this.newContainerLoading;
    newContainer.style.opacity = "0";
    newContainer.style.transition = "opacity ".concat(this.durationMs, "ms");
    setTimeout(() => {
      this.finish(newContainer);
    }, this.durationMs);
    return;
  }

  async finish(newContainer) {
    newContainer.style.opacity = "1";
    return this.done();
  }

}

/***/ }),

/***/ "../../packages/router/src/services/Transition/HideShowTransition.ts":
/*!***************************************************************************!*\
  !*** ../../packages/router/src/services/Transition/HideShowTransition.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HideShowTransition": function() { return /* binding */ HideShowTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");


/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */

class HideShowTransition extends _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition {
  constructor() {
    let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";
    let scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    super(action);
    this.action = action;
    this.scrollToTop = scrollToTop;
  }

  async start() {
    if (!this.newContainerLoading) {
      throw new Error("this.newContainerLoading is not set");
    }

    if (this.oldContainer) {
      this.oldContainer.style.display = "none";
    }

    if (this.scrollToTop) {
      await (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_1__.scrollToPosition)(window, "start", "vertical", "smooth");
    }

    await this.newContainerLoading;
    await this.finish();

    if (this.oldContainer) {
      this.oldContainer.style.display = "";
    }

    return;
  }

  async finish() {
    return this.done();
  }

}

/***/ }),

/***/ "../../packages/router/src/services/Transition/index.ts":
/*!**************************************************************!*\
  !*** ../../packages/router/src/services/Transition/index.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _CustomTransition_js__WEBPACK_IMPORTED_MODULE_1__.CustomTransition; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _FadeTransition_js__WEBPACK_IMPORTED_MODULE_2__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _HideShowTransition_js__WEBPACK_IMPORTED_MODULE_3__.HideShowTransition; }
/* harmony export */ });
/* harmony import */ var _BaseTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTransition.js */ "../../packages/router/src/services/Transition/BaseTransition.ts");
/* harmony import */ var _CustomTransition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomTransition.js */ "../../packages/router/src/services/Transition/CustomTransition.ts");
/* harmony import */ var _FadeTransition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FadeTransition.js */ "../../packages/router/src/services/Transition/FadeTransition.ts");
/* harmony import */ var _HideShowTransition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HideShowTransition.js */ "../../packages/router/src/services/Transition/HideShowTransition.ts");





/***/ }),

/***/ "../../packages/router/src/services/View.ts":
/*!**************************************************!*\
  !*** ../../packages/router/src/services/View.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseView": function() { return /* binding */ BaseView; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");



/**
 * BaseView to be extended
 */

class BaseView {
  constructor() {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "dispatcher", _ribajs_events__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.getInstance());
  }

  /**
   * Helper to extend the object
   */
  extend(obj) {
    return (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_2__.extend)({
      deep: false
    }, this, obj);
  }
  /**
   * Init the view.
   * P.S. Is suggested to init the view before starting Barba.Pjax.start(),
   * in this way .onEnter() and .onEnterCompleted() will be fired for the current
   * container when the page is loaded.
   */


  init() {
    this.dispatcher.on("initStateChange", (viewId, newStatus, oldStatus) => {
      if (oldStatus && oldStatus.namespace === this.namespace) {
        this.onLeave();
      }
    });
    this.dispatcher.on("newPageReady", (viewId, newStatus, oldStatus, container) => {
      this.container = container;

      if (newStatus.namespace === this.namespace) {
        this.onEnter();
      }
    });
    this.dispatcher.on("transitionCompleted", (viewId, newStatus, oldStatus) => {
      if (newStatus.namespace === this.namespace) {
        this.onEnterCompleted();
      }

      if (oldStatus && oldStatus.namespace === this.namespace) {
        this.onLeaveCompleted();
      }
    });
  }
  /**
   * This function will be fired when the container
   * is ready and attached to the DOM.
   */


}



/***/ }),

/***/ "../../packages/router/src/services/index.ts":
/*!***************************************************!*\
  !*** ../../packages/router/src/services/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransition; },
/* harmony export */   "BaseView": function() { return /* reexport safe */ _View_js__WEBPACK_IMPORTED_MODULE_1__.BaseView; },
/* harmony export */   "CustomTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomTransition; },
/* harmony export */   "Dom": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Dom; },
/* harmony export */   "FadeTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.FadeTransition; },
/* harmony export */   "HideShowTransition": function() { return /* reexport safe */ _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__.HideShowTransition; },
/* harmony export */   "Pjax": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Pjax; },
/* harmony export */   "Prefetch": function() { return /* reexport safe */ _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__.Prefetch; },
/* harmony export */   "RouterService": function() { return /* reexport safe */ _router_service_js__WEBPACK_IMPORTED_MODULE_3__.RouterService; }
/* harmony export */ });
/* harmony import */ var _Transition_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition/index.js */ "../../packages/router/src/services/Transition/index.ts");
/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./View.js */ "../../packages/router/src/services/View.ts");
/* harmony import */ var _Pjax_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pjax/index.js */ "../../packages/router/src/services/Pjax/index.ts");
/* harmony import */ var _router_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router.service.js */ "../../packages/router/src/services/router.service.ts");





/***/ }),

/***/ "../../packages/router/src/services/router.service.ts":
/*!************************************************************!*\
  !*** ../../packages/router/src/services/router.service.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterService": function() { return /* binding */ RouterService; }
/* harmony export */ });
/* harmony import */ var _Transition_HideShowTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition/HideShowTransition.js */ "../../packages/router/src/services/Transition/HideShowTransition.ts");

class RouterService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of RouterService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    var _options$defaultTrans, _options$scrollToAnch;

    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      console.warn("Singleton of RouterService already defined!");
      return this.instance;
    }

    options.defaultTransition = (_options$defaultTrans = options.defaultTransition) !== null && _options$defaultTrans !== void 0 ? _options$defaultTrans : new _Transition_HideShowTransition_js__WEBPACK_IMPORTED_MODULE_0__.HideShowTransition();
    options.scrollToAnchorOffset = (_options$scrollToAnch = options.scrollToAnchorOffset) !== null && _options$scrollToAnch !== void 0 ? _options$scrollToAnch : 0;
    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/router/src/types/index.ts":
/*!************************************************!*\
  !*** ../../packages/router/src/types/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jsx_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsx/index.js */ "../../packages/router/src/types/jsx/index.ts");
/* harmony import */ var _module_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module-options.js */ "../../packages/router/src/types/module-options.ts");
/* harmony import */ var _pjax_options_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pjax-options.js */ "../../packages/router/src/types/pjax-options.ts");
/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.js */ "../../packages/router/src/types/response.ts");
/* harmony import */ var _route_options_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./route-options.js */ "../../packages/router/src/types/route-options.ts");
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transition.js */ "../../packages/router/src/types/transition.ts");
/* harmony import */ var _view_options_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./view-options.js */ "../../packages/router/src/types/view-options.ts");








/***/ }),

/***/ "../../packages/router/src/types/jsx/index.ts":
/*!****************************************************!*\
  !*** ../../packages/router/src/types/jsx/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intrinsic_elements_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intrinsic-elements.js */ "../../packages/router/src/types/jsx/intrinsic-elements.ts");
/* harmony import */ var _jsx_router_view_props_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-router-view-props.js */ "../../packages/router/src/types/jsx/jsx-router-view-props.ts");



/***/ }),

/***/ "../../packages/router/src/types/jsx/intrinsic-elements.ts":
/*!*****************************************************************!*\
  !*** ../../packages/router/src/types/jsx/intrinsic-elements.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/jsx/jsx-router-view-props.ts":
/*!********************************************************************!*\
  !*** ../../packages/router/src/types/jsx/jsx-router-view-props.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/module-options.ts":
/*!*********************************************************!*\
  !*** ../../packages/router/src/types/module-options.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/pjax-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/router/src/types/pjax-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/response.ts":
/*!***************************************************!*\
  !*** ../../packages/router/src/types/response.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/route-options.ts":
/*!********************************************************!*\
  !*** ../../packages/router/src/types/route-options.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/transition.ts":
/*!*****************************************************!*\
  !*** ../../packages/router/src/types/transition.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/router/src/types/view-options.ts":
/*!*******************************************************!*\
  !*** ../../packages/router/src/types/view-options.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/binders/index.ts":
/*!*******************************************************!*\
  !*** ../../packages/shopify-tda/src/binders/index.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/components/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/components/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* reexport safe */ _instagram_instagram_component_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyTdaInstagramComponent; },
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* reexport safe */ _instagram_scrollbar_instagram_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyTdaInstagramScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _instagram_instagram_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instagram/instagram.component.js */ "../../packages/shopify-tda/src/components/instagram/instagram.component.ts");
/* harmony import */ var _instagram_scrollbar_instagram_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instagram-scrollbar/instagram-scrollbar.component.js */ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts");



/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts":
/*!******************************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.ts ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* binding */ ShopifyTdaInstagramScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_instagram_api_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/instagram-api.service.js */ "../../packages/shopify-tda/src/services/instagram-api.service.ts");
/* harmony import */ var _instagram_scrollbar_component_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./instagram-scrollbar.component.html */ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html");






class ShopifyTdaInstagramScrollbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["instagram-id", "open-links", "limit", "open-url"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      instagramId: undefined,
      openLinks: false,
      openUrl: undefined,
      limit: 0,
      onScroll: this.onScroll,
      onTap: this.onTap,
      media: undefined
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scollWith", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "instagram", _services_instagram_api_service_js__WEBPACK_IMPORTED_MODULE_4__.InstagramApiService.getSingleton());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyTdaInstagramScrollbarComponent.observedAttributes);
  }
  /**
   * Just open the instagram url
   */


  onTap(event, scope, eventEl) {
    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    if (this.scope.openUrl && this.scope.openUrl.length > 0) {
      pjax.goTo(this.scope.openUrl);
    }

    if (this.scope.openLinks) {
      var _eventEl$firstChild;

      const url = (_eventEl$firstChild = eventEl.firstChild) === null || _eventEl$firstChild === void 0 ? void 0 : _eventEl$firstChild.dataset.url;

      if (url) {
        pjax.goTo(url, true);
      }
    }
  }
  /**
   * get instagram in the middle of the scrollbar elementinnerWidth
   * TODO not used
   */


  onScroll(event, scope, eventEl) {
    if (this.scollWith) {
      const factor = 3;
      this.scollWith.scrollLeft = eventEl.scrollLeft / factor;
    }
  }
  /**
   * Get width insite the scrollbar of the autoscolling title
   * TODO not used
   */


  getTitleWidth() {
    var _this$scollWith$query;

    if (!this.scollWith) {
      return 0;
    }

    return ((_this$scollWith$query = this.scollWith.querySelector(".title-col")) === null || _this$scollWith$query === void 0 ? void 0 : _this$scollWith$query.clientWidth) || 0;
  }
  /**
   * Get width insite the scrollbar of the dragablle / scrollable area
   */


  getInstagramWidth() {
    if (!this.scope.media) {
      return;
    }

    const width = (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getViewportDimensions)().w / 3 * this.scope.media.data.length;
    return width;
  }

  async loadMedia() {
    if (!this.scope.instagramId) {
      throw new Error("instagram id is required!");
    }

    try {
      const response = await this.instagram.media(this.scope.instagramId, this.scope.limit);

      if (response) {
        this.scope.media = response.media;
        console.debug("response", response);
      }
    } catch (error) {
      console.debug("Error: Can't load instagram media", error);
    }
  }

  async beforeBind() {
    await super.beforeBind();
    this.scollWith = this.querySelector(".title-row");
    return this.loadMedia();
  }

  requiredAttributes() {
    return ["instagramId", "limit"];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _instagram_scrollbar_component_html__WEBPACK_IMPORTED_MODULE_5__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyTdaInstagramScrollbarComponent, "tagName", "shopify-tda-instagram-scrollbar");

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram/instagram.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram/instagram.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* binding */ ShopifyTdaInstagramComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _instagram_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instagram.component.html */ "../../packages/shopify-tda/src/components/instagram/instagram.component.html");
/* harmony import */ var _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/shopify-tda */ "../../packages/shopify-tda/src/index.ts");





class ShopifyTdaInstagramComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["instagram-id", "open-links", "limit"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_debug", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      media: undefined,
      openLinks: false,
      limit: 0,
      instagramId: undefined,
      onTap: this.onTap
    });

    this.instagram = _ribajs_shopify_tda__WEBPACK_IMPORTED_MODULE_4__.InstagramApiService.getSingleton();
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyTdaInstagramComponent.observedAttributes);
  }
  /**
   * Just open the instagram url
   */


  onTap(event, scope, eventEl) {
    if (!this.scope.openLinks) {
      return;
    }

    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    const url = eventEl.dataset.url;

    if (url) {
      pjax.goTo(url, true);
    }
  }

  loadMedia() {
    if (!this.scope.instagramId) {
      return Promise.reject();
    }

    this.instagram.media(this.scope.instagramId, this.scope.limit).then(response => {
      if (response) {
        this.scope.media = response.media || [];
      }
    }).catch(error => {
      console.debug("Error: Can't load instagram media", error);
    });
  }

  async beforeBind() {
    return this.loadMedia();
  }

  requiredAttributes() {
    return ["instagramId", "limit"];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && this.hasChildNodes()) {
      return null;
    } else {
      return _instagram_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyTdaInstagramComponent, "tagName", "shopify-tda-instagram");

/***/ }),

/***/ "../../packages/shopify-tda/src/constants/index.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify-tda/src/constants/index.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE_HOST_DEV_URL": function() { return /* binding */ BASE_HOST_DEV_URL; },
/* harmony export */   "BASE_HOST_URL": function() { return /* binding */ BASE_HOST_URL; }
/* harmony export */ });
const BASE_HOST_URL = "https://the-developer-app.artandcode.studio";
const BASE_HOST_DEV_URL = "https://tda-dev.artandcode.studio";

/***/ }),

/***/ "../../packages/shopify-tda/src/dependencies/index.ts":
/*!************************************************************!*\
  !*** ../../packages/shopify-tda/src/dependencies/index.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Io": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.Io; },
/* harmony export */   "Socket": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* reexport safe */ _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__.io; }
/* harmony export */ });
/* harmony import */ var _socket_io_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socket-io-client.js */ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts");


/***/ }),

/***/ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/dependencies/socket-io-client.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Io": function() { return /* reexport module object */ socket_io_client__WEBPACK_IMPORTED_MODULE_0__; },
/* harmony export */   "Socket": function() { return /* reexport safe */ socket_io_client__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* binding */ io; }
/* harmony export */ });
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ "../../.yarn/cache/socket.io-client-npm-4.4.1-da36bb26d9-4c7f77f439.zip/node_modules/socket.io-client/build/esm/index.js");


const io = socket_io_client__WEBPACK_IMPORTED_MODULE_0__.io;


/***/ }),

/***/ "../../packages/shopify-tda/src/formatters/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/formatters/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/shopify-tda/src/index.ts":
/*!***********************************************!*\
  !*** ../../packages/shopify-tda/src/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseApiService; },
/* harmony export */   "FacebookApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.FacebookApiService; },
/* harmony export */   "InstagramApiService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.InstagramApiService; },
/* harmony export */   "Io": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.Io; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.LocalesService; },
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ModuleService; },
/* harmony export */   "ShopifyApiArticleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiArticleService; },
/* harmony export */   "ShopifyApiBlogsService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiBlogsService; },
/* harmony export */   "ShopifyApiProductService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiProductService; },
/* harmony export */   "ShopifyApiThemesService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiThemesService; },
/* harmony export */   "ShopifyTdaInstagramComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyTdaInstagramComponent; },
/* harmony export */   "ShopifyTdaInstagramScrollbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyTdaInstagramScrollbarComponent; },
/* harmony export */   "Socket": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.Socket; },
/* harmony export */   "io": function() { return /* reexport safe */ _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__.io; },
/* harmony export */   "shopifyTDAModule": function() { return /* reexport safe */ _shopify_tda_module_js__WEBPACK_IMPORTED_MODULE_6__.shopifyTDAModule; }
/* harmony export */ });
/* harmony import */ var _dependencies_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dependencies/index.js */ "../../packages/shopify-tda/src/dependencies/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify-tda/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify-tda/src/formatters/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/shopify-tda/src/interfaces/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify-tda/src/components/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify-tda/src/services/index.ts");
/* harmony import */ var _shopify_tda_module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shopify-tda.module.js */ "../../packages/shopify-tda/src/shopify-tda.module.ts");








/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/base.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/base.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/index.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/index.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/base.ts");
/* harmony import */ var _pages_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts");
/* harmony import */ var _post_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./post.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/post.ts");
/* harmony import */ var _user_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./user.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/user.ts");





/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/pages.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/post.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/post.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/facebook-api/user.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/facebook-api/user.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/index.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/index.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _facebook_api_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./facebook-api/index.js */ "../../packages/shopify-tda/src/interfaces/facebook-api/index.ts");
/* harmony import */ var _instagram_api_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instagram-api/index.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/index.ts");
/* harmony import */ var _shopify_api_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shopify-api/index.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/index.ts");




/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/data.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/data.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/index.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/index.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/data.ts");
/* harmony import */ var _media_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./media.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/media.ts");
/* harmony import */ var _paging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paging.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts");
/* harmony import */ var _media_response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./media-response.js */ "../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts");





/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/media-response.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/media.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/media.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts":
/*!*************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/instagram-api/paging.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/article.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/article.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts":
/*!*****************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/base.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/base.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts":
/*!*********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/index.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/index.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _article_image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./article-image.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/article-image.ts");
/* harmony import */ var _article_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./article.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/article.ts");
/* harmony import */ var _asset_locale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./asset-locale.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/asset-locale.ts");
/* harmony import */ var _asset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./asset.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/asset.ts");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/base.ts");
/* harmony import */ var _blog_commentable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blog-commentable.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/blog-commentable.ts");
/* harmony import */ var _blog_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blog.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/blog.ts");
/* harmony import */ var _metafield_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metafield.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts");
/* harmony import */ var _product_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product.ts");
/* harmony import */ var _product_image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./product_image.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts");
/* harmony import */ var _product_option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./product_option.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts");
/* harmony import */ var _product_variant_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./product_variant.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts");
/* harmony import */ var _theme_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./theme.js */ "../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts");














/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts":
/*!**************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/metafield.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_image.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts":
/*!*******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_option.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts":
/*!********************************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/product_variant.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify-tda/src/interfaces/shopify-api/theme.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify-tda/src/services/base.service.ts":
/*!***************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/base.service.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* binding */ BaseApiService; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/shopify-tda/src/constants/index.ts");

class BaseApiService {
  constructor() {
    var _host;

    let host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.BASE_HOST_URL;

    if ((_host = host) !== null && _host !== void 0 && _host.endsWith("/")) {
      host = host.substring(0, host.length - 1);
    }

    this.host = host;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/facebook-api.service.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/facebook-api.service.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FacebookApiService": function() { return /* binding */ FacebookApiService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class FacebookApiService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/facebook/api";
  }

  static getSingleton(host) {
    if (FacebookApiService.instance) {
      return FacebookApiService.instance;
    }

    FacebookApiService.instance = new FacebookApiService(host);
    return FacebookApiService.instance;
  }
  /**
   * Retrieves your facebook user pages your user has access to
   */


  async pages() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/user/pages"));
    const pages = res.body;
    console.debug("[services:FacebookApiService] pages", pages);
    return pages;
  }

  async posts() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/posts/user"));
    const posts = res.body;
    console.debug("[services:FacebookApiService] posts", posts);
    return posts;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/index.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify-tda/src/services/index.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseApiService": function() { return /* reexport safe */ _base_service_js__WEBPACK_IMPORTED_MODULE_0__.BaseApiService; },
/* harmony export */   "FacebookApiService": function() { return /* reexport safe */ _facebook_api_service_js__WEBPACK_IMPORTED_MODULE_1__.FacebookApiService; },
/* harmony export */   "InstagramApiService": function() { return /* reexport safe */ _instagram_api_service_js__WEBPACK_IMPORTED_MODULE_2__.InstagramApiService; },
/* harmony export */   "LocalesService": function() { return /* reexport safe */ _locales_service_js__WEBPACK_IMPORTED_MODULE_3__.LocalesService; },
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _module_service_js__WEBPACK_IMPORTED_MODULE_4__.ModuleService; },
/* harmony export */   "ShopifyApiArticleService": function() { return /* reexport safe */ _shopify_api_article_service_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyApiArticleService; },
/* harmony export */   "ShopifyApiBlogsService": function() { return /* reexport safe */ _shopify_api_blog_service_js__WEBPACK_IMPORTED_MODULE_6__.ShopifyApiBlogsService; },
/* harmony export */   "ShopifyApiProductService": function() { return /* reexport safe */ _shopify_api_product_service_js__WEBPACK_IMPORTED_MODULE_7__.ShopifyApiProductService; },
/* harmony export */   "ShopifyApiThemesService": function() { return /* reexport safe */ _shopify_api_theme_service_js__WEBPACK_IMPORTED_MODULE_8__.ShopifyApiThemesService; }
/* harmony export */ });
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");
/* harmony import */ var _facebook_api_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./facebook-api.service.js */ "../../packages/shopify-tda/src/services/facebook-api.service.ts");
/* harmony import */ var _instagram_api_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instagram-api.service.js */ "../../packages/shopify-tda/src/services/instagram-api.service.ts");
/* harmony import */ var _locales_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales.service.js */ "../../packages/shopify-tda/src/services/locales.service.ts");
/* harmony import */ var _module_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./module.service.js */ "../../packages/shopify-tda/src/services/module.service.ts");
/* harmony import */ var _shopify_api_article_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify-api-article.service.js */ "../../packages/shopify-tda/src/services/shopify-api-article.service.ts");
/* harmony import */ var _shopify_api_blog_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shopify-api-blog.service.js */ "../../packages/shopify-tda/src/services/shopify-api-blog.service.ts");
/* harmony import */ var _shopify_api_product_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shopify-api-product.service.js */ "../../packages/shopify-tda/src/services/shopify-api-product.service.ts");
/* harmony import */ var _shopify_api_theme_service_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shopify-api-theme.service.js */ "../../packages/shopify-tda/src/services/shopify-api-theme.service.ts");










/***/ }),

/***/ "../../packages/shopify-tda/src/services/instagram-api.service.ts":
/*!************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/instagram-api.service.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstagramApiService": function() { return /* binding */ InstagramApiService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class InstagramApiService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/instagram/api";
  }

  static getSingleton(host) {
    if (InstagramApiService.instance) {
      return InstagramApiService.instance;
    }

    InstagramApiService.instance = new InstagramApiService(host);
    return InstagramApiService.instance;
  }

  async media(instagramBusinessAccountID) {
    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "caption,comments_count,is_comment_enabled,like_count,media_type,media_url,permalink,timestamp,children{media_type,media_url}";
    const url = "".concat(this.baseUrl, "/media/").concat(instagramBusinessAccountID);
    const data = {
      fields,
      limit
    };

    if (window.Shopify.shop) {
      data.shop = window.Shopify.shop;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url, data);
    return res.body;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/locales.service.ts":
/*!******************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/locales.service.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalesService": function() { return /* binding */ LocalesService; }
/* harmony export */ });
/* harmony import */ var _ribajs_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/i18n */ "../../packages/i18n/src/index.ts");
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ "../../packages/shopify-tda/src/constants/index.ts");


class LocalesService extends _ribajs_i18n__WEBPACK_IMPORTED_MODULE_0__.LocalesRestService {
  static getInstance() {
    return this.instance;
  }

  constructor() {
    let baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.BASE_HOST_URL;
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let url = "".concat(baseUrl, "/shopify/api/themes/").concat(window.Shopify.theme.id, "/locales");

    if (window.Shopify.shop) {
      url += "?shop=".concat(window.Shopify.shop);
    }

    super(url, doNotTranslateDefaultLanguage, showMissingTranslation);

    if (LocalesService.instance) {
      return LocalesService.instance;
    }

    LocalesService.instance = this;
  }

  static getSingleton() {
    let baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.BASE_HOST_URL;
    let doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (LocalesService.instance) {
      return LocalesService.instance;
    }

    LocalesService.instance = new LocalesService(baseUrl, doNotTranslateDefaultLanguage, showMissingTranslation);
    return LocalesService.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/module.service.ts":
/*!*****************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/module.service.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* binding */ ModuleService; }
/* harmony export */ });
class ModuleService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ModuleService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ModuleService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-article.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-article.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiArticleService": function() { return /* binding */ ShopifyApiArticleService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiArticleService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiArticleService.instance) {
      return ShopifyApiArticleService.instance;
    }

    ShopifyApiArticleService.instance = new ShopifyApiArticleService(host);
    return ShopifyApiArticleService.instance;
  }
  /**
   * List articles
   * @param blogId
   */


  async list(blogId) {
    return _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/").concat(blogId, "/articles")).then(res => {
      console.debug("[ShopifyApiArticleService] articles", res.body);
      return res.body;
    });
  }
  /**
   * Get article
   * @param blogId
   * @param articleId
   */


  async get(blogId, articleId) {
    return _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl, "/").concat(blogId, "/articles/").concat(articleId)).then(res => {
      console.debug("[ShopifyApiArticleService] get article", res);
      return res.body;
    });
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-blog.service.ts":
/*!***************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-blog.service.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiBlogsService": function() { return /* binding */ ShopifyApiBlogsService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiBlogsService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiBlogsService.instance) {
      return ShopifyApiBlogsService.instance;
    }

    ShopifyApiBlogsService.instance = new ShopifyApiBlogsService(host);
    return ShopifyApiBlogsService.instance;
  }
  /**
   * List blogs
   */


  async list() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("".concat(this.baseUrl));
    const blogs = res.body;
    console.debug("[ShopifyApiBlogsService] blogs", blogs);
    return blogs;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-product.service.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-product.service.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiProductService": function() { return /* binding */ ShopifyApiProductService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _dependencies_socket_io_client_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dependencies/socket-io-client.js */ "../../packages/shopify-tda/src/dependencies/socket-io-client.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");





class ShopifyApiProductService extends _base_service_js__WEBPACK_IMPORTED_MODULE_4__.BaseApiService {
  constructor(host) {
    var _this$socket, _this$socket2, _this$socket3;

    super(host);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("shopify-api-product-service"));

    this.on = this.events.on.bind(this.events);
    this.once = this.events.once.bind(this.events);
    this.baseUrl = "".concat(this.host, "/shopify/api/products");
    console.debug("[ShopifyApiProductService] constructor");
    this.socket = (0,_dependencies_socket_io_client_js__WEBPACK_IMPORTED_MODULE_3__.io)({
      path: "/socket.io/shopify/api/products",
      transports: ["websocket", "polling"]
    });
    (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.on("connect", () => {
      console.debug("[ShopifyApiProductService] connect");
      this.events.trigger("connect");
    });
    (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.on("exception", data => {
      console.error("exception", data);
      this.events.trigger("exception", data);
    });
    (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.on("all", product => {
      console.debug("[ShopifyApiProductService] all", product);
      this.events.trigger("all", product);
    });
  }

  static getSingleton(host) {
    if (ShopifyApiProductService.instance) {
      return ShopifyApiProductService.instance;
    }

    ShopifyApiProductService.instance = new ShopifyApiProductService(host);
    return ShopifyApiProductService.instance;
  }
  /**
   * Retrieves a list of products directly from shopify.
   * @param limit
   */


  async list(limit) {
    let url = "".concat(this.baseUrl);

    if (limit) {
      url += "?limit=" + limit;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON(url);
    console.debug("[ShopifyApiProductService] products", res.body);
    return res.body;
  }

  async all() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.socket) {
      this.socket.emit("all", options);
    }
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/services/shopify-api-theme.service.ts":
/*!****************************************************************************!*\
  !*** ../../packages/shopify-tda/src/services/shopify-api-theme.service.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyApiThemesService": function() { return /* binding */ ShopifyApiThemesService; }
/* harmony export */ });
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _base_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.service.js */ "../../packages/shopify-tda/src/services/base.service.ts");


class ShopifyApiThemesService extends _base_service_js__WEBPACK_IMPORTED_MODULE_1__.BaseApiService {
  constructor(host) {
    super(host);
    this.baseUrl = this.host + "/shopify/api/blogs";
  }

  static getSingleton(host) {
    if (ShopifyApiThemesService.instance) {
      return ShopifyApiThemesService.instance;
    }

    ShopifyApiThemesService.instance = new ShopifyApiThemesService(host);
    return ShopifyApiThemesService.instance;
  }
  /**
   * List themes
   */


  async list() {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("/shopify/api/themes");
    const themes = res.body;
    console.debug("[ShopifyApiThemesService] themes", themes);
    return themes;
  }

  async locales(id, propertyPath) {
    let url = "/shopify/api/themes/".concat(id, "/locales");

    if (propertyPath) {
      url += "/" + propertyPath;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url);
    const locales = res.body;
    console.debug("[ShopifyApiThemesService] locales", locales);
    return locales;
  }

  async assets(id, key) {
    let url = "/shopify/api/themes/".concat(id, "/assets");

    if (key) {
      url += "/" + key;
    }

    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON(url);
    const assets = res.body;
    console.debug("[ShopifyApiThemesService] assets", assets);
    return assets;
  }

  async assetLocalesList(id) {
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_0__.HttpService.getJSON("/shopify/api/themes/".concat(id, "/locales/list"));
    const assets = res.body;
    console.debug("[ShopifyApiThemesService] assets", assets);
    return assets;
  }

}

/***/ }),

/***/ "../../packages/shopify-tda/src/shopify-tda.module.ts":
/*!************************************************************!*\
  !*** ../../packages/shopify-tda/src/shopify-tda.module.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shopifyTDAModule": function() { return /* binding */ shopifyTDAModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify-tda/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify-tda/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify-tda/src/services/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify-tda/src/components/index.ts");




const shopifyTDAModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  services: _services_index_js__WEBPACK_IMPORTED_MODULE_2__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  components: _components_index_js__WEBPACK_IMPORTED_MODULE_3__,

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ModuleService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/shopify/src/binders/index.ts":
/*!***************************************************!*\
  !*** ../../packages/shopify/src/binders/index.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartCountBinder": function() { return /* reexport safe */ _shopify_cart_count_binder_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyCartCountBinder; },
/* harmony export */   "ShopifyImgBinder": function() { return /* reexport safe */ _shopify_img_binder_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyImgBinder; }
/* harmony export */ });
/* harmony import */ var _shopify_cart_count_binder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shopify-cart-count.binder.js */ "../../packages/shopify/src/binders/shopify-cart-count.binder.ts");
/* harmony import */ var _shopify_img_binder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shopify-img.binder.js */ "../../packages/shopify/src/binders/shopify-img.binder.ts");



/***/ }),

/***/ "../../packages/shopify/src/binders/shopify-cart-count.binder.ts":
/*!***********************************************************************!*\
  !*** ../../packages/shopify/src/binders/shopify-cart-count.binder.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartCountBinder": function() { return /* binding */ ShopifyCartCountBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/index.js */ "../../packages/shopify/src/services/index.ts");




/**
 * Sets the shopify items count
 */
class ShopifyCartCountBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onCartRequestComplete", this._onCartRequestComplete.bind(this));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onCartRequestChanged", this._onCartRequestChanged.bind(this));
  }

  _onCartRequestComplete(cart) {
    this.el.textContent = String(cart.item_count);
  }

  _onCartRequestChanged(cart) {
    this.el.textContent = String(cart.item_count);
  }

  routine() {//
  }

  bind() {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:changed", this.onCartRequestChanged);
  }

  unbind() {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:changed", this.onCartRequestChanged);
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartCountBinder, "key", "shopify-cart-count");

/***/ }),

/***/ "../../packages/shopify/src/binders/shopify-img.binder.ts":
/*!****************************************************************!*\
  !*** ../../packages/shopify/src/binders/shopify-img.binder.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyImgBinder": function() { return /* binding */ ShopifyImgBinder; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/index.js */ "../../packages/utils/src/index.ts");
/* harmony import */ var _formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../formatters/img-url.formatter.js */ "../../packages/shopify/src/formatters/img-url.formatter.ts");




const PX_OFFSET = 10;
const OVERWRITE_ORIGINAL_SRC = true;
/**
 * shopify-img
 * Loads an shopify image with the exact size for the current `img` element
 * without the need to get the right size manually over the `img_url` filter / formatter.
 * The image source path is set by the `srcset` and `sizes` attributes to make them responsive.
 */

class ShopifyImgBinder extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Binder {
  constructor() {
    super(...arguments);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "oldImageWidth", (PX_OFFSET + 1) * -1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "onResize", (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._onResize.bind(this)));
  }

  setSrcset(width) {
    // Max width
    if (width > 5760) {
      width = 5760;
    }

    let currentSrcset = this.el.srcset;
    let currentSizes = this.el.sizes;

    if (!_formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read) {
      throw new Error("Shopify imgUrlFormatter read method is missing!");
    }

    const vw = (0,_ribajs_utils_src_index_js__WEBPACK_IMPORTED_MODULE_2__.getViewportDimensions)().w;
    const filterScale = Math.round(window.devicePixelRatio || 1);
    const filterSize = width + "x";
    const newSrc = _formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read(this.initialSrc, filterSize, filterScale, undefined, undefined, this.el);

    if (typeof currentSrcset === "string" && currentSrcset.length > 0) {
      currentSrcset = currentSrcset + ", ";
    } else {
      currentSrcset = "";
    }

    if (typeof currentSizes === "string" && currentSizes.length > 0) {
      currentSizes = currentSizes + ", ";
    } else {
      currentSizes = "";
    }

    const newSrcset = "".concat(currentSrcset).concat(newSrc, " ").concat(width, "w");
    const newSizes = "".concat(currentSizes, " (width: ").concat(vw, "px) ").concat(width, "px");
    this.el.srcset = newSrcset;
    this.el.sizes = newSizes;

    if (OVERWRITE_ORIGINAL_SRC) {
      this.el.src = newSrc;
    }
  }

  _onResize() {
    const currentImageWidth = this.el.offsetWidth;
    const currentSrcset = this.el.srcset;

    if (this.oldImageWidth + PX_OFFSET < currentImageWidth && currentImageWidth > 0 && !(currentSrcset.indexOf("".concat(currentImageWidth, "w")) !== -1)) {
      this.setSrcset(currentImageWidth);
      this.oldImageWidth = currentImageWidth;
    }
  }

  bind(el) {
    this.initialSrc = el.src;

    if (window.ResizeObserver) {
      this.resizeObserver = new ResizeObserver(entries => {
        entries.forEach(() => {
          this.onResize();
        });
      });
      this.resizeObserver.observe(el);
    } else {
      window.addEventListener("resize", this.onResize);
    }
  }

  unbind(el) {
    window.removeEventListener("resize", this.onResize);

    if (this.resizeObserver && this.resizeObserver.unobserve) {
      this.resizeObserver.unobserve(el);
    }
  }

  routine(el, src) {
    this.el = el;

    if (!_formatters_img_url_formatter_js__WEBPACK_IMPORTED_MODULE_3__.imgUrlFormatter.read) {
      throw new Error("Shopify imgUrlFormatter read method is missing!");
    }

    if (src) {
      this._onResize();

      setTimeout(this.onResize, 200); // Set src attribute if it is not set statically

      if (!this.initialSrc || typeof this.initialSrc !== "string" || this.initialSrc.length <= 0) {
        this.initialSrc = src;
        el.src = src;
      }
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyImgBinder, "key", "shopify-img");

/***/ }),

/***/ "../../packages/shopify/src/components/addresses-form/addresses-form.component.ts":
/*!****************************************************************************************!*\
  !*** ../../packages/shopify/src/components/addresses-form/addresses-form.component.ts ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyAddressesComponent": function() { return /* binding */ ShopifyAddressesComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _addresses_form_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addresses-form.component.html */ "../../packages/shopify/src/components/addresses-form/addresses-form.component.html");



 // TODO move to general validation component class we can extend from

class ShopifyAddressesComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "editAddressForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "createAddressForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      createAddress: {
        validation: {
          valid: false
        }
      },
      showFormId: "",
      editAddress: {},
      edit: this.edit,
      create: this.create,
      delete: this.delete
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyAddressesComponent.observedAttributes);
  }

  edit(id, event) {
    const form = this.querySelector("form[action=\"/account/addresses/".concat(id, "]"));

    if (!form) {
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(form, this.scope.editAddress[id].validation);

    if (this.scope.editAddress[id].validation.valid) {
      form.submit();
    }
  }
  /**
   * Submit an new address
   */


  create(event) {
    if (!this.createAddressForm) {
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.createAddressForm, this.scope.createAddress.validation);

    if (this.scope.createAddress.validation.valid) {
      this.createAddressForm.submit();
    }
  } // https://help.shopify.com/en/api/reference/customers/customer_address
  // /account/addresses/{id}


  async delete(id) {
    try {
      await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService["delete"]("/account/addresses/".concat(id), {}, "json");
      location.reload();
    } catch (error) {
      console.error("delete error", error);
      location.reload();
    }
  }

  initValidation() {
    this.editAddressForm = this.querySelector('form[action^="/account/addresses/"]');
    this.editAddressForm.attr("novalidate", "");
    this.editAddressForm.addClass("needs-validation");
    this.createAddressForm = this.querySelector('form[action="/account/addresses"]');
    this.createAddressForm.attr("novalidate", "");
    this.createAddressForm.addClass("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    this.initValidation();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _addresses_form_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyAddressesComponent, "tagName", "shopify-addresses-form");

/***/ }),

/***/ "../../packages/shopify/src/components/cart-button/cart-button.component.ts":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-button/cart-button.component.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* binding */ ShopifyCartButtonComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/url */ "../../packages/utils/src/url.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _cart_button_component_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cart-button.component.html */ "../../packages/shopify/src/components/cart-button/cart-button.component.html");







class ShopifyCartButtonComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  set cart(cart) {
    this.scope.cartItemCount = cart.item_count;
    this.scope.startAddAnimation = true;
    setTimeout(() => {
      this.scope.startAddAnimation = false;
    }, 3000);
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      cartItemCount: 0,
      toggle: this.toggle,
      pending: false,
      startAddAnimation: false
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartButtonComponent.observedAttributes);
  }

  toggle(event) {
    event.preventDefault();
    event.stopPropagation();

    if ((0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_4__.onRoute)(ShopifyCartButtonComponent.cartUrl)) {
      window.history.back();
    } else {
      if (ShopifyCartButtonComponent.cartUrl) {
        const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

        if (!pjax) {
          window.location.href = ShopifyCartButtonComponent.cartUrl;
        } else {
          pjax.goTo(ShopifyCartButtonComponent.cartUrl, false);
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();
    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", () => {
      this.scope.pending = true;
    });
    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", cart => {
      if (cart) {
        this.cart = cart;
      }

      this.scope.pending = false;
    });
  }

  async afterBind() {
    await super.afterBind();
    return _ribajs_shopify__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.get().catch(error => {
      console.error("[ShopifyCartButtonComponent]", error);
    });
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_5__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_button_component_html__WEBPACK_IMPORTED_MODULE_6__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartButtonComponent, "tagName", "shopify-cart-button");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartButtonComponent, "cartUrl", "/cart");

/***/ }),

/***/ "../../packages/shopify/src/components/cart-item/cart-item.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-item/cart-item.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartItemComponent": function() { return /* binding */ ShopifyCartItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _cart_item_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cart-item.component.html */ "../../packages/shopify/src/components/cart-item/cart-item.component.html");





class ShopifyCartItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["id", "title", "price", "line-price", "line-number", "quantity", "sku", "grams", "vendor", "properties", "gift-card", "url", "image", "handle", "requires-shipping", "product-title", "product-description", "product-type", "product-id", "variant-title", "variant-options", "variant-id", "key"];
  }

  requiredAttributes() {
    return ["id", "variantId", "quantity"];
  }

  getScopeDefaults() {
    return {
      id: 0,
      productId: 0,
      variantId: 0,
      properties: [],
      quantity: 0,
      remove: this.remove,
      increase: this.increase,
      decrease: this.decrease,
      onInputQuantityChanged: this.onInputQuantityChanged,
      pending: false
    };
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getScopeDefaults());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartItemComponent.observedAttributes);
  }

  remove() {
    this.debug("decrease", this.scope.variantId);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, 0).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a quantity increase + button in the template
   */


  increase() {
    this.debug("increase", this.scope.quantity);
    this.scope.quantity++;
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a quantity decrease - button in the template
   */


  decrease() {
    this.debug("decrease", this.scope.quantity);
    this.scope.quantity--;

    if (this.scope.quantity < 0) {
      this.scope.quantity = 0;
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a changeable quantity input field
   * @example
   * ```html
   *  <input type="number" rv-on-change="onInputQuantityChanged" rv-value="quantity" />
   * ```
   */


  onInputQuantityChanged() {
    this.debug("onInputQuantityChanged");
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.change(this.scope.variantId, this.scope.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  onCartUpdate(cart) {
    const item = this.getItemFromCart(cart);

    if (!item) {
      this.debug("Item not found, probably item was removed.");
      super.remove(); // Remove element

      return;
    }

    this.debug("update item from cart"); // this.scope.id = item.id;

    this.scope.title = item.title;
    this.scope.price = item.price;
    this.scope.linePrice = item.line_price;
    this.scope.lineNumber = item.line_number;
    this.scope.quantity = item.quantity;
    this.scope.sku = item.sku;
    this.scope.grams = item.grams;
    this.scope.vendor = item.vendor;
    this.scope.properties = item.properties;
    this.scope.giftCard = item.gift_card;
    this.scope.url = item.url;
    this.scope.image = item.image;
    this.scope.handle = item.handle;
    this.scope.requiresShipping = item.requires_shipping;
    this.scope.productTitle = item.product_title;
    this.scope.productDescription = item.product_description;
    this.scope.productType = item.product_type;
    this.scope.productId = item.product_id;
    this.scope.variantTitle = item.variant_title;
    this.scope.variantOptions = item.variant_options; // this.scope.variantId = item.variant_id;

    this.scope.key = item.key;

    if (this.scope.quantity === 0) {
      super.remove(); // Remove element

      return;
    }
  }

  getItemFromCart(cart) {
    for (const item of cart.items) {
      // Compare key
      if (item.key && this.scope.key) {
        if (item.key === this.scope.key) {
          return item;
        }
      } else {
        // Compare id and variantId
        if (item.id === this.scope.id && item.variant_id === this.scope.variantId) {
          return item;
        }
      }
    }

    return null;
  }

  async beforeBind() {
    await super.beforeBind(); // const cart = await ShopifyCartService.get();
  }

  onCartRequestStart() {
    this.scope.pending = true;
  }

  onCartRequestComplete(cart) {
    this.debug("ShopifyCart:request:complete", cart);
    this.onCartUpdate(cart);
    this.scope.pending = false;
    return cart;
  }

  async afterBind() {
    this.debug("afterBind", this.scope);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete, this);
    const cart = await _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.get();
    this.onCartUpdate(cart);
    await super.afterBind();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_item_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartItemComponent, "tagName", "shopify-cart-item");

/***/ }),

/***/ "../../packages/shopify/src/components/cart/cart.component.ts":
/*!********************************************************************!*\
  !*** ../../packages/shopify/src/components/cart/cart.component.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartComponent": function() { return /* binding */ ShopifyCartComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _cart_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cart.component.html */ "../../packages/shopify/src/components/cart/cart.component.html");





class ShopifyCartComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["shipping-address", "estimate-shipping-rate"];
  }

  requiredAttributes() {
    return [];
  }

  getScopeDefaults() {
    return {
      cart: _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.cart,
      shippingAddress: null,
      estimateShippingRate: false,
      shippingRates: [],
      removeItem: this.removeItem,
      increaseItem: this.increaseItem,
      decreaseItem: this.decreaseItem,
      getItem: this.getItem,
      onItemQuantityChanged: this.onItemQuantityChanged,
      pending: false
    };
  }

  set cart(cart) {
    // TODO check if cart values are changed
    this.scope.cart = cart;

    if (this.scope.shippingAddress && this.scope.estimateShippingRate) {
      _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.getShippingRates(this.scope.shippingAddress, true, {
        triggerOnChange: false,
        triggerOnComplete: false,
        triggerOnStart: false
      }).then(shippingRates => {
        this.scope.shippingRates = shippingRates;
      });
    }
  }

  get cart() {
    return this.scope.cart || null;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", this.getScopeDefaults());
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCartComponent.observedAttributes);
  }

  removeItem(lineItem) {
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, 0).then(cart => {
      // this.cart = cart;
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  increaseItem(lineItem) {
    lineItem.quantity++;
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      // this.cart = cart;
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }

  decreaseItem(lineItem) {
    lineItem.quantity--;

    if (lineItem.quantity < 0) {
      lineItem.quantity = 0;
    }

    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Can be used for a changeable quantity input field
   * @example
   * ```html
   *  <input type="number" rv-on-change="onItemQuantityChanged" rv-value="quantity" />
   * ```
   */


  onItemQuantityChanged(lineItem, event, scope, htmlEl) {
    if (!htmlEl) {
      console.warn("Input element not found");
      return;
    }

    const newValue = Number((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.getInputValue)(htmlEl));

    if (newValue === lineItem.quantity) {
      return;
    }

    lineItem.quantity = newValue;
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.change(lineItem.variant_id, lineItem.quantity).then(cart => {
      this.debug("ShopifyCartService changed", cart);
      return cart;
    }).catch(error => {
      console.error(error);
    });
  }
  /**
   * Get line item by id
   * @param id
   */


  getItem(id) {
    var _this$scope$cart, _this$scope$cart2;

    id = Number(id);
    const item = ((_this$scope$cart = this.scope.cart) === null || _this$scope$cart === void 0 ? void 0 : _this$scope$cart.items.find(item => Number(item.id) === id)) || null;
    this.debug("getItem", id, item, (_this$scope$cart2 = this.scope.cart) === null || _this$scope$cart2 === void 0 ? void 0 : _this$scope$cart2.items);
    return item;
  }

  onCartRequestStart() {
    this.scope.pending = true;
  }

  onCartRequestComplete(cart) {
    if (cart) {
      this.cart = cart;
    }

    this.scope.pending = false;
  }

  async beforeBind() {
    await super.beforeBind();
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.on("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:start", this.onCartRequestStart, this);
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.shopifyCartEventDispatcher.off("ShopifyCart:request:complete", this.onCartRequestComplete, this);
  }

  async afterBind() {
    this.debug("afterBind", this.scope);

    if (!this.cart) {
      this.cart = await _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.get();
    }

    await super.afterBind();
  }

  template() {
    // Only set the component template if there no childs already
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _cart_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartComponent, "tagName", "shopify-cart");

/***/ }),

/***/ "../../packages/shopify/src/components/comments-form/comments-form.component.ts":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/comments-form/comments-form.component.ts ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* binding */ ShopifyCommentsFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _comments_form_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comments-form.component.html */ "../../packages/shopify/src/components/comments-form/comments-form.component.html");




class ShopifyCommentsFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "newCommentForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        customer: {
          email: "",
          password: ""
        }
      },
      loginCustomer: {
        validation: {
          valid: false
        }
      },
      createCustomer: {
        validation: {
          valid: false
        }
      },
      recoverCustomer: {
        validation: {
          valid: false
        }
      },
      post: this.post
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyCommentsFormComponent.observedAttributes);
  }
  /**
   * Post comment
   */


  post(event) {
    if (!this.newCommentForm) {
      console.error("No comment form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.newCommentForm, this.scope.loginCustomer.validation);

    if (this.scope.loginCustomer.validation.valid) {
      this.newCommentForm.submit();
    }
  }

  initValidation() {
    this.newCommentForm = this.querySelector("#comment_form");
    this.newCommentForm.setAttribute("novalidate", "");
    this.newCommentForm.classList.add("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    this.initValidation();
    await super.afterBind();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _comments_form_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCommentsFormComponent, "tagName", "shopify-comments-form");

/***/ }),

/***/ "../../packages/shopify/src/components/contact-form/contact-form.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/contact-form/contact-form.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyContactFormComponent": function() { return /* binding */ ShopifyContactFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _contact_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contact-form.component.html */ "../../packages/shopify/src/components/contact-form/contact-form.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");




 // TODO move to general validation component class we can extend from

class ShopifyContactFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        fields: {
          firstName: "",
          lastName: "",
          fullName: "",
          company: "",
          phone: "",
          email: "",
          message: ""
        },
        valid: false,
        error: undefined
      },

      /** send form function */
      send: this.send,

      /** select all text function */
      selectAll: this.selectAll
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyContactFormComponent.observedAttributes);
  }
  /**
   * Send the contact form using a form submit request with best shopify form support
   */


  send(event) {
    for (const key in this.scope.form.fields) {
      if (this.scope.form.fields[key]) {
        this.scope.form.fields[key] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_4__.stripHtml)(this.scope.form.fields[key]);
      }
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();

    if (!this.form) {
      return false;
    }

    this.validate(this.form, this.scope.form);

    if (this.scope.form.valid) {
      this.form.submit();
    }
  }

  selectAll(event, scope, eventEl) {
    (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.selectAll)(eventEl);
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    validationScope.error = form.validationMessage;
    form.classList.add("was-validated");
  }

  async beforeBind() {
    this.form = this.getElementsByTagName("form")[0]; // For custom style form validation, see https://getbootstrap.com/docs/4.1/components/forms/#custom-styles

    this.form.classList.add("needs-validation");
    this.form.setAttribute("novalidate", "");
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _contact_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyContactFormComponent, "tagName", "shopify-contact-form");

/***/ }),

/***/ "../../packages/shopify/src/components/debug-bar/debug-bar.component.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/debug-bar/debug-bar.component.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* binding */ ShopifyDebugBarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _debug_bar_component_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./debug-bar.component.html */ "../../packages/shopify/src/components/debug-bar/debug-bar.component.html");




class ShopifyDebugBarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["theme-name"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      hasPreviewBar: false,
      hasAdminBar: false,
      toggleBar: this.toggleBar,
      hide: this.hide,
      hidden: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "previewBar", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adminBar", null);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyDebugBarComponent.observedAttributes);
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    this.debug("attributeChangedCallback", name, oldValue, newValue, namespace); // injects the changed attributes to scope

    super.attributeChangedCallback(name, oldValue, newValue, namespace);
  }

  hide() {
    this.scope.hidden = !this.scope.hidden;
  }

  toggleBar() {
    let forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (this.previewBar) {
      if (forceHide === true || (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.elementIsVisible)(this.previewBar)) {
        // this.debug('hide previewbar');
        this.previewBar.setAttribute("hidden", ""); // this.$previewBar.hide();
      } else {
        // this.debug('show previewbar');
        this.previewBar.removeAttribute("hidden"); // this.$previewBar.show();
      }
    }

    if (this.adminBar) {
      if (forceHide === true || (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.elementIsVisible)(this.adminBar)) {
        // this.debug('hide adminbar');
        this.adminBar.setAttribute("hidden", ""); // this.$adminBar.hide();
      } else {
        // this.debug('show adminbar');
        this.adminBar.removeAttribute("hidden"); // this.$adminBar.show();
      }
    }
  }

  async beforeBind() {
    // this.debug('beforeBind');
    this.previewBar = document.getElementById("preview-bar-iframe");
    this.adminBar = document.getElementById("admin-bar-iframe");

    if (this.previewBar) {
      this.scope.hasPreviewBar = true;
      this.toggleBar(true);
    } else {
      this.previewBar = null;
      this.scope.hasPreviewBar = false;
    }

    if (this.adminBar) {
      this.scope.hasAdminBar = true;
      this.toggleBar(true);
    } else {
      this.adminBar = null;
      this.scope.hasAdminBar = false;
    }
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_2__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _debug_bar_component_html__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyDebugBarComponent, "tagName", "shopify-debug-bar");

/***/ }),

/***/ "../../packages/shopify/src/components/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/components/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyAddressesComponent": function() { return /* reexport safe */ _addresses_form_addresses_form_component_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyAddressesComponent; },
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* reexport safe */ _cart_button_cart_button_component_js__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartButtonComponent; },
/* harmony export */   "ShopifyCartComponent": function() { return /* reexport safe */ _cart_cart_component_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyCartComponent; },
/* harmony export */   "ShopifyCartItemComponent": function() { return /* reexport safe */ _cart_item_cart_item_component_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartItemComponent; },
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* reexport safe */ _comments_form_comments_form_component_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyCommentsFormComponent; },
/* harmony export */   "ShopifyContactFormComponent": function() { return /* reexport safe */ _contact_form_contact_form_component_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyContactFormComponent; },
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* reexport safe */ _debug_bar_debug_bar_component_js__WEBPACK_IMPORTED_MODULE_6__.ShopifyDebugBarComponent; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _linklist_linklist_component_js__WEBPACK_IMPORTED_MODULE_7__.ShopifyLinklistComponent; },
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* reexport safe */ _login_form_login_form_component_js__WEBPACK_IMPORTED_MODULE_8__.ShopifyLoginFormComponent; },
/* harmony export */   "ShopifyProductComponent": function() { return /* reexport safe */ _product_product_component_js__WEBPACK_IMPORTED_MODULE_9__.ShopifyProductComponent; },
/* harmony export */   "ShopifyProductItemComponent": function() { return /* reexport safe */ _product_item_product_item_component_js__WEBPACK_IMPORTED_MODULE_10__.ShopifyProductItemComponent; },
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* reexport safe */ _product_scrollbar_product_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_11__.ShopifyProductScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _addresses_form_addresses_form_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addresses-form/addresses-form.component.js */ "../../packages/shopify/src/components/addresses-form/addresses-form.component.ts");
/* harmony import */ var _cart_cart_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cart/cart.component.js */ "../../packages/shopify/src/components/cart/cart.component.ts");
/* harmony import */ var _cart_button_cart_button_component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cart-button/cart-button.component.js */ "../../packages/shopify/src/components/cart-button/cart-button.component.ts");
/* harmony import */ var _cart_item_cart_item_component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cart-item/cart-item.component.js */ "../../packages/shopify/src/components/cart-item/cart-item.component.ts");
/* harmony import */ var _comments_form_comments_form_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comments-form/comments-form.component.js */ "../../packages/shopify/src/components/comments-form/comments-form.component.ts");
/* harmony import */ var _contact_form_contact_form_component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./contact-form/contact-form.component.js */ "../../packages/shopify/src/components/contact-form/contact-form.component.ts");
/* harmony import */ var _debug_bar_debug_bar_component_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./debug-bar/debug-bar.component.js */ "../../packages/shopify/src/components/debug-bar/debug-bar.component.ts");
/* harmony import */ var _linklist_linklist_component_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linklist/linklist.component.js */ "../../packages/shopify/src/components/linklist/linklist.component.ts");
/* harmony import */ var _login_form_login_form_component_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./login-form/login-form.component.js */ "../../packages/shopify/src/components/login-form/login-form.component.ts");
/* harmony import */ var _product_product_component_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./product/product.component.js */ "../../packages/shopify/src/components/product/product.component.ts");
/* harmony import */ var _product_item_product_item_component_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./product-item/product-item.component.js */ "../../packages/shopify/src/components/product-item/product-item.component.ts");
/* harmony import */ var _product_scrollbar_product_scrollbar_component_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./product-scrollbar/product-scrollbar.component.js */ "../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts");
// export * from './shopify-section.component';













/***/ }),

/***/ "../../packages/shopify/src/components/linklist/linklist.component.ts":
/*!****************************************************************************!*\
  !*** ../../packages/shopify/src/components/linklist/linklist.component.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLinklistComponent": function() { return /* binding */ ShopifyLinklistComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _linklist_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./linklist.component.html */ "../../packages/shopify/src/components/linklist/linklist.component.html");






/**
 * shopify-filter
 */
class ShopifyLinklistComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return ["linklist", "handle", "name", "pills", "vertical", "collapse-on-new-page", "show-on-child-url"];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "mainDispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("main"));

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      // properties
      pills: false,
      vertical: false,
      collapseOnNewPage: true,
      showOnActiveChild: true,
      // methods
      toggle: this.toggle,
      collapse: this.collapse,
      collapseAll: this.collapseAll,
      show: this.show,
      showAll: this.showAll
    });

    this.mainDispatcher.on("newPageReady", this.onNewPageReady, this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyLinklistComponent.observedAttributes);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.mainDispatcher.off("newPageReady", this.onNewPageReady, this);
  }

  toggle(link) {
    link.collapsed = !link.collapsed;
  }

  collapse(link) {
    link.collapsed = true;
  }

  show(link) {
    link.collapsed = false;
  }

  showAll() {
    if (this.scope.linklist) {
      this.showAllByLinks(this.scope.linklist.links);
    }
  }

  collapseAll() {
    if (this.scope.linklist && this.scope.linklist.links) {
      this.collapseAllByLinks(this.scope.linklist.links);
    }
  }
  /**
   * Show (uncollapse) link by child url
   */


  showByChildUrl(url) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of this.scope.linklist.links) {
        for (const sublink of link.links) {
          if (sublink.url === url) {
            this.show(link);
            break;
          }

          for (const subsublink of sublink.links) {
            if (subsublink.url === url) {
              this.show(link);
              this.show(sublink);
              break;
            }
          }
        }
      }
    }
  }

  async attributeChangedCallback(name, oldValue, newValue, namespace) {
    // injects the changed attributes to scope
    super.attributeChangedCallback(name, oldValue, newValue, namespace); // set linklist by handle

    if (name === "handle" || name === "name") {
      if (window.model && window.model.system && window.model.system.linklists && window.model.system.linklists[newValue]) {
        this.scope.linklist = window.model.system.linklists[newValue];
      } else {
        throw new Error("Linklist not found! \nNote: The linklist must be available under \"window.model.system.linklists['".concat(newValue, "']\" to set it using his handle."));
      }
    }

    if (name === "linklist") {
      if (typeof newValue === "object") {
        // if object is in form of "main-menu": {...}
        if (Object.keys(newValue).length === 1) {
          newValue = newValue[Object.keys(newValue)[0]];
        }
      }

      this.scope.linklist = newValue;
    }
  }

  collapseAllByLinks(links) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of links) {
        if (link.collapseable) {
          link.collapsed = true;
        }

        if (link.links) {
          this.collapseAllByLinks(link.links);
        }
      }
    }
  }

  showAllByLinks(links) {
    if (this.scope.linklist && this.scope.linklist.links) {
      for (const link of links) {
        if (link.collapseable) {
          link.collapsed = false;
        }

        if (link.links) {
          this.collapseAllByLinks(link.links);
        }
      }
    }
  }

  onNewPageReady(viewId, currentStatus) {
    const url = currentStatus.url;

    if (this.scope.collapseOnNewPage) {
      this.collapseAll();
    }

    if (this.scope.showOnActiveChild) {
      this.showByChildUrl(url);
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.linklist && this.scope.linklist.links) {
      this.transformLinks(this.scope.linklist.links);

      if (this.scope.collapseOnNewPage) {
        this.collapseAll();
      }
    }

    if (this.scope.showOnActiveChild) {
      this.showByChildUrl(window.location.pathname);
    }
  }
  /**
   * Checks if link are collapseable and set initializes corresponding attributes
   */


  transformLinks(links) {
    for (const link of links) {
      if (link.url === "#collapse") {
        link.collapseable = true;
        link.collapsed = true;
      } else {
        link.collapseable = false;
        link.collapsed = false;
      }

      if (link.links) {
        this.transformLinks(link.links);
      }
    }
  }

  requiredAttributes() {
    return ["linklist"];
  }
  /**
   * Only set the component template if there no childs already
   */


  template() {
    if ((0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _linklist_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLinklistComponent, "tagName", "shopify-linklist");

/***/ }),

/***/ "../../packages/shopify/src/components/login-form/login-form.component.ts":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/login-form/login-form.component.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* binding */ ShopifyLoginFormComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _login_form_component_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./login-form.component.html */ "../../packages/shopify/src/components/login-form/login-form.component.html");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");




class ShopifyLoginFormComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "loginCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "createCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "recoverCustomerForm", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      form: {
        customer: {
          email: "",
          password: ""
        }
      },
      loginCustomer: {
        validation: {
          valid: false
        }
      },
      createCustomer: {
        validation: {
          valid: false
        }
      },
      recoverCustomer: {
        validation: {
          valid: false
        }
      },
      login: this.login,
      create: this.create,
      recover: this.recover,
      recoverBack: this.recoverBack
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyLoginFormComponent.observedAttributes);
  }
  /**
   * Login submit using the login form
   */


  login(event) {
    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.loginCustomerForm, this.scope.loginCustomer.validation);

    if (this.scope.loginCustomer.validation.valid) {
      this.loginCustomerForm.submit();
    }
  }
  /**
   * Create an account submit using the login form
   */


  create(event) {
    if (!this.createCustomerForm) {
      console.error("No create form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.createCustomerForm, this.scope.createCustomer.validation);

    if (this.scope.createCustomer.validation.valid) {
      this.createCustomerForm.submit();
    }
  }
  /**
   * Reset password submit using the (hidden) reset form
   * @param event
   */


  recover(event) {
    if (!this.recoverCustomerForm) {
      console.error("No recover form found");
      return false;
    }

    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    this.validate(this.recoverCustomerForm, this.scope.recoverCustomer.validation);

    if (this.scope.recoverCustomer.validation.valid) {
      this.recoverCustomerForm.submit();
    } else {
      var _this$loginCustomerFo, _this$recoverCustomer;

      (_this$loginCustomerFo = this.loginCustomerForm.parentNode) === null || _this$loginCustomerFo === void 0 ? void 0 : _this$loginCustomerFo.setAttribute("hidden", "");
      (_this$recoverCustomer = this.recoverCustomerForm.parentNode) === null || _this$recoverCustomer === void 0 ? void 0 : _this$recoverCustomer.removeAttribute("hidden");
    }
  }

  recoverBack(event) {
    var _this$loginCustomerFo2, _this$recoverCustomer2;

    if (!this.recoverCustomerForm) {
      console.error("No recover form found");
      return false;
    }

    if (!this.loginCustomerForm) {
      console.error("No login form found");
      return false;
    } // stop native submit


    event.preventDefault();
    event.stopPropagation();
    (_this$loginCustomerFo2 = this.loginCustomerForm.parentNode) === null || _this$loginCustomerFo2 === void 0 ? void 0 : _this$loginCustomerFo2.removeAttribute("hidden");
    (_this$recoverCustomer2 = this.recoverCustomerForm.parentNode) === null || _this$recoverCustomer2 === void 0 ? void 0 : _this$recoverCustomer2.setAttribute("hidden", "");
  }

  initValidation() {
    this.createCustomerForm = this.querySelector('form[action="/account"]');
    this.createCustomerForm.setAttribute("novalidate", "");
    this.createCustomerForm.classList.add("needs-validation");
    this.loginCustomerForm = this.querySelector('form[action="/account/login"]');
    this.loginCustomerForm.setAttribute("novalidate", "");
    this.loginCustomerForm.classList.add("needs-validation");
    this.recoverCustomerForm = this.querySelector('form[action="/account/recover"]');
    this.recoverCustomerForm.setAttribute("novalidate", "");
    this.recoverCustomerForm.classList.add("needs-validation");
  }

  validate(form, validationScope) {
    validationScope.valid = form.checkValidity();
    form.classList.add("was-validated");
  }

  async afterBind() {
    await super.afterBind();
    this.initValidation();
  }

  requiredAttributes() {
    return [];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _login_form_component_html__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyLoginFormComponent, "tagName", "shopify-login-form");

/***/ }),

/***/ "../../packages/shopify/src/components/product-item/product-item.component.ts":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-item/product-item.component.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductItemComponent": function() { return /* binding */ ShopifyProductItemComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _product_item_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./product-item.component.html */ "../../packages/shopify/src/components/product-item/product-item.component.html");






/**
 * TODO minify this, create a general product service instead of extend from ShopifyProductItemComponent
 * or create a product list for all products
 * or just get the attributes we need like the options
 * or render the most with liquid
 */
class ShopifyProductItemComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  /**
   * handle is the product handle to get the product json object
   * extras are product data which is only available over liquid and not over the product json object
   * product is the product object itself if you want to pass it directly
   */
  static get observedAttributes() {
    return ["handle", "extras", "product"];
  }

  requiredAttributes() {
    return ["handle"];
  }

  set menuPadding(padding) {
    this._menuPadding = padding;
    this.scope.detailMenuPadding = this._menuPadding + "px";
  }
  /**
   * available is only true if the variant is available and the user has clicked on an option
   */


  set available(available) {
    this.scope.available = available && this.optionChosen;
  }

  set showMenu(show) {
    if (show) {
      this.menuPadding = 215;
    } else {
      this.menuPadding = 60;
    }

    this.scope.showDetailMenu = show;
  }

  get showMenu() {
    return this.scope.showDetailMenu;
  }

  set product(product) {
    if (product) {
      this.scope.product = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.prepare(product);
      this.scope.handle = this.scope.product.handle;
      this.scope.colorOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "color") || null;
      this.scope.sizeOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "size") || null; // set the first variant to the selected one

      this.variant = this.scope.product.variants[0];
    }
  }

  get product() {
    return this.scope.product;
  }

  set variant(variant) {
    if (variant === null) {
      return;
    }

    this.scope.variant = variant;

    if (this.scope.variant) {
      this.selectedOptions = this.scope.variant.options.slice();
      this.available = this.scope.variant.available;
      this.activateOptions();
    }
  }

  get variant() {
    return this.scope.variant;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      handle: null,
      product: null,
      variant: null,
      quantity: 1,
      showDetailMenu: false,
      detailMenuPadding: "60px",
      // showAddToCartButton: false,
      chooseOption: this.chooseOption,
      addToCart: this.addToCart,
      toggleDetailMenu: this.toggleDetailMenu,
      decrease: this.decrease,
      increase: this.increase,
      colorOption: null,
      sizeOption: null,

      /**
       * If the variant is available, used to disable the add to cart button
       */
      available: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "selectedOptions", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_menuPadding", 60);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "optionChosen", false);
  }

  connectedCallback() {
    super.connectedCallback();
    this.init(ShopifyProductItemComponent.observedAttributes);
  }

  chooseOption(optionValue, position1, optionName, event) {
    optionValue = optionValue.toString();

    if (!this.scope.product) {
      throw new Error("Product not set!");
    }

    this.selectedOptions[position1 - 1] = optionValue.toString();
    const variant = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getVariantOfOptions(this.scope.product, this.selectedOptions);

    if (variant) {
      // Option chosen -> so enable add to cart button
      this.optionChosen = true;
      this.variant = variant;
    }

    event.stopPropagation();
  }

  addToCart() {
    if (!this.variant) {
      return;
    }

    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.add(this.variant.id, this.scope.quantity).then(response => {
      console.debug("addToCart response", response);
    }).catch(error => {
      console.debug("addToCart error", error);
    });
  }

  toggleDetailMenu() {
    this.showMenu = !this.showMenu;
  }

  increase() {
    this.scope.quantity++;
  }

  decrease() {
    this.scope.quantity--;

    if (this.scope.quantity <= 0) {
      this.scope.quantity = 1;
    }
  }
  /**
   * Workaround because `rv-class-active="isOptionActive | call size"` is not updating if selectedOptions changes
   * @param optionValue
   * @param optionName
   */


  activateOption(optionValue, optionName) {
    var _this$querySelector, _this$querySelector2;

    optionValue = optionValue.toString().replace("#", "");
    (_this$querySelector = this.querySelector(".option-".concat(optionName.toLocaleLowerCase()))) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.classList.remove("active");
    (_this$querySelector2 = this.querySelector(".option-".concat(optionName.toLocaleLowerCase(), "-").concat(optionValue))) === null || _this$querySelector2 === void 0 ? void 0 : _this$querySelector2.classList.add("active");
  }
  /**
   * Activate option by selected options (scope.selectedOptions)
   * This method sets the active class to the options elements
   */


  activateOptions() {
    for (const position0 in this.selectedOptions) {
      if (this.selectedOptions[position0]) {
        const optionValue = this.selectedOptions[position0];

        if (this.scope.product) {
          const optionName = this.scope.product.options[position0].name; // Only activate size if it was clicked by the user

          if (optionName === "size") {
            if (this.optionChosen) {
              this.activateOption(optionValue, optionName);
            }
          } else {
            this.activateOption(optionValue, optionName);
          }
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.handle === null) {
      throw new Error("Product handle not set");
    }

    if (!this.product) {
      this.fetchProduct(this.scope.handle);
    }
  }

  async fetchProduct(handle) {
    const product = await _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.get(handle);

    if (product) {
      this.product = product;
    }

    return product;
  }

  parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
    super.parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace);

    switch (attributeName) {
      case "product":
        this.product = newValue;
        break;
    }
  }

  async afterBind() {
    await super.afterBind();
    this.activateOptions();
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _product_item_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductItemComponent, "tagName", "shopify-product-item");

/***/ }),

/***/ "../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts":
/*!**********************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-scrollbar/product-scrollbar.component.ts ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* binding */ ShopifyProductScrollbarComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/router */ "../../packages/router/src/index.ts");



class ShopifyProductScrollbarComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  static get observedAttributes() {
    return [];
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      onScroll: this.onScroll,
      onProductTap: this.onProductTap,
      onProductMouseenter: this.onProductMouseenter,
      title: ""
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "products", null);
  }
  /**
   * Default custom Element method
   * Invoked when the custom element is first connected to the document's DOM.
   */


  connectedCallback() {
    super.connectedCallback();
    this.products = this.querySelectorAll(".embed-responsive");
    this.init(ShopifyProductScrollbarComponent.observedAttributes);
  }
  /**
   * Just open the product url
   */


  onProductTap(event, scope, eventEl) {
    const url = eventEl.dataset.url;

    if (!url) {
      return;
    }

    const pjax = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Pjax.getInstance("main");

    if (!pjax) {
      return;
    }

    pjax.goTo(url);
  }
  /**
   * Preload product on mouse over
   */


  onProductMouseenter(event, scope, eventEl) {
    const url = eventEl.dataset.url;
    const prefetch = _ribajs_router__WEBPACK_IMPORTED_MODULE_2__.Prefetch.getInstance();

    if (!prefetch) {
      return;
    }

    if (!url) {
      return;
    }

    prefetch.onLinkEnter(url, eventEl, event);
  }
  /**
   * get product in the middle of the scrollbar element
   */


  onScroll(event, scope, eventEl) {
    if (this.products) {
      for (let i = 0; i < this.products.length; i++) {
        const product = this.products[i];
        const productData = product.dataset;
        const parentRect = eventEl.getBoundingClientRect();
        const elementRect = product.getBoundingClientRect();
        const elementMiddle = elementRect.width / 2;
        /** centerX is 0 if the product is in the middle */

        const centerX = elementRect.left - (parentRect.width / 2 - elementMiddle);
        const offset = elementMiddle;

        if (centerX > offset * -1 && centerX < offset) {
          this.scope.title = productData.title;
        }
      }
    }
  }

  requiredAttributes() {
    return [];
  }

  template() {
    return null;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductScrollbarComponent, "tagName", "shopify-product-scrollbar");

/***/ }),

/***/ "../../packages/shopify/src/components/product/product.component.ts":
/*!**************************************************************************!*\
  !*** ../../packages/shopify/src/components/product/product.component.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductComponent": function() { return /* binding */ ShopifyProductComponent; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/shopify */ "../../packages/shopify/src/index.ts");
/* harmony import */ var _ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _product_component_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./product.component.html */ "../../packages/shopify/src/components/product/product.component.html");





class ShopifyProductComponent extends _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.Component {
  /**
   * handle is the product handle to get the product json object
   * extras are product data which is only available over liquid and not over the product json object
   */
  static get observedAttributes() {
    return ["handle", "extras"];
  }

  set product(product) {
    if (product) {
      this.scope.product = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.prepare(product);
      this.colorOption = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getOption(this.scope.product, "color") || null;
      this.variant = this.scope.product.variants[0];
    }
  }

  get product() {
    return this.scope.product;
  }

  set variant(variant) {
    if (variant === null) {
      return;
    }

    this.scope.variant = this.prepareVariant(variant);

    if (this.scope.variant) {
      this.selectedOptions = this.scope.variant.options.slice();
      this.available = this.scope.variant.available;
      this.activateOptions();
    }
  }

  get variant() {
    return this.scope.variant;
  }
  /**
   * available is only true if the variant is available and the user has clicked on an option
   */


  set available(available) {
    this.scope.available = available && this.optionChosen;
  }

  constructor() {
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "autobind", true);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "scope", {
      handle: null,
      product: null,
      variant: null,
      quantity: 1,
      showDetailMenu: false,
      // showAddToCartButton: false,
      chooseOption: this.chooseOption,
      addToCart: this.addToCart,
      toggleDetailMenu: this.toggleDetailMenu,
      decrease: this.decrease,
      increase: this.increase,

      /**
       * If the variant is available, used to disable the add to cart button
       */
      available: false
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "colorOption", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "selectedOptions", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "optionChosen", false);

    this.init(ShopifyProductComponent.observedAttributes);
  }

  chooseOption(optionValue, position1, optionName, event) {
    if (!this.scope.product) {
      throw new Error("Product not set!");
    }

    optionValue = optionValue.toString();
    this.selectedOptions[position1 - 1] = optionValue.toString();
    const variant = _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.getVariantOfOptions(this.scope.product, this.selectedOptions);

    if (variant) {
      // Option chosen so enable add to cart button
      this.optionChosen = true;
      this.variant = variant;
    }

    event.stopPropagation();
  }

  addToCart() {
    if (!this.variant) {
      return;
    }

    _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyCartService.add(this.variant.id, this.scope.quantity).then(response => {
      console.debug("addToCart response", response);
    }).catch(error => {
      console.error("addToCart error", error);
    });
  }

  toggleDetailMenu() {
    this.scope.showDetailMenu = !this.scope.showDetailMenu;
  }

  increase() {
    this.scope.quantity++;
  }

  decrease() {
    this.scope.quantity--;

    if (this.scope.quantity <= 0) {
      this.scope.quantity = 1;
    }
  }
  /**
   * Workaround because `rv-class-active="isOptionActive | call size"` is not updating if selectedOptions changes
   * @param optionValue
   * @param optionName
   */


  activateOption(optionValue, optionName) {
    var _this$querySelector, _this$querySelector2;

    optionValue = optionValue.toString().replace("#", "");
    (_this$querySelector = this.querySelector(".option-".concat(optionName.toLocaleLowerCase()))) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.classList.remove("active");
    (_this$querySelector2 = this.querySelector(".option-".concat(optionName.toLocaleLowerCase(), "-").concat(optionValue))) === null || _this$querySelector2 === void 0 ? void 0 : _this$querySelector2.classList.add("active");
  }
  /**
   * Activate option by selected options (scope.selectedOptions)
   * This method sets the active class to the options elements
   */


  activateOptions() {
    for (const position0 in this.selectedOptions) {
      if (this.selectedOptions[position0]) {
        const optionValue = this.selectedOptions[position0];

        if (this.scope.product) {
          const optionName = this.scope.product.options[position0].name; // Only activate size if it was clicked by the user

          if (optionName === "size") {
            if (this.optionChosen) {
              this.activateOption(optionValue, optionName);
            }
          } else {
            this.activateOption(optionValue, optionName);
          }
        }
      }
    }
  }

  async beforeBind() {
    await super.beforeBind();

    if (this.scope.handle === null) {
      throw new Error("Product handle not set");
    }

    return _ribajs_shopify__WEBPACK_IMPORTED_MODULE_2__.ShopifyProductService.get(this.scope.handle).then(product => {
      this.product = product;
    });
  }

  async afterBind() {
    this.activateOptions();
    await super.afterBind();
  }

  requiredAttributes() {
    return ["handle"];
  }

  template() {
    // Only set the component template if there no childs already
    if (this && (0,_ribajs_utils_src_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasChildNodesTrim)(this)) {
      return null;
    } else {
      return _product_component_html__WEBPACK_IMPORTED_MODULE_4__["default"];
    }
  }
  /**
   * custom version of images.indexOf but compares without protocol and query string in url
   * @param images
   * @param findImage
   */


  indexOfUrl(images, findImage) {
    let index = -1;
    const clearFindImage = findImage.split("?")[0] // remove query string
    .replace(/(^\w+:|^)\/\//, "//"); // remove protocol

    images.forEach((image, i) => {
      const clearImage = image.split("?")[0] // remove query string
      .replace(/(^\w+:|^)\/\//, "//"); // remove protocol

      if (clearImage === clearFindImage) {
        index = i;
      }
    });
    return index;
  }
  /**
   * Get images which are not linked to any variant
   */


  getGeneralImages() {
    let optionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "color";
    optionName = optionName.toLowerCase();
    const generalImages = [];

    if (this.scope.product) {
      // add images without optionName in filename
      this.scope.product.images.forEach(image => {
        if (!(image.toLowerCase().indexOf("".concat(optionName, "-")) !== -1)) {
          generalImages.push(image);
        }
      }); // remove variant images from copied array

      this.scope.product.variants.forEach(variant => {
        let index = -1;

        if (variant.featured_image !== null && variant.featured_image.src) {
          index = this.indexOfUrl(generalImages, variant.featured_image.src);
        }

        if (index >= 0) {
          generalImages.splice(index, 1);
        }
      });
    }

    return generalImages;
  }
  /**
   * Get options images (without featured image) filtered by filename.
   * Shopify only supports one image per variant, with this function more images for each variant are possible.
   * The image filename must include {optionName}-{optionValue} for that.
   */


  getOptionImages(option, optionValue) {
    optionValue = optionValue.toLowerCase().replace("#", "_");
    const optionName = option.name.toLowerCase();
    const optionImages = [];

    if (this.scope.product) {
      this.scope.product.images.forEach(image => {
        if (image.toLowerCase().indexOf("".concat(optionName, "-").concat(optionValue)) !== -1) {
          optionImages.push(image);
        }
      });
    }

    return optionImages;
  }
  /**
   * Get featured images of variant, use the first option image or the featured product image as fallback
   */


  getFeaturedImage(variant) {
    if (variant.featured_image !== null) {
      variant.featured_image.src = variant.featured_image.src.replace(/(^\w+:|^)\/\//, "//"); // remove protocol

      return variant.featured_image;
    }

    let fallbackImageSrc = "";

    if (variant.images && variant.images.length > 0) {
      fallbackImageSrc = variant.images[0];
    } else if (this.scope.product) {
      fallbackImageSrc = this.scope.product.featured_image;
    }

    if (!fallbackImageSrc) {
      return null;
    } // remove protocol for normalization


    fallbackImageSrc = fallbackImageSrc.replace(/(^\w+:|^)\/\//, "//"); // If variant has no image use the default product image

    if (this.scope.product) {
      const featuredImage = {
        src: fallbackImageSrc,
        position: 0,
        product_id: this.scope.product.id,
        variant_ids: [],
        alt: this.scope.product.title,
        created_at: this.scope.product.created_at,
        height: 0,
        width: 0,
        id: 0,
        updated_at: this.scope.product.created_at
      };
      return featuredImage;
    }

    throw new Error("image not found");
  }
  /**
   * prepare variant, e.g. fix missing image etc
   * @param variant
   */


  prepareVariant(variant) {
    if (variant === null) {
      console.warn("Warn: Variant is null!");
      return null;
    }

    if (this.colorOption) {
      variant.images = this.getOptionImages(this.colorOption, variant.options[this.colorOption.position - 1]);
    } else {
      console.warn("Warn: colorOption not defined");
      variant.images = [];
    }

    variant.featured_image = this.getFeaturedImage(variant);

    if (variant.images && variant.featured_image) {
      // Remove featured image so that it does not appear twice
      const i = this.indexOfUrl(variant.images, variant.featured_image.src);

      if (i >= 0) {
        variant.images.splice(i, 1);
      } // add general images


      variant.images = variant.images.concat(this.getGeneralImages());
    }

    return variant;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductComponent, "tagName", "shopify-product");

/***/ }),

/***/ "../../packages/shopify/src/formatters/img-url.formatter.ts":
/*!******************************************************************!*\
  !*** ../../packages/shopify/src/formatters/img-url.formatter.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imgUrlFormatter": function() { return /* binding */ imgUrlFormatter; }
/* harmony export */ });
/**
 * Return a resized shopify image URL
 * @see https://help.shopify.com/en/themes/liquid/filters/url-filters#img_url
 *
 * @param url
 * @param size
 * @param scale TODO
 * @param crop TODO
 * @param extension
 */
const imgUrlFormatter = {
  name: "img_url",

  read(url, size, scale, crop, extension) {
    try {
      if (size === "original" || size === "master") {
        return url;
      }

      if (scale && scale !== 1) {
        size += "@" + scale + "x";
      }

      const result = url.match(/(.*\/[\w\-_.]+)\.(\w{2,4})/);

      if (!result || !result[1] || !result[2]) {
        throw new Error("Can't match url ".concat(url));
      }

      const path = result[1];
      extension = extension || result[2];
      return path + "_" + size + "." + extension;
    } catch (error) {
      console.error(error);
      return url;
    }
  }

};

/***/ }),

/***/ "../../packages/shopify/src/formatters/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/formatters/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imgUrlFormatter": function() { return /* reexport safe */ _img_url_formatter_js__WEBPACK_IMPORTED_MODULE_0__.imgUrlFormatter; },
/* harmony export */   "moneyFormatter": function() { return /* reexport safe */ _money_formatter_js__WEBPACK_IMPORTED_MODULE_1__.moneyFormatter; },
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* reexport safe */ _money_with_currency_formatter_js__WEBPACK_IMPORTED_MODULE_2__.moneyWithCurrencyFormatter; }
/* harmony export */ });
/* harmony import */ var _img_url_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./img-url.formatter.js */ "../../packages/shopify/src/formatters/img-url.formatter.ts");
/* harmony import */ var _money_formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./money.formatter.js */ "../../packages/shopify/src/formatters/money.formatter.ts");
/* harmony import */ var _money_with_currency_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./money-with-currency.formatter.js */ "../../packages/shopify/src/formatters/money-with-currency.formatter.ts");


 // Add Shopify-specific formatters for Rivets.js.
// export const money = (value, currency) => {
//   return Utils.formatMoney(value, ProductJS.settings.moneyFormat, 'money_format', currency);
// };
// export const moneyWithCurrency = (value, currency) => {
//   return Utils.formatMoney(value, ProductJS.settings.moneyWithCurrencyFormat, 'money_with_currency_format', currency);
// };
// export const weight = (grams) => {
//   switch (CartJS.settings.weightUnit) {
//     case 'kg':
//       return (grams / 1000).toFixed(CartJS.settings.weightPrecision);
//     case 'oz':
//       return (grams * 0.035274).toFixed(CartJS.settings.weightPrecision);
//     case 'lb':
//       return (grams * 0.00220462).toFixed(CartJS.settings.weightPrecision);
//     default:
//       return grams.toFixed(CartJS.settings.weightPrecision);
//   }
// };

/**
 * Formats the product variant's weight. The weight unit is set in General Settings.
 * @see https://help.shopify.com/themes/liquid/filters/additional-filters#weightWithUnit
 */
// export const weightWithUnit = (grams) => {
//   return export const weight(grams) + CartJS.settings.weightUnit;
// };
// export const productImageSize = (src, size) => {
//   return CartJS.Utils.getSizedImageUrl(src, size);
// };

/***/ }),

/***/ "../../packages/shopify/src/formatters/money-with-currency.formatter.ts":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/formatters/money-with-currency.formatter.ts ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* binding */ moneyWithCurrencyFormatter; }
/* harmony export */ });
/* harmony import */ var _money_formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./money.formatter.js */ "../../packages/shopify/src/formatters/money.formatter.ts");
/* harmony import */ var _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");


/**
 * Formats the price based on the shop's HTML with currency setting (if the format is not overwritten by passing a format parameter).
 * @see https://help.shopify.com/en/themes/liquid/filters/money-filters
 */

const moneyWithCurrencyFormatter = {
  name: "money_with_currency",

  read(cents, format) {
    const formatString = format || _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyService.moneyWithCurrencyFormat;

    if (!_money_formatter_js__WEBPACK_IMPORTED_MODULE_0__.moneyFormatter.read) {
      console.error(new Error("Can't find moneyFormatter's read method!"));
      return cents;
    }

    return _money_formatter_js__WEBPACK_IMPORTED_MODULE_0__.moneyFormatter.read(cents, formatString);
  }

};

/***/ }),

/***/ "../../packages/shopify/src/formatters/money.formatter.ts":
/*!****************************************************************!*\
  !*** ../../packages/shopify/src/formatters/money.formatter.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moneyFormatter": function() { return /* binding */ moneyFormatter; }
/* harmony export */ });
/* harmony import */ var _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");

/**
 * Formats the price based on the shop's HTML with currency setting (if the format is not overwritten by passing a format parameter).
 * @param cents
 * @param format
 *
 * @see https://github.com/NathanPJF/deploybot-shopify/blob/master/assets/ajaxify.js.liquid
 * @see https://github.com/discolabs/cartjs/blob/master/src/utils.coffee
 * @see https://github.com/JumpLinkNetwork/shopify-productjs/blob/master/src/utilities.js
 * @see https://help.shopify.com/en/themes/liquid/filters/money-filters
 */

const moneyFormatter = {
  name: "money",

  read(cents, format) {
    let value = "";
    const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    const formatString = format || this.moneyFormat;

    if (!formatString) {
      console.warn("Can't parse format: ".concat(formatString));
      return "0";
    }

    if (typeof cents === "string") {
      cents = cents.replace(".", ""); // cents to float number

      cents = parseFloat(cents.toString());
    }

    const matchedFormat = formatString.match(placeholderRegex);

    if (matchedFormat !== null && matchedFormat.length >= 1) {
      switch (matchedFormat[1]) {
        case "amount":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 2);
          break;

        case "amount_no_decimals":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 0);
          break;

        case "amount_with_comma_separator":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 2, ".", ",");
          break;

        case "amount_no_decimals_with_comma_separator":
          value = _services_shopify_service_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService.formatMoneyWithDelimiters(cents, 0, ".", ",");
          break;
      }

      return formatString.replace(placeholderRegex, value);
    }

    console.warn("Can't parse format: ".concat(formatString));
    return "0";
  }

};

/***/ }),

/***/ "../../packages/shopify/src/index.ts":
/*!*******************************************!*\
  !*** ../../packages/shopify/src/index.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ModuleService; },
/* harmony export */   "PQueue": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PQueue; },
/* harmony export */   "PriorityQueue": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.PriorityQueue; },
/* harmony export */   "ShopifyAddressesComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyAddressesComponent; },
/* harmony export */   "ShopifyCartButtonComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartButtonComponent; },
/* harmony export */   "ShopifyCartComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartComponent; },
/* harmony export */   "ShopifyCartCountBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyCartCountBinder; },
/* harmony export */   "ShopifyCartItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartItemComponent; },
/* harmony export */   "ShopifyCartService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyCartService; },
/* harmony export */   "ShopifyCommentsFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCommentsFormComponent; },
/* harmony export */   "ShopifyContactFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyContactFormComponent; },
/* harmony export */   "ShopifyDebugBarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyDebugBarComponent; },
/* harmony export */   "ShopifyImgBinder": function() { return /* reexport safe */ _binders_index_js__WEBPACK_IMPORTED_MODULE_1__.ShopifyImgBinder; },
/* harmony export */   "ShopifyLinklistComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyLinklistComponent; },
/* harmony export */   "ShopifyLoginFormComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyLoginFormComponent; },
/* harmony export */   "ShopifyProductComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductComponent; },
/* harmony export */   "ShopifyProductItemComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductItemComponent; },
/* harmony export */   "ShopifyProductScrollbarComponent": function() { return /* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyProductScrollbarComponent; },
/* harmony export */   "ShopifyProductService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyProductService; },
/* harmony export */   "ShopifyService": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.ShopifyService; },
/* harmony export */   "imgUrlFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.imgUrlFormatter; },
/* harmony export */   "lowerBound": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_0__.lowerBound; },
/* harmony export */   "moneyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.moneyFormatter; },
/* harmony export */   "moneyWithCurrencyFormatter": function() { return /* reexport safe */ _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__.moneyWithCurrencyFormatter; },
/* harmony export */   "shopifyModule": function() { return /* reexport safe */ _shopify_module__WEBPACK_IMPORTED_MODULE_5__.shopifyModule; }
/* harmony export */ });
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify/src/services/index.ts");
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify/src/formatters/index.ts");
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/index.js */ "../../packages/shopify/src/components/index.ts");
/* harmony import */ var _interfaces_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interfaces/index.js */ "../../packages/shopify/src/interfaces/index.ts");
/* harmony import */ var _shopify_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify.module */ "../../packages/shopify/src/shopify.module.ts");







/***/ }),

/***/ "../../packages/shopify/src/interfaces/address.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/address.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/cart.ts":
/*!*****************************************************!*\
  !*** ../../packages/shopify/src/interfaces/cart.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/customer..ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/customer..ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/discount.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/discount.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/image.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/image.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/index.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/index.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address */ "../../packages/shopify/src/interfaces/address.ts");
/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cart */ "../../packages/shopify/src/interfaces/cart.ts");
/* harmony import */ var _customer___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./customer. */ "../../packages/shopify/src/interfaces/customer..ts");
/* harmony import */ var _discount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./discount */ "../../packages/shopify/src/interfaces/discount.ts");
/* harmony import */ var _order__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./order */ "../../packages/shopify/src/interfaces/order.ts");
/* harmony import */ var _linklist_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./linklist-link */ "../../packages/shopify/src/interfaces/linklist-link.ts");
/* harmony import */ var _linklist__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./linklist */ "../../packages/shopify/src/interfaces/linklist.ts");
/* harmony import */ var _metafield__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metafield */ "../../packages/shopify/src/interfaces/metafield.ts");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product */ "../../packages/shopify/src/interfaces/product.ts");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image */ "../../packages/shopify/src/interfaces/image.ts");
/* harmony import */ var _shipping_rates__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shipping-rates */ "../../packages/shopify/src/interfaces/shipping-rates.ts");












/***/ }),

/***/ "../../packages/shopify/src/interfaces/linklist-link.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/interfaces/linklist-link.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/linklist.ts":
/*!*********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/linklist.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/metafield.ts":
/*!**********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/metafield.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/order.ts":
/*!******************************************************!*\
  !*** ../../packages/shopify/src/interfaces/order.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/product.ts":
/*!********************************************************!*\
  !*** ../../packages/shopify/src/interfaces/product.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/interfaces/shipping-rates.ts":
/*!***************************************************************!*\
  !*** ../../packages/shopify/src/interfaces/shipping-rates.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/shopify/src/services/index.ts":
/*!****************************************************!*\
  !*** ../../packages/shopify/src/services/index.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* reexport safe */ _module_service_js__WEBPACK_IMPORTED_MODULE_0__.ModuleService; },
/* harmony export */   "PQueue": function() { return /* reexport safe */ _p_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PQueue; },
/* harmony export */   "PriorityQueue": function() { return /* reexport safe */ _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__.PriorityQueue; },
/* harmony export */   "ShopifyCartService": function() { return /* reexport safe */ _shopify_cart_service_js__WEBPACK_IMPORTED_MODULE_3__.ShopifyCartService; },
/* harmony export */   "ShopifyProductService": function() { return /* reexport safe */ _shopify_product_service_js__WEBPACK_IMPORTED_MODULE_4__.ShopifyProductService; },
/* harmony export */   "ShopifyService": function() { return /* reexport safe */ _shopify_service_js__WEBPACK_IMPORTED_MODULE_5__.ShopifyService; },
/* harmony export */   "lowerBound": function() { return /* reexport safe */ _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__.lowerBound; }
/* harmony export */ });
/* harmony import */ var _module_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module.service.js */ "../../packages/shopify/src/services/module.service.ts");
/* harmony import */ var _p_queue_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./p-queue.service.js */ "../../packages/shopify/src/services/p-queue.service.ts");
/* harmony import */ var _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./priority-queue.service.js */ "../../packages/shopify/src/services/priority-queue.service.ts");
/* harmony import */ var _shopify_cart_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shopify-cart.service.js */ "../../packages/shopify/src/services/shopify-cart.service.ts");
/* harmony import */ var _shopify_product_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shopify-product.service.js */ "../../packages/shopify/src/services/shopify-product.service.ts");
/* harmony import */ var _shopify_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shopify.service.js */ "../../packages/shopify/src/services/shopify.service.ts");







/***/ }),

/***/ "../../packages/shopify/src/services/module.service.ts":
/*!*************************************************************!*\
  !*** ../../packages/shopify/src/services/module.service.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModuleService": function() { return /* binding */ ModuleService; }
/* harmony export */ });
class ModuleService {
  static get options() {
    return this._options;
  }

  constructor() {
    /**/
  }

  static getSingleton() {
    if (this.instance) {
      return this.instance;
    }

    throw new Error("Singleton of ModuleService not defined, please call setSingleton first!");
  }

  static setSingleton() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.instance) {
      throw new Error("Singleton of ModuleService already defined!");
    }

    this._options = options;
    this.instance = new this();
    return this.instance;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/p-queue.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/services/p-queue.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PQueue": function() { return /* binding */ PQueue; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./priority-queue.service.js */ "../../packages/shopify/src/services/priority-queue.service.ts");

// https://github.com/sindresorhus/p-queue

class PQueue {
  constructor(options) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "queue", new _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue());

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_intervalCount", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_intervalEnd", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_pendingCount", 0);

    options = Object.assign({
      carryoverConcurrencyCount: false,
      intervalCap: Infinity,
      interval: 0,
      concurrency: Infinity,
      autoStart: true,
      queueClass: _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue
    }, options);

    if (!(typeof options.concurrency === "number" && options.concurrency >= 1)) {
      throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(options.concurrency, "` (").concat(typeof options.concurrency, ")"));
    }

    if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
      throw new TypeError("Expected `intervalCap` to be a number from 1 and up, got `".concat(options.intervalCap, "` (").concat(typeof options.intervalCap, ")"));
    }

    if (!(typeof options.interval === "number" && Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError("Expected `interval` to be a finite number >= 0, got `".concat(options.interval, "` (").concat(typeof options.interval, ")"));
    }

    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
    this._intervalCount = 0;
    this._intervalCap = options.intervalCap;
    this._interval = options.interval;
    this._intervalId = undefined;
    this._intervalEnd = 0;
    this._timeoutId = null;
    this.queue = new options.queueClass(); // eslint-disable-line new-cap

    this._pendingCount = 0;
    this._concurrency = options.concurrency;
    this._isPaused = options.autoStart === false;

    this._resolveEmpty = () => {}; // eslint-disable-line


    this._resolveIdle = () => {}; // eslint-disable-line

  }

  add(fn, options) {
    return new Promise((resolve, reject) => {
      const run = () => {
        this._pendingCount++;
        this._intervalCount++;

        try {
          Promise.resolve(fn()).then(val => {
            resolve(val);

            this._next();
          }, err => {
            reject(err);

            this._next();
          });
        } catch (err) {
          reject(err);

          this._next();
        }
      };

      this.queue.enqueue(run, options);

      this._tryToStartAnother();
    });
  }

  addAll(fns, options) {
    return Promise.all(fns.map(fn => this.add(fn, options)));
  }

  start() {
    if (!this._isPaused) {
      return;
    }

    this._isPaused = false;

    while (this._tryToStartAnother()) {} // eslint-disable-line

  }

  pause() {
    this._isPaused = true;
  }

  clear() {
    this.queue = new _priority_queue_service_js__WEBPACK_IMPORTED_MODULE_1__.PriorityQueue();
  }

  onEmpty() {
    // Instantly resolve if the queue is empty
    if (this.queue.size === 0) {
      return Promise.resolve();
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveEmpty;

      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }

  onIdle() {
    // Instantly resolve if none pending and if nothing else is queued
    if (this._pendingCount === 0 && this.queue.size === 0) {
      return Promise.resolve();
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveIdle;

      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  } // private _resolveEmpty = () => { }; // eslint-disable-line
  // private _resolveIdle = () => { }; // eslint-disable-line


  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }

  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }

  _next() {
    this._pendingCount--;

    this._tryToStartAnother();
  }

  _resolvePromises() {
    this._resolveEmpty();

    this._resolveEmpty = () => {}; // eslint-disable-line


    if (this._pendingCount === 0) {
      this._resolveIdle();

      this._resolveIdle = () => {}; // eslint-disable-line

    }
  }

  _onResumeInterval() {
    this._onInterval();

    this._initializeIntervalIfNeeded();

    this._timeoutId = null;
  }

  _intervalPaused() {
    const now = Date.now();

    if (typeof this._intervalId === undefined) {
      const delay = this._intervalEnd - now;

      if (delay < 0) {
        // Act as the interval was done
        // We don't need to resume it here,
        // because it'll be resumed on line 160
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        // Act as the interval is pending
        if (this._timeoutId === null) {
          this._timeoutId = setTimeout(() => this._onResumeInterval(), delay);
        }

        return true;
      }
    }

    return false;
  }

  _tryToStartAnother() {
    if (this.queue.size === 0) {
      // We can clear the interval ("pause")
      // because we can redo it later ("resume")
      clearInterval(this._intervalId);
      this._intervalId = undefined;

      this._resolvePromises();

      return false;
    }

    if (!this._isPaused) {
      const canInitializeInterval = !this._intervalPaused();

      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        this.queue.dequeue()();

        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }

        return true;
      }
    }

    return false;
  }

  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== null) {
      return;
    }

    this._intervalId = setInterval(() => this._onInterval(), this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }

  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0) {
      clearInterval(this._intervalId);
      this._intervalId = undefined;
    }

    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

    while (this._tryToStartAnother()) {} // eslint-disable-line

  }

  get size() {
    return this.queue.size;
  }

  get pending() {
    return this._pendingCount;
  }

  get isPaused() {
    return this._isPaused;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/priority-queue.service.ts":
/*!*********************************************************************!*\
  !*** ../../packages/shopify/src/services/priority-queue.service.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PriorityQueue": function() { return /* binding */ PriorityQueue; },
/* harmony export */   "lowerBound": function() { return /* binding */ lowerBound; }
/* harmony export */ });
// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comp) {
  let first = 0;
  let count = array.length;

  while (count > 0) {
    const step = count / 2 | 0;
    let it = first + step;

    if (comp(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}
class PriorityQueue {
  constructor() {
    this._queue = [];
  }

  enqueue(run, options) {
    options = Object.assign({
      priority: 0
    }, options);
    const element = {
      priority: options.priority,
      run
    };

    if (this.size && this._queue[this.size - 1].priority >= options.priority) {
      this._queue.push(element);

      return;
    }

    const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);

    this._queue.splice(index, 0, element);
  }

  dequeue() {
    return this._queue.shift().run;
  }

  get size() {
    return this._queue.length;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/services/shopify-cart.service.ts":
/*!*******************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify-cart.service.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyCartService": function() { return /* binding */ ShopifyCartService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");
/* harmony import */ var _ribajs_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ribajs/events */ "../../packages/events/dist/esm/index.js");
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _p_queue_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./p-queue.service.js */ "../../packages/shopify/src/services/p-queue.service.ts");




 // https://github.com/sindresorhus/p-queue

class ShopifyCartService {
  /**
   * Use this method to force an update of the shopping cart object, e.g. if the shopping cart was updated outside Riba.
   * @param options
   */
  static async updateExtern() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const newCart = await this.refresh();
    const oldCart = this.cart;
    this.cart = newCart;

    if (options.triggerOnChange) {
      if ((oldCart === null || oldCart === void 0 ? void 0 : oldCart.total_price) !== (newCart === null || newCart === void 0 ? void 0 : newCart.total_price) || (oldCart === null || oldCart === void 0 ? void 0 : oldCart.item_count) !== (oldCart === null || oldCart === void 0 ? void 0 : oldCart.item_count)) {
        this.triggerOnChange(this.cart);
      }
    }

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }
  }
  /**
   * Use this to add a variant to the cart.
   * @param id Variant id
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response if successful, the JSON of the line item associated with the added variant.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart
   */


  static async add(id) {
    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const lineItemRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_ADD_URL, body, "json");

      if (lineItemRes.status >= 400) {
        throw lineItemRes.body;
      }

      const lineItem = lineItemRes.body; // Force update cart object

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_URL, {}, "json");

      if (cartRes.status >= 400) {
        throw lineItemRes.body;
      }

      const cart = cartRes.body;

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      this.triggerAdd(id, quantity, properties);
      return lineItem; // return original response
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  static async refresh() {
    const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_URL, {}, "json");
    let cart;

    if (typeof cartRes.body === "string") {
      cart = JSON.parse(cartRes.body);
    } else {
      cart = cartRes.body;
    }

    return cart;
  }

  static _get() {
    if (ShopifyCartService.cart !== null) {
      return new Promise((resolve
      /*, reject*/
      ) => {
        setTimeout(() => {
          if (ShopifyCartService.cart !== null) {
            return resolve(ShopifyCartService.cart);
          } else {
            return this._get();
          }
        }, 0);
      });
    }

    return ShopifyCartService.refresh();
  }
  /**
   * Use this to get the cart as JSON.
   * @param data
   * @return The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart
   */


  static get() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return this._get();
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * Use this to change cart attributes, the cart note, and quantities of line items in the cart.
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#update-cart
   */


  static update(id, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_UPDATE_URL, body, "form");
    }) // because type is form we need to parse the json response by self
    .then(cart => {
      return JSON.parse(cart);
    }).then(cart => {
      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * Use this to change cart attributes, the cart note, and quantities of line items in the cart.
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#update-cart
   */


  static updates(updates) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_UPDATE_URL, {
        updates
      }, "form");
    }) // because type is form we need to parse the json response by self
    .then(cart => {
      return JSON.parse(cart);
    }).then(cart => {
      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * This call sets the quantity of an item already in the cart.
   *
   * Although /cart/update.js and /cart/change.js may seem like they accomplish the same function,
   * they truly are quite different. The /cart/update.js controller allows updates to several items
   * at once, including items that may not yet be in the cart (it will add them), and it also allows
   * updates of cart attributes and the cart note. The /cart/change.js controller is only able to
   * update the quantity of one item at a time, and that item must be in the cart already. If the
   * item is not in the cart, /cart/change.js will not add it and it will then return a 404 error.
   * Whereas the /cart/update.js controller updates no quantity when any of the requested update
   * cannot be met, the /cart/change.js controller, on the other hand, will adjust the quantity to
   * add all items in stock if what is requested is greater than what's available. Use your browser's
   * JavaScript console to test things out if you're not sure about the behavior of the different request URLs.
   *
   * @param id Variant ID
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#change-cart
   */


  static async change(id, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        id,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CHANGE_URL, body, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * If you use Line Item Properties you may end up with several items in the cart that share the same variant ID.
   * How do you update the quantity of an item in the cart that has specific line item properties?
   * Once you have identified the 1-based index of the item in the cart, you can use the line property instead of id.
   * @param line -based index of the item in the cart
   * @param quantity Quantity
   * @param properties Additional properties
   * @return Response The JSON of the cart.
   */


  static async changeLine(line, quantity) {
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const body = {
        line,
        quantity
      };

      if (Object.keys(properties).length !== 0) {
        body.properties = properties;
      }

      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CHANGE_URL, body, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }
  /**
   * This call sets all quantities of all line items in the cart to zero.
   * @return The JSON of an empty cart. This does not remove cart attributes nor the cart note.
   * @return Response The JSON of an empty cart. This does not remove cart attributes nor the cart note.
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#clear-cart
   */


  static async clear() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(async () => {
      const cartRes = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.post(this.CART_POST_CLEAR_URL, {}, "form");
      let cart; // Because type is form we need to parse the json response by self

      if (typeof cartRes.body === "string") {
        cart = JSON.parse(cartRes.body);
      } else {
        cart = cartRes.body;
      }

      if (options.triggerOnChange) {
        this.triggerOnChange(cart);
      }

      return cart;
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  static async _getShippingRates(shippingAddress) {
    let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const res = await _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.get(this.CART_GET_SHIPPING_RATES_URL, {
      shipping_address: shippingAddress
    }, "json");
    const shippingRates = res.body;

    if ((0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(shippingRates) && (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(shippingRates.shipping_rates)) {
      if (normalize) {
        return this.normalizeShippingRates(shippingRates.shipping_rates);
      }

      return shippingRates.shipping_rates;
    } else {
      throw new Error("shipping_rates property not found: " + JSON.stringify(shippingRates));
    }
  }
  /**
   * Get estimated shipping rates.
   * @param shippingAddress TODO: /cart/shipping_rates.json?shipping_address[zip]=K1N 5T2&shipping_address[country]=Canada&shipping_address[province]=Ontario
   * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-shipping-rates
   */


  static getShippingRates(shippingAddress) {
    let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.requestOptionDefaults;

    if (options.triggerOnStart) {
      this.triggerOnStart();
    }

    const promise = this.queue.add(() => {
      return this._getShippingRates(shippingAddress, normalize);
    });

    if (options.triggerOnComplete) {
      this.triggerOnComplete();
    }

    return promise;
  }

  /**
   * Trigger `ShopifyCart:request:complete`, if queue is already pending no noting (in this case we already looking for onIdle)
   */
  static triggerOnComplete() {
    if (!this.waitForComplete) {
      this.waitForComplete = true;
      return this.queue.onIdle().then(() => {
        ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:complete", this.cart);
        this.waitForComplete = false;
      });
    }
  }
  /**
   * TODO check if cart values are changed
   * @param cart The cart object
   */


  static triggerOnChange(cart) {
    this.cart = cart;
    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:changed", this.cart);
  }
  /**
   * Trigger `ShopifyCart:request:start`, if not already triggered
   */


  static triggerOnStart() {
    if (this.queue.pending > 0) {
      return;
    }

    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:request:start");
  }
  /**
   * Trigger `ShopifyCart:add`
   */


  static triggerAdd(id, quantity, properties) {
    ShopifyCartService.shopifyCartEventDispatcher.trigger("ShopifyCart:add", {
      id,
      quantity,
      properties
    });
  }

  static normalizeShippingRates(shippingRates) {
    const normalized = new Array(shippingRates.length);

    for (const i in shippingRates) {
      if (shippingRates[i]) {
        const shippingRate = shippingRates[i];
        normalized[i] = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.clone)(false, shippingRate);

        if (normalized[i] && normalized[i].price) {
          normalized[i].price = (0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_3__.getNumber)(normalized[i].price);

          if (normalized[i].price) {
            normalized[i].price *= 100;
          } else {
            console.warn("Can't parse \"".concat(normalized[i].price, "\" to number"));
          }
        } else {
          console.warn("price property not defined", normalized[i]);
        }
      }
    }

    return normalized;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "queue", new _p_queue_service_js__WEBPACK_IMPORTED_MODULE_4__.PQueue({
  concurrency: 1
}));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "cart", null);

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "shopifyCartEventDispatcher", new _ribajs_events__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher("ShopifyCart"));

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_ADD_URL", "/cart/add.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_GET_URL", "/cart.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_UPDATE_URL", "/cart/update.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_CHANGE_URL", "/cart/change.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_POST_CLEAR_URL", "/cart/clear.js");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "CART_GET_SHIPPING_RATES_URL", "/cart/shipping_rates.json");

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "requestOptionDefaults", {
  triggerOnStart: true,
  triggerOnComplete: true,
  triggerOnChange: true
});

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyCartService, "waitForComplete", false);

/***/ }),

/***/ "../../packages/shopify/src/services/shopify-product.service.ts":
/*!**********************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify-product.service.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyProductService": function() { return /* binding */ ShopifyProductService; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ribajs/core */ "../../packages/core/src/index.ts");


class ShopifyProductService {
  /**
   * Get product object by handle
   * @param handle product handle
   */
  static get(handle) {
    if (this.cache[handle]) {
      return new Promise(resolve => {
        resolve(this.cache[handle]);
      });
    } else {
      return _ribajs_core__WEBPACK_IMPORTED_MODULE_1__.HttpService.getJSON("/products/".concat(handle, ".js")).then(res => {
        const product = res.body;
        this.cache[handle] = product;
        return this.cache[handle];
      });
    }
  }
  /**
   * Check if the option values fits to the current variant.
   * @param variant
   * @param optionValues
   * @return Returns true if the option values fitting to the variant
   */


  static fitsVariantOptions(variant, optionValues) {
    let fit = true; // position0 is the option index starting on 0

    for (const position0 in optionValues) {
      if (optionValues[position0]) {
        const optionValue = optionValues[position0];
        fit = fit && variant.options.indexOf(optionValue.toString()) > -1;
      }
    }

    return fit;
  }
  /**
   * Get product variant of (selected) option values
   * @param optionValues (selected) option values
   */


  static getVariantOfOptions(product, optionValues) {
    let result = null;

    if (product) {
      for (const i in product.variants) {
        if (product.variants[i]) {
          result = null;
          const variant = product.variants[i];
          const fits = this.fitsVariantOptions(variant, optionValues);

          if (fits) {
            result = variant;
            break;
          }
        }
      }
    }

    return result;
  }
  /**
   * Get variant object by variant id
   * @param id Variant id
   */


  static getVariant(product, id) {
    const result = product.variants.find(variant => variant.id === id) || null;
    return result;
  }
  /**
   * Get product option by name
   * @param product product which holds the options
   * @param name option name
   */


  static getOption(product, name) {
    const result = product.options.find(option => option.name.toLowerCase() === name.toLowerCase());
    return result;
  }
  /**
   * Get product option which includes a substring
   * @param product product which holds the options
   * @param name option name
   */


  static getOptionIncludes(product, searchSubstr) {
    const result = product.options.find(option => option.name.indexOf(searchSubstr) !== -1);
    return result;
  }
  /**
   * Prepare product, remove protocol from featured_image, lowercase the option names
   * @param product product object
   */


  static prepare(product) {
    // remove protocol
    product.featured_image.replace(/(^\w+:|^)\/\//, "//"); // all option names to lower case

    for (const option of product.options) {
      option.name = option.name.toLowerCase();
    }

    return product;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(ShopifyProductService, "cache", {});

/***/ }),

/***/ "../../packages/shopify/src/services/shopify.service.ts":
/*!**************************************************************!*\
  !*** ../../packages/shopify/src/services/shopify.service.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShopifyService": function() { return /* binding */ ShopifyService; }
/* harmony export */ });
/* harmony import */ var _ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ribajs/utils/src/type.js */ "../../packages/utils/src/type.ts");

/**
 * Custom version of shopify tools like api.jquery.js / option-selection.js
 * @see https://mayert-douglas4935.myshopify.com/pages/api
 */

class ShopifyService {
  static formatMoneyWithDelimiters(num) {
    let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    let thousands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ",";
    let decimal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ".";

    if (!(0,_ribajs_utils_src_type_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(num) || num === null) {
      return "0";
    }

    const numStr = (num / 100.0).toFixed(precision);
    const parts = numStr.split(".");
    const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands);
    const cents = parts[1] ? decimal + parts[1] : "";
    return dollars + cents;
  }
  /** singleton instance */


  static get moneyWithCurrencyFormat() {
    if (window.model && window.model.system && window.model.system.shopSettings) {
      return window.model.system.shopSettings.moneyWithCurrencyFormat;
    }
  }

  static get moneyFormat() {
    if (window.model && window.model.system && window.model.system.shopSettings) {
      return window.model.system.shopSettings.moneyFormat;
    }
  }

  constructor() {
    if (ShopifyService.instance) {
      return ShopifyService.instance;
    }

    ShopifyService.instance = this;
  }

}

/***/ }),

/***/ "../../packages/shopify/src/shopify.module.ts":
/*!****************************************************!*\
  !*** ../../packages/shopify/src/shopify.module.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shopifyModule": function() { return /* binding */ shopifyModule; }
/* harmony export */ });
/* harmony import */ var _binders_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binders/index.js */ "../../packages/shopify/src/binders/index.ts");
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatters/index.js */ "../../packages/shopify/src/formatters/index.ts");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/index.js */ "../../packages/shopify/src/services/index.ts");



const shopifyModule = {
  binders: _binders_index_js__WEBPACK_IMPORTED_MODULE_0__,
  formatters: _formatters_index_js__WEBPACK_IMPORTED_MODULE_1__,
  services: {},
  components: {},

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _services_index_js__WEBPACK_IMPORTED_MODULE_2__.ModuleService.setSingleton(options);
    return this;
  }

};

/***/ }),

/***/ "../../packages/utils/src/color.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/color.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "consoleColoured": function() { return /* binding */ consoleColoured; },
/* harmony export */   "getRandomColor": function() { return /* binding */ getRandomColor; }
/* harmony export */ });
/**
 * Generates a random color
 * @see https://stackoverflow.com/a/1484514/1465919
 */
const getRandomColor = () => {
  const letters = "0123456789ABCDEF";
  let color = "#";

  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }

  return color;
};
const consoleColoured = function (options) {
  const printArgs = [];

  if (options.color) {
    if (options.namespace) {
      printArgs.push("%c[".concat(options.namespace, "] ").concat(options.mode.toUpperCase(), ": "));
    } else {
      printArgs.push("%c".concat(options.mode.toUpperCase(), ": "));
    }

    printArgs.push("color: ".concat(options.color));
  } else {
    if (options.namespace) {
      printArgs.push("[".concat(options.namespace, "] ").concat(options.mode.toUpperCase(), ": "));
    } else {
      printArgs.push("".concat(options.mode.toUpperCase(), ": "));
    }
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  printArgs.push(...args);
  console[options.mode](...printArgs);
};

/***/ }),

/***/ "../../packages/utils/src/constants.ts":
/*!*********************************************!*\
  !*** ../../packages/utils/src/constants.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE64_PREFIX": function() { return /* binding */ BASE64_PREFIX; },
/* harmony export */   "KEYPATH": function() { return /* binding */ KEYPATH; },
/* harmony export */   "PRIMITIVE": function() { return /* binding */ PRIMITIVE; },
/* harmony export */   "QUOTED_STR": function() { return /* binding */ QUOTED_STR; }
/* harmony export */ });
const BASE64_PREFIX = "base64:";
const PRIMITIVE = 0;
const KEYPATH = 1;
const QUOTED_STR = /^'.*'$|^".*"$/; // regex to test if string is wrapped in " or '

/***/ }),

/***/ "../../packages/utils/src/control.ts":
/*!*******************************************!*\
  !*** ../../packages/utils/src/control.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": function() { return /* binding */ debounce; },
/* harmony export */   "debounceCb": function() { return /* binding */ debounceCb; },
/* harmony export */   "debounceF": function() { return /* binding */ debounceF; },
/* harmony export */   "debounceT": function() { return /* binding */ debounceT; },
/* harmony export */   "deferred": function() { return /* binding */ deferred; },
/* harmony export */   "noop": function() { return /* binding */ noop; },
/* harmony export */   "pTimeout": function() { return /* binding */ pTimeout; },
/* harmony export */   "sleep": function() { return /* binding */ sleep; },
/* harmony export */   "throttle": function() { return /* binding */ throttle; },
/* harmony export */   "times": function() { return /* binding */ times; },
/* harmony export */   "waitForProp": function() { return /* binding */ waitForProp; }
/* harmony export */ });
const noop = () => {
  /** do nothing */
};
const times = (n, cb) => {
  for (let i = 0; i < n; i++) {
    cb();
  }
};
const sleep = time => {
  return new Promise(resolve => setTimeout(resolve, time));
};
const waitForProp = async function (propName) {
  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;

  while (!obj[propName]) {
    await sleep(delay);
  }

  return obj[propName];
};
/**
 * Return a new "Deferred" object
 * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred
 *
 * @return
 */

const deferred = () => {
  const obj = {};
  const prom = new Promise((resolve, reject) => {
    obj.resolve = resolve;
    obj.reject = reject;
  });
  obj.promise = prom;
  return obj;
};
/**
 * debounce (Timeout + Callback edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the setTimeout method
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 */

const debounceCb = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let timeout;
  return function () {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    clearTimeout(timeout);
    timeout = setTimeout(() => fn(...params), wait);
  };
};
/**
 * debounce (Timeout + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the setTimeout method
 */

const debounceT = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let resolve;
  let reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  let debounce = undefined;
  return function () {
    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }

    if (!debounce) debounce = debounceCb(() => {
      try {
        resolve(fn(...params)); // Reset

        debounce = undefined;
      } catch (error) {
        reject(error);
      }
    }, wait);
    debounce(...params);
    return promise;
  };
};
/**
 * debounce (RequestAnimationFrame + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses internally the requestAnimationFrame method
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 */

const debounceF = fn => {
  // This holds the requestAnimationFrame reference, so we can cancel it if we wish
  let frame = null;
  let resolve;
  let reject;
  let promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  }); // The debounce function returns a new function that can receive a variable number of arguments

  return function () {
    for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      params[_key3] = arguments[_key3];
    }

    // If the frame variable has been defined, clear it now, and queue for next frame
    if (frame) {
      cancelAnimationFrame(frame);
    } // Queue our function call for the next frame


    frame = window.requestAnimationFrame(() => {
      // Call our function and pass any params we received
      try {
        resolve(fn(...params));
      } catch (error) {
        reject(error);
      } // reset frame and initialize new promise for next call


      frame = null;
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    });
    return promise;
  };
};
/**
 * debounce (RequestAnimationFrame + Promise edition)
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive.
 * In the debouncing technique, no matter how many times the user fires the event,
 * the attached function will be executed only after the specified time once the user stops firing the event.
 * This method uses requestAnimationFrame method if no delay is passed, otherwise a timeout
 */

const debounce = (fn, wait) => {
  if (typeof wait === "number") {
    return debounceT(fn, wait);
  } else {
    return debounceF(fn);
  }
};
/**
 * The throttle function receives our function as a parameter
 * It is recommended to use this method for resize events
 * Throttling is a technique in which, no matter how many times the user fires the event,
 * the attached function will be executed only once in a given time interval.
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 * @see https://gist.github.com/peduarte/969217eac456538789e8fac8f45143b4
 */

const throttle = function (fn) {
  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  let timerId = null;
  let resolve;
  let reject;
  let promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return function () {
    if (timerId === null) {
      timerId = window.setTimeout(() => {
        // reset timerId and initialize new promise for next call
        timerId = null;
        promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
      }, wait);

      try {
        resolve(fn(...arguments));
      } catch (error) {
        reject(error);
      }
    }

    return promise;
  };
};
/**
 * Cancel promise on timeout.
 */

const pTimeout = (value, ms, error) => {
  const def = deferred();
  const p = {
    _timeout: setTimeout(() => {
      def.reject(error || new Error("Timeout after ".concat(ms, "ms")));
    }, ms),
    promise: def.promise,
    cancel: () => {
      def.resolve(value);

      if (p._timeout) {
        clearTimeout(p._timeout);
      }
    }
  };
  value.then(value => {
    p.cancel();
    def.resolve(value);
  }).catch(error => {
    p.cancel();
    def.reject(error);
  });
  return p.promise;
};

/***/ }),

/***/ "../../packages/utils/src/dom.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/dom.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAX_UID": function() { return /* binding */ MAX_UID; },
/* harmony export */   "elementIsHidden": function() { return /* binding */ elementIsHidden; },
/* harmony export */   "elementIsVisible": function() { return /* binding */ elementIsVisible; },
/* harmony export */   "getDataset": function() { return /* binding */ getDataset; },
/* harmony export */   "getElementFromEvent": function() { return /* binding */ getElementFromEvent; },
/* harmony export */   "getElementIndex": function() { return /* binding */ getElementIndex; },
/* harmony export */   "getInputValue": function() { return /* binding */ getInputValue; },
/* harmony export */   "getScrollHeight": function() { return /* binding */ getScrollHeight; },
/* harmony export */   "getScrollWidth": function() { return /* binding */ getScrollWidth; },
/* harmony export */   "getUID": function() { return /* binding */ getUID; },
/* harmony export */   "getViewportDimensions": function() { return /* binding */ getViewportDimensions; },
/* harmony export */   "hasChildNodesTrim": function() { return /* binding */ hasChildNodesTrim; },
/* harmony export */   "htmlToElement": function() { return /* binding */ htmlToElement; },
/* harmony export */   "htmlToElements": function() { return /* binding */ htmlToElements; },
/* harmony export */   "isCustomElement": function() { return /* binding */ isCustomElement; },
/* harmony export */   "isInViewport": function() { return /* binding */ isInViewport; },
/* harmony export */   "isVisible": function() { return /* binding */ isVisible; },
/* harmony export */   "loadScript": function() { return /* binding */ loadScript; },
/* harmony export */   "ready": function() { return /* binding */ ready; },
/* harmony export */   "scrollTo": function() { return /* binding */ scrollTo; },
/* harmony export */   "scrollToPosition": function() { return /* binding */ scrollToPosition; },
/* harmony export */   "scrolling": function() { return /* binding */ scrolling; },
/* harmony export */   "selectAll": function() { return /* binding */ selectAll; },
/* harmony export */   "setAttribute": function() { return /* binding */ setAttribute; },
/* harmony export */   "toArray": function() { return /* binding */ toArray; },
/* harmony export */   "waitForCustomElement": function() { return /* binding */ waitForCustomElement; }
/* harmony export */ });
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type.js */ "../../packages/utils/src/type.ts");

const MAX_UID = 1000;
/**
 * Sets an attribute. The peculiarity of this custom method is that when an object is passed, it is converted to a json string.
 * This is useful if, for example, an object is to be passed to a custom element via an attribute.
 * @note This method is used by the AttributeBinder.
 * @param el
 * @param attributeName
 * @param newValue
 * @returns
 */

const setAttribute = (el, attributeName, newValue) => {
  if (!attributeName) {
    throw new Error("Can't set attribute of " + attributeName);
  }

  const oldValue = el.getAttribute(attributeName);
  let newValueFormatted;
  let changed = false;

  switch (typeof newValue) {
    case "string":
    case "number":
    case "boolean":
      newValueFormatted = String(newValue);
      break;

    case "undefined":
      newValueFormatted = undefined;

    case "object":
      if (newValue === null) {
        newValueFormatted = null;
      } else {
        newValueFormatted = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.jsonStringify)(newValue, 0);
      }

      break;

    default:
      newValueFormatted = String(newValue);
      break;
  }

  if (newValueFormatted === null || newValueFormatted === undefined) {
    el.removeAttribute(attributeName);
    changed = true;
  } else {
    if (oldValue !== newValueFormatted) {
      el.setAttribute(attributeName, newValueFormatted);
      changed = true;
    }
  }

  return {
    name: attributeName,
    newValue: newValueFormatted,
    oldValue,
    changed
  };
};
const getDataset = element => {
  const dataset = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.clone)(false, element.dataset);

  for (const attr in dataset) {
    if (dataset[attr]) {
      dataset[attr] = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.parseType)(dataset[attr], true).value;
    }
  }

  return dataset;
};
/**
 * Calls el.hasChildNodes but ignores empty strings, the default hasChildNodes would return true on `<div> </div>`.
 * Very useful to check within a component if the component has set child elements to load or overwrite the component template
 * @param el
 */

const hasChildNodesTrim = el => {
  if (!el.hasChildNodes()) {
    return false;
  }

  const childNodes = el.childNodes;

  if (childNodes.length === 1 && childNodes[0].nodeType === 3) {
    var _childNodes$0$nodeVal;

    if (!childNodes[0].nodeValue || ((_childNodes$0$nodeVal = childNodes[0].nodeValue) === null || _childNodes$0$nodeVal === void 0 ? void 0 : _childNodes$0$nodeVal.trim()) === "") {
      return false;
    }
  }

  return true;
};
/**
 *
 */

const getInputValue = el => {
  const results = [];

  if (el.type === "checkbox") {
    return el.checked;
  } else if (el.type === "select-multiple") {
    const options = el.options;

    for (const key in options) {
      if (options[key]) {
        const option = options[key];

        if (option.selected) {
          results.push(option.value);
        }
      }
    }

    return results;
  } else if (el.hasAttribute && el.hasAttribute("contenteditable")) {
    return el.innerHTML; // TODO write test for contenteditable
  } else {
    return el.value;
  }
};
const elementIsHidden = el => {
  return el.hasAttribute("hidden") || el.style.display === "none" || el.style.visibility === "hidden" || window.getComputedStyle(el).display === "none" || window.getComputedStyle(el).visibility === "hidden";
};
const elementIsVisible = el => {
  return !elementIsHidden(el);
};
/**
 * Observe scroll event
 * @param scrollElement The element or window you want to observe
 * @returns Returns a promise which resolves when an element stops scrolling
 */

const scrolling = async scrollElement => {
  return new Promise(resolve => {
    let scrollTimeout;

    const checkScroll = () => {
      if (scrollTimeout !== undefined) {
        clearTimeout(scrollTimeout);
      }

      scrollTimeout = setTimeout(() => {
        resolve();
      }, 100);
    };

    scrollElement.removeEventListener("scroll", checkScroll);
    scrollElement.addEventListener("scroll", checkScroll);
    checkScroll();
  });
};
/**
 * Scrolls to an element
 *
 * @see https://stackoverflow.com/a/31987330
 * @see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/
 * @param element
 * @param to
 * @param duration
 */

const scrollTo = async function (to) {
  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let scrollElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;
  let angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "vertical";
  let behavior = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "smooth";

  if (!scrollElement) {
    scrollElement = window;
  }

  const scrollPromise = scrolling(scrollElement);
  let top = 0;
  let left = 0; // If element is window

  if (scrollElement.document) {
    if (angle === "vertical") {
      const scrollY = scrollElement.scrollY || scrollElement.pageYOffset;
      top = Math.round(to.getBoundingClientRect().top + scrollY - offset);
    } else {
      const scrollX = scrollElement.scrollX || scrollElement.pageXOffset;
      left = Math.round(to.getBoundingClientRect().left + scrollX - offset);
    }
  } else {
    if (angle === "vertical") {
      const marginTop = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(window.getComputedStyle(scrollElement).marginTop);
      top = Math.round(to.offsetTop - offset - marginTop);
    } else {
      const marginLeft = (0,_type_js__WEBPACK_IMPORTED_MODULE_0__.justDigits)(window.getComputedStyle(scrollElement).marginLeft);
      left = Math.round(to.offsetLeft - offset - marginLeft);
    }
  }

  scrollElement.scroll({
    behavior,
    left,
    top
  });
  return scrollPromise;
};
const getScrollHeight = scrollElement => {
  // if element is window
  if (scrollElement.document) {
    const win = scrollElement;
    const doc = win.document;
    return win.scrollMaxY || Math.max(doc.body.scrollHeight, doc.body.offsetHeight, doc.documentElement.clientHeight, doc.documentElement.scrollHeight, doc.documentElement.offsetHeight, 0);
  }

  return scrollElement.scrollHeight;
};
const getScrollWidth = scrollElement => {
  // if element is window
  if (scrollElement.document) {
    const win = scrollElement;
    const doc = win.document;
    return win.scrollMaxX || Math.max(doc.body.scrollWidth, doc.body.offsetWidth, doc.documentElement.clientWidth, doc.documentElement.scrollWidth, doc.documentElement.offsetWidth);
  }

  return scrollElement.scrollWidth;
};
const scrollToPosition = async function (scrollElement, position) {
  let angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "vertical";
  let behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "smooth";
  let top;
  let left;

  if (!scrollElement) {
    return;
  }

  const scrollPromise = scrolling(scrollElement);

  if (angle === "vertical" || angle === "both") {
    switch (position) {
      case "start":
        top = 0;
        break;

      case "end":
        top = getScrollHeight(scrollElement);
        break;

      case "center":
        top = getScrollHeight(scrollElement);

        if (top) {
          top /= 2; // if element is window

          if (scrollElement.document) {
            top -= scrollElement.visualViewport.height / 2;
          } else {
            top -= scrollElement.clientHeight / 2;
          }
        }

        break;

      default:
        top = position;
        break;
    }
  }

  if (angle === "horizontal" || angle === "both") {
    switch (position) {
      case "start":
        left = 0;
        break;

      case "end":
        left = getScrollWidth(scrollElement);
        break;

      case "center":
        left = getScrollWidth(scrollElement);

        if (left) {
          left /= 2; // if element is window

          if (scrollElement.document) {
            left -= scrollElement.visualViewport.width / 2;
          } else {
            left -= scrollElement.clientWidth / 2;
          }
        }

        break;

      default:
        left = position;
        break;
    }
  }

  scrollElement.scroll({
    behavior,
    top,
    left
  });
  return scrollPromise;
};
const getElementFromEvent = event => {
  const el = event.target || event.currentTarget || event.relatedTarget || // JQuery event
  event.delegateTarget || event.fromElement;
  return el;
};
const getViewportDimensions = () => {
  const w = Math.max(document.documentElement ? document.documentElement.clientWidth : 0, window.innerWidth || 0);
  const h = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0);
  return {
    h,
    w
  };
};
/**
 * Determine if an element is in the viewport
 * @param elem The element
 * @param offsetTop (Default  Distance to the top of the screen, if this is 0, the element must be scrolled until the top of the screen.
 * @param offsetBottom Distance to the bottom of the screen, if this is 0, the scroll position must be over the element
 * @return Returns true if element is in the viewport
 */

const isInViewport = function (elem, offsetTop) {
  let offsetBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (!elem) {
    return false;
  }

  const distance = elem.getBoundingClientRect();

  if (!offsetTop) {
    const vp = getViewportDimensions();
    offsetTop = vp.h - distance.height;
  }

  return distance.top + distance.height >= offsetBottom && distance.bottom - distance.height <= offsetTop;
};
/**
 * Select all of an contenteditable or input element
 * @param element The element you want to select
 */

const selectAll = element => {
  // need setTimeout for safari
  setTimeout(() => {
    if (typeof element.selectionStart !== "undefined") {
      element.selectionStart = 0;
      element.selectionEnd = 999;
    }

    if (typeof element.select === "function") {
      element.select();
    }

    if (typeof element.setSelectionRange === "function") {
      element.setSelectionRange(0, 999);
    }

    if (window.getSelection) {
      const range = document.createRange();
      range.selectNodeContents(element);
      const selection = window.getSelection();

      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
        selection.selectAllChildren(element);
      }
    }

    if (document.body.createTextRange) {
      const range = document.body.createTextRange(); // Creates TextRange object

      range.moveToElementText(element); // sets Range

      range.select(); // make selection.
    }

    if (document.execCommand) {
      document.execCommand("selectAll", false, undefined);
    }
  }, 0);
};
/**
 * Cross-browser Document Ready check
 * @see https://www.competa.com/blog/cross-browser-document-ready-with-vanilla-javascript/
 * @param callback
 */

const ready = callback => {
  if (!callback || typeof callback !== "function") {
    return new Error("The callback is required!");
  }

  const checkReady = () => {
    if (document.readyState !== "loading") {
      callback();

      if (document.attachEvent) {
        document.detachEvent("onreadystatechange", checkReady);
      }

      document.removeEventListener("DOMContentLoaded", checkReady);
    }
  };

  if (document.attachEvent) {
    document.attachEvent("onreadystatechange", checkReady);
  }

  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", checkReady);
  }

  checkReady();
};
const loadScript = async function (src, id) {
  let async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  let defer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  const script = await new Promise((resolve, reject) => {
    let script = document.getElementById(id);

    if (script) {
      console.warn("script already loaded, do nothing.");

      if (script.hasAttribute("loaded")) {
        return resolve(script);
      }
    } else {
      script = document.createElement("script");
      script.type = "text/javascript";
      script.id = id;
      script.src = src;

      if (async) {
        script.async = true;
      }

      if (defer) {
        script.defer = true;
      }

      const head = document.head || document.getElementsByTagName("head")[0];
      head.appendChild(script);
    } // IE


    if (script.readyState) {
      script.onreadystatechange = function () {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          var _script;

          script.onreadystatechange = null;
          (_script = script) === null || _script === void 0 ? void 0 : _script.setAttribute("loaded", "true");
          resolve(script);
        }
      };
    } // Other browsers


    script.addEventListener("load", () => {
      var _script2;

      (_script2 = script) === null || _script2 === void 0 ? void 0 : _script2.setAttribute("loaded", "true");
      resolve(script);
    });
    script.addEventListener("error", function () {
      var _script3;

      const error = new Error("Error on load script " + ((_script3 = script) === null || _script3 === void 0 ? void 0 : _script3.src));
      console.error(error);
      console.error(...arguments);
      reject(error);
    });
  });
  return script;
};
const getUID = prefix => {
  do {
    prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
  } while (document.getElementById(prefix));

  return prefix;
};
/**
 * Detects if dom element is custom element and a registered riba component
 * @see https://stackoverflow.com/a/47737765/1465919
 * @param element The element or tag name you want to test
 * @param isRegistered If true the element must also be a registered as a custom element,
 * @param isUpgraded
 */

const isCustomElement = function (element) {
  let isRegistered = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let isUpgraded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  // A custom element's name is required to contain a -, whereas an HTML-defined element will not. So:
  const localName = typeof element === "string" ? element : element.localName;
  const isCustomElement = localName.indexOf("-") !== -1;

  if (isCustomElement && isRegistered && customElements) {
    const customConstructor = customElements.get(localName);

    if (!customConstructor) {
      return false;
    } // If the element is not yet upgraded the constructor is still equal to HTMLElement


    if (isUpgraded) {
      return customConstructor === element.constructor;
    } // If we don't need to check for upgraded status


    return true;
  }

  return isCustomElement;
};
/**
 * Waits for CustomElement to be upgraded, returns the element.
 * @param element The custom Element waiting for an upgrade.
 * @returns the element after the upgrade
 */

const waitForCustomElement = async element => {
  await customElements.whenDefined(element.localName);
  return element;
};
/**
 * Creating a new DOM element from an HTML string
 * @param html representing a single element
 * @example
 * ```js
 *   const td = htmlToElement("<td>foo</td>");
 *   const div = htmlToElement("<div><span>nested</span> <span>stuff</span></div>");
 * ```
 */

const htmlToElement = html => {
  const template = document.createElement("template");
  html = html.trim(); // Never return a text node of whitespace as the result

  template.innerHTML = html;
  return template.content.firstChild;
};
/**
 * Creating a new DOM elements from an HTML string
 * @param html representing any number of sibling elements
 * @example
 * ```js
 *   var rows = htmlToElements('<tr><td>foo</td></tr><tr><td>bar</td></tr>');
 * ```
 */

const htmlToElements = html => {
  const template = document.createElement("template");
  template.innerHTML = html;
  return template.content.childNodes;
};
/**
 * Converts a NodeList or HTMLCollection to an Array
 * @param nodeList
 * @returns
 */

const toArray = nodeList => {
  if (!nodeList) {
    return [];
  }

  return [].slice.call(nodeList);
};
/**
 * Check if any html element is visible in the dom
 * @param element
 * @returns
 */

const isVisible = element => {
  if (!element) {
    return false;
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    const elementStyle = getComputedStyle(element);
    const parentNodeStyle = getComputedStyle(element.parentNode);
    return elementStyle.display !== "none" && parentNodeStyle.display !== "none" && elementStyle.visibility !== "hidden";
  }

  return false;
};
/**
 * Similar to JQuery's `$(el).index();`
 * @param el
 */

const getElementIndex = el => {
  if (!el) {
    return -1;
  }

  let i = 0;

  do {
    i++;
    el = el.previousElementSibling;
  } while (el);

  return i;
};

/***/ }),

/***/ "../../packages/utils/src/env.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/env.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBrowser": function() { return /* binding */ isBrowser; },
/* harmony export */   "isDeno": function() { return /* binding */ isDeno; },
/* harmony export */   "isJsDom": function() { return /* binding */ isJsDom; },
/* harmony export */   "isNode": function() { return /* binding */ isNode; },
/* harmony export */   "isWebWorker": function() { return /* binding */ isWebWorker; }
/* harmony export */ });
// Credits https://github.com/flexdinesh/browser-or-node
// For real types see https://github.com/denoland/deno/blob/main/core/lib.deno_core.d.ts
const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
const isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
const isWebWorker = typeof self === "object" && self.constructor && self.constructor.name === "DedicatedWorkerGlobalScope";
/**
 * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0
 * @see https://github.com/jsdom/jsdom/issues/1537
 */

const isJsDom = typeof window !== "undefined" && window.name === "nodejs" || typeof navigator !== "undefined" && (navigator.userAgent.indexOf("Node.js") !== -1 || navigator.userAgent.indexOf("jsdom") !== -1);
const isDeno = typeof Deno !== "undefined" && typeof Deno.core !== "undefined";


/***/ }),

/***/ "../../packages/utils/src/immediate.ts":
/*!*********************************************!*\
  !*** ../../packages/utils/src/immediate.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearImmediate": function() { return /* binding */ clearImmediate; },
/* harmony export */   "setImmediate": function() { return /* binding */ setImmediate; }
/* harmony export */ });
var _window, _window2;

/**
 * Simplified version of https://github.com/YuzuJS/setImmediate
 * TODO Port tests
 */
let nextHandle = 1; // Spec says greater than zero

const tasksByHandle = {};
let currentlyRunningATask = false;
const messagePrefix = "setImmediate$" + Math.random() + "$";

const onGlobalMessage = function (event) {
  if (event.source === window && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
    runIfPresent(+event.data.slice(messagePrefix.length));
  }
};

if (window) {
  window.addEventListener("message", onGlobalMessage, false);
}

function registerImmediate(handle) {
  window.postMessage(messagePrefix + handle, "*");
}

function _setImmediate(callback) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  console.debug("Use setImmediate polyfill"); // Callback can either be a function or a string

  if (typeof callback !== "function") {
    callback = new Function("" + callback);
  } // Store and register the task


  const task = {
    callback: callback,
    args
  };
  tasksByHandle[nextHandle] = task;
  registerImmediate(nextHandle);
  return nextHandle++;
}

function _clearImmediate(handle) {
  delete tasksByHandle[handle];
}

function run(task) {
  const callback = task.callback;
  const args = task.args;
  callback(...args);
}

function runIfPresent(handle) {
  // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
  // So if we're currently running a task, we'll need to delay this invocation.
  if (currentlyRunningATask) {
    // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
    // "too much recursion" error.
    setTimeout(runIfPresent, 0, handle);
  } else {
    const task = tasksByHandle[handle];

    if (task) {
      currentlyRunningATask = true;

      try {
        run(task);
      } finally {
        _clearImmediate(handle);

        currentlyRunningATask = false;
      }
    }
  }
}

const setImmediate = ((_window = window) === null || _window === void 0 ? void 0 : _window.setImmediate) || _setImmediate;
const clearImmediate = ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.clearImmediate) || _clearImmediate;

/***/ }),

/***/ "../../packages/utils/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE64_PREFIX": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.BASE64_PREFIX; },
/* harmony export */   "KEYPATH": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.KEYPATH; },
/* harmony export */   "MAX_UID": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.MAX_UID; },
/* harmony export */   "PRIMITIVE": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.PRIMITIVE; },
/* harmony export */   "QUOTED_STR": function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.QUOTED_STR; },
/* harmony export */   "camelCase": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.camelCase; },
/* harmony export */   "capitalize": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.capitalize; },
/* harmony export */   "classOf": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.classOf; },
/* harmony export */   "cleanLink": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.cleanLink; },
/* harmony export */   "clearImmediate": function() { return /* reexport safe */ _immediate_js__WEBPACK_IMPORTED_MODULE_6__.clearImmediate; },
/* harmony export */   "clearObjFromRiba": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.clearObjFromRiba; },
/* harmony export */   "clone": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.clone; },
/* harmony export */   "consoleColoured": function() { return /* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_1__.consoleColoured; },
/* harmony export */   "copyTextToClipboard": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.copyTextToClipboard; },
/* harmony export */   "couldBeJson": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.couldBeJson; },
/* harmony export */   "debounce": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounce; },
/* harmony export */   "debounceCb": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceCb; },
/* harmony export */   "debounceF": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceF; },
/* harmony export */   "debounceT": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.debounceT; },
/* harmony export */   "deferred": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.deferred; },
/* harmony export */   "elementIsHidden": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.elementIsHidden; },
/* harmony export */   "elementIsVisible": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.elementIsVisible; },
/* harmony export */   "escapeHtml": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.escapeHtml; },
/* harmony export */   "extend": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.extend; },
/* harmony export */   "fromBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.fromBase64; },
/* harmony export */   "getDataset": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getDataset; },
/* harmony export */   "getElementFromEvent": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementFromEvent; },
/* harmony export */   "getElementIndex": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getElementIndex; },
/* harmony export */   "getHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getHash; },
/* harmony export */   "getInputValue": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getInputValue; },
/* harmony export */   "getLocation": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getLocation; },
/* harmony export */   "getNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.getNumber; },
/* harmony export */   "getOS": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.getOS; },
/* harmony export */   "getOSType": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.getOSType; },
/* harmony export */   "getPort": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getPort; },
/* harmony export */   "getRandomColor": function() { return /* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_1__.getRandomColor; },
/* harmony export */   "getScrollHeight": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getScrollHeight; },
/* harmony export */   "getScrollWidth": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getScrollWidth; },
/* harmony export */   "getString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.getString; },
/* harmony export */   "getUID": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getUID; },
/* harmony export */   "getUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getUrl; },
/* harmony export */   "getUrlParameter": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.getUrlParameter; },
/* harmony export */   "getViewportDimensions": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.getViewportDimensions; },
/* harmony export */   "handleize": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.handleize; },
/* harmony export */   "hasChildNodesTrim": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.hasChildNodesTrim; },
/* harmony export */   "hashCode": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.hashCode; },
/* harmony export */   "htmlToElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.htmlToElement; },
/* harmony export */   "htmlToElements": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.htmlToElements; },
/* harmony export */   "isAbsoluteUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isAbsoluteUrl; },
/* harmony export */   "isBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isBase64; },
/* harmony export */   "isBoolean": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isBoolean; },
/* harmony export */   "isBrowser": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isBrowser; },
/* harmony export */   "isCustomElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isCustomElement; },
/* harmony export */   "isDefined": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isDefined; },
/* harmony export */   "isDeno": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isDeno; },
/* harmony export */   "isDesktop": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isDesktop; },
/* harmony export */   "isExternalUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isExternalUrl; },
/* harmony export */   "isFunction": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isFunction; },
/* harmony export */   "isGameConsole": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isGameConsole; },
/* harmony export */   "isInViewport": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isInViewport; },
/* harmony export */   "isInternalUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.isInternalUrl; },
/* harmony export */   "isJsDom": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isJsDom; },
/* harmony export */   "isJson": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isJson; },
/* harmony export */   "isMobile": function() { return /* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_7__.isMobile; },
/* harmony export */   "isNode": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isNode; },
/* harmony export */   "isNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isNumber; },
/* harmony export */   "isObject": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isObject; },
/* harmony export */   "isString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isString; },
/* harmony export */   "isUndefined": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.isUndefined; },
/* harmony export */   "isVisible": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.isVisible; },
/* harmony export */   "isWebWorker": function() { return /* reexport safe */ _env_js__WEBPACK_IMPORTED_MODULE_5__.isWebWorker; },
/* harmony export */   "jsonStringify": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.jsonStringify; },
/* harmony export */   "justDigits": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.justDigits; },
/* harmony export */   "kebabCase": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.kebabCase; },
/* harmony export */   "loadScript": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.loadScript; },
/* harmony export */   "noop": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.noop; },
/* harmony export */   "normalizeUrl": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.normalizeUrl; },
/* harmony export */   "onParentRoute": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.onParentRoute; },
/* harmony export */   "onRoute": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.onRoute; },
/* harmony export */   "pTimeout": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.pTimeout; },
/* harmony export */   "parseJsonString": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.parseJsonString; },
/* harmony export */   "parseType": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.parseType; },
/* harmony export */   "ready": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.ready; },
/* harmony export */   "removeHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.removeHash; },
/* harmony export */   "replaceUmlautChars": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.replaceUmlautChars; },
/* harmony export */   "scrollTo": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrollTo; },
/* harmony export */   "scrollToPosition": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrollToPosition; },
/* harmony export */   "scrolling": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.scrolling; },
/* harmony export */   "selectAll": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.selectAll; },
/* harmony export */   "setAttribute": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.setAttribute; },
/* harmony export */   "setImmediate": function() { return /* reexport safe */ _immediate_js__WEBPACK_IMPORTED_MODULE_6__.setImmediate; },
/* harmony export */   "sleep": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.sleep; },
/* harmony export */   "stringHasNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringHasNumber; },
/* harmony export */   "stringHasOnlyNumbers": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringHasOnlyNumbers; },
/* harmony export */   "stringIsPhoneNumber": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stringIsPhoneNumber; },
/* harmony export */   "stripHtml": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.stripHtml; },
/* harmony export */   "throttle": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.throttle; },
/* harmony export */   "times": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.times; },
/* harmony export */   "toArray": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.toArray; },
/* harmony export */   "toBase64": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.toBase64; },
/* harmony export */   "toType": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.toType; },
/* harmony export */   "updateHash": function() { return /* reexport safe */ _url_js__WEBPACK_IMPORTED_MODULE_9__.updateHash; },
/* harmony export */   "waitForCustomElement": function() { return /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_4__.waitForCustomElement; },
/* harmony export */   "waitForProp": function() { return /* reexport safe */ _control_js__WEBPACK_IMPORTED_MODULE_3__.waitForProp; },
/* harmony export */   "withoutMultiWhitespace": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.withoutMultiWhitespace; },
/* harmony export */   "withoutSpecialChars": function() { return /* reexport safe */ _type_js__WEBPACK_IMPORTED_MODULE_8__.withoutSpecialChars; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/utils/src/types/index.ts");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ "../../packages/utils/src/color.ts");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ "../../packages/utils/src/constants.ts");
/* harmony import */ var _control_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./control.js */ "../../packages/utils/src/control.ts");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom.js */ "../../packages/utils/src/dom.ts");
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./env.js */ "../../packages/utils/src/env.ts");
/* harmony import */ var _immediate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./immediate.js */ "../../packages/utils/src/immediate.ts");
/* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools.js */ "../../packages/utils/src/tools.ts");
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./type.js */ "../../packages/utils/src/type.ts");
/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./url.js */ "../../packages/utils/src/url.ts");











/***/ }),

/***/ "../../packages/utils/src/tools.ts":
/*!*****************************************!*\
  !*** ../../packages/utils/src/tools.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copyTextToClipboard": function() { return /* binding */ copyTextToClipboard; },
/* harmony export */   "getOS": function() { return /* binding */ getOS; },
/* harmony export */   "getOSType": function() { return /* binding */ getOSType; },
/* harmony export */   "isDesktop": function() { return /* binding */ isDesktop; },
/* harmony export */   "isGameConsole": function() { return /* binding */ isGameConsole; },
/* harmony export */   "isMobile": function() { return /* binding */ isMobile; }
/* harmony export */ });
const fallbackCopyTextToClipboard = text => {
  const textArea = document.createElement("textarea");
  textArea.value = text; // Avoid scrolling to bottom

  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    const successful = document.execCommand("copy");
    const msg = successful ? "successful" : "unsuccessful";
    console.log("Fallback: Copying text command was ".concat(msg, ": ").concat(text));
  } catch (err) {
    console.error("Fallback: Oops, unable to copy", err);
  }

  document.body.removeChild(textArea);
};
/**
 * Copy text to clipboard
 * @see https://stackoverflow.com/a/30810322
 */


const copyTextToClipboard = async text => {
  if (!navigator.clipboard) {
    fallbackCopyTextToClipboard(text);
    return;
  }

  try {
    await navigator.clipboard.writeText(text);
    console.log("Copying to clipboard was successful: " + text);
  } catch (error) {
    console.error("Could not copy text: ", error);
  }
};
/**
 * Get the Operating system the browser is running on
 * @see https://stackoverflow.com/questions/19877924/what-is-the-list-of-possible-values-for-navigator-platform-as-of-today
 * @see https://stackoverflow.com/questions/9038625/detect-if-device-is-ios
 * @see https://github.com/podlove/podlove-subscribe-button/blob/master/src/coffee/user_agent.coffee
 */

const getOS = () => {
  const ua = navigator.userAgent;
  const platform = window.navigator.platform;
  const uAs = {
    windows7: /Windows NT 6.1/,
    windows8: /Windows NT 6.2/,
    windows81: /Windows NT 6.3/,
    windows10: /Windows NT 10.0/,
    windows: /windows/i,
    windowsPhone: /trident/i,
    android: /android/i,
    ios: /(ipad|iphone|ipod)/i,
    linux: /(linux)/i,
    unix: /(openbsd|freebsd|netbsd)/i,
    osxCatalina: /macintosh.+10(_|\.)15/i,
    osxBigSur: /macintosh.+((10(_|\.)16)|(11(_|\.)))/i,
    osx: /macintosh/i,
    mac: /mac/i
  };
  const platforms = {
    linux: /Linux/i,
    unix: /(FreeBSD|OpenBSD|X11|SunOS)/i,
    webOS: /webOS/i,
    playstation3: /playstation 3/i,
    playstation4: /playstation 4/i,
    PlaystationPortable: /psp/i,
    newNintendo3Ds: /new nintendo 3ds/i,
    nintendoDsi: /nintendo dsi/i,
    nintendo3Ds: /nintendo 3ds/i,
    nintendoWii: /nintendo wii/i,
    nintendoWiiU: /nintendo wiiu/i,
    palmos: /palmos/i,
    symbian: /(nokia_series_40|s60|symbian)/i
  };

  for (const uAKey of Object.keys(uAs)) {
    const regex = uAs[uAKey];

    if (regex.test(ua)) {
      // iPad on iOS 13 detection
      if (uAKey === "mac" && "ontouchend" in document) {
        return "ios";
      }

      return uAKey;
    }
  }

  for (const platformKey of Object.keys(platforms)) {
    const regex = platforms[platformKey];

    if (regex.test(platform)) {
      return platformKey;
    }
  }

  return "Unknown";
}; // TODO test TV

const getOSType = () => {
  const os = getOS();
  let isMobile = false;
  let isDesktop = false;
  let isGameConsole = false;

  switch (os) {
    case "windows":
    case "windows10":
    case "windows7":
    case "windows8":
    case "windows81":
    case "osxBigSur":
    case "osxCatalina":
    case "osx":
    case "mac":
    case "linux":
    case "unix":
      isDesktop = true;
      break;

    case "ios":
    case "android":
    case "windowsPhone":
    case "symbian":
      isMobile = true;
      break;
  }

  if (os.indexOf("playstation") !== -1 || os.indexOf("nintendo") !== -1) {
    isGameConsole = true;
  }

  return {
    isMobile,
    isDesktop,
    isGameConsole
  };
};
const isMobile = () => {
  return getOSType().isMobile;
};
const isDesktop = () => {
  return getOSType().isDesktop;
};
const isGameConsole = () => {
  return getOSType().isGameConsole;
};

/***/ }),

/***/ "../../packages/utils/src/type.ts":
/*!****************************************!*\
  !*** ../../packages/utils/src/type.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "camelCase": function() { return /* binding */ camelCase; },
/* harmony export */   "capitalize": function() { return /* binding */ capitalize; },
/* harmony export */   "classOf": function() { return /* binding */ classOf; },
/* harmony export */   "clearObjFromRiba": function() { return /* binding */ clearObjFromRiba; },
/* harmony export */   "clone": function() { return /* binding */ clone; },
/* harmony export */   "couldBeJson": function() { return /* binding */ couldBeJson; },
/* harmony export */   "escapeHtml": function() { return /* binding */ escapeHtml; },
/* harmony export */   "extend": function() { return /* binding */ extend; },
/* harmony export */   "fromBase64": function() { return /* binding */ fromBase64; },
/* harmony export */   "getNumber": function() { return /* binding */ getNumber; },
/* harmony export */   "getString": function() { return /* binding */ getString; },
/* harmony export */   "handleize": function() { return /* binding */ handleize; },
/* harmony export */   "hashCode": function() { return /* binding */ hashCode; },
/* harmony export */   "isBase64": function() { return /* binding */ isBase64; },
/* harmony export */   "isBoolean": function() { return /* binding */ isBoolean; },
/* harmony export */   "isDefined": function() { return /* binding */ isDefined; },
/* harmony export */   "isFunction": function() { return /* binding */ isFunction; },
/* harmony export */   "isJson": function() { return /* binding */ isJson; },
/* harmony export */   "isNumber": function() { return /* binding */ isNumber; },
/* harmony export */   "isObject": function() { return /* binding */ isObject; },
/* harmony export */   "isString": function() { return /* binding */ isString; },
/* harmony export */   "isUndefined": function() { return /* binding */ isUndefined; },
/* harmony export */   "jsonStringify": function() { return /* binding */ jsonStringify; },
/* harmony export */   "justDigits": function() { return /* binding */ justDigits; },
/* harmony export */   "kebabCase": function() { return /* binding */ kebabCase; },
/* harmony export */   "parseJsonString": function() { return /* binding */ parseJsonString; },
/* harmony export */   "parseType": function() { return /* binding */ parseType; },
/* harmony export */   "replaceUmlautChars": function() { return /* binding */ replaceUmlautChars; },
/* harmony export */   "stringHasNumber": function() { return /* binding */ stringHasNumber; },
/* harmony export */   "stringHasOnlyNumbers": function() { return /* binding */ stringHasOnlyNumbers; },
/* harmony export */   "stringIsPhoneNumber": function() { return /* binding */ stringIsPhoneNumber; },
/* harmony export */   "stripHtml": function() { return /* binding */ stripHtml; },
/* harmony export */   "toBase64": function() { return /* binding */ toBase64; },
/* harmony export */   "toType": function() { return /* binding */ toType; },
/* harmony export */   "withoutMultiWhitespace": function() { return /* binding */ withoutMultiWhitespace; },
/* harmony export */   "withoutSpecialChars": function() { return /* binding */ withoutSpecialChars; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "../../packages/utils/src/constants.ts");

/**
 * Fixed version of typeof operator
 * @param obj
 * @see https://goo.gl/pxwQGp
 */

const toType = obj => {
  const matches = {}.toString.call(obj).match(/\s([a-z]+)/i);
  return matches ? matches[1].toLowerCase() : null;
};
/**
 * Formats an object to a json string with the special feature that single quotes are replaced.
 * This way there are no conflicts when this json string is used as attribute value afterwards.
 * @note This function is used by the JsonFormatter
 * @see parseJsonString
 * @param object
 * @param space
 * @param replaceSingleQuote
 * @returns
 */

const jsonStringify = function (object) {
  let space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  let replaceSingleQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const result = JSON.stringify(object, null, space);

  if (replaceSingleQuote && result) {
    return result.replace(/'/g, "&#39;");
  }

  return result;
};
/**
 * Parses a json string with the special feature that json strings
 * can also have single quotations for defining the properties and values
 * @see jsonStringify
 */

const parseJsonString = value => {
  let object = null;

  if (!value) {
    return object;
  }

  if (!couldBeJson(value)) {
    return object;
  }

  if (isJson(value)) {
    object = JSON.parse(value) || null;
  } else {
    try {
      // Transform an invalid json string with single quotation to a valid json string with double quotation
      object = JSON.parse(value.replace(/'/g, '"')) || null;
    } catch (error) {
      console.warn("Can't parse json string of \"".concat(value, "\" "), error);
    }
  }

  return object;
};
const couldBeJson = str => {
  if (!str || typeof str !== "string") {
    return false;
  }

  str = str.trim();
  return str.charAt(0) === "{" && str.charAt(str.length - 1) === "}" || str.charAt(0) === "[" && str.charAt(str.length - 1) === "]";
};
/**
 * Test if a string is base64 encoded
 * Note, this is not a general function and is used internally by Riba.js by prefixing a base64 string with "base64:".
 * So if you want to use this method make sure that you prefix your base64 strings with "base64:".
 */

const isBase64 = str => {
  if (!str) return false;
  if (typeof str !== "string") return false;
  return str.startsWith(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX);
};
/**
 * Decode an string or object to base64
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_2_%E2%80%93_rewriting_atob_and_btoa_using_typedarrays_and_utf-8
 * @param obj
 * @returns
 */

const toBase64 = obj => {
  if (isObject(obj)) {
    obj = JSON.stringify(obj, null, 0);
  }

  return _constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX + btoa(encodeURIComponent(obj));
};
/**
 * Encode an base64 string back
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_2_%E2%80%93_rewriting_atob_and_btoa_using_typedarrays_and_utf-8
 * @param obj
 * @returns
 */

const fromBase64 = base64 => {
  if (typeof base64 !== "string") {
    return "Not a base64 string!";
  }

  if (base64.startsWith(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX)) {
    base64 = base64.substring(_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64_PREFIX.length);
  }

  const maybeDecodedUri = atob(base64);
  let encoded;

  try {
    encoded = decodeURIComponent(maybeDecodedUri);
  } catch (error) {
    encoded = maybeDecodedUri;
  }

  return parseType(encoded, false).value;
};
/**
 * Test if string is a json string
 * @param str
 */

const isJson = str => {
  if (!str || !couldBeJson(str)) {
    return false;
  }

  try {
    const val = JSON.parse(str);
    return Array.isArray(val) || typeof val === "object" ? true : false;
  } catch (error) {
    return false;
  }
};
/**
 * Parser and tokenizer for getting the type and value from a string.
 * @param string
 */

const parseType = function (input) {
  let isAttribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let type = _constants__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE;
  let value = input;

  if (input === undefined) {
    return {
      type,
      value: undefined
    };
  }

  if (input === null) {
    return {
      type,
      value: null
    };
  }

  if (_constants__WEBPACK_IMPORTED_MODULE_0__.QUOTED_STR.test(input)) {
    value = parseType(input.slice(1, -1), isAttribute).value;
  } else if (input === "true") {
    value = true;
  } else if (input === "false") {
    value = false;
  } else if (input === "null") {
    value = null;
  } else if (input === "undefined") {
    value = undefined;
  } else if (input === "") {
    // An empty attribute should be handled has a true value
    if (isAttribute) {
      value = true;
    } else {
      value = "";
    }
  } else if (!isNaN(Number(input))) {
    value = Number(input); // If number is too large store the value as string

    if (value >= Number.MAX_SAFE_INTEGER) {
      value = input;
    }
  } else if (isBase64(value)) {
    value = fromBase64(value);
  } else if (couldBeJson(value)) {
    const jsonString = parseJsonString(value);
    value = jsonString ? jsonString : value;
  } else {
    type = _constants__WEBPACK_IMPORTED_MODULE_0__.KEYPATH;
  }

  return {
    type,
    value
  };
};
/**
 * Check if value is undefined
 */

const isUndefined = value => {
  return typeof value === "undefined";
};
/**
 * Check if value is undefined
 */

const isDefined = value => {
  return !isUndefined(value);
};
/**
 * Check if type is Object
 * @see https://stackoverflow.com/a/4775737/1465919
 */

const isObject = obj => {
  return isDefined(obj) && typeof obj === "object" && obj !== null;
};
/**
 * Parse value to string or return undefined if value is null
 * @param value
 */

const getString = value => {
  return value !== null && value !== void 0 && value.toString ? value.toString() : undefined;
};
/**
 * Parse value to number or return 0 if value is null or undefined
 * @param value
 */

const getNumber = value => {
  return value ? parseFloat(value) : undefined;
};
/**
 * Check if value is a function
 */

const isFunction = value => {
  return typeof value === "function";
};
/**
 * Check whether variable is number or a string with numbers in JavaScript
 * @see https://stackoverflow.com/a/1421988/1465919
 */

const isNumber = value => {
  return !isNaN(parseFloat(value)) && !isNaN(value - 0);
};
/**
 * Check if type is Boolean
 * @see https://stackoverflow.com/a/28814615/1465919
 */

const isBoolean = value => {
  return typeof value === typeof true;
};
/**
 * Check if value is a string
 */

const isString = value => {
  return typeof value === "string";
};
/**
 * Check if string contains a number
 */

const stringHasNumber = value => {
  return isString(value) && /\d/.test(value);
};
/**
 * Check if string contains only numbers
 */

const stringHasOnlyNumbers = value => {
  return /^\d+$/.test(value);
};
/**
 * Check if string contains only numbers, +, - and ()
 */

const stringIsPhoneNumber = value => {
  return /^[0-9 ()+-]+$/.test(value);
};
/**
 * Just get the digits of a string, useful to remove px pixel from css value
 *
 * @see http://stackoverflow.com/a/1100653/1465919
 */

const justDigits = str => {
  if (typeof str === "number") {
    return str;
  }

  const num = str.replace(/[^-\d.]/g, "");

  if (!isNumber(num)) {
    return 0;
  } else {
    return Number(num);
  }
};
const escapeHtml = html => {
  return html.replace(/[&<>'"]/g, c => ({
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  })[c]);
};
/**
 * Remove all special chars from a string
 * @see https://stackoverflow.com/a/11090301/1465919
 * @param str
 */

const withoutSpecialChars = str => {
  // str = str.replace(/[^\w\s]/gi, ""); // http://stackoverflow.com/a/4374890
  str = str.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, "");
  return str;
};
/**
 * Replace all umlaut chars from string like ä with ae
 * @param str
 */

const replaceUmlautChars = str => {
  str = str.replace(/ä/g, "ae").replace(/ö/g, "oe").replace(/ü/g, "ue").replace(/ß/g, "ss").replace(/Ä/g, "Ae").replace(/Ö/g, "Oe").replace(/Ü/g, "Üe");
  return str;
};
/**
 * Removes multiple tabs, newlines, etc from a string
 * @param str
 */

const withoutMultiWhitespace = str => {
  str = str.replace(/\s\s+/g, " ");
  return str;
};
/**
 * Formats a string into a handle.
 * E.g. '100% M & Ms!!!' -> 100-m-ms
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#handle-handleize
 */

const handleize = str => {
  str = str.trim();
  str = str.toLowerCase();
  str = withoutMultiWhitespace(str);
  str = withoutSpecialChars(str);
  str = replaceUmlautChars(str);
  str = str.replace(/ /g, "-");
  return str;
};
const stripHtml = html => {
  const tmp = document.createElement("DIV");
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || "";
};
/**
 * foo-bar -> fooBar
 * Returns a camel-cased version of the string. Used when translating an
 * element's attribute name into a property name for the component's scope.
 * @param str
 */

const camelCase = str => {
  return str.replace(/-([a-z0-9])/g, grouped => {
    return grouped[1].toUpperCase();
  });
};
/**
 * fooBar -> foo-bar
 */

const kebabCase = str => {
  return str.replace(/[A-Z]/g, letter => "-".concat(letter.toLowerCase()));
};
/**
 * uppercase's the first letter of a string
 * @param str
 */

const capitalize = str => {
  if (typeof str !== "string") return "";
  return str.charAt(0).toUpperCase() + str.slice(1);
};
/**
 * Merge the contents of two or more objects together into the first object.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param target An object that will receive the new properties
 * @param objects The objects containing additional properties to merge in.
 * @see http://www.damirscorner.com/blog/posts/20180216-VariableNumberOfArgumentsInTypescript.html
 * @see https://gomakethings.com/merging-objects-with-vanilla-javascript/
 */

const extend = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Merge the object into the extended object
  const merge = obj => {
    for (const prop in obj) {
      if (Object.hasOwnProperty.bind(obj)(prop)) {
        if (options.deep && Object.prototype.toString.call(obj[prop]) === "[object Object]") {
          // If we're doing a deep merge and the property is an object
          extended[prop] = extend(options, extended[prop], obj[prop]);
        } else {
          // Otherwise, do a regular merge
          if (options.keepValues) {
            // Only overwrite target value if the target value is undefined
            if (typeof extended[prop] === "undefined") {
              extended[prop] = obj[prop];
            }
          } else if (options.onlyDefined) {
            // Only overwrite target value if the source value is defined / not undefined
            if (typeof obj[prop] !== "undefined") {
              extended[prop] = obj[prop];
            }
          } else if (options.mergeArrays) {
            // Merge array if both values are array's
            if (Array.isArray(extended[prop]) && Array.isArray(obj[prop])) {
              extended[prop] = [...extended[prop], ...obj[prop]];
            } else {
              extended[prop] = obj[prop];
            }
          } else {
            extended[prop] = obj[prop];
          }
        }
      }
    }
  }; // Loop through each object and conduct a merge


  for (let i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    merge(i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2]);
  }

  return extended;
};
/**
 * Clone an object, array or any primitive type like numbers or strings.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param val The value(s) to clone
 */

const clone = (deep, val) => {
  if (Array.isArray(val)) {
    if (deep) {
      return val.map(x => clone(true, x));
    } else {
      return val.slice();
    }
  }

  if (isObject(val)) {
    return extend({
      deep
    }, {}, val);
  } // Primitive types like numbers and strings are copied by default


  return val;
};
/**
 * Get the class `"that"`
 * @param that
 */

const classOf = that => {
  return that.constructor;
};
/**
 * Removes internal riba properties from an object
 * @param obj
 * @return Cleared new object
 */

const clearObjFromRiba = obj => {
  if (Array.isArray(obj)) {
    return obj.map(x => isObject(x) ? clearObjFromRiba(x) : x);
  }

  const newObj = {};

  for (const key in obj) {
    if (key !== "__rv") {
      if (isObject(obj[key])) {
        newObj[key] = clearObjFromRiba(obj[key]);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  return newObj;
};
/**
 * Generate a Hash from string
 * @param str The string
 * @returns hash code
 * @see https://stackoverflow.com/a/7616484
 */

const hashCode = str => {
  let hash = 0;
  let i;
  let chr;
  if (str.length === 0) return hash;

  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
};

/***/ }),

/***/ "../../packages/utils/src/types/deferred.ts":
/*!**************************************************!*\
  !*** ../../packages/utils/src/types/deferred.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/utils/src/types/index.ts":
/*!***********************************************!*\
  !*** ../../packages/utils/src/types/index.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _deferred_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferred.js */ "../../packages/utils/src/types/deferred.ts");
/* harmony import */ var _timeout_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timeout-promise.js */ "../../packages/utils/src/types/timeout-promise.ts");



/***/ }),

/***/ "../../packages/utils/src/types/timeout-promise.ts":
/*!*********************************************************!*\
  !*** ../../packages/utils/src/types/timeout-promise.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../packages/utils/src/url.ts":
/*!***************************************!*\
  !*** ../../packages/utils/src/url.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cleanLink": function() { return /* binding */ cleanLink; },
/* harmony export */   "getHash": function() { return /* binding */ getHash; },
/* harmony export */   "getLocation": function() { return /* binding */ getLocation; },
/* harmony export */   "getPort": function() { return /* binding */ getPort; },
/* harmony export */   "getUrl": function() { return /* binding */ getUrl; },
/* harmony export */   "getUrlParameter": function() { return /* binding */ getUrlParameter; },
/* harmony export */   "isAbsoluteUrl": function() { return /* binding */ isAbsoluteUrl; },
/* harmony export */   "isExternalUrl": function() { return /* binding */ isExternalUrl; },
/* harmony export */   "isInternalUrl": function() { return /* binding */ isInternalUrl; },
/* harmony export */   "normalizeUrl": function() { return /* binding */ normalizeUrl; },
/* harmony export */   "onParentRoute": function() { return /* binding */ onParentRoute; },
/* harmony export */   "onRoute": function() { return /* binding */ onRoute; },
/* harmony export */   "removeHash": function() { return /* binding */ removeHash; },
/* harmony export */   "updateHash": function() { return /* binding */ updateHash; }
/* harmony export */ });
/**
 * get param from hash
 */
const getUrlParameter = (name, url) => {
  if (!url) {
    url = window.location.href;
  }

  name = name.replace(/[[\]]/g, "\\$&");
  const regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
  const results = regex.exec(url);

  if (!results) {
    return null;
  }

  if (!results[2]) {
    return "";
  }

  return decodeURIComponent(results[2].replace(/\+/g, " "));
};
/**
 * get location object ofpath or address bar
 * @see http://stackoverflow.com/a/736970/1465919
 *
 * @example
 * var l = getLocation("http://example.com:3000/pathname/?search=test#hash");
 * =>
 * l.protocol; // => "http:"
 * l.host;     // => "example.com:3000"
 * l.hostname; // => "example.com"
 * l.port;     // => "3000"
 * l.pathname; // => "/pathname/"
 * l.hash;     // => "#hash"
 * l.search;   // => "?search=test"
 * l.origin;   // => "http://example.com:3000"
 */

const getLocation = url => {
  if (!url) {
    return window.location;
  }

  const l = document.createElement("a");
  l.href = url;
  return l;
};
/**
 * If the webapps url is https://mysupersite.org and the url is https://mysupersite.org/subpage?search=test
 * this method will return /subpage?search=test
 * If the url is https://anothersite.org/subpage?search=test this method will return https://anothersite.org/subpage?search=test
 * @param url
 */

const normalizeUrl = url => {
  const location = getLocation(url);
  const curHostname = getLocation().hostname;

  if (location.hostname === curHostname) {
    return {
      url: location.pathname + location.search + location.hash,
      location
    };
  } else {
    return {
      url: getUrl(url),
      location
    };
  }
};
/**
 * Return the current full url
 *
 * @return {string} currentUrl
 */

const getUrl = url => {
  const location = getLocation(url);
  return location.protocol + "//" + location.host + location.pathname + location.search + location.hash;
};
/**
 * Check if we are on the route
 */

const onRoute = function (checkUrl) {
  let compareQueryParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (checkUrl) {
    const location1 = getLocation();
    const location2 = getLocation(checkUrl);

    if (compareQueryParam) {
      // TODO ignore query parameter order
      if (location1.search !== location2.search) {
        return false;
      }
    }

    return location1.hostname === location2.hostname && location1.pathname === location2.pathname;
  }

  return false;
};
/**
 * Check if the current location url stats with a url or is equal
 */

const onParentRoute = checkUrl => {
  if (checkUrl) {
    const location = getLocation();
    const pathname = location.pathname;
    const hostname = location.hostname;
    const checkLocation = getLocation(checkUrl);
    const checkPathname = checkLocation.pathname;
    const checkHostname = checkLocation.hostname;
    return hostname === checkHostname && pathname.startsWith(checkPathname);
  }

  return false;
};
/**
 * Given an url, return it without the hash
 *
 * @param url
 * @return newCleanUrl
 */

const cleanLink = url => {
  return url.replace(/#.*/, "");
};
/**
 * Return the port number normalized, eventually you can pass a string to be normalized.
 *
 * @param p
 * @return port
 */

const getPort = (p, url) => {
  const location = getLocation(url);
  const port = typeof p !== "undefined" ? p : location.port;
  const protocol = location.protocol;

  if (port !== "") {
    return Number(port);
  }

  if (protocol === "http:") {
    return 80;
  }

  if (protocol === "https:") {
    return 443;
  }
};
/**
 * Test if url is absolute or relative
 * @see https://stackoverflow.com/a/19709846/1465919
 */

const isAbsoluteUrl = url => {
  if (!url) {
    return false;
  }

  const isProtokoll = new RegExp("^(?:[a-z]+:)?//", "i");
  const isAbsolute = isProtokoll.test(url) || url.startsWith("mailto:") || url.startsWith("tel:") || url.startsWith("fax:");
  return isAbsolute;
};
const isExternalUrl = absoluteUrl => {
  if (isAbsoluteUrl(absoluteUrl)) {
    const location = getLocation();
    const host = location.protocol + "//" + location.hostname;
    let isExternal = true;

    if (absoluteUrl.startsWith(host)) {
      isExternal = false;
    }

    return isExternal;
  }

  return false;
};
const isInternalUrl = url => {
  return !isExternalUrl(url);
};
/**
 * Get hash from address bar or url if set
 */

const getHash = url => {
  return getLocation(url).hash;
};
/**
 * Change hash from address bar
 */

const updateHash = hash => {
  return window.location.hash = hash;
};
/**
 * Remove hash from address bar
 */

const removeHash = () => {
  return history.pushState("", document.title, window.location.pathname + window.location.search);
};

/***/ }),

/***/ "./src/ts/components/bind-content/bind-content.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/bind-content/bind-content.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"wrapper\"> <div class=\"icon\"></div> <p>Click to load example</p> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/example-tabs/example-tabs.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/example-tabs/example-tabs.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"col-12 px-0\"> <div rv-scrollbar-draggable role=\"tablist\" class=\"tab-list nav nav-tabs nav-tabs-underline d-flex flex-scrollbar-x-auto scrollbar-y-hidden scrollbar-primary-on-hover\" role=\"tablist\"> <div role=\"tab\" class=\"flex-grow-1 nav-item nav-link d-inline-block text-nowrap text-center\" rv-each-tab=\"items\" rv-class-active=\"tab.active\" rv-add-class=\"'tab-title-' | append tab.handle\" rv-id=\"'tab-title-' | append handle | append '-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append handle | append '-' | append tab.handle\" rv-html=\"tab.title\" rv-title=\"tab.title\" rv-on-click=\"activate | args tab\" rv-aria-selected=\"tab.active\"></div> </div> <div class=\"tab-content mx-auto\"> <div role=\"tabpanel\" class=\"tab-pane\" rv-each-tab=\"items\" rv-class-active=\"tab.active\" rv-class-show=\"tab.active\" rv-add-class=\"'tab-content-' | append tab.handle\" rv-id=\"'tab-content-' | append handle | append '-' | append tab.handle\" rv-template=\"tab.content\" rv-aria-labelledby=\"'tab-title-' | append handle | append '-' | append tab.handle\"> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/file-tree/file-tree.component.html":
/*!**************************************************************!*\
  !*** ./src/ts/components/file-tree/file-tree.component.html ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/icon-preview/icon-preview.component.html":
/*!********************************************************************!*\
  !*** ./src/ts/components/icon-preview/icon-preview.component.html ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<h2 rv-text=\"name\"></h2> <div class=\"row\"> <section #sizes class=\"col-12\"> <h3>Sizes</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-size=\"sizes\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" rv-size=\"size\" color=\"black\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"size\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #colors class=\"col-12\"> <h3>Colors</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-color=\"colors\" rv-add-class=\"color | prepend 'example-color-'\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" size=\"32\" rv-color=\"color\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"color\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #directions class=\"col-12\"> <h3>Directions</h3> <div class=\"row\"> <div class=\"col-4 col-md-2 col-xl-2 py-2\" rv-each-direction=\"directions\"> <div class=\"row\"> <div class=\"col-12 d-flex justify-content-center flex-row\"> <bs4-icon class=\"m-1\" rv-src=\"src\" size=\"32\" rv-direction=\"direction\"></bs4-icon> </div> </div> <div class=\"row\"> <div class=\"col-12 text-center\" rv-text=\"direction\"></div> </div> </div> </div> </section> </div> <div class=\"row\"> <section #directions class=\"col-12\"> <h3>Example</h3> <pre class=\"language-html\"><code class=\"language-html\" rv-html=\"example\"></code></pre> </section> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/components/shopify-linklist/shopify-linklist.component.html":
/*!****************************************************************************!*\
  !*** ./src/ts/components/shopify-linklist/shopify-linklist.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav class=\"nav\" rv-add-class=\"linklist.handle\" rv-class-nav-pills=\"pills\" rv-class-w-100=\"vertical\" rv-class-flex-column=\"vertical\" rv-class-flex-row=\"vertical | not\"> <div class=\"nav-item nav-item-level-0\" rv-each-link=\"linklist.links\"> <a rv-if=\"link.collapseable | not\" class=\"nav-link\" rv-class-active=\"link.active\" rv-route-class-active=\"link.url\" rv-route=\"link.url\" rv-href=\"link.url\"> <span>{link.title}</span> </a> <div rv-if=\"link.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args link\"> <span>{link.title}</span> </div> <div class=\"nav-item nav-item-level-1\" rv-hide=\"link.collapsed\" rv-each-sublink=\"link.links\"> <a rv-if=\"sublink.collapseable | not\" class=\"nav-link\" rv-add-class=\"sublink.level | prepend 'level-'\" rv-class-active=\"sublink.active\" rv-route-class-active=\"sublink.url\" rv-route=\"sublink.url\" rv-href=\"sublink.url\"> <span>{sublink.title}</span> </a> <div rv-if=\"sublink.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args sublink\"> <span>{sublink.title}</span> </div> <div class=\"nav-item nav-item-level-2\" rv-hide=\"sublink.collapsed\" rv-each-subsublink=\"sublink.links\"> <a class=\"nav-link\" rv-add-class=\"subsublink.level | prepend 'level-'\" rv-class-active=\"subsublink.active\" rv-route-class-active=\"subsublink.url\" rv-route=\"subsublink.url\" rv-href=\"subsublink.url\"> <span>{subsublink.title}</span> </a> </div> </div> </div> </nav> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-attr/src/ts/components/bs4-tabs-attr-example/bs4-tabs-attr-example.component.html ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<bs4-tabs option-tabs-angle=\"vertical\" tab-0-title=\"Tab 0\" tab-0-content=\"<p class='my-3'>Hello from <strong>tab 0</strong></p>\" tab-1-title=\"Tab 1\" tab-1-content=\"<p class='my-3'>Hello from <strong>tab 1</strong></p>\" tab-2-title=\"Tab 2\" tab-2-content=\"<p class='my-3'>Hello from <strong>tab 2</strong></p>\" tab-3-title=\"Tab 3\" tab-3-content=\"<p class='my-3'>Hello from <strong>tab 3</strong></p>\" tab-4-title=\"Tab 4\" tab-4-content=\"<p class='my-3'>Hello from <strong>tab 4</strong></p>\" tab-5-title=\"Tab 5\" tab-5-content=\"<p class='my-3'>Hello from <strong>tab 5</strong></p>\" tab-6-title=\"Tab 6\" tab-6-content=\"<p class='my-3'>Hello from <strong>tab 6</strong></p>\" tab-7-title=\"Tab 7\" tab-7-content=\"<p class='my-3'>Hello from <strong>tab 7</strong></p>\" tab-8-title=\"Tab 8\" tab-8-content=\"<p class='my-3'>Hello from <strong>tab 8</strong></p>\" tab-9-title=\"Tab 9\" tab-9-content=\"<p class='my-3'>Hello from <strong>tab 9</strong></p>\"></bs4-tabs> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html":
/*!**************************************************************************************************************!*\
  !*** ./src/ts/demos/bs4-tabs-tpl/src/ts/components/bs4-tabs-tpl-example/bs4-tabs-tpl-example.component.html ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<bs4-tabs> <template title=\"Tab 0\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/7c00b5/FFFFFF?text=Tab%200\" alt=\"Tab 0\"> </template> <template title=\"Tab 1\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/00b56a/FFFFFF?text=Tab%201\" alt=\"Tab 1\"> </template> <template title=\"Tab 2\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/001f3f/FFFFFF?text=Tab%202\" alt=\"Tab 2\"> </template> <template title=\"Tab 3\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/0074D9/FFFFFF?text=Tab%203\" alt=\"Tab 3\"> </template> <template title=\"Tab 4\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/7FDBFF/FFFFFF?text=Tab%204\" alt=\"Tab 4\"> </template> <template title=\"Tab 5\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/39CCCC/FFFFFF?text=Tab%205\" alt=\"Tab 5\"> </template> <template title=\"Tab 6\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/3D9970/FFFFFF?text=Tab%206\" alt=\"Tab 6\"> </template> <template title=\"Tab 7\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/2ECC40/FFFFFF?text=Tab%207\" alt=\"Tab 7\"> </template> <template title=\"Tab 8\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/FF851B/FFFFFF?text=Tab%208\" alt=\"Tab 8\"> </template> <template title=\"Tab 9\"> <img class=\"img-fluid my-3\" src=\"https://via.placeholder.com/150/85144b/FFFFFF?text=Tab%209\" alt=\"Tab 9\"> </template> </bs4-tabs> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/ts/demos/core-each-item/src/ts/components/each-item-example/each-item-example.component.html ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav> <button rv-on-click=\"push\">Push</button> <button rv-on-click=\"pop\">Pop</button> <button rv-on-click=\"shift\">Shift</button> <button rv-on-click=\"unshift\">Unshift</button> <button rv-on-click=\"splice\">Splice</button> <button rv-on-click=\"sort\">Sort</button> <button rv-on-click=\"reset\">Reset</button> </nav> <section> <div rv-each-item=\"items\"> <div>Item { %item% } / { item.name }</div> </div> </section> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html":
/*!**************************************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-scroll-events/src/ts/components/extras-scroll-events-example/extras-scroll-events-example.component.html ***!
  \**************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row flex-column flex-md-row d-flex flex-nowrap h-100\"> <div class=\"col bg-light text-dark touch-zone\" rv-scroll-events rv-scrollbar-draggable rv-on-scrollstart=\"log | args 'scrollstart'\" rv-on-scrollended=\"log | args 'scrollended'\" rv-on-scrollleft=\"log | args 'scrollleft'\" rv-on-scrollright=\"log | args 'scrollright'\" rv-on-scrollup=\"log | args 'scrollup'\" rv-on-scrolldown=\"log | args 'scrolldown'\" rv-on-scrolling=\"log | args 'scrolling'\" rv-on-scrollend=\"log | args '(native scrollend)'\" rv-on-scroll=\"log | args '(native scroll)'\"> <div class=\"touch-zone-background d-flex justify-content-center align-items-center h-100 w-100\">Scroll here</div> <div class=\"touch-space\"></div> </div> <div class=\"col-12 col-md-6 col-lg-4 col-xl-4 bg-dark text-light py-3 h-100 console\"> <p class=\"log\"> <span class=\"no-data\">Start touching to send data to this console.</span> </p> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html":
/*!*********************************************************************************************************************!*\
  !*** ./src/ts/demos/extras-touch-events/src/ts/components/touch-events-example/touch-events-example.component.html ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row flex-column flex-md-row d-flex flex-nowrap h-100\"> <div class=\"col-md-7 col-lg-8 col-xl-9 bg-light text-dark py-3 d-flex justify-content-center align-items-center touch-zone\" rv-touch-events rv-on-tapstart=\"log | args 'tapstart'\" rv-on-tapend=\"log | args 'tapend'\" rv-on-tap=\"log | args 'tap'\" rv-on-tap2=\"log | args 'tap2'\" rv-on-tap3=\"log | args 'tap3'\" rv-on-singletap=\"log | args 'singletap'\" rv-on-doubletap=\"log | args 'doubletap'\" rv-on-taphold=\"log | args 'taphold'\" rv-on-swipe=\"log | args 'swipe'\" rv-on-swipeup=\"log | args 'swipeup'\" rv-on-swiperight=\"log | args 'swiperight'\" rv-on-swipedown=\"log | args 'swipedown'\" rv-on-swipeleft=\"log | args 'swipeleft'\" rv-on-swipeend=\"log | args 'swipeend'\"> <span>Touch here</span> </div> <div class=\"col-md-5 col-lg-4 col-xl-3 bg-dark text-light py-3 h-100 console\"> <p class=\"log\"> <span class=\"no-data\">Start touching to send data to this console.</span> </p> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html":
/*!***********************************************************************************************************!*\
  !*** ./src/ts/demos/i18n-static/src/ts/components/i18n-static-example/i18n-static-example.component.html ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<i18n-switcher> <p><strong rv-i18n-text=\"'examples.i18n.switch_language'\"></strong></p> <div class=\"btn-group\" role=\"group\"> <button type=\"button\" class=\"btn btn-secondary text-uppercase\" rv-each-langcode=\"langcodes\" rv-text=\"langcode.code\" rv-on-click=\"switch | args langcode\" rv-class-active=\"langcode.active\">Left</button> </div> </i18n-switcher> <div class=\"form-row my-5\"> <div class=\"col-12\"> <h1 rv-i18n-text=\"'examples.newsletter.title'\"></h1> <p rv-i18n-html=\"'examples.newsletter.description_html'\"></p> </div> <div class=\"col\"> <input type=\"text\" class=\"form-control\" rv-i18n-value=\"'examples.newsletter.input_value'\"/> </div> <div class=\"col\"> <input type=\"text\" class=\"form-control\" rv-i18n-placeholder=\"'examples.newsletter.placeholder_last_name'\"/> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-accordion/bs4-accordion.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"accordion\"> <div class=\"card\" rv-each-item=\"items\"> <button type=\"button\" class=\"btn btn-link card-header d-flex\" rv-on-click=\"toggle | args item %item%\" rv-aria-expanded=\"item.show\"> <span class=\"card-header-text mr-auto\" rv-html=\"item.title\"></span> <bs4-icon class=\"ml-auto\" rv-show=\"collapseIconSrc\" rv-src=\"collapseIconSrc\" rv-size=\"collapseIconSize\" rv-direction=\"item.iconDirection\"></bs4-icon> </button> <div class=\"collapse\" rv-data-index=\"%item%\"> <div class=\"card-body\" rv-template=\"item.content\"></div> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html":
/*!****************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-colorpicker/bs4-colorpicker.component.html ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"picker_arrow\"></div> <div class=\"picker_hue picker_slider\" rv-style-color=\"cssHsl\"> <div class=\"picker_selector\"></div> </div> <div class=\"picker_sl\" rv-style-background-color=\"cssHue\" rv-style-color=\"cssHsl\"> <div class=\"picker_selector\"></div> </div> <div class=\"picker_alpha picker_slider\" rv-show=\"alpha\" rv-style-background-image=\"alphaBg\"> <div class=\"picker_selector\"></div> </div> <input class=\"picker_editor form-control\" rv-show=\"editor\" aria-label=\"Type a color name or hex value\" rv-value=\"color\"/> <div class=\"picker_sample\" rv-style-color=\"cssHsla\"></div> <button class=\"btn btn-success picker_done\" rv-show=\"okayButton\">Ok</button> <button class=\"btn btn-danger picker_cancel\" rv-show=\"cancelButton\">Cancel</button> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html":
/*!**********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-contents/bs4-contents.component.html ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul class=\"list-unstyled list-contents list-contents-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\"> <a class=\"nav-link p-0\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\"> <a class=\"nav-link p-0\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-form/bs4-form.component.html":
/*!**************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-form/bs4-form.component.html ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<form> </form>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" rv-add-class=\"modal.contextualClass | prepend 'modal-'\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\" rv-show=\"modal.title\"> <h5 class=\"modal-title\" rv-template=\"modal.title\"></h5> <button type=\"button\" class=\"close\" aria-label=\"Close\" rv-on-click=\"dismiss\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"modal-body\"> <p rv-template=\"modal.message\"></p> </div> <div class=\"modal-footer\" rv-show=\"modal.buttons | size | gt 0\"> <div rv-each-button=\"modal.buttons\"> <button type=\"button\" class=\"btn\" rv-add-class=\"button.class\" rv-on-click=\"button.action\" rv-template=\"modal.label\"></button> </div> </div> </div> </div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html":
/*!**************************************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"toast-container\"> <div aria-live=\"polite\" aria-atomic=\"true\" class=\"toast-item-container\" rv-add-class=\"positionClass\"> <div rv-each-toast=\"notifications\"> <div rv-if=\"toast.type | eq 'toast'\"> <bs4-toast-item rv-index=\"%toast%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-toast=\"toast\"></bs4-toast-item> </div> </div> </div> </div> <div rv-each-modal=\"notifications\"> <div rv-if=\"modal.type | eq 'modal'\"> <bs4-modal-item rv-index=\"%modal%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-modal=\"modal\"></bs4-modal-item> </div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul class=\"list-unstyled list-scrollspy list-scrollspy-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\" rv-bs4-scrollspy-active=\"anachor.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\" rv-bs4-scrollspy-active=\"child.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\" rv-bs4-scrollspy-active=\"childchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\" rv-bs4-scrollspy-active=\"childchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.component.html":
/*!****************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div rv-add-class=\"'drop' | append dropdownDirection\"> <div class=\"dropdown-toggle dropdown-toggle-share\" rv-id=\"dropdownId\" rv-template=\"labelTemplate\"></div> <div class=\"dropdown-menu\" rv-aria-labelledby=\"dropdownId\"> <a rv-each-item=\"shareItems\" rv-show=\"item.available\" rv-download=\"item.type | eq 'download'\" rv-type=\"item.type\" target=\"_blank\" rv-on-click=\"shareOnService\" class=\"dropdown-item\" rv-href=\"item.url\" rv-html=\"item.label\"></a> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-share/bs4-share.label.html":
/*!************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-share/bs4-share.label.html ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-text=\"label\"></div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html":
/*!*********************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-prev\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"prev\" rv-on-click=\"prev\"> <bs4-icon rv-if=\"controlPrevIconSrc\" rv-src=\"controlPrevIconSrc\" direction=\"left\" size=\"24\"></bs4-icon> <span rv-hide=\"controlPrevIconSrc\" class=\"btn btn-link slideshow-control-fallback-prev-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Previous</span> </button> <button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-next\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"next\" rv-on-click=\"next\"> <bs4-icon rv-if=\"controlNextIconSrc\" rv-src=\"controlNextIconSrc\" direction=\"right\" size=\"24\"></bs4-icon> <span rv-hide=\"controlNextIconSrc\" class=\"slideshow-control-fallback-next-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Next</span> </button> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html":
/*!***********************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ol rv-if=\"indicators\" class=\"slideshow-indicators\" rv-add-class=\"indicatorsPositionClass\"> <li rv-each-slide=\"items\" rv-class-active=\"slide.active\" rv-on-click=\"goTo | args slide.index\"> <bs4-icon rv-hide=\"slide.active\" rv-src=\"indicatorInactiveIconSrc\" size=\"16\"></bs4-icon> <bs4-icon rv-show=\"slide.active\" rv-src=\"indicatorActiveIconSrc\" size=\"16\"></bs4-icon> </li> </ol> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html":
/*!*******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"slideshow-inner\"> <div rv-each-slide=\"items\" rv-class=\"slide.class\" rv-class-active=\"slide.active\" rv-id=\"'slide-' | append slide.handle\" rv-index=\"slide.index\" rv-html=\"slide.content\"></div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html":
/*!*************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<ul rv-scrollbar-draggable rv-aria-orientation=\"optionTabsAngle\" role=\"tablist\" class=\"nav nav-tabs flex-scrollbar-x-auto scrollbar-y-hidden\"> <li class=\"nav-item\" rv-each-tab=\"items\"> <button role=\"tab\" class=\"btn btn-link nav-link\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </li> </ul> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html":
/*!***********************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row\"> <div class=\"col-auto\"> <div class=\"nav flex-column nav-pills\" role=\"tablist\" rv-aria-orientation=\"optionTabsAngle\"> <div class=\"nav-item\" rv-each-tab=\"items\"> <button class=\"btn btn-link nav-link\" role=\"tab\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </div> </div> </div> <div class=\"col-auto\"> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html":
/*!******************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-tagged-image/bs4-tagged-image.component.html ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<img> <tag rv-each-tag=\"tags\" rv-index=\"tag.index\" rv-style-left=\"tag.left\" rv-style-top=\"tag.top\" rv-shape=\"tag.shape\" rv-color=\"tag.color\" rv-style---tag-color=\"tag.color\" rv-style---tag-border-radius=\"tag.borderRadius\" rv-style---tag-full-size=\"tag.fullSize\" rv-style---tag-small-size=\"tag.smallSize\" rv-bs4-popover=\"fillPopoverOptions | call tag.popoverOptions\" rv-on-bound.bs.popover=\"onPopoverBound\" rv-on-shown.bs.popover=\"onPopoverShown\" rv-on-hidden.bs.popover=\"onPopoverHidden\" rv-tabindex=\"triggerOnFocus | call tag.popoverOptions\"> </tag> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"toast my-1\" rv-add-class=\"toast.contextualClass | prepend 'toast-'\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"> <div class=\"toast-header\" rv-show=\"toast.title\"> <bs4-icon rv-if=\"iconUrl\" rv-src=\"iconUrl\" size=\"16\" rv-color=\"toast.contextualClass\" class=\"mr-2\" alt=\"toast icon\"></bs4-icon> <strong class=\"mr-auto\" rv-template=\"toast.title\"></strong> <button type=\"button\" class=\"ml-2 mb-1 close\" rv-on-click=\"dismiss\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"toast-body\" rv-template=\"toast.message\"></div> </div>";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/i18n/src/components/share/share.label.html":
/*!*****************************************************************!*\
  !*** ../../packages/i18n/src/components/share/share.label.html ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-i18n-text=\"labelI18n\"></div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html":
/*!********************************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram-scrollbar/instagram-scrollbar.component.html ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify-tda/src/components/instagram/instagram.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/shopify-tda/src/components/instagram/instagram.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<div class=\"row\"> <div class=\"col-4 px-0 embed-responsive embed-responsive-1by1 lazy\" rv-each-image=\"media.data\" rv-add-class=\"image.media_type\"> {% comment %} IMAGE {% endcomment %} <img lazyload=\"lazy\" class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'IMAGE'\" rv-src=\"image.media_url\" rv-alt=\"image.caption\"> {% comment %} CAROUSEL_ALBUM {% endcomment %} <img lazyload=\"lazy\" class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'CAROUSEL_ALBUM'\" rv-src=\"image.media_url\" rv-src=\"image.media_url\" rv-alt=\"image.caption\"> {% comment %} VIDEO {% endcomment %} <video class=\"embed-responsive-item\" rv-if=\"image.media_type | eq 'VIDEO'\" autoplay muted loop preload> <source rv-src=\"image.media_url\" type=\"video/mp4\"> Your browser does not support the video tag. </video> {% comment %} hover info {% endcomment %} <div class=\"embed-responsive-item caption d-none d-md-flex align-items-center\" rv-text=\"image.caption\"> </div> </div> </div> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/addresses-form/addresses-form.component.html":
/*!******************************************************************************************!*\
  !*** ../../packages/shopify/src/components/addresses-form/addresses-form.component.html ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart-button/cart-button.component.html":
/*!************************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-button/cart-button.component.html ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart-item/cart-item.component.html":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/cart-item/cart-item.component.html ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/cart/cart.component.html":
/*!**********************************************************************!*\
  !*** ../../packages/shopify/src/components/cart/cart.component.html ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/comments-form/comments-form.component.html":
/*!****************************************************************************************!*\
  !*** ../../packages/shopify/src/components/comments-form/comments-form.component.html ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/contact-form/contact-form.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/contact-form/contact-form.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/debug-bar/debug-bar.component.html":
/*!********************************************************************************!*\
  !*** ../../packages/shopify/src/components/debug-bar/debug-bar.component.html ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<small rv-hide=\"hidden\" class=\"text-right\" rv-touch-events rv-on-singletap=\"toggleBar\" rv-on-doubletap=\"hide\"> { themeName }<br/> <div> Device width: <span class=\"d-inline-block d-md-none\">XS</span> <span class=\"d-none d-md-inline-block d-lg-none\">MD</span> <span class=\"d-none d-lg-inline-block d-xl-none\">LG</span> <span class=\"d-none d-xl-inline-block d-xxl-none\">XL</span> <span class=\"d-none d-xxl-inline-block\">XXL</span> </div> </small> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/linklist/linklist.component.html":
/*!******************************************************************************!*\
  !*** ../../packages/shopify/src/components/linklist/linklist.component.html ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "<nav class=\"nav\" rv-add-class=\"linklist.handle\" rv-class-nav-pills=\"pills\" rv-class-w-100=\"vertical\" rv-class-flex-column=\"vertical\" rv-class-flex-row=\"vertical | not\"> <div class=\"nav-item nav-item-level-0\" rv-each-link=\"linklist.links\"> <a rv-if=\"link.collapseable | not\" class=\"nav-link\" rv-class-active=\"link.active\" rv-route-class-active=\"link.url\" rv-route=\"link.url\" rv-href=\"link.url\"> <span>{link.title}</span> </a> <div rv-if=\"link.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args link\"> <span>{link.title}</span> </div> <div class=\"nav-item nav-item-level-1\" rv-hide=\"link.collapsed\" rv-each-sublink=\"link.links\"> <a rv-if=\"sublink.collapseable | not\" class=\"nav-link\" rv-add-class=\"sublink.level | prepend 'level-'\" rv-class-active=\"sublink.active\" rv-route-class-active=\"sublink.url\" rv-route=\"sublink.url\" rv-href=\"sublink.url\"> <span>{sublink.title}</span> </a> <div rv-if=\"sublink.collapseable\" class=\"nav-link cursor-pointer dropdown-toggle\" rv-on-click=\"toggle | args sublink\"> <span>{sublink.title}</span> </div> <div class=\"nav-item nav-item-level-2\" rv-hide=\"sublink.collapsed\" rv-each-subsublink=\"sublink.links\"> <a class=\"nav-link\" rv-add-class=\"subsublink.level | prepend 'level-'\" rv-class-active=\"subsublink.active\" rv-route-class-active=\"subsublink.url\" rv-route=\"subsublink.url\" rv-href=\"subsublink.url\"> <span>{subsublink.title}</span> </a> </div> </div> </div> </nav> ";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/login-form/login-form.component.html":
/*!**********************************************************************************!*\
  !*** ../../packages/shopify/src/components/login-form/login-form.component.html ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/product-item/product-item.component.html":
/*!**************************************************************************************!*\
  !*** ../../packages/shopify/src/components/product-item/product-item.component.html ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "../../packages/shopify/src/components/product/product.component.html":
/*!****************************************************************************!*\
  !*** ../../packages/shopify/src/components/product/product.component.html ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Module
var code = "";
// Exports
/* harmony default export */ __webpack_exports__["default"] = (code);

/***/ }),

/***/ "./src/scss/main.scss":
/*!****************************!*\
  !*** ./src/scss/main.scss ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "../types/index.js":
/*!*************************!*\
  !*** ../types/index.js ***!
  \*************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/events/dist/esm/index.js":
/*!***********************************************!*\
  !*** ../../packages/events/dist/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* reexport safe */ _services_index_js__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/index.js */ "../../packages/events/dist/esm/types/index.js");
/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/index.js */ "../../packages/events/dist/esm/services/index.js");



/***/ }),

/***/ "../../packages/events/dist/esm/services/event-dispatcher.service.js":
/*!***************************************************************************!*\
  !*** ../../packages/events/dist/esm/services/event-dispatcher.service.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* binding */ EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../.yarn/cache/@babel-runtime-npm-7.18.3-1883c70fa6-db8526226a.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js");

class EventDispatcher {
  static getNamespaces() {
    return Object.keys(this.instances);
  }

  static getInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const result = EventDispatcher.instances[namespace];

    if (!result) {
      return new this(namespace);
    }

    return result;
  }

  static getAllInstances() {
    return EventDispatcher.instances;
  }

  static clearInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    const instance = EventDispatcher.instances[namespace];
    instance.events = {};
    instance.eventsOnce = {};
    return instance;
  }

  static deleteInstance() {
    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
    this.clearInstance(namespace);
    delete this.instances[namespace];
  }

  static clearAllInstances() {
    const namespaces = this.getNamespaces();

    for (const namespace of namespaces) {
      this.clearInstance(namespace);
    }
  }

  static deleteAllInstances() {
    this.clearAllInstances();
    this.instances = {};
  }

  get namespace() {
    return this._namespace;
  }

  constructor(namespace) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "events", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "eventsOnce", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_namespace", "anonymous");

    if (namespace) {
      if (EventDispatcher.instances[namespace]) {
        return EventDispatcher.instances[namespace];
      }

      this._namespace = namespace;
      EventDispatcher.instances[namespace] = this;
      return EventDispatcher.instances[namespace];
    }
  }

  once(eventName, cb, thisContext) {
    this.eventsOnce[eventName] = this.eventsOnce[eventName] || [];

    if (typeof thisContext !== "undefined") {
      this.eventsOnce[eventName].push({
        cb: cb.bind(thisContext),
        orgCb: cb,
        thisContext
      });
    } else {
      this.eventsOnce[eventName].push(cb);
    }

    return this;
  }

  on(eventName, cb, thisContext) {
    this.events[eventName] = this.events[eventName] || [];

    if (typeof thisContext !== "undefined") {
      this.events[eventName].push({
        cb: cb.bind(thisContext),
        orgCb: cb,
        thisContext
      });
    } else {
      this.events[eventName].push(cb);
    }

    return this;
  }

  off(eventName, cb, thisContext) {
    if (eventName === undefined) {
      this.events = {};
      this.eventsOnce = {};
      return this;
    }

    if (cb !== undefined) {
      if (thisContext !== undefined) {
        if (eventName in this.events) {
          for (const [i, event] of this.events[eventName].entries()) {
            const curEvent = event;

            if (curEvent.orgCb === cb && curEvent.thisContext === thisContext) {
              this.events[eventName].splice(i, 1);
            }
          }
        }

        if (eventName in this.eventsOnce) {
          for (const [i, event] of this.eventsOnce[eventName].entries()) {
            const curEvent = event;

            if (curEvent.orgCb === cb && curEvent.thisContext === thisContext) {
              this.eventsOnce[eventName].splice(i, 1);
            }
          }
        }
      } else {
        if (eventName in this.events) {
          for (const [i, event] of this.events[eventName].entries()) {
            const curEvent = event;

            if (curEvent === cb) {
              this.events[eventName].splice(i, 1);
            }
          }
        }

        if (eventName in this.eventsOnce) {
          for (const [i, event] of this.eventsOnce[eventName].entries()) {
            const curEvent = event;

            if (curEvent === cb) {
              this.eventsOnce[eventName].splice(i, 1);
            }
          }
        }
      }
    } else {
      this.events[eventName] = [];
      this.eventsOnce[eventName] = [];
    }

    return this;
  }

  trigger(eventName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (eventName in this.events) {
      for (const event of this.events[eventName]) {
        if (event !== null && event !== void 0 && event.cb) {
          event.cb(...args);
        } else {
          event(...args);
        }
      }
    }

    if (eventName in this.eventsOnce) {
      for (const [i, event] of this.eventsOnce[eventName].entries()) {
        if (event !== null && event !== void 0 && event.cb) {
          event.cb(...args);
          this.eventsOnce[eventName].splice(i, 1);
        } else {
          event(...args);
          this.eventsOnce[eventName].splice(i, 1);
        }
      }
    }

    return this;
  }

}

(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(EventDispatcher, "instances", {});

/***/ }),

/***/ "../../packages/events/dist/esm/services/index.js":
/*!********************************************************!*\
  !*** ../../packages/events/dist/esm/services/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": function() { return /* reexport safe */ _event_dispatcher_service_js__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher; }
/* harmony export */ });
/* harmony import */ var _event_dispatcher_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-dispatcher.service.js */ "../../packages/events/dist/esm/services/event-dispatcher.service.js");


/***/ }),

/***/ "../../packages/events/dist/esm/types/event-dispatcher.js":
/*!****************************************************************!*\
  !*** ../../packages/events/dist/esm/types/event-dispatcher.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "../../packages/events/dist/esm/types/index.js":
/*!*****************************************************!*\
  !*** ../../packages/events/dist/esm/types/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _event_dispatcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-dispatcher.js */ "../../packages/events/dist/esm/types/event-dispatcher.js");


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_ribajs_doc"] = self["webpackChunk_ribajs_doc"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendors"], function() { return __webpack_require__("./src/scss/main.scss"); })
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], function() { return __webpack_require__("./src/ts/main.ts"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,