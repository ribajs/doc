
<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}">
  <div class="row pt-5">
    <div class="col-12">
      <div class="row">
        <div class="col-12">
          <h1 class="page-title">{{ page.title }}
          </h1>
          <div class="rte">{{ page.content }}</div>
          <div class="content">
            <bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents>
            <section class="my-5">
              <h2 id="task">Gulp build-scss-and-yml task</h2><p>The build-scss-and-yml gulp task can be used to generate theme settings for octobercms using scss variables.</p>
<p>To include the task in your october project, export the gulp task <code>build-scss-and-yml</code> to your gulpfile's exports:</p>
<pre><code class="language-ts">require('@ribajs/octobercms/dist/yaml');
var gulp = require(&quot;gulp&quot;);

exports.default = gulp.series(&quot;build-scss-and-yml&quot;);`
</code></pre>
<p><br>
The <code>build-scss-and-yml</code> task consists of three other gulp tasks which are executed in series: <code>build-yml</code>, <code>merge-yml</code>, <code>merge-with-october-yml</code></p>
<h3><code>build-yml</code></h3>
<p>The build-yml task takes every file matching <code>./assets/**/*.scss</code>, and transforms them using the scssToOctoberYml gulp plugin. The output is stored with the respective file name in the <code>./build/tmp/</code> directory.</p>
<p>The <code>./build/</code> directory can be added safely to any .gitignore file.</p>
<p>Currently the only option to change the directories is editing the riba.js source files, but that might change in future releases.</p>
<h3><code>merge-yml</code></h3>
<p>The merge-yml task takes every file matching <code>./build/tmp/**/*.yml</code> (usually all temporary files created by the build-yml task), and merges them into a single big <code>./build/bundle.yml</code>. If there are any duplicates of yaml keys, this task is supposed to print a warnining. (not happening yet)</p>
<h3><code>merge-with-october-yml</code></h3>
<p>The merge-with-october-yml task combines the content of the <code>./build/bundle.yml</code> file with a file named <code>./default_theme.yaml</code>. The bundle.yml content is added under the yaml key <code>input.form.tabs.fields</code>, which is the default octobercms config field key using the tabs configuration.</p>

              <h2 id="plugin">Gulp scssToOctoberYml plugin</h2><p>The scssToOctoberYml gulp plugin extracts octobercms config fields from a scss file, and returns it as a yaml configuration string.</p>
<p>Currently, there are no options but the input and output files can be specified using the gulp <code>src()</code> function and the <code>dest()</code> pipe:</p>
<pre><code class="language-ts">import { src, dest, task } from &quot;gulp&quot;;
import { scssToOctoberYml } from &quot;./includes/scss-to-october&quot;;

task(&quot;build-yml&quot;, function buildExampleYmlFromScss() {
  return src(&quot;./assets/**/*.scss&quot;).pipe(scssToOctoberYml()).pipe(dest(&quot;./build/tmp/&quot;));
});
</code></pre>
<p>The plugin tries to match scss variables and to transform their values into the octobercms theme settings format. Currently it is only possible to export one scss variable per line, lines containing more than one variable will be ignored.</p>
<p>To mark a variable for export, the following comment is required after the variable declaration:</p>
<h5>Input</h5>
<pre><code class="language-scss">$my-scss-variable: #123123 !default; // octoberyml: {}
</code></pre>
<p>If no further options are supplied, the scssToOctoberYml plugin tries to guess default options.</p>
<h5>Compiled output for the example above</h5>
<pre><code class="language-yml">my_scss_variable:
  default: &quot;#123123&quot;
  assetVar: my-scss-variable
  label: my scss variable
  type: colorpicker
</code></pre>
<p>The type is guessed by using the default value, currently it either defaults to colorpicker or text, depending on the content.</p>
<p>Further options can be supplied through the brackets. Custom options always overwrite the default guess of the plugin, and can be used to further customize the output.</p>
<p>The content of the brackets is parsed using <code>Function()</code> object which also allows to use loose json for the options string:</p>
<h5>Input</h5>
<pre><code class="language-scss">$my-scss-variable: #123123 !default; // octoberyml: {key: &quot;value&quot;}
</code></pre>
<p>Any (octobercms configuration value) can be used, to allow a high extent of customization:</p>
<h5>Input</h5>
<pre><code class="language-scss">$navigation-font: &quot;primary&quot; !default; // octoberyml: {tab: &quot;Font options&quot;, type: &quot;balloon-selector&quot;, label: &quot;Navigation Font&quot;, options: {primary: &quot;Primary&quot;, secondary: &quot;Secondary&quot;, tertiary: &quot;Tertiary&quot;}}
</code></pre>
<h5>Compiled output:</h5>
<pre><code class="language-yml">navigation_font:
  default: '&quot;primary&quot;'
  assetVar: navigation-font
  label: navigation font
  type: balloon-selector
  tab: Font options
  options:
    primary: Primary
    secondary: Secondary
    tertiary: Tertiary
</code></pre>

            </section>
            <bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto scrollbar-x-hidden" rv-scrollbar-draggable="rv-scrollbar-draggable" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>