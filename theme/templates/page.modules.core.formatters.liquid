
<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}">
  <div class="row pt-5">
    <div class="col-12">
      <div class="row">
        <div class="col-12">
          <h1 class="page-title">{{ page.title }}
          </h1>
          <div class="rte">{{ page.content }}</div>
          <div class="content">
            <bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents>
            <section class="my-5" id="array-formatters">
              <h2>Array formatters</h2>
              <section class="my-5" id="contains-formatter">
                <h3>contains</h3><p>Returns true if an object, array or string contains an object, property or substring.</p>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="contains-formatter">
      <template type="single-html-file">
        <div rv-class-text-success="'I like my SNES' | contains 'SNES'">String contains SNES</div>
        <div rv-class-text-success="'I like my SNES' | contains 'PlayStation'">String contains PlayStation</div>
        <div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES'">Object contains SNES</div>
        <div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES' 1">Object contains 1 on key SNES</div>
        <div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES' 2">Object contains 2 on key SNES</div>
        <div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'PlayStation'">Object contains PlayStation</div>
        <div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 'SNES'">Contains SNES</div>
        <div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 2 'GameBoy'">Contains GameBoy on index 2</div>
        <div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 2 'PlayStation'">Contains PlayStation on index 2</div>
        <div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 'PlayStation'">Contains PlayStation</div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>

              </section>
              <section class="my-5" id="empty-formatter">
                <h3>empty</h3><p>Returns <code>true</code> if a string or array is empty</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="empty-formatter">
<template type="single-html-file">
<div rv-if="[] | empty" >The array is empty</div>
<div rv-if="['cracker'] | empty" >The array is not empty</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="first-formatter">
                <h3>first</h3><p>Array formatter to get the first element of an array</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="first-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | first" ></span>.
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="get-formatter">
                <h3>get</h3><p>Get property of object or array by key or index</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="get-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | get 1" ></span>.
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-last-formatter">
                <h3>is-last</h3><p>Returns true if value index is the last index of the array and returns false if it is not the last index</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<ul rv-assign-sweets="['cracker', 'muffin', 'cake']">
  <li rv-each-sweetness="sweets" rv-class-font-weight-bold="sweets | isLast %sweetness%">{sweetness}</li>
</ul>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="last-formatter">
                <h3>last</h3><p>Array formatter to get the first element of an array</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="last-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | last" ></span>.
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="random-formatter">
                <h3>random</h3><p>Formatter to get back a random value of an array</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="random-array-formatter">
<template type="single-html-file">
<div class="row" rv-assign-random-class="'['col-2', 'col-3', 'col-4', 'col-5', 'col-6']' | random">
  <div rv-class="randomClass">This div has a random column class: {randomClass}</div>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>
<p>or random number</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="random-number-formatter">
<template type="single-html-file">
<ul class="list-group" rv-assign-snes-games="'['Mortal Kombat II', 'Teenage Mutant Ninja Turtles IV: Turtles in Time', 'Kirbyâ€™s Dream Course', 'Star Fox', 'F-Zero']'" rv-assign-active-index="snesGames | size | minus 1 | random">
  <li rv-each-snes="snesGames" rv-class-active="activeIndex | eq %snes%" class="list-group-item">{snes}</li>
</ul>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="set-formatter">
                <h3>set</h3><p>Sets property of object, array or value</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div
  rv-assign-arr="['cracker', 'muffin', 'broccoli'] | set 2 'cake'"
  rv-assign-obj="{'cracker': 'tasty', 'muffin': 'yummy', 'cake': 'disgusting'} | set 'cake' 'the tastiest'"
>
  <span rv-text="arr | get 2"></span> is <span rv-text="obj.cake"></span>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="size-formatter">
                <h3>size</h3><p>Returns the size of a string (the number of characters) or an array (the number of elements)</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="size-formatter">
<template type="single-html-file">
<div
  rv-assign-str="'This string has a length of'"
  rv-assign-arr="['cracker', 'muffin', 'cake']"
>
  {str} {str | size} characters and the array has a length of {arr | size} elements.
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <section class="my-5" id="compare-formatters">
              <h2>Compare formatters</h2>
              <section class="my-5" id="and-formatter">
                <h3>and</h3><p>This formatter corresponds to the <code>&amp;&amp;</code> operator: <code>a &amp;&amp; b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="true | and true">Show me!</div>
<div rv-if="true | and false">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="between-formatter">
                <h3>between</h3><p>Formatter to check if a value is between two values.
This formatter corresponds to the expression: <code>a &gt;= b &amp;&amp; a &lt;= c</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="100 | between 50 200">Show me!</div>
<div rv-if="201 | between 50 200">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="egt-formatter">
                <h3>egt</h3><p>Formatter to check if value is equal or greater than another value.
This formatter corresponds to the <code>&gt;=</code> operator: <code>a &gt;= b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | egt 20">Show me!</div>
<div rv-if="30 | egt 20">Show me, too!</div>
<div rv-if="19 | egt 20">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="elt-formatter">
                <h3>elt</h3><p>Formatter to check if value is equal or lower than another value.
This formatter corresponds to the <code>&lt;=</code> operator: <code>a &lt;= b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | elt 20">Show me!</div>
<div rv-if="10 | elt 20">Show me, too!</div>
<div rv-if="30 | elt 20">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="eq-formatter">
                <h3>eq</h3><p>Formatter to check if value is equal than another value.
This formatter corresponds to the <code>===</code> operator: <code>a === b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | eq 20">Show me!</div>
<div rv-if="10 | eq 20">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="lt-formatter">
                <h3>lt</h3><p>Formatter to check if value is lower than another value.
This formatter corresponds to the <code>&lt;</code> operator: <code>a &lt; b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="19 | lt 20">Show me!</div>
<div rv-if="20 | lt 20">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="ne-formatter">
                <h3>ne</h3><p>Formatter to check if value is <strong>not</strong> equal than another value.
This formatter corresponds to the <code>!==</code> operator: <code>a !== b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="10 | ne 20">Show me!</div>
<div rv-if="20 | ne 20">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="not-formatter">
                <h3>not</h3><p>Formatter to check if value is <strong>not</strong> <code>true</code>.
This formatter corresponds to the <code>!</code> expression: <code>!a</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="false | not">Show me!</div>
<div rv-unless="true | not">Show me, too!</div>
<div rv-if="true | not">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="or-formatter">
                <h3>or</h3><p>Formatter to check if the first value is <code>true</code> or the second value is true.
This formatter corresponds to the <code>||</code> expression: <code>a || b</code>.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="false | or true">Show me!</div>
<div rv-if="true | or false">Show me, too!</div>
<div rv-if="false | or false">Show me not!</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <section class="my-5" id="math-formatters">
              <h2>Math formatters</h2>
              <section class="my-5" id="digits-formatter">
                <h3>digits</h3><p>Just get the digits of a string, useful to remove px from css value.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="'10px' | digits"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="divided-by-formatter">
                <h3>dividedBy</h3><p>Divides an output by a number. The output is rounded down to the nearest integer.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | dividedBy 10"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="even-formatter">
                <h3>even / uneven</h3><p><strong>even</strong> returns <code>true</code> if the number is even.
<strong>uneven</strong> returns <code>true</code> if the number is uneven.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<ul>
  <li rv-each-text="['Milk','Chocolate','Butter','Toast']" rv-class-text-success="%text% | even" rv-class-text-danger="%text% | uneven">{text}</li>
</ul>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="gcd-formatter">
                <h3>gcd</h3><p>Greatest common divisor (GCD) useful to calculate a ratio.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-assign-width="1920" rv-assign-height="1080">
  <div rv-assign-gcd="width | gcd height">
    Dimensions: {width} x {height}<br />
    Gcd: {gcd}<br />
    Aspect: <span rv-text="width | dividedBy gcd"></span>:<span rv-text="height | dividedBy gcd"></span>
  </div>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="minus-formatter">
                <h3>minus</h3><p>Formatter to subtracts a number.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | minus 1"></div>
<div rv-text="1000 | minus 123"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="modulo-formatter">
                <h3>modulo</h3><p>Divides an value by a number and returns the remainder.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="5 | modulo 3"></div>
<div rv-text="0 | modulo 2"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="number-formatter">
                <h3>number</h3><p>Formatter to parse a string to number.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="'  1000  ' | number"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="plus-formatter">
                <h3>plus</h3><p>Formatter to add a number to an value.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | plus 1"></div>
<div rv-text="1000 | plus 123"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="times-formatter">
                <h3>times</h3><p>Formatter to multiplies an value by a number.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | times 1"></div>
<div rv-text="1000 | times 3"></div>
<div rv-text="1000 | times 0"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <section class="my-5" id="special-formatters">
              <h2>Special formatters</h2>
              <section class="my-5" id="args-formatter">
                <h3>args</h3><p>This special formatter sets his arguments to a function without call them directly</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-assign-result="0">
  <button rv-on-click="sum | args 5 8">Result is {result}.</button>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="call-formatter">
                <h3>call</h3><p>Calls a function with arguments</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-assign-result="0">
  Result is {sum | call 5 8}.
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="debug-formatter">
                <h3>debug</h3><p>Prints a value to web developer console</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'You should see this text in your browser developer console under info messages.' | debug 'info'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="default-formatter">
                <h3>default</h3><p>Sets a default value if the first value is not set</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="default-formatter">
<template type="single-html-file">
<div
  rv-assign-empty-string="''"
  rv-assign-filled-string="'Link to the Past'"
  class="text-center"
>
  <div rv-text="emptyString | default 'The Legend of Zelda'"></div>
  <small rv-text="filledString | default 'Placeholder'"></small>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <section class="my-5" id="string-formatters">
              <h2>String formatters</h2>
              <section class="my-5" id="append-formatter">
                <h3>append</h3><p>Appends a string to an existing string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="append-formatter">
<template type="single-html-file">
<div rv-text="'Na' | append 'Na' | append 'Naaa'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="downcase-formatter">
                <h3>downcase</h3><p>Converts a string into lowercase</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'NaNaNaaa' | downcase"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="filled-formatter">
                <h3>filled</h3><p>Check if value is a string and not empty</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="filled-formatter">
<template type="single-html-file">
<div
  rv-assign-empty-string="''"
  rv-assign-filled-string="'Link to the Past'"
  class="text-center"
>
  <div rv-if="emptyString | filled" rv-text="emptyString"></div>
  <div rv-if="filledString | filled" rv-text="filledString"></div>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="handleize-formatter">
                <h3>handleize</h3><p>Formats a string into a handle, useful to use a title string as an id or class attribute</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="handleize-formatter">
<template type="single-html-file">
<div rv-assign-title="'Handleize Example Title'">
  <h2 class="m-0" rv-id="title | handleize" rv-text="title"></h2>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="match-formatter">
                <h3>match</h3><p>Checks if a string matchs regular expression</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="match-formatter">
<template type="single-html-file">
<div rv-assign-image="'{{ settings.example_image | img_url: 'master' }}'">
  <img rv-if="image | match '.(gif|jpg|jpeg|tiff|png)'" rv-src="image" class="img-fluid" />
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="pluralize-formatter">
                <h3>pluralize</h3><p>Gets the singular or plural version of a string based on the value of a number. The first parameter is the singular string and the second parameter is the plural string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="pluralize-formatter">
<template type="single-html-file">
<div
  rv-assign-items="['Raspberry Pi', 'Arduino']"
  rv-assign-colors="['Blue']"
>
  Your cart has {items | size} {items | size | pluralize 'item' 'items'} with {colors | size}  {colors | size | pluralize 'color' 'colors'}
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="prepend-formatter">
                <h3>prepend</h3><p>Prepends a string to an existing string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="prepend-formatter">
<template type="single-html-file">
<div rv-text="'Na' | prepend 'Na' | prepend 'Naaa'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="replace-first-formatter">
                <h3>replaceFirst</h3><p>Replaces the first occurrence of a string with a substring</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Super Man' | replaceFirst 'Super' 'Mega'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="replace-formatter">
                <h3>replace</h3><p>Replaces all occurrences of a string with a substring</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Mega Man and Mega Mario' | replace 'Mega' 'Super'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="slice-formatter">
                <h3>slice</h3><p>The <code>slice</code> formatter returns a substring, starting at the specified index.
An optional second parameter can be passed to specify the length of the substring.
If no second parameter is given, a substring until the end will be returned.</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Mega Man and Super Mario' | slice 13"></div>
<div rv-text="'Mega Man and Super Mario' | slice 0 8"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="strip-html-formatter">
                <h3>strip-html</h3><p>Strips all HTML tags from a string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-html="'<h1>Mega Man and <em>Super Mario</em></h1>' | stripHtml"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="strip-formatter">
                <h3>strip</h3><p>Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'        Mega Man and Super Mario        ' | strip"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="upcase-formatter">
                <h3>upcase</h3><p>Converts a string into uppercase</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'\Ã´.Ã´/' | upcase"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <section class="my-5" id="type-formatters">
              <h2>Type formatters</h2>
              <section class="my-5" id="boolean-formatter">
                <h3>boolean</h3><p>Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'I am true' | boolean"></div>
<div rv-text="'' | boolean"></div>
<div rv-text="1 | boolean"></div>
<div rv-text="0 | boolean"></div>
<div rv-text="true | boolean"></div>
<div rv-text="false | boolean"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-array-formatter">
                <h3>isArray</h3><p>Checks if value is an array</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-array-formatter">
<template type="single-html-file">
<div rv-text="[] | isArray"></div>
<div rv-text="{} | isArray"></div>
<div rv-text="'abc' | isArray"></div>
<div rv-text="true | isArray"></div>
<div rv-text="1 | isArray"></div>
<div rv-text="0 | isArray"></div>
<div rv-text="undefined | isArray"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-boolean-formatter">
                <h3>isBoolean</h3><p>Checks if value is a boolean</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isBoolean"></div>
<div rv-text="{} | isBoolean"></div>
<div rv-text="'abc' | isBoolean"></div>
<div rv-text="true | isBoolean"></div>
<div rv-text="1 | isBoolean"></div>
<div rv-text="0 | isBoolean"></div>
<div rv-text="undefined | isBoolean"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-defined-formatter">
                <h3>isDefined</h3><p>Checks if value is defined</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-defined-formatter">
<template type="single-html-file">
<div rv-text="[] | isDefined"></div>
<div rv-text="{} | isDefined"></div>
<div rv-text="'abc' | isDefined"></div>
<div rv-text="true | isDefined"></div>
<div rv-text="1 | isDefined"></div>
<div rv-text="0 | isDefined"></div>
<div rv-text="undefined | isDefined"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-number-formatter">
                <h3>isNumber</h3><p>Checks if value is a number</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-number-formatter">
<template type="single-html-file">
<div rv-text="[] | isNumber"></div>
<div rv-text="{} | isNumber"></div>
<div rv-text="'abc' | isNumber"></div>
<div rv-text="true | isNumber"></div>
<div rv-text="1 | isNumber"></div>
<div rv-text="0 | isNumber"></div>
<div rv-text="undefined | isNumber"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-object-formatter">
                <h3>isObject</h3><p>Checks if value is a object</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isObject"></div>
<div rv-text="{} | isObject"></div>
<div rv-text="'abc' | isObject"></div>
<div rv-text="true | isObject"></div>
<div rv-text="1 | isObject"></div>
<div rv-text="0 | isObject"></div>
<div rv-text="undefined | isObject"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-string-formatter">
                <h3>isString</h3><p>Checks if value is a string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-number-formatter">
<template type="single-html-file">
<div rv-text="[] | isString"></div>
<div rv-text="{} | isString"></div>
<div rv-text="'abc' | isString"></div>
<div rv-text="true | isString"></div>
<div rv-text="1 | isString"></div>
<div rv-text="0 | isString"></div>
<div rv-text="undefined | isString"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="is-undefined-formatter">
                <h3>isUndefined</h3><p>Checks if value is undefined</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isUndefined"></div>
<div rv-text="{} | isUndefined"></div>
<div rv-text="'abc' | isUndefined"></div>
<div rv-text="true | isUndefined"></div>
<div rv-text="1 | isUndefined"></div>
<div rv-text="0 | isUndefined"></div>
<div rv-text="undefined | isUndefined"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="json-formatter">
                <h3>json</h3><p>Converts a string into a JSON string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-text="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | json"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="parse-formatter">
                <h3>parse</h3><p>Parses a json string to object</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-assign-json-string="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | json">
  <div rv-assign-object="jsonString | parse">
    The key "SNES" has the value of "{object | get 'SNES'}" and the json string is {jsonString}.
  </div>
</div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
              <section class="my-5" id="string-formatter">
                <h3>string</h3><p>Parses a value to string</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-text="1000 | string | isString"></div>
<div rv-text="1000 | isString"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>

              </section>
            </section>
            <bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto scrollbar-x-hidden" rv-scrollbar-draggable="rv-scrollbar-draggable" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>