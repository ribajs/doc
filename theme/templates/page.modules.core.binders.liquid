<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}"><div class="row pt-5"><div class="col-12"><div class="row"><div class="col-12"><h1 class="page-title">{{ page.title }}</h1><div class="rte">{{ page.content }}</div><div class="content"><bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents><section class="my-5" id="add-class-binder"><h2>add-class</h2><p>Adds the value of the attribute to the class. Instead of <code>class-[classname]</code> the classname is setted by the attribute value and not by the star value.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-todo=&quot;todos&quot;&gt;
    &lt;div rv-add-class=&quot;todo.state&quot;&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>
</section><section class="my-5" id="remove-class-binder"><h2>remove-class</h2><p>Removes the given class string the class attibute.
Instead of <code>class-[classname]</code> the classname is removed by the
given attribute and not by the star value.</p>
<pre><code class="language-html">&lt;img class=&quot;loading&quot; rv-src=&quot;img.src&quot; rv-remove-class=&quot;loadingClass&quot;&gt;
</code></pre>
</section><section class="my-5" id="assign-binder"><h2>assign</h2><p>Assign a value in your model. The value you want to assign must be an object and will be concatenate with your model. You can also pass a JSON string.</p>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="assing-binder">
      <template type="single-html-file">
        <div rv-assign="{'newValue': 'hello', 'anotherNewValue': 'world'}">{newValue} {anotherNewValue}!</div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section><section class="my-5" id="assign-property-binder"><h2>assign-[property]</h2><p>Assign a value in your model, sets or overwrites a value by his property name (named whatever value is in place of <code>[property]</code>) in your model.</p>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="bs4-icon">
      <template type="single-html-file">
        <div rv-assign-new-value="'Hello World'">{newValue}!</div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section><section class="my-5" id="attribute-binder"><h2>[attribute]</h2><p>Sets the value of an attribute (whatever value is in place of <code>[attribute]</code>) on the element.</p>
<p><em>If your binding declaration does not match any of the above routines, it will fallback to use this binding.</em></p>
<pre><code class="language-html">&lt;input type=&quot;text&quot; rv-placeholder=&quot;field.placeholder&quot;&gt;
</code></pre>
</section><section class="my-5" id="block-binder"><h2>block</h2><p>Blocks the binding for the current element and his childs.</p>
<p><em>Please note that <code>script</code>, <code>style</code>, <code>template</code> and <code>code</code> tags are blocked by default. You can change this by setting the <code>blockNodeNames</code> option.</em></p>
<pre><code class="language-html">&lt;div rv-block=&quot;&quot;&gt;
  &lt;!--
    After binding you will see `{ value }`
    (instead of the content of value)
    because the binding is blocked here
  --&gt;
  { value }
&lt;/div&gt;
</code></pre>
</section><section class="my-5" id="checked-binder"><h2>checked</h2><p>Checks the input when the value evaluates to true and unchecks the input when the value evaluates to false. This also sets the bound object's value to true/false when the user checks/unchecks the input (two-way).</p>
<p><em>Use this instead of value when binding to checkboxes or radio buttons.</em></p>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot; rv-checked=&quot;item.enabled&quot;&gt;
</code></pre>
</section><section class="my-5" id="unchecked-binder"><h2>unchecked</h2><p>Unchecks the input when the value evaluates to true and checks the input when the value evaluates to false. This also sets the bound object's value to false/true when the user checks/unchecks the input (two-way).</p>
<p><em>Use this instead of value when binding to checkboxes or radio buttons.</em></p>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot; rv-unchecked=&quot;item.disabled&quot;&gt;
</code></pre>
</section><section class="my-5" id="class-classname-binder"><h2>class-[classname]</h2><p>Adds a class (whatever value is in place of <code>[classname]</code>) on the element when the value evaluates to true and removes that class if the value evaluates to false.</p>
<pre><code class="language-html">&lt;li rv-class-completed=&quot;todo.done&quot;&gt;{ todo.name }&lt;/li&gt;
</code></pre>
</section><section class="my-5" id="disabled-binder"><h2>disabled</h2><p>Disables the element when the value evaluates to true and enables the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-disabled=&quot;user.suspended&quot;&gt;Upvote&lt;/button&gt;
</code></pre>
</section><section class="my-5" id="enabled-binder"><h2>enabled</h2><p>Enables the element when the value evaluates to true and disables the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-enabled=&quot;user.canVote&quot;&gt;Upvote&lt;/button&gt;
</code></pre>
</section><section class="my-5" id="each-item-binder"><h2>each-[item]</h2><p>Appends a new instance of the element in place for each item in an array. Each element is bound to a new view created in a scope with three special properties:</p>
<ul>
<li>the current iterated item in the array, named whatever value is in place of <code>[item]</code></li>
<li><code>%[item]%</code>: the current iterated item index. Can be configured by setting <code>index-property</code> attribute</li>
<li><code>$parent</code>: the parent scope, if any</li>
</ul>
<p><em>Also note that you may bind to the iterated item directly on the parent element which contains the actual <code>rv-each</code> declaration.</em></p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-todo=&quot;todos&quot; rv-data-id=&quot;todo.id&quot;&gt;
    &lt;input type=&quot;checkbox&quot; rv-checked=&quot;todo.done&quot;&gt; { %todo% } - { todo.name }
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>
<rv-bind-content><template><rv-example-tabs handle="each-item"><template title="component.html" type="source"><pre><code class="language-html">&lt;nav&gt;
  &lt;button rv-on-click=&quot;push&quot;&gt;Push&lt;/button&gt;
  &lt;button rv-on-click=&quot;pop&quot;&gt;Pop&lt;/button&gt;
  &lt;button rv-on-click=&quot;shift&quot;&gt;Shift&lt;/button&gt;
  &lt;button rv-on-click=&quot;unshift&quot;&gt;Unshift&lt;/button&gt;
  &lt;button rv-on-click=&quot;splice&quot;&gt;Splice&lt;/button&gt;
  &lt;button rv-on-click=&quot;sort&quot;&gt;Sort&lt;/button&gt;
  &lt;button rv-on-click=&quot;reset&quot;&gt;Reset&lt;/button&gt;
&lt;/nav&gt;
&lt;section&gt;
  &lt;div rv-each-item=&quot;items&quot;&gt;
    &lt;div&gt;Item { %item% } / { item.name }&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre></template><template title="component.ts" type="source"><pre><code class="language-typescript">import { Component } from &#39;@ribajs/core&#39;;
import template from &#39;./each-item-example.component.html&#39;;

export class EachItemExampleComponent extends Component {

  public static tagName: string = &#39;rv-each-item-example&#39;;

  protected scope: Scope = {
    items: this.getItems(),
    pop: this.pop,
    push: this.push,
    reset: this.reset,
    shift: this.shift,
    sort: this.sort,
    splice: this.splice,
    unshift: this.unshift,
  };

  constructor(element?: HTMLElement) {
    super(element);
  }

  public push() {
    this.scope.items.push({name: &#39;pushed&#39;});
  }

  public pop() {
    this.scope.items.pop();
  }

  public shift() {
    this.scope.items.shift();
  }

  public unshift() {
    this.scope.items.unshift({name: &#39;shifted&#39;});
  }

  public splice() {
    this.scope.items.splice(1, 1, {name: &#39;spliced1&#39;}, {name: &#39;spliced2&#39;});
  }

  public reset() {
    this.scope.items = this.getItems();
  }

  public sort() {
    this.scope.items.sort((a, b) =&gt; {
      return (a.value || 0) - (b.value || 0);
    });
  }

  protected connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  protected getItems(): Item[] {
    return [{name: &#39;x&#39;, value: 2}, {name: &#39;y&#39;, value: 1}, {name: &#39;z&#39;, value: 3}];
  }

  protected async init(observedAttributes: string[]) {
    return super.init(observedAttributes)
    .then((view) =&gt; {
      return view;
    });
  }

  protected template() {
    return template;
  }
}

interface Item {
  name: string;
  value?: number;
}

interface Scope {
  items: Item[];
  push: EachItemExampleComponent[&#39;push&#39;];
  pop: EachItemExampleComponent[&#39;pop&#39;];
  shift: EachItemExampleComponent[&#39;shift&#39;];
  unshift: EachItemExampleComponent[&#39;unshift&#39;];
  splice: EachItemExampleComponent[&#39;splice&#39;];
  reset: EachItemExampleComponent[&#39;reset&#39;];
  sort: EachItemExampleComponent[&#39;sort&#39;];
}
</code></pre></template><template title="index.html" type="source"><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;each-star-example&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;rv-app&quot;&gt;
      &lt;rv-each-item-example&gt;&lt;/rv-each-item-example&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></template><template title="Info" type="info"><h1>each-item-example</h1>
<pre><code class="language-bash">git clone --recurse-submodules https://github.com/ribajs/riba.git
cd riba/examples/each-item
npm install
npm run start
</code></pre>
</template><template title="Preview" type="preview"><rv-each-item-example> </rv-each-item-example></template></rv-example-tabs></template></rv-bind-content></section><section class="my-5" id="nested-each-item-binder"><h2>Nested each-[item]</h2><p>By nesting elements bound by <code>rv-each</code>, a scope is created for each nest level. The variables from parent scopes can be acessed by child ones, using a resolution algorithm similar to JavaScript prototype chain, i.e., looks for current scope if not found, look in parent scope repeating until find.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-category=&quot;categories&quot;&gt;
    { category.name }
    &lt;ul&gt;
      &lt;li rv-each-todo=&quot;category.todos&quot;&gt;
        &lt;input
          type=&quot;checkbox&quot;
          rv-checked=&quot;todo.done&quot;
          rv-data-category-id=&quot;category.id&quot;&gt;
          { %category% } - { %todo% } - { todo.name }
      &lt;/li&gt;
    &lt;ul&gt;
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>
<!-- A more complex example can be found [here](https://codepen.io/blikblum/pen/MKXXOX?editors=1010#0) -->
</section><section class="my-5" id="hide-binder"><h2>hide</h2><p>Hides the element when the value evaluates to true and shows the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-hide=&quot;feature.disabled&quot;&gt;&lt;/section&gt;
</code></pre>
</section><section class="my-5" id="show-binder"><h2>show</h2><p>Shows the element when the value evaluates to true and hides the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-show=&quot;user.admin&quot;&gt;Remove&lt;/button&gt;
</code></pre>
</section><section class="my-5" id="html-binder"><h2>html</h2><p>Sets the element's HTML content.</p>
<pre><code class="language-html">&lt;section rv-html=&quot;item.summary&quot;&gt;&lt;/section&gt;
</code></pre>
</section><section class="my-5" id="text-binder"><h2>text</h2><p>Sets the element's text content.</p>
<pre><code class="language-html">&lt;h1 rv-text=&quot;user.name&quot;&gt;&lt;/h1&gt;
</code></pre>
<p>You can also bind text using interpolation.</p>
<pre><code class="language-html">&lt;p&gt;{ user.name } is { user.age } years old.&lt;/p&gt;
</code></pre>
</section><section class="my-5" id="template-binder"><h2>template</h2><p>Sets the element's HTML content like <code>rv-html</code>, but also binds the HTML content so you can also use binders and componentes in such html templates.</p>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="assing-binder">
      <template type="single-html-file">
        <div rv-assign-tpl="'<li rv-each-item='items'>{item}</li>'" rv-assign-items="['a', 'b', 'c', 'd']">
          <ul rv-template="tpl"></ul>
        </div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section><section class="my-5" id="if-binder"><h2>if</h2><p>Inserts and binds the element as well as it's child nodes into the DOM when the value evaluates to true and removes / unbinds the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-if=&quot;item.editable&quot;&gt;&lt;/section&gt;
</code></pre>
</section><section class="my-5" id="unless-binder"><h2>unless</h2><p>Removes and unbinds the element as well as it's child nodes when the value evaluates to true and inserts / binds the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-unless=&quot;item.locked&quot;&gt;&lt;/section&gt;
</code></pre>
</section><section class="my-5"><h2 id="on-event-binder">on-[event]</h2><p>Binds an event listener on the element using the event specified in <code>[event]</code> and the bound object (should return a function) as the callback.</p>
<p><em>If the end value of the binding changes to a different function, this binder will automatically unbind the old callback and bind a new listener to the new function.</em></p>
<pre><code class="language-html">&lt;button rv-on-click=&quot;destroy | args item&quot;&gt;Remove&lt;/button&gt;
</code></pre>
</section><section class="my-5" id="srcset-size-binder"><h2>srcset-[size]</h2><p>Sets an url with size to the <code>srcset</code> attribute</p>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs handle="srcset-size" class="pt-3">
<template type="single-html-file">
<img
  rv-srcset-468w="'//placehold.it/468x'"
  rv-srcset-648w="'//placehold.it/648x'"
  rv-srcset-1068w="'//placehold.it/1068x'"
  sizes="(max-width: 767px) 468px, (max-width: 991px) 648px, (min-width: 992px) 1068px"
  class="img-fluid"
  src="//placehold.it/100x"
/>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>
</section><section class="my-5" id="style-property-binder"><h2>style-property</h2><p>Adds a style to the element.</p>
<pre><code class="language-html">&lt;div rv-style-background-color=&quot;'blue'&quot;&gt;&lt;/div&gt;
</code></pre>
<rv-bind-content class="pt-3">
<template>
<rv-example-tabs handle="srcset-size" class="pt-3">
<template type="single-html-file">
<div rv-style-background-color="'blue'" rv-style-width="'20px'" rv-style-height="'20px'"></div>
</template>
</rv-example-tabs>
</template>
</rv-bind-content>
</section><section class="my-5" id="value-binder"><h2>value</h2><p>Sets the element's value when the attribute changes and sets the bound object's value when the input element changes from user input (two-way).</p>
<pre><code class="language-html">&lt;input rv-value=&quot;item.name&quot;&gt;
</code></pre>
</section><bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto scrollbar-x-hidden" rv-scrollbar-draggable="rv-scrollbar-draggable" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy></div></div></div></div></div></div>