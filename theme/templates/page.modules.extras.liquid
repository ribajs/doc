<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}"><div class="row pt-5"><div class="col-12"><div class="row"><div class="col-12"><h1 class="page-title">{{ page.title }}</h1><div class="rte">{{ page.content }}</div><div class="content"><bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents><section class="my-5"><h1>Extras Module</h1>
<h2>Install</h2>
<pre><code class="language-bash">npm install --save @ribajs/extras
</code></pre>
<h2>Regist</h2>
<p>To regist the module include <code>import extrasModule from '@ribajs/extras';</code> in your <code>main.ts</code> file and regist the module with <code>riba.module.regist(extrasModule.init());</code>:</p>
<pre><code class="language-ts">import { Riba, coreModule } from '@ribajs/core';
import { extrasModule } from '@ribajs/extras';
import { ready } from '@ribajs/utils/src/dom';
const riba = new Riba();
const model = {};
riba.module.regist(coreModule.init());
riba.module.regist(extrasModule.init());
ready(() =&gt; {
  riba.bind(document.body, model);
});
</code></pre>
</section><section class="my-5" id="binders"><h2>Binders</h2><section class="my-5" id="data-scroll-position-y-binder"><h3>data-scroll-position-y</h3><p>Sets the scroll position (<code>&quot;top&quot;</code>, <code>&quot;scrolled&quot;</code>, <code>&quot;bottom&quot;</code>) to the element as a data attribute, useful if you want to define styles depending on the scroll position.</p>
<p>Options can be passed via data attributes, e.g <code>data-placement=&quot;right&quot;</code></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>data-offset-top</code></td>
<td><code>10</code></td>
<td>Top offset, the scroll position is <code>&quot;top&quot;</code> as long as the scroll position is smaller than the top offset or 0</td>
</tr>
<tr>
<td><code>data-offset-bottom</code></td>
<td><code>10</code></td>
<td>Bottom offset, the scroll position is <code>&quot;bottom&quot;</code> as long as the scroll position is on the end or just before according to the offset</td>
</tr>
</tbody>
</table>
<p>The binders value is a selector to the element you want to watch the scroll event for</p>
<table>
<thead>
<tr>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'window'</code></td>
<td>Can be <code>'window'</code> for the Window object, <code>'this'</code> for the current element or any selector like <code>'#page-wrapper'</code></td>
</tr>
</tbody>
</table>
<p>An example style could be look like this</p>
<pre><code class="language-scss">body:not([[data-scroll-position-y='top']) {
  padding-top: 3em;
}
</code></pre>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="data-scroll-position-y-binder">
      <template type="single-html-file">
        <div class="scrollbar-y-auto" rv-data-scroll-position-y="'this'">
          <p><strong>The Background color changes depending on the scroll position top, scrolled or bottom to red, yellow or blue.</strong></p>
          <rv-lorem-ipsum generate-paragraphs="5"></rv-lorem-ipsum>
        </div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section><section class="my-5" id="touch-events-binder"><h3>touch-events</h3><p>Add this binder to an element to trigger additional touch events.</p>
<p>Then you can react to the events with the <code>on-[event]</code> binder like this:</p>
<pre><code class="language-html">&lt;div rv-touch-events rv-on-swiperight=&quot;nextPage&quot;&gt;
  ...
&lt;/div&gt;
</code></pre>
<p>This binder uses <code>TouchEventsService</code> to trigger the additional events, check out the <a rv-scroll-to-on-click="'#touch-events-service'" href="#touch-events-service" data-offset="80">TouchEventsService</a> to find out what additional events are available.</p>
<rv-bind-content><template><rv-example-tabs handle="extras-touch-events"><template title="main.ts" type="source"><pre><code class="language-typescript">import { coreModule, Riba } from &quot;@ribajs/core&quot;;
import { extrasModule } from &quot;@ribajs/extras&quot;;
import { touchEventsModule } from &quot;./touch-events.module&quot;;

const riba = new Riba();
const model = {};

// Register modules
riba.module.regist(coreModule.init());
riba.module.regist(extrasModule.init());
riba.module.regist(touchEventsModule.init());

riba.bind(document.body, model);
</code></pre></template><template title="component.html" type="source"><pre><code class="language-html">&lt;div class=&quot;row flex-column flex-md-row d-flex flex-nowrap h-100&quot;&gt;
  &lt;!--rv-on-tapmove=&quot;log | args &#39;tapmove&#39;&quot;--&gt;
  &lt;div
    class=&quot;col-md-7 col-lg-8 col-xl-9 bg-light text-dark py-3 d-flex justify-content-center align-items-center touch-zone&quot;
    rv-touch-events
    rv-on-tapstart=&quot;log | args &#39;tapstart&#39;&quot;
    rv-on-tapend=&quot;log | args &#39;tapend&#39;&quot;
    rv-on-tap=&quot;log | args &#39;tap&#39;&quot;
    rv-on-tap2=&quot;log | args &#39;tap2&#39;&quot;
    rv-on-tap3=&quot;log | args &#39;tap3&#39;&quot;
    rv-on-singletap=&quot;log | args &#39;singletap&#39;&quot;
    rv-on-doubletap=&quot;log | args &#39;doubletap&#39;&quot;
    rv-on-taphold=&quot;log | args &#39;taphold&#39;&quot;
    rv-on-swipe=&quot;log | args &#39;swipe&#39;&quot;
    rv-on-swipeup=&quot;log | args &#39;swipeup&#39;&quot;
    rv-on-swiperight=&quot;log | args &#39;swiperight&#39;&quot;
    rv-on-swipedown=&quot;log | args &#39;swipedown&#39;&quot;
    rv-on-swipeleft=&quot;log | args &#39;swipeleft&#39;&quot;
    rv-on-swipeend=&quot;log | args &#39;swipeend&#39;&quot;
  &gt;
    &lt;span&gt;Touch here&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-md-5 col-lg-4 col-xl-3 bg-dark text-light py-3 h-100 console&quot;&gt;
    &lt;p class=&quot;log&quot;&gt;
      &lt;span class=&quot;no-data&quot;&gt;Start touching to send data to this console.&lt;/span&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></template><template title="component.ts" type="source"><pre><code class="language-typescript">import { Component, TemplateFunction } from &quot;@ribajs/core&quot;;
import { hasChildNodesTrim } from &quot;@ribajs/utils/src/dom.js&quot;;
import template from &quot;./touch-events-example.component.html&quot;;

export class TouchEventsExampleComponent extends Component {
  public static tagName = &quot;rv-touch-events-example&quot;;

  protected autobind = true;

  protected consoleElement: HTMLDivElement | null = null;
  protected touchZoneElement: HTMLDivElement | null = null;

  public scope: any = {
    log: this.log
  };

  constructor() {
    super();
  }

  public log(eventName: string, event: Event) {
    if (this.consoleElement) {
      let html = `&lt;p class=&quot;log&quot;&gt;&lt;span class=&quot;name&quot;&gt;${eventName}&lt;/span&gt;`;
      if ((event as any).detail &amp;&amp; (event as any).detail.offset) {
        html += `&lt;span class=&quot;detail&quot;&gt;(X: ${
          (event as any).detail.offset.x
        } Y: ${(event as any).detail.offset.y})&lt;/span&gt;`;
      }
      html +=
        &#39;&lt;span class=&quot;time&quot;&gt;&#39; + new Date().toLocaleTimeString() + &quot;&lt;/span&gt;&lt;/p&gt;&quot;;
      this.consoleElement.insertAdjacentHTML(&quot;afterbegin&quot;, html);
    }
  }

  protected connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  protected async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(&quot;.console&quot;);
    this.touchZoneElement = this.querySelector(&quot;.touch-zone&quot;);
  }

  protected template(): ReturnType&lt;TemplateFunction&gt; {
    // Only set the component template if there no childs already
    if (hasChildNodesTrim(this)) {
      return null;
    } else {
      return template;
    }
  }
}
</code></pre></template><template title="Preview" type="preview"><rv-touch-events-example></rv-touch-events-example></template></rv-example-tabs></template></rv-bind-content></section><section class="my-5" id="scroll-events-binder"><h3>scroll-events</h3><p>Add this binder to an element to trigger additional scroll events.</p>
<p>Then you can react to the events with the <code>on-[event]</code> binder like this:</p>
<pre><code class="language-html">&lt;div rv-scroll-events rv-on-scrollended=&quot;showPopup&quot;&gt;
  ...
&lt;/div&gt;
</code></pre>
<p>This binder uses <code>ScrollEventsService</code> to trigger additional scroll events on the element, check out the <a rv-scroll-to-on-click="'#scroll-events-service'" href="#scroll-events-service" data-offset="80">ScrollEventsService</a> to find out what additional events are available.</p>
<rv-bind-content><template><rv-example-tabs handle="extras-scroll-events"><template title="main.ts" type="source"><pre><code class="language-typescript">import { coreModule, Riba } from &quot;@ribajs/core&quot;;
import { extrasModule } from &quot;@ribajs/extras&quot;;
import { extrasScrollEventsModule } from &quot;./extras-scroll-events.module&quot;;

const riba = new Riba();
const model = {};

// Register modules
riba.module.regist(coreModule.init());
riba.module.regist(extrasModule.init());
riba.module.regist(extrasScrollEventsModule.init());

riba.bind(document.body, model);
</code></pre></template><template title="component.html" type="source"><pre><code class="language-html">&lt;div class=&quot;row flex-column flex-md-row d-flex flex-nowrap h-100&quot;&gt;
  &lt;div
    class=&quot;col bg-light text-dark touch-zone&quot;
    rv-scroll-events
    rv-scrollbar-draggable
    rv-on-scrollstart=&quot;log | args &#39;scrollstart&#39;&quot;
    rv-on-scrollended=&quot;log | args &#39;scrollended&#39;&quot;
    rv-on-scrollleft=&quot;log | args &#39;scrollleft&#39;&quot;
    rv-on-scrollright=&quot;log | args &#39;scrollright&#39;&quot;
    rv-on-scrollup=&quot;log | args &#39;scrollup&#39;&quot;
    rv-on-scrolldown=&quot;log | args &#39;scrolldown&#39;&quot;
    rv-on-scrolling=&quot;log | args &#39;scrolling&#39;&quot;
    rv-on-scrollend=&quot;log | args &#39;(native scrollend)&#39;&quot;
    rv-on-scroll=&quot;log | args &#39;(native scroll)&#39;&quot;
  &gt;
    &lt;div class=&quot;touch-zone-background d-flex justify-content-center align-items-center h-100 w-100&quot;&gt;Scroll here&lt;/div&gt;
    &lt;div class=&quot;touch-space&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-12 col-md-6 col-lg-4 col-xl-4 bg-dark text-light py-3 h-100 console&quot;&gt;
    &lt;p class=&quot;log&quot;&gt;
      &lt;span class=&quot;no-data&quot;&gt;Start touching to send data to this console.&lt;/span&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></template><template title="component.ts" type="source"><pre><code class="language-typescript">import { Component, TemplateFunction } from &quot;@ribajs/core&quot;;
import { hasChildNodesTrim } from &quot;@ribajs/utils/src/dom.js&quot;;
import template from &quot;./extras-scroll-events-example.component.html&quot;;

export class ExtrasScrollEventsExampleComponent extends Component {
  public static tagName = &quot;rv-extras-scroll-events-example&quot;;

  protected autobind = true;

  protected consoleElement: HTMLDivElement | null = null;
  protected touchZoneElement: HTMLDivElement | null = null;

  public scope: any = {
    log: this.log
  };

  constructor() {
    super();
  }

  public log(eventName: string, event: Event) {
    if (this.consoleElement) {
      let html = `&lt;p class=&quot;log&quot;&gt;&lt;span class=&quot;name&quot;&gt;${eventName}&lt;/span&gt;`;
      const detail = (event as CustomEvent).detail;
      if (detail &amp;&amp; detail.position) {
        html += `&lt;span class=&quot;detail&quot;&gt;(x: ${detail.position.x} y: ${detail.position.y} maxX: ${detail.position.maxX} maxY: ${detail.position.maxY})&lt;/span&gt;`;
      }
      html +=
        &#39;&lt;span class=&quot;time&quot;&gt;&#39; + new Date().toLocaleTimeString() + &quot;&lt;/span&gt;&lt;/p&gt;&quot;;
      this.consoleElement.insertAdjacentHTML(&quot;afterbegin&quot;, html);
    }
  }

  protected connectedCallback() {
    super.connectedCallback();
    this.init([]);
  }

  protected async beforeBind() {
    await super.beforeBind();
    this.consoleElement = this.querySelector(&quot;.console&quot;);
    this.touchZoneElement = this.querySelector(&quot;.touch-zone&quot;);
  }

  protected template(): ReturnType&lt;TemplateFunction&gt; {
    // Only set the component template if there no childs already
    if (hasChildNodesTrim(this)) {
      return null;
    } else {
      return template;
    }
  }
}
</code></pre></template><template title="Preview" type="preview"><rv-extras-scroll-events-example></rv-extras-scroll-events-example></template></rv-example-tabs></template></rv-bind-content></section></section><section class="my-5" id="services"><h2>Services</h2><section class="my-5" id="touch-events-service"><h3>TouchEventsService</h3><section><p>The <code>TouchEventsService</code> is a re-implementation of the beautiful <a href="https://github.com/benmajor/jQuery-Touch-Events">jQuery Touch Events</a> module in vanilla JavaScript (JQuery free).</p>
<h4>Usage</h4>
<p>Create a new instance of the <code>TouchEventsService</code> with an Element as argument to trigger the touch events on this element:</p>
<pre><code class="language-ts">import { TouchEventsService } from '@ribajs/extras';
const element = document.querySelector('.trigger-touch-events');
const touchEventService = new TouchEventsService(element);
element.addEventListener('swiperight' as any, (swipeEvent: CustomEvent) =&gt; {
  console.debug('swiperight x amount', swipeEvent.detail.xAmount);
});
</code></pre>
<h4>The Events</h4>
<ul>
<li><strong><code>tapstart</code></strong><br>
Fired as soon as the user begins touching an element (or clicking, for desktop environments).</li>
<li><strong><code>tapend</code></strong><br>
Fired after the user releases their finger from the target element (or releases their mouse button on desktops).</li>
<li><strong><code>tapmove</code></strong><br>
Fired as soon as the user begins moving their finger on an element (or moving their mouse, for desktop environments).</li>
<li><strong><code>tap</code></strong><br>
This event is fired whenever the user taps and releases their finger on the target element. Caution should be observed when using this event in conjunction with tap events, especially <code>doubletap</code>. This event will be fired twice when <code>doubletap</code> is used, so it is recommended to use <code>singletap</code> in this case.</li>
<li><strong><code>singletap</code></strong><br>
Unlike <code>tap</code> this event is only triggered once we are certain the user has only tapped the target element a single time. This will not be triggered by <code>doubletap</code> or <code>taphold</code>, unlike <code>tap</code>. Since we need to run some tests to make sure the user isn't double tapping or holding a tap on the target element, this event is fired with a short delay (currently of 500 milliseconds).</li>
<li><strong><code>doubletap</code></strong><br>
Triggered whenever the user double taps on the target element. The threshold (time between taps) is currently set at 500 milliseconds.</li>
<li><strong><code>taphold</code></strong><br>
This event is triggered whenever the user taps on the target element and leaves their finger on the element for at least <em>750 milliseconds</em>.</li>
<li><strong><code>swipe</code></strong><br>
This is called whenever the user swipes their finger on the target element. It is not direction-dependent, and is fired regardless of the direction the user swiped.</li>
<li><strong><code>swipeup</code></strong><br>
Similar to <code>swipe</code>, except only called when the user swipes their finger in an upward direction on the target element (i.e. bottom to top)</li>
<li><strong><code>swiperight</code></strong><br>
Similar to <code>swipe</code>, but triggered only when the user swipes their finger left to right on the target element.</li>
<li><strong><code>swipedown</code></strong><br>
Similar to <code>swipe</code>, but triggered only when the user swipes their finger top to bottom on the target element.</li>
<li><strong><code>swipeleft</code></strong><br>
Similar to <code>swipe</code>, but triggered only when the user swipes their finger from right to left.</li>
<li><strong><code>swipeend</code></strong><br>
The <code>swipeend</code> event is trigged whenever a swipe event ends (i.e. the user finished moving their finger / cursor and released it). This event should be used to handle custom functions, since it will be triggered only when the swipe ends, rather than triggering immediately when the threshold has been met.</li>
</ul>
<h4>Event detail properties</h4>
<p>Each event now features detail properties that can be accessed via the detail property. The detail property includes some basic data relating specifically to the event, and can be accessed as a standard JavaScript object. To hook into this properties, you should use the following code:</p>
<pre><code class="language-ts">element.addEventListener('swipeend' as any, (event: CustomEvent) =&gt; {
  console.debug('swipeend extra data', event.detail);
});
</code></pre>
<p>Given the example above, the detail object will now contain some basic data that can be accessed through <code>event.detail</code>.. The <code>event.detail.originalEvent</code>  will represent the last native event that occurred.</p>
<p>Each event provides different extra data. The following shows the numerous data that has been assigned to the detail object:</p>
<h4><code>tapstart</code>, <code>tapend</code>, <code>tapmove</code>, <code>singletap</code></h4>
<p><code>offset</code> - object containing the X and Y positions of the event relative to the element to which is was bound. Accessed through <code>offset.x</code> and <code>offset.y</code> respectively.</p>
<p><code>position</code> - object containing the X and Y positions of the event relative to the screen. Accessed through <code>position.x</code> and <code>position.y</code> respectively.</p>
<p><code>time</code> - JavaScript timestamp the event occurred (milliseconds since the Unix Epoch)</p>
<p><code>target</code> - the element from which the event was triggered.</p>
<p><code>originalEvent</code> - the the last native event that occurred.</p>
<h4><code>tap</code></h4>
<p><code>touches</code> - Array of object containing <code>position</code> and <code>offset</code>.</p>
<p><code>touches[i].offset</code> - object containing the X and Y positions of the event relative to the element to which is was bound. Accessed through <code>offset.x</code> and <code>offset.y</code> respectively.</p>
<p><code>touches[i].position</code> - object containing the X and Y positions of the event relative to the screen. Accessed through <code>position.x</code> and <code>position.y</code> respectively.</p>
<p><code>time</code> - JavaScript timestamp the event occurred (milliseconds since the Unix Epoch)</p>
<p><code>target</code> - the element from which the event was triggered.</p>
<p><code>originalEvent</code> - the the last native event that occurred.</p>
<h4><code>taphold</code></h4>
<p><code>touches</code> - Array of object containing <code>position</code> and <code>offset</code>.</p>
<p><code>touches[i].offset</code> - object containing the X and Y positions of the event relative to the element to which is was bound. Accessed through <code>offset.x</code> and <code>offset.y</code> respectively.</p>
<p><code>touches[i].position</code> - object containing the X and Y positions of the event relative to the screen. Accessed through <code>position.x</code> and <code>position.y</code> respectively.</p>
<p><code>duration</code>: the time in milliseconds that the user tapped for.</p>
<p><code>time</code> - JavaScript timestamp the event occurred (milliseconds since the Unix Epoch)</p>
<p><code>target</code> - the element from which the event was triggered.</p>
<p><code>originalEvent</code> - the the last native event that occurred.</p>
<h4><code>doubletap</code></h4>
<p><code>firstTap</code> - Object containing the same data as a <code>tap</code> event, but for the first tap to occur.</p>
<p><code>secondTap</code> - Object containing the same data as a <code>tap</code> event, but for the second (i.e. final) tap to occur.</p>
<p><code>interval</code> - the time in milliseconds between the two tap.</p>
<p><code>target</code> - the element from which the event was triggered.</p>
<p><code>originalEvent</code> - the the last native event that occurred.</p>
<h4><code>swipe</code>, <code>swipeup</code>, <code>swiperight</code>, <code>swipedown</code>, <code>swipeleft</code>, <code>swipeend</code></h4>
<p><code>direction</code> - string representing the swipe direction (either <code>up</code>, <code>right</code>, <code>down</code> or <code>left</code>).</p>
<p><code>duration</code> - the time in milliseconds over which the swipe took place (for best results, use with <code>swipeend</code> only, as this will typically be equal to the defined <code>swipe-threshold</code>.</p>
<p><code>xAmount</code> - number of pixels the swipe occupied on the X-axis (returned regardless of direction).</p>
<p><code>yAmount</code> - number of pixels the swipe occupied on the Y-axis (returned regardless of direction).</p>
<p><code>startEvnt</code> - Object containing the same data as a <code>tap</code> event, but captured when swiping begins.</p>
<p><code>endEvnt</code> - Object containing the same data as a <code>tap</code> event, but captured when swiping is complete.</p>
<p><code>target</code> - the element from which the event was triggered.</p>
<p><code>originalEvent</code> - the the last native event that occurred.</p>
<h4>Properties</h4>
<ul>
<li><code>isTouchCapable</code>:<br>
<code>true</code> or <code>false</code> depending upon whether touch events are supported.</li>
<li><code>startEvent</code>:<br>
<code>touchstart</code> for touch-enabled devices, or <code>mousedown</code> for standard environments.</li>
<li><code>endEvent</code>:<br>
<code>touchend</code> for touch-enabled devices, or <code>mouseup</code> for standard environments.</li>
<li><code>moveEvent</code>:<br>
<code>touchmove</code> for touch-enabled devices, or <code>mousemove</code> for standard environments.</li>
<li><code>tapEvent</code>:<br>
<code>tap</code> for touch-enabled devices, or <code>click</code> for standard environments.</li>
</ul>
</section></section><section class="my-5" id="scroll-events-service"><h3>ScrollEventsService</h3><section><p>The <code>ScrollEventsService</code> adds additional scroll events to your element.</p>
<h4>Usage</h4>
<p>Create a new instance of the <code>ScrollEventsService</code> with an Element as argument to trigger the touch events on this element:</p>
<pre><code class="language-ts">import { ScrollEventsService } from '@ribajs/extras';
const element = document.querySelector('.trigger-touch-events');
const ScrollEventsService = new ScrollEventsService(element);
element.addEventListener('scrollended' as any, (scrollEvent: CustomEvent) =&gt; {
  console.debug('the user has stopped scrolling', scrollEvent);
});
</code></pre>
<h4>The Events</h4>
<ul>
<li><strong><code>scrollstart</code></strong><br>
Triggered as soon as scrolling begins on the target element.</li>
<li><strong><code>scrollended</code></strong><br>
Triggered as soon as scrolling is stopped on the target element.</li>
</ul>
</section></section></section><bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto scrollbar-x-hidden" rv-scrollbar-draggable="rv-scrollbar-draggable" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy></div></div></div></div></div></div>